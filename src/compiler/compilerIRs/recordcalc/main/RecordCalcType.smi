_require local "../../../../basis.smi"
_require local "../../../extensions/debug/main/Bug.smi"
_require "../../../libs/ids/main/LocalID.smi"
_require local "../../../data/symbols/main/RecordLabel.smi"
_require "../../../data/types/main/Types.ppg.smi"
_require local "../../../data/builtin/main/BuiltinTypes.smi"
_require local "../../../data/types/main/TypesBasics.smi"
_require "../../../compilerIRs/recordcalc/main/RecordCalc.ppg.smi"

structure RecordCalcType =
struct
  val typeOfInt : RecordCalc.tlint -> Types.ty
  val typeOfTlconst : RecordCalc.tlconst -> Types.ty
  val typeOfConst : RecordCalc.rcconst -> Types.ty
  val typeOfString : RecordCalc.tlstring -> Types.ty
  val typeOfValue : RecordCalc.rcvalue -> Types.ty
  val typeOfExp : RecordCalc.rcexp -> Types.ty
  type ty_subst = Types.ty BoundTypeVarID.Map.map
  type var_subst = RecordCalc.rcvalue VarID.Map.map
  type subst = {tySubst : ty_subst, varSubst : var_subst}
  val substExp : subst -> RecordCalc.rcexp -> RecordCalc.rcexp
  val instantiateVar : ty_subst -> RecordCalc.varInfo -> RecordCalc.varInfo
  val instantiateValue : ty_subst -> RecordCalc.rcvalue -> RecordCalc.rcvalue
  val instantiateExp : ty_subst -> RecordCalc.rcexp -> RecordCalc.rcexp
end
