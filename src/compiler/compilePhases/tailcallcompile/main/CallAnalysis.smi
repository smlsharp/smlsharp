_require local "../../../../basis.smi"
_require local "../../../extensions/debug/main/Bug.smi"
_require local "../../../data/symbols/main/RecordLabel.smi"
_require "../../../libs/ids/main/LocalID.smi"
_require "../../../data/types/main/Types.ppg.smi"
_require "../../../compilerIRs/recordcalc/main/RecordCalc.ppg.smi"

structure CallAnalysis =
struct
  type arg =
      {instTyList : Types.ty list,
       argExpList : RecordCalc.rcexp list,
       loc : RecordCalc.loc}
  type abs =
      {btvEnv : Types.btvEnv,
       constraints : Types.constraint list,
       argVarList : RecordCalc.varInfo list}

  val getAppSpine
      : RecordCalc.rcexp
        -> RecordCalc.rcexp * Types.ty option * arg list
  val getFnSpine : RecordCalc.rcexp -> abs list * RecordCalc.rcexp

  datatype caller = FN of VarID.id | ANON | TOPLEVEL
  datatype pos = CALL | TAIL
  type call = caller * pos * arg list
  type result = {var : RecordCalc.varInfo,
                 loc : RecordCalc.loc,
                 absList : abs list,
                 calls : call list}

  val analyze : RecordCalc.rcdecl list -> result VarID.Map.map
end
