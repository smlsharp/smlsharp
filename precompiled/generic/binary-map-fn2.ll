@sml_check_flag=external local_unnamed_addr global i32
@_SMLZN7LibBase8NotFoundE=external local_unnamed_addr global i8*
@_SMLZ5Match=external unnamed_addr constant i8*
@a=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLL5empty_297 to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL5empty_637 to void(...)*),i32 -2147483647}>,align 8
@b=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLL1N_303 to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL1N_640 to void(...)*),i32 -2147483647}>,align 8
@c=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLL1N_305 to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL1N_641 to void(...)*),i32 -2147483647}>,align 8
@d=private unnamed_addr constant<{[4x i8],i32,[52x i8]}><{[4x i8]zeroinitializer,i32 -2147483596,[52x i8]c"src/smlnj-lib/Util2/binary-map-fn2.sml:110.27(3794)\00"}>,align 8
@e=private unnamed_addr constant<{[4x i8],i32,[52x i8]}><{[4x i8]zeroinitializer,i32 -2147483596,[52x i8]c"src/smlnj-lib/Util2/binary-map-fn2.sml:113.27(3925)\00"}>,align 8
@f=private unnamed_addr constant<{[4x i8],i32,[52x i8]}><{[4x i8]zeroinitializer,i32 -2147483596,[52x i8]c"src/smlnj-lib/Util2/binary-map-fn2.sml:116.27(4100)\00"}>,align 8
@g=private unnamed_addr constant<{[4x i8],i32,[52x i8]}><{[4x i8]zeroinitializer,i32 -2147483596,[52x i8]c"src/smlnj-lib/Util2/binary-map-fn2.sml:119.27(4276)\00"}>,align 8
@h=private unnamed_addr constant<{[4x i8],i32,[52x i8]}><{[4x i8]zeroinitializer,i32 -2147483596,[52x i8]c"src/smlnj-lib/Util2/binary-map-fn2.sml:160.24(5857)\00"}>,align 8
@i=private unnamed_addr constant<{[4x i8],i32,[52x i8]}><{[4x i8]zeroinitializer,i32 -2147483596,[52x i8]c"src/smlnj-lib/Util2/binary-map-fn2.sml:164.27(6021)\00"}>,align 8
@j=private unnamed_addr constant<{[4x i8],i32,[52x i8]}><{[4x i8]zeroinitializer,i32 -2147483596,[52x i8]c"src/smlnj-lib/Util2/binary-map-fn2.sml:218.45(8254)\00"}>,align 8
@k=private unnamed_addr constant<{[4x i8],i32,[52x i8]}><{[4x i8]zeroinitializer,i32 -2147483596,[52x i8]c"src/smlnj-lib/Util2/binary-map-fn2.sml:229.45(8486)\00"}>,align 8
@l=private unnamed_addr constant<{[4x i8],i32,[52x i8]}><{[4x i8]zeroinitializer,i32 -2147483596,[52x i8]c"src/smlnj-lib/Util2/binary-map-fn2.sml:241.45(8786)\00"}>,align 8
@m=private unnamed_addr constant<{[4x i8],i32,[52x i8]}><{[4x i8]zeroinitializer,i32 -2147483596,[52x i8]c"src/smlnj-lib/Util2/binary-map-fn2.sml:252.45(9053)\00"}>,align 8
@n=private unnamed_addr constant<{[4x i8],i32,[52x i8]}><{[4x i8]zeroinitializer,i32 -2147483596,[52x i8]c"src/smlnj-lib/Util2/binary-map-fn2.sml:251.21(8991)\00"}>,align 8
@o=private unnamed_addr constant<{[4x i8],i32,[52x i8]}><{[4x i8]zeroinitializer,i32 -2147483596,[52x i8]c"src/smlnj-lib/Util2/binary-map-fn2.sml:261.29(9224)\00"}>,align 8
@p=private unnamed_addr constant<{[4x i8],i32,[52x i8]}><{[4x i8]zeroinitializer,i32 -2147483596,[52x i8]c"src/smlnj-lib/Util2/binary-map-fn2.sml:279.30(9705)\00"}>,align 8
@q=private unnamed_addr constant<{[4x i8],i32,i8*,i8*,i32}><{[4x i8]zeroinitializer,i32 -805306352,i8*null,i8*null,i32 3}>,align 8
@r=private unnamed_addr constant<{[4x i8],i32,[52x i8]}><{[4x i8]zeroinitializer,i32 -2147483596,[52x i8]c"src/smlnj-lib/Util2/binary-map-fn2.sml:539.2(17447)\00"}>,align 8
@s=private unnamed_addr constant<{[4x i8],i32,[52x i8]}><{[4x i8]zeroinitializer,i32 -2147483596,[52x i8]c"src/smlnj-lib/Util2/binary-map-fn2.sml:556.2(18152)\00"}>,align 8
@t=private unnamed_addr constant<{[4x i8],i32,[52x i8]}><{[4x i8]zeroinitializer,i32 -2147483596,[52x i8]c"src/smlnj-lib/Util2/binary-map-fn2.sml:575.2(18920)\00"}>,align 8
@u=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLLN12BinaryMapFn25emptyE_528 to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN12BinaryMapFn25emptyE_718 to void(...)*),i32 -2147483647}>,align 8
@v=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i32(i8*)*@_SMLLN12BinaryMapFn27isEmptyE_530 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn27isEmptyE_719 to void(...)*),i32 -2147483647}>,align 8
@w=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLLN12BinaryMapFn27isEmptyE_532 to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN12BinaryMapFn27isEmptyE_720 to void(...)*),i32 -2147483647}>,align 8
@x=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i32(i8*)*@_SMLLN12BinaryMapFn28numItemsE_565 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn28numItemsE_736 to void(...)*),i32 -2147483647}>,align 8
@y=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLLN12BinaryMapFn28numItemsE_567 to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN12BinaryMapFn28numItemsE_737 to void(...)*),i32 -2147483647}>,align 8
@z=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN1__12BinaryMapFn2E to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN1__12BinaryMapFn2E_769 to void(...)*),i32 -2147483647}>,align 8
@_SMLZN1__12BinaryMapFn2E=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@z,i64 0,i32 2)to i8*)
@_SML_ftab9ccefaabb4aedaba_binary_map_fn2=external global i8
@A=internal unnamed_addr global i1 false
declare void@llvm.gcroot(i8**,i8*)#0
declare i8*@sml_alloc(i32 inreg)local_unnamed_addr#0
declare void@sml_check(i32 inreg)local_unnamed_addr
declare void@sml_gcroot(i8*,void()*,i8*,i8*)local_unnamed_addr#0
declare void@sml_matchcomp_bug()local_unnamed_addr
declare void@sml_raise(i8*inreg)local_unnamed_addr#1
declare void@_SML_main34dcc998b8dca612_lib_base()local_unnamed_addr#2 gc"smlsharp"
declare void@_SML_load34dcc998b8dca612_lib_base(i8*)local_unnamed_addr
define private void@_SML_tabb9ccefaabb4aedaba_binary_map_fn2()#3{
unreachable
}
define void@_SML_load9ccefaabb4aedaba_binary_map_fn2(i8*%a)local_unnamed_addr#0{
%b=load i1,i1*@A,align 1
br i1%b,label%c,label%d
c:
ret void
d:
store i1 true,i1*@A,align 1
tail call void@_SML_load34dcc998b8dca612_lib_base(i8*%a)#0
tail call void@sml_gcroot(i8*%a,void()*@_SML_tabb9ccefaabb4aedaba_binary_map_fn2,i8*@_SML_ftab9ccefaabb4aedaba_binary_map_fn2,i8*null)#0
ret void
}
define void@_SML_main9ccefaabb4aedaba_binary_map_fn2()local_unnamed_addr#2 gc"smlsharp"{
tail call void@_SML_main34dcc998b8dca612_lib_base()#2
ret void
}
define internal fastcc i8*@_SMLL5empty_297(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
ret i8*null
}
define internal fastcc i8*@_SMLL5first_299(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
g:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
br label%e
e:
%f=phi i8*[%o,%aL],[%a,%g]
%h=phi i8*[%aM,%aL],[%b,%g]
store i8*%h,i8**%c,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%n,label%k
k:
call void@sml_check(i32 inreg%i)
%l=load i8*,i8**%c,align 8
%m=load i8*,i8**%d,align 8
br label%n
n:
%o=phi i8*[%m,%k],[%f,%e]
%p=phi i8*[%l,%k],[%h,%e]
%q=bitcast i8*%o to i32*
%r=load i32,i32*%q,align 4
%s=add i32%r,3
%t=sub i32 0,%r
%u=and i32%s,%t
%v=add i32%r,7
%w=add i32%v,%u
%x=and i32%w,-8
%y=icmp eq i8*%p,null
br i1%y,label%z,label%A
z:
ret i8*null
A:
%B=getelementptr inbounds i8,i8*%o,i64 4
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=getelementptr inbounds i8,i8*%o,i64 8
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
%H=sext i32%x to i64
%I=getelementptr inbounds i8,i8*%p,i64%H
%J=bitcast i8*%I to i8**
%K=load i8*,i8**%J,align 8
%L=icmp eq i8*%K,null
br i1%L,label%M,label%aL
M:
%N=add i32%x,23
%O=and i32%N,-8
%P=add i32%G,-1
%Q=add i32%P,%O
%R=sub i32 0,%G
%S=and i32%Q,%R
%T=and i32%P,%R
%U=add i32%G,7
%V=add i32%U,%T
%W=and i32%V,-8
%X=or i32%W,4
%Y=icmp eq i32%D,0
br i1%Y,label%ae,label%Z
Z:
store i8*null,i8**%c,align 8
%aa=sext i32%S to i64
%ab=getelementptr inbounds i8,i8*%p,i64%aa
%ac=bitcast i8*%ab to i8**
%ad=load i8*,i8**%ac,align 8
br label%aq
ae:
%af=call i8*@sml_alloc(i32 inreg%G)#0
%ag=getelementptr inbounds i8,i8*%af,i64 -4
%ah=bitcast i8*%ag to i32*
store i32%G,i32*%ah,align 4
%ai=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aj=sext i32%S to i64
%ak=getelementptr inbounds i8,i8*%ai,i64%aj
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%af,i8*%ak,i32%G,i1 false)
%al=load i8*,i8**%d,align 8
%am=getelementptr inbounds i8,i8*%al,i64 8
%an=bitcast i8*%am to i32*
%ao=load i32,i32*%an,align 4
%ap=getelementptr inbounds i8,i8*%al,i64 4
br label%aq
aq:
%ar=phi i8*[%ap,%ae],[%B,%Z]
%as=phi i32[%ao,%ae],[%G,%Z]
%at=phi i8*[%af,%ae],[%ad,%Z]
%au=bitcast i8*%ar to i32*
store i8*%at,i8**%c,align 8
store i8*null,i8**%d,align 8
%av=load i32,i32*%au,align 4
%aw=call i8*@sml_alloc(i32 inreg%X)#0
%ax=or i32%W,1342177280
%ay=getelementptr inbounds i8,i8*%aw,i64 -4
%az=bitcast i8*%ay to i32*
store i32%ax,i32*%az,align 4
call void@llvm.memset.p0i8.i32(i8*%aw,i8 0,i32%X,i1 false)
%aA=icmp eq i32%av,0
%aB=load i8*,i8**%c,align 8
%aC=sext i32%T to i64
%aD=getelementptr inbounds i8,i8*%aw,i64%aC
br i1%aA,label%aG,label%aE
aE:
%aF=bitcast i8*%aD to i8**
store i8*%aB,i8**%aF,align 8
br label%aH
aG:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aD,i8*%aB,i32%as,i1 false)
br label%aH
aH:
%aI=sext i32%W to i64
%aJ=getelementptr inbounds i8,i8*%aw,i64%aI
%aK=bitcast i8*%aJ to i32*
store i32%D,i32*%aK,align 4
ret i8*%aw
aL:
store i8*null,i8**%c,align 8
%aM=load i8*,i8**%J,align 8
br label%e
}
define internal fastcc i8*@_SMLL5first_300(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=call i8*@sml_alloc(i32 inreg 20)#0
%h=bitcast i8*%g to i32*
%i=getelementptr inbounds i8,i8*%g,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%g,i8**%d,align 8
store i32%f,i32*%h,align 4
%k=getelementptr inbounds i8,i8*%g,i64 4
%l=bitcast i8*%k to i32*
store i32%b,i32*%l,align 4
%m=getelementptr inbounds i8,i8*%g,i64 8
%n=bitcast i8*%m to i32*
store i32%c,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%g,i64 16
%p=bitcast i8*%o to i32*
store i32 0,i32*%p,align 4
%q=call i8*@sml_alloc(i32 inreg 28)#0
%r=getelementptr inbounds i8,i8*%q,i64 -4
%s=bitcast i8*%r to i32*
store i32 1342177304,i32*%s,align 4
%t=load i8*,i8**%d,align 8
%u=bitcast i8*%q to i8**
store i8*%t,i8**%u,align 8
%v=getelementptr inbounds i8,i8*%q,i64 8
%w=bitcast i8*%v to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL5first_299 to void(...)*),void(...)**%w,align 8
%x=getelementptr inbounds i8,i8*%q,i64 16
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL5first_299 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%q,i64 24
%A=bitcast i8*%z to i32*
store i32 -2147483647,i32*%A,align 4
ret i8*%q
}
define internal fastcc i8*@_SMLL6firsti_301(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
h:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%e,align 8
br label%f
f:
%g=phi i8*[%bE,%bD],[%b,%h]
store i8*%g,i8**%c,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%m,label%k
k:
call void@sml_check(i32 inreg%i)
%l=load i8*,i8**%c,align 8
br label%m
m:
%n=phi i8*[%l,%k],[%g,%f]
%o=load i8*,i8**%e,align 8
%p=getelementptr inbounds i8,i8*%o,i64 4
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=add i32%r,3
%t=sub i32 0,%r
%u=and i32%s,%t
%v=add i32%r,7
%w=add i32%v,%u
%x=and i32%w,-8
%y=getelementptr inbounds i8,i8*%o,i64 12
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=getelementptr inbounds i8,i8*%o,i64 8
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=bitcast i8*%o to i32*
%F=load i32,i32*%E,align 4
%G=icmp eq i8*%n,null
br i1%G,label%H,label%I
H:
ret i8*null
I:
%J=icmp eq i32%F,0
br i1%J,label%P,label%K
K:
%L=sext i32%u to i64
%M=getelementptr inbounds i8,i8*%n,i64%L
%N=bitcast i8*%M to i8**
%O=load i8*,i8**%N,align 8
br label%W
P:
%Q=call i8*@sml_alloc(i32 inreg%r)#0
%R=getelementptr inbounds i8,i8*%Q,i64 -4
%S=bitcast i8*%R to i32*
store i32%r,i32*%S,align 4
%T=load i8*,i8**%c,align 8
%U=sext i32%u to i64
%V=getelementptr inbounds i8,i8*%T,i64%U
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%Q,i8*%V,i32%r,i1 false)
br label%W
W:
%X=phi i8*[%T,%P],[%n,%K]
%Y=phi i8*[%Q,%P],[%O,%K]
store i8*%Y,i8**%d,align 8
%Z=sext i32%x to i64
%aa=getelementptr inbounds i8,i8*%X,i64%Z
%ab=bitcast i8*%aa to i8**
%ac=load i8*,i8**%ab,align 8
%ad=icmp eq i8*%ac,null
br i1%ad,label%ae,label%bD
ae:
%af=add i32%x,23
%ag=and i32%af,-8
%ah=add i32%A,-1
%ai=add i32%ah,%ag
%aj=sub i32 0,%A
%ak=and i32%ai,%aj
%al=add i32%r,-1
%am=and i32%al,%t
%an=add i32%al,%A
%ao=add i32%an,%am
%ap=and i32%ao,%aj
%aq=add i32%A,7
%ar=add i32%aq,%ap
%as=and i32%ar,-8
%at=lshr i32%ap,3
%au=lshr i32%am,3
%av=sub nsw i32%at,%au
%aw=shl i32%D,%av
%ax=or i32%aw,%F
%ay=or i32%as,4
%az=load i8*,i8**%e,align 8
%aA=getelementptr inbounds i8,i8*%az,i64 8
%aB=bitcast i8*%aA to i32*
%aC=load i32,i32*%aB,align 4
%aD=icmp eq i32%aC,0
br i1%aD,label%aJ,label%aE
aE:
store i8*null,i8**%c,align 8
%aF=sext i32%ak to i64
%aG=getelementptr inbounds i8,i8*%X,i64%aF
%aH=bitcast i8*%aG to i8**
%aI=load i8*,i8**%aH,align 8
br label%aX
aJ:
%aK=getelementptr inbounds i8,i8*%az,i64 12
%aL=bitcast i8*%aK to i32*
%aM=load i32,i32*%aL,align 4
%aN=call i8*@sml_alloc(i32 inreg%aM)#0
%aO=getelementptr inbounds i8,i8*%aN,i64 -4
%aP=bitcast i8*%aO to i32*
store i32%aM,i32*%aP,align 4
%aQ=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aR=sext i32%ak to i64
%aS=getelementptr inbounds i8,i8*%aQ,i64%aR
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aN,i8*%aS,i32%aM,i1 false)
%aT=load i8*,i8**%e,align 8
%aU=getelementptr inbounds i8,i8*%aT,i64 8
%aV=bitcast i8*%aU to i32*
%aW=load i32,i32*%aV,align 4
br label%aX
aX:
%aY=phi i32[%aW,%aJ],[%aC,%aE]
%aZ=phi i8*[%aT,%aJ],[%az,%aE]
%a0=phi i8*[%aN,%aJ],[%aI,%aE]
store i8*%a0,i8**%c,align 8
%a1=getelementptr inbounds i8,i8*%aZ,i64 4
%a2=bitcast i8*%a1 to i32*
%a3=load i32,i32*%a2,align 4
%a4=bitcast i8*%aZ to i32*
%a5=load i32,i32*%a4,align 4
%a6=getelementptr inbounds i8,i8*%aZ,i64 12
%a7=bitcast i8*%a6 to i32*
%a8=load i32,i32*%a7,align 4
store i8*null,i8**%e,align 8
%a9=call i8*@sml_alloc(i32 inreg%ay)#0
%ba=or i32%as,1342177280
%bb=getelementptr inbounds i8,i8*%a9,i64 -4
%bc=bitcast i8*%bb to i32*
store i32%ba,i32*%bc,align 4
store i8*%a9,i8**%e,align 8
call void@llvm.memset.p0i8.i32(i8*%a9,i8 0,i32%ay,i1 false)
%bd=icmp eq i32%a5,0
%be=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bf=sext i32%am to i64
%bg=getelementptr inbounds i8,i8*%a9,i64%bf
br i1%bd,label%bj,label%bh
bh:
%bi=bitcast i8*%bg to i8**
store i8*%be,i8**%bi,align 8
br label%bk
bj:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bg,i8*%be,i32%a3,i1 false)
br label%bk
bk:
%bl=icmp eq i32%aY,0
%bm=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bn=sext i32%ap to i64
%bo=getelementptr inbounds i8,i8*%a9,i64%bn
br i1%bl,label%br,label%bp
bp:
%bq=bitcast i8*%bo to i8**
store i8*%bm,i8**%bq,align 8
br label%bs
br:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bo,i8*%bm,i32%a8,i1 false)
br label%bs
bs:
%bt=sext i32%as to i64
%bu=getelementptr inbounds i8,i8*%a9,i64%bt
%bv=bitcast i8*%bu to i32*
store i32%ax,i32*%bv,align 4
%bw=call i8*@sml_alloc(i32 inreg 12)#0
%bx=getelementptr inbounds i8,i8*%bw,i64 -4
%by=bitcast i8*%bx to i32*
store i32 1342177288,i32*%by,align 4
%bz=load i8*,i8**%e,align 8
%bA=bitcast i8*%bw to i8**
store i8*%bz,i8**%bA,align 8
%bB=getelementptr inbounds i8,i8*%bw,i64 8
%bC=bitcast i8*%bB to i32*
store i32 1,i32*%bC,align 4
ret i8*%bw
bD:
store i8*null,i8**%d,align 8
store i8*null,i8**%c,align 8
%bE=load i8*,i8**%ab,align 8
br label%f
}
define internal fastcc i8*@_SMLL6firsti_302(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=bitcast i8*%j to i32*
%l=getelementptr inbounds i8,i8*%j,i64 -4
%m=bitcast i8*%l to i32*
store i32 1342177296,i32*%m,align 4
store i8*%j,i8**%d,align 8
store i32%f,i32*%k,align 4
%n=getelementptr inbounds i8,i8*%j,i64 4
%o=bitcast i8*%n to i32*
store i32%i,i32*%o,align 4
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i32*
store i32%b,i32*%q,align 4
%r=getelementptr inbounds i8,i8*%j,i64 12
%s=bitcast i8*%r to i32*
store i32%c,i32*%s,align 4
%t=getelementptr inbounds i8,i8*%j,i64 16
%u=bitcast i8*%t to i32*
store i32 0,i32*%u,align 4
%v=call i8*@sml_alloc(i32 inreg 28)#0
%w=getelementptr inbounds i8,i8*%v,i64 -4
%x=bitcast i8*%w to i32*
store i32 1342177304,i32*%x,align 4
%y=load i8*,i8**%d,align 8
%z=bitcast i8*%v to i8**
store i8*%y,i8**%z,align 8
%A=getelementptr inbounds i8,i8*%v,i64 8
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6firsti_301 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%v,i64 16
%D=bitcast i8*%C to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6firsti_301 to void(...)*),void(...)**%D,align 8
%E=getelementptr inbounds i8,i8*%v,i64 24
%F=bitcast i8*%E to i32*
store i32 -2147483647,i32*%F,align 4
ret i8*%v
}
define internal fastcc i8*@_SMLL1N_303(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
ret i8*null
}
define internal fastcc i8*@_SMLL1N_305(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
ret i8*null
}
define internal fastcc i8*@_SMLL1N_307(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
o:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%g,align 8
store i8*%b,i8**%c,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%m,label%k
k:
call void@sml_check(i32 inreg%i)
%l=load i8*,i8**%g,align 8
br label%m
m:
%n=phi i8*[%l,%k],[%a,%o]
%p=getelementptr inbounds i8,i8*%n,i64 4
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=add i32%r,-1
%t=sub i32 0,%r
%u=and i32%s,%t
%v=getelementptr inbounds i8,i8*%n,i64 12
%w=bitcast i8*%v to i32*
%x=load i32,i32*%w,align 4
%y=add i32%s,%x
%z=add i32%y,%u
%A=sub i32 0,%x
%B=and i32%z,%A
%C=add i32%x,7
%D=add i32%C,%B
%E=and i32%D,-8
%F=add i32%E,15
%G=and i32%F,-8
%H=add i32%r,3
%I=and i32%H,%t
%J=add i32%r,7
%K=add i32%J,%I
%L=and i32%K,-8
%M=add i32%L,15
%N=and i32%M,-8
%O=add i32%C,%N
%P=and i32%O,%A
%Q=add i32%C,%P
%R=and i32%Q,-8
%S=lshr i32%P,3
%T=lshr i32%M,3
%U=sub nsw i32%S,%T
%V=lshr i32%K,3
%W=sub nsw i32%T,%V
%X=lshr i32%I,3
%Y=sub nsw i32%V,%X
%Z=getelementptr inbounds i8,i8*%n,i64 8
%aa=bitcast i8*%Z to i32*
%ab=load i32,i32*%aa,align 4
%ac=shl i32%ab,%U
%ad=or i32%ac,1
%ae=shl i32%ad,%W
%af=or i32%ae,1
%ag=shl i32%af,%Y
%ah=bitcast i8*%n to i32*
%ai=load i32,i32*%ah,align 4
%aj=or i32%ag,%ai
%ak=shl i32%aj,%X
%al=or i32%R,4
%am=icmp eq i32%ai,0
br i1%am,label%at,label%an
an:
%ao=load i8*,i8**%c,align 8
%ap=sext i32%u to i64
%aq=getelementptr inbounds i8,i8*%ao,i64%ap
%ar=bitcast i8*%aq to i8**
%as=load i8*,i8**%ar,align 8
br label%aE
at:
%au=call i8*@sml_alloc(i32 inreg%r)#0
%av=getelementptr inbounds i8,i8*%au,i64 -4
%aw=bitcast i8*%av to i32*
store i32%r,i32*%aw,align 4
%ax=load i8*,i8**%c,align 8
%ay=sext i32%u to i64
%az=getelementptr inbounds i8,i8*%ax,i64%ay
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%au,i8*%az,i32%r,i1 false)
%aA=load i8*,i8**%g,align 8
%aB=getelementptr inbounds i8,i8*%aA,i64 8
%aC=bitcast i8*%aB to i32*
%aD=load i32,i32*%aC,align 4
br label%aE
aE:
%aF=phi i8*[%ax,%at],[%ao,%an]
%aG=phi i32[%aD,%at],[%ab,%an]
%aH=phi i8*[%aA,%at],[%n,%an]
%aI=phi i8*[%au,%at],[%as,%an]
store i8*%aI,i8**%d,align 8
%aJ=icmp eq i32%aG,0
br i1%aJ,label%aP,label%aK
aK:
%aL=sext i32%B to i64
%aM=getelementptr inbounds i8,i8*%aF,i64%aL
%aN=bitcast i8*%aM to i8**
%aO=load i8*,i8**%aN,align 8
br label%aZ
aP:
%aQ=getelementptr inbounds i8,i8*%aH,i64 12
%aR=bitcast i8*%aQ to i32*
%aS=load i32,i32*%aR,align 4
%aT=call i8*@sml_alloc(i32 inreg%aS)#0
%aU=getelementptr inbounds i8,i8*%aT,i64 -4
%aV=bitcast i8*%aU to i32*
store i32%aS,i32*%aV,align 4
%aW=load i8*,i8**%c,align 8
%aX=sext i32%B to i64
%aY=getelementptr inbounds i8,i8*%aW,i64%aX
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aT,i8*%aY,i32%aS,i1 false)
br label%aZ
aZ:
%a0=phi i8*[%aW,%aP],[%aF,%aK]
%a1=phi i8*[%aT,%aP],[%aO,%aK]
store i8*%a1,i8**%e,align 8
%a2=sext i32%E to i64
%a3=getelementptr inbounds i8,i8*%a0,i64%a2
%a4=bitcast i8*%a3 to i8**
%a5=load i8*,i8**%a4,align 8
store i8*%a5,i8**%f,align 8
%a6=icmp eq i8*%a5,null
%a7=bitcast i8*%a5 to i32*
br i1%a6,label%a8,label%et
a8:
store i8*null,i8**%c,align 8
%a9=sext i32%G to i64
%ba=getelementptr inbounds i8,i8*%a0,i64%a9
%bb=bitcast i8*%ba to i8**
%bc=load i8*,i8**%bb,align 8
store i8*%bc,i8**%f,align 8
%bd=icmp eq i8*%bc,null
br i1%bd,label%be,label%bV
be:
store i8*null,i8**%f,align 8
%bf=load i8*,i8**%g,align 8
%bg=getelementptr inbounds i8,i8*%bf,i64 4
%bh=bitcast i8*%bg to i32*
%bi=load i32,i32*%bh,align 4
%bj=bitcast i8*%bf to i32*
%bk=load i32,i32*%bj,align 4
%bl=getelementptr inbounds i8,i8*%bf,i64 12
%bm=bitcast i8*%bl to i32*
%bn=load i32,i32*%bm,align 4
store i8*null,i8**%g,align 8
%bo=getelementptr inbounds i8,i8*%bf,i64 8
%bp=bitcast i8*%bo to i32*
%bq=load i32,i32*%bp,align 4
%br=call i8*@sml_alloc(i32 inreg%al)#0
%bs=or i32%R,1342177280
%bt=bitcast i8*%br to i32*
%bu=getelementptr inbounds i8,i8*%br,i64 -4
%bv=bitcast i8*%bu to i32*
store i32%bs,i32*%bv,align 4
call void@llvm.memset.p0i8.i32(i8*%br,i8 0,i32%al,i1 false)
store i32 1,i32*%bt,align 4
%bw=icmp eq i32%bk,0
%bx=load i8*,i8**%d,align 8
%by=sext i32%I to i64
%bz=getelementptr inbounds i8,i8*%br,i64%by
br i1%bw,label%bC,label%bA
bA:
%bB=bitcast i8*%bz to i8**
store i8*%bx,i8**%bB,align 8
br label%bD
bC:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bz,i8*%bx,i32%bi,i1 false)
br label%bD
bD:
%bE=sext i32%L to i64
%bF=getelementptr inbounds i8,i8*%br,i64%bE
%bG=bitcast i8*%bF to i8**
store i8*null,i8**%bG,align 8
%bH=sext i32%N to i64
%bI=getelementptr inbounds i8,i8*%br,i64%bH
%bJ=bitcast i8*%bI to i8**
store i8*null,i8**%bJ,align 8
%bK=icmp eq i32%bq,0
%bL=load i8*,i8**%e,align 8
%bM=sext i32%P to i64
%bN=getelementptr inbounds i8,i8*%br,i64%bM
br i1%bK,label%bQ,label%bO
bO:
%bP=bitcast i8*%bN to i8**
store i8*%bL,i8**%bP,align 8
br label%bR
bQ:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bN,i8*%bL,i32%bn,i1 false)
br label%bR
bR:
%bS=sext i32%R to i64
%bT=getelementptr inbounds i8,i8*%br,i64%bS
%bU=bitcast i8*%bT to i32*
store i32%ak,i32*%bU,align 4
ret i8*%br
bV:
%bW=bitcast i8*%bc to i32*
%bX=load i32,i32*%bW,align 4
%bY=add nsw i32%bX,1
%bZ=load i8*,i8**%g,align 8
%b0=getelementptr inbounds i8,i8*%bZ,i64 4
%b1=bitcast i8*%b0 to i32*
%b2=load i32,i32*%b1,align 4
%b3=bitcast i8*%bZ to i32*
%b4=load i32,i32*%b3,align 4
%b5=getelementptr inbounds i8,i8*%bZ,i64 12
%b6=bitcast i8*%b5 to i32*
%b7=load i32,i32*%b6,align 4
%b8=getelementptr inbounds i8,i8*%bZ,i64 8
%b9=bitcast i8*%b8 to i32*
%ca=load i32,i32*%b9,align 4
%cb=call i8*@sml_alloc(i32 inreg%al)#0
%cc=or i32%R,1342177280
%cd=getelementptr inbounds i8,i8*%cb,i64 -4
%ce=bitcast i8*%cd to i32*
store i32%cc,i32*%ce,align 4
store i8*%cb,i8**%c,align 8
call void@llvm.memset.p0i8.i32(i8*%cb,i8 0,i32%al,i1 false)
%cf=bitcast i8*%cb to i32*
store i32%bY,i32*%cf,align 4
%cg=icmp eq i32%b4,0
%ch=load i8*,i8**%d,align 8
%ci=sext i32%I to i64
%cj=getelementptr inbounds i8,i8*%cb,i64%ci
br i1%cg,label%cm,label%ck
ck:
%cl=bitcast i8*%cj to i8**
store i8*%ch,i8**%cl,align 8
br label%cn
cm:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cj,i8*%ch,i32%b2,i1 false)
br label%cn
cn:
%co=sext i32%L to i64
%cp=getelementptr inbounds i8,i8*%cb,i64%co
%cq=bitcast i8*%cp to i8**
store i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@c,i64 0,i32 2)to i8*),i8**%cq,align 8
%cr=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%cs=sext i32%N to i64
%ct=getelementptr inbounds i8,i8*%cb,i64%cs
%cu=bitcast i8*%ct to i8**
store i8*%cr,i8**%cu,align 8
%cv=icmp eq i32%ca,0
%cw=load i8*,i8**%e,align 8
%cx=sext i32%P to i64
%cy=getelementptr inbounds i8,i8*%cb,i64%cx
br i1%cv,label%cB,label%cz
cz:
%cA=bitcast i8*%cy to i8**
store i8*%cw,i8**%cA,align 8
br label%cC
cB:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cy,i8*%cw,i32%b7,i1 false)
br label%cC
cC:
%cD=sext i32%R to i64
%cE=getelementptr inbounds i8,i8*%cb,i64%cD
%cF=bitcast i8*%cE to i32*
store i32%ak,i32*%cF,align 4
%cG=load i32,i32*%cf,align 4
%cH=load i8*,i8**%g,align 8
%cI=bitcast i8*%cH to i32*
%cJ=load i32,i32*%cI,align 4
%cK=icmp eq i32%cJ,0
br i1%cK,label%cO,label%cL
cL:
%cM=bitcast i8*%cj to i8**
%cN=load i8*,i8**%cM,align 8
br label%c0
cO:
%cP=getelementptr inbounds i8,i8*%cH,i64 4
%cQ=bitcast i8*%cP to i32*
%cR=load i32,i32*%cQ,align 4
%cS=call i8*@sml_alloc(i32 inreg%cR)#0
%cT=getelementptr inbounds i8,i8*%cS,i64 -4
%cU=bitcast i8*%cT to i32*
store i32%cR,i32*%cU,align 4
%cV=load i8*,i8**%c,align 8
%cW=getelementptr inbounds i8,i8*%cV,i64%ci
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cS,i8*%cW,i32%cR,i1 false)
%cX=load i8*,i8**%g,align 8
%cY=getelementptr inbounds i8,i8*%cV,i64%co
%cZ=bitcast i8*%cY to i8**
br label%c0
c0:
%c1=phi i8**[%cZ,%cO],[%cq,%cL]
%c2=phi i8*[%cX,%cO],[%cH,%cL]
%c3=phi i8*[%cS,%cO],[%cN,%cL]
store i8*%c3,i8**%d,align 8
%c4=load i8*,i8**%c1,align 8
%c5=getelementptr inbounds i8,i8*%c4,i64 16
%c6=bitcast i8*%c5 to i8*(i8*,i8*,i8*)**
%c7=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%c6,align 8
%c8=bitcast i8*%c4 to i8**
%c9=load i8*,i8**%c8,align 8
store i8*%c9,i8**%e,align 8
%da=getelementptr inbounds i8,i8*%c2,i64 8
%db=bitcast i8*%da to i32*
%dc=load i32,i32*%db,align 4
%dd=getelementptr inbounds i8,i8*%c2,i64 12
%de=bitcast i8*%dd to i32*
%df=load i32,i32*%de,align 4
%dg=call i8*@sml_alloc(i32 inreg 4)#0
%dh=bitcast i8*%dg to i32*
%di=getelementptr inbounds i8,i8*%dg,i64 -4
%dj=bitcast i8*%di to i32*
store i32 4,i32*%dj,align 4
store i8*%dg,i8**%f,align 8
store i32%dc,i32*%dh,align 4
%dk=call i8*@sml_alloc(i32 inreg 4)#0
%dl=bitcast i8*%dk to i32*
%dm=getelementptr inbounds i8,i8*%dk,i64 -4
%dn=bitcast i8*%dm to i32*
store i32 4,i32*%dn,align 4
store i32%df,i32*%dl,align 4
%do=load i8*,i8**%e,align 8
%dp=load i8*,i8**%f,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%f,align 8
%dq=call fastcc i8*%c7(i8*inreg%do,i8*inreg%dp,i8*inreg%dk)
store i8*%dq,i8**%e,align 8
%dr=load i8*,i8**%c,align 8
%ds=getelementptr inbounds i8,i8*%dr,i64%cs
%dt=bitcast i8*%ds to i8**
%du=load i8*,i8**%dt,align 8
store i8*%du,i8**%f,align 8
%dv=load i8*,i8**%g,align 8
%dw=getelementptr inbounds i8,i8*%dv,i64 8
%dx=bitcast i8*%dw to i32*
%dy=load i32,i32*%dx,align 4
%dz=icmp eq i32%dy,0
br i1%dz,label%dE,label%dA
dA:
store i8*null,i8**%c,align 8
%dB=getelementptr inbounds i8,i8*%dr,i64%cx
%dC=bitcast i8*%dB to i8**
%dD=load i8*,i8**%dC,align 8
br label%dR
dE:
%dF=getelementptr inbounds i8,i8*%dv,i64 12
%dG=bitcast i8*%dF to i32*
%dH=load i32,i32*%dG,align 4
%dI=call i8*@sml_alloc(i32 inreg%dH)#0
%dJ=getelementptr inbounds i8,i8*%dI,i64 -4
%dK=bitcast i8*%dJ to i32*
store i32%dH,i32*%dK,align 4
%dL=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%dM=getelementptr inbounds i8,i8*%dL,i64%cx
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dI,i8*%dM,i32%dH,i1 false)
%dN=load i8*,i8**%g,align 8
%dO=getelementptr inbounds i8,i8*%dN,i64 8
%dP=bitcast i8*%dO to i32*
%dQ=load i32,i32*%dP,align 4
br label%dR
dR:
%dS=phi i32[%dQ,%dE],[%dy,%dA]
%dT=phi i8*[%dN,%dE],[%dv,%dA]
%dU=phi i8*[%dI,%dE],[%dD,%dA]
store i8*%dU,i8**%c,align 8
%dV=getelementptr inbounds i8,i8*%dT,i64 4
%dW=bitcast i8*%dV to i32*
%dX=load i32,i32*%dW,align 4
%dY=bitcast i8*%dT to i32*
%dZ=load i32,i32*%dY,align 4
%d0=getelementptr inbounds i8,i8*%dT,i64 12
%d1=bitcast i8*%d0 to i32*
%d2=load i32,i32*%d1,align 4
store i8*null,i8**%g,align 8
%d3=call i8*@sml_alloc(i32 inreg%al)#0
%d4=bitcast i8*%d3 to i32*
%d5=getelementptr inbounds i8,i8*%d3,i64 -4
%d6=bitcast i8*%d5 to i32*
store i32%cc,i32*%d6,align 4
call void@llvm.memset.p0i8.i32(i8*%d3,i8 0,i32%al,i1 false)
store i32%cG,i32*%d4,align 4
%d7=icmp eq i32%dZ,0
%d8=load i8*,i8**%d,align 8
%d9=getelementptr inbounds i8,i8*%d3,i64%ci
br i1%d7,label%ec,label%ea
ea:
%eb=bitcast i8*%d9 to i8**
store i8*%d8,i8**%eb,align 8
br label%ed
ec:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%d9,i8*%d8,i32%dX,i1 false)
br label%ed
ed:
%ee=load i8*,i8**%e,align 8
%ef=getelementptr inbounds i8,i8*%d3,i64%co
%eg=bitcast i8*%ef to i8**
store i8*%ee,i8**%eg,align 8
%eh=load i8*,i8**%f,align 8
%ei=getelementptr inbounds i8,i8*%d3,i64%cs
%ej=bitcast i8*%ei to i8**
store i8*%eh,i8**%ej,align 8
%ek=icmp eq i32%dS,0
%el=load i8*,i8**%c,align 8
%em=getelementptr inbounds i8,i8*%d3,i64%cx
br i1%ek,label%ep,label%en
en:
%eo=bitcast i8*%em to i8**
store i8*%el,i8**%eo,align 8
br label%eq
ep:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%em,i8*%el,i32%d2,i1 false)
br label%eq
eq:
%er=getelementptr inbounds i8,i8*%d3,i64%cD
%es=bitcast i8*%er to i32*
store i32%ak,i32*%es,align 4
ret i8*%d3
et:
%eu=sext i32%G to i64
%ev=getelementptr inbounds i8,i8*%a0,i64%eu
%ew=bitcast i8*%ev to i8**
%ex=load i8*,i8**%ew,align 8
store i8*%ex,i8**%c,align 8
%ey=icmp eq i8*%ex,null
br i1%ey,label%ez,label%g7
ez:
store i8*null,i8**%c,align 8
%eA=load i32,i32*%a7,align 4
%eB=add nsw i32%eA,1
%eC=load i8*,i8**%g,align 8
%eD=getelementptr inbounds i8,i8*%eC,i64 4
%eE=bitcast i8*%eD to i32*
%eF=load i32,i32*%eE,align 4
%eG=bitcast i8*%eC to i32*
%eH=load i32,i32*%eG,align 4
%eI=getelementptr inbounds i8,i8*%eC,i64 12
%eJ=bitcast i8*%eI to i32*
%eK=load i32,i32*%eJ,align 4
%eL=getelementptr inbounds i8,i8*%eC,i64 8
%eM=bitcast i8*%eL to i32*
%eN=load i32,i32*%eM,align 4
%eO=call i8*@sml_alloc(i32 inreg%al)#0
%eP=or i32%R,1342177280
%eQ=getelementptr inbounds i8,i8*%eO,i64 -4
%eR=bitcast i8*%eQ to i32*
store i32%eP,i32*%eR,align 4
store i8*%eO,i8**%c,align 8
call void@llvm.memset.p0i8.i32(i8*%eO,i8 0,i32%al,i1 false)
%eS=bitcast i8*%eO to i32*
store i32%eB,i32*%eS,align 4
%eT=icmp eq i32%eH,0
%eU=load i8*,i8**%d,align 8
%eV=sext i32%I to i64
%eW=getelementptr inbounds i8,i8*%eO,i64%eV
br i1%eT,label%eZ,label%eX
eX:
%eY=bitcast i8*%eW to i8**
store i8*%eU,i8**%eY,align 8
br label%e0
eZ:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%eW,i8*%eU,i32%eF,i1 false)
br label%e0
e0:
%e1=load i8*,i8**%f,align 8
%e2=sext i32%L to i64
%e3=getelementptr inbounds i8,i8*%eO,i64%e2
%e4=bitcast i8*%e3 to i8**
store i8*%e1,i8**%e4,align 8
%e5=sext i32%N to i64
%e6=getelementptr inbounds i8,i8*%eO,i64%e5
%e7=bitcast i8*%e6 to i8**
store i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@b,i64 0,i32 2)to i8*),i8**%e7,align 8
%e8=icmp eq i32%eN,0
%e9=load i8*,i8**%e,align 8
%fa=sext i32%P to i64
%fb=getelementptr inbounds i8,i8*%eO,i64%fa
br i1%e8,label%fe,label%fc
fc:
%fd=bitcast i8*%fb to i8**
store i8*%e9,i8**%fd,align 8
br label%ff
fe:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%fb,i8*%e9,i32%eK,i1 false)
br label%ff
ff:
%fg=sext i32%R to i64
%fh=getelementptr inbounds i8,i8*%eO,i64%fg
%fi=bitcast i8*%fh to i32*
store i32%ak,i32*%fi,align 4
%fj=load i32,i32*%eS,align 4
%fk=load i8*,i8**%g,align 8
%fl=bitcast i8*%fk to i32*
%fm=load i32,i32*%fl,align 4
%fn=icmp eq i32%fm,0
br i1%fn,label%fr,label%fo
fo:
%fp=bitcast i8*%eW to i8**
%fq=load i8*,i8**%fp,align 8
br label%fF
fr:
%fs=getelementptr inbounds i8,i8*%fk,i64 4
%ft=bitcast i8*%fs to i32*
%fu=load i32,i32*%ft,align 4
%fv=call i8*@sml_alloc(i32 inreg%fu)#0
%fw=getelementptr inbounds i8,i8*%fv,i64 -4
%fx=bitcast i8*%fw to i32*
store i32%fu,i32*%fx,align 4
%fy=load i8*,i8**%c,align 8
%fz=getelementptr inbounds i8,i8*%fy,i64%eV
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%fv,i8*%fz,i32%fu,i1 false)
%fA=load i8*,i8**%g,align 8
%fB=getelementptr inbounds i8,i8*%fy,i64%e2
%fC=bitcast i8*%fB to i8**
%fD=getelementptr inbounds i8,i8*%fy,i64%e5
%fE=bitcast i8*%fD to i8**
br label%fF
fF:
%fG=phi i8**[%fE,%fr],[%e7,%fo]
%fH=phi i8**[%fC,%fr],[%e4,%fo]
%fI=phi i8*[%fA,%fr],[%fk,%fo]
%fJ=phi i8*[%fv,%fr],[%fq,%fo]
store i8*%fJ,i8**%d,align 8
%fK=load i8*,i8**%fH,align 8
store i8*%fK,i8**%e,align 8
%fL=load i8*,i8**%fG,align 8
%fM=getelementptr inbounds i8,i8*%fL,i64 16
%fN=bitcast i8*%fM to i8*(i8*,i8*,i8*)**
%fO=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%fN,align 8
%fP=bitcast i8*%fL to i8**
%fQ=load i8*,i8**%fP,align 8
store i8*%fQ,i8**%f,align 8
%fR=getelementptr inbounds i8,i8*%fI,i64 8
%fS=bitcast i8*%fR to i32*
%fT=load i32,i32*%fS,align 4
%fU=getelementptr inbounds i8,i8*%fI,i64 12
%fV=bitcast i8*%fU to i32*
%fW=load i32,i32*%fV,align 4
%fX=call i8*@sml_alloc(i32 inreg 4)#0
%fY=bitcast i8*%fX to i32*
%fZ=getelementptr inbounds i8,i8*%fX,i64 -4
%f0=bitcast i8*%fZ to i32*
store i32 4,i32*%f0,align 4
store i8*%fX,i8**%h,align 8
store i32%fT,i32*%fY,align 4
%f1=call i8*@sml_alloc(i32 inreg 4)#0
%f2=bitcast i8*%f1 to i32*
%f3=getelementptr inbounds i8,i8*%f1,i64 -4
%f4=bitcast i8*%f3 to i32*
store i32 4,i32*%f4,align 4
store i32%fW,i32*%f2,align 4
%f5=load i8*,i8**%f,align 8
%f6=load i8*,i8**%h,align 8
store i8*null,i8**%f,align 8
store i8*null,i8**%h,align 8
%f7=call fastcc i8*%fO(i8*inreg%f5,i8*inreg%f6,i8*inreg%f1)
store i8*%f7,i8**%f,align 8
%f8=load i8*,i8**%g,align 8
%f9=getelementptr inbounds i8,i8*%f8,i64 8
%ga=bitcast i8*%f9 to i32*
%gb=load i32,i32*%ga,align 4
%gc=icmp eq i32%gb,0
br i1%gc,label%gi,label%gd
gd:
%ge=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%gf=getelementptr inbounds i8,i8*%ge,i64%fa
%gg=bitcast i8*%gf to i8**
%gh=load i8*,i8**%gg,align 8
br label%gv
gi:
%gj=getelementptr inbounds i8,i8*%f8,i64 12
%gk=bitcast i8*%gj to i32*
%gl=load i32,i32*%gk,align 4
%gm=call i8*@sml_alloc(i32 inreg%gl)#0
%gn=getelementptr inbounds i8,i8*%gm,i64 -4
%go=bitcast i8*%gn to i32*
store i32%gl,i32*%go,align 4
%gp=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%gq=getelementptr inbounds i8,i8*%gp,i64%fa
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%gm,i8*%gq,i32%gl,i1 false)
%gr=load i8*,i8**%g,align 8
%gs=getelementptr inbounds i8,i8*%gr,i64 8
%gt=bitcast i8*%gs to i32*
%gu=load i32,i32*%gt,align 4
br label%gv
gv:
%gw=phi i32[%gu,%gi],[%gb,%gd]
%gx=phi i8*[%gr,%gi],[%f8,%gd]
%gy=phi i8*[%gm,%gi],[%gh,%gd]
store i8*%gy,i8**%c,align 8
%gz=getelementptr inbounds i8,i8*%gx,i64 4
%gA=bitcast i8*%gz to i32*
%gB=load i32,i32*%gA,align 4
%gC=bitcast i8*%gx to i32*
%gD=load i32,i32*%gC,align 4
%gE=getelementptr inbounds i8,i8*%gx,i64 12
%gF=bitcast i8*%gE to i32*
%gG=load i32,i32*%gF,align 4
store i8*null,i8**%g,align 8
%gH=call i8*@sml_alloc(i32 inreg%al)#0
%gI=bitcast i8*%gH to i32*
%gJ=getelementptr inbounds i8,i8*%gH,i64 -4
%gK=bitcast i8*%gJ to i32*
store i32%eP,i32*%gK,align 4
call void@llvm.memset.p0i8.i32(i8*%gH,i8 0,i32%al,i1 false)
store i32%fj,i32*%gI,align 4
%gL=icmp eq i32%gD,0
%gM=load i8*,i8**%d,align 8
%gN=getelementptr inbounds i8,i8*%gH,i64%eV
br i1%gL,label%gQ,label%gO
gO:
%gP=bitcast i8*%gN to i8**
store i8*%gM,i8**%gP,align 8
br label%gR
gQ:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%gN,i8*%gM,i32%gB,i1 false)
br label%gR
gR:
%gS=load i8*,i8**%e,align 8
%gT=getelementptr inbounds i8,i8*%gH,i64%e2
%gU=bitcast i8*%gT to i8**
store i8*%gS,i8**%gU,align 8
%gV=load i8*,i8**%f,align 8
%gW=getelementptr inbounds i8,i8*%gH,i64%e5
%gX=bitcast i8*%gW to i8**
store i8*%gV,i8**%gX,align 8
%gY=icmp eq i32%gw,0
%gZ=load i8*,i8**%c,align 8
%g0=getelementptr inbounds i8,i8*%gH,i64%fa
br i1%gY,label%g3,label%g1
g1:
%g2=bitcast i8*%g0 to i8**
store i8*%gZ,i8**%g2,align 8
br label%g4
g3:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%g0,i8*%gZ,i32%gG,i1 false)
br label%g4
g4:
%g5=getelementptr inbounds i8,i8*%gH,i64%fg
%g6=bitcast i8*%g5 to i32*
store i32%ak,i32*%g6,align 4
ret i8*%gH
g7:
%g8=load i32,i32*%a7,align 4
%g9=add nsw i32%g8,1
%ha=bitcast i8*%ex to i32*
%hb=load i32,i32*%ha,align 4
%hc=add nsw i32%g9,%hb
%hd=load i8*,i8**%g,align 8
%he=getelementptr inbounds i8,i8*%hd,i64 4
%hf=bitcast i8*%he to i32*
%hg=load i32,i32*%hf,align 4
%hh=bitcast i8*%hd to i32*
%hi=load i32,i32*%hh,align 4
%hj=getelementptr inbounds i8,i8*%hd,i64 12
%hk=bitcast i8*%hj to i32*
%hl=load i32,i32*%hk,align 4
store i8*null,i8**%g,align 8
%hm=getelementptr inbounds i8,i8*%hd,i64 8
%hn=bitcast i8*%hm to i32*
%ho=load i32,i32*%hn,align 4
%hp=call i8*@sml_alloc(i32 inreg%al)#0
%hq=or i32%R,1342177280
%hr=bitcast i8*%hp to i32*
%hs=getelementptr inbounds i8,i8*%hp,i64 -4
%ht=bitcast i8*%hs to i32*
store i32%hq,i32*%ht,align 4
call void@llvm.memset.p0i8.i32(i8*%hp,i8 0,i32%al,i1 false)
store i32%hc,i32*%hr,align 4
%hu=icmp eq i32%hi,0
%hv=load i8*,i8**%d,align 8
%hw=sext i32%I to i64
%hx=getelementptr inbounds i8,i8*%hp,i64%hw
br i1%hu,label%hA,label%hy
hy:
%hz=bitcast i8*%hx to i8**
store i8*%hv,i8**%hz,align 8
br label%hB
hA:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%hx,i8*%hv,i32%hg,i1 false)
br label%hB
hB:
%hC=load i8*,i8**%f,align 8
%hD=sext i32%L to i64
%hE=getelementptr inbounds i8,i8*%hp,i64%hD
%hF=bitcast i8*%hE to i8**
store i8*%hC,i8**%hF,align 8
%hG=load i8*,i8**%c,align 8
%hH=sext i32%N to i64
%hI=getelementptr inbounds i8,i8*%hp,i64%hH
%hJ=bitcast i8*%hI to i8**
store i8*%hG,i8**%hJ,align 8
%hK=icmp eq i32%ho,0
%hL=load i8*,i8**%e,align 8
%hM=sext i32%P to i64
%hN=getelementptr inbounds i8,i8*%hp,i64%hM
br i1%hK,label%hQ,label%hO
hO:
%hP=bitcast i8*%hN to i8**
store i8*%hL,i8**%hP,align 8
br label%hR
hQ:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%hN,i8*%hL,i32%hl,i1 false)
br label%hR
hR:
%hS=sext i32%R to i64
%hT=getelementptr inbounds i8,i8*%hp,i64%hS
%hU=bitcast i8*%hT to i32*
store i32%ak,i32*%hU,align 4
ret i8*%hp
}
define internal fastcc i8*@_SMLL1N_308(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=bitcast i8*%j to i32*
%l=getelementptr inbounds i8,i8*%j,i64 -4
%m=bitcast i8*%l to i32*
store i32 1342177296,i32*%m,align 4
store i8*%j,i8**%d,align 8
store i32%f,i32*%k,align 4
%n=getelementptr inbounds i8,i8*%j,i64 4
%o=bitcast i8*%n to i32*
store i32%i,i32*%o,align 4
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i32*
store i32%b,i32*%q,align 4
%r=getelementptr inbounds i8,i8*%j,i64 12
%s=bitcast i8*%r to i32*
store i32%c,i32*%s,align 4
%t=getelementptr inbounds i8,i8*%j,i64 16
%u=bitcast i8*%t to i32*
store i32 0,i32*%u,align 4
%v=call i8*@sml_alloc(i32 inreg 28)#0
%w=getelementptr inbounds i8,i8*%v,i64 -4
%x=bitcast i8*%w to i32*
store i32 1342177304,i32*%x,align 4
%y=load i8*,i8**%d,align 8
%z=bitcast i8*%v to i8**
store i8*%y,i8**%z,align 8
%A=getelementptr inbounds i8,i8*%v,i64 8
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL1N_307 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%v,i64 16
%D=bitcast i8*%C to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL1N_307 to void(...)*),void(...)**%D,align 8
%E=getelementptr inbounds i8,i8*%v,i64 24
%F=bitcast i8*%E to i32*
store i32 -2147483647,i32*%F,align 4
ret i8*%v
}
define internal fastcc i8*@_SMLL8single__L_310(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
s:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
%k=alloca i8*,align 8
%l=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
call void@llvm.gcroot(i8**%k,i8*null)#0
call void@llvm.gcroot(i8**%l,i8*null)#0
store i8*%a,i8**%j,align 8
store i8*%b,i8**%c,align 8
%m=load atomic i32,i32*@sml_check_flag unordered,align 4
%n=icmp eq i32%m,0
br i1%n,label%q,label%o
o:
call void@sml_check(i32 inreg%m)
%p=load i8*,i8**%j,align 8
br label%q
q:
%r=phi i8*[%p,%o],[%a,%s]
%t=getelementptr inbounds i8,i8*%r,i64 12
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=add i32%v,-1
%x=sub i32 0,%v
%y=and i32%w,%x
%z=getelementptr inbounds i8,i8*%r,i64 20
%A=bitcast i8*%z to i32*
%B=load i32,i32*%A,align 4
%C=add i32%w,%B
%D=add i32%C,%y
%E=sub i32 0,%B
%F=and i32%D,%E
%G=add i32%B,7
%H=add i32%G,%F
%I=and i32%H,-8
%J=add i32%I,15
%K=and i32%J,-8
%L=add i32%v,3
%M=and i32%L,%x
%N=add i32%v,7
%O=add i32%N,%M
%P=and i32%O,-8
%Q=add i32%P,15
%R=and i32%Q,-8
%S=add i32%G,%R
%T=and i32%S,%E
%U=add i32%K,15
%V=and i32%U,-8
%W=lshr i32%J,3
%X=lshr i32%H,3
%Y=sub nsw i32%W,%X
%Z=lshr i32%F,3
%aa=sub nsw i32%X,%Z
%ab=lshr i32%y,3
%ac=sub nsw i32%Z,%ab
%ad=shl i32 1,%Y
%ae=or i32%ad,1
%af=shl i32%ae,%aa
%ag=getelementptr inbounds i8,i8*%r,i64 16
%ah=bitcast i8*%ag to i32*
%ai=load i32,i32*%ah,align 4
%aj=or i32%af,%ai
%ak=shl i32%aj,%ac
%al=getelementptr inbounds i8,i8*%r,i64 8
%am=bitcast i8*%al to i32*
%an=load i32,i32*%am,align 4
%ao=or i32%ak,%an
%ap=or i32%V,4
%aq=icmp eq i32%an,0
br i1%aq,label%ax,label%ar
ar:
%as=load i8*,i8**%c,align 8
%at=sext i32%y to i64
%au=getelementptr inbounds i8,i8*%as,i64%at
%av=bitcast i8*%au to i8**
%aw=load i8*,i8**%av,align 8
br label%aI
ax:
%ay=call i8*@sml_alloc(i32 inreg%v)#0
%az=getelementptr inbounds i8,i8*%ay,i64 -4
%aA=bitcast i8*%az to i32*
store i32%v,i32*%aA,align 4
%aB=load i8*,i8**%c,align 8
%aC=sext i32%y to i64
%aD=getelementptr inbounds i8,i8*%aB,i64%aC
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ay,i8*%aD,i32%v,i1 false)
%aE=load i8*,i8**%j,align 8
%aF=getelementptr inbounds i8,i8*%aE,i64 16
%aG=bitcast i8*%aF to i32*
%aH=load i32,i32*%aG,align 4
br label%aI
aI:
%aJ=phi i8*[%aB,%ax],[%as,%ar]
%aK=phi i32[%aH,%ax],[%ai,%ar]
%aL=phi i8*[%aE,%ax],[%r,%ar]
%aM=phi i8*[%ay,%ax],[%aw,%ar]
store i8*%aM,i8**%d,align 8
%aN=icmp eq i32%aK,0
br i1%aN,label%aT,label%aO
aO:
%aP=sext i32%F to i64
%aQ=getelementptr inbounds i8,i8*%aJ,i64%aP
%aR=bitcast i8*%aQ to i8**
%aS=load i8*,i8**%aR,align 8
br label%a3
aT:
%aU=getelementptr inbounds i8,i8*%aL,i64 20
%aV=bitcast i8*%aU to i32*
%aW=load i32,i32*%aV,align 4
%aX=call i8*@sml_alloc(i32 inreg%aW)#0
%aY=getelementptr inbounds i8,i8*%aX,i64 -4
%aZ=bitcast i8*%aY to i32*
store i32%aW,i32*%aZ,align 4
%a0=load i8*,i8**%c,align 8
%a1=sext i32%F to i64
%a2=getelementptr inbounds i8,i8*%a0,i64%a1
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aX,i8*%a2,i32%aW,i1 false)
br label%a3
a3:
%a4=phi i8*[%a0,%aT],[%aJ,%aO]
%a5=phi i8*[%aX,%aT],[%aS,%aO]
store i8*%a5,i8**%e,align 8
%a6=sext i32%I to i64
%a7=getelementptr inbounds i8,i8*%a4,i64%a6
%a8=bitcast i8*%a7 to i8**
%a9=load i8*,i8**%a8,align 8
store i8*%a9,i8**%f,align 8
%ba=sext i32%K to i64
%bb=getelementptr inbounds i8,i8*%a4,i64%ba
%bc=bitcast i8*%bb to i8**
%bd=load i8*,i8**%bc,align 8
%be=icmp eq i8*%bd,null
br i1%be,label%bf,label%bx
bf:
store i8*null,i8**%d,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%f,align 8
store i8*null,i8**%j,align 8
%bg=load i8*,i8**@_SMLZ5Match,align 8
store i8*%bg,i8**%c,align 8
%bh=call i8*@sml_alloc(i32 inreg 20)#0
%bi=getelementptr inbounds i8,i8*%bh,i64 -4
%bj=bitcast i8*%bi to i32*
store i32 1342177296,i32*%bj,align 4
store i8*%bh,i8**%d,align 8
%bk=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bl=bitcast i8*%bh to i8**
store i8*%bk,i8**%bl,align 8
%bm=getelementptr inbounds i8,i8*%bh,i64 8
%bn=bitcast i8*%bm to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[52x i8]}>,<{[4x i8],i32,[52x i8]}>*@d,i64 0,i32 2,i64 0),i8**%bn,align 8
%bo=getelementptr inbounds i8,i8*%bh,i64 16
%bp=bitcast i8*%bo to i32*
store i32 3,i32*%bp,align 4
%bq=call i8*@sml_alloc(i32 inreg 60)#0
%br=getelementptr inbounds i8,i8*%bq,i64 -4
%bs=bitcast i8*%br to i32*
store i32 1342177336,i32*%bs,align 4
%bt=getelementptr inbounds i8,i8*%bq,i64 56
%bu=bitcast i8*%bt to i32*
store i32 1,i32*%bu,align 4
%bv=load i8*,i8**%d,align 8
%bw=bitcast i8*%bq to i8**
store i8*%bv,i8**%bw,align 8
call void@sml_raise(i8*inreg%bq)#1
unreachable
bx:
store i8*%bd,i8**%i,align 8
%by=load i8*,i8**%j,align 8
%bz=getelementptr inbounds i8,i8*%by,i64 8
%bA=bitcast i8*%bz to i32*
%bB=load i32,i32*%bA,align 4
%bC=icmp eq i32%bB,0
br i1%bC,label%bI,label%bD
bD:
%bE=sext i32%M to i64
%bF=getelementptr inbounds i8,i8*%bd,i64%bE
%bG=bitcast i8*%bF to i8**
%bH=load i8*,i8**%bG,align 8
br label%bT
bI:
%bJ=getelementptr inbounds i8,i8*%by,i64 12
%bK=bitcast i8*%bJ to i32*
%bL=load i32,i32*%bK,align 4
%bM=call i8*@sml_alloc(i32 inreg%bL)#0
%bN=getelementptr inbounds i8,i8*%bM,i64 -4
%bO=bitcast i8*%bN to i32*
store i32%bL,i32*%bO,align 4
%bP=load i8*,i8**%i,align 8
%bQ=sext i32%M to i64
%bR=getelementptr inbounds i8,i8*%bP,i64%bQ
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bM,i8*%bR,i32%bL,i1 false)
%bS=load i8*,i8**%j,align 8
br label%bT
bT:
%bU=phi i8*[%bS,%bI],[%by,%bD]
%bV=phi i8*[%bP,%bI],[%bd,%bD]
%bW=phi i8*[%bM,%bI],[%bH,%bD]
store i8*%bW,i8**%g,align 8
%bX=sext i32%P to i64
%bY=getelementptr inbounds i8,i8*%bV,i64%bX
%bZ=bitcast i8*%bY to i8**
%b0=load i8*,i8**%bZ,align 8
store i8*%b0,i8**%c,align 8
%b1=sext i32%R to i64
%b2=getelementptr inbounds i8,i8*%bV,i64%b1
%b3=bitcast i8*%b2 to i8**
%b4=load i8*,i8**%b3,align 8
store i8*%b4,i8**%h,align 8
%b5=getelementptr inbounds i8,i8*%bU,i64 16
%b6=bitcast i8*%b5 to i32*
%b7=load i32,i32*%b6,align 4
%b8=icmp eq i32%b7,0
br i1%b8,label%ce,label%b9
b9:
store i8*null,i8**%i,align 8
%ca=sext i32%T to i64
%cb=getelementptr inbounds i8,i8*%bV,i64%ca
%cc=bitcast i8*%cb to i8**
%cd=load i8*,i8**%cc,align 8
br label%cs
ce:
%cf=getelementptr inbounds i8,i8*%bU,i64 20
%cg=bitcast i8*%cf to i32*
%ch=load i32,i32*%cg,align 4
%ci=call i8*@sml_alloc(i32 inreg%ch)#0
%cj=getelementptr inbounds i8,i8*%ci,i64 -4
%ck=bitcast i8*%cj to i32*
store i32%ch,i32*%ck,align 4
%cl=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%cm=sext i32%T to i64
%cn=getelementptr inbounds i8,i8*%cl,i64%cm
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ci,i8*%cn,i32%ch,i1 false)
%co=load i8*,i8**%j,align 8
%cp=getelementptr inbounds i8,i8*%co,i64 16
%cq=bitcast i8*%cp to i32*
%cr=load i32,i32*%cq,align 4
br label%cs
cs:
%ct=phi i32[%cr,%ce],[%b7,%b9]
%cu=phi i8*[%co,%ce],[%bU,%b9]
%cv=phi i8*[%ci,%ce],[%cd,%b9]
store i8*%cv,i8**%i,align 8
%cw=bitcast i8*%cu to i8**
%cx=load i8*,i8**%cw,align 8
%cy=getelementptr inbounds i8,i8*%cu,i64 20
%cz=bitcast i8*%cy to i32*
%cA=load i32,i32*%cz,align 4
%cB=call fastcc i8*@_SMLL1N_308(i8*inreg%cx,i32 inreg%ct,i32 inreg%cA)
%cC=getelementptr inbounds i8,i8*%cB,i64 16
%cD=bitcast i8*%cC to i8*(i8*,i8*)**
%cE=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%cD,align 8
%cF=bitcast i8*%cB to i8**
%cG=load i8*,i8**%cF,align 8
store i8*%cG,i8**%l,align 8
%cH=load i8*,i8**%j,align 8
%cI=bitcast i8*%cH to i8**
%cJ=load i8*,i8**%cI,align 8
%cK=getelementptr inbounds i8,i8*%cH,i64 16
%cL=bitcast i8*%cK to i32*
%cM=load i32,i32*%cL,align 4
%cN=getelementptr inbounds i8,i8*%cH,i64 20
%cO=bitcast i8*%cN to i32*
%cP=load i32,i32*%cO,align 4
%cQ=call fastcc i8*@_SMLL1N_308(i8*inreg%cJ,i32 inreg%cM,i32 inreg%cP)
%cR=getelementptr inbounds i8,i8*%cQ,i64 16
%cS=bitcast i8*%cR to i8*(i8*,i8*)**
%cT=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%cS,align 8
%cU=bitcast i8*%cQ to i8**
%cV=load i8*,i8**%cU,align 8
store i8*%cV,i8**%k,align 8
%cW=load i8*,i8**%j,align 8
%cX=getelementptr inbounds i8,i8*%cW,i64 12
%cY=bitcast i8*%cX to i32*
%cZ=load i32,i32*%cY,align 4
%c0=getelementptr inbounds i8,i8*%cW,i64 8
%c1=bitcast i8*%c0 to i32*
%c2=load i32,i32*%c1,align 4
%c3=getelementptr inbounds i8,i8*%cW,i64 20
%c4=bitcast i8*%c3 to i32*
%c5=load i32,i32*%c4,align 4
%c6=getelementptr inbounds i8,i8*%cW,i64 16
%c7=bitcast i8*%c6 to i32*
%c8=load i32,i32*%c7,align 4
%c9=call i8*@sml_alloc(i32 inreg%ap)#0
%da=or i32%V,1342177280
%db=getelementptr inbounds i8,i8*%c9,i64 -4
%dc=bitcast i8*%db to i32*
store i32%da,i32*%dc,align 4
call void@llvm.memset.p0i8.i32(i8*%c9,i8 0,i32%ap,i1 false)
%dd=icmp eq i32%c2,0
%de=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%df=sext i32%y to i64
%dg=getelementptr inbounds i8,i8*%c9,i64%df
br i1%dd,label%dj,label%dh
dh:
%di=bitcast i8*%dg to i8**
store i8*%de,i8**%di,align 8
br label%dk
dj:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dg,i8*%de,i32%cZ,i1 false)
br label%dk
dk:
%dl=icmp eq i32%c8,0
%dm=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%dn=sext i32%F to i64
%do=getelementptr inbounds i8,i8*%c9,i64%dn
br i1%dl,label%dr,label%dp
dp:
%dq=bitcast i8*%do to i8**
store i8*%dm,i8**%dq,align 8
br label%ds
dr:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%do,i8*%dm,i32%c5,i1 false)
br label%ds
ds:
%dt=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%du=getelementptr inbounds i8,i8*%c9,i64%a6
%dv=bitcast i8*%du to i8**
store i8*%dt,i8**%dv,align 8
%dw=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%dx=getelementptr inbounds i8,i8*%c9,i64%ba
%dy=bitcast i8*%dx to i8**
store i8*%dw,i8**%dy,align 8
%dz=sext i32%V to i64
%dA=getelementptr inbounds i8,i8*%c9,i64%dz
%dB=bitcast i8*%dA to i32*
store i32%ao,i32*%dB,align 4
%dC=load i8*,i8**%k,align 8
store i8*null,i8**%k,align 8
%dD=call fastcc i8*%cT(i8*inreg%dC,i8*inreg%c9)
store i8*%dD,i8**%c,align 8
%dE=load i8*,i8**%j,align 8
%dF=getelementptr inbounds i8,i8*%dE,i64 12
%dG=bitcast i8*%dF to i32*
%dH=load i32,i32*%dG,align 4
%dI=getelementptr inbounds i8,i8*%dE,i64 8
%dJ=bitcast i8*%dI to i32*
%dK=load i32,i32*%dJ,align 4
%dL=getelementptr inbounds i8,i8*%dE,i64 20
%dM=bitcast i8*%dL to i32*
%dN=load i32,i32*%dM,align 4
store i8*null,i8**%j,align 8
%dO=getelementptr inbounds i8,i8*%dE,i64 16
%dP=bitcast i8*%dO to i32*
%dQ=load i32,i32*%dP,align 4
%dR=call i8*@sml_alloc(i32 inreg%ap)#0
%dS=getelementptr inbounds i8,i8*%dR,i64 -4
%dT=bitcast i8*%dS to i32*
store i32%da,i32*%dT,align 4
call void@llvm.memset.p0i8.i32(i8*%dR,i8 0,i32%ap,i1 false)
%dU=icmp eq i32%dK,0
%dV=load i8*,i8**%g,align 8
%dW=getelementptr inbounds i8,i8*%dR,i64%df
br i1%dU,label%dZ,label%dX
dX:
%dY=bitcast i8*%dW to i8**
store i8*%dV,i8**%dY,align 8
br label%d0
dZ:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dW,i8*%dV,i32%dH,i1 false)
br label%d0
d0:
%d1=icmp eq i32%dQ,0
%d2=load i8*,i8**%i,align 8
%d3=getelementptr inbounds i8,i8*%dR,i64%dn
br i1%d1,label%d6,label%d4
d4:
%d5=bitcast i8*%d3 to i8**
store i8*%d2,i8**%d5,align 8
br label%d7
d6:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%d3,i8*%d2,i32%dN,i1 false)
br label%d7
d7:
%d8=load i8*,i8**%c,align 8
%d9=getelementptr inbounds i8,i8*%dR,i64%a6
%ea=bitcast i8*%d9 to i8**
store i8*%d8,i8**%ea,align 8
%eb=load i8*,i8**%h,align 8
%ec=getelementptr inbounds i8,i8*%dR,i64%ba
%ed=bitcast i8*%ec to i8**
store i8*%eb,i8**%ed,align 8
%ee=getelementptr inbounds i8,i8*%dR,i64%dz
%ef=bitcast i8*%ee to i32*
store i32%ao,i32*%ef,align 4
%eg=load i8*,i8**%l,align 8
%eh=tail call fastcc i8*%cE(i8*inreg%eg,i8*inreg%dR)
ret i8*%eh
}
define internal fastcc i8*@_SMLL8single__L_311(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=getelementptr inbounds i8,i8*%a,i64 8
%i=bitcast i8*%h to i32*
%j=load i32,i32*%i,align 4
%k=getelementptr inbounds i8,i8*%a,i64 12
%l=bitcast i8*%k to i32*
%m=load i32,i32*%l,align 4
%n=call i8*@sml_alloc(i32 inreg 28)#0
%o=getelementptr inbounds i8,i8*%n,i64 -4
%p=bitcast i8*%o to i32*
store i32 1342177304,i32*%p,align 4
store i8*%n,i8**%e,align 8
%q=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%r=bitcast i8*%n to i8**
store i8*%q,i8**%r,align 8
%s=getelementptr inbounds i8,i8*%n,i64 8
%t=bitcast i8*%s to i32*
store i32%j,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%n,i64 12
%v=bitcast i8*%u to i32*
store i32%m,i32*%v,align 4
%w=getelementptr inbounds i8,i8*%n,i64 16
%x=bitcast i8*%w to i32*
store i32%b,i32*%x,align 4
%y=getelementptr inbounds i8,i8*%n,i64 20
%z=bitcast i8*%y to i32*
store i32%c,i32*%z,align 4
%A=getelementptr inbounds i8,i8*%n,i64 24
%B=bitcast i8*%A to i32*
store i32 1,i32*%B,align 4
%C=call i8*@sml_alloc(i32 inreg 28)#0
%D=getelementptr inbounds i8,i8*%C,i64 -4
%E=bitcast i8*%D to i32*
store i32 1342177304,i32*%E,align 4
%F=load i8*,i8**%e,align 8
%G=bitcast i8*%C to i8**
store i8*%F,i8**%G,align 8
%H=getelementptr inbounds i8,i8*%C,i64 8
%I=bitcast i8*%H to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL8single__L_310 to void(...)*),void(...)**%I,align 8
%J=getelementptr inbounds i8,i8*%C,i64 16
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL8single__L_310 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%C,i64 24
%M=bitcast i8*%L to i32*
store i32 -2147483647,i32*%M,align 4
ret i8*%C
}
define internal fastcc i8*@_SMLL8single__R_313(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
s:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
%k=alloca i8*,align 8
%l=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
call void@llvm.gcroot(i8**%k,i8*null)#0
call void@llvm.gcroot(i8**%l,i8*null)#0
store i8*%a,i8**%j,align 8
store i8*%b,i8**%c,align 8
%m=load atomic i32,i32*@sml_check_flag unordered,align 4
%n=icmp eq i32%m,0
br i1%n,label%q,label%o
o:
call void@sml_check(i32 inreg%m)
%p=load i8*,i8**%j,align 8
br label%q
q:
%r=phi i8*[%p,%o],[%a,%s]
%t=getelementptr inbounds i8,i8*%r,i64 12
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=add i32%v,-1
%x=sub i32 0,%v
%y=and i32%w,%x
%z=getelementptr inbounds i8,i8*%r,i64 20
%A=bitcast i8*%z to i32*
%B=load i32,i32*%A,align 4
%C=add i32%w,%B
%D=add i32%C,%y
%E=sub i32 0,%B
%F=and i32%D,%E
%G=add i32%B,7
%H=add i32%G,%F
%I=and i32%H,-8
%J=add i32%v,3
%K=and i32%J,%x
%L=add i32%v,7
%M=add i32%L,%K
%N=and i32%M,-8
%O=add i32%N,15
%P=and i32%O,-8
%Q=add i32%G,%P
%R=and i32%Q,%E
%S=add i32%I,15
%T=and i32%S,-8
%U=add i32%T,15
%V=and i32%U,-8
%W=lshr i32%S,3
%X=lshr i32%H,3
%Y=sub nsw i32%W,%X
%Z=lshr i32%F,3
%aa=sub nsw i32%X,%Z
%ab=lshr i32%y,3
%ac=sub nsw i32%Z,%ab
%ad=shl i32 1,%Y
%ae=or i32%ad,1
%af=shl i32%ae,%aa
%ag=getelementptr inbounds i8,i8*%r,i64 16
%ah=bitcast i8*%ag to i32*
%ai=load i32,i32*%ah,align 4
%aj=or i32%af,%ai
%ak=shl i32%aj,%ac
%al=getelementptr inbounds i8,i8*%r,i64 8
%am=bitcast i8*%al to i32*
%an=load i32,i32*%am,align 4
%ao=or i32%ak,%an
%ap=or i32%V,4
%aq=icmp eq i32%an,0
br i1%aq,label%ax,label%ar
ar:
%as=load i8*,i8**%c,align 8
%at=sext i32%y to i64
%au=getelementptr inbounds i8,i8*%as,i64%at
%av=bitcast i8*%au to i8**
%aw=load i8*,i8**%av,align 8
br label%aI
ax:
%ay=call i8*@sml_alloc(i32 inreg%v)#0
%az=getelementptr inbounds i8,i8*%ay,i64 -4
%aA=bitcast i8*%az to i32*
store i32%v,i32*%aA,align 4
%aB=load i8*,i8**%c,align 8
%aC=sext i32%y to i64
%aD=getelementptr inbounds i8,i8*%aB,i64%aC
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ay,i8*%aD,i32%v,i1 false)
%aE=load i8*,i8**%j,align 8
%aF=getelementptr inbounds i8,i8*%aE,i64 16
%aG=bitcast i8*%aF to i32*
%aH=load i32,i32*%aG,align 4
br label%aI
aI:
%aJ=phi i8*[%aB,%ax],[%as,%ar]
%aK=phi i32[%aH,%ax],[%ai,%ar]
%aL=phi i8*[%aE,%ax],[%r,%ar]
%aM=phi i8*[%ay,%ax],[%aw,%ar]
store i8*%aM,i8**%d,align 8
%aN=icmp eq i32%aK,0
br i1%aN,label%aT,label%aO
aO:
%aP=sext i32%F to i64
%aQ=getelementptr inbounds i8,i8*%aJ,i64%aP
%aR=bitcast i8*%aQ to i8**
%aS=load i8*,i8**%aR,align 8
br label%a3
aT:
%aU=getelementptr inbounds i8,i8*%aL,i64 20
%aV=bitcast i8*%aU to i32*
%aW=load i32,i32*%aV,align 4
%aX=call i8*@sml_alloc(i32 inreg%aW)#0
%aY=getelementptr inbounds i8,i8*%aX,i64 -4
%aZ=bitcast i8*%aY to i32*
store i32%aW,i32*%aZ,align 4
%a0=load i8*,i8**%c,align 8
%a1=sext i32%F to i64
%a2=getelementptr inbounds i8,i8*%a0,i64%a1
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aX,i8*%a2,i32%aW,i1 false)
br label%a3
a3:
%a4=phi i8*[%a0,%aT],[%aJ,%aO]
%a5=phi i8*[%aX,%aT],[%aS,%aO]
store i8*%a5,i8**%e,align 8
%a6=sext i32%I to i64
%a7=getelementptr inbounds i8,i8*%a4,i64%a6
%a8=bitcast i8*%a7 to i8**
%a9=load i8*,i8**%a8,align 8
%ba=icmp eq i8*%a9,null
br i1%ba,label%bb,label%bt
bb:
store i8*null,i8**%d,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%j,align 8
%bc=load i8*,i8**@_SMLZ5Match,align 8
store i8*%bc,i8**%c,align 8
%bd=call i8*@sml_alloc(i32 inreg 20)#0
%be=getelementptr inbounds i8,i8*%bd,i64 -4
%bf=bitcast i8*%be to i32*
store i32 1342177296,i32*%bf,align 4
store i8*%bd,i8**%d,align 8
%bg=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bh=bitcast i8*%bd to i8**
store i8*%bg,i8**%bh,align 8
%bi=getelementptr inbounds i8,i8*%bd,i64 8
%bj=bitcast i8*%bi to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[52x i8]}>,<{[4x i8],i32,[52x i8]}>*@e,i64 0,i32 2,i64 0),i8**%bj,align 8
%bk=getelementptr inbounds i8,i8*%bd,i64 16
%bl=bitcast i8*%bk to i32*
store i32 3,i32*%bl,align 4
%bm=call i8*@sml_alloc(i32 inreg 60)#0
%bn=getelementptr inbounds i8,i8*%bm,i64 -4
%bo=bitcast i8*%bn to i32*
store i32 1342177336,i32*%bo,align 4
%bp=getelementptr inbounds i8,i8*%bm,i64 56
%bq=bitcast i8*%bp to i32*
store i32 1,i32*%bq,align 4
%br=load i8*,i8**%d,align 8
%bs=bitcast i8*%bm to i8**
store i8*%br,i8**%bs,align 8
call void@sml_raise(i8*inreg%bm)#1
unreachable
bt:
store i8*%a9,i8**%i,align 8
%bu=load i8*,i8**%j,align 8
%bv=getelementptr inbounds i8,i8*%bu,i64 8
%bw=bitcast i8*%bv to i32*
%bx=load i32,i32*%bw,align 4
%by=icmp eq i32%bx,0
br i1%by,label%bE,label%bz
bz:
%bA=sext i32%K to i64
%bB=getelementptr inbounds i8,i8*%a9,i64%bA
%bC=bitcast i8*%bB to i8**
%bD=load i8*,i8**%bC,align 8
br label%bP
bE:
%bF=getelementptr inbounds i8,i8*%bu,i64 12
%bG=bitcast i8*%bF to i32*
%bH=load i32,i32*%bG,align 4
%bI=call i8*@sml_alloc(i32 inreg%bH)#0
%bJ=getelementptr inbounds i8,i8*%bI,i64 -4
%bK=bitcast i8*%bJ to i32*
store i32%bH,i32*%bK,align 4
%bL=load i8*,i8**%i,align 8
%bM=sext i32%K to i64
%bN=getelementptr inbounds i8,i8*%bL,i64%bM
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bI,i8*%bN,i32%bH,i1 false)
%bO=load i8*,i8**%j,align 8
br label%bP
bP:
%bQ=phi i8*[%bO,%bE],[%bu,%bz]
%bR=phi i8*[%bL,%bE],[%a9,%bz]
%bS=phi i8*[%bI,%bE],[%bD,%bz]
store i8*%bS,i8**%f,align 8
%bT=sext i32%N to i64
%bU=getelementptr inbounds i8,i8*%bR,i64%bT
%bV=bitcast i8*%bU to i8**
%bW=load i8*,i8**%bV,align 8
store i8*%bW,i8**%g,align 8
%bX=sext i32%P to i64
%bY=getelementptr inbounds i8,i8*%bR,i64%bX
%bZ=bitcast i8*%bY to i8**
%b0=load i8*,i8**%bZ,align 8
store i8*%b0,i8**%h,align 8
%b1=getelementptr inbounds i8,i8*%bQ,i64 16
%b2=bitcast i8*%b1 to i32*
%b3=load i32,i32*%b2,align 4
%b4=icmp eq i32%b3,0
br i1%b4,label%ca,label%b5
b5:
store i8*null,i8**%i,align 8
%b6=sext i32%R to i64
%b7=getelementptr inbounds i8,i8*%bR,i64%b6
%b8=bitcast i8*%b7 to i8**
%b9=load i8*,i8**%b8,align 8
br label%co
ca:
%cb=getelementptr inbounds i8,i8*%bQ,i64 20
%cc=bitcast i8*%cb to i32*
%cd=load i32,i32*%cc,align 4
%ce=call i8*@sml_alloc(i32 inreg%cd)#0
%cf=getelementptr inbounds i8,i8*%ce,i64 -4
%cg=bitcast i8*%cf to i32*
store i32%cd,i32*%cg,align 4
%ch=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%ci=sext i32%R to i64
%cj=getelementptr inbounds i8,i8*%ch,i64%ci
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ce,i8*%cj,i32%cd,i1 false)
%ck=load i8*,i8**%j,align 8
%cl=getelementptr inbounds i8,i8*%ck,i64 16
%cm=bitcast i8*%cl to i32*
%cn=load i32,i32*%cm,align 4
br label%co
co:
%cp=phi i32[%cn,%ca],[%b3,%b5]
%cq=phi i8*[%ck,%ca],[%bQ,%b5]
%cr=phi i8*[%ce,%ca],[%b9,%b5]
store i8*%cr,i8**%i,align 8
%cs=load i8*,i8**%c,align 8
%ct=sext i32%T to i64
%cu=getelementptr inbounds i8,i8*%cs,i64%ct
%cv=bitcast i8*%cu to i8**
%cw=load i8*,i8**%cv,align 8
store i8*%cw,i8**%c,align 8
%cx=bitcast i8*%cq to i8**
%cy=load i8*,i8**%cx,align 8
%cz=getelementptr inbounds i8,i8*%cq,i64 20
%cA=bitcast i8*%cz to i32*
%cB=load i32,i32*%cA,align 4
%cC=call fastcc i8*@_SMLL1N_308(i8*inreg%cy,i32 inreg%cp,i32 inreg%cB)
%cD=getelementptr inbounds i8,i8*%cC,i64 16
%cE=bitcast i8*%cD to i8*(i8*,i8*)**
%cF=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%cE,align 8
%cG=bitcast i8*%cC to i8**
%cH=load i8*,i8**%cG,align 8
store i8*%cH,i8**%l,align 8
%cI=load i8*,i8**%j,align 8
%cJ=bitcast i8*%cI to i8**
%cK=load i8*,i8**%cJ,align 8
%cL=getelementptr inbounds i8,i8*%cI,i64 16
%cM=bitcast i8*%cL to i32*
%cN=load i32,i32*%cM,align 4
%cO=getelementptr inbounds i8,i8*%cI,i64 20
%cP=bitcast i8*%cO to i32*
%cQ=load i32,i32*%cP,align 4
%cR=call fastcc i8*@_SMLL1N_308(i8*inreg%cK,i32 inreg%cN,i32 inreg%cQ)
%cS=getelementptr inbounds i8,i8*%cR,i64 16
%cT=bitcast i8*%cS to i8*(i8*,i8*)**
%cU=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%cT,align 8
%cV=bitcast i8*%cR to i8**
%cW=load i8*,i8**%cV,align 8
store i8*%cW,i8**%k,align 8
%cX=load i8*,i8**%j,align 8
%cY=getelementptr inbounds i8,i8*%cX,i64 12
%cZ=bitcast i8*%cY to i32*
%c0=load i32,i32*%cZ,align 4
%c1=getelementptr inbounds i8,i8*%cX,i64 8
%c2=bitcast i8*%c1 to i32*
%c3=load i32,i32*%c2,align 4
%c4=getelementptr inbounds i8,i8*%cX,i64 20
%c5=bitcast i8*%c4 to i32*
%c6=load i32,i32*%c5,align 4
%c7=getelementptr inbounds i8,i8*%cX,i64 16
%c8=bitcast i8*%c7 to i32*
%c9=load i32,i32*%c8,align 4
%da=call i8*@sml_alloc(i32 inreg%ap)#0
%db=or i32%V,1342177280
%dc=getelementptr inbounds i8,i8*%da,i64 -4
%dd=bitcast i8*%dc to i32*
store i32%db,i32*%dd,align 4
call void@llvm.memset.p0i8.i32(i8*%da,i8 0,i32%ap,i1 false)
%de=icmp eq i32%c3,0
%df=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%dg=sext i32%y to i64
%dh=getelementptr inbounds i8,i8*%da,i64%dg
br i1%de,label%dk,label%di
di:
%dj=bitcast i8*%dh to i8**
store i8*%df,i8**%dj,align 8
br label%dl
dk:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dh,i8*%df,i32%c0,i1 false)
br label%dl
dl:
%dm=icmp eq i32%c9,0
%dn=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%do=sext i32%F to i64
%dp=getelementptr inbounds i8,i8*%da,i64%do
br i1%dm,label%ds,label%dq
dq:
%dr=bitcast i8*%dp to i8**
store i8*%dn,i8**%dr,align 8
br label%dt
ds:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dp,i8*%dn,i32%c6,i1 false)
br label%dt
dt:
%du=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%dv=getelementptr inbounds i8,i8*%da,i64%a6
%dw=bitcast i8*%dv to i8**
store i8*%du,i8**%dw,align 8
%dx=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%dy=getelementptr inbounds i8,i8*%da,i64%ct
%dz=bitcast i8*%dy to i8**
store i8*%dx,i8**%dz,align 8
%dA=sext i32%V to i64
%dB=getelementptr inbounds i8,i8*%da,i64%dA
%dC=bitcast i8*%dB to i32*
store i32%ao,i32*%dC,align 4
%dD=load i8*,i8**%k,align 8
store i8*null,i8**%k,align 8
%dE=call fastcc i8*%cU(i8*inreg%dD,i8*inreg%da)
store i8*%dE,i8**%c,align 8
%dF=load i8*,i8**%j,align 8
%dG=getelementptr inbounds i8,i8*%dF,i64 12
%dH=bitcast i8*%dG to i32*
%dI=load i32,i32*%dH,align 4
%dJ=getelementptr inbounds i8,i8*%dF,i64 8
%dK=bitcast i8*%dJ to i32*
%dL=load i32,i32*%dK,align 4
%dM=getelementptr inbounds i8,i8*%dF,i64 20
%dN=bitcast i8*%dM to i32*
%dO=load i32,i32*%dN,align 4
store i8*null,i8**%j,align 8
%dP=getelementptr inbounds i8,i8*%dF,i64 16
%dQ=bitcast i8*%dP to i32*
%dR=load i32,i32*%dQ,align 4
%dS=call i8*@sml_alloc(i32 inreg%ap)#0
%dT=getelementptr inbounds i8,i8*%dS,i64 -4
%dU=bitcast i8*%dT to i32*
store i32%db,i32*%dU,align 4
call void@llvm.memset.p0i8.i32(i8*%dS,i8 0,i32%ap,i1 false)
%dV=icmp eq i32%dL,0
%dW=load i8*,i8**%f,align 8
%dX=getelementptr inbounds i8,i8*%dS,i64%dg
br i1%dV,label%d0,label%dY
dY:
%dZ=bitcast i8*%dX to i8**
store i8*%dW,i8**%dZ,align 8
br label%d1
d0:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dX,i8*%dW,i32%dI,i1 false)
br label%d1
d1:
%d2=icmp eq i32%dR,0
%d3=load i8*,i8**%i,align 8
%d4=getelementptr inbounds i8,i8*%dS,i64%do
br i1%d2,label%d7,label%d5
d5:
%d6=bitcast i8*%d4 to i8**
store i8*%d3,i8**%d6,align 8
br label%d8
d7:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%d4,i8*%d3,i32%dO,i1 false)
br label%d8
d8:
%d9=load i8*,i8**%g,align 8
%ea=getelementptr inbounds i8,i8*%dS,i64%a6
%eb=bitcast i8*%ea to i8**
store i8*%d9,i8**%eb,align 8
%ec=load i8*,i8**%c,align 8
%ed=getelementptr inbounds i8,i8*%dS,i64%ct
%ee=bitcast i8*%ed to i8**
store i8*%ec,i8**%ee,align 8
%ef=getelementptr inbounds i8,i8*%dS,i64%dA
%eg=bitcast i8*%ef to i32*
store i32%ao,i32*%eg,align 4
%eh=load i8*,i8**%l,align 8
%ei=tail call fastcc i8*%cF(i8*inreg%eh,i8*inreg%dS)
ret i8*%ei
}
define internal fastcc i8*@_SMLL8single__R_314(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=getelementptr inbounds i8,i8*%a,i64 8
%i=bitcast i8*%h to i32*
%j=load i32,i32*%i,align 4
%k=getelementptr inbounds i8,i8*%a,i64 12
%l=bitcast i8*%k to i32*
%m=load i32,i32*%l,align 4
%n=call i8*@sml_alloc(i32 inreg 28)#0
%o=getelementptr inbounds i8,i8*%n,i64 -4
%p=bitcast i8*%o to i32*
store i32 1342177304,i32*%p,align 4
store i8*%n,i8**%e,align 8
%q=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%r=bitcast i8*%n to i8**
store i8*%q,i8**%r,align 8
%s=getelementptr inbounds i8,i8*%n,i64 8
%t=bitcast i8*%s to i32*
store i32%j,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%n,i64 12
%v=bitcast i8*%u to i32*
store i32%m,i32*%v,align 4
%w=getelementptr inbounds i8,i8*%n,i64 16
%x=bitcast i8*%w to i32*
store i32%b,i32*%x,align 4
%y=getelementptr inbounds i8,i8*%n,i64 20
%z=bitcast i8*%y to i32*
store i32%c,i32*%z,align 4
%A=getelementptr inbounds i8,i8*%n,i64 24
%B=bitcast i8*%A to i32*
store i32 1,i32*%B,align 4
%C=call i8*@sml_alloc(i32 inreg 28)#0
%D=getelementptr inbounds i8,i8*%C,i64 -4
%E=bitcast i8*%D to i32*
store i32 1342177304,i32*%E,align 4
%F=load i8*,i8**%e,align 8
%G=bitcast i8*%C to i8**
store i8*%F,i8**%G,align 8
%H=getelementptr inbounds i8,i8*%C,i64 8
%I=bitcast i8*%H to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL8single__R_313 to void(...)*),void(...)**%I,align 8
%J=getelementptr inbounds i8,i8*%C,i64 16
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL8single__R_313 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%C,i64 24
%M=bitcast i8*%L to i32*
store i32 -2147483647,i32*%M,align 4
ret i8*%C
}
define internal fastcc i8*@_SMLL8double__L_316(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
v:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
%k=alloca i8*,align 8
%l=alloca i8*,align 8
%m=alloca i8*,align 8
%n=alloca i8*,align 8
%o=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
call void@llvm.gcroot(i8**%k,i8*null)#0
call void@llvm.gcroot(i8**%l,i8*null)#0
call void@llvm.gcroot(i8**%m,i8*null)#0
call void@llvm.gcroot(i8**%n,i8*null)#0
call void@llvm.gcroot(i8**%o,i8*null)#0
store i8*%a,i8**%m,align 8
store i8*%b,i8**%c,align 8
%p=load atomic i32,i32*@sml_check_flag unordered,align 4
%q=icmp eq i32%p,0
br i1%q,label%t,label%r
r:
call void@sml_check(i32 inreg%p)
%s=load i8*,i8**%m,align 8
br label%t
t:
%u=phi i8*[%s,%r],[%a,%v]
%w=getelementptr inbounds i8,i8*%u,i64 12
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=add i32%y,-1
%A=sub i32 0,%y
%B=and i32%z,%A
%C=getelementptr inbounds i8,i8*%u,i64 20
%D=bitcast i8*%C to i32*
%E=load i32,i32*%D,align 4
%F=add i32%z,%E
%G=add i32%F,%B
%H=sub i32 0,%E
%I=and i32%G,%H
%J=add i32%E,7
%K=add i32%J,%I
%L=and i32%K,-8
%M=add i32%L,15
%N=and i32%M,-8
%O=add i32%y,3
%P=and i32%O,%A
%Q=add i32%y,7
%R=add i32%Q,%P
%S=and i32%R,-8
%T=add i32%S,15
%U=and i32%T,-8
%V=add i32%J,%U
%W=and i32%V,%H
%X=add i32%N,15
%Y=and i32%X,-8
%Z=lshr i32%M,3
%aa=lshr i32%K,3
%ab=sub nsw i32%Z,%aa
%ac=lshr i32%I,3
%ad=sub nsw i32%aa,%ac
%ae=lshr i32%B,3
%af=sub nsw i32%ac,%ae
%ag=shl i32 1,%ab
%ah=or i32%ag,1
%ai=shl i32%ah,%ad
%aj=getelementptr inbounds i8,i8*%u,i64 16
%ak=bitcast i8*%aj to i32*
%al=load i32,i32*%ak,align 4
%am=or i32%ai,%al
%an=shl i32%am,%af
%ao=getelementptr inbounds i8,i8*%u,i64 8
%ap=bitcast i8*%ao to i32*
%aq=load i32,i32*%ap,align 4
%ar=or i32%an,%aq
%as=or i32%Y,4
%at=icmp eq i32%aq,0
br i1%at,label%aA,label%au
au:
%av=load i8*,i8**%c,align 8
%aw=sext i32%B to i64
%ax=getelementptr inbounds i8,i8*%av,i64%aw
%ay=bitcast i8*%ax to i8**
%az=load i8*,i8**%ay,align 8
br label%aL
aA:
%aB=call i8*@sml_alloc(i32 inreg%y)#0
%aC=getelementptr inbounds i8,i8*%aB,i64 -4
%aD=bitcast i8*%aC to i32*
store i32%y,i32*%aD,align 4
%aE=load i8*,i8**%c,align 8
%aF=sext i32%B to i64
%aG=getelementptr inbounds i8,i8*%aE,i64%aF
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aB,i8*%aG,i32%y,i1 false)
%aH=load i8*,i8**%m,align 8
%aI=getelementptr inbounds i8,i8*%aH,i64 16
%aJ=bitcast i8*%aI to i32*
%aK=load i32,i32*%aJ,align 4
br label%aL
aL:
%aM=phi i8*[%aE,%aA],[%av,%au]
%aN=phi i32[%aK,%aA],[%al,%au]
%aO=phi i8*[%aH,%aA],[%u,%au]
%aP=phi i8*[%aB,%aA],[%az,%au]
store i8*%aP,i8**%d,align 8
%aQ=icmp eq i32%aN,0
br i1%aQ,label%aW,label%aR
aR:
%aS=sext i32%I to i64
%aT=getelementptr inbounds i8,i8*%aM,i64%aS
%aU=bitcast i8*%aT to i8**
%aV=load i8*,i8**%aU,align 8
br label%a6
aW:
%aX=getelementptr inbounds i8,i8*%aO,i64 20
%aY=bitcast i8*%aX to i32*
%aZ=load i32,i32*%aY,align 4
%a0=call i8*@sml_alloc(i32 inreg%aZ)#0
%a1=getelementptr inbounds i8,i8*%a0,i64 -4
%a2=bitcast i8*%a1 to i32*
store i32%aZ,i32*%a2,align 4
%a3=load i8*,i8**%c,align 8
%a4=sext i32%I to i64
%a5=getelementptr inbounds i8,i8*%a3,i64%a4
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%a0,i8*%a5,i32%aZ,i1 false)
br label%a6
a6:
%a7=phi i8*[%a3,%aW],[%aM,%aR]
%a8=phi i8*[%a0,%aW],[%aV,%aR]
store i8*%a8,i8**%e,align 8
%a9=sext i32%L to i64
%ba=getelementptr inbounds i8,i8*%a7,i64%a9
%bb=bitcast i8*%ba to i8**
%bc=load i8*,i8**%bb,align 8
store i8*%bc,i8**%f,align 8
%bd=sext i32%N to i64
%be=getelementptr inbounds i8,i8*%a7,i64%bd
%bf=bitcast i8*%be to i8**
%bg=load i8*,i8**%bf,align 8
%bh=icmp eq i8*%bg,null
br i1%bh,label%bi,label%bj
bi:
store i8*null,i8**%d,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%f,align 8
store i8*null,i8**%m,align 8
br label%fV
bj:
store i8*%bg,i8**%l,align 8
%bk=load i8*,i8**%m,align 8
%bl=getelementptr inbounds i8,i8*%bk,i64 8
%bm=bitcast i8*%bl to i32*
%bn=load i32,i32*%bm,align 4
%bo=icmp eq i32%bn,0
br i1%bo,label%bu,label%bp
bp:
%bq=sext i32%P to i64
%br=getelementptr inbounds i8,i8*%bg,i64%bq
%bs=bitcast i8*%br to i8**
%bt=load i8*,i8**%bs,align 8
br label%bE
bu:
%bv=getelementptr inbounds i8,i8*%bk,i64 12
%bw=bitcast i8*%bv to i32*
%bx=load i32,i32*%bw,align 4
%by=call i8*@sml_alloc(i32 inreg%bx)#0
%bz=getelementptr inbounds i8,i8*%by,i64 -4
%bA=bitcast i8*%bz to i32*
store i32%bx,i32*%bA,align 4
%bB=load i8*,i8**%l,align 8
%bC=sext i32%P to i64
%bD=getelementptr inbounds i8,i8*%bB,i64%bC
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%by,i8*%bD,i32%bx,i1 false)
br label%bE
bE:
%bF=phi i8*[%bB,%bu],[%bg,%bp]
%bG=phi i8*[%by,%bu],[%bt,%bp]
store i8*%bG,i8**%g,align 8
%bH=sext i32%S to i64
%bI=getelementptr inbounds i8,i8*%bF,i64%bH
%bJ=bitcast i8*%bI to i8**
%bK=load i8*,i8**%bJ,align 8
%bL=icmp eq i8*%bK,null
br i1%bL,label%bM,label%bN
bM:
store i8*null,i8**%d,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%f,align 8
store i8*null,i8**%g,align 8
store i8*null,i8**%m,align 8
store i8*null,i8**%l,align 8
br label%fV
bN:
store i8*%bK,i8**%j,align 8
%bO=load i8*,i8**%m,align 8
%bP=getelementptr inbounds i8,i8*%bO,i64 8
%bQ=bitcast i8*%bP to i32*
%bR=load i32,i32*%bQ,align 4
%bS=icmp eq i32%bR,0
br i1%bS,label%bY,label%bT
bT:
%bU=sext i32%P to i64
%bV=getelementptr inbounds i8,i8*%bK,i64%bU
%bW=bitcast i8*%bV to i8**
%bX=load i8*,i8**%bW,align 8
br label%b9
bY:
%bZ=getelementptr inbounds i8,i8*%bO,i64 12
%b0=bitcast i8*%bZ to i32*
%b1=load i32,i32*%b0,align 4
%b2=call i8*@sml_alloc(i32 inreg%b1)#0
%b3=getelementptr inbounds i8,i8*%b2,i64 -4
%b4=bitcast i8*%b3 to i32*
store i32%b1,i32*%b4,align 4
%b5=load i8*,i8**%j,align 8
%b6=sext i32%P to i64
%b7=getelementptr inbounds i8,i8*%b5,i64%b6
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%b2,i8*%b7,i32%b1,i1 false)
%b8=load i8*,i8**%m,align 8
br label%b9
b9:
%ca=phi i8*[%b8,%bY],[%bO,%bT]
%cb=phi i8*[%b5,%bY],[%bK,%bT]
%cc=phi i8*[%b2,%bY],[%bX,%bT]
store i8*%cc,i8**%h,align 8
%cd=getelementptr inbounds i8,i8*%cb,i64%bH
%ce=bitcast i8*%cd to i8**
%cf=load i8*,i8**%ce,align 8
store i8*%cf,i8**%c,align 8
%cg=sext i32%U to i64
%ch=getelementptr inbounds i8,i8*%cb,i64%cg
%ci=bitcast i8*%ch to i8**
%cj=load i8*,i8**%ci,align 8
store i8*%cj,i8**%i,align 8
%ck=getelementptr inbounds i8,i8*%ca,i64 16
%cl=bitcast i8*%ck to i32*
%cm=load i32,i32*%cl,align 4
%cn=icmp eq i32%cm,0
br i1%cn,label%cx,label%co
co:
store i8*null,i8**%j,align 8
%cp=sext i32%W to i64
%cq=getelementptr inbounds i8,i8*%cb,i64%cp
%cr=bitcast i8*%cq to i8**
%cs=load i8*,i8**%cr,align 8
store i8*%cs,i8**%j,align 8
%ct=load i8*,i8**%l,align 8
%cu=getelementptr inbounds i8,i8*%ct,i64%cg
%cv=bitcast i8*%cu to i8**
%cw=load i8*,i8**%cv,align 8
store i8*%cw,i8**%k,align 8
br label%cQ
cx:
%cy=getelementptr inbounds i8,i8*%ca,i64 20
%cz=bitcast i8*%cy to i32*
%cA=load i32,i32*%cz,align 4
%cB=call i8*@sml_alloc(i32 inreg%cA)#0
%cC=getelementptr inbounds i8,i8*%cB,i64 -4
%cD=bitcast i8*%cC to i32*
store i32%cA,i32*%cD,align 4
%cE=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%cF=sext i32%W to i64
%cG=getelementptr inbounds i8,i8*%cE,i64%cF
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cB,i8*%cG,i32%cA,i1 false)
%cH=load i8*,i8**%m,align 8
%cI=getelementptr inbounds i8,i8*%cH,i64 16
%cJ=bitcast i8*%cI to i32*
%cK=load i32,i32*%cJ,align 4
store i8*%cB,i8**%j,align 8
%cL=load i8*,i8**%l,align 8
%cM=getelementptr inbounds i8,i8*%cL,i64%cg
%cN=bitcast i8*%cM to i8**
%cO=load i8*,i8**%cN,align 8
store i8*%cO,i8**%k,align 8
%cP=icmp eq i32%cK,0
br i1%cP,label%cY,label%cQ
cQ:
%cR=phi i8*[%ct,%co],[%cL,%cx]
%cS=phi i8*[%ca,%co],[%cH,%cx]
%cT=phi i32[%cm,%co],[%cK,%cx]
store i8*null,i8**%l,align 8
%cU=sext i32%W to i64
%cV=getelementptr inbounds i8,i8*%cR,i64%cU
%cW=bitcast i8*%cV to i8**
%cX=load i8*,i8**%cW,align 8
br label%dc
cY:
%cZ=getelementptr inbounds i8,i8*%cH,i64 20
%c0=bitcast i8*%cZ to i32*
%c1=load i32,i32*%c0,align 4
%c2=call i8*@sml_alloc(i32 inreg%c1)#0
%c3=getelementptr inbounds i8,i8*%c2,i64 -4
%c4=bitcast i8*%c3 to i32*
store i32%c1,i32*%c4,align 4
%c5=load i8*,i8**%l,align 8
store i8*null,i8**%l,align 8
%c6=sext i32%W to i64
%c7=getelementptr inbounds i8,i8*%c5,i64%c6
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%c2,i8*%c7,i32%c1,i1 false)
%c8=load i8*,i8**%m,align 8
%c9=getelementptr inbounds i8,i8*%c8,i64 16
%da=bitcast i8*%c9 to i32*
%db=load i32,i32*%da,align 4
br label%dc
dc:
%dd=phi i32[%db,%cY],[%cT,%cQ]
%de=phi i8*[%c8,%cY],[%cS,%cQ]
%df=phi i8*[%c2,%cY],[%cX,%cQ]
store i8*%df,i8**%l,align 8
%dg=bitcast i8*%de to i8**
%dh=load i8*,i8**%dg,align 8
%di=getelementptr inbounds i8,i8*%de,i64 20
%dj=bitcast i8*%di to i32*
%dk=load i32,i32*%dj,align 4
%dl=call fastcc i8*@_SMLL1N_308(i8*inreg%dh,i32 inreg%dd,i32 inreg%dk)
%dm=getelementptr inbounds i8,i8*%dl,i64 16
%dn=bitcast i8*%dm to i8*(i8*,i8*)**
%do=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%dn,align 8
%dp=bitcast i8*%dl to i8**
%dq=load i8*,i8**%dp,align 8
store i8*%dq,i8**%o,align 8
%dr=load i8*,i8**%m,align 8
%ds=bitcast i8*%dr to i8**
%dt=load i8*,i8**%ds,align 8
%du=getelementptr inbounds i8,i8*%dr,i64 16
%dv=bitcast i8*%du to i32*
%dw=load i32,i32*%dv,align 4
%dx=getelementptr inbounds i8,i8*%dr,i64 20
%dy=bitcast i8*%dx to i32*
%dz=load i32,i32*%dy,align 4
%dA=call fastcc i8*@_SMLL1N_308(i8*inreg%dt,i32 inreg%dw,i32 inreg%dz)
%dB=getelementptr inbounds i8,i8*%dA,i64 16
%dC=bitcast i8*%dB to i8*(i8*,i8*)**
%dD=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%dC,align 8
%dE=bitcast i8*%dA to i8**
%dF=load i8*,i8**%dE,align 8
store i8*%dF,i8**%n,align 8
%dG=load i8*,i8**%m,align 8
%dH=getelementptr inbounds i8,i8*%dG,i64 12
%dI=bitcast i8*%dH to i32*
%dJ=load i32,i32*%dI,align 4
%dK=getelementptr inbounds i8,i8*%dG,i64 8
%dL=bitcast i8*%dK to i32*
%dM=load i32,i32*%dL,align 4
%dN=getelementptr inbounds i8,i8*%dG,i64 20
%dO=bitcast i8*%dN to i32*
%dP=load i32,i32*%dO,align 4
%dQ=getelementptr inbounds i8,i8*%dG,i64 16
%dR=bitcast i8*%dQ to i32*
%dS=load i32,i32*%dR,align 4
%dT=call i8*@sml_alloc(i32 inreg%as)#0
%dU=or i32%Y,1342177280
%dV=getelementptr inbounds i8,i8*%dT,i64 -4
%dW=bitcast i8*%dV to i32*
store i32%dU,i32*%dW,align 4
call void@llvm.memset.p0i8.i32(i8*%dT,i8 0,i32%as,i1 false)
%dX=icmp eq i32%dM,0
%dY=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%dZ=sext i32%B to i64
%d0=getelementptr inbounds i8,i8*%dT,i64%dZ
br i1%dX,label%d3,label%d1
d1:
%d2=bitcast i8*%d0 to i8**
store i8*%dY,i8**%d2,align 8
br label%d4
d3:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%d0,i8*%dY,i32%dJ,i1 false)
br label%d4
d4:
%d5=icmp eq i32%dS,0
%d6=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%d7=sext i32%I to i64
%d8=getelementptr inbounds i8,i8*%dT,i64%d7
br i1%d5,label%eb,label%d9
d9:
%ea=bitcast i8*%d8 to i8**
store i8*%d6,i8**%ea,align 8
br label%ec
eb:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%d8,i8*%d6,i32%dP,i1 false)
br label%ec
ec:
%ed=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%ee=getelementptr inbounds i8,i8*%dT,i64%a9
%ef=bitcast i8*%ee to i8**
store i8*%ed,i8**%ef,align 8
%eg=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%eh=getelementptr inbounds i8,i8*%dT,i64%bd
%ei=bitcast i8*%eh to i8**
store i8*%eg,i8**%ei,align 8
%ej=sext i32%Y to i64
%ek=getelementptr inbounds i8,i8*%dT,i64%ej
%el=bitcast i8*%ek to i32*
store i32%ar,i32*%el,align 4
%em=load i8*,i8**%n,align 8
store i8*null,i8**%n,align 8
%en=call fastcc i8*%dD(i8*inreg%em,i8*inreg%dT)
store i8*%en,i8**%c,align 8
%eo=load i8*,i8**%m,align 8
%ep=bitcast i8*%eo to i8**
%eq=load i8*,i8**%ep,align 8
%er=getelementptr inbounds i8,i8*%eo,i64 16
%es=bitcast i8*%er to i32*
%et=load i32,i32*%es,align 4
%eu=getelementptr inbounds i8,i8*%eo,i64 20
%ev=bitcast i8*%eu to i32*
%ew=load i32,i32*%ev,align 4
%ex=call fastcc i8*@_SMLL1N_308(i8*inreg%eq,i32 inreg%et,i32 inreg%ew)
%ey=getelementptr inbounds i8,i8*%ex,i64 16
%ez=bitcast i8*%ey to i8*(i8*,i8*)**
%eA=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ez,align 8
%eB=bitcast i8*%ex to i8**
%eC=load i8*,i8**%eB,align 8
store i8*%eC,i8**%d,align 8
%eD=load i8*,i8**%m,align 8
%eE=getelementptr inbounds i8,i8*%eD,i64 12
%eF=bitcast i8*%eE to i32*
%eG=load i32,i32*%eF,align 4
%eH=getelementptr inbounds i8,i8*%eD,i64 8
%eI=bitcast i8*%eH to i32*
%eJ=load i32,i32*%eI,align 4
%eK=getelementptr inbounds i8,i8*%eD,i64 20
%eL=bitcast i8*%eK to i32*
%eM=load i32,i32*%eL,align 4
%eN=getelementptr inbounds i8,i8*%eD,i64 16
%eO=bitcast i8*%eN to i32*
%eP=load i32,i32*%eO,align 4
%eQ=call i8*@sml_alloc(i32 inreg%as)#0
%eR=getelementptr inbounds i8,i8*%eQ,i64 -4
%eS=bitcast i8*%eR to i32*
store i32%dU,i32*%eS,align 4
call void@llvm.memset.p0i8.i32(i8*%eQ,i8 0,i32%as,i1 false)
%eT=icmp eq i32%eJ,0
%eU=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%eV=getelementptr inbounds i8,i8*%eQ,i64%dZ
br i1%eT,label%eY,label%eW
eW:
%eX=bitcast i8*%eV to i8**
store i8*%eU,i8**%eX,align 8
br label%eZ
eY:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%eV,i8*%eU,i32%eG,i1 false)
br label%eZ
eZ:
%e0=icmp eq i32%eP,0
%e1=load i8*,i8**%l,align 8
store i8*null,i8**%l,align 8
%e2=getelementptr inbounds i8,i8*%eQ,i64%d7
br i1%e0,label%e5,label%e3
e3:
%e4=bitcast i8*%e2 to i8**
store i8*%e1,i8**%e4,align 8
br label%e6
e5:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%e2,i8*%e1,i32%eM,i1 false)
br label%e6
e6:
%e7=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%e8=getelementptr inbounds i8,i8*%eQ,i64%a9
%e9=bitcast i8*%e8 to i8**
store i8*%e7,i8**%e9,align 8
%fa=load i8*,i8**%k,align 8
store i8*null,i8**%k,align 8
%fb=getelementptr inbounds i8,i8*%eQ,i64%bd
%fc=bitcast i8*%fb to i8**
store i8*%fa,i8**%fc,align 8
%fd=getelementptr inbounds i8,i8*%eQ,i64%ej
%fe=bitcast i8*%fd to i32*
store i32%ar,i32*%fe,align 4
%ff=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%fg=call fastcc i8*%eA(i8*inreg%ff,i8*inreg%eQ)
store i8*%fg,i8**%d,align 8
%fh=load i8*,i8**%m,align 8
%fi=getelementptr inbounds i8,i8*%fh,i64 12
%fj=bitcast i8*%fi to i32*
%fk=load i32,i32*%fj,align 4
%fl=getelementptr inbounds i8,i8*%fh,i64 8
%fm=bitcast i8*%fl to i32*
%fn=load i32,i32*%fm,align 4
%fo=getelementptr inbounds i8,i8*%fh,i64 20
%fp=bitcast i8*%fo to i32*
%fq=load i32,i32*%fp,align 4
store i8*null,i8**%m,align 8
%fr=getelementptr inbounds i8,i8*%fh,i64 16
%fs=bitcast i8*%fr to i32*
%ft=load i32,i32*%fs,align 4
%fu=call i8*@sml_alloc(i32 inreg%as)#0
%fv=getelementptr inbounds i8,i8*%fu,i64 -4
%fw=bitcast i8*%fv to i32*
store i32%dU,i32*%fw,align 4
call void@llvm.memset.p0i8.i32(i8*%fu,i8 0,i32%as,i1 false)
%fx=icmp eq i32%fn,0
%fy=load i8*,i8**%h,align 8
%fz=getelementptr inbounds i8,i8*%fu,i64%dZ
br i1%fx,label%fC,label%fA
fA:
%fB=bitcast i8*%fz to i8**
store i8*%fy,i8**%fB,align 8
br label%fD
fC:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%fz,i8*%fy,i32%fk,i1 false)
br label%fD
fD:
%fE=icmp eq i32%ft,0
%fF=load i8*,i8**%j,align 8
%fG=getelementptr inbounds i8,i8*%fu,i64%d7
br i1%fE,label%fJ,label%fH
fH:
%fI=bitcast i8*%fG to i8**
store i8*%fF,i8**%fI,align 8
br label%fK
fJ:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%fG,i8*%fF,i32%fq,i1 false)
br label%fK
fK:
%fL=load i8*,i8**%c,align 8
%fM=getelementptr inbounds i8,i8*%fu,i64%a9
%fN=bitcast i8*%fM to i8**
store i8*%fL,i8**%fN,align 8
%fO=load i8*,i8**%d,align 8
%fP=getelementptr inbounds i8,i8*%fu,i64%bd
%fQ=bitcast i8*%fP to i8**
store i8*%fO,i8**%fQ,align 8
%fR=getelementptr inbounds i8,i8*%fu,i64%ej
%fS=bitcast i8*%fR to i32*
store i32%ar,i32*%fS,align 4
%fT=load i8*,i8**%o,align 8
%fU=tail call fastcc i8*%do(i8*inreg%fT,i8*inreg%fu)
ret i8*%fU
fV:
%fW=load i8*,i8**@_SMLZ5Match,align 8
store i8*%fW,i8**%c,align 8
%fX=call i8*@sml_alloc(i32 inreg 20)#0
%fY=getelementptr inbounds i8,i8*%fX,i64 -4
%fZ=bitcast i8*%fY to i32*
store i32 1342177296,i32*%fZ,align 4
store i8*%fX,i8**%d,align 8
%f0=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%f1=bitcast i8*%fX to i8**
store i8*%f0,i8**%f1,align 8
%f2=getelementptr inbounds i8,i8*%fX,i64 8
%f3=bitcast i8*%f2 to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[52x i8]}>,<{[4x i8],i32,[52x i8]}>*@f,i64 0,i32 2,i64 0),i8**%f3,align 8
%f4=getelementptr inbounds i8,i8*%fX,i64 16
%f5=bitcast i8*%f4 to i32*
store i32 3,i32*%f5,align 4
%f6=call i8*@sml_alloc(i32 inreg 60)#0
%f7=getelementptr inbounds i8,i8*%f6,i64 -4
%f8=bitcast i8*%f7 to i32*
store i32 1342177336,i32*%f8,align 4
%f9=getelementptr inbounds i8,i8*%f6,i64 56
%ga=bitcast i8*%f9 to i32*
store i32 1,i32*%ga,align 4
%gb=load i8*,i8**%d,align 8
%gc=bitcast i8*%f6 to i8**
store i8*%gb,i8**%gc,align 8
call void@sml_raise(i8*inreg%f6)#1
unreachable
}
define internal fastcc i8*@_SMLL8double__L_317(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=getelementptr inbounds i8,i8*%a,i64 8
%i=bitcast i8*%h to i32*
%j=load i32,i32*%i,align 4
%k=getelementptr inbounds i8,i8*%a,i64 12
%l=bitcast i8*%k to i32*
%m=load i32,i32*%l,align 4
%n=call i8*@sml_alloc(i32 inreg 28)#0
%o=getelementptr inbounds i8,i8*%n,i64 -4
%p=bitcast i8*%o to i32*
store i32 1342177304,i32*%p,align 4
store i8*%n,i8**%e,align 8
%q=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%r=bitcast i8*%n to i8**
store i8*%q,i8**%r,align 8
%s=getelementptr inbounds i8,i8*%n,i64 8
%t=bitcast i8*%s to i32*
store i32%j,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%n,i64 12
%v=bitcast i8*%u to i32*
store i32%m,i32*%v,align 4
%w=getelementptr inbounds i8,i8*%n,i64 16
%x=bitcast i8*%w to i32*
store i32%b,i32*%x,align 4
%y=getelementptr inbounds i8,i8*%n,i64 20
%z=bitcast i8*%y to i32*
store i32%c,i32*%z,align 4
%A=getelementptr inbounds i8,i8*%n,i64 24
%B=bitcast i8*%A to i32*
store i32 1,i32*%B,align 4
%C=call i8*@sml_alloc(i32 inreg 28)#0
%D=getelementptr inbounds i8,i8*%C,i64 -4
%E=bitcast i8*%D to i32*
store i32 1342177304,i32*%E,align 4
%F=load i8*,i8**%e,align 8
%G=bitcast i8*%C to i8**
store i8*%F,i8**%G,align 8
%H=getelementptr inbounds i8,i8*%C,i64 8
%I=bitcast i8*%H to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL8double__L_316 to void(...)*),void(...)**%I,align 8
%J=getelementptr inbounds i8,i8*%C,i64 16
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL8double__L_316 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%C,i64 24
%M=bitcast i8*%L to i32*
store i32 -2147483647,i32*%M,align 4
ret i8*%C
}
define internal fastcc i8*@_SMLL8double__R_319(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
v:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
%k=alloca i8*,align 8
%l=alloca i8*,align 8
%m=alloca i8*,align 8
%n=alloca i8*,align 8
%o=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
call void@llvm.gcroot(i8**%k,i8*null)#0
call void@llvm.gcroot(i8**%l,i8*null)#0
call void@llvm.gcroot(i8**%m,i8*null)#0
call void@llvm.gcroot(i8**%n,i8*null)#0
call void@llvm.gcroot(i8**%o,i8*null)#0
store i8*%a,i8**%n,align 8
store i8*%b,i8**%c,align 8
%p=load atomic i32,i32*@sml_check_flag unordered,align 4
%q=icmp eq i32%p,0
br i1%q,label%t,label%r
r:
call void@sml_check(i32 inreg%p)
%s=load i8*,i8**%n,align 8
br label%t
t:
%u=phi i8*[%s,%r],[%a,%v]
%w=getelementptr inbounds i8,i8*%u,i64 12
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=add i32%y,-1
%A=sub i32 0,%y
%B=and i32%z,%A
%C=getelementptr inbounds i8,i8*%u,i64 20
%D=bitcast i8*%C to i32*
%E=load i32,i32*%D,align 4
%F=add i32%z,%E
%G=add i32%F,%B
%H=sub i32 0,%E
%I=and i32%G,%H
%J=add i32%E,7
%K=add i32%J,%I
%L=and i32%K,-8
%M=add i32%y,3
%N=and i32%M,%A
%O=add i32%y,7
%P=add i32%O,%N
%Q=and i32%P,-8
%R=add i32%Q,15
%S=and i32%R,-8
%T=add i32%J,%S
%U=and i32%T,%H
%V=add i32%L,15
%W=and i32%V,-8
%X=add i32%W,15
%Y=and i32%X,-8
%Z=lshr i32%V,3
%aa=lshr i32%K,3
%ab=sub nsw i32%Z,%aa
%ac=lshr i32%I,3
%ad=sub nsw i32%aa,%ac
%ae=lshr i32%B,3
%af=sub nsw i32%ac,%ae
%ag=shl i32 1,%ab
%ah=or i32%ag,1
%ai=shl i32%ah,%ad
%aj=getelementptr inbounds i8,i8*%u,i64 16
%ak=bitcast i8*%aj to i32*
%al=load i32,i32*%ak,align 4
%am=or i32%ai,%al
%an=shl i32%am,%af
%ao=getelementptr inbounds i8,i8*%u,i64 8
%ap=bitcast i8*%ao to i32*
%aq=load i32,i32*%ap,align 4
%ar=or i32%an,%aq
%as=or i32%Y,4
%at=icmp eq i32%aq,0
br i1%at,label%aA,label%au
au:
%av=load i8*,i8**%c,align 8
%aw=sext i32%B to i64
%ax=getelementptr inbounds i8,i8*%av,i64%aw
%ay=bitcast i8*%ax to i8**
%az=load i8*,i8**%ay,align 8
br label%aL
aA:
%aB=call i8*@sml_alloc(i32 inreg%y)#0
%aC=getelementptr inbounds i8,i8*%aB,i64 -4
%aD=bitcast i8*%aC to i32*
store i32%y,i32*%aD,align 4
%aE=load i8*,i8**%c,align 8
%aF=sext i32%B to i64
%aG=getelementptr inbounds i8,i8*%aE,i64%aF
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aB,i8*%aG,i32%y,i1 false)
%aH=load i8*,i8**%n,align 8
%aI=getelementptr inbounds i8,i8*%aH,i64 16
%aJ=bitcast i8*%aI to i32*
%aK=load i32,i32*%aJ,align 4
br label%aL
aL:
%aM=phi i8*[%aE,%aA],[%av,%au]
%aN=phi i32[%aK,%aA],[%al,%au]
%aO=phi i8*[%aH,%aA],[%u,%au]
%aP=phi i8*[%aB,%aA],[%az,%au]
store i8*%aP,i8**%d,align 8
%aQ=icmp eq i32%aN,0
br i1%aQ,label%aW,label%aR
aR:
%aS=sext i32%I to i64
%aT=getelementptr inbounds i8,i8*%aM,i64%aS
%aU=bitcast i8*%aT to i8**
%aV=load i8*,i8**%aU,align 8
br label%a6
aW:
%aX=getelementptr inbounds i8,i8*%aO,i64 20
%aY=bitcast i8*%aX to i32*
%aZ=load i32,i32*%aY,align 4
%a0=call i8*@sml_alloc(i32 inreg%aZ)#0
%a1=getelementptr inbounds i8,i8*%a0,i64 -4
%a2=bitcast i8*%a1 to i32*
store i32%aZ,i32*%a2,align 4
%a3=load i8*,i8**%c,align 8
%a4=sext i32%I to i64
%a5=getelementptr inbounds i8,i8*%a3,i64%a4
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%a0,i8*%a5,i32%aZ,i1 false)
br label%a6
a6:
%a7=phi i8*[%a3,%aW],[%aM,%aR]
%a8=phi i8*[%a0,%aW],[%aV,%aR]
store i8*%a8,i8**%e,align 8
%a9=sext i32%L to i64
%ba=getelementptr inbounds i8,i8*%a7,i64%a9
%bb=bitcast i8*%ba to i8**
%bc=load i8*,i8**%bb,align 8
%bd=icmp eq i8*%bc,null
br i1%bd,label%be,label%bf
be:
store i8*null,i8**%d,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%n,align 8
br label%fR
bf:
store i8*%bc,i8**%l,align 8
%bg=load i8*,i8**%n,align 8
%bh=getelementptr inbounds i8,i8*%bg,i64 8
%bi=bitcast i8*%bh to i32*
%bj=load i32,i32*%bi,align 4
%bk=icmp eq i32%bj,0
br i1%bk,label%bq,label%bl
bl:
%bm=sext i32%N to i64
%bn=getelementptr inbounds i8,i8*%bc,i64%bm
%bo=bitcast i8*%bn to i8**
%bp=load i8*,i8**%bo,align 8
br label%bA
bq:
%br=getelementptr inbounds i8,i8*%bg,i64 12
%bs=bitcast i8*%br to i32*
%bt=load i32,i32*%bs,align 4
%bu=call i8*@sml_alloc(i32 inreg%bt)#0
%bv=getelementptr inbounds i8,i8*%bu,i64 -4
%bw=bitcast i8*%bv to i32*
store i32%bt,i32*%bw,align 4
%bx=load i8*,i8**%l,align 8
%by=sext i32%N to i64
%bz=getelementptr inbounds i8,i8*%bx,i64%by
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bu,i8*%bz,i32%bt,i1 false)
br label%bA
bA:
%bB=phi i8*[%bx,%bq],[%bc,%bl]
%bC=phi i8*[%bu,%bq],[%bp,%bl]
store i8*%bC,i8**%f,align 8
%bD=sext i32%Q to i64
%bE=getelementptr inbounds i8,i8*%bB,i64%bD
%bF=bitcast i8*%bE to i8**
%bG=load i8*,i8**%bF,align 8
store i8*%bG,i8**%g,align 8
%bH=sext i32%S to i64
%bI=getelementptr inbounds i8,i8*%bB,i64%bH
%bJ=bitcast i8*%bI to i8**
%bK=load i8*,i8**%bJ,align 8
%bL=icmp eq i8*%bK,null
br i1%bL,label%bM,label%bN
bM:
store i8*null,i8**%d,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%f,align 8
store i8*null,i8**%g,align 8
store i8*null,i8**%n,align 8
store i8*null,i8**%l,align 8
br label%fR
bN:
store i8*%bK,i8**%k,align 8
%bO=load i8*,i8**%n,align 8
%bP=getelementptr inbounds i8,i8*%bO,i64 8
%bQ=bitcast i8*%bP to i32*
%bR=load i32,i32*%bQ,align 4
%bS=icmp eq i32%bR,0
br i1%bS,label%bY,label%bT
bT:
%bU=sext i32%N to i64
%bV=getelementptr inbounds i8,i8*%bK,i64%bU
%bW=bitcast i8*%bV to i8**
%bX=load i8*,i8**%bW,align 8
br label%b9
bY:
%bZ=getelementptr inbounds i8,i8*%bO,i64 12
%b0=bitcast i8*%bZ to i32*
%b1=load i32,i32*%b0,align 4
%b2=call i8*@sml_alloc(i32 inreg%b1)#0
%b3=getelementptr inbounds i8,i8*%b2,i64 -4
%b4=bitcast i8*%b3 to i32*
store i32%b1,i32*%b4,align 4
%b5=load i8*,i8**%k,align 8
%b6=sext i32%N to i64
%b7=getelementptr inbounds i8,i8*%b5,i64%b6
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%b2,i8*%b7,i32%b1,i1 false)
%b8=load i8*,i8**%n,align 8
br label%b9
b9:
%ca=phi i8*[%b8,%bY],[%bO,%bT]
%cb=phi i8*[%b5,%bY],[%bK,%bT]
%cc=phi i8*[%b2,%bY],[%bX,%bT]
store i8*%cc,i8**%h,align 8
%cd=getelementptr inbounds i8,i8*%cb,i64%bD
%ce=bitcast i8*%cd to i8**
%cf=load i8*,i8**%ce,align 8
store i8*%cf,i8**%i,align 8
%cg=getelementptr inbounds i8,i8*%cb,i64%bH
%ch=bitcast i8*%cg to i8**
%ci=load i8*,i8**%ch,align 8
store i8*%ci,i8**%j,align 8
%cj=getelementptr inbounds i8,i8*%ca,i64 16
%ck=bitcast i8*%cj to i32*
%cl=load i32,i32*%ck,align 4
%cm=icmp eq i32%cl,0
br i1%cm,label%cs,label%cn
cn:
store i8*null,i8**%k,align 8
%co=sext i32%U to i64
%cp=getelementptr inbounds i8,i8*%cb,i64%co
%cq=bitcast i8*%cp to i8**
%cr=load i8*,i8**%cq,align 8
store i8*%cr,i8**%k,align 8
br label%cH
cs:
%ct=getelementptr inbounds i8,i8*%ca,i64 20
%cu=bitcast i8*%ct to i32*
%cv=load i32,i32*%cu,align 4
%cw=call i8*@sml_alloc(i32 inreg%cv)#0
%cx=getelementptr inbounds i8,i8*%cw,i64 -4
%cy=bitcast i8*%cx to i32*
store i32%cv,i32*%cy,align 4
%cz=load i8*,i8**%k,align 8
store i8*null,i8**%k,align 8
%cA=sext i32%U to i64
%cB=getelementptr inbounds i8,i8*%cz,i64%cA
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cw,i8*%cB,i32%cv,i1 false)
%cC=load i8*,i8**%n,align 8
%cD=getelementptr inbounds i8,i8*%cC,i64 16
%cE=bitcast i8*%cD to i32*
%cF=load i32,i32*%cE,align 4
store i8*%cw,i8**%k,align 8
%cG=icmp eq i32%cF,0
br i1%cG,label%cP,label%cH
cH:
%cI=phi i8*[%ca,%cn],[%cC,%cs]
%cJ=phi i32[%cl,%cn],[%cF,%cs]
%cK=load i8*,i8**%l,align 8
store i8*null,i8**%l,align 8
%cL=sext i32%U to i64
%cM=getelementptr inbounds i8,i8*%cK,i64%cL
%cN=bitcast i8*%cM to i8**
%cO=load i8*,i8**%cN,align 8
br label%c3
cP:
%cQ=getelementptr inbounds i8,i8*%cC,i64 20
%cR=bitcast i8*%cQ to i32*
%cS=load i32,i32*%cR,align 4
%cT=call i8*@sml_alloc(i32 inreg%cS)#0
%cU=getelementptr inbounds i8,i8*%cT,i64 -4
%cV=bitcast i8*%cU to i32*
store i32%cS,i32*%cV,align 4
%cW=load i8*,i8**%l,align 8
store i8*null,i8**%l,align 8
%cX=sext i32%U to i64
%cY=getelementptr inbounds i8,i8*%cW,i64%cX
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cT,i8*%cY,i32%cS,i1 false)
%cZ=load i8*,i8**%n,align 8
%c0=getelementptr inbounds i8,i8*%cZ,i64 16
%c1=bitcast i8*%c0 to i32*
%c2=load i32,i32*%c1,align 4
br label%c3
c3:
%c4=phi i32[%c2,%cP],[%cJ,%cH]
%c5=phi i8*[%cZ,%cP],[%cI,%cH]
%c6=phi i8*[%cT,%cP],[%cO,%cH]
store i8*%c6,i8**%l,align 8
%c7=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%c8=sext i32%W to i64
%c9=getelementptr inbounds i8,i8*%c7,i64%c8
%da=bitcast i8*%c9 to i8**
%db=load i8*,i8**%da,align 8
store i8*%db,i8**%m,align 8
%dc=bitcast i8*%c5 to i8**
%dd=load i8*,i8**%dc,align 8
%de=getelementptr inbounds i8,i8*%c5,i64 20
%df=bitcast i8*%de to i32*
%dg=load i32,i32*%df,align 4
%dh=call fastcc i8*@_SMLL1N_308(i8*inreg%dd,i32 inreg%c4,i32 inreg%dg)
%di=getelementptr inbounds i8,i8*%dh,i64 16
%dj=bitcast i8*%di to i8*(i8*,i8*)**
%dk=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%dj,align 8
%dl=bitcast i8*%dh to i8**
%dm=load i8*,i8**%dl,align 8
store i8*%dm,i8**%o,align 8
%dn=load i8*,i8**%n,align 8
%do=bitcast i8*%dn to i8**
%dp=load i8*,i8**%do,align 8
%dq=getelementptr inbounds i8,i8*%dn,i64 16
%dr=bitcast i8*%dq to i32*
%ds=load i32,i32*%dr,align 4
%dt=getelementptr inbounds i8,i8*%dn,i64 20
%du=bitcast i8*%dt to i32*
%dv=load i32,i32*%du,align 4
%dw=call fastcc i8*@_SMLL1N_308(i8*inreg%dp,i32 inreg%ds,i32 inreg%dv)
%dx=getelementptr inbounds i8,i8*%dw,i64 16
%dy=bitcast i8*%dx to i8*(i8*,i8*)**
%dz=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%dy,align 8
%dA=bitcast i8*%dw to i8**
%dB=load i8*,i8**%dA,align 8
store i8*%dB,i8**%c,align 8
%dC=load i8*,i8**%n,align 8
%dD=getelementptr inbounds i8,i8*%dC,i64 12
%dE=bitcast i8*%dD to i32*
%dF=load i32,i32*%dE,align 4
%dG=getelementptr inbounds i8,i8*%dC,i64 8
%dH=bitcast i8*%dG to i32*
%dI=load i32,i32*%dH,align 4
%dJ=getelementptr inbounds i8,i8*%dC,i64 20
%dK=bitcast i8*%dJ to i32*
%dL=load i32,i32*%dK,align 4
%dM=getelementptr inbounds i8,i8*%dC,i64 16
%dN=bitcast i8*%dM to i32*
%dO=load i32,i32*%dN,align 4
%dP=call i8*@sml_alloc(i32 inreg%as)#0
%dQ=or i32%Y,1342177280
%dR=getelementptr inbounds i8,i8*%dP,i64 -4
%dS=bitcast i8*%dR to i32*
store i32%dQ,i32*%dS,align 4
call void@llvm.memset.p0i8.i32(i8*%dP,i8 0,i32%as,i1 false)
%dT=icmp eq i32%dI,0
%dU=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%dV=sext i32%B to i64
%dW=getelementptr inbounds i8,i8*%dP,i64%dV
br i1%dT,label%dZ,label%dX
dX:
%dY=bitcast i8*%dW to i8**
store i8*%dU,i8**%dY,align 8
br label%d0
dZ:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dW,i8*%dU,i32%dF,i1 false)
br label%d0
d0:
%d1=icmp eq i32%dO,0
%d2=load i8*,i8**%l,align 8
store i8*null,i8**%l,align 8
%d3=sext i32%I to i64
%d4=getelementptr inbounds i8,i8*%dP,i64%d3
br i1%d1,label%d7,label%d5
d5:
%d6=bitcast i8*%d4 to i8**
store i8*%d2,i8**%d6,align 8
br label%d8
d7:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%d4,i8*%d2,i32%dL,i1 false)
br label%d8
d8:
%d9=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%ea=getelementptr inbounds i8,i8*%dP,i64%a9
%eb=bitcast i8*%ea to i8**
store i8*%d9,i8**%eb,align 8
%ec=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%ed=getelementptr inbounds i8,i8*%dP,i64%c8
%ee=bitcast i8*%ed to i8**
store i8*%ec,i8**%ee,align 8
%ef=sext i32%Y to i64
%eg=getelementptr inbounds i8,i8*%dP,i64%ef
%eh=bitcast i8*%eg to i32*
store i32%ar,i32*%eh,align 4
%ei=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ej=call fastcc i8*%dz(i8*inreg%ei,i8*inreg%dP)
store i8*%ej,i8**%c,align 8
%ek=load i8*,i8**%n,align 8
%el=bitcast i8*%ek to i8**
%em=load i8*,i8**%el,align 8
%en=getelementptr inbounds i8,i8*%ek,i64 16
%eo=bitcast i8*%en to i32*
%ep=load i32,i32*%eo,align 4
%eq=getelementptr inbounds i8,i8*%ek,i64 20
%er=bitcast i8*%eq to i32*
%es=load i32,i32*%er,align 4
%et=call fastcc i8*@_SMLL1N_308(i8*inreg%em,i32 inreg%ep,i32 inreg%es)
%eu=getelementptr inbounds i8,i8*%et,i64 16
%ev=bitcast i8*%eu to i8*(i8*,i8*)**
%ew=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ev,align 8
%ex=bitcast i8*%et to i8**
%ey=load i8*,i8**%ex,align 8
store i8*%ey,i8**%f,align 8
%ez=load i8*,i8**%n,align 8
%eA=getelementptr inbounds i8,i8*%ez,i64 12
%eB=bitcast i8*%eA to i32*
%eC=load i32,i32*%eB,align 4
%eD=getelementptr inbounds i8,i8*%ez,i64 8
%eE=bitcast i8*%eD to i32*
%eF=load i32,i32*%eE,align 4
%eG=getelementptr inbounds i8,i8*%ez,i64 20
%eH=bitcast i8*%eG to i32*
%eI=load i32,i32*%eH,align 4
%eJ=getelementptr inbounds i8,i8*%ez,i64 16
%eK=bitcast i8*%eJ to i32*
%eL=load i32,i32*%eK,align 4
%eM=call i8*@sml_alloc(i32 inreg%as)#0
%eN=getelementptr inbounds i8,i8*%eM,i64 -4
%eO=bitcast i8*%eN to i32*
store i32%dQ,i32*%eO,align 4
call void@llvm.memset.p0i8.i32(i8*%eM,i8 0,i32%as,i1 false)
%eP=icmp eq i32%eF,0
%eQ=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%eR=getelementptr inbounds i8,i8*%eM,i64%dV
br i1%eP,label%eU,label%eS
eS:
%eT=bitcast i8*%eR to i8**
store i8*%eQ,i8**%eT,align 8
br label%eV
eU:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%eR,i8*%eQ,i32%eC,i1 false)
br label%eV
eV:
%eW=icmp eq i32%eL,0
%eX=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%eY=getelementptr inbounds i8,i8*%eM,i64%d3
br i1%eW,label%e1,label%eZ
eZ:
%e0=bitcast i8*%eY to i8**
store i8*%eX,i8**%e0,align 8
br label%e2
e1:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%eY,i8*%eX,i32%eI,i1 false)
br label%e2
e2:
%e3=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%e4=getelementptr inbounds i8,i8*%eM,i64%a9
%e5=bitcast i8*%e4 to i8**
store i8*%e3,i8**%e5,align 8
%e6=load i8*,i8**%m,align 8
store i8*null,i8**%m,align 8
%e7=getelementptr inbounds i8,i8*%eM,i64%c8
%e8=bitcast i8*%e7 to i8**
store i8*%e6,i8**%e8,align 8
%e9=getelementptr inbounds i8,i8*%eM,i64%ef
%fa=bitcast i8*%e9 to i32*
store i32%ar,i32*%fa,align 4
%fb=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%fc=call fastcc i8*%ew(i8*inreg%fb,i8*inreg%eM)
store i8*%fc,i8**%d,align 8
%fd=load i8*,i8**%n,align 8
%fe=getelementptr inbounds i8,i8*%fd,i64 12
%ff=bitcast i8*%fe to i32*
%fg=load i32,i32*%ff,align 4
%fh=getelementptr inbounds i8,i8*%fd,i64 8
%fi=bitcast i8*%fh to i32*
%fj=load i32,i32*%fi,align 4
%fk=getelementptr inbounds i8,i8*%fd,i64 20
%fl=bitcast i8*%fk to i32*
%fm=load i32,i32*%fl,align 4
store i8*null,i8**%n,align 8
%fn=getelementptr inbounds i8,i8*%fd,i64 16
%fo=bitcast i8*%fn to i32*
%fp=load i32,i32*%fo,align 4
%fq=call i8*@sml_alloc(i32 inreg%as)#0
%fr=getelementptr inbounds i8,i8*%fq,i64 -4
%fs=bitcast i8*%fr to i32*
store i32%dQ,i32*%fs,align 4
call void@llvm.memset.p0i8.i32(i8*%fq,i8 0,i32%as,i1 false)
%ft=icmp eq i32%fj,0
%fu=load i8*,i8**%h,align 8
%fv=getelementptr inbounds i8,i8*%fq,i64%dV
br i1%ft,label%fy,label%fw
fw:
%fx=bitcast i8*%fv to i8**
store i8*%fu,i8**%fx,align 8
br label%fz
fy:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%fv,i8*%fu,i32%fg,i1 false)
br label%fz
fz:
%fA=icmp eq i32%fp,0
%fB=load i8*,i8**%k,align 8
%fC=getelementptr inbounds i8,i8*%fq,i64%d3
br i1%fA,label%fF,label%fD
fD:
%fE=bitcast i8*%fC to i8**
store i8*%fB,i8**%fE,align 8
br label%fG
fF:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%fC,i8*%fB,i32%fm,i1 false)
br label%fG
fG:
%fH=load i8*,i8**%c,align 8
%fI=getelementptr inbounds i8,i8*%fq,i64%a9
%fJ=bitcast i8*%fI to i8**
store i8*%fH,i8**%fJ,align 8
%fK=load i8*,i8**%d,align 8
%fL=getelementptr inbounds i8,i8*%fq,i64%c8
%fM=bitcast i8*%fL to i8**
store i8*%fK,i8**%fM,align 8
%fN=getelementptr inbounds i8,i8*%fq,i64%ef
%fO=bitcast i8*%fN to i32*
store i32%ar,i32*%fO,align 4
%fP=load i8*,i8**%o,align 8
%fQ=tail call fastcc i8*%dk(i8*inreg%fP,i8*inreg%fq)
ret i8*%fQ
fR:
%fS=load i8*,i8**@_SMLZ5Match,align 8
store i8*%fS,i8**%c,align 8
%fT=call i8*@sml_alloc(i32 inreg 20)#0
%fU=getelementptr inbounds i8,i8*%fT,i64 -4
%fV=bitcast i8*%fU to i32*
store i32 1342177296,i32*%fV,align 4
store i8*%fT,i8**%d,align 8
%fW=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%fX=bitcast i8*%fT to i8**
store i8*%fW,i8**%fX,align 8
%fY=getelementptr inbounds i8,i8*%fT,i64 8
%fZ=bitcast i8*%fY to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[52x i8]}>,<{[4x i8],i32,[52x i8]}>*@g,i64 0,i32 2,i64 0),i8**%fZ,align 8
%f0=getelementptr inbounds i8,i8*%fT,i64 16
%f1=bitcast i8*%f0 to i32*
store i32 3,i32*%f1,align 4
%f2=call i8*@sml_alloc(i32 inreg 60)#0
%f3=getelementptr inbounds i8,i8*%f2,i64 -4
%f4=bitcast i8*%f3 to i32*
store i32 1342177336,i32*%f4,align 4
%f5=getelementptr inbounds i8,i8*%f2,i64 56
%f6=bitcast i8*%f5 to i32*
store i32 1,i32*%f6,align 4
%f7=load i8*,i8**%d,align 8
%f8=bitcast i8*%f2 to i8**
store i8*%f7,i8**%f8,align 8
call void@sml_raise(i8*inreg%f2)#1
unreachable
}
define internal fastcc i8*@_SMLL8double__R_320(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=getelementptr inbounds i8,i8*%a,i64 8
%i=bitcast i8*%h to i32*
%j=load i32,i32*%i,align 4
%k=getelementptr inbounds i8,i8*%a,i64 12
%l=bitcast i8*%k to i32*
%m=load i32,i32*%l,align 4
%n=call i8*@sml_alloc(i32 inreg 28)#0
%o=getelementptr inbounds i8,i8*%n,i64 -4
%p=bitcast i8*%o to i32*
store i32 1342177304,i32*%p,align 4
store i8*%n,i8**%e,align 8
%q=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%r=bitcast i8*%n to i8**
store i8*%q,i8**%r,align 8
%s=getelementptr inbounds i8,i8*%n,i64 8
%t=bitcast i8*%s to i32*
store i32%j,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%n,i64 12
%v=bitcast i8*%u to i32*
store i32%m,i32*%v,align 4
%w=getelementptr inbounds i8,i8*%n,i64 16
%x=bitcast i8*%w to i32*
store i32%b,i32*%x,align 4
%y=getelementptr inbounds i8,i8*%n,i64 20
%z=bitcast i8*%y to i32*
store i32%c,i32*%z,align 4
%A=getelementptr inbounds i8,i8*%n,i64 24
%B=bitcast i8*%A to i32*
store i32 1,i32*%B,align 4
%C=call i8*@sml_alloc(i32 inreg 28)#0
%D=getelementptr inbounds i8,i8*%C,i64 -4
%E=bitcast i8*%D to i32*
store i32 1342177304,i32*%E,align 4
%F=load i8*,i8**%e,align 8
%G=bitcast i8*%C to i8**
store i8*%F,i8**%G,align 8
%H=getelementptr inbounds i8,i8*%C,i64 8
%I=bitcast i8*%H to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL8double__R_319 to void(...)*),void(...)**%I,align 8
%J=getelementptr inbounds i8,i8*%C,i64 16
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL8double__R_319 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%C,i64 24
%M=bitcast i8*%L to i32*
store i32 -2147483647,i32*%M,align 4
ret i8*%C
}
define internal fastcc i8*@_SMLL2T_G_321(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
o:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%h,align 8
store i8*%b,i8**%c,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%m,label%k
k:
call void@sml_check(i32 inreg%i)
%l=load i8*,i8**%h,align 8
br label%m
m:
%n=phi i8*[%l,%k],[%a,%o]
%p=getelementptr inbounds i8,i8*%n,i64 36
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=add i32%r,3
%t=sub i32 0,%r
%u=and i32%s,%t
%v=add i32%r,7
%w=add i32%v,%u
%x=and i32%w,-8
%y=add i32%x,15
%z=and i32%y,-8
%A=getelementptr inbounds i8,i8*%n,i64 44
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=add i32%C,7
%E=add i32%D,%z
%F=sub i32 0,%C
%G=and i32%E,%F
%H=add i32%D,%G
%I=and i32%H,-8
%J=lshr i32%G,3
%K=lshr i32%y,3
%L=sub nsw i32%J,%K
%M=lshr i32%w,3
%N=sub nsw i32%K,%M
%O=lshr i32%u,3
%P=sub nsw i32%M,%O
%Q=getelementptr inbounds i8,i8*%n,i64 40
%R=bitcast i8*%Q to i32*
%S=load i32,i32*%R,align 4
%T=shl i32%S,%L
%U=or i32%T,1
%V=shl i32%U,%N
%W=or i32%V,1
%X=shl i32%W,%P
%Y=getelementptr inbounds i8,i8*%n,i64 32
%Z=bitcast i8*%Y to i32*
%aa=load i32,i32*%Z,align 4
%ab=or i32%X,%aa
%ac=shl i32%ab,%O
%ad=or i32%I,4
%ae=add i32%r,-1
%af=and i32%ae,%t
%ag=add i32%ae,%C
%ah=add i32%ag,%af
%ai=and i32%ah,%F
%aj=add i32%D,%ai
%ak=and i32%aj,-8
%al=add i32%ak,15
%am=and i32%al,-8
%an=icmp eq i32%aa,0
br i1%an,label%au,label%ao
ao:
%ap=load i8*,i8**%c,align 8
%aq=sext i32%af to i64
%ar=getelementptr inbounds i8,i8*%ap,i64%aq
%as=bitcast i8*%ar to i8**
%at=load i8*,i8**%as,align 8
br label%aF
au:
%av=call i8*@sml_alloc(i32 inreg%r)#0
%aw=getelementptr inbounds i8,i8*%av,i64 -4
%ax=bitcast i8*%aw to i32*
store i32%r,i32*%ax,align 4
%ay=load i8*,i8**%c,align 8
%az=sext i32%af to i64
%aA=getelementptr inbounds i8,i8*%ay,i64%az
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%av,i8*%aA,i32%r,i1 false)
%aB=load i8*,i8**%h,align 8
%aC=getelementptr inbounds i8,i8*%aB,i64 40
%aD=bitcast i8*%aC to i32*
%aE=load i32,i32*%aD,align 4
br label%aF
aF:
%aG=phi i8*[%ay,%au],[%ap,%ao]
%aH=phi i32[%aE,%au],[%S,%ao]
%aI=phi i8*[%aB,%au],[%n,%ao]
%aJ=phi i8*[%av,%au],[%at,%ao]
store i8*%aJ,i8**%d,align 8
%aK=icmp eq i32%aH,0
br i1%aK,label%aQ,label%aL
aL:
%aM=sext i32%ai to i64
%aN=getelementptr inbounds i8,i8*%aG,i64%aM
%aO=bitcast i8*%aN to i8**
%aP=load i8*,i8**%aO,align 8
br label%a0
aQ:
%aR=getelementptr inbounds i8,i8*%aI,i64 44
%aS=bitcast i8*%aR to i32*
%aT=load i32,i32*%aS,align 4
%aU=call i8*@sml_alloc(i32 inreg%aT)#0
%aV=getelementptr inbounds i8,i8*%aU,i64 -4
%aW=bitcast i8*%aV to i32*
store i32%aT,i32*%aW,align 4
%aX=load i8*,i8**%c,align 8
%aY=sext i32%ai to i64
%aZ=getelementptr inbounds i8,i8*%aX,i64%aY
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aU,i8*%aZ,i32%aT,i1 false)
br label%a0
a0:
%a1=phi i8*[%aX,%aQ],[%aG,%aL]
%a2=phi i8*[%aU,%aQ],[%aP,%aL]
store i8*%a2,i8**%e,align 8
%a3=sext i32%ak to i64
%a4=getelementptr inbounds i8,i8*%a1,i64%a3
%a5=bitcast i8*%a4 to i8**
%a6=load i8*,i8**%a5,align 8
store i8*%a6,i8**%f,align 8
%a7=icmp eq i8*%a6,null
br i1%a7,label%a8,label%ee
a8:
%a9=sext i32%am to i64
%ba=getelementptr inbounds i8,i8*%a1,i64%a9
%bb=bitcast i8*%ba to i8**
%bc=load i8*,i8**%bb,align 8
store i8*%bc,i8**%f,align 8
%bd=icmp eq i8*%bc,null
br i1%bd,label%be,label%bW
be:
store i8*null,i8**%c,align 8
store i8*null,i8**%f,align 8
%bf=load i8*,i8**%h,align 8
%bg=getelementptr inbounds i8,i8*%bf,i64 36
%bh=bitcast i8*%bg to i32*
%bi=load i32,i32*%bh,align 4
%bj=getelementptr inbounds i8,i8*%bf,i64 32
%bk=bitcast i8*%bj to i32*
%bl=load i32,i32*%bk,align 4
%bm=getelementptr inbounds i8,i8*%bf,i64 44
%bn=bitcast i8*%bm to i32*
%bo=load i32,i32*%bn,align 4
store i8*null,i8**%h,align 8
%bp=getelementptr inbounds i8,i8*%bf,i64 40
%bq=bitcast i8*%bp to i32*
%br=load i32,i32*%bq,align 4
%bs=call i8*@sml_alloc(i32 inreg%ad)#0
%bt=or i32%I,1342177280
%bu=bitcast i8*%bs to i32*
%bv=getelementptr inbounds i8,i8*%bs,i64 -4
%bw=bitcast i8*%bv to i32*
store i32%bt,i32*%bw,align 4
call void@llvm.memset.p0i8.i32(i8*%bs,i8 0,i32%ad,i1 false)
store i32 1,i32*%bu,align 4
%bx=icmp eq i32%bl,0
%by=load i8*,i8**%d,align 8
%bz=sext i32%u to i64
%bA=getelementptr inbounds i8,i8*%bs,i64%bz
br i1%bx,label%bD,label%bB
bB:
%bC=bitcast i8*%bA to i8**
store i8*%by,i8**%bC,align 8
br label%bE
bD:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bA,i8*%by,i32%bi,i1 false)
br label%bE
bE:
%bF=sext i32%x to i64
%bG=getelementptr inbounds i8,i8*%bs,i64%bF
%bH=bitcast i8*%bG to i8**
store i8*null,i8**%bH,align 8
%bI=sext i32%z to i64
%bJ=getelementptr inbounds i8,i8*%bs,i64%bI
%bK=bitcast i8*%bJ to i8**
store i8*null,i8**%bK,align 8
%bL=icmp eq i32%br,0
%bM=load i8*,i8**%e,align 8
%bN=sext i32%G to i64
%bO=getelementptr inbounds i8,i8*%bs,i64%bN
br i1%bL,label%bR,label%bP
bP:
%bQ=bitcast i8*%bO to i8**
store i8*%bM,i8**%bQ,align 8
br label%bS
bR:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bO,i8*%bM,i32%bo,i1 false)
br label%bS
bS:
%bT=sext i32%I to i64
%bU=getelementptr inbounds i8,i8*%bs,i64%bT
%bV=bitcast i8*%bU to i32*
store i32%ac,i32*%bV,align 4
ret i8*%bs
bW:
%bX=sext i32%x to i64
%bY=getelementptr inbounds i8,i8*%bc,i64%bX
%bZ=bitcast i8*%bY to i8**
%b0=load i8*,i8**%bZ,align 8
%b1=icmp eq i8*%b0,null
br i1%b1,label%b2,label%c7
b2:
%b3=sext i32%z to i64
%b4=getelementptr inbounds i8,i8*%bc,i64%b3
%b5=bitcast i8*%b4 to i8**
%b6=load i8*,i8**%b5,align 8
%b7=icmp eq i8*%b6,null
br i1%b7,label%b8,label%cP
b8:
store i8*null,i8**%c,align 8
%b9=load i8*,i8**%h,align 8
%ca=getelementptr inbounds i8,i8*%b9,i64 36
%cb=bitcast i8*%ca to i32*
%cc=load i32,i32*%cb,align 4
%cd=getelementptr inbounds i8,i8*%b9,i64 32
%ce=bitcast i8*%cd to i32*
%cf=load i32,i32*%ce,align 4
%cg=getelementptr inbounds i8,i8*%b9,i64 44
%ch=bitcast i8*%cg to i32*
%ci=load i32,i32*%ch,align 4
store i8*null,i8**%h,align 8
%cj=getelementptr inbounds i8,i8*%b9,i64 40
%ck=bitcast i8*%cj to i32*
%cl=load i32,i32*%ck,align 4
%cm=call i8*@sml_alloc(i32 inreg%ad)#0
%cn=or i32%I,1342177280
%co=bitcast i8*%cm to i32*
%cp=getelementptr inbounds i8,i8*%cm,i64 -4
%cq=bitcast i8*%cp to i32*
store i32%cn,i32*%cq,align 4
call void@llvm.memset.p0i8.i32(i8*%cm,i8 0,i32%ad,i1 false)
store i32 2,i32*%co,align 4
%cr=icmp eq i32%cf,0
%cs=load i8*,i8**%d,align 8
%ct=sext i32%u to i64
%cu=getelementptr inbounds i8,i8*%cm,i64%ct
br i1%cr,label%cx,label%cv
cv:
%cw=bitcast i8*%cu to i8**
store i8*%cs,i8**%cw,align 8
br label%cy
cx:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cu,i8*%cs,i32%cc,i1 false)
br label%cy
cy:
%cz=getelementptr inbounds i8,i8*%cm,i64%bX
%cA=bitcast i8*%cz to i8**
store i8*null,i8**%cA,align 8
%cB=load i8*,i8**%f,align 8
%cC=getelementptr inbounds i8,i8*%cm,i64%b3
%cD=bitcast i8*%cC to i8**
store i8*%cB,i8**%cD,align 8
%cE=icmp eq i32%cl,0
%cF=load i8*,i8**%e,align 8
%cG=sext i32%G to i64
%cH=getelementptr inbounds i8,i8*%cm,i64%cG
br i1%cE,label%cK,label%cI
cI:
%cJ=bitcast i8*%cH to i8**
store i8*%cF,i8**%cJ,align 8
br label%cL
cK:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cH,i8*%cF,i32%ci,i1 false)
br label%cL
cL:
%cM=sext i32%I to i64
%cN=getelementptr inbounds i8,i8*%cm,i64%cM
%cO=bitcast i8*%cN to i32*
store i32%ac,i32*%cO,align 4
ret i8*%cm
cP:
store i8*null,i8**%d,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%f,align 8
%cQ=load i8*,i8**%h,align 8
%cR=bitcast i8*%cQ to i8**
%cS=load i8*,i8**%cR,align 8
%cT=getelementptr inbounds i8,i8*%cQ,i64 40
%cU=bitcast i8*%cT to i32*
%cV=load i32,i32*%cU,align 4
store i8*null,i8**%h,align 8
%cW=getelementptr inbounds i8,i8*%cQ,i64 44
%cX=bitcast i8*%cW to i32*
%cY=load i32,i32*%cX,align 4
%cZ=call fastcc i8*@_SMLL8single__L_311(i8*inreg%cS,i32 inreg%cV,i32 inreg%cY)
%c0=getelementptr inbounds i8,i8*%cZ,i64 16
%c1=bitcast i8*%c0 to i8*(i8*,i8*)**
%c2=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%c1,align 8
%c3=bitcast i8*%cZ to i8**
%c4=load i8*,i8**%c3,align 8
%c5=load i8*,i8**%c,align 8
%c6=tail call fastcc i8*%c2(i8*inreg%c4,i8*inreg%c5)
ret i8*%c6
c7:
store i8*null,i8**%d,align 8
store i8*null,i8**%e,align 8
%c8=sext i32%z to i64
%c9=getelementptr inbounds i8,i8*%bc,i64%c8
%da=bitcast i8*%c9 to i8**
%db=load i8*,i8**%da,align 8
%dc=icmp eq i8*%db,null
br i1%dc,label%dd,label%dw
dd:
store i8*null,i8**%f,align 8
%de=load i8*,i8**%h,align 8
%df=getelementptr inbounds i8,i8*%de,i64 16
%dg=bitcast i8*%df to i8**
%dh=load i8*,i8**%dg,align 8
%di=getelementptr inbounds i8,i8*%de,i64 40
%dj=bitcast i8*%di to i32*
%dk=load i32,i32*%dj,align 4
store i8*null,i8**%h,align 8
%dl=getelementptr inbounds i8,i8*%de,i64 44
%dm=bitcast i8*%dl to i32*
%dn=load i32,i32*%dm,align 4
%do=call fastcc i8*@_SMLL8double__L_317(i8*inreg%dh,i32 inreg%dk,i32 inreg%dn)
%dp=getelementptr inbounds i8,i8*%do,i64 16
%dq=bitcast i8*%dp to i8*(i8*,i8*)**
%dr=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%dq,align 8
%ds=bitcast i8*%do to i8**
%dt=load i8*,i8**%ds,align 8
%du=load i8*,i8**%c,align 8
%dv=tail call fastcc i8*%dr(i8*inreg%dt,i8*inreg%du)
ret i8*%dv
dw:
%dx=bitcast i8*%bY to i32**
%dy=load i32*,i32**%dx,align 8
%dz=load i32,i32*%dy,align 4
store i8*null,i8**%f,align 8
%dA=bitcast i8*%c9 to i32**
%dB=load i32*,i32**%dA,align 8
%dC=load i32,i32*%dB,align 4
%dD=icmp slt i32%dz,%dC
%dE=load i8*,i8**%h,align 8
br i1%dD,label%dF,label%dW
dF:
%dG=bitcast i8*%dE to i8**
%dH=load i8*,i8**%dG,align 8
%dI=getelementptr inbounds i8,i8*%dE,i64 40
%dJ=bitcast i8*%dI to i32*
%dK=load i32,i32*%dJ,align 4
store i8*null,i8**%h,align 8
%dL=getelementptr inbounds i8,i8*%dE,i64 44
%dM=bitcast i8*%dL to i32*
%dN=load i32,i32*%dM,align 4
%dO=call fastcc i8*@_SMLL8single__L_311(i8*inreg%dH,i32 inreg%dK,i32 inreg%dN)
%dP=getelementptr inbounds i8,i8*%dO,i64 16
%dQ=bitcast i8*%dP to i8*(i8*,i8*)**
%dR=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%dQ,align 8
%dS=bitcast i8*%dO to i8**
%dT=load i8*,i8**%dS,align 8
%dU=load i8*,i8**%c,align 8
%dV=tail call fastcc i8*%dR(i8*inreg%dT,i8*inreg%dU)
ret i8*%dV
dW:
%dX=getelementptr inbounds i8,i8*%dE,i64 16
%dY=bitcast i8*%dX to i8**
%dZ=load i8*,i8**%dY,align 8
%d0=getelementptr inbounds i8,i8*%dE,i64 40
%d1=bitcast i8*%d0 to i32*
%d2=load i32,i32*%d1,align 4
store i8*null,i8**%h,align 8
%d3=getelementptr inbounds i8,i8*%dE,i64 44
%d4=bitcast i8*%d3 to i32*
%d5=load i32,i32*%d4,align 4
%d6=call fastcc i8*@_SMLL8double__L_317(i8*inreg%dZ,i32 inreg%d2,i32 inreg%d5)
%d7=getelementptr inbounds i8,i8*%d6,i64 16
%d8=bitcast i8*%d7 to i8*(i8*,i8*)**
%d9=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%d8,align 8
%ea=bitcast i8*%d6 to i8**
%eb=load i8*,i8**%ea,align 8
%ec=load i8*,i8**%c,align 8
%ed=tail call fastcc i8*%d9(i8*inreg%eb,i8*inreg%ec)
ret i8*%ed
ee:
%ef=sext i32%x to i64
%eg=getelementptr inbounds i8,i8*%a6,i64%ef
%eh=bitcast i8*%eg to i8**
%ei=load i8*,i8**%eh,align 8
%ej=icmp eq i8*%ei,null
br i1%ej,label%ek,label%fV
ek:
%el=sext i32%z to i64
%em=getelementptr inbounds i8,i8*%a6,i64%el
%en=bitcast i8*%em to i8**
%eo=load i8*,i8**%en,align 8
%ep=icmp eq i8*%eo,null
%eq=sext i32%am to i64
%er=getelementptr inbounds i8,i8*%a1,i64%eq
%es=bitcast i8*%er to i8**
%et=load i8*,i8**%es,align 8
%eu=icmp eq i8*%et,null
br i1%ep,label%ev,label%fp
ev:
br i1%eu,label%ew,label%fd
ew:
store i8*null,i8**%c,align 8
%ex=load i8*,i8**%h,align 8
%ey=getelementptr inbounds i8,i8*%ex,i64 36
%ez=bitcast i8*%ey to i32*
%eA=load i32,i32*%ez,align 4
%eB=getelementptr inbounds i8,i8*%ex,i64 32
%eC=bitcast i8*%eB to i32*
%eD=load i32,i32*%eC,align 4
%eE=getelementptr inbounds i8,i8*%ex,i64 44
%eF=bitcast i8*%eE to i32*
%eG=load i32,i32*%eF,align 4
store i8*null,i8**%h,align 8
%eH=getelementptr inbounds i8,i8*%ex,i64 40
%eI=bitcast i8*%eH to i32*
%eJ=load i32,i32*%eI,align 4
%eK=call i8*@sml_alloc(i32 inreg%ad)#0
%eL=or i32%I,1342177280
%eM=bitcast i8*%eK to i32*
%eN=getelementptr inbounds i8,i8*%eK,i64 -4
%eO=bitcast i8*%eN to i32*
store i32%eL,i32*%eO,align 4
call void@llvm.memset.p0i8.i32(i8*%eK,i8 0,i32%ad,i1 false)
store i32 2,i32*%eM,align 4
%eP=icmp eq i32%eD,0
%eQ=load i8*,i8**%d,align 8
%eR=sext i32%u to i64
%eS=getelementptr inbounds i8,i8*%eK,i64%eR
br i1%eP,label%eV,label%eT
eT:
%eU=bitcast i8*%eS to i8**
store i8*%eQ,i8**%eU,align 8
br label%eW
eV:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%eS,i8*%eQ,i32%eA,i1 false)
br label%eW
eW:
%eX=load i8*,i8**%f,align 8
%eY=getelementptr inbounds i8,i8*%eK,i64%ef
%eZ=bitcast i8*%eY to i8**
store i8*%eX,i8**%eZ,align 8
%e0=getelementptr inbounds i8,i8*%eK,i64%el
%e1=bitcast i8*%e0 to i8**
store i8*null,i8**%e1,align 8
%e2=icmp eq i32%eJ,0
%e3=load i8*,i8**%e,align 8
%e4=sext i32%G to i64
%e5=getelementptr inbounds i8,i8*%eK,i64%e4
br i1%e2,label%e8,label%e6
e6:
%e7=bitcast i8*%e5 to i8**
store i8*%e3,i8**%e7,align 8
br label%e9
e8:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%e5,i8*%e3,i32%eG,i1 false)
br label%e9
e9:
%fa=sext i32%I to i64
%fb=getelementptr inbounds i8,i8*%eK,i64%fa
%fc=bitcast i8*%fb to i32*
store i32%ac,i32*%fc,align 4
ret i8*%eK
fd:
%fe=bitcast i8*%a6 to i32*
%ff=load i32,i32*%fe,align 4
%fg=bitcast i8*%et to i32*
%fh=load i32,i32*%fg,align 4
%fi=getelementptr inbounds i8,i8*%et,i64%ef
%fj=bitcast i8*%fi to i8**
%fk=load i8*,i8**%fj,align 8
%fl=getelementptr inbounds i8,i8*%et,i64%el
%fm=bitcast i8*%fl to i8**
%fn=load i8*,i8**%fm,align 8
%fo=load i8*,i8**%d,align 8
store i8*%a1,i8**%c,align 8
store i8*%fo,i8**%d,align 8
store i8*%a2,i8**%e,align 8
store i8*%a6,i8**%f,align 8
store i8*%et,i8**%g,align 8
br label%hw
fp:
br i1%eu,label%fq,label%fJ
fq:
store i8*null,i8**%d,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%f,align 8
%fr=load i8*,i8**%h,align 8
%fs=getelementptr inbounds i8,i8*%fr,i64 24
%ft=bitcast i8*%fs to i8**
%fu=load i8*,i8**%ft,align 8
%fv=getelementptr inbounds i8,i8*%fr,i64 40
%fw=bitcast i8*%fv to i32*
%fx=load i32,i32*%fw,align 4
store i8*null,i8**%h,align 8
%fy=getelementptr inbounds i8,i8*%fr,i64 44
%fz=bitcast i8*%fy to i32*
%fA=load i32,i32*%fz,align 4
%fB=call fastcc i8*@_SMLL8double__R_320(i8*inreg%fu,i32 inreg%fx,i32 inreg%fA)
%fC=getelementptr inbounds i8,i8*%fB,i64 16
%fD=bitcast i8*%fC to i8*(i8*,i8*)**
%fE=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%fD,align 8
%fF=bitcast i8*%fB to i8**
%fG=load i8*,i8**%fF,align 8
%fH=load i8*,i8**%c,align 8
%fI=tail call fastcc i8*%fE(i8*inreg%fG,i8*inreg%fH)
ret i8*%fI
fJ:
%fK=bitcast i8*%a6 to i32*
%fL=load i32,i32*%fK,align 4
%fM=bitcast i8*%et to i32*
%fN=load i32,i32*%fM,align 4
%fO=getelementptr inbounds i8,i8*%et,i64%ef
%fP=bitcast i8*%fO to i8**
%fQ=load i8*,i8**%fP,align 8
%fR=getelementptr inbounds i8,i8*%et,i64%el
%fS=bitcast i8*%fR to i8**
%fT=load i8*,i8**%fS,align 8
%fU=load i8*,i8**%d,align 8
store i8*%a1,i8**%c,align 8
store i8*%fU,i8**%d,align 8
store i8*%a2,i8**%e,align 8
store i8*%a6,i8**%f,align 8
store i8*%et,i8**%g,align 8
br label%hw
fV:
%fW=bitcast i8*%ei to i32*
%fX=load i32,i32*%fW,align 4
%fY=sext i32%z to i64
%fZ=getelementptr inbounds i8,i8*%a6,i64%fY
%f0=bitcast i8*%fZ to i8**
%f1=load i8*,i8**%f0,align 8
%f2=icmp eq i8*%f1,null
%f3=sext i32%am to i64
%f4=getelementptr inbounds i8,i8*%a1,i64%f3
%f5=bitcast i8*%f4 to i8**
%f6=load i8*,i8**%f5,align 8
%f7=icmp eq i8*%f6,null
br i1%f2,label%f8,label%gE
f8:
br i1%f7,label%f9,label%gs
f9:
store i8*null,i8**%d,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%f,align 8
%ga=load i8*,i8**%h,align 8
%gb=getelementptr inbounds i8,i8*%ga,i64 8
%gc=bitcast i8*%gb to i8**
%gd=load i8*,i8**%gc,align 8
%ge=getelementptr inbounds i8,i8*%ga,i64 40
%gf=bitcast i8*%ge to i32*
%gg=load i32,i32*%gf,align 4
store i8*null,i8**%h,align 8
%gh=getelementptr inbounds i8,i8*%ga,i64 44
%gi=bitcast i8*%gh to i32*
%gj=load i32,i32*%gi,align 4
%gk=call fastcc i8*@_SMLL8single__R_314(i8*inreg%gd,i32 inreg%gg,i32 inreg%gj)
%gl=getelementptr inbounds i8,i8*%gk,i64 16
%gm=bitcast i8*%gl to i8*(i8*,i8*)**
%gn=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%gm,align 8
%go=bitcast i8*%gk to i8**
%gp=load i8*,i8**%go,align 8
%gq=load i8*,i8**%c,align 8
%gr=tail call fastcc i8*%gn(i8*inreg%gp,i8*inreg%gq)
ret i8*%gr
gs:
%gt=bitcast i8*%a6 to i32*
%gu=load i32,i32*%gt,align 4
%gv=bitcast i8*%f6 to i32*
%gw=load i32,i32*%gv,align 4
%gx=getelementptr inbounds i8,i8*%f6,i64%ef
%gy=bitcast i8*%gx to i8**
%gz=load i8*,i8**%gy,align 8
%gA=getelementptr inbounds i8,i8*%f6,i64%fY
%gB=bitcast i8*%gA to i8**
%gC=load i8*,i8**%gB,align 8
%gD=load i8*,i8**%d,align 8
store i8*%a1,i8**%c,align 8
store i8*%gD,i8**%d,align 8
store i8*%a2,i8**%e,align 8
store i8*%a6,i8**%f,align 8
store i8*%f6,i8**%g,align 8
br label%hw
gE:
br i1%f7,label%gF,label%hk
gF:
%gG=bitcast i8*%f1 to i32*
%gH=load i32,i32*%gG,align 4
store i8*null,i8**%d,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%f,align 8
%gI=icmp sgt i32%fX,%gH
%gJ=load i8*,i8**%h,align 8
br i1%gI,label%gK,label%g2
gK:
%gL=getelementptr inbounds i8,i8*%gJ,i64 8
%gM=bitcast i8*%gL to i8**
%gN=load i8*,i8**%gM,align 8
%gO=getelementptr inbounds i8,i8*%gJ,i64 40
%gP=bitcast i8*%gO to i32*
%gQ=load i32,i32*%gP,align 4
store i8*null,i8**%h,align 8
%gR=getelementptr inbounds i8,i8*%gJ,i64 44
%gS=bitcast i8*%gR to i32*
%gT=load i32,i32*%gS,align 4
%gU=call fastcc i8*@_SMLL8single__R_314(i8*inreg%gN,i32 inreg%gQ,i32 inreg%gT)
%gV=getelementptr inbounds i8,i8*%gU,i64 16
%gW=bitcast i8*%gV to i8*(i8*,i8*)**
%gX=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%gW,align 8
%gY=bitcast i8*%gU to i8**
%gZ=load i8*,i8**%gY,align 8
%g0=load i8*,i8**%c,align 8
%g1=tail call fastcc i8*%gX(i8*inreg%gZ,i8*inreg%g0)
ret i8*%g1
g2:
%g3=getelementptr inbounds i8,i8*%gJ,i64 24
%g4=bitcast i8*%g3 to i8**
%g5=load i8*,i8**%g4,align 8
%g6=getelementptr inbounds i8,i8*%gJ,i64 40
%g7=bitcast i8*%g6 to i32*
%g8=load i32,i32*%g7,align 4
store i8*null,i8**%h,align 8
%g9=getelementptr inbounds i8,i8*%gJ,i64 44
%ha=bitcast i8*%g9 to i32*
%hb=load i32,i32*%ha,align 4
%hc=call fastcc i8*@_SMLL8double__R_320(i8*inreg%g5,i32 inreg%g8,i32 inreg%hb)
%hd=getelementptr inbounds i8,i8*%hc,i64 16
%he=bitcast i8*%hd to i8*(i8*,i8*)**
%hf=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%he,align 8
%hg=bitcast i8*%hc to i8**
%hh=load i8*,i8**%hg,align 8
%hi=load i8*,i8**%c,align 8
%hj=tail call fastcc i8*%hf(i8*inreg%hh,i8*inreg%hi)
ret i8*%hj
hk:
%hl=bitcast i8*%a6 to i32*
%hm=load i32,i32*%hl,align 4
%hn=bitcast i8*%f6 to i32*
%ho=load i32,i32*%hn,align 4
%hp=getelementptr inbounds i8,i8*%f6,i64%ef
%hq=bitcast i8*%hp to i8**
%hr=load i8*,i8**%hq,align 8
%hs=getelementptr inbounds i8,i8*%f6,i64%fY
%ht=bitcast i8*%hs to i8**
%hu=load i8*,i8**%ht,align 8
%hv=load i8*,i8**%d,align 8
store i8*%a1,i8**%c,align 8
store i8*%hv,i8**%d,align 8
store i8*%a2,i8**%e,align 8
store i8*%a6,i8**%f,align 8
store i8*%f6,i8**%g,align 8
br label%hw
hw:
%hx=phi i32[%ff,%fd],[%fL,%fJ],[%gu,%gs],[%hm,%hk]
%hy=phi i8*[null,%fd],[%eo,%fJ],[null,%gs],[%f1,%hk]
%hz=phi i32[%fh,%fd],[%fN,%fJ],[%gw,%gs],[%ho,%hk]
%hA=phi i8*[%fk,%fd],[%fQ,%fJ],[%gz,%gs],[%hr,%hk]
%hB=phi i8*[%fn,%fd],[%fT,%fJ],[%gC,%gs],[%hu,%hk]
%hC=bitcast i8*%hA to i32*
%hD=bitcast i8*%hB to i32*
%hE=mul nsw i32%hx,3
%hF=icmp slt i32%hz,%hE
br i1%hF,label%is,label%hG
hG:
store i8*null,i8**%d,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%f,align 8
store i8*null,i8**%g,align 8
%hH=icmp eq i8*%hA,null
br i1%hH,label%hK,label%hI
hI:
%hJ=load i32,i32*%hC,align 4
br label%hK
hK:
%hL=phi i32[%hJ,%hI],[0,%hG]
%hM=icmp eq i8*%hB,null
br i1%hM,label%hP,label%hN
hN:
%hO=load i32,i32*%hD,align 4
br label%hP
hP:
%hQ=phi i32[%hO,%hN],[0,%hK]
%hR=icmp slt i32%hL,%hQ
%hS=load i8*,i8**%h,align 8
br i1%hR,label%hT,label%ia
hT:
%hU=bitcast i8*%hS to i8**
%hV=load i8*,i8**%hU,align 8
%hW=getelementptr inbounds i8,i8*%hS,i64 40
%hX=bitcast i8*%hW to i32*
%hY=load i32,i32*%hX,align 4
store i8*null,i8**%h,align 8
%hZ=getelementptr inbounds i8,i8*%hS,i64 44
%h0=bitcast i8*%hZ to i32*
%h1=load i32,i32*%h0,align 4
%h2=call fastcc i8*@_SMLL8single__L_311(i8*inreg%hV,i32 inreg%hY,i32 inreg%h1)
%h3=getelementptr inbounds i8,i8*%h2,i64 16
%h4=bitcast i8*%h3 to i8*(i8*,i8*)**
%h5=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%h4,align 8
%h6=bitcast i8*%h2 to i8**
%h7=load i8*,i8**%h6,align 8
%h8=load i8*,i8**%c,align 8
%h9=tail call fastcc i8*%h5(i8*inreg%h7,i8*inreg%h8)
ret i8*%h9
ia:
%ib=getelementptr inbounds i8,i8*%hS,i64 16
%ic=bitcast i8*%ib to i8**
%id=load i8*,i8**%ic,align 8
%ie=getelementptr inbounds i8,i8*%hS,i64 40
%if=bitcast i8*%ie to i32*
%ig=load i32,i32*%if,align 4
store i8*null,i8**%h,align 8
%ih=getelementptr inbounds i8,i8*%hS,i64 44
%ii=bitcast i8*%ih to i32*
%ij=load i32,i32*%ii,align 4
%ik=call fastcc i8*@_SMLL8double__L_317(i8*inreg%id,i32 inreg%ig,i32 inreg%ij)
%il=getelementptr inbounds i8,i8*%ik,i64 16
%im=bitcast i8*%il to i8*(i8*,i8*)**
%in=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%im,align 8
%io=bitcast i8*%ik to i8**
%ip=load i8*,i8**%io,align 8
%iq=load i8*,i8**%c,align 8
%ir=tail call fastcc i8*%in(i8*inreg%ip,i8*inreg%iq)
ret i8*%ir
is:
%it=mul nsw i32%hz,3
%iu=icmp slt i32%hx,%it
br i1%iu,label%jj,label%iv
iv:
store i8*null,i8**%d,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%f,align 8
store i8*null,i8**%g,align 8
br i1%ej,label%iz,label%iw
iw:
%ix=bitcast i8*%ei to i32*
%iy=load i32,i32*%ix,align 4
br label%iz
iz:
%iA=phi i32[%iy,%iw],[0,%iv]
%iB=icmp eq i8*%hy,null
br i1%iB,label%iF,label%iC
iC:
%iD=bitcast i8*%hy to i32*
%iE=load i32,i32*%iD,align 4
br label%iF
iF:
%iG=phi i32[%iE,%iC],[0,%iz]
%iH=icmp slt i32%iG,%iA
%iI=load i8*,i8**%h,align 8
br i1%iH,label%iJ,label%i1
iJ:
%iK=getelementptr inbounds i8,i8*%iI,i64 8
%iL=bitcast i8*%iK to i8**
%iM=load i8*,i8**%iL,align 8
%iN=getelementptr inbounds i8,i8*%iI,i64 40
%iO=bitcast i8*%iN to i32*
%iP=load i32,i32*%iO,align 4
store i8*null,i8**%h,align 8
%iQ=getelementptr inbounds i8,i8*%iI,i64 44
%iR=bitcast i8*%iQ to i32*
%iS=load i32,i32*%iR,align 4
%iT=call fastcc i8*@_SMLL8single__R_314(i8*inreg%iM,i32 inreg%iP,i32 inreg%iS)
%iU=getelementptr inbounds i8,i8*%iT,i64 16
%iV=bitcast i8*%iU to i8*(i8*,i8*)**
%iW=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%iV,align 8
%iX=bitcast i8*%iT to i8**
%iY=load i8*,i8**%iX,align 8
%iZ=load i8*,i8**%c,align 8
%i0=tail call fastcc i8*%iW(i8*inreg%iY,i8*inreg%iZ)
ret i8*%i0
i1:
%i2=getelementptr inbounds i8,i8*%iI,i64 24
%i3=bitcast i8*%i2 to i8**
%i4=load i8*,i8**%i3,align 8
%i5=getelementptr inbounds i8,i8*%iI,i64 40
%i6=bitcast i8*%i5 to i32*
%i7=load i32,i32*%i6,align 4
store i8*null,i8**%h,align 8
%i8=getelementptr inbounds i8,i8*%iI,i64 44
%i9=bitcast i8*%i8 to i32*
%ja=load i32,i32*%i9,align 4
%jb=call fastcc i8*@_SMLL8double__R_320(i8*inreg%i4,i32 inreg%i7,i32 inreg%ja)
%jc=getelementptr inbounds i8,i8*%jb,i64 16
%jd=bitcast i8*%jc to i8*(i8*,i8*)**
%je=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%jd,align 8
%jf=bitcast i8*%jb to i8**
%jg=load i8*,i8**%jf,align 8
%jh=load i8*,i8**%c,align 8
%ji=tail call fastcc i8*%je(i8*inreg%jg,i8*inreg%jh)
ret i8*%ji
jj:
store i8*null,i8**%c,align 8
%jk=add i32%hx,1
%jl=add i32%jk,%hz
%jm=load i8*,i8**%h,align 8
%jn=getelementptr inbounds i8,i8*%jm,i64 36
%jo=bitcast i8*%jn to i32*
%jp=load i32,i32*%jo,align 4
%jq=getelementptr inbounds i8,i8*%jm,i64 32
%jr=bitcast i8*%jq to i32*
%js=load i32,i32*%jr,align 4
%jt=getelementptr inbounds i8,i8*%jm,i64 44
%ju=bitcast i8*%jt to i32*
%jv=load i32,i32*%ju,align 4
store i8*null,i8**%h,align 8
%jw=getelementptr inbounds i8,i8*%jm,i64 40
%jx=bitcast i8*%jw to i32*
%jy=load i32,i32*%jx,align 4
%jz=call i8*@sml_alloc(i32 inreg%ad)#0
%jA=or i32%I,1342177280
%jB=bitcast i8*%jz to i32*
%jC=getelementptr inbounds i8,i8*%jz,i64 -4
%jD=bitcast i8*%jC to i32*
store i32%jA,i32*%jD,align 4
call void@llvm.memset.p0i8.i32(i8*%jz,i8 0,i32%ad,i1 false)
store i32%jl,i32*%jB,align 4
%jE=icmp eq i32%js,0
%jF=load i8*,i8**%d,align 8
%jG=sext i32%u to i64
%jH=getelementptr inbounds i8,i8*%jz,i64%jG
br i1%jE,label%jK,label%jI
jI:
%jJ=bitcast i8*%jH to i8**
store i8*%jF,i8**%jJ,align 8
br label%jL
jK:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%jH,i8*%jF,i32%jp,i1 false)
br label%jL
jL:
%jM=load i8*,i8**%f,align 8
%jN=getelementptr inbounds i8,i8*%jz,i64%ef
%jO=bitcast i8*%jN to i8**
store i8*%jM,i8**%jO,align 8
%jP=load i8*,i8**%g,align 8
%jQ=sext i32%z to i64
%jR=getelementptr inbounds i8,i8*%jz,i64%jQ
%jS=bitcast i8*%jR to i8**
store i8*%jP,i8**%jS,align 8
%jT=icmp eq i32%jy,0
%jU=load i8*,i8**%e,align 8
%jV=sext i32%G to i64
%jW=getelementptr inbounds i8,i8*%jz,i64%jV
br i1%jT,label%jZ,label%jX
jX:
%jY=bitcast i8*%jW to i8**
store i8*%jU,i8**%jY,align 8
br label%j0
jZ:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%jW,i8*%jU,i32%jv,i1 false)
br label%j0
j0:
%j1=sext i32%I to i64
%j2=getelementptr inbounds i8,i8*%jz,i64%j1
%j3=bitcast i8*%j2 to i32*
store i32%ac,i32*%j3,align 4
ret i8*%jz
}
define internal fastcc i8*@_SMLL2T_G_322(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
%i=bitcast i8*%a to i8**
%j=load i8*,i8**%i,align 8
store i8*%j,i8**%d,align 8
%k=getelementptr inbounds i8,i8*%a,i64 8
%l=bitcast i8*%k to i8**
%m=load i8*,i8**%l,align 8
store i8*%m,i8**%e,align 8
%n=getelementptr inbounds i8,i8*%a,i64 16
%o=bitcast i8*%n to i8**
%p=load i8*,i8**%o,align 8
store i8*%p,i8**%f,align 8
%q=getelementptr inbounds i8,i8*%a,i64 24
%r=bitcast i8*%q to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%g,align 8
%t=getelementptr inbounds i8,i8*%a,i64 32
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=getelementptr inbounds i8,i8*%a,i64 36
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=call i8*@sml_alloc(i32 inreg 52)#0
%A=getelementptr inbounds i8,i8*%z,i64 -4
%B=bitcast i8*%A to i32*
store i32 1342177328,i32*%B,align 4
store i8*%z,i8**%h,align 8
%C=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%D=bitcast i8*%z to i8**
store i8*%C,i8**%D,align 8
%E=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%F=getelementptr inbounds i8,i8*%z,i64 8
%G=bitcast i8*%F to i8**
store i8*%E,i8**%G,align 8
%H=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%I=getelementptr inbounds i8,i8*%z,i64 16
%J=bitcast i8*%I to i8**
store i8*%H,i8**%J,align 8
%K=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%L=getelementptr inbounds i8,i8*%z,i64 24
%M=bitcast i8*%L to i8**
store i8*%K,i8**%M,align 8
%N=getelementptr inbounds i8,i8*%z,i64 32
%O=bitcast i8*%N to i32*
store i32%v,i32*%O,align 4
%P=getelementptr inbounds i8,i8*%z,i64 36
%Q=bitcast i8*%P to i32*
store i32%y,i32*%Q,align 4
%R=getelementptr inbounds i8,i8*%z,i64 40
%S=bitcast i8*%R to i32*
store i32%b,i32*%S,align 4
%T=getelementptr inbounds i8,i8*%z,i64 44
%U=bitcast i8*%T to i32*
store i32%c,i32*%U,align 4
%V=getelementptr inbounds i8,i8*%z,i64 48
%W=bitcast i8*%V to i32*
store i32 15,i32*%W,align 4
%X=call i8*@sml_alloc(i32 inreg 28)#0
%Y=getelementptr inbounds i8,i8*%X,i64 -4
%Z=bitcast i8*%Y to i32*
store i32 1342177304,i32*%Z,align 4
%aa=load i8*,i8**%h,align 8
%ab=bitcast i8*%X to i8**
store i8*%aa,i8**%ab,align 8
%ac=getelementptr inbounds i8,i8*%X,i64 8
%ad=bitcast i8*%ac to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL2T_G_321 to void(...)*),void(...)**%ad,align 8
%ae=getelementptr inbounds i8,i8*%X,i64 16
%af=bitcast i8*%ae to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL2T_G_321 to void(...)*),void(...)**%af,align 8
%ag=getelementptr inbounds i8,i8*%X,i64 24
%ah=bitcast i8*%ag to i32*
store i32 -2147483647,i32*%ah,align 4
ret i8*%X
}
define internal fastcc i8*@_SMLL3min_323(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
h:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%e,align 8
br label%f
f:
%g=phi i8*[%bO,%bN],[%b,%h]
store i8*%g,i8**%c,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%m,label%k
k:
call void@sml_check(i32 inreg%i)
%l=load i8*,i8**%c,align 8
br label%m
m:
%n=phi i8*[%l,%k],[%g,%f]
%o=load i8*,i8**%e,align 8
%p=getelementptr inbounds i8,i8*%o,i64 4
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=add i32%r,3
%t=sub i32 0,%r
%u=and i32%s,%t
%v=add i32%r,7
%w=add i32%v,%u
%x=and i32%w,-8
%y=getelementptr inbounds i8,i8*%o,i64 12
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=getelementptr inbounds i8,i8*%o,i64 8
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=bitcast i8*%o to i32*
%F=load i32,i32*%E,align 4
%G=icmp eq i8*%n,null
br i1%G,label%H,label%Z
H:
store i8*null,i8**%e,align 8
%I=load i8*,i8**@_SMLZ5Match,align 8
store i8*%I,i8**%c,align 8
%J=call i8*@sml_alloc(i32 inreg 20)#0
%K=getelementptr inbounds i8,i8*%J,i64 -4
%L=bitcast i8*%K to i32*
store i32 1342177296,i32*%L,align 4
store i8*%J,i8**%d,align 8
%M=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%N=bitcast i8*%J to i8**
store i8*%M,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%J,i64 8
%P=bitcast i8*%O to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[52x i8]}>,<{[4x i8],i32,[52x i8]}>*@h,i64 0,i32 2,i64 0),i8**%P,align 8
%Q=getelementptr inbounds i8,i8*%J,i64 16
%R=bitcast i8*%Q to i32*
store i32 3,i32*%R,align 4
%S=call i8*@sml_alloc(i32 inreg 60)#0
%T=getelementptr inbounds i8,i8*%S,i64 -4
%U=bitcast i8*%T to i32*
store i32 1342177336,i32*%U,align 4
%V=getelementptr inbounds i8,i8*%S,i64 56
%W=bitcast i8*%V to i32*
store i32 1,i32*%W,align 4
%X=load i8*,i8**%d,align 8
%Y=bitcast i8*%S to i8**
store i8*%X,i8**%Y,align 8
call void@sml_raise(i8*inreg%S)#1
unreachable
Z:
%aa=icmp eq i32%F,0
br i1%aa,label%ag,label%ab
ab:
%ac=sext i32%u to i64
%ad=getelementptr inbounds i8,i8*%n,i64%ac
%ae=bitcast i8*%ad to i8**
%af=load i8*,i8**%ae,align 8
br label%an
ag:
%ah=call i8*@sml_alloc(i32 inreg%r)#0
%ai=getelementptr inbounds i8,i8*%ah,i64 -4
%aj=bitcast i8*%ai to i32*
store i32%r,i32*%aj,align 4
%ak=load i8*,i8**%c,align 8
%al=sext i32%u to i64
%am=getelementptr inbounds i8,i8*%ak,i64%al
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ah,i8*%am,i32%r,i1 false)
br label%an
an:
%ao=phi i8*[%ak,%ag],[%n,%ab]
%ap=phi i8*[%ah,%ag],[%af,%ab]
store i8*%ap,i8**%d,align 8
%aq=sext i32%x to i64
%ar=getelementptr inbounds i8,i8*%ao,i64%aq
%as=bitcast i8*%ar to i8**
%at=load i8*,i8**%as,align 8
%au=icmp eq i8*%at,null
br i1%au,label%av,label%bN
av:
%aw=add i32%x,23
%ax=and i32%aw,-8
%ay=add i32%A,-1
%az=add i32%ay,%ax
%aA=sub i32 0,%A
%aB=and i32%az,%aA
%aC=add i32%r,-1
%aD=and i32%aC,%t
%aE=add i32%aC,%A
%aF=add i32%aE,%aD
%aG=and i32%aF,%aA
%aH=add i32%A,7
%aI=add i32%aH,%aG
%aJ=and i32%aI,-8
%aK=lshr i32%aG,3
%aL=lshr i32%aD,3
%aM=sub nsw i32%aK,%aL
%aN=shl i32%D,%aM
%aO=or i32%aN,%F
%aP=or i32%aJ,4
%aQ=load i8*,i8**%e,align 8
%aR=getelementptr inbounds i8,i8*%aQ,i64 8
%aS=bitcast i8*%aR to i32*
%aT=load i32,i32*%aS,align 4
%aU=icmp eq i32%aT,0
br i1%aU,label%a0,label%aV
aV:
store i8*null,i8**%c,align 8
%aW=sext i32%aB to i64
%aX=getelementptr inbounds i8,i8*%ao,i64%aW
%aY=bitcast i8*%aX to i8**
%aZ=load i8*,i8**%aY,align 8
br label%be
a0:
%a1=getelementptr inbounds i8,i8*%aQ,i64 12
%a2=bitcast i8*%a1 to i32*
%a3=load i32,i32*%a2,align 4
%a4=call i8*@sml_alloc(i32 inreg%a3)#0
%a5=getelementptr inbounds i8,i8*%a4,i64 -4
%a6=bitcast i8*%a5 to i32*
store i32%a3,i32*%a6,align 4
%a7=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%a8=sext i32%aB to i64
%a9=getelementptr inbounds i8,i8*%a7,i64%a8
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%a4,i8*%a9,i32%a3,i1 false)
%ba=load i8*,i8**%e,align 8
%bb=getelementptr inbounds i8,i8*%ba,i64 8
%bc=bitcast i8*%bb to i32*
%bd=load i32,i32*%bc,align 4
br label%be
be:
%bf=phi i32[%bd,%a0],[%aT,%aV]
%bg=phi i8*[%ba,%a0],[%aQ,%aV]
%bh=phi i8*[%a4,%a0],[%aZ,%aV]
store i8*%bh,i8**%c,align 8
%bi=getelementptr inbounds i8,i8*%bg,i64 4
%bj=bitcast i8*%bi to i32*
%bk=load i32,i32*%bj,align 4
%bl=bitcast i8*%bg to i32*
%bm=load i32,i32*%bl,align 4
%bn=getelementptr inbounds i8,i8*%bg,i64 12
%bo=bitcast i8*%bn to i32*
%bp=load i32,i32*%bo,align 4
store i8*null,i8**%e,align 8
%bq=call i8*@sml_alloc(i32 inreg%aP)#0
%br=or i32%aJ,1342177280
%bs=getelementptr inbounds i8,i8*%bq,i64 -4
%bt=bitcast i8*%bs to i32*
store i32%br,i32*%bt,align 4
call void@llvm.memset.p0i8.i32(i8*%bq,i8 0,i32%aP,i1 false)
%bu=icmp eq i32%bm,0
%bv=load i8*,i8**%d,align 8
%bw=sext i32%aD to i64
%bx=getelementptr inbounds i8,i8*%bq,i64%bw
br i1%bu,label%bA,label%by
by:
%bz=bitcast i8*%bx to i8**
store i8*%bv,i8**%bz,align 8
br label%bB
bA:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bx,i8*%bv,i32%bk,i1 false)
br label%bB
bB:
%bC=icmp eq i32%bf,0
%bD=load i8*,i8**%c,align 8
%bE=sext i32%aG to i64
%bF=getelementptr inbounds i8,i8*%bq,i64%bE
br i1%bC,label%bI,label%bG
bG:
%bH=bitcast i8*%bF to i8**
store i8*%bD,i8**%bH,align 8
br label%bJ
bI:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bF,i8*%bD,i32%bp,i1 false)
br label%bJ
bJ:
%bK=sext i32%aJ to i64
%bL=getelementptr inbounds i8,i8*%bq,i64%bK
%bM=bitcast i8*%bL to i32*
store i32%aO,i32*%bM,align 4
ret i8*%bq
bN:
store i8*null,i8**%d,align 8
store i8*null,i8**%c,align 8
%bO=load i8*,i8**%as,align 8
br label%f
}
define internal fastcc i8*@_SMLL3min_325(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=bitcast i8*%j to i32*
%l=getelementptr inbounds i8,i8*%j,i64 -4
%m=bitcast i8*%l to i32*
store i32 1342177296,i32*%m,align 4
store i8*%j,i8**%d,align 8
store i32%f,i32*%k,align 4
%n=getelementptr inbounds i8,i8*%j,i64 4
%o=bitcast i8*%n to i32*
store i32%i,i32*%o,align 4
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i32*
store i32%b,i32*%q,align 4
%r=getelementptr inbounds i8,i8*%j,i64 12
%s=bitcast i8*%r to i32*
store i32%c,i32*%s,align 4
%t=getelementptr inbounds i8,i8*%j,i64 16
%u=bitcast i8*%t to i32*
store i32 0,i32*%u,align 4
%v=call i8*@sml_alloc(i32 inreg 28)#0
%w=getelementptr inbounds i8,i8*%v,i64 -4
%x=bitcast i8*%w to i32*
store i32 1342177304,i32*%x,align 4
%y=load i8*,i8**%d,align 8
%z=bitcast i8*%v to i8**
store i8*%y,i8**%z,align 8
%A=getelementptr inbounds i8,i8*%v,i64 8
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3min_323 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%v,i64 16
%D=bitcast i8*%C to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3min_323 to void(...)*),void(...)**%D,align 8
%E=getelementptr inbounds i8,i8*%v,i64 24
%F=bitcast i8*%E to i32*
store i32 -2147483647,i32*%F,align 4
ret i8*%v
}
define internal fastcc i8*@_SMLL6delmin_326(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
p:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%g,align 8
store i8*%b,i8**%c,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%n,label%k
k:
call void@sml_check(i32 inreg%i)
%l=load i8*,i8**%c,align 8
%m=load i8*,i8**%g,align 8
br label%n
n:
%o=phi i8*[%m,%k],[%a,%p]
%q=phi i8*[%l,%k],[%b,%p]
%r=getelementptr inbounds i8,i8*%o,i64 12
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=add i32%t,3
%v=sub i32 0,%t
%w=and i32%u,%v
%x=add i32%t,7
%y=add i32%x,%w
%z=and i32%y,-8
%A=add i32%z,15
%B=and i32%A,-8
%C=getelementptr inbounds i8,i8*%o,i64 20
%D=bitcast i8*%C to i32*
%E=load i32,i32*%D,align 4
%F=add i32%E,7
%G=add i32%F,%B
%H=sub i32 0,%E
%I=and i32%G,%H
%J=add i32%t,-1
%K=and i32%J,%v
%L=add i32%J,%E
%M=add i32%L,%K
%N=and i32%M,%H
%O=add i32%F,%N
%P=and i32%O,-8
%Q=add i32%P,15
%R=and i32%Q,-8
%S=add i32%R,15
%T=and i32%S,-8
%U=lshr i32%Q,3
%V=lshr i32%O,3
%W=sub nsw i32%U,%V
%X=lshr i32%N,3
%Y=sub nsw i32%V,%X
%Z=lshr i32%K,3
%aa=sub nsw i32%X,%Z
%ab=shl i32 1,%W
%ac=or i32%ab,1
%ad=shl i32%ac,%Y
%ae=getelementptr inbounds i8,i8*%o,i64 16
%af=bitcast i8*%ae to i32*
%ag=load i32,i32*%af,align 4
%ah=or i32%ad,%ag
%ai=shl i32%ah,%aa
%aj=getelementptr inbounds i8,i8*%o,i64 8
%ak=bitcast i8*%aj to i32*
%al=load i32,i32*%ak,align 4
%am=or i32%ai,%al
%an=or i32%T,4
%ao=icmp eq i8*%q,null
br i1%ao,label%ap,label%aH
ap:
store i8*null,i8**%g,align 8
%aq=load i8*,i8**@_SMLZ5Match,align 8
store i8*%aq,i8**%c,align 8
%ar=call i8*@sml_alloc(i32 inreg 20)#0
%as=getelementptr inbounds i8,i8*%ar,i64 -4
%at=bitcast i8*%as to i32*
store i32 1342177296,i32*%at,align 4
store i8*%ar,i8**%d,align 8
%au=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%av=bitcast i8*%ar to i8**
store i8*%au,i8**%av,align 8
%aw=getelementptr inbounds i8,i8*%ar,i64 8
%ax=bitcast i8*%aw to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[52x i8]}>,<{[4x i8],i32,[52x i8]}>*@i,i64 0,i32 2,i64 0),i8**%ax,align 8
%ay=getelementptr inbounds i8,i8*%ar,i64 16
%az=bitcast i8*%ay to i32*
store i32 3,i32*%az,align 4
%aA=call i8*@sml_alloc(i32 inreg 60)#0
%aB=getelementptr inbounds i8,i8*%aA,i64 -4
%aC=bitcast i8*%aB to i32*
store i32 1342177336,i32*%aC,align 4
%aD=getelementptr inbounds i8,i8*%aA,i64 56
%aE=bitcast i8*%aD to i32*
store i32 1,i32*%aE,align 4
%aF=load i8*,i8**%d,align 8
%aG=bitcast i8*%aA to i8**
store i8*%aF,i8**%aG,align 8
call void@sml_raise(i8*inreg%aA)#1
unreachable
aH:
%aI=icmp eq i32%al,0
br i1%aI,label%aO,label%aJ
aJ:
%aK=sext i32%w to i64
%aL=getelementptr inbounds i8,i8*%q,i64%aK
%aM=bitcast i8*%aL to i8**
%aN=load i8*,i8**%aM,align 8
br label%aV
aO:
%aP=call i8*@sml_alloc(i32 inreg%t)#0
%aQ=getelementptr inbounds i8,i8*%aP,i64 -4
%aR=bitcast i8*%aQ to i32*
store i32%t,i32*%aR,align 4
%aS=load i8*,i8**%c,align 8
%aT=sext i32%w to i64
%aU=getelementptr inbounds i8,i8*%aS,i64%aT
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aP,i8*%aU,i32%t,i1 false)
br label%aV
aV:
%aW=phi i8*[%aS,%aO],[%q,%aJ]
%aX=phi i8*[%aP,%aO],[%aN,%aJ]
store i8*%aX,i8**%d,align 8
%aY=sext i32%z to i64
%aZ=getelementptr inbounds i8,i8*%aW,i64%aY
%a0=bitcast i8*%aZ to i8**
%a1=load i8*,i8**%a0,align 8
%a2=icmp eq i8*%a1,null
%a3=sext i32%B to i64
%a4=getelementptr inbounds i8,i8*%aW,i64%a3
%a5=bitcast i8*%a4 to i8**
%a6=load i8*,i8**%a5,align 8
br i1%a2,label%a7,label%a8
a7:
ret i8*%a6
a8:
store i8*%a6,i8**%e,align 8
%a9=load i8*,i8**%g,align 8
%ba=getelementptr inbounds i8,i8*%a9,i64 16
%bb=bitcast i8*%ba to i32*
%bc=load i32,i32*%bb,align 4
%bd=icmp eq i32%bc,0
br i1%bd,label%bj,label%be
be:
%bf=sext i32%I to i64
%bg=getelementptr inbounds i8,i8*%aW,i64%bf
%bh=bitcast i8*%bg to i8**
%bi=load i8*,i8**%bh,align 8
br label%bx
bj:
%bk=getelementptr inbounds i8,i8*%a9,i64 20
%bl=bitcast i8*%bk to i32*
%bm=load i32,i32*%bl,align 4
%bn=call i8*@sml_alloc(i32 inreg%bm)#0
%bo=getelementptr inbounds i8,i8*%bn,i64 -4
%bp=bitcast i8*%bo to i32*
store i32%bm,i32*%bp,align 4
%bq=load i8*,i8**%c,align 8
%br=sext i32%I to i64
%bs=getelementptr inbounds i8,i8*%bq,i64%br
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bn,i8*%bs,i32%bm,i1 false)
%bt=load i8*,i8**%g,align 8
%bu=getelementptr inbounds i8,i8*%bt,i64 16
%bv=bitcast i8*%bu to i32*
%bw=load i32,i32*%bv,align 4
br label%bx
bx:
%by=phi i32[%bw,%bj],[%bc,%be]
%bz=phi i8*[%bt,%bj],[%a9,%be]
%bA=phi i8*[%bn,%bj],[%bi,%be]
store i8*%bA,i8**%f,align 8
%bB=bitcast i8*%bz to i8**
%bC=load i8*,i8**%bB,align 8
%bD=getelementptr inbounds i8,i8*%bz,i64 20
%bE=bitcast i8*%bD to i32*
%bF=load i32,i32*%bE,align 4
%bG=call fastcc i8*@_SMLL2T_G_322(i8*inreg%bC,i32 inreg%by,i32 inreg%bF)
%bH=getelementptr inbounds i8,i8*%bG,i64 16
%bI=bitcast i8*%bH to i8*(i8*,i8*)**
%bJ=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bI,align 8
%bK=bitcast i8*%bG to i8**
%bL=load i8*,i8**%bK,align 8
store i8*%bL,i8**%h,align 8
%bM=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bN=getelementptr inbounds i8,i8*%bM,i64%aY
%bO=bitcast i8*%bN to i8**
%bP=load i8*,i8**%bO,align 8
%bQ=load i8*,i8**%g,align 8
%bR=call fastcc i8*@_SMLL6delmin_326(i8*inreg%bQ,i8*inreg%bP)
store i8*%bR,i8**%c,align 8
%bS=load i8*,i8**%g,align 8
%bT=getelementptr inbounds i8,i8*%bS,i64 12
%bU=bitcast i8*%bT to i32*
%bV=load i32,i32*%bU,align 4
%bW=getelementptr inbounds i8,i8*%bS,i64 8
%bX=bitcast i8*%bW to i32*
%bY=load i32,i32*%bX,align 4
%bZ=getelementptr inbounds i8,i8*%bS,i64 20
%b0=bitcast i8*%bZ to i32*
%b1=load i32,i32*%b0,align 4
store i8*null,i8**%g,align 8
%b2=getelementptr inbounds i8,i8*%bS,i64 16
%b3=bitcast i8*%b2 to i32*
%b4=load i32,i32*%b3,align 4
%b5=call i8*@sml_alloc(i32 inreg%an)#0
%b6=or i32%T,1342177280
%b7=getelementptr inbounds i8,i8*%b5,i64 -4
%b8=bitcast i8*%b7 to i32*
store i32%b6,i32*%b8,align 4
call void@llvm.memset.p0i8.i32(i8*%b5,i8 0,i32%an,i1 false)
%b9=icmp eq i32%bY,0
%ca=load i8*,i8**%d,align 8
%cb=sext i32%K to i64
%cc=getelementptr inbounds i8,i8*%b5,i64%cb
br i1%b9,label%cf,label%cd
cd:
%ce=bitcast i8*%cc to i8**
store i8*%ca,i8**%ce,align 8
br label%cg
cf:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cc,i8*%ca,i32%bV,i1 false)
br label%cg
cg:
%ch=icmp eq i32%b4,0
%ci=load i8*,i8**%f,align 8
%cj=sext i32%N to i64
%ck=getelementptr inbounds i8,i8*%b5,i64%cj
br i1%ch,label%cn,label%cl
cl:
%cm=bitcast i8*%ck to i8**
store i8*%ci,i8**%cm,align 8
br label%co
cn:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ck,i8*%ci,i32%b1,i1 false)
br label%co
co:
%cp=load i8*,i8**%c,align 8
%cq=sext i32%P to i64
%cr=getelementptr inbounds i8,i8*%b5,i64%cq
%cs=bitcast i8*%cr to i8**
store i8*%cp,i8**%cs,align 8
%ct=load i8*,i8**%e,align 8
%cu=sext i32%R to i64
%cv=getelementptr inbounds i8,i8*%b5,i64%cu
%cw=bitcast i8*%cv to i8**
store i8*%ct,i8**%cw,align 8
%cx=sext i32%T to i64
%cy=getelementptr inbounds i8,i8*%b5,i64%cx
%cz=bitcast i8*%cy to i32*
store i32%am,i32*%cz,align 4
%cA=load i8*,i8**%h,align 8
%cB=tail call fastcc i8*%bJ(i8*inreg%cA,i8*inreg%b5)
ret i8*%cB
}
define internal fastcc i8*@_SMLL6delmin_328(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=getelementptr inbounds i8,i8*%a,i64 8
%i=bitcast i8*%h to i32*
%j=load i32,i32*%i,align 4
%k=getelementptr inbounds i8,i8*%a,i64 12
%l=bitcast i8*%k to i32*
%m=load i32,i32*%l,align 4
%n=call i8*@sml_alloc(i32 inreg 28)#0
%o=getelementptr inbounds i8,i8*%n,i64 -4
%p=bitcast i8*%o to i32*
store i32 1342177304,i32*%p,align 4
store i8*%n,i8**%e,align 8
%q=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%r=bitcast i8*%n to i8**
store i8*%q,i8**%r,align 8
%s=getelementptr inbounds i8,i8*%n,i64 8
%t=bitcast i8*%s to i32*
store i32%j,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%n,i64 12
%v=bitcast i8*%u to i32*
store i32%m,i32*%v,align 4
%w=getelementptr inbounds i8,i8*%n,i64 16
%x=bitcast i8*%w to i32*
store i32%b,i32*%x,align 4
%y=getelementptr inbounds i8,i8*%n,i64 20
%z=bitcast i8*%y to i32*
store i32%c,i32*%z,align 4
%A=getelementptr inbounds i8,i8*%n,i64 24
%B=bitcast i8*%A to i32*
store i32 1,i32*%B,align 4
%C=call i8*@sml_alloc(i32 inreg 28)#0
%D=getelementptr inbounds i8,i8*%C,i64 -4
%E=bitcast i8*%D to i32*
store i32 1342177304,i32*%E,align 4
%F=load i8*,i8**%e,align 8
%G=bitcast i8*%C to i8**
store i8*%F,i8**%G,align 8
%H=getelementptr inbounds i8,i8*%C,i64 8
%I=bitcast i8*%H to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6delmin_326 to void(...)*),void(...)**%I,align 8
%J=getelementptr inbounds i8,i8*%C,i64 16
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6delmin_326 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%C,i64 24
%M=bitcast i8*%L to i32*
store i32 -2147483647,i32*%M,align 4
ret i8*%C
}
define internal fastcc i8*@_SMLL7delete_G_329(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
p:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%g,align 8
store i8*%b,i8**%c,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%n,label%k
k:
call void@sml_check(i32 inreg%i)
%l=load i8*,i8**%c,align 8
%m=load i8*,i8**%g,align 8
br label%n
n:
%o=phi i8*[%m,%k],[%a,%p]
%q=phi i8*[%l,%k],[%b,%p]
store i8*null,i8**%c,align 8
store i8*%q,i8**%e,align 8
%r=getelementptr inbounds i8,i8*%o,i64 28
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=add i32%t,-1
%v=sub i32 0,%t
%w=and i32%u,%v
%x=getelementptr inbounds i8,i8*%o,i64 36
%y=bitcast i8*%x to i32*
%z=load i32,i32*%y,align 4
%A=add i32%u,%z
%B=add i32%A,%w
%C=sub i32 0,%z
%D=and i32%B,%C
%E=add i32%z,7
%F=add i32%E,%D
%G=and i32%F,-8
%H=add i32%G,15
%I=and i32%H,-8
%J=add i32%I,15
%K=and i32%J,-8
%L=lshr i32%H,3
%M=lshr i32%F,3
%N=sub nsw i32%L,%M
%O=lshr i32%D,3
%P=sub nsw i32%M,%O
%Q=lshr i32%w,3
%R=sub nsw i32%O,%Q
%S=shl i32 1,%N
%T=or i32%S,1
%U=shl i32%T,%P
%V=getelementptr inbounds i8,i8*%o,i64 32
%W=bitcast i8*%V to i32*
%X=load i32,i32*%W,align 4
%Y=or i32%U,%X
%Z=shl i32%Y,%R
%aa=getelementptr inbounds i8,i8*%o,i64 24
%ab=bitcast i8*%aa to i32*
%ac=load i32,i32*%ab,align 4
%ad=or i32%Z,%ac
%ae=or i32%K,4
%af=bitcast i8*%q to i8**
%ag=load i8*,i8**%af,align 8
store i8*%ag,i8**%f,align 8
%ah=icmp eq i8*%ag,null
%ai=getelementptr inbounds i8,i8*%q,i64 8
%aj=bitcast i8*%ai to i8**
%ak=load i8*,i8**%aj,align 8
br i1%ah,label%al,label%an
al:
%am=phi i8*[%ak,%n],[%ag,%an]
ret i8*%am
an:
%ao=icmp eq i8*%ak,null
br i1%ao,label%al,label%ap
ap:
%aq=getelementptr inbounds i8,i8*%o,i64 8
%ar=bitcast i8*%aq to i8**
%as=load i8*,i8**%ar,align 8
%at=call fastcc i8*@_SMLL3min_325(i8*inreg%as,i32 inreg%X,i32 inreg%z)
%au=getelementptr inbounds i8,i8*%at,i64 16
%av=bitcast i8*%au to i8*(i8*,i8*)**
%aw=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%av,align 8
%ax=bitcast i8*%at to i8**
%ay=load i8*,i8**%ax,align 8
%az=load i8*,i8**%e,align 8
%aA=getelementptr inbounds i8,i8*%az,i64 8
%aB=bitcast i8*%aA to i8**
%aC=load i8*,i8**%aB,align 8
%aD=call fastcc i8*%aw(i8*inreg%ay,i8*inreg%aC)
store i8*%aD,i8**%d,align 8
%aE=load i8*,i8**%g,align 8
%aF=getelementptr inbounds i8,i8*%aE,i64 24
%aG=bitcast i8*%aF to i32*
%aH=load i32,i32*%aG,align 4
%aI=icmp eq i32%aH,0
br i1%aI,label%aO,label%aJ
aJ:
%aK=sext i32%w to i64
%aL=getelementptr inbounds i8,i8*%aD,i64%aK
%aM=bitcast i8*%aL to i8**
%aN=load i8*,i8**%aM,align 8
br label%aZ
aO:
%aP=getelementptr inbounds i8,i8*%aE,i64 28
%aQ=bitcast i8*%aP to i32*
%aR=load i32,i32*%aQ,align 4
%aS=call i8*@sml_alloc(i32 inreg%aR)#0
%aT=getelementptr inbounds i8,i8*%aS,i64 -4
%aU=bitcast i8*%aT to i32*
store i32%aR,i32*%aU,align 4
%aV=load i8*,i8**%d,align 8
%aW=sext i32%w to i64
%aX=getelementptr inbounds i8,i8*%aV,i64%aW
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aS,i8*%aX,i32%aR,i1 false)
%aY=load i8*,i8**%g,align 8
br label%aZ
aZ:
%a0=phi i8*[%aV,%aO],[%aD,%aJ]
%a1=phi i8*[%aY,%aO],[%aE,%aJ]
%a2=phi i8*[%aS,%aO],[%aN,%aJ]
store i8*%a2,i8**%c,align 8
%a3=getelementptr inbounds i8,i8*%a1,i64 32
%a4=bitcast i8*%a3 to i32*
%a5=load i32,i32*%a4,align 4
%a6=icmp eq i32%a5,0
br i1%a6,label%bc,label%a7
a7:
store i8*null,i8**%d,align 8
%a8=sext i32%D to i64
%a9=getelementptr inbounds i8,i8*%a0,i64%a8
%ba=bitcast i8*%a9 to i8**
%bb=load i8*,i8**%ba,align 8
br label%bq
bc:
%bd=getelementptr inbounds i8,i8*%a1,i64 36
%be=bitcast i8*%bd to i32*
%bf=load i32,i32*%be,align 4
%bg=call i8*@sml_alloc(i32 inreg%bf)#0
%bh=getelementptr inbounds i8,i8*%bg,i64 -4
%bi=bitcast i8*%bh to i32*
store i32%bf,i32*%bi,align 4
%bj=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bk=sext i32%D to i64
%bl=getelementptr inbounds i8,i8*%bj,i64%bk
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bg,i8*%bl,i32%bf,i1 false)
%bm=load i8*,i8**%g,align 8
%bn=getelementptr inbounds i8,i8*%bm,i64 32
%bo=bitcast i8*%bn to i32*
%bp=load i32,i32*%bo,align 4
br label%bq
bq:
%br=phi i32[%bp,%bc],[%a5,%a7]
%bs=phi i8*[%bm,%bc],[%a1,%a7]
%bt=phi i8*[%bg,%bc],[%bb,%a7]
store i8*%bt,i8**%d,align 8
%bu=bitcast i8*%bs to i8**
%bv=load i8*,i8**%bu,align 8
%bw=getelementptr inbounds i8,i8*%bs,i64 36
%bx=bitcast i8*%bw to i32*
%by=load i32,i32*%bx,align 4
%bz=call fastcc i8*@_SMLL2T_G_322(i8*inreg%bv,i32 inreg%br,i32 inreg%by)
%bA=getelementptr inbounds i8,i8*%bz,i64 16
%bB=bitcast i8*%bA to i8*(i8*,i8*)**
%bC=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bB,align 8
%bD=bitcast i8*%bz to i8**
%bE=load i8*,i8**%bD,align 8
store i8*%bE,i8**%h,align 8
%bF=load i8*,i8**%g,align 8
%bG=getelementptr inbounds i8,i8*%bF,i64 16
%bH=bitcast i8*%bG to i8**
%bI=load i8*,i8**%bH,align 8
%bJ=getelementptr inbounds i8,i8*%bF,i64 32
%bK=bitcast i8*%bJ to i32*
%bL=load i32,i32*%bK,align 4
%bM=getelementptr inbounds i8,i8*%bF,i64 36
%bN=bitcast i8*%bM to i32*
%bO=load i32,i32*%bN,align 4
%bP=call fastcc i8*@_SMLL6delmin_328(i8*inreg%bI,i32 inreg%bL,i32 inreg%bO)
%bQ=getelementptr inbounds i8,i8*%bP,i64 16
%bR=bitcast i8*%bQ to i8*(i8*,i8*)**
%bS=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bR,align 8
%bT=bitcast i8*%bP to i8**
%bU=load i8*,i8**%bT,align 8
%bV=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bW=getelementptr inbounds i8,i8*%bV,i64 8
%bX=bitcast i8*%bW to i8**
%bY=load i8*,i8**%bX,align 8
%bZ=call fastcc i8*%bS(i8*inreg%bU,i8*inreg%bY)
store i8*%bZ,i8**%e,align 8
%b0=load i8*,i8**%g,align 8
%b1=getelementptr inbounds i8,i8*%b0,i64 28
%b2=bitcast i8*%b1 to i32*
%b3=load i32,i32*%b2,align 4
%b4=getelementptr inbounds i8,i8*%b0,i64 24
%b5=bitcast i8*%b4 to i32*
%b6=load i32,i32*%b5,align 4
%b7=getelementptr inbounds i8,i8*%b0,i64 36
%b8=bitcast i8*%b7 to i32*
%b9=load i32,i32*%b8,align 4
store i8*null,i8**%g,align 8
%ca=getelementptr inbounds i8,i8*%b0,i64 32
%cb=bitcast i8*%ca to i32*
%cc=load i32,i32*%cb,align 4
%cd=call i8*@sml_alloc(i32 inreg%ae)#0
%ce=or i32%K,1342177280
%cf=getelementptr inbounds i8,i8*%cd,i64 -4
%cg=bitcast i8*%cf to i32*
store i32%ce,i32*%cg,align 4
call void@llvm.memset.p0i8.i32(i8*%cd,i8 0,i32%ae,i1 false)
%ch=icmp eq i32%b6,0
%ci=load i8*,i8**%c,align 8
%cj=sext i32%w to i64
%ck=getelementptr inbounds i8,i8*%cd,i64%cj
br i1%ch,label%cn,label%cl
cl:
%cm=bitcast i8*%ck to i8**
store i8*%ci,i8**%cm,align 8
br label%co
cn:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ck,i8*%ci,i32%b3,i1 false)
br label%co
co:
%cp=icmp eq i32%cc,0
%cq=load i8*,i8**%d,align 8
%cr=sext i32%D to i64
%cs=getelementptr inbounds i8,i8*%cd,i64%cr
br i1%cp,label%cv,label%ct
ct:
%cu=bitcast i8*%cs to i8**
store i8*%cq,i8**%cu,align 8
br label%cw
cv:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cs,i8*%cq,i32%b9,i1 false)
br label%cw
cw:
%cx=load i8*,i8**%f,align 8
%cy=sext i32%G to i64
%cz=getelementptr inbounds i8,i8*%cd,i64%cy
%cA=bitcast i8*%cz to i8**
store i8*%cx,i8**%cA,align 8
%cB=load i8*,i8**%e,align 8
%cC=sext i32%I to i64
%cD=getelementptr inbounds i8,i8*%cd,i64%cC
%cE=bitcast i8*%cD to i8**
store i8*%cB,i8**%cE,align 8
%cF=sext i32%K to i64
%cG=getelementptr inbounds i8,i8*%cd,i64%cF
%cH=bitcast i8*%cG to i32*
store i32%ad,i32*%cH,align 4
%cI=load i8*,i8**%h,align 8
%cJ=tail call fastcc i8*%bC(i8*inreg%cI,i8*inreg%cd)
ret i8*%cJ
}
define internal fastcc i8*@_SMLL7delete_G_330(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%d,align 8
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
store i8*%l,i8**%e,align 8
%m=getelementptr inbounds i8,i8*%a,i64 16
%n=bitcast i8*%m to i8**
%o=load i8*,i8**%n,align 8
store i8*%o,i8**%f,align 8
%p=getelementptr inbounds i8,i8*%a,i64 24
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=getelementptr inbounds i8,i8*%a,i64 28
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=call i8*@sml_alloc(i32 inreg 44)#0
%w=getelementptr inbounds i8,i8*%v,i64 -4
%x=bitcast i8*%w to i32*
store i32 1342177320,i32*%x,align 4
store i8*%v,i8**%g,align 8
%y=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%z=bitcast i8*%v to i8**
store i8*%y,i8**%z,align 8
%A=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%B=getelementptr inbounds i8,i8*%v,i64 8
%C=bitcast i8*%B to i8**
store i8*%A,i8**%C,align 8
%D=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%E=getelementptr inbounds i8,i8*%v,i64 16
%F=bitcast i8*%E to i8**
store i8*%D,i8**%F,align 8
%G=getelementptr inbounds i8,i8*%v,i64 24
%H=bitcast i8*%G to i32*
store i32%r,i32*%H,align 4
%I=getelementptr inbounds i8,i8*%v,i64 28
%J=bitcast i8*%I to i32*
store i32%u,i32*%J,align 4
%K=getelementptr inbounds i8,i8*%v,i64 32
%L=bitcast i8*%K to i32*
store i32%b,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%v,i64 36
%N=bitcast i8*%M to i32*
store i32%c,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%v,i64 40
%P=bitcast i8*%O to i32*
store i32 7,i32*%P,align 4
%Q=call i8*@sml_alloc(i32 inreg 28)#0
%R=getelementptr inbounds i8,i8*%Q,i64 -4
%S=bitcast i8*%R to i32*
store i32 1342177304,i32*%S,align 4
%T=load i8*,i8**%g,align 8
%U=bitcast i8*%Q to i8**
store i8*%T,i8**%U,align 8
%V=getelementptr inbounds i8,i8*%Q,i64 8
%W=bitcast i8*%V to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL7delete_G_329 to void(...)*),void(...)**%W,align 8
%X=getelementptr inbounds i8,i8*%Q,i64 16
%Y=bitcast i8*%X to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL7delete_G_329 to void(...)*),void(...)**%Y,align 8
%Z=getelementptr inbounds i8,i8*%Q,i64 24
%aa=bitcast i8*%Z to i32*
store i32 -2147483647,i32*%aa,align 4
ret i8*%Q
}
define internal fastcc i8*@_SMLL9singleton_331(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%f=getelementptr inbounds i8,i8*%a,i64 4
%g=bitcast i8*%f to i32*
%h=load i32,i32*%g,align 4
%i=add i32%h,-1
%j=sub i32 0,%h
%k=and i32%i,%j
%l=getelementptr inbounds i8,i8*%a,i64 12
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=add i32%i,%n
%p=add i32%o,%k
%q=sub i32 0,%n
%r=and i32%p,%q
%s=add i32%h,3
%t=and i32%s,%j
%u=add i32%h,7
%v=add i32%u,%t
%w=and i32%v,-8
%x=add i32%w,15
%y=and i32%x,-8
%z=add i32%n,7
%A=add i32%z,%y
%B=and i32%A,%q
%C=add i32%z,%B
%D=and i32%C,-8
%E=lshr i32%B,3
%F=lshr i32%x,3
%G=sub nsw i32%E,%F
%H=lshr i32%v,3
%I=sub nsw i32%F,%H
%J=lshr i32%t,3
%K=sub nsw i32%H,%J
%L=getelementptr inbounds i8,i8*%a,i64 8
%M=bitcast i8*%L to i32*
%N=load i32,i32*%M,align 4
%O=shl i32%N,%G
%P=or i32%O,1
%Q=shl i32%P,%I
%R=or i32%Q,1
%S=shl i32%R,%K
%T=bitcast i8*%a to i32*
%U=load i32,i32*%T,align 4
%V=or i32%S,%U
%W=shl i32%V,%J
%X=or i32%D,4
%Y=icmp eq i32%U,0
br i1%Y,label%ae,label%Z
Z:
%aa=sext i32%k to i64
%ab=getelementptr inbounds i8,i8*%b,i64%aa
%ac=bitcast i8*%ab to i8**
%ad=load i8*,i8**%ac,align 8
br label%ap
ae:
%af=call i8*@sml_alloc(i32 inreg%h)#0
%ag=getelementptr inbounds i8,i8*%af,i64 -4
%ah=bitcast i8*%ag to i32*
store i32%h,i32*%ah,align 4
%ai=load i8*,i8**%c,align 8
%aj=sext i32%k to i64
%ak=getelementptr inbounds i8,i8*%ai,i64%aj
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%af,i8*%ak,i32%h,i1 false)
%al=load i8*,i8**%e,align 8
%am=getelementptr inbounds i8,i8*%al,i64 8
%an=bitcast i8*%am to i32*
%ao=load i32,i32*%an,align 4
br label%ap
ap:
%aq=phi i8*[%ai,%ae],[%b,%Z]
%ar=phi i32[%ao,%ae],[%N,%Z]
%as=phi i8*[%al,%ae],[%a,%Z]
%at=phi i8*[%af,%ae],[%ad,%Z]
store i8*%at,i8**%d,align 8
%au=icmp eq i32%ar,0
br i1%au,label%aA,label%av
av:
store i8*null,i8**%c,align 8
%aw=sext i32%r to i64
%ax=getelementptr inbounds i8,i8*%aq,i64%aw
%ay=bitcast i8*%ax to i8**
%az=load i8*,i8**%ay,align 8
br label%aO
aA:
%aB=getelementptr inbounds i8,i8*%as,i64 12
%aC=bitcast i8*%aB to i32*
%aD=load i32,i32*%aC,align 4
%aE=call i8*@sml_alloc(i32 inreg%aD)#0
%aF=getelementptr inbounds i8,i8*%aE,i64 -4
%aG=bitcast i8*%aF to i32*
store i32%aD,i32*%aG,align 4
%aH=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aI=sext i32%r to i64
%aJ=getelementptr inbounds i8,i8*%aH,i64%aI
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aE,i8*%aJ,i32%aD,i1 false)
%aK=load i8*,i8**%e,align 8
%aL=getelementptr inbounds i8,i8*%aK,i64 8
%aM=bitcast i8*%aL to i32*
%aN=load i32,i32*%aM,align 4
br label%aO
aO:
%aP=phi i32[%aN,%aA],[%ar,%av]
%aQ=phi i8*[%aK,%aA],[%as,%av]
%aR=phi i8*[%aE,%aA],[%az,%av]
store i8*%aR,i8**%c,align 8
%aS=getelementptr inbounds i8,i8*%aQ,i64 4
%aT=bitcast i8*%aS to i32*
%aU=load i32,i32*%aT,align 4
%aV=bitcast i8*%aQ to i32*
%aW=load i32,i32*%aV,align 4
%aX=getelementptr inbounds i8,i8*%aQ,i64 12
%aY=bitcast i8*%aX to i32*
%aZ=load i32,i32*%aY,align 4
store i8*null,i8**%e,align 8
%a0=call i8*@sml_alloc(i32 inreg%X)#0
%a1=or i32%D,1342177280
%a2=bitcast i8*%a0 to i32*
%a3=getelementptr inbounds i8,i8*%a0,i64 -4
%a4=bitcast i8*%a3 to i32*
store i32%a1,i32*%a4,align 4
call void@llvm.memset.p0i8.i32(i8*%a0,i8 0,i32%X,i1 false)
store i32 1,i32*%a2,align 4
%a5=icmp eq i32%aW,0
%a6=load i8*,i8**%d,align 8
%a7=sext i32%t to i64
%a8=getelementptr inbounds i8,i8*%a0,i64%a7
br i1%a5,label%bb,label%a9
a9:
%ba=bitcast i8*%a8 to i8**
store i8*%a6,i8**%ba,align 8
br label%bc
bb:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%a8,i8*%a6,i32%aU,i1 false)
br label%bc
bc:
%bd=sext i32%w to i64
%be=getelementptr inbounds i8,i8*%a0,i64%bd
%bf=bitcast i8*%be to i8**
store i8*null,i8**%bf,align 8
%bg=sext i32%y to i64
%bh=getelementptr inbounds i8,i8*%a0,i64%bg
%bi=bitcast i8*%bh to i8**
store i8*null,i8**%bi,align 8
%bj=icmp eq i32%aP,0
%bk=load i8*,i8**%c,align 8
%bl=sext i32%B to i64
%bm=getelementptr inbounds i8,i8*%a0,i64%bl
br i1%bj,label%bp,label%bn
bn:
%bo=bitcast i8*%bm to i8**
store i8*%bk,i8**%bo,align 8
br label%bq
bp:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bm,i8*%bk,i32%aZ,i1 false)
br label%bq
bq:
%br=sext i32%D to i64
%bs=getelementptr inbounds i8,i8*%a0,i64%br
%bt=bitcast i8*%bs to i32*
store i32%W,i32*%bt,align 4
ret i8*%a0
}
define internal fastcc i8*@_SMLL9singleton_332(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=bitcast i8*%j to i32*
%l=getelementptr inbounds i8,i8*%j,i64 -4
%m=bitcast i8*%l to i32*
store i32 1342177296,i32*%m,align 4
store i8*%j,i8**%d,align 8
store i32%f,i32*%k,align 4
%n=getelementptr inbounds i8,i8*%j,i64 4
%o=bitcast i8*%n to i32*
store i32%i,i32*%o,align 4
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i32*
store i32%b,i32*%q,align 4
%r=getelementptr inbounds i8,i8*%j,i64 12
%s=bitcast i8*%r to i32*
store i32%c,i32*%s,align 4
%t=getelementptr inbounds i8,i8*%j,i64 16
%u=bitcast i8*%t to i32*
store i32 0,i32*%u,align 4
%v=call i8*@sml_alloc(i32 inreg 28)#0
%w=getelementptr inbounds i8,i8*%v,i64 -4
%x=bitcast i8*%w to i32*
store i32 1342177304,i32*%x,align 4
%y=load i8*,i8**%d,align 8
%z=bitcast i8*%v to i8**
store i8*%y,i8**%z,align 8
%A=getelementptr inbounds i8,i8*%v,i64 8
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL9singleton_331 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%v,i64 16
%D=bitcast i8*%C to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL9singleton_331 to void(...)*),void(...)**%D,align 8
%E=getelementptr inbounds i8,i8*%v,i64 24
%F=bitcast i8*%E to i32*
store i32 -2147483647,i32*%F,align 4
ret i8*%v
}
define internal fastcc i8*@_SMLL6insert_333(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
s:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
%k=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
call void@llvm.gcroot(i8**%k,i8*null)#0
store i8*%a,i8**%i,align 8
store i8*%b,i8**%c,align 8
%l=load atomic i32,i32*@sml_check_flag unordered,align 4
%m=icmp eq i32%l,0
br i1%m,label%q,label%n
n:
call void@sml_check(i32 inreg%l)
%o=load i8*,i8**%c,align 8
%p=load i8*,i8**%i,align 8
br label%q
q:
%r=phi i8*[%p,%n],[%a,%s]
%t=phi i8*[%o,%n],[%b,%s]
%u=getelementptr inbounds i8,i8*%r,i64 20
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=add i32%w,3
%y=sub i32 0,%w
%z=and i32%x,%y
%A=add i32%w,7
%B=add i32%A,%z
%C=and i32%B,-8
%D=add i32%C,15
%E=and i32%D,-8
%F=getelementptr inbounds i8,i8*%r,i64 28
%G=bitcast i8*%F to i32*
%H=load i32,i32*%G,align 4
%I=add i32%H,7
%J=add i32%I,%E
%K=sub i32 0,%H
%L=and i32%J,%K
%M=and i32%A,%y
%N=add i32%w,-1
%O=add i32%N,%H
%P=add i32%O,%M
%Q=and i32%P,%K
%R=and i32%N,%y
%S=add i32%R,%w
%T=add i32%N,%S
%U=and i32%T,%y
%V=add i32%A,%U
%W=and i32%V,-8
%X=lshr i32%U,3
%Y=lshr i32%R,3
%Z=sub nsw i32%X,%Y
%aa=getelementptr inbounds i8,i8*%r,i64 16
%ab=bitcast i8*%aa to i32*
%ac=load i32,i32*%ab,align 4
%ad=shl i32%ac,%Z
%ae=or i32%ad,%ac
%af=or i32%W,4
%ag=add i32%I,%Q
%ah=and i32%ag,-8
%ai=lshr i32%Q,3
%aj=lshr i32%M,3
%ak=sub nsw i32%ai,%aj
%al=getelementptr inbounds i8,i8*%r,i64 24
%am=bitcast i8*%al to i32*
%an=load i32,i32*%am,align 4
%ao=shl i32%an,%ak
%ap=or i32%ao,%ac
%aq=shl i32%ap,%aj
%ar=or i32%aq,1
%as=or i32%ah,4
%at=add i32%H,-1
%au=add i32%at,%S
%av=and i32%au,%K
%aw=add i32%I,%av
%ax=and i32%aw,-8
%ay=add i32%ax,15
%az=and i32%ay,-8
%aA=add i32%az,15
%aB=and i32%aA,-8
%aC=lshr i32%ay,3
%aD=lshr i32%aw,3
%aE=sub nsw i32%aC,%aD
%aF=lshr i32%av,3
%aG=sub nsw i32%aD,%aF
%aH=sub nsw i32%aF,%Y
%aI=shl i32 1,%aE
%aJ=or i32%aI,1
%aK=shl i32%aJ,%aG
%aL=or i32%aK,%an
%aM=shl i32%aL,%aH
%aN=or i32%aM,%ac
%aO=or i32%aB,4
%aP=add i32%I,%L
%aQ=and i32%aP,-8
%aR=lshr i32%L,3
%aS=lshr i32%D,3
%aT=sub nsw i32%aR,%aS
%aU=lshr i32%B,3
%aV=sub nsw i32%aS,%aU
%aW=lshr i32%z,3
%aX=sub nsw i32%aU,%aW
%aY=shl i32%an,%aT
%aZ=or i32%aY,1
%a0=shl i32%aZ,%aV
%a1=or i32%a0,1
%a2=shl i32%a1,%aX
%a3=or i32%a2,%ac
%a4=shl i32%a3,%aW
%a5=or i32%aQ,4
%a6=bitcast i8*%t to i8**
%a7=load i8*,i8**%a6,align 8
%a8=icmp eq i8*%a7,null
br i1%a8,label%a9,label%cx
a9:
%ba=icmp eq i32%ac,0
br i1%ba,label%bg,label%bb
bb:
%bc=sext i32%M to i64
%bd=getelementptr inbounds i8,i8*%t,i64%bc
%be=bitcast i8*%bd to i8**
%bf=load i8*,i8**%be,align 8
br label%br
bg:
%bh=call i8*@sml_alloc(i32 inreg%w)#0
%bi=getelementptr inbounds i8,i8*%bh,i64 -4
%bj=bitcast i8*%bi to i32*
store i32%w,i32*%bj,align 4
%bk=load i8*,i8**%c,align 8
%bl=sext i32%M to i64
%bm=getelementptr inbounds i8,i8*%bk,i64%bl
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bh,i8*%bm,i32%w,i1 false)
%bn=load i8*,i8**%i,align 8
%bo=getelementptr inbounds i8,i8*%bn,i64 24
%bp=bitcast i8*%bo to i32*
%bq=load i32,i32*%bp,align 4
br label%br
br:
%bs=phi i8*[%bk,%bg],[%t,%bb]
%bt=phi i32[%bq,%bg],[%an,%bb]
%bu=phi i8*[%bn,%bg],[%r,%bb]
%bv=phi i8*[%bh,%bg],[%bf,%bb]
store i8*%bv,i8**%d,align 8
%bw=icmp eq i32%bt,0
br i1%bw,label%bC,label%bx
bx:
store i8*null,i8**%c,align 8
%by=sext i32%Q to i64
%bz=getelementptr inbounds i8,i8*%bs,i64%by
%bA=bitcast i8*%bz to i8**
%bB=load i8*,i8**%bA,align 8
br label%bQ
bC:
%bD=getelementptr inbounds i8,i8*%bu,i64 28
%bE=bitcast i8*%bD to i32*
%bF=load i32,i32*%bE,align 4
%bG=call i8*@sml_alloc(i32 inreg%bF)#0
%bH=getelementptr inbounds i8,i8*%bG,i64 -4
%bI=bitcast i8*%bH to i32*
store i32%bF,i32*%bI,align 4
%bJ=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bK=sext i32%Q to i64
%bL=getelementptr inbounds i8,i8*%bJ,i64%bK
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bG,i8*%bL,i32%bF,i1 false)
%bM=load i8*,i8**%i,align 8
%bN=getelementptr inbounds i8,i8*%bM,i64 24
%bO=bitcast i8*%bN to i32*
%bP=load i32,i32*%bO,align 4
br label%bQ
bQ:
%bR=phi i32[%bP,%bC],[%bt,%bx]
%bS=phi i8*[%bM,%bC],[%bu,%bx]
%bT=phi i8*[%bG,%bC],[%bB,%bx]
store i8*%bT,i8**%c,align 8
%bU=getelementptr inbounds i8,i8*%bS,i64 20
%bV=bitcast i8*%bU to i32*
%bW=load i32,i32*%bV,align 4
%bX=getelementptr inbounds i8,i8*%bS,i64 16
%bY=bitcast i8*%bX to i32*
%bZ=load i32,i32*%bY,align 4
%b0=getelementptr inbounds i8,i8*%bS,i64 28
%b1=bitcast i8*%b0 to i32*
%b2=load i32,i32*%b1,align 4
store i8*null,i8**%i,align 8
%b3=call i8*@sml_alloc(i32 inreg%a5)#0
%b4=or i32%aQ,1342177280
%b5=bitcast i8*%b3 to i32*
%b6=getelementptr inbounds i8,i8*%b3,i64 -4
%b7=bitcast i8*%b6 to i32*
store i32%b4,i32*%b7,align 4
call void@llvm.memset.p0i8.i32(i8*%b3,i8 0,i32%a5,i1 false)
store i32 1,i32*%b5,align 4
%b8=icmp eq i32%bZ,0
%b9=load i8*,i8**%d,align 8
%ca=sext i32%z to i64
%cb=getelementptr inbounds i8,i8*%b3,i64%ca
br i1%b8,label%ce,label%cc
cc:
%cd=bitcast i8*%cb to i8**
store i8*%b9,i8**%cd,align 8
br label%cf
ce:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cb,i8*%b9,i32%bW,i1 false)
br label%cf
cf:
%cg=sext i32%C to i64
%ch=getelementptr inbounds i8,i8*%b3,i64%cg
%ci=bitcast i8*%ch to i8**
store i8*null,i8**%ci,align 8
%cj=sext i32%E to i64
%ck=getelementptr inbounds i8,i8*%b3,i64%cj
%cl=bitcast i8*%ck to i8**
store i8*null,i8**%cl,align 8
%cm=icmp eq i32%bR,0
%cn=load i8*,i8**%c,align 8
%co=sext i32%L to i64
%cp=getelementptr inbounds i8,i8*%b3,i64%co
br i1%cm,label%cs,label%cq
cq:
%cr=bitcast i8*%cp to i8**
store i8*%cn,i8**%cr,align 8
br label%ct
cs:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cp,i8*%cn,i32%b2,i1 false)
br label%ct
ct:
%cu=sext i32%aQ to i64
%cv=getelementptr inbounds i8,i8*%b3,i64%cu
%cw=bitcast i8*%cv to i32*
store i32%a4,i32*%cw,align 4
ret i8*%b3
cx:
store i8*%a7,i8**%k,align 8
%cy=icmp eq i32%ac,0
br i1%cy,label%cE,label%cz
cz:
%cA=sext i32%z to i64
%cB=getelementptr inbounds i8,i8*%a7,i64%cA
%cC=bitcast i8*%cB to i8**
%cD=load i8*,i8**%cC,align 8
br label%cP
cE:
%cF=call i8*@sml_alloc(i32 inreg%w)#0
%cG=getelementptr inbounds i8,i8*%cF,i64 -4
%cH=bitcast i8*%cG to i32*
store i32%w,i32*%cH,align 4
%cI=load i8*,i8**%k,align 8
%cJ=sext i32%z to i64
%cK=getelementptr inbounds i8,i8*%cI,i64%cJ
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cF,i8*%cK,i32%w,i1 false)
%cL=load i8*,i8**%i,align 8
%cM=getelementptr inbounds i8,i8*%cL,i64 24
%cN=bitcast i8*%cM to i32*
%cO=load i32,i32*%cN,align 4
br label%cP
cP:
%cQ=phi i8*[%cL,%cE],[%r,%cz]
%cR=phi i32[%cO,%cE],[%an,%cz]
%cS=phi i8*[%cI,%cE],[%a7,%cz]
%cT=phi i8*[%cF,%cE],[%cD,%cz]
store i8*%cT,i8**%d,align 8
%cU=sext i32%C to i64
%cV=getelementptr inbounds i8,i8*%cS,i64%cU
%cW=bitcast i8*%cV to i8**
%cX=load i8*,i8**%cW,align 8
store i8*%cX,i8**%e,align 8
%cY=sext i32%E to i64
%cZ=getelementptr inbounds i8,i8*%cS,i64%cY
%c0=bitcast i8*%cZ to i8**
%c1=load i8*,i8**%c0,align 8
store i8*%c1,i8**%f,align 8
%c2=icmp eq i32%cR,0
br i1%c2,label%c8,label%c3
c3:
%c4=sext i32%L to i64
%c5=getelementptr inbounds i8,i8*%cS,i64%c4
%c6=bitcast i8*%c5 to i8**
%c7=load i8*,i8**%c6,align 8
br label%dj
c8:
%c9=getelementptr inbounds i8,i8*%cQ,i64 28
%da=bitcast i8*%c9 to i32*
%db=load i32,i32*%da,align 4
%dc=call i8*@sml_alloc(i32 inreg%db)#0
%dd=getelementptr inbounds i8,i8*%dc,i64 -4
%de=bitcast i8*%dd to i32*
store i32%db,i32*%de,align 4
%df=load i8*,i8**%k,align 8
%dg=sext i32%L to i64
%dh=getelementptr inbounds i8,i8*%df,i64%dg
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dc,i8*%dh,i32%db,i1 false)
%di=load i8*,i8**%i,align 8
br label%dj
dj:
%dk=phi i8*[%di,%c8],[%cQ,%c3]
%dl=phi i8*[%dc,%c8],[%c7,%c3]
store i8*%dl,i8**%g,align 8
%dm=getelementptr inbounds i8,i8*%dk,i64 16
%dn=bitcast i8*%dm to i32*
%do=load i32,i32*%dn,align 4
%dp=icmp eq i32%do,0
br i1%dp,label%dw,label%dq
dq:
%dr=load i8*,i8**%c,align 8
%ds=sext i32%M to i64
%dt=getelementptr inbounds i8,i8*%dr,i64%ds
%du=bitcast i8*%dt to i8**
%dv=load i8*,i8**%du,align 8
br label%dH
dw:
%dx=getelementptr inbounds i8,i8*%dk,i64 20
%dy=bitcast i8*%dx to i32*
%dz=load i32,i32*%dy,align 4
%dA=call i8*@sml_alloc(i32 inreg%dz)#0
%dB=getelementptr inbounds i8,i8*%dA,i64 -4
%dC=bitcast i8*%dB to i32*
store i32%dz,i32*%dC,align 4
%dD=load i8*,i8**%c,align 8
%dE=sext i32%M to i64
%dF=getelementptr inbounds i8,i8*%dD,i64%dE
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dA,i8*%dF,i32%dz,i1 false)
%dG=load i8*,i8**%i,align 8
br label%dH
dH:
%dI=phi i8*[%dG,%dw],[%dk,%dq]
%dJ=phi i8*[%dD,%dw],[%dr,%dq]
%dK=phi i8*[%dA,%dw],[%dv,%dq]
store i8*%dK,i8**%h,align 8
%dL=getelementptr inbounds i8,i8*%dI,i64 24
%dM=bitcast i8*%dL to i32*
%dN=load i32,i32*%dM,align 4
%dO=icmp eq i32%dN,0
br i1%dO,label%dV,label%dP
dP:
%dQ=bitcast i8*%dI to i8**
store i8*null,i8**%c,align 8
%dR=sext i32%Q to i64
%dS=getelementptr inbounds i8,i8*%dJ,i64%dR
%dT=bitcast i8*%dS to i8**
%dU=load i8*,i8**%dT,align 8
br label%d8
dV:
%dW=getelementptr inbounds i8,i8*%dI,i64 28
%dX=bitcast i8*%dW to i32*
%dY=load i32,i32*%dX,align 4
%dZ=call i8*@sml_alloc(i32 inreg%dY)#0
%d0=getelementptr inbounds i8,i8*%dZ,i64 -4
%d1=bitcast i8*%d0 to i32*
store i32%dY,i32*%d1,align 4
%d2=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%d3=sext i32%Q to i64
%d4=getelementptr inbounds i8,i8*%d2,i64%d3
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dZ,i8*%d4,i32%dY,i1 false)
%d5=bitcast i8**%i to i8***
%d6=load i8**,i8***%d5,align 8
%d7=bitcast i8**%d6 to i8*
br label%d8
d8:
%d9=phi i8*[%d7,%dV],[%dI,%dP]
%ea=phi i8**[%d6,%dV],[%dQ,%dP]
%eb=phi i8*[%dZ,%dV],[%dU,%dP]
store i8*%eb,i8**%c,align 8
%ec=load i8*,i8**%ea,align 8
%ed=getelementptr inbounds i8,i8*%ec,i64 16
%ee=bitcast i8*%ed to i8*(i8*,i8*)**
%ef=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ee,align 8
%eg=bitcast i8*%ec to i8**
%eh=load i8*,i8**%eg,align 8
store i8*%eh,i8**%j,align 8
%ei=getelementptr inbounds i8,i8*%d9,i64 20
%ej=bitcast i8*%ei to i32*
%ek=load i32,i32*%ej,align 4
%el=getelementptr inbounds i8,i8*%d9,i64 16
%em=bitcast i8*%el to i32*
%en=load i32,i32*%em,align 4
%eo=call i8*@sml_alloc(i32 inreg%af)#0
%ep=or i32%W,1342177280
%eq=getelementptr inbounds i8,i8*%eo,i64 -4
%er=bitcast i8*%eq to i32*
store i32%ep,i32*%er,align 4
call void@llvm.memset.p0i8.i32(i8*%eo,i8 0,i32%af,i1 false)
%es=icmp eq i32%en,0
%et=load i8*,i8**%d,align 8
%eu=sext i32%R to i64
%ev=getelementptr inbounds i8,i8*%eo,i64%eu
br i1%es,label%eC,label%ew
ew:
%ex=bitcast i8*%ev to i8**
store i8*%et,i8**%ex,align 8
%ey=load i8*,i8**%h,align 8
%ez=sext i32%U to i64
%eA=getelementptr inbounds i8,i8*%eo,i64%ez
%eB=bitcast i8*%eA to i8**
store i8*%ey,i8**%eB,align 8
br label%eG
eC:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ev,i8*%et,i32%ek,i1 false)
%eD=load i8*,i8**%h,align 8
%eE=sext i32%U to i64
%eF=getelementptr inbounds i8,i8*%eo,i64%eE
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%eF,i8*%eD,i32%ek,i1 false)
br label%eG
eG:
%eH=sext i32%W to i64
%eI=getelementptr inbounds i8,i8*%eo,i64%eH
%eJ=bitcast i8*%eI to i32*
store i32%ae,i32*%eJ,align 4
%eK=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%eL=call fastcc i8*%ef(i8*inreg%eK,i8*inreg%eo)
%eM=bitcast i8*%eL to i32*
%eN=load i32,i32*%eM,align 4
switch i32%eN,label%eO[
i32 1,label%hd
i32 2,label%fz
]
eO:
store i8*null,i8**%d,align 8
store i8*null,i8**%g,align 8
%eP=bitcast i8**%k to i32**
%eQ=load i32*,i32**%eP,align 8
store i8*null,i8**%k,align 8
%eR=load i32,i32*%eQ,align 4
%eS=load i8*,i8**%i,align 8
%eT=getelementptr inbounds i8,i8*%eS,i64 20
%eU=bitcast i8*%eT to i32*
%eV=load i32,i32*%eU,align 4
%eW=getelementptr inbounds i8,i8*%eS,i64 16
%eX=bitcast i8*%eW to i32*
%eY=load i32,i32*%eX,align 4
%eZ=getelementptr inbounds i8,i8*%eS,i64 28
%e0=bitcast i8*%eZ to i32*
%e1=load i32,i32*%e0,align 4
store i8*null,i8**%i,align 8
%e2=getelementptr inbounds i8,i8*%eS,i64 24
%e3=bitcast i8*%e2 to i32*
%e4=load i32,i32*%e3,align 4
%e5=call i8*@sml_alloc(i32 inreg%a5)#0
%e6=or i32%aQ,1342177280
%e7=bitcast i8*%e5 to i32*
%e8=getelementptr inbounds i8,i8*%e5,i64 -4
%e9=bitcast i8*%e8 to i32*
store i32%e6,i32*%e9,align 4
call void@llvm.memset.p0i8.i32(i8*%e5,i8 0,i32%a5,i1 false)
store i32%eR,i32*%e7,align 4
%fa=icmp eq i32%eY,0
%fb=load i8*,i8**%h,align 8
%fc=sext i32%z to i64
%fd=getelementptr inbounds i8,i8*%e5,i64%fc
br i1%fa,label%fg,label%fe
fe:
%ff=bitcast i8*%fd to i8**
store i8*%fb,i8**%ff,align 8
br label%fh
fg:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%fd,i8*%fb,i32%eV,i1 false)
br label%fh
fh:
%fi=load i8*,i8**%e,align 8
%fj=getelementptr inbounds i8,i8*%e5,i64%cU
%fk=bitcast i8*%fj to i8**
store i8*%fi,i8**%fk,align 8
%fl=load i8*,i8**%f,align 8
%fm=getelementptr inbounds i8,i8*%e5,i64%cY
%fn=bitcast i8*%fm to i8**
store i8*%fl,i8**%fn,align 8
%fo=icmp eq i32%e4,0
%fp=load i8*,i8**%c,align 8
%fq=sext i32%L to i64
%fr=getelementptr inbounds i8,i8*%e5,i64%fq
br i1%fo,label%fu,label%fs
fs:
%ft=bitcast i8*%fr to i8**
store i8*%fp,i8**%ft,align 8
br label%fv
fu:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%fr,i8*%fp,i32%e1,i1 false)
br label%fv
fv:
%fw=sext i32%aQ to i64
%fx=getelementptr inbounds i8,i8*%e5,i64%fw
%fy=bitcast i8*%fx to i32*
store i32%a4,i32*%fy,align 4
ret i8*%e5
fz:
store i8*null,i8**%k,align 8
%fA=load i8*,i8**%i,align 8
%fB=getelementptr inbounds i8,i8*%fA,i64 8
%fC=bitcast i8*%fB to i8**
%fD=load i8*,i8**%fC,align 8
%fE=getelementptr inbounds i8,i8*%fA,i64 24
%fF=bitcast i8*%fE to i32*
%fG=load i32,i32*%fF,align 4
%fH=getelementptr inbounds i8,i8*%fA,i64 28
%fI=bitcast i8*%fH to i32*
%fJ=load i32,i32*%fI,align 4
%fK=call fastcc i8*@_SMLL2T_G_322(i8*inreg%fD,i32 inreg%fG,i32 inreg%fJ)
%fL=getelementptr inbounds i8,i8*%fK,i64 16
%fM=bitcast i8*%fL to i8*(i8*,i8*)**
%fN=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%fM,align 8
%fO=bitcast i8*%fK to i8**
%fP=load i8*,i8**%fO,align 8
store i8*%fP,i8**%j,align 8
%fQ=load i8*,i8**%i,align 8
%fR=getelementptr inbounds i8,i8*%fQ,i64 20
%fS=bitcast i8*%fR to i32*
%fT=load i32,i32*%fS,align 4
%fU=getelementptr inbounds i8,i8*%fQ,i64 16
%fV=bitcast i8*%fU to i32*
%fW=load i32,i32*%fV,align 4
%fX=getelementptr inbounds i8,i8*%fQ,i64 28
%fY=bitcast i8*%fX to i32*
%fZ=load i32,i32*%fY,align 4
%f0=getelementptr inbounds i8,i8*%fQ,i64 24
%f1=bitcast i8*%f0 to i32*
%f2=load i32,i32*%f1,align 4
%f3=call i8*@sml_alloc(i32 inreg%as)#0
%f4=or i32%ah,1342177280
%f5=getelementptr inbounds i8,i8*%f3,i64 -4
%f6=bitcast i8*%f5 to i32*
store i32%f4,i32*%f6,align 4
call void@llvm.memset.p0i8.i32(i8*%f3,i8 0,i32%as,i1 false)
%f7=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%f8=bitcast i8*%f3 to i8**
store i8*%f7,i8**%f8,align 8
%f9=icmp eq i32%fW,0
%ga=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%gb=sext i32%M to i64
%gc=getelementptr inbounds i8,i8*%f3,i64%gb
br i1%f9,label%gf,label%gd
gd:
%ge=bitcast i8*%gc to i8**
store i8*%ga,i8**%ge,align 8
br label%gg
gf:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%gc,i8*%ga,i32%fT,i1 false)
br label%gg
gg:
%gh=icmp eq i32%f2,0
%gi=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%gj=sext i32%Q to i64
%gk=getelementptr inbounds i8,i8*%f3,i64%gj
br i1%gh,label%gn,label%gl
gl:
%gm=bitcast i8*%gk to i8**
store i8*%gi,i8**%gm,align 8
br label%go
gn:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%gk,i8*%gi,i32%fZ,i1 false)
br label%go
go:
%gp=sext i32%ah to i64
%gq=getelementptr inbounds i8,i8*%f3,i64%gp
%gr=bitcast i8*%gq to i32*
store i32%ar,i32*%gr,align 4
%gs=load i8*,i8**%i,align 8
%gt=call fastcc i8*@_SMLL6insert_333(i8*inreg%gs,i8*inreg%f3)
store i8*%gt,i8**%c,align 8
%gu=load i8*,i8**%i,align 8
%gv=getelementptr inbounds i8,i8*%gu,i64 20
%gw=bitcast i8*%gv to i32*
%gx=load i32,i32*%gw,align 4
%gy=getelementptr inbounds i8,i8*%gu,i64 16
%gz=bitcast i8*%gy to i32*
%gA=load i32,i32*%gz,align 4
%gB=getelementptr inbounds i8,i8*%gu,i64 28
%gC=bitcast i8*%gB to i32*
%gD=load i32,i32*%gC,align 4
store i8*null,i8**%i,align 8
%gE=getelementptr inbounds i8,i8*%gu,i64 24
%gF=bitcast i8*%gE to i32*
%gG=load i32,i32*%gF,align 4
%gH=call i8*@sml_alloc(i32 inreg%aO)#0
%gI=or i32%aB,1342177280
%gJ=getelementptr inbounds i8,i8*%gH,i64 -4
%gK=bitcast i8*%gJ to i32*
store i32%gI,i32*%gK,align 4
call void@llvm.memset.p0i8.i32(i8*%gH,i8 0,i32%aO,i1 false)
%gL=icmp eq i32%gA,0
%gM=load i8*,i8**%d,align 8
%gN=getelementptr inbounds i8,i8*%gH,i64%eu
br i1%gL,label%gQ,label%gO
gO:
%gP=bitcast i8*%gN to i8**
store i8*%gM,i8**%gP,align 8
br label%gR
gQ:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%gN,i8*%gM,i32%gx,i1 false)
br label%gR
gR:
%gS=icmp eq i32%gG,0
%gT=load i8*,i8**%g,align 8
%gU=sext i32%av to i64
%gV=getelementptr inbounds i8,i8*%gH,i64%gU
br i1%gS,label%gY,label%gW
gW:
%gX=bitcast i8*%gV to i8**
store i8*%gT,i8**%gX,align 8
br label%gZ
gY:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%gV,i8*%gT,i32%gD,i1 false)
br label%gZ
gZ:
%g0=load i8*,i8**%e,align 8
%g1=sext i32%ax to i64
%g2=getelementptr inbounds i8,i8*%gH,i64%g1
%g3=bitcast i8*%g2 to i8**
store i8*%g0,i8**%g3,align 8
%g4=load i8*,i8**%c,align 8
%g5=sext i32%az to i64
%g6=getelementptr inbounds i8,i8*%gH,i64%g5
%g7=bitcast i8*%g6 to i8**
store i8*%g4,i8**%g7,align 8
%g8=sext i32%aB to i64
%g9=getelementptr inbounds i8,i8*%gH,i64%g8
%ha=bitcast i8*%g9 to i32*
store i32%aN,i32*%ha,align 4
%hb=load i8*,i8**%j,align 8
%hc=tail call fastcc i8*%fN(i8*inreg%hb,i8*inreg%gH)
ret i8*%hc
hd:
store i8*null,i8**%k,align 8
%he=load i8*,i8**%i,align 8
%hf=getelementptr inbounds i8,i8*%he,i64 8
%hg=bitcast i8*%hf to i8**
%hh=load i8*,i8**%hg,align 8
%hi=getelementptr inbounds i8,i8*%he,i64 24
%hj=bitcast i8*%hi to i32*
%hk=load i32,i32*%hj,align 4
%hl=getelementptr inbounds i8,i8*%he,i64 28
%hm=bitcast i8*%hl to i32*
%hn=load i32,i32*%hm,align 4
%ho=call fastcc i8*@_SMLL2T_G_322(i8*inreg%hh,i32 inreg%hk,i32 inreg%hn)
%hp=getelementptr inbounds i8,i8*%ho,i64 16
%hq=bitcast i8*%hp to i8*(i8*,i8*)**
%hr=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%hq,align 8
%hs=bitcast i8*%ho to i8**
%ht=load i8*,i8**%hs,align 8
store i8*%ht,i8**%j,align 8
%hu=load i8*,i8**%i,align 8
%hv=getelementptr inbounds i8,i8*%hu,i64 20
%hw=bitcast i8*%hv to i32*
%hx=load i32,i32*%hw,align 4
%hy=getelementptr inbounds i8,i8*%hu,i64 16
%hz=bitcast i8*%hy to i32*
%hA=load i32,i32*%hz,align 4
%hB=getelementptr inbounds i8,i8*%hu,i64 28
%hC=bitcast i8*%hB to i32*
%hD=load i32,i32*%hC,align 4
%hE=getelementptr inbounds i8,i8*%hu,i64 24
%hF=bitcast i8*%hE to i32*
%hG=load i32,i32*%hF,align 4
%hH=call i8*@sml_alloc(i32 inreg%as)#0
%hI=or i32%ah,1342177280
%hJ=getelementptr inbounds i8,i8*%hH,i64 -4
%hK=bitcast i8*%hJ to i32*
store i32%hI,i32*%hK,align 4
call void@llvm.memset.p0i8.i32(i8*%hH,i8 0,i32%as,i1 false)
%hL=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%hM=bitcast i8*%hH to i8**
store i8*%hL,i8**%hM,align 8
%hN=icmp eq i32%hA,0
%hO=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%hP=sext i32%M to i64
%hQ=getelementptr inbounds i8,i8*%hH,i64%hP
br i1%hN,label%hT,label%hR
hR:
%hS=bitcast i8*%hQ to i8**
store i8*%hO,i8**%hS,align 8
br label%hU
hT:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%hQ,i8*%hO,i32%hx,i1 false)
br label%hU
hU:
%hV=icmp eq i32%hG,0
%hW=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%hX=sext i32%Q to i64
%hY=getelementptr inbounds i8,i8*%hH,i64%hX
br i1%hV,label%h1,label%hZ
hZ:
%h0=bitcast i8*%hY to i8**
store i8*%hW,i8**%h0,align 8
br label%h2
h1:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%hY,i8*%hW,i32%hD,i1 false)
br label%h2
h2:
%h3=sext i32%ah to i64
%h4=getelementptr inbounds i8,i8*%hH,i64%h3
%h5=bitcast i8*%h4 to i32*
store i32%ar,i32*%h5,align 4
%h6=load i8*,i8**%i,align 8
%h7=call fastcc i8*@_SMLL6insert_333(i8*inreg%h6,i8*inreg%hH)
store i8*%h7,i8**%c,align 8
%h8=load i8*,i8**%i,align 8
%h9=getelementptr inbounds i8,i8*%h8,i64 20
%ia=bitcast i8*%h9 to i32*
%ib=load i32,i32*%ia,align 4
%ic=getelementptr inbounds i8,i8*%h8,i64 16
%id=bitcast i8*%ic to i32*
%ie=load i32,i32*%id,align 4
%if=getelementptr inbounds i8,i8*%h8,i64 28
%ig=bitcast i8*%if to i32*
%ih=load i32,i32*%ig,align 4
store i8*null,i8**%i,align 8
%ii=getelementptr inbounds i8,i8*%h8,i64 24
%ij=bitcast i8*%ii to i32*
%ik=load i32,i32*%ij,align 4
%il=call i8*@sml_alloc(i32 inreg%aO)#0
%im=or i32%aB,1342177280
%in=getelementptr inbounds i8,i8*%il,i64 -4
%io=bitcast i8*%in to i32*
store i32%im,i32*%io,align 4
call void@llvm.memset.p0i8.i32(i8*%il,i8 0,i32%aO,i1 false)
%ip=icmp eq i32%ie,0
%iq=load i8*,i8**%d,align 8
%ir=getelementptr inbounds i8,i8*%il,i64%eu
br i1%ip,label%iu,label%is
is:
%it=bitcast i8*%ir to i8**
store i8*%iq,i8**%it,align 8
br label%iv
iu:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ir,i8*%iq,i32%ib,i1 false)
br label%iv
iv:
%iw=icmp eq i32%ik,0
%ix=load i8*,i8**%g,align 8
%iy=sext i32%av to i64
%iz=getelementptr inbounds i8,i8*%il,i64%iy
br i1%iw,label%iC,label%iA
iA:
%iB=bitcast i8*%iz to i8**
store i8*%ix,i8**%iB,align 8
br label%iD
iC:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%iz,i8*%ix,i32%ih,i1 false)
br label%iD
iD:
%iE=load i8*,i8**%c,align 8
%iF=sext i32%ax to i64
%iG=getelementptr inbounds i8,i8*%il,i64%iF
%iH=bitcast i8*%iG to i8**
store i8*%iE,i8**%iH,align 8
%iI=load i8*,i8**%f,align 8
%iJ=sext i32%az to i64
%iK=getelementptr inbounds i8,i8*%il,i64%iJ
%iL=bitcast i8*%iK to i8**
store i8*%iI,i8**%iL,align 8
%iM=sext i32%aB to i64
%iN=getelementptr inbounds i8,i8*%il,i64%iM
%iO=bitcast i8*%iN to i32*
store i32%aN,i32*%iO,align 4
%iP=load i8*,i8**%j,align 8
%iQ=tail call fastcc i8*%hr(i8*inreg%iP,i8*inreg%il)
ret i8*%iQ
}
define internal fastcc i8*@_SMLL6insert_334(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=getelementptr inbounds i8,i8*%a,i64 16
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%a,i64 20
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=call i8*@sml_alloc(i32 inreg 36)#0
%s=getelementptr inbounds i8,i8*%r,i64 -4
%t=bitcast i8*%s to i32*
store i32 1342177312,i32*%t,align 4
store i8*%r,i8**%f,align 8
%u=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%v=bitcast i8*%r to i8**
store i8*%u,i8**%v,align 8
%w=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%x=getelementptr inbounds i8,i8*%r,i64 8
%y=bitcast i8*%x to i8**
store i8*%w,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%r,i64 16
%A=bitcast i8*%z to i32*
store i32%n,i32*%A,align 4
%B=getelementptr inbounds i8,i8*%r,i64 20
%C=bitcast i8*%B to i32*
store i32%q,i32*%C,align 4
%D=getelementptr inbounds i8,i8*%r,i64 24
%E=bitcast i8*%D to i32*
store i32%b,i32*%E,align 4
%F=getelementptr inbounds i8,i8*%r,i64 28
%G=bitcast i8*%F to i32*
store i32%c,i32*%G,align 4
%H=getelementptr inbounds i8,i8*%r,i64 32
%I=bitcast i8*%H to i32*
store i32 3,i32*%I,align 4
%J=call i8*@sml_alloc(i32 inreg 28)#0
%K=getelementptr inbounds i8,i8*%J,i64 -4
%L=bitcast i8*%K to i32*
store i32 1342177304,i32*%L,align 4
%M=load i8*,i8**%f,align 8
%N=bitcast i8*%J to i8**
store i8*%M,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%J,i64 8
%P=bitcast i8*%O to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6insert_333 to void(...)*),void(...)**%P,align 8
%Q=getelementptr inbounds i8,i8*%J,i64 16
%R=bitcast i8*%Q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6insert_333 to void(...)*),void(...)**%R,align 8
%S=getelementptr inbounds i8,i8*%J,i64 24
%T=bitcast i8*%S to i32*
store i32 -2147483647,i32*%T,align 4
ret i8*%J
}
define internal fastcc i8*@_SMLL7insert_G_335(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%f,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%m
j:
%k=bitcast i8*%b to i8**
%l=bitcast i8**%c to i8***
br label%q
m:
call void@sml_check(i32 inreg%h)
%n=bitcast i8**%c to i8***
%o=load i8**,i8***%n,align 8
%p=load i8*,i8**%f,align 8
br label%q
q:
%r=phi i8***[%l,%j],[%n,%m]
%s=phi i8*[%a,%j],[%p,%m]
%t=phi i8**[%k,%j],[%o,%m]
%u=getelementptr inbounds i8,i8*%s,i64 12
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=add i32%w,-1
%y=sub i32 0,%w
%z=and i32%x,%y
%A=getelementptr inbounds i8,i8*%s,i64 20
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=add i32%x,%C
%E=add i32%D,%z
%F=sub i32 0,%C
%G=and i32%E,%F
%H=add i32%w,7
%I=and i32%H,%y
%J=add i32%D,%I
%K=and i32%J,%F
%L=add i32%C,7
%M=add i32%L,%K
%N=and i32%M,-8
%O=lshr i32%K,3
%P=lshr i32%I,3
%Q=sub nsw i32%O,%P
%R=getelementptr inbounds i8,i8*%s,i64 16
%S=bitcast i8*%R to i32*
%T=load i32,i32*%S,align 4
%U=shl i32%T,%Q
%V=getelementptr inbounds i8,i8*%s,i64 8
%W=bitcast i8*%V to i32*
%X=load i32,i32*%W,align 4
%Y=or i32%U,%X
%Z=shl i32%Y,%P
%aa=or i32%Z,1
%ab=or i32%N,4
%ac=load i8*,i8**%t,align 8
store i8*%ac,i8**%d,align 8
%ad=icmp eq i32%X,0
br i1%ad,label%aj,label%ae
ae:
store i8*null,i8**%d,align 8
%af=sext i32%z to i64
%ag=getelementptr inbounds i8,i8*%ac,i64%af
%ah=bitcast i8*%ag to i8**
%ai=load i8*,i8**%ah,align 8
br label%au
aj:
%ak=call i8*@sml_alloc(i32 inreg%w)#0
%al=getelementptr inbounds i8,i8*%ak,i64 -4
%am=bitcast i8*%al to i32*
store i32%w,i32*%am,align 4
%an=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ao=sext i32%z to i64
%ap=getelementptr inbounds i8,i8*%an,i64%ao
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ak,i8*%ap,i32%w,i1 false)
%aq=load i8*,i8**%f,align 8
%ar=getelementptr inbounds i8,i8*%aq,i64 16
%as=bitcast i8*%ar to i32*
%at=load i32,i32*%as,align 4
br label%au
au:
%av=phi i32[%at,%aj],[%T,%ae]
%aw=phi i8*[%aq,%aj],[%s,%ae]
%ax=phi i8*[%ak,%aj],[%ai,%ae]
store i8*%ax,i8**%d,align 8
%ay=load i8**,i8***%r,align 8
%az=load i8*,i8**%ay,align 8
store i8*%az,i8**%e,align 8
%aA=icmp eq i32%av,0
br i1%aA,label%aH,label%aB
aB:
%aC=bitcast i8**%ay to i8*
store i8*null,i8**%e,align 8
%aD=sext i32%G to i64
%aE=getelementptr inbounds i8,i8*%az,i64%aD
%aF=bitcast i8*%aE to i8**
%aG=load i8*,i8**%aF,align 8
br label%aW
aH:
%aI=getelementptr inbounds i8,i8*%aw,i64 20
%aJ=bitcast i8*%aI to i32*
%aK=load i32,i32*%aJ,align 4
%aL=call i8*@sml_alloc(i32 inreg%aK)#0
%aM=getelementptr inbounds i8,i8*%aL,i64 -4
%aN=bitcast i8*%aM to i32*
store i32%aK,i32*%aN,align 4
%aO=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aP=sext i32%G to i64
%aQ=getelementptr inbounds i8,i8*%aO,i64%aP
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aL,i8*%aQ,i32%aK,i1 false)
%aR=load i8*,i8**%c,align 8
%aS=load i8*,i8**%f,align 8
%aT=getelementptr inbounds i8,i8*%aS,i64 16
%aU=bitcast i8*%aT to i32*
%aV=load i32,i32*%aU,align 4
br label%aW
aW:
%aX=phi i32[%aV,%aH],[%av,%aB]
%aY=phi i8*[%aS,%aH],[%aw,%aB]
%aZ=phi i8*[%aR,%aH],[%aC,%aB]
%a0=phi i8*[%aL,%aH],[%aG,%aB]
store i8*%a0,i8**%e,align 8
%a1=getelementptr inbounds i8,i8*%aZ,i64 8
%a2=bitcast i8*%a1 to i8**
%a3=load i8*,i8**%a2,align 8
store i8*%a3,i8**%c,align 8
%a4=bitcast i8*%aY to i8**
%a5=load i8*,i8**%a4,align 8
%a6=getelementptr inbounds i8,i8*%aY,i64 20
%a7=bitcast i8*%a6 to i32*
%a8=load i32,i32*%a7,align 4
%a9=call fastcc i8*@_SMLL6insert_334(i8*inreg%a5,i32 inreg%aX,i32 inreg%a8)
%ba=getelementptr inbounds i8,i8*%a9,i64 16
%bb=bitcast i8*%ba to i8*(i8*,i8*)**
%bc=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bb,align 8
%bd=bitcast i8*%a9 to i8**
%be=load i8*,i8**%bd,align 8
store i8*%be,i8**%g,align 8
%bf=load i8*,i8**%f,align 8
%bg=getelementptr inbounds i8,i8*%bf,i64 12
%bh=bitcast i8*%bg to i32*
%bi=load i32,i32*%bh,align 4
%bj=getelementptr inbounds i8,i8*%bf,i64 8
%bk=bitcast i8*%bj to i32*
%bl=load i32,i32*%bk,align 4
%bm=getelementptr inbounds i8,i8*%bf,i64 20
%bn=bitcast i8*%bm to i32*
%bo=load i32,i32*%bn,align 4
store i8*null,i8**%f,align 8
%bp=getelementptr inbounds i8,i8*%bf,i64 16
%bq=bitcast i8*%bp to i32*
%br=load i32,i32*%bq,align 4
%bs=call i8*@sml_alloc(i32 inreg%ab)#0
%bt=or i32%N,1342177280
%bu=getelementptr inbounds i8,i8*%bs,i64 -4
%bv=bitcast i8*%bu to i32*
store i32%bt,i32*%bv,align 4
call void@llvm.memset.p0i8.i32(i8*%bs,i8 0,i32%ab,i1 false)
%bw=load i8*,i8**%c,align 8
%bx=bitcast i8*%bs to i8**
store i8*%bw,i8**%bx,align 8
%by=icmp eq i32%bl,0
%bz=load i8*,i8**%d,align 8
%bA=sext i32%I to i64
%bB=getelementptr inbounds i8,i8*%bs,i64%bA
br i1%by,label%bE,label%bC
bC:
%bD=bitcast i8*%bB to i8**
store i8*%bz,i8**%bD,align 8
br label%bF
bE:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bB,i8*%bz,i32%bi,i1 false)
br label%bF
bF:
%bG=icmp eq i32%br,0
%bH=load i8*,i8**%e,align 8
%bI=sext i32%K to i64
%bJ=getelementptr inbounds i8,i8*%bs,i64%bI
br i1%bG,label%bM,label%bK
bK:
%bL=bitcast i8*%bJ to i8**
store i8*%bH,i8**%bL,align 8
br label%bN
bM:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bJ,i8*%bH,i32%bo,i1 false)
br label%bN
bN:
%bO=sext i32%N to i64
%bP=getelementptr inbounds i8,i8*%bs,i64%bO
%bQ=bitcast i8*%bP to i32*
store i32%aa,i32*%bQ,align 4
%bR=load i8*,i8**%g,align 8
%bS=tail call fastcc i8*%bc(i8*inreg%bR,i8*inreg%bs)
ret i8*%bS
}
define internal fastcc i8*@_SMLL7insert_G_336(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=getelementptr inbounds i8,i8*%a,i64 8
%i=bitcast i8*%h to i32*
%j=load i32,i32*%i,align 4
%k=getelementptr inbounds i8,i8*%a,i64 12
%l=bitcast i8*%k to i32*
%m=load i32,i32*%l,align 4
%n=call i8*@sml_alloc(i32 inreg 28)#0
%o=getelementptr inbounds i8,i8*%n,i64 -4
%p=bitcast i8*%o to i32*
store i32 1342177304,i32*%p,align 4
store i8*%n,i8**%e,align 8
%q=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%r=bitcast i8*%n to i8**
store i8*%q,i8**%r,align 8
%s=getelementptr inbounds i8,i8*%n,i64 8
%t=bitcast i8*%s to i32*
store i32%j,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%n,i64 12
%v=bitcast i8*%u to i32*
store i32%m,i32*%v,align 4
%w=getelementptr inbounds i8,i8*%n,i64 16
%x=bitcast i8*%w to i32*
store i32%b,i32*%x,align 4
%y=getelementptr inbounds i8,i8*%n,i64 20
%z=bitcast i8*%y to i32*
store i32%c,i32*%z,align 4
%A=getelementptr inbounds i8,i8*%n,i64 24
%B=bitcast i8*%A to i32*
store i32 1,i32*%B,align 4
%C=call i8*@sml_alloc(i32 inreg 28)#0
%D=getelementptr inbounds i8,i8*%C,i64 -4
%E=bitcast i8*%D to i32*
store i32 1342177304,i32*%E,align 4
%F=load i8*,i8**%e,align 8
%G=bitcast i8*%C to i8**
store i8*%F,i8**%G,align 8
%H=getelementptr inbounds i8,i8*%C,i64 8
%I=bitcast i8*%H to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL7insert_G_335 to void(...)*),void(...)**%I,align 8
%J=getelementptr inbounds i8,i8*%C,i64 16
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL7insert_G_335 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%C,i64 24
%M=bitcast i8*%L to i32*
store i32 -2147483647,i32*%M,align 4
ret i8*%C
}
define internal fastcc i8*@_SMLL10insertWith_337(i8*inreg%a,i8*inreg%b,i8*inreg%c)#2 gc"smlsharp"{
u:
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
%k=alloca i8*,align 8
%l=alloca i8*,align 8
%m=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
call void@llvm.gcroot(i8**%k,i8*null)#0
call void@llvm.gcroot(i8**%l,i8*null)#0
call void@llvm.gcroot(i8**%m,i8*null)#0
store i8*%a,i8**%k,align 8
store i8*%b,i8**%e,align 8
store i8*%c,i8**%d,align 8
%n=load atomic i32,i32*@sml_check_flag unordered,align 4
%o=icmp eq i32%n,0
br i1%o,label%s,label%p
p:
call void@sml_check(i32 inreg%n)
%q=load i8*,i8**%d,align 8
%r=load i8*,i8**%k,align 8
br label%s
s:
%t=phi i8*[%r,%p],[%a,%u]
%v=phi i8*[%q,%p],[%c,%u]
%w=getelementptr inbounds i8,i8*%t,i64 20
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=add i32%y,3
%A=sub i32 0,%y
%B=and i32%z,%A
%C=add i32%y,7
%D=add i32%C,%B
%E=and i32%D,-8
%F=add i32%E,15
%G=and i32%F,-8
%H=getelementptr inbounds i8,i8*%t,i64 28
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
%K=add i32%J,7
%L=add i32%K,%G
%M=sub i32 0,%J
%N=and i32%L,%M
%O=and i32%C,%A
%P=add i32%y,-1
%Q=add i32%P,%J
%R=add i32%Q,%O
%S=and i32%R,%M
%T=and i32%P,%A
%U=add i32%T,%y
%V=add i32%P,%U
%W=and i32%V,%A
%X=add i32%C,%W
%Y=and i32%X,-8
%Z=lshr i32%W,3
%aa=lshr i32%T,3
%ab=sub nsw i32%Z,%aa
%ac=getelementptr inbounds i8,i8*%t,i64 16
%ad=bitcast i8*%ac to i32*
%ae=load i32,i32*%ad,align 4
%af=shl i32%ae,%ab
%ag=or i32%af,%ae
%ah=or i32%Y,4
%ai=add i32%K,%S
%aj=and i32%ai,-8
%ak=lshr i32%S,3
%al=lshr i32%O,3
%am=sub nsw i32%ak,%al
%an=getelementptr inbounds i8,i8*%t,i64 24
%ao=bitcast i8*%an to i32*
%ap=load i32,i32*%ao,align 4
%aq=shl i32%ap,%am
%ar=or i32%aq,%ae
%as=shl i32%ar,%al
%at=or i32%as,1
%au=or i32%aj,4
%av=add i32%J,-1
%aw=add i32%av,%U
%ax=and i32%aw,%M
%ay=add i32%K,%ax
%az=and i32%ay,-8
%aA=add i32%az,15
%aB=and i32%aA,-8
%aC=add i32%aB,15
%aD=and i32%aC,-8
%aE=lshr i32%aA,3
%aF=lshr i32%ay,3
%aG=sub nsw i32%aE,%aF
%aH=lshr i32%ax,3
%aI=sub nsw i32%aF,%aH
%aJ=sub nsw i32%aH,%aa
%aK=shl i32 1,%aG
%aL=or i32%aK,1
%aM=shl i32%aL,%aI
%aN=or i32%aM,%ap
%aO=shl i32%aN,%aJ
%aP=or i32%aO,%ae
%aQ=or i32%aD,4
%aR=add i32%K,%N
%aS=and i32%aR,-8
%aT=lshr i32%N,3
%aU=lshr i32%F,3
%aV=sub nsw i32%aT,%aU
%aW=lshr i32%D,3
%aX=sub nsw i32%aU,%aW
%aY=lshr i32%B,3
%aZ=sub nsw i32%aW,%aY
%a0=shl i32%ap,%aV
%a1=or i32%a0,1
%a2=shl i32%a1,%aX
%a3=or i32%a2,1
%a4=shl i32%a3,%aZ
%a5=or i32%a4,%ae
%a6=shl i32%a5,%aY
%a7=or i32%aS,4
%a8=bitcast i8*%v to i8**
%a9=load i8*,i8**%a8,align 8
%ba=icmp eq i8*%a9,null
br i1%ba,label%bb,label%cz
bb:
%bc=icmp eq i32%ae,0
br i1%bc,label%bi,label%bd
bd:
%be=sext i32%O to i64
%bf=getelementptr inbounds i8,i8*%v,i64%be
%bg=bitcast i8*%bf to i8**
%bh=load i8*,i8**%bg,align 8
br label%bt
bi:
%bj=call i8*@sml_alloc(i32 inreg%y)#0
%bk=getelementptr inbounds i8,i8*%bj,i64 -4
%bl=bitcast i8*%bk to i32*
store i32%y,i32*%bl,align 4
%bm=load i8*,i8**%d,align 8
%bn=sext i32%O to i64
%bo=getelementptr inbounds i8,i8*%bm,i64%bn
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bj,i8*%bo,i32%y,i1 false)
%bp=load i8*,i8**%k,align 8
%bq=getelementptr inbounds i8,i8*%bp,i64 24
%br=bitcast i8*%bq to i32*
%bs=load i32,i32*%br,align 4
br label%bt
bt:
%bu=phi i8*[%bm,%bi],[%v,%bd]
%bv=phi i32[%bs,%bi],[%ap,%bd]
%bw=phi i8*[%bp,%bi],[%t,%bd]
%bx=phi i8*[%bj,%bi],[%bh,%bd]
store i8*%bx,i8**%e,align 8
%by=icmp eq i32%bv,0
br i1%by,label%bE,label%bz
bz:
store i8*null,i8**%d,align 8
%bA=sext i32%S to i64
%bB=getelementptr inbounds i8,i8*%bu,i64%bA
%bC=bitcast i8*%bB to i8**
%bD=load i8*,i8**%bC,align 8
br label%bS
bE:
%bF=getelementptr inbounds i8,i8*%bw,i64 28
%bG=bitcast i8*%bF to i32*
%bH=load i32,i32*%bG,align 4
%bI=call i8*@sml_alloc(i32 inreg%bH)#0
%bJ=getelementptr inbounds i8,i8*%bI,i64 -4
%bK=bitcast i8*%bJ to i32*
store i32%bH,i32*%bK,align 4
%bL=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bM=sext i32%S to i64
%bN=getelementptr inbounds i8,i8*%bL,i64%bM
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bI,i8*%bN,i32%bH,i1 false)
%bO=load i8*,i8**%k,align 8
%bP=getelementptr inbounds i8,i8*%bO,i64 24
%bQ=bitcast i8*%bP to i32*
%bR=load i32,i32*%bQ,align 4
br label%bS
bS:
%bT=phi i32[%bR,%bE],[%bv,%bz]
%bU=phi i8*[%bO,%bE],[%bw,%bz]
%bV=phi i8*[%bI,%bE],[%bD,%bz]
store i8*%bV,i8**%d,align 8
%bW=getelementptr inbounds i8,i8*%bU,i64 20
%bX=bitcast i8*%bW to i32*
%bY=load i32,i32*%bX,align 4
%bZ=getelementptr inbounds i8,i8*%bU,i64 16
%b0=bitcast i8*%bZ to i32*
%b1=load i32,i32*%b0,align 4
%b2=getelementptr inbounds i8,i8*%bU,i64 28
%b3=bitcast i8*%b2 to i32*
%b4=load i32,i32*%b3,align 4
store i8*null,i8**%k,align 8
%b5=call i8*@sml_alloc(i32 inreg%a7)#0
%b6=or i32%aS,1342177280
%b7=bitcast i8*%b5 to i32*
%b8=getelementptr inbounds i8,i8*%b5,i64 -4
%b9=bitcast i8*%b8 to i32*
store i32%b6,i32*%b9,align 4
call void@llvm.memset.p0i8.i32(i8*%b5,i8 0,i32%a7,i1 false)
store i32 1,i32*%b7,align 4
%ca=icmp eq i32%b1,0
%cb=load i8*,i8**%e,align 8
%cc=sext i32%B to i64
%cd=getelementptr inbounds i8,i8*%b5,i64%cc
br i1%ca,label%cg,label%ce
ce:
%cf=bitcast i8*%cd to i8**
store i8*%cb,i8**%cf,align 8
br label%ch
cg:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cd,i8*%cb,i32%bY,i1 false)
br label%ch
ch:
%ci=sext i32%E to i64
%cj=getelementptr inbounds i8,i8*%b5,i64%ci
%ck=bitcast i8*%cj to i8**
store i8*null,i8**%ck,align 8
%cl=sext i32%G to i64
%cm=getelementptr inbounds i8,i8*%b5,i64%cl
%cn=bitcast i8*%cm to i8**
store i8*null,i8**%cn,align 8
%co=icmp eq i32%bT,0
%cp=load i8*,i8**%d,align 8
%cq=sext i32%N to i64
%cr=getelementptr inbounds i8,i8*%b5,i64%cq
br i1%co,label%cu,label%cs
cs:
%ct=bitcast i8*%cr to i8**
store i8*%cp,i8**%ct,align 8
br label%cv
cu:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cr,i8*%cp,i32%b4,i1 false)
br label%cv
cv:
%cw=sext i32%aS to i64
%cx=getelementptr inbounds i8,i8*%b5,i64%cw
%cy=bitcast i8*%cx to i32*
store i32%a6,i32*%cy,align 4
ret i8*%b5
cz:
store i8*%a9,i8**%m,align 8
%cA=icmp eq i32%ae,0
br i1%cA,label%cG,label%cB
cB:
%cC=sext i32%B to i64
%cD=getelementptr inbounds i8,i8*%a9,i64%cC
%cE=bitcast i8*%cD to i8**
%cF=load i8*,i8**%cE,align 8
br label%cR
cG:
%cH=call i8*@sml_alloc(i32 inreg%y)#0
%cI=getelementptr inbounds i8,i8*%cH,i64 -4
%cJ=bitcast i8*%cI to i32*
store i32%y,i32*%cJ,align 4
%cK=load i8*,i8**%m,align 8
%cL=sext i32%B to i64
%cM=getelementptr inbounds i8,i8*%cK,i64%cL
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cH,i8*%cM,i32%y,i1 false)
%cN=load i8*,i8**%k,align 8
%cO=getelementptr inbounds i8,i8*%cN,i64 24
%cP=bitcast i8*%cO to i32*
%cQ=load i32,i32*%cP,align 4
br label%cR
cR:
%cS=phi i8*[%cN,%cG],[%t,%cB]
%cT=phi i32[%cQ,%cG],[%ap,%cB]
%cU=phi i8*[%cK,%cG],[%a9,%cB]
%cV=phi i8*[%cH,%cG],[%cF,%cB]
store i8*%cV,i8**%f,align 8
%cW=sext i32%E to i64
%cX=getelementptr inbounds i8,i8*%cU,i64%cW
%cY=bitcast i8*%cX to i8**
%cZ=load i8*,i8**%cY,align 8
store i8*%cZ,i8**%g,align 8
%c0=sext i32%G to i64
%c1=getelementptr inbounds i8,i8*%cU,i64%c0
%c2=bitcast i8*%c1 to i8**
%c3=load i8*,i8**%c2,align 8
store i8*%c3,i8**%h,align 8
%c4=icmp eq i32%cT,0
br i1%c4,label%da,label%c5
c5:
%c6=sext i32%N to i64
%c7=getelementptr inbounds i8,i8*%cU,i64%c6
%c8=bitcast i8*%c7 to i8**
%c9=load i8*,i8**%c8,align 8
br label%dl
da:
%db=getelementptr inbounds i8,i8*%cS,i64 28
%dc=bitcast i8*%db to i32*
%dd=load i32,i32*%dc,align 4
%de=call i8*@sml_alloc(i32 inreg%dd)#0
%df=getelementptr inbounds i8,i8*%de,i64 -4
%dg=bitcast i8*%df to i32*
store i32%dd,i32*%dg,align 4
%dh=load i8*,i8**%m,align 8
%di=sext i32%N to i64
%dj=getelementptr inbounds i8,i8*%dh,i64%di
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%de,i8*%dj,i32%dd,i1 false)
%dk=load i8*,i8**%k,align 8
br label%dl
dl:
%dm=phi i8*[%dk,%da],[%cS,%c5]
%dn=phi i8*[%de,%da],[%c9,%c5]
store i8*%dn,i8**%i,align 8
%do=getelementptr inbounds i8,i8*%dm,i64 16
%dp=bitcast i8*%do to i32*
%dq=load i32,i32*%dp,align 4
%dr=icmp eq i32%dq,0
br i1%dr,label%dy,label%ds
ds:
%dt=load i8*,i8**%d,align 8
%du=sext i32%O to i64
%dv=getelementptr inbounds i8,i8*%dt,i64%du
%dw=bitcast i8*%dv to i8**
%dx=load i8*,i8**%dw,align 8
br label%dJ
dy:
%dz=getelementptr inbounds i8,i8*%dm,i64 20
%dA=bitcast i8*%dz to i32*
%dB=load i32,i32*%dA,align 4
%dC=call i8*@sml_alloc(i32 inreg%dB)#0
%dD=getelementptr inbounds i8,i8*%dC,i64 -4
%dE=bitcast i8*%dD to i32*
store i32%dB,i32*%dE,align 4
%dF=load i8*,i8**%d,align 8
%dG=sext i32%O to i64
%dH=getelementptr inbounds i8,i8*%dF,i64%dG
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dC,i8*%dH,i32%dB,i1 false)
%dI=load i8*,i8**%k,align 8
br label%dJ
dJ:
%dK=phi i8*[%dI,%dy],[%dm,%ds]
%dL=phi i8*[%dF,%dy],[%dt,%ds]
%dM=phi i8*[%dC,%dy],[%dx,%ds]
store i8*%dM,i8**%j,align 8
%dN=getelementptr inbounds i8,i8*%dK,i64 24
%dO=bitcast i8*%dN to i32*
%dP=load i32,i32*%dO,align 4
%dQ=icmp eq i32%dP,0
br i1%dQ,label%dX,label%dR
dR:
%dS=bitcast i8*%dK to i8**
store i8*null,i8**%d,align 8
%dT=sext i32%S to i64
%dU=getelementptr inbounds i8,i8*%dL,i64%dT
%dV=bitcast i8*%dU to i8**
%dW=load i8*,i8**%dV,align 8
br label%ea
dX:
%dY=getelementptr inbounds i8,i8*%dK,i64 28
%dZ=bitcast i8*%dY to i32*
%d0=load i32,i32*%dZ,align 4
%d1=call i8*@sml_alloc(i32 inreg%d0)#0
%d2=getelementptr inbounds i8,i8*%d1,i64 -4
%d3=bitcast i8*%d2 to i32*
store i32%d0,i32*%d3,align 4
%d4=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%d5=sext i32%S to i64
%d6=getelementptr inbounds i8,i8*%d4,i64%d5
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%d1,i8*%d6,i32%d0,i1 false)
%d7=bitcast i8**%k to i8***
%d8=load i8**,i8***%d7,align 8
%d9=bitcast i8**%d8 to i8*
br label%ea
ea:
%eb=phi i8*[%d9,%dX],[%dK,%dR]
%ec=phi i8**[%d8,%dX],[%dS,%dR]
%ed=phi i8*[%d1,%dX],[%dW,%dR]
store i8*%ed,i8**%d,align 8
%ee=load i8*,i8**%ec,align 8
%ef=getelementptr inbounds i8,i8*%ee,i64 16
%eg=bitcast i8*%ef to i8*(i8*,i8*)**
%eh=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%eg,align 8
%ei=bitcast i8*%ee to i8**
%ej=load i8*,i8**%ei,align 8
store i8*%ej,i8**%l,align 8
%ek=getelementptr inbounds i8,i8*%eb,i64 20
%el=bitcast i8*%ek to i32*
%em=load i32,i32*%el,align 4
%en=getelementptr inbounds i8,i8*%eb,i64 16
%eo=bitcast i8*%en to i32*
%ep=load i32,i32*%eo,align 4
%eq=call i8*@sml_alloc(i32 inreg%ah)#0
%er=or i32%Y,1342177280
%es=getelementptr inbounds i8,i8*%eq,i64 -4
%et=bitcast i8*%es to i32*
store i32%er,i32*%et,align 4
call void@llvm.memset.p0i8.i32(i8*%eq,i8 0,i32%ah,i1 false)
%eu=icmp eq i32%ep,0
%ev=load i8*,i8**%f,align 8
%ew=sext i32%T to i64
%ex=getelementptr inbounds i8,i8*%eq,i64%ew
br i1%eu,label%eE,label%ey
ey:
%ez=bitcast i8*%ex to i8**
store i8*%ev,i8**%ez,align 8
%eA=load i8*,i8**%j,align 8
%eB=sext i32%W to i64
%eC=getelementptr inbounds i8,i8*%eq,i64%eB
%eD=bitcast i8*%eC to i8**
store i8*%eA,i8**%eD,align 8
br label%eI
eE:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ex,i8*%ev,i32%em,i1 false)
%eF=load i8*,i8**%j,align 8
%eG=sext i32%W to i64
%eH=getelementptr inbounds i8,i8*%eq,i64%eG
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%eH,i8*%eF,i32%em,i1 false)
br label%eI
eI:
%eJ=sext i32%Y to i64
%eK=getelementptr inbounds i8,i8*%eq,i64%eJ
%eL=bitcast i8*%eK to i32*
store i32%ag,i32*%eL,align 4
%eM=load i8*,i8**%l,align 8
store i8*null,i8**%l,align 8
%eN=call fastcc i8*%eh(i8*inreg%eM,i8*inreg%eq)
%eO=bitcast i8*%eN to i32*
%eP=load i32,i32*%eO,align 4
switch i32%eP,label%eQ[
i32 1,label%ho
i32 2,label%fJ
]
eQ:
store i8*null,i8**%f,align 8
%eR=load i8*,i8**%e,align 8
%eS=getelementptr inbounds i8,i8*%eR,i64 16
%eT=bitcast i8*%eS to i8*(i8*,i8*)**
%eU=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%eT,align 8
store i8*null,i8**%e,align 8
%eV=bitcast i8*%eR to i8**
%eW=load i8*,i8**%eV,align 8
%eX=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%eY=call fastcc i8*%eU(i8*inreg%eW,i8*inreg%eX)
%eZ=bitcast i8**%m to i32**
%e0=load i32*,i32**%eZ,align 8
store i8*null,i8**%m,align 8
%e1=load i32,i32*%e0,align 4
%e2=load i8*,i8**%k,align 8
%e3=getelementptr inbounds i8,i8*%e2,i64 20
%e4=bitcast i8*%e3 to i32*
%e5=load i32,i32*%e4,align 4
%e6=getelementptr inbounds i8,i8*%e2,i64 16
%e7=bitcast i8*%e6 to i32*
%e8=load i32,i32*%e7,align 4
%e9=getelementptr inbounds i8,i8*%e2,i64 28
%fa=bitcast i8*%e9 to i32*
%fb=load i32,i32*%fa,align 4
store i8*null,i8**%k,align 8
%fc=getelementptr inbounds i8,i8*%e2,i64 24
%fd=bitcast i8*%fc to i32*
%fe=load i32,i32*%fd,align 4
%ff=call i8*@sml_alloc(i32 inreg%a7)#0
%fg=or i32%aS,1342177280
%fh=bitcast i8*%ff to i32*
%fi=getelementptr inbounds i8,i8*%ff,i64 -4
%fj=bitcast i8*%fi to i32*
store i32%fg,i32*%fj,align 4
call void@llvm.memset.p0i8.i32(i8*%ff,i8 0,i32%a7,i1 false)
store i32%e1,i32*%fh,align 4
%fk=icmp eq i32%e8,0
%fl=load i8*,i8**%j,align 8
%fm=sext i32%B to i64
%fn=getelementptr inbounds i8,i8*%ff,i64%fm
br i1%fk,label%fq,label%fo
fo:
%fp=bitcast i8*%fn to i8**
store i8*%fl,i8**%fp,align 8
br label%fr
fq:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%fn,i8*%fl,i32%e5,i1 false)
br label%fr
fr:
%fs=load i8*,i8**%g,align 8
%ft=getelementptr inbounds i8,i8*%ff,i64%cW
%fu=bitcast i8*%ft to i8**
store i8*%fs,i8**%fu,align 8
%fv=load i8*,i8**%h,align 8
%fw=getelementptr inbounds i8,i8*%ff,i64%c0
%fx=bitcast i8*%fw to i8**
store i8*%fv,i8**%fx,align 8
%fy=icmp eq i32%fe,0
%fz=load i8*,i8**%d,align 8
%fA=sext i32%N to i64
%fB=getelementptr inbounds i8,i8*%ff,i64%fA
br i1%fy,label%fE,label%fC
fC:
%fD=bitcast i8*%fB to i8**
store i8*%fz,i8**%fD,align 8
br label%fF
fE:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%fB,i8*%fz,i32%fb,i1 false)
br label%fF
fF:
%fG=sext i32%aS to i64
%fH=getelementptr inbounds i8,i8*%ff,i64%fG
%fI=bitcast i8*%fH to i32*
store i32%a6,i32*%fI,align 4
ret i8*%ff
fJ:
store i8*null,i8**%m,align 8
%fK=load i8*,i8**%k,align 8
%fL=getelementptr inbounds i8,i8*%fK,i64 8
%fM=bitcast i8*%fL to i8**
%fN=load i8*,i8**%fM,align 8
%fO=getelementptr inbounds i8,i8*%fK,i64 24
%fP=bitcast i8*%fO to i32*
%fQ=load i32,i32*%fP,align 4
%fR=getelementptr inbounds i8,i8*%fK,i64 28
%fS=bitcast i8*%fR to i32*
%fT=load i32,i32*%fS,align 4
%fU=call fastcc i8*@_SMLL2T_G_322(i8*inreg%fN,i32 inreg%fQ,i32 inreg%fT)
%fV=getelementptr inbounds i8,i8*%fU,i64 16
%fW=bitcast i8*%fV to i8*(i8*,i8*)**
%fX=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%fW,align 8
%fY=bitcast i8*%fU to i8**
%fZ=load i8*,i8**%fY,align 8
store i8*%fZ,i8**%l,align 8
%f0=load i8*,i8**%k,align 8
%f1=getelementptr inbounds i8,i8*%f0,i64 20
%f2=bitcast i8*%f1 to i32*
%f3=load i32,i32*%f2,align 4
%f4=getelementptr inbounds i8,i8*%f0,i64 16
%f5=bitcast i8*%f4 to i32*
%f6=load i32,i32*%f5,align 4
%f7=getelementptr inbounds i8,i8*%f0,i64 28
%f8=bitcast i8*%f7 to i32*
%f9=load i32,i32*%f8,align 4
%ga=getelementptr inbounds i8,i8*%f0,i64 24
%gb=bitcast i8*%ga to i32*
%gc=load i32,i32*%gb,align 4
%gd=call i8*@sml_alloc(i32 inreg%au)#0
%ge=or i32%aj,1342177280
%gf=getelementptr inbounds i8,i8*%gd,i64 -4
%gg=bitcast i8*%gf to i32*
store i32%ge,i32*%gg,align 4
call void@llvm.memset.p0i8.i32(i8*%gd,i8 0,i32%au,i1 false)
%gh=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%gi=bitcast i8*%gd to i8**
store i8*%gh,i8**%gi,align 8
%gj=icmp eq i32%f6,0
%gk=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%gl=sext i32%O to i64
%gm=getelementptr inbounds i8,i8*%gd,i64%gl
br i1%gj,label%gp,label%gn
gn:
%go=bitcast i8*%gm to i8**
store i8*%gk,i8**%go,align 8
br label%gq
gp:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%gm,i8*%gk,i32%f3,i1 false)
br label%gq
gq:
%gr=icmp eq i32%gc,0
%gs=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%gt=sext i32%S to i64
%gu=getelementptr inbounds i8,i8*%gd,i64%gt
br i1%gr,label%gx,label%gv
gv:
%gw=bitcast i8*%gu to i8**
store i8*%gs,i8**%gw,align 8
br label%gy
gx:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%gu,i8*%gs,i32%f9,i1 false)
br label%gy
gy:
%gz=sext i32%aj to i64
%gA=getelementptr inbounds i8,i8*%gd,i64%gz
%gB=bitcast i8*%gA to i32*
store i32%at,i32*%gB,align 4
%gC=load i8*,i8**%e,align 8
%gD=load i8*,i8**%k,align 8
store i8*null,i8**%e,align 8
%gE=call fastcc i8*@_SMLL10insertWith_337(i8*inreg%gD,i8*inreg%gC,i8*inreg%gd)
store i8*%gE,i8**%d,align 8
%gF=load i8*,i8**%k,align 8
%gG=getelementptr inbounds i8,i8*%gF,i64 20
%gH=bitcast i8*%gG to i32*
%gI=load i32,i32*%gH,align 4
%gJ=getelementptr inbounds i8,i8*%gF,i64 16
%gK=bitcast i8*%gJ to i32*
%gL=load i32,i32*%gK,align 4
%gM=getelementptr inbounds i8,i8*%gF,i64 28
%gN=bitcast i8*%gM to i32*
%gO=load i32,i32*%gN,align 4
store i8*null,i8**%k,align 8
%gP=getelementptr inbounds i8,i8*%gF,i64 24
%gQ=bitcast i8*%gP to i32*
%gR=load i32,i32*%gQ,align 4
%gS=call i8*@sml_alloc(i32 inreg%aQ)#0
%gT=or i32%aD,1342177280
%gU=getelementptr inbounds i8,i8*%gS,i64 -4
%gV=bitcast i8*%gU to i32*
store i32%gT,i32*%gV,align 4
call void@llvm.memset.p0i8.i32(i8*%gS,i8 0,i32%aQ,i1 false)
%gW=icmp eq i32%gL,0
%gX=load i8*,i8**%f,align 8
%gY=getelementptr inbounds i8,i8*%gS,i64%ew
br i1%gW,label%g1,label%gZ
gZ:
%g0=bitcast i8*%gY to i8**
store i8*%gX,i8**%g0,align 8
br label%g2
g1:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%gY,i8*%gX,i32%gI,i1 false)
br label%g2
g2:
%g3=icmp eq i32%gR,0
%g4=load i8*,i8**%i,align 8
%g5=sext i32%ax to i64
%g6=getelementptr inbounds i8,i8*%gS,i64%g5
br i1%g3,label%g9,label%g7
g7:
%g8=bitcast i8*%g6 to i8**
store i8*%g4,i8**%g8,align 8
br label%ha
g9:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%g6,i8*%g4,i32%gO,i1 false)
br label%ha
ha:
%hb=load i8*,i8**%g,align 8
%hc=sext i32%az to i64
%hd=getelementptr inbounds i8,i8*%gS,i64%hc
%he=bitcast i8*%hd to i8**
store i8*%hb,i8**%he,align 8
%hf=load i8*,i8**%d,align 8
%hg=sext i32%aB to i64
%hh=getelementptr inbounds i8,i8*%gS,i64%hg
%hi=bitcast i8*%hh to i8**
store i8*%hf,i8**%hi,align 8
%hj=sext i32%aD to i64
%hk=getelementptr inbounds i8,i8*%gS,i64%hj
%hl=bitcast i8*%hk to i32*
store i32%aP,i32*%hl,align 4
%hm=load i8*,i8**%l,align 8
%hn=tail call fastcc i8*%fX(i8*inreg%hm,i8*inreg%gS)
ret i8*%hn
ho:
store i8*null,i8**%m,align 8
%hp=load i8*,i8**%k,align 8
%hq=getelementptr inbounds i8,i8*%hp,i64 8
%hr=bitcast i8*%hq to i8**
%hs=load i8*,i8**%hr,align 8
%ht=getelementptr inbounds i8,i8*%hp,i64 24
%hu=bitcast i8*%ht to i32*
%hv=load i32,i32*%hu,align 4
%hw=getelementptr inbounds i8,i8*%hp,i64 28
%hx=bitcast i8*%hw to i32*
%hy=load i32,i32*%hx,align 4
%hz=call fastcc i8*@_SMLL2T_G_322(i8*inreg%hs,i32 inreg%hv,i32 inreg%hy)
%hA=getelementptr inbounds i8,i8*%hz,i64 16
%hB=bitcast i8*%hA to i8*(i8*,i8*)**
%hC=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%hB,align 8
%hD=bitcast i8*%hz to i8**
%hE=load i8*,i8**%hD,align 8
store i8*%hE,i8**%l,align 8
%hF=load i8*,i8**%k,align 8
%hG=getelementptr inbounds i8,i8*%hF,i64 20
%hH=bitcast i8*%hG to i32*
%hI=load i32,i32*%hH,align 4
%hJ=getelementptr inbounds i8,i8*%hF,i64 16
%hK=bitcast i8*%hJ to i32*
%hL=load i32,i32*%hK,align 4
%hM=getelementptr inbounds i8,i8*%hF,i64 28
%hN=bitcast i8*%hM to i32*
%hO=load i32,i32*%hN,align 4
%hP=getelementptr inbounds i8,i8*%hF,i64 24
%hQ=bitcast i8*%hP to i32*
%hR=load i32,i32*%hQ,align 4
%hS=call i8*@sml_alloc(i32 inreg%au)#0
%hT=or i32%aj,1342177280
%hU=getelementptr inbounds i8,i8*%hS,i64 -4
%hV=bitcast i8*%hU to i32*
store i32%hT,i32*%hV,align 4
call void@llvm.memset.p0i8.i32(i8*%hS,i8 0,i32%au,i1 false)
%hW=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%hX=bitcast i8*%hS to i8**
store i8*%hW,i8**%hX,align 8
%hY=icmp eq i32%hL,0
%hZ=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%h0=sext i32%O to i64
%h1=getelementptr inbounds i8,i8*%hS,i64%h0
br i1%hY,label%h4,label%h2
h2:
%h3=bitcast i8*%h1 to i8**
store i8*%hZ,i8**%h3,align 8
br label%h5
h4:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%h1,i8*%hZ,i32%hI,i1 false)
br label%h5
h5:
%h6=icmp eq i32%hR,0
%h7=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%h8=sext i32%S to i64
%h9=getelementptr inbounds i8,i8*%hS,i64%h8
br i1%h6,label%ic,label%ia
ia:
%ib=bitcast i8*%h9 to i8**
store i8*%h7,i8**%ib,align 8
br label%id
ic:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%h9,i8*%h7,i32%hO,i1 false)
br label%id
id:
%ie=sext i32%aj to i64
%if=getelementptr inbounds i8,i8*%hS,i64%ie
%ig=bitcast i8*%if to i32*
store i32%at,i32*%ig,align 4
%ih=load i8*,i8**%e,align 8
%ii=load i8*,i8**%k,align 8
store i8*null,i8**%e,align 8
%ij=call fastcc i8*@_SMLL10insertWith_337(i8*inreg%ii,i8*inreg%ih,i8*inreg%hS)
store i8*%ij,i8**%d,align 8
%ik=load i8*,i8**%k,align 8
%il=getelementptr inbounds i8,i8*%ik,i64 20
%im=bitcast i8*%il to i32*
%in=load i32,i32*%im,align 4
%io=getelementptr inbounds i8,i8*%ik,i64 16
%ip=bitcast i8*%io to i32*
%iq=load i32,i32*%ip,align 4
%ir=getelementptr inbounds i8,i8*%ik,i64 28
%is=bitcast i8*%ir to i32*
%it=load i32,i32*%is,align 4
store i8*null,i8**%k,align 8
%iu=getelementptr inbounds i8,i8*%ik,i64 24
%iv=bitcast i8*%iu to i32*
%iw=load i32,i32*%iv,align 4
%ix=call i8*@sml_alloc(i32 inreg%aQ)#0
%iy=or i32%aD,1342177280
%iz=getelementptr inbounds i8,i8*%ix,i64 -4
%iA=bitcast i8*%iz to i32*
store i32%iy,i32*%iA,align 4
call void@llvm.memset.p0i8.i32(i8*%ix,i8 0,i32%aQ,i1 false)
%iB=icmp eq i32%iq,0
%iC=load i8*,i8**%f,align 8
%iD=getelementptr inbounds i8,i8*%ix,i64%ew
br i1%iB,label%iG,label%iE
iE:
%iF=bitcast i8*%iD to i8**
store i8*%iC,i8**%iF,align 8
br label%iH
iG:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%iD,i8*%iC,i32%in,i1 false)
br label%iH
iH:
%iI=icmp eq i32%iw,0
%iJ=load i8*,i8**%i,align 8
%iK=sext i32%ax to i64
%iL=getelementptr inbounds i8,i8*%ix,i64%iK
br i1%iI,label%iO,label%iM
iM:
%iN=bitcast i8*%iL to i8**
store i8*%iJ,i8**%iN,align 8
br label%iP
iO:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%iL,i8*%iJ,i32%it,i1 false)
br label%iP
iP:
%iQ=load i8*,i8**%d,align 8
%iR=sext i32%az to i64
%iS=getelementptr inbounds i8,i8*%ix,i64%iR
%iT=bitcast i8*%iS to i8**
store i8*%iQ,i8**%iT,align 8
%iU=load i8*,i8**%h,align 8
%iV=sext i32%aB to i64
%iW=getelementptr inbounds i8,i8*%ix,i64%iV
%iX=bitcast i8*%iW to i8**
store i8*%iU,i8**%iX,align 8
%iY=sext i32%aD to i64
%iZ=getelementptr inbounds i8,i8*%ix,i64%iY
%i0=bitcast i8*%iZ to i32*
store i32%aP,i32*%i0,align 4
%i1=load i8*,i8**%l,align 8
%i2=tail call fastcc i8*%hC(i8*inreg%i1,i8*inreg%ix)
ret i8*%i2
}
define internal fastcc i8*@_SMLL10insertWith_338(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=getelementptr inbounds i8,i8*%a,i64 16
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%a,i64 20
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=call i8*@sml_alloc(i32 inreg 36)#0
%s=getelementptr inbounds i8,i8*%r,i64 -4
%t=bitcast i8*%s to i32*
store i32 1342177312,i32*%t,align 4
store i8*%r,i8**%f,align 8
%u=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%v=bitcast i8*%r to i8**
store i8*%u,i8**%v,align 8
%w=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%x=getelementptr inbounds i8,i8*%r,i64 8
%y=bitcast i8*%x to i8**
store i8*%w,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%r,i64 16
%A=bitcast i8*%z to i32*
store i32%n,i32*%A,align 4
%B=getelementptr inbounds i8,i8*%r,i64 20
%C=bitcast i8*%B to i32*
store i32%q,i32*%C,align 4
%D=getelementptr inbounds i8,i8*%r,i64 24
%E=bitcast i8*%D to i32*
store i32%b,i32*%E,align 4
%F=getelementptr inbounds i8,i8*%r,i64 28
%G=bitcast i8*%F to i32*
store i32%c,i32*%G,align 4
%H=getelementptr inbounds i8,i8*%r,i64 32
%I=bitcast i8*%H to i32*
store i32 3,i32*%I,align 4
%J=call i8*@sml_alloc(i32 inreg 28)#0
%K=getelementptr inbounds i8,i8*%J,i64 -4
%L=bitcast i8*%K to i32*
store i32 1342177304,i32*%L,align 4
%M=load i8*,i8**%f,align 8
%N=bitcast i8*%J to i8**
store i8*%M,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%J,i64 8
%P=bitcast i8*%O to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL10insertWith_337 to void(...)*),void(...)**%P,align 8
%Q=getelementptr inbounds i8,i8*%J,i64 16
%R=bitcast i8*%Q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL10insertWith_337 to void(...)*),void(...)**%R,align 8
%S=getelementptr inbounds i8,i8*%J,i64 24
%T=bitcast i8*%S to i32*
store i32 -2147483647,i32*%T,align 4
ret i8*%J
}
define internal fastcc i8*@_SMLL11insertWithi_339(i8*inreg%a,i8*inreg%b,i8*inreg%c)#2 gc"smlsharp"{
u:
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
%k=alloca i8*,align 8
%l=alloca i8*,align 8
%m=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
call void@llvm.gcroot(i8**%k,i8*null)#0
call void@llvm.gcroot(i8**%l,i8*null)#0
call void@llvm.gcroot(i8**%m,i8*null)#0
store i8*%a,i8**%k,align 8
store i8*%b,i8**%e,align 8
store i8*%c,i8**%d,align 8
%n=load atomic i32,i32*@sml_check_flag unordered,align 4
%o=icmp eq i32%n,0
br i1%o,label%s,label%p
p:
call void@sml_check(i32 inreg%n)
%q=load i8*,i8**%d,align 8
%r=load i8*,i8**%k,align 8
br label%s
s:
%t=phi i8*[%r,%p],[%a,%u]
%v=phi i8*[%q,%p],[%c,%u]
%w=getelementptr inbounds i8,i8*%t,i64 20
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=add i32%y,3
%A=sub i32 0,%y
%B=and i32%z,%A
%C=add i32%y,7
%D=add i32%C,%B
%E=and i32%D,-8
%F=add i32%E,15
%G=and i32%F,-8
%H=getelementptr inbounds i8,i8*%t,i64 28
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
%K=add i32%J,7
%L=add i32%K,%G
%M=sub i32 0,%J
%N=and i32%L,%M
%O=and i32%C,%A
%P=add i32%y,-1
%Q=add i32%P,%J
%R=add i32%Q,%O
%S=and i32%R,%M
%T=and i32%P,%A
%U=add i32%T,%y
%V=add i32%P,%U
%W=and i32%V,%A
%X=add i32%C,%W
%Y=and i32%X,-8
%Z=lshr i32%W,3
%aa=lshr i32%T,3
%ab=sub nsw i32%Z,%aa
%ac=getelementptr inbounds i8,i8*%t,i64 16
%ad=bitcast i8*%ac to i32*
%ae=load i32,i32*%ad,align 4
%af=shl i32%ae,%ab
%ag=or i32%af,%ae
%ah=or i32%Y,4
%ai=add i32%K,%S
%aj=and i32%ai,-8
%ak=lshr i32%S,3
%al=lshr i32%O,3
%am=sub nsw i32%ak,%al
%an=getelementptr inbounds i8,i8*%t,i64 24
%ao=bitcast i8*%an to i32*
%ap=load i32,i32*%ao,align 4
%aq=shl i32%ap,%am
%ar=or i32%aq,%ae
%as=shl i32%ar,%al
%at=or i32%as,1
%au=or i32%aj,4
%av=add i32%J,-1
%aw=add i32%av,%U
%ax=and i32%aw,%M
%ay=add i32%K,%ax
%az=and i32%ay,-8
%aA=add i32%az,15
%aB=and i32%aA,-8
%aC=add i32%aB,15
%aD=and i32%aC,-8
%aE=lshr i32%aA,3
%aF=lshr i32%ay,3
%aG=sub nsw i32%aE,%aF
%aH=lshr i32%ax,3
%aI=sub nsw i32%aF,%aH
%aJ=sub nsw i32%aH,%aa
%aK=shl i32 1,%aG
%aL=or i32%aK,1
%aM=shl i32%aL,%aI
%aN=or i32%aM,%ap
%aO=shl i32%aN,%aJ
%aP=or i32%aO,%ae
%aQ=or i32%aD,4
%aR=shl i32%ap,%aJ
%aS=or i32%aR,%ae
%aT=or i32%az,4
%aU=add i32%K,%N
%aV=and i32%aU,-8
%aW=lshr i32%N,3
%aX=lshr i32%F,3
%aY=sub nsw i32%aW,%aX
%aZ=lshr i32%D,3
%a0=sub nsw i32%aX,%aZ
%a1=lshr i32%B,3
%a2=sub nsw i32%aZ,%a1
%a3=shl i32%ap,%aY
%a4=or i32%a3,1
%a5=shl i32%a4,%a0
%a6=or i32%a5,1
%a7=shl i32%a6,%a2
%a8=or i32%a7,%ae
%a9=shl i32%a8,%a1
%ba=or i32%aV,4
%bb=bitcast i8*%v to i8**
%bc=load i8*,i8**%bb,align 8
%bd=icmp eq i8*%bc,null
br i1%bd,label%be,label%cA
be:
%bf=icmp eq i32%ae,0
br i1%bf,label%bl,label%bg
bg:
%bh=sext i32%O to i64
%bi=getelementptr inbounds i8,i8*%v,i64%bh
%bj=bitcast i8*%bi to i8**
%bk=load i8*,i8**%bj,align 8
br label%bs
bl:
%bm=call i8*@sml_alloc(i32 inreg%y)#0
%bn=getelementptr inbounds i8,i8*%bm,i64 -4
%bo=bitcast i8*%bn to i32*
store i32%y,i32*%bo,align 4
%bp=load i8*,i8**%d,align 8
%bq=sext i32%O to i64
%br=getelementptr inbounds i8,i8*%bp,i64%bq
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bm,i8*%br,i32%y,i1 false)
br label%bs
bs:
%bt=phi i8*[%bp,%bl],[%v,%bg]
%bu=phi i8*[%bm,%bl],[%bk,%bg]
store i8*%bu,i8**%e,align 8
%bv=load i8*,i8**%k,align 8
%bw=getelementptr inbounds i8,i8*%bv,i64 24
%bx=bitcast i8*%bw to i32*
%by=load i32,i32*%bx,align 4
%bz=icmp eq i32%by,0
br i1%bz,label%bF,label%bA
bA:
store i8*null,i8**%d,align 8
%bB=sext i32%S to i64
%bC=getelementptr inbounds i8,i8*%bt,i64%bB
%bD=bitcast i8*%bC to i8**
%bE=load i8*,i8**%bD,align 8
br label%bT
bF:
%bG=getelementptr inbounds i8,i8*%bv,i64 28
%bH=bitcast i8*%bG to i32*
%bI=load i32,i32*%bH,align 4
%bJ=call i8*@sml_alloc(i32 inreg%bI)#0
%bK=getelementptr inbounds i8,i8*%bJ,i64 -4
%bL=bitcast i8*%bK to i32*
store i32%bI,i32*%bL,align 4
%bM=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bN=sext i32%S to i64
%bO=getelementptr inbounds i8,i8*%bM,i64%bN
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bJ,i8*%bO,i32%bI,i1 false)
%bP=load i8*,i8**%k,align 8
%bQ=getelementptr inbounds i8,i8*%bP,i64 24
%bR=bitcast i8*%bQ to i32*
%bS=load i32,i32*%bR,align 4
br label%bT
bT:
%bU=phi i32[%bS,%bF],[%by,%bA]
%bV=phi i8*[%bP,%bF],[%bv,%bA]
%bW=phi i8*[%bJ,%bF],[%bE,%bA]
store i8*%bW,i8**%d,align 8
%bX=getelementptr inbounds i8,i8*%bV,i64 20
%bY=bitcast i8*%bX to i32*
%bZ=load i32,i32*%bY,align 4
%b0=getelementptr inbounds i8,i8*%bV,i64 16
%b1=bitcast i8*%b0 to i32*
%b2=load i32,i32*%b1,align 4
%b3=getelementptr inbounds i8,i8*%bV,i64 28
%b4=bitcast i8*%b3 to i32*
%b5=load i32,i32*%b4,align 4
store i8*null,i8**%k,align 8
%b6=call i8*@sml_alloc(i32 inreg%ba)#0
%b7=or i32%aV,1342177280
%b8=bitcast i8*%b6 to i32*
%b9=getelementptr inbounds i8,i8*%b6,i64 -4
%ca=bitcast i8*%b9 to i32*
store i32%b7,i32*%ca,align 4
call void@llvm.memset.p0i8.i32(i8*%b6,i8 0,i32%ba,i1 false)
store i32 1,i32*%b8,align 4
%cb=icmp eq i32%b2,0
%cc=load i8*,i8**%e,align 8
%cd=sext i32%B to i64
%ce=getelementptr inbounds i8,i8*%b6,i64%cd
br i1%cb,label%ch,label%cf
cf:
%cg=bitcast i8*%ce to i8**
store i8*%cc,i8**%cg,align 8
br label%ci
ch:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ce,i8*%cc,i32%bZ,i1 false)
br label%ci
ci:
%cj=sext i32%E to i64
%ck=getelementptr inbounds i8,i8*%b6,i64%cj
%cl=bitcast i8*%ck to i8**
store i8*null,i8**%cl,align 8
%cm=sext i32%G to i64
%cn=getelementptr inbounds i8,i8*%b6,i64%cm
%co=bitcast i8*%cn to i8**
store i8*null,i8**%co,align 8
%cp=icmp eq i32%bU,0
%cq=load i8*,i8**%d,align 8
%cr=sext i32%N to i64
%cs=getelementptr inbounds i8,i8*%b6,i64%cr
br i1%cp,label%cv,label%ct
ct:
%cu=bitcast i8*%cs to i8**
store i8*%cq,i8**%cu,align 8
br label%cw
cv:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cs,i8*%cq,i32%b5,i1 false)
br label%cw
cw:
%cx=sext i32%aV to i64
%cy=getelementptr inbounds i8,i8*%b6,i64%cx
%cz=bitcast i8*%cy to i32*
store i32%a9,i32*%cz,align 4
ret i8*%b6
cA:
store i8*%bc,i8**%m,align 8
%cB=icmp eq i32%ae,0
br i1%cB,label%cH,label%cC
cC:
%cD=sext i32%B to i64
%cE=getelementptr inbounds i8,i8*%bc,i64%cD
%cF=bitcast i8*%cE to i8**
%cG=load i8*,i8**%cF,align 8
br label%cS
cH:
%cI=call i8*@sml_alloc(i32 inreg%y)#0
%cJ=getelementptr inbounds i8,i8*%cI,i64 -4
%cK=bitcast i8*%cJ to i32*
store i32%y,i32*%cK,align 4
%cL=load i8*,i8**%m,align 8
%cM=sext i32%B to i64
%cN=getelementptr inbounds i8,i8*%cL,i64%cM
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cI,i8*%cN,i32%y,i1 false)
%cO=load i8*,i8**%k,align 8
%cP=getelementptr inbounds i8,i8*%cO,i64 24
%cQ=bitcast i8*%cP to i32*
%cR=load i32,i32*%cQ,align 4
br label%cS
cS:
%cT=phi i8*[%cO,%cH],[%t,%cC]
%cU=phi i32[%cR,%cH],[%ap,%cC]
%cV=phi i8*[%cL,%cH],[%bc,%cC]
%cW=phi i8*[%cI,%cH],[%cG,%cC]
store i8*%cW,i8**%f,align 8
%cX=sext i32%E to i64
%cY=getelementptr inbounds i8,i8*%cV,i64%cX
%cZ=bitcast i8*%cY to i8**
%c0=load i8*,i8**%cZ,align 8
store i8*%c0,i8**%g,align 8
%c1=sext i32%G to i64
%c2=getelementptr inbounds i8,i8*%cV,i64%c1
%c3=bitcast i8*%c2 to i8**
%c4=load i8*,i8**%c3,align 8
store i8*%c4,i8**%h,align 8
%c5=icmp eq i32%cU,0
br i1%c5,label%db,label%c6
c6:
%c7=sext i32%N to i64
%c8=getelementptr inbounds i8,i8*%cV,i64%c7
%c9=bitcast i8*%c8 to i8**
%da=load i8*,i8**%c9,align 8
br label%dm
db:
%dc=getelementptr inbounds i8,i8*%cT,i64 28
%dd=bitcast i8*%dc to i32*
%de=load i32,i32*%dd,align 4
%df=call i8*@sml_alloc(i32 inreg%de)#0
%dg=getelementptr inbounds i8,i8*%df,i64 -4
%dh=bitcast i8*%dg to i32*
store i32%de,i32*%dh,align 4
%di=load i8*,i8**%m,align 8
%dj=sext i32%N to i64
%dk=getelementptr inbounds i8,i8*%di,i64%dj
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%df,i8*%dk,i32%de,i1 false)
%dl=load i8*,i8**%k,align 8
br label%dm
dm:
%dn=phi i8*[%dl,%db],[%cT,%c6]
%do=phi i8*[%df,%db],[%da,%c6]
store i8*%do,i8**%i,align 8
%dp=getelementptr inbounds i8,i8*%dn,i64 16
%dq=bitcast i8*%dp to i32*
%dr=load i32,i32*%dq,align 4
%ds=icmp eq i32%dr,0
br i1%ds,label%dz,label%dt
dt:
%du=load i8*,i8**%d,align 8
%dv=sext i32%O to i64
%dw=getelementptr inbounds i8,i8*%du,i64%dv
%dx=bitcast i8*%dw to i8**
%dy=load i8*,i8**%dx,align 8
br label%dK
dz:
%dA=getelementptr inbounds i8,i8*%dn,i64 20
%dB=bitcast i8*%dA to i32*
%dC=load i32,i32*%dB,align 4
%dD=call i8*@sml_alloc(i32 inreg%dC)#0
%dE=getelementptr inbounds i8,i8*%dD,i64 -4
%dF=bitcast i8*%dE to i32*
store i32%dC,i32*%dF,align 4
%dG=load i8*,i8**%d,align 8
%dH=sext i32%O to i64
%dI=getelementptr inbounds i8,i8*%dG,i64%dH
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dD,i8*%dI,i32%dC,i1 false)
%dJ=load i8*,i8**%k,align 8
br label%dK
dK:
%dL=phi i8*[%dJ,%dz],[%dn,%dt]
%dM=phi i8*[%dG,%dz],[%du,%dt]
%dN=phi i8*[%dD,%dz],[%dy,%dt]
store i8*%dN,i8**%j,align 8
%dO=getelementptr inbounds i8,i8*%dL,i64 24
%dP=bitcast i8*%dO to i32*
%dQ=load i32,i32*%dP,align 4
%dR=icmp eq i32%dQ,0
br i1%dR,label%dZ,label%dS
dS:
%dT=bitcast i8*%dL to i8**
store i8*null,i8**%d,align 8
%dU=sext i32%S to i64
%dV=getelementptr inbounds i8,i8*%dM,i64%dU
%dW=bitcast i8*%dV to i8**
%dX=load i8*,i8**%dW,align 8
%dY=load i8*,i8**%k,align 8
br label%ec
dZ:
%d0=getelementptr inbounds i8,i8*%dL,i64 28
%d1=bitcast i8*%d0 to i32*
%d2=load i32,i32*%d1,align 4
%d3=call i8*@sml_alloc(i32 inreg%d2)#0
%d4=getelementptr inbounds i8,i8*%d3,i64 -4
%d5=bitcast i8*%d4 to i32*
store i32%d2,i32*%d5,align 4
%d6=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%d7=sext i32%S to i64
%d8=getelementptr inbounds i8,i8*%d6,i64%d7
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%d3,i8*%d8,i32%d2,i1 false)
%d9=bitcast i8**%k to i8***
%ea=load i8**,i8***%d9,align 8
%eb=bitcast i8**%ea to i8*
br label%ec
ec:
%ed=phi i8*[%eb,%dZ],[%dY,%dS]
%ee=phi i8**[%ea,%dZ],[%dT,%dS]
%ef=phi i8*[%d3,%dZ],[%dX,%dS]
store i8*%ef,i8**%d,align 8
%eg=load i8*,i8**%ee,align 8
%eh=getelementptr inbounds i8,i8*%eg,i64 16
%ei=bitcast i8*%eh to i8*(i8*,i8*)**
%ej=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ei,align 8
%ek=bitcast i8*%eg to i8**
%el=load i8*,i8**%ek,align 8
store i8*%el,i8**%l,align 8
%em=getelementptr inbounds i8,i8*%ed,i64 20
%en=bitcast i8*%em to i32*
%eo=load i32,i32*%en,align 4
%ep=getelementptr inbounds i8,i8*%ed,i64 16
%eq=bitcast i8*%ep to i32*
%er=load i32,i32*%eq,align 4
%es=call i8*@sml_alloc(i32 inreg%ah)#0
%et=or i32%Y,1342177280
%eu=getelementptr inbounds i8,i8*%es,i64 -4
%ev=bitcast i8*%eu to i32*
store i32%et,i32*%ev,align 4
call void@llvm.memset.p0i8.i32(i8*%es,i8 0,i32%ah,i1 false)
%ew=icmp eq i32%er,0
%ex=load i8*,i8**%f,align 8
%ey=sext i32%T to i64
%ez=getelementptr inbounds i8,i8*%es,i64%ey
br i1%ew,label%eG,label%eA
eA:
%eB=bitcast i8*%ez to i8**
store i8*%ex,i8**%eB,align 8
%eC=load i8*,i8**%j,align 8
%eD=sext i32%W to i64
%eE=getelementptr inbounds i8,i8*%es,i64%eD
%eF=bitcast i8*%eE to i8**
store i8*%eC,i8**%eF,align 8
br label%eK
eG:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ez,i8*%ex,i32%eo,i1 false)
%eH=load i8*,i8**%j,align 8
%eI=sext i32%W to i64
%eJ=getelementptr inbounds i8,i8*%es,i64%eI
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%eJ,i8*%eH,i32%eo,i1 false)
br label%eK
eK:
%eL=sext i32%Y to i64
%eM=getelementptr inbounds i8,i8*%es,i64%eL
%eN=bitcast i8*%eM to i32*
store i32%ag,i32*%eN,align 4
%eO=load i8*,i8**%l,align 8
store i8*null,i8**%l,align 8
%eP=call fastcc i8*%ej(i8*inreg%eO,i8*inreg%es)
%eQ=bitcast i8*%eP to i32*
%eR=load i32,i32*%eQ,align 4
switch i32%eR,label%eS[
i32 1,label%hZ
i32 2,label%gk
]
eS:
%eT=load i8*,i8**%e,align 8
%eU=getelementptr inbounds i8,i8*%eT,i64 16
%eV=bitcast i8*%eU to i8*(i8*,i8*)**
%eW=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%eV,align 8
%eX=bitcast i8*%eT to i8**
%eY=load i8*,i8**%eX,align 8
store i8*%eY,i8**%e,align 8
%eZ=load i8*,i8**%k,align 8
%e0=getelementptr inbounds i8,i8*%eZ,i64 20
%e1=bitcast i8*%e0 to i32*
%e2=load i32,i32*%e1,align 4
%e3=getelementptr inbounds i8,i8*%eZ,i64 16
%e4=bitcast i8*%e3 to i32*
%e5=load i32,i32*%e4,align 4
%e6=getelementptr inbounds i8,i8*%eZ,i64 28
%e7=bitcast i8*%e6 to i32*
%e8=load i32,i32*%e7,align 4
%e9=getelementptr inbounds i8,i8*%eZ,i64 24
%fa=bitcast i8*%e9 to i32*
%fb=load i32,i32*%fa,align 4
%fc=call i8*@sml_alloc(i32 inreg%aT)#0
%fd=or i32%az,1342177280
%fe=getelementptr inbounds i8,i8*%fc,i64 -4
%ff=bitcast i8*%fe to i32*
store i32%fd,i32*%ff,align 4
call void@llvm.memset.p0i8.i32(i8*%fc,i8 0,i32%aT,i1 false)
%fg=icmp eq i32%e5,0
%fh=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%fi=getelementptr inbounds i8,i8*%fc,i64%ey
br i1%fg,label%fl,label%fj
fj:
%fk=bitcast i8*%fi to i8**
store i8*%fh,i8**%fk,align 8
br label%fm
fl:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%fi,i8*%fh,i32%e2,i1 false)
br label%fm
fm:
%fn=icmp eq i32%fb,0
%fo=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%fp=sext i32%ax to i64
%fq=getelementptr inbounds i8,i8*%fc,i64%fp
br i1%fn,label%ft,label%fr
fr:
%fs=bitcast i8*%fq to i8**
store i8*%fo,i8**%fs,align 8
br label%fu
ft:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%fq,i8*%fo,i32%e8,i1 false)
br label%fu
fu:
%fv=sext i32%az to i64
%fw=getelementptr inbounds i8,i8*%fc,i64%fv
%fx=bitcast i8*%fw to i32*
store i32%aS,i32*%fx,align 4
%fy=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%fz=call fastcc i8*%eW(i8*inreg%fy,i8*inreg%fc)
%fA=bitcast i8**%m to i32**
%fB=load i32*,i32**%fA,align 8
store i8*null,i8**%m,align 8
%fC=load i32,i32*%fB,align 4
%fD=load i8*,i8**%k,align 8
%fE=getelementptr inbounds i8,i8*%fD,i64 20
%fF=bitcast i8*%fE to i32*
%fG=load i32,i32*%fF,align 4
%fH=getelementptr inbounds i8,i8*%fD,i64 16
%fI=bitcast i8*%fH to i32*
%fJ=load i32,i32*%fI,align 4
%fK=getelementptr inbounds i8,i8*%fD,i64 28
%fL=bitcast i8*%fK to i32*
%fM=load i32,i32*%fL,align 4
store i8*null,i8**%k,align 8
%fN=getelementptr inbounds i8,i8*%fD,i64 24
%fO=bitcast i8*%fN to i32*
%fP=load i32,i32*%fO,align 4
%fQ=call i8*@sml_alloc(i32 inreg%ba)#0
%fR=or i32%aV,1342177280
%fS=bitcast i8*%fQ to i32*
%fT=getelementptr inbounds i8,i8*%fQ,i64 -4
%fU=bitcast i8*%fT to i32*
store i32%fR,i32*%fU,align 4
call void@llvm.memset.p0i8.i32(i8*%fQ,i8 0,i32%ba,i1 false)
store i32%fC,i32*%fS,align 4
%fV=icmp eq i32%fJ,0
%fW=load i8*,i8**%j,align 8
%fX=sext i32%B to i64
%fY=getelementptr inbounds i8,i8*%fQ,i64%fX
br i1%fV,label%f1,label%fZ
fZ:
%f0=bitcast i8*%fY to i8**
store i8*%fW,i8**%f0,align 8
br label%f2
f1:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%fY,i8*%fW,i32%fG,i1 false)
br label%f2
f2:
%f3=load i8*,i8**%g,align 8
%f4=getelementptr inbounds i8,i8*%fQ,i64%cX
%f5=bitcast i8*%f4 to i8**
store i8*%f3,i8**%f5,align 8
%f6=load i8*,i8**%h,align 8
%f7=getelementptr inbounds i8,i8*%fQ,i64%c1
%f8=bitcast i8*%f7 to i8**
store i8*%f6,i8**%f8,align 8
%f9=icmp eq i32%fP,0
%ga=load i8*,i8**%d,align 8
%gb=sext i32%N to i64
%gc=getelementptr inbounds i8,i8*%fQ,i64%gb
br i1%f9,label%gf,label%gd
gd:
%ge=bitcast i8*%gc to i8**
store i8*%ga,i8**%ge,align 8
br label%gg
gf:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%gc,i8*%ga,i32%fM,i1 false)
br label%gg
gg:
%gh=sext i32%aV to i64
%gi=getelementptr inbounds i8,i8*%fQ,i64%gh
%gj=bitcast i8*%gi to i32*
store i32%a9,i32*%gj,align 4
ret i8*%fQ
gk:
store i8*null,i8**%m,align 8
%gl=load i8*,i8**%k,align 8
%gm=getelementptr inbounds i8,i8*%gl,i64 8
%gn=bitcast i8*%gm to i8**
%go=load i8*,i8**%gn,align 8
%gp=getelementptr inbounds i8,i8*%gl,i64 24
%gq=bitcast i8*%gp to i32*
%gr=load i32,i32*%gq,align 4
%gs=getelementptr inbounds i8,i8*%gl,i64 28
%gt=bitcast i8*%gs to i32*
%gu=load i32,i32*%gt,align 4
%gv=call fastcc i8*@_SMLL2T_G_322(i8*inreg%go,i32 inreg%gr,i32 inreg%gu)
%gw=getelementptr inbounds i8,i8*%gv,i64 16
%gx=bitcast i8*%gw to i8*(i8*,i8*)**
%gy=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%gx,align 8
%gz=bitcast i8*%gv to i8**
%gA=load i8*,i8**%gz,align 8
store i8*%gA,i8**%l,align 8
%gB=load i8*,i8**%k,align 8
%gC=getelementptr inbounds i8,i8*%gB,i64 20
%gD=bitcast i8*%gC to i32*
%gE=load i32,i32*%gD,align 4
%gF=getelementptr inbounds i8,i8*%gB,i64 16
%gG=bitcast i8*%gF to i32*
%gH=load i32,i32*%gG,align 4
%gI=getelementptr inbounds i8,i8*%gB,i64 28
%gJ=bitcast i8*%gI to i32*
%gK=load i32,i32*%gJ,align 4
%gL=getelementptr inbounds i8,i8*%gB,i64 24
%gM=bitcast i8*%gL to i32*
%gN=load i32,i32*%gM,align 4
%gO=call i8*@sml_alloc(i32 inreg%au)#0
%gP=or i32%aj,1342177280
%gQ=getelementptr inbounds i8,i8*%gO,i64 -4
%gR=bitcast i8*%gQ to i32*
store i32%gP,i32*%gR,align 4
call void@llvm.memset.p0i8.i32(i8*%gO,i8 0,i32%au,i1 false)
%gS=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%gT=bitcast i8*%gO to i8**
store i8*%gS,i8**%gT,align 8
%gU=icmp eq i32%gH,0
%gV=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%gW=sext i32%O to i64
%gX=getelementptr inbounds i8,i8*%gO,i64%gW
br i1%gU,label%g0,label%gY
gY:
%gZ=bitcast i8*%gX to i8**
store i8*%gV,i8**%gZ,align 8
br label%g1
g0:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%gX,i8*%gV,i32%gE,i1 false)
br label%g1
g1:
%g2=icmp eq i32%gN,0
%g3=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%g4=sext i32%S to i64
%g5=getelementptr inbounds i8,i8*%gO,i64%g4
br i1%g2,label%g8,label%g6
g6:
%g7=bitcast i8*%g5 to i8**
store i8*%g3,i8**%g7,align 8
br label%g9
g8:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%g5,i8*%g3,i32%gK,i1 false)
br label%g9
g9:
%ha=sext i32%aj to i64
%hb=getelementptr inbounds i8,i8*%gO,i64%ha
%hc=bitcast i8*%hb to i32*
store i32%at,i32*%hc,align 4
%hd=load i8*,i8**%e,align 8
%he=load i8*,i8**%k,align 8
store i8*null,i8**%e,align 8
%hf=call fastcc i8*@_SMLL11insertWithi_339(i8*inreg%he,i8*inreg%hd,i8*inreg%gO)
store i8*%hf,i8**%d,align 8
%hg=load i8*,i8**%k,align 8
%hh=getelementptr inbounds i8,i8*%hg,i64 20
%hi=bitcast i8*%hh to i32*
%hj=load i32,i32*%hi,align 4
%hk=getelementptr inbounds i8,i8*%hg,i64 16
%hl=bitcast i8*%hk to i32*
%hm=load i32,i32*%hl,align 4
%hn=getelementptr inbounds i8,i8*%hg,i64 28
%ho=bitcast i8*%hn to i32*
%hp=load i32,i32*%ho,align 4
store i8*null,i8**%k,align 8
%hq=getelementptr inbounds i8,i8*%hg,i64 24
%hr=bitcast i8*%hq to i32*
%hs=load i32,i32*%hr,align 4
%ht=call i8*@sml_alloc(i32 inreg%aQ)#0
%hu=or i32%aD,1342177280
%hv=getelementptr inbounds i8,i8*%ht,i64 -4
%hw=bitcast i8*%hv to i32*
store i32%hu,i32*%hw,align 4
call void@llvm.memset.p0i8.i32(i8*%ht,i8 0,i32%aQ,i1 false)
%hx=icmp eq i32%hm,0
%hy=load i8*,i8**%f,align 8
%hz=getelementptr inbounds i8,i8*%ht,i64%ey
br i1%hx,label%hC,label%hA
hA:
%hB=bitcast i8*%hz to i8**
store i8*%hy,i8**%hB,align 8
br label%hD
hC:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%hz,i8*%hy,i32%hj,i1 false)
br label%hD
hD:
%hE=icmp eq i32%hs,0
%hF=load i8*,i8**%i,align 8
%hG=sext i32%ax to i64
%hH=getelementptr inbounds i8,i8*%ht,i64%hG
br i1%hE,label%hK,label%hI
hI:
%hJ=bitcast i8*%hH to i8**
store i8*%hF,i8**%hJ,align 8
br label%hL
hK:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%hH,i8*%hF,i32%hp,i1 false)
br label%hL
hL:
%hM=load i8*,i8**%g,align 8
%hN=sext i32%az to i64
%hO=getelementptr inbounds i8,i8*%ht,i64%hN
%hP=bitcast i8*%hO to i8**
store i8*%hM,i8**%hP,align 8
%hQ=load i8*,i8**%d,align 8
%hR=sext i32%aB to i64
%hS=getelementptr inbounds i8,i8*%ht,i64%hR
%hT=bitcast i8*%hS to i8**
store i8*%hQ,i8**%hT,align 8
%hU=sext i32%aD to i64
%hV=getelementptr inbounds i8,i8*%ht,i64%hU
%hW=bitcast i8*%hV to i32*
store i32%aP,i32*%hW,align 4
%hX=load i8*,i8**%l,align 8
%hY=tail call fastcc i8*%gy(i8*inreg%hX,i8*inreg%ht)
ret i8*%hY
hZ:
store i8*null,i8**%m,align 8
%h0=load i8*,i8**%k,align 8
%h1=getelementptr inbounds i8,i8*%h0,i64 8
%h2=bitcast i8*%h1 to i8**
%h3=load i8*,i8**%h2,align 8
%h4=getelementptr inbounds i8,i8*%h0,i64 24
%h5=bitcast i8*%h4 to i32*
%h6=load i32,i32*%h5,align 4
%h7=getelementptr inbounds i8,i8*%h0,i64 28
%h8=bitcast i8*%h7 to i32*
%h9=load i32,i32*%h8,align 4
%ia=call fastcc i8*@_SMLL2T_G_322(i8*inreg%h3,i32 inreg%h6,i32 inreg%h9)
%ib=getelementptr inbounds i8,i8*%ia,i64 16
%ic=bitcast i8*%ib to i8*(i8*,i8*)**
%id=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ic,align 8
%ie=bitcast i8*%ia to i8**
%if=load i8*,i8**%ie,align 8
store i8*%if,i8**%l,align 8
%ig=load i8*,i8**%k,align 8
%ih=getelementptr inbounds i8,i8*%ig,i64 20
%ii=bitcast i8*%ih to i32*
%ij=load i32,i32*%ii,align 4
%ik=getelementptr inbounds i8,i8*%ig,i64 16
%il=bitcast i8*%ik to i32*
%im=load i32,i32*%il,align 4
%in=getelementptr inbounds i8,i8*%ig,i64 28
%io=bitcast i8*%in to i32*
%ip=load i32,i32*%io,align 4
%iq=getelementptr inbounds i8,i8*%ig,i64 24
%ir=bitcast i8*%iq to i32*
%is=load i32,i32*%ir,align 4
%it=call i8*@sml_alloc(i32 inreg%au)#0
%iu=or i32%aj,1342177280
%iv=getelementptr inbounds i8,i8*%it,i64 -4
%iw=bitcast i8*%iv to i32*
store i32%iu,i32*%iw,align 4
call void@llvm.memset.p0i8.i32(i8*%it,i8 0,i32%au,i1 false)
%ix=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%iy=bitcast i8*%it to i8**
store i8*%ix,i8**%iy,align 8
%iz=icmp eq i32%im,0
%iA=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%iB=sext i32%O to i64
%iC=getelementptr inbounds i8,i8*%it,i64%iB
br i1%iz,label%iF,label%iD
iD:
%iE=bitcast i8*%iC to i8**
store i8*%iA,i8**%iE,align 8
br label%iG
iF:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%iC,i8*%iA,i32%ij,i1 false)
br label%iG
iG:
%iH=icmp eq i32%is,0
%iI=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%iJ=sext i32%S to i64
%iK=getelementptr inbounds i8,i8*%it,i64%iJ
br i1%iH,label%iN,label%iL
iL:
%iM=bitcast i8*%iK to i8**
store i8*%iI,i8**%iM,align 8
br label%iO
iN:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%iK,i8*%iI,i32%ip,i1 false)
br label%iO
iO:
%iP=sext i32%aj to i64
%iQ=getelementptr inbounds i8,i8*%it,i64%iP
%iR=bitcast i8*%iQ to i32*
store i32%at,i32*%iR,align 4
%iS=load i8*,i8**%e,align 8
%iT=load i8*,i8**%k,align 8
store i8*null,i8**%e,align 8
%iU=call fastcc i8*@_SMLL11insertWithi_339(i8*inreg%iT,i8*inreg%iS,i8*inreg%it)
store i8*%iU,i8**%d,align 8
%iV=load i8*,i8**%k,align 8
%iW=getelementptr inbounds i8,i8*%iV,i64 20
%iX=bitcast i8*%iW to i32*
%iY=load i32,i32*%iX,align 4
%iZ=getelementptr inbounds i8,i8*%iV,i64 16
%i0=bitcast i8*%iZ to i32*
%i1=load i32,i32*%i0,align 4
%i2=getelementptr inbounds i8,i8*%iV,i64 28
%i3=bitcast i8*%i2 to i32*
%i4=load i32,i32*%i3,align 4
store i8*null,i8**%k,align 8
%i5=getelementptr inbounds i8,i8*%iV,i64 24
%i6=bitcast i8*%i5 to i32*
%i7=load i32,i32*%i6,align 4
%i8=call i8*@sml_alloc(i32 inreg%aQ)#0
%i9=or i32%aD,1342177280
%ja=getelementptr inbounds i8,i8*%i8,i64 -4
%jb=bitcast i8*%ja to i32*
store i32%i9,i32*%jb,align 4
call void@llvm.memset.p0i8.i32(i8*%i8,i8 0,i32%aQ,i1 false)
%jc=icmp eq i32%i1,0
%jd=load i8*,i8**%f,align 8
%je=getelementptr inbounds i8,i8*%i8,i64%ey
br i1%jc,label%jh,label%jf
jf:
%jg=bitcast i8*%je to i8**
store i8*%jd,i8**%jg,align 8
br label%ji
jh:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%je,i8*%jd,i32%iY,i1 false)
br label%ji
ji:
%jj=icmp eq i32%i7,0
%jk=load i8*,i8**%i,align 8
%jl=sext i32%ax to i64
%jm=getelementptr inbounds i8,i8*%i8,i64%jl
br i1%jj,label%jp,label%jn
jn:
%jo=bitcast i8*%jm to i8**
store i8*%jk,i8**%jo,align 8
br label%jq
jp:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%jm,i8*%jk,i32%i4,i1 false)
br label%jq
jq:
%jr=load i8*,i8**%d,align 8
%js=sext i32%az to i64
%jt=getelementptr inbounds i8,i8*%i8,i64%js
%ju=bitcast i8*%jt to i8**
store i8*%jr,i8**%ju,align 8
%jv=load i8*,i8**%h,align 8
%jw=sext i32%aB to i64
%jx=getelementptr inbounds i8,i8*%i8,i64%jw
%jy=bitcast i8*%jx to i8**
store i8*%jv,i8**%jy,align 8
%jz=sext i32%aD to i64
%jA=getelementptr inbounds i8,i8*%i8,i64%jz
%jB=bitcast i8*%jA to i32*
store i32%aP,i32*%jB,align 4
%jC=load i8*,i8**%l,align 8
%jD=tail call fastcc i8*%id(i8*inreg%jC,i8*inreg%i8)
ret i8*%jD
}
define internal fastcc i8*@_SMLL11insertWithi_340(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=getelementptr inbounds i8,i8*%a,i64 16
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%a,i64 20
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=call i8*@sml_alloc(i32 inreg 36)#0
%s=getelementptr inbounds i8,i8*%r,i64 -4
%t=bitcast i8*%s to i32*
store i32 1342177312,i32*%t,align 4
store i8*%r,i8**%f,align 8
%u=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%v=bitcast i8*%r to i8**
store i8*%u,i8**%v,align 8
%w=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%x=getelementptr inbounds i8,i8*%r,i64 8
%y=bitcast i8*%x to i8**
store i8*%w,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%r,i64 16
%A=bitcast i8*%z to i32*
store i32%n,i32*%A,align 4
%B=getelementptr inbounds i8,i8*%r,i64 20
%C=bitcast i8*%B to i32*
store i32%q,i32*%C,align 4
%D=getelementptr inbounds i8,i8*%r,i64 24
%E=bitcast i8*%D to i32*
store i32%b,i32*%E,align 4
%F=getelementptr inbounds i8,i8*%r,i64 28
%G=bitcast i8*%F to i32*
store i32%c,i32*%G,align 4
%H=getelementptr inbounds i8,i8*%r,i64 32
%I=bitcast i8*%H to i32*
store i32 3,i32*%I,align 4
%J=call i8*@sml_alloc(i32 inreg 28)#0
%K=getelementptr inbounds i8,i8*%J,i64 -4
%L=bitcast i8*%K to i32*
store i32 1342177304,i32*%L,align 4
%M=load i8*,i8**%f,align 8
%N=bitcast i8*%J to i8**
store i8*%M,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%J,i64 8
%P=bitcast i8*%O to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL11insertWithi_339 to void(...)*),void(...)**%P,align 8
%Q=getelementptr inbounds i8,i8*%J,i64 16
%R=bitcast i8*%Q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL11insertWithi_339 to void(...)*),void(...)**%R,align 8
%S=getelementptr inbounds i8,i8*%J,i64 24
%T=bitcast i8*%S to i32*
store i32 -2147483647,i32*%T,align 4
ret i8*%J
}
define internal fastcc i8*@_SMLL12insertWithi2_341(i8*inreg%a,i8*inreg%b,i8*inreg%c)#2 gc"smlsharp"{
u:
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
%k=alloca i8*,align 8
%l=alloca i8*,align 8
%m=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
call void@llvm.gcroot(i8**%k,i8*null)#0
call void@llvm.gcroot(i8**%l,i8*null)#0
call void@llvm.gcroot(i8**%m,i8*null)#0
store i8*%a,i8**%k,align 8
store i8*%b,i8**%e,align 8
store i8*%c,i8**%d,align 8
%n=load atomic i32,i32*@sml_check_flag unordered,align 4
%o=icmp eq i32%n,0
br i1%o,label%s,label%p
p:
call void@sml_check(i32 inreg%n)
%q=load i8*,i8**%d,align 8
%r=load i8*,i8**%k,align 8
br label%s
s:
%t=phi i8*[%r,%p],[%a,%u]
%v=phi i8*[%q,%p],[%c,%u]
%w=getelementptr inbounds i8,i8*%t,i64 20
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=add i32%y,3
%A=sub i32 0,%y
%B=and i32%z,%A
%C=add i32%y,7
%D=add i32%C,%B
%E=and i32%D,-8
%F=add i32%E,15
%G=and i32%F,-8
%H=getelementptr inbounds i8,i8*%t,i64 28
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
%K=add i32%J,7
%L=add i32%K,%G
%M=sub i32 0,%J
%N=and i32%L,%M
%O=and i32%C,%A
%P=add i32%J,-1
%Q=add i32%P,%y
%R=add i32%Q,%O
%S=and i32%R,%M
%T=add i32%y,-1
%U=and i32%T,%A
%V=add i32%U,%y
%W=add i32%T,%V
%X=and i32%W,%A
%Y=add i32%C,%X
%Z=and i32%Y,-8
%aa=lshr i32%X,3
%ab=lshr i32%U,3
%ac=sub nsw i32%aa,%ab
%ad=getelementptr inbounds i8,i8*%t,i64 16
%ae=bitcast i8*%ad to i32*
%af=load i32,i32*%ae,align 4
%ag=shl i32%af,%ac
%ah=or i32%ag,%af
%ai=or i32%Z,4
%aj=add i32%K,%S
%ak=and i32%aj,-8
%al=lshr i32%S,3
%am=lshr i32%O,3
%an=sub nsw i32%al,%am
%ao=getelementptr inbounds i8,i8*%t,i64 24
%ap=bitcast i8*%ao to i32*
%aq=load i32,i32*%ap,align 4
%ar=shl i32%aq,%an
%as=or i32%ar,%af
%at=shl i32%as,%am
%au=or i32%at,1
%av=or i32%ak,4
%aw=add i32%P,%V
%ax=and i32%aw,%M
%ay=add i32%ax,%J
%az=add i32%ay,7
%aA=and i32%az,-8
%aB=add i32%aA,15
%aC=and i32%aB,-8
%aD=add i32%aC,15
%aE=and i32%aD,-8
%aF=lshr i32%aB,3
%aG=lshr i32%az,3
%aH=sub nsw i32%aF,%aG
%aI=lshr i32%ax,3
%aJ=sub nsw i32%aG,%aI
%aK=sub nsw i32%aI,%ab
%aL=shl i32 1,%aH
%aM=or i32%aL,1
%aN=shl i32%aM,%aJ
%aO=or i32%aN,%aq
%aP=shl i32%aO,%aK
%aQ=or i32%aP,%af
%aR=or i32%aE,4
%aS=add i32%P,%ay
%aT=and i32%aS,%M
%aU=add i32%K,%aT
%aV=and i32%aU,-8
%aW=lshr i32%aT,3
%aX=sub nsw i32%aW,%aI
%aY=shl i32%aq,%aX
%aZ=or i32%aY,%aq
%a0=shl i32%aZ,%aK
%a1=or i32%a0,%af
%a2=or i32%aV,4
%a3=add i32%K,%N
%a4=and i32%a3,-8
%a5=lshr i32%N,3
%a6=lshr i32%F,3
%a7=sub nsw i32%a5,%a6
%a8=lshr i32%D,3
%a9=sub nsw i32%a6,%a8
%ba=lshr i32%B,3
%bb=sub nsw i32%a8,%ba
%bc=shl i32%aq,%a7
%bd=or i32%bc,1
%be=shl i32%bd,%a9
%bf=or i32%be,1
%bg=shl i32%bf,%bb
%bh=or i32%bg,%af
%bi=shl i32%bh,%ba
%bj=or i32%a4,4
%bk=bitcast i8*%v to i8**
%bl=load i8*,i8**%bk,align 8
%bm=icmp eq i8*%bl,null
br i1%bm,label%bn,label%cJ
bn:
%bo=icmp eq i32%af,0
br i1%bo,label%bu,label%bp
bp:
%bq=sext i32%O to i64
%br=getelementptr inbounds i8,i8*%v,i64%bq
%bs=bitcast i8*%br to i8**
%bt=load i8*,i8**%bs,align 8
br label%bB
bu:
%bv=call i8*@sml_alloc(i32 inreg%y)#0
%bw=getelementptr inbounds i8,i8*%bv,i64 -4
%bx=bitcast i8*%bw to i32*
store i32%y,i32*%bx,align 4
%by=load i8*,i8**%d,align 8
%bz=sext i32%O to i64
%bA=getelementptr inbounds i8,i8*%by,i64%bz
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bv,i8*%bA,i32%y,i1 false)
br label%bB
bB:
%bC=phi i8*[%bv,%bu],[%bt,%bp]
store i8*%bC,i8**%e,align 8
%bD=load i8*,i8**%k,align 8
%bE=getelementptr inbounds i8,i8*%bD,i64 24
%bF=bitcast i8*%bE to i32*
%bG=load i32,i32*%bF,align 4
%bH=icmp eq i32%bG,0
br i1%bH,label%bO,label%bI
bI:
%bJ=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bK=sext i32%S to i64
%bL=getelementptr inbounds i8,i8*%bJ,i64%bK
%bM=bitcast i8*%bL to i8**
%bN=load i8*,i8**%bM,align 8
br label%b2
bO:
%bP=getelementptr inbounds i8,i8*%bD,i64 28
%bQ=bitcast i8*%bP to i32*
%bR=load i32,i32*%bQ,align 4
%bS=call i8*@sml_alloc(i32 inreg%bR)#0
%bT=getelementptr inbounds i8,i8*%bS,i64 -4
%bU=bitcast i8*%bT to i32*
store i32%bR,i32*%bU,align 4
%bV=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bW=sext i32%S to i64
%bX=getelementptr inbounds i8,i8*%bV,i64%bW
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bS,i8*%bX,i32%bR,i1 false)
%bY=load i8*,i8**%k,align 8
%bZ=getelementptr inbounds i8,i8*%bY,i64 24
%b0=bitcast i8*%bZ to i32*
%b1=load i32,i32*%b0,align 4
br label%b2
b2:
%b3=phi i32[%b1,%bO],[%bG,%bI]
%b4=phi i8*[%bY,%bO],[%bD,%bI]
%b5=phi i8*[%bS,%bO],[%bN,%bI]
store i8*%b5,i8**%d,align 8
%b6=getelementptr inbounds i8,i8*%b4,i64 20
%b7=bitcast i8*%b6 to i32*
%b8=load i32,i32*%b7,align 4
%b9=getelementptr inbounds i8,i8*%b4,i64 16
%ca=bitcast i8*%b9 to i32*
%cb=load i32,i32*%ca,align 4
%cc=getelementptr inbounds i8,i8*%b4,i64 28
%cd=bitcast i8*%cc to i32*
%ce=load i32,i32*%cd,align 4
store i8*null,i8**%k,align 8
%cf=call i8*@sml_alloc(i32 inreg%bj)#0
%cg=or i32%a4,1342177280
%ch=bitcast i8*%cf to i32*
%ci=getelementptr inbounds i8,i8*%cf,i64 -4
%cj=bitcast i8*%ci to i32*
store i32%cg,i32*%cj,align 4
call void@llvm.memset.p0i8.i32(i8*%cf,i8 0,i32%bj,i1 false)
store i32 1,i32*%ch,align 4
%ck=icmp eq i32%cb,0
%cl=load i8*,i8**%e,align 8
%cm=sext i32%B to i64
%cn=getelementptr inbounds i8,i8*%cf,i64%cm
br i1%ck,label%cq,label%co
co:
%cp=bitcast i8*%cn to i8**
store i8*%cl,i8**%cp,align 8
br label%cr
cq:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cn,i8*%cl,i32%b8,i1 false)
br label%cr
cr:
%cs=sext i32%E to i64
%ct=getelementptr inbounds i8,i8*%cf,i64%cs
%cu=bitcast i8*%ct to i8**
store i8*null,i8**%cu,align 8
%cv=sext i32%G to i64
%cw=getelementptr inbounds i8,i8*%cf,i64%cv
%cx=bitcast i8*%cw to i8**
store i8*null,i8**%cx,align 8
%cy=icmp eq i32%b3,0
%cz=load i8*,i8**%d,align 8
%cA=sext i32%N to i64
%cB=getelementptr inbounds i8,i8*%cf,i64%cA
br i1%cy,label%cE,label%cC
cC:
%cD=bitcast i8*%cB to i8**
store i8*%cz,i8**%cD,align 8
br label%cF
cE:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cB,i8*%cz,i32%ce,i1 false)
br label%cF
cF:
%cG=sext i32%a4 to i64
%cH=getelementptr inbounds i8,i8*%cf,i64%cG
%cI=bitcast i8*%cH to i32*
store i32%bi,i32*%cI,align 4
ret i8*%cf
cJ:
store i8*%bl,i8**%m,align 8
%cK=icmp eq i32%af,0
br i1%cK,label%cQ,label%cL
cL:
%cM=sext i32%B to i64
%cN=getelementptr inbounds i8,i8*%bl,i64%cM
%cO=bitcast i8*%cN to i8**
%cP=load i8*,i8**%cO,align 8
br label%cX
cQ:
%cR=call i8*@sml_alloc(i32 inreg%y)#0
%cS=getelementptr inbounds i8,i8*%cR,i64 -4
%cT=bitcast i8*%cS to i32*
store i32%y,i32*%cT,align 4
%cU=load i8*,i8**%m,align 8
%cV=sext i32%B to i64
%cW=getelementptr inbounds i8,i8*%cU,i64%cV
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cR,i8*%cW,i32%y,i1 false)
br label%cX
cX:
%cY=phi i8*[%cU,%cQ],[%bl,%cL]
%cZ=phi i8*[%cR,%cQ],[%cP,%cL]
store i8*%cZ,i8**%f,align 8
%c0=sext i32%E to i64
%c1=getelementptr inbounds i8,i8*%cY,i64%c0
%c2=bitcast i8*%c1 to i8**
%c3=load i8*,i8**%c2,align 8
store i8*%c3,i8**%g,align 8
%c4=sext i32%G to i64
%c5=getelementptr inbounds i8,i8*%cY,i64%c4
%c6=bitcast i8*%c5 to i8**
%c7=load i8*,i8**%c6,align 8
store i8*%c7,i8**%h,align 8
%c8=load i8*,i8**%k,align 8
%c9=getelementptr inbounds i8,i8*%c8,i64 24
%da=bitcast i8*%c9 to i32*
%db=load i32,i32*%da,align 4
%dc=icmp eq i32%db,0
br i1%dc,label%di,label%dd
dd:
%de=sext i32%N to i64
%df=getelementptr inbounds i8,i8*%cY,i64%de
%dg=bitcast i8*%df to i8**
%dh=load i8*,i8**%dg,align 8
br label%dt
di:
%dj=getelementptr inbounds i8,i8*%c8,i64 28
%dk=bitcast i8*%dj to i32*
%dl=load i32,i32*%dk,align 4
%dm=call i8*@sml_alloc(i32 inreg%dl)#0
%dn=getelementptr inbounds i8,i8*%dm,i64 -4
%do=bitcast i8*%dn to i32*
store i32%dl,i32*%do,align 4
%dp=load i8*,i8**%m,align 8
%dq=sext i32%N to i64
%dr=getelementptr inbounds i8,i8*%dp,i64%dq
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dm,i8*%dr,i32%dl,i1 false)
%ds=load i8*,i8**%k,align 8
br label%dt
dt:
%du=phi i8*[%ds,%di],[%c8,%dd]
%dv=phi i8*[%dm,%di],[%dh,%dd]
store i8*%dv,i8**%i,align 8
%dw=getelementptr inbounds i8,i8*%du,i64 16
%dx=bitcast i8*%dw to i32*
%dy=load i32,i32*%dx,align 4
%dz=icmp eq i32%dy,0
br i1%dz,label%dG,label%dA
dA:
%dB=load i8*,i8**%d,align 8
%dC=sext i32%O to i64
%dD=getelementptr inbounds i8,i8*%dB,i64%dC
%dE=bitcast i8*%dD to i8**
%dF=load i8*,i8**%dE,align 8
br label%dR
dG:
%dH=getelementptr inbounds i8,i8*%du,i64 20
%dI=bitcast i8*%dH to i32*
%dJ=load i32,i32*%dI,align 4
%dK=call i8*@sml_alloc(i32 inreg%dJ)#0
%dL=getelementptr inbounds i8,i8*%dK,i64 -4
%dM=bitcast i8*%dL to i32*
store i32%dJ,i32*%dM,align 4
%dN=load i8*,i8**%d,align 8
%dO=sext i32%O to i64
%dP=getelementptr inbounds i8,i8*%dN,i64%dO
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dK,i8*%dP,i32%dJ,i1 false)
%dQ=load i8*,i8**%k,align 8
br label%dR
dR:
%dS=phi i8*[%dQ,%dG],[%du,%dA]
%dT=phi i8*[%dN,%dG],[%dB,%dA]
%dU=phi i8*[%dK,%dG],[%dF,%dA]
store i8*%dU,i8**%j,align 8
%dV=getelementptr inbounds i8,i8*%dS,i64 24
%dW=bitcast i8*%dV to i32*
%dX=load i32,i32*%dW,align 4
%dY=icmp eq i32%dX,0
br i1%dY,label%d5,label%dZ
dZ:
%d0=bitcast i8*%dS to i8**
store i8*null,i8**%d,align 8
%d1=sext i32%S to i64
%d2=getelementptr inbounds i8,i8*%dT,i64%d1
%d3=bitcast i8*%d2 to i8**
%d4=load i8*,i8**%d3,align 8
br label%ei
d5:
%d6=getelementptr inbounds i8,i8*%dS,i64 28
%d7=bitcast i8*%d6 to i32*
%d8=load i32,i32*%d7,align 4
%d9=call i8*@sml_alloc(i32 inreg%d8)#0
%ea=getelementptr inbounds i8,i8*%d9,i64 -4
%eb=bitcast i8*%ea to i32*
store i32%d8,i32*%eb,align 4
%ec=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ed=sext i32%S to i64
%ee=getelementptr inbounds i8,i8*%ec,i64%ed
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%d9,i8*%ee,i32%d8,i1 false)
%ef=bitcast i8**%k to i8***
%eg=load i8**,i8***%ef,align 8
%eh=bitcast i8**%eg to i8*
br label%ei
ei:
%ej=phi i8*[%eh,%d5],[%dS,%dZ]
%ek=phi i8**[%eg,%d5],[%d0,%dZ]
%el=phi i8*[%d9,%d5],[%d4,%dZ]
store i8*%el,i8**%d,align 8
%em=load i8*,i8**%ek,align 8
%en=getelementptr inbounds i8,i8*%em,i64 16
%eo=bitcast i8*%en to i8*(i8*,i8*)**
%ep=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%eo,align 8
%eq=bitcast i8*%em to i8**
%er=load i8*,i8**%eq,align 8
store i8*%er,i8**%l,align 8
%es=getelementptr inbounds i8,i8*%ej,i64 20
%et=bitcast i8*%es to i32*
%eu=load i32,i32*%et,align 4
%ev=getelementptr inbounds i8,i8*%ej,i64 16
%ew=bitcast i8*%ev to i32*
%ex=load i32,i32*%ew,align 4
%ey=call i8*@sml_alloc(i32 inreg%ai)#0
%ez=or i32%Z,1342177280
%eA=getelementptr inbounds i8,i8*%ey,i64 -4
%eB=bitcast i8*%eA to i32*
store i32%ez,i32*%eB,align 4
call void@llvm.memset.p0i8.i32(i8*%ey,i8 0,i32%ai,i1 false)
%eC=icmp eq i32%ex,0
%eD=load i8*,i8**%f,align 8
%eE=sext i32%U to i64
%eF=getelementptr inbounds i8,i8*%ey,i64%eE
br i1%eC,label%eM,label%eG
eG:
%eH=bitcast i8*%eF to i8**
store i8*%eD,i8**%eH,align 8
%eI=load i8*,i8**%j,align 8
%eJ=sext i32%X to i64
%eK=getelementptr inbounds i8,i8*%ey,i64%eJ
%eL=bitcast i8*%eK to i8**
store i8*%eI,i8**%eL,align 8
br label%eQ
eM:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%eF,i8*%eD,i32%eu,i1 false)
%eN=load i8*,i8**%j,align 8
%eO=sext i32%X to i64
%eP=getelementptr inbounds i8,i8*%ey,i64%eO
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%eP,i8*%eN,i32%eu,i1 false)
br label%eQ
eQ:
%eR=sext i32%Z to i64
%eS=getelementptr inbounds i8,i8*%ey,i64%eR
%eT=bitcast i8*%eS to i32*
store i32%ah,i32*%eT,align 4
%eU=load i8*,i8**%l,align 8
store i8*null,i8**%l,align 8
%eV=call fastcc i8*%ep(i8*inreg%eU,i8*inreg%ey)
%eW=bitcast i8*%eV to i32*
%eX=load i32,i32*%eW,align 4
switch i32%eX,label%eY[
i32 1,label%ic
i32 2,label%gx
]
eY:
%eZ=load i8*,i8**%e,align 8
%e0=getelementptr inbounds i8,i8*%eZ,i64 16
%e1=bitcast i8*%e0 to i8*(i8*,i8*)**
%e2=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%e1,align 8
%e3=bitcast i8*%eZ to i8**
%e4=load i8*,i8**%e3,align 8
store i8*%e4,i8**%e,align 8
%e5=load i8*,i8**%k,align 8
%e6=getelementptr inbounds i8,i8*%e5,i64 20
%e7=bitcast i8*%e6 to i32*
%e8=load i32,i32*%e7,align 4
%e9=getelementptr inbounds i8,i8*%e5,i64 16
%fa=bitcast i8*%e9 to i32*
%fb=load i32,i32*%fa,align 4
%fc=getelementptr inbounds i8,i8*%e5,i64 28
%fd=bitcast i8*%fc to i32*
%fe=load i32,i32*%fd,align 4
%ff=getelementptr inbounds i8,i8*%e5,i64 24
%fg=bitcast i8*%ff to i32*
%fh=load i32,i32*%fg,align 4
%fi=call i8*@sml_alloc(i32 inreg%a2)#0
%fj=or i32%aV,1342177280
%fk=getelementptr inbounds i8,i8*%fi,i64 -4
%fl=bitcast i8*%fk to i32*
store i32%fj,i32*%fl,align 4
call void@llvm.memset.p0i8.i32(i8*%fi,i8 0,i32%a2,i1 false)
%fm=icmp eq i32%fb,0
%fn=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%fo=getelementptr inbounds i8,i8*%fi,i64%eE
br i1%fm,label%fr,label%fp
fp:
%fq=bitcast i8*%fo to i8**
store i8*%fn,i8**%fq,align 8
br label%fs
fr:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%fo,i8*%fn,i32%e8,i1 false)
br label%fs
fs:
%ft=icmp eq i32%fh,0
%fu=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%fv=sext i32%ax to i64
%fw=getelementptr inbounds i8,i8*%fi,i64%fv
br i1%ft,label%fD,label%fx
fx:
%fy=bitcast i8*%fw to i8**
store i8*%fu,i8**%fy,align 8
%fz=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%fA=sext i32%aT to i64
%fB=getelementptr inbounds i8,i8*%fi,i64%fA
%fC=bitcast i8*%fB to i8**
store i8*%fz,i8**%fC,align 8
br label%fH
fD:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%fw,i8*%fu,i32%fe,i1 false)
%fE=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%fF=sext i32%aT to i64
%fG=getelementptr inbounds i8,i8*%fi,i64%fF
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%fG,i8*%fE,i32%fe,i1 false)
br label%fH
fH:
%fI=sext i32%aV to i64
%fJ=getelementptr inbounds i8,i8*%fi,i64%fI
%fK=bitcast i8*%fJ to i32*
store i32%a1,i32*%fK,align 4
%fL=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%fM=call fastcc i8*%e2(i8*inreg%fL,i8*inreg%fi)
store i8*%fM,i8**%d,align 8
%fN=bitcast i8**%m to i32**
%fO=load i32*,i32**%fN,align 8
store i8*null,i8**%m,align 8
%fP=load i32,i32*%fO,align 4
%fQ=load i8*,i8**%k,align 8
%fR=getelementptr inbounds i8,i8*%fQ,i64 20
%fS=bitcast i8*%fR to i32*
%fT=load i32,i32*%fS,align 4
%fU=getelementptr inbounds i8,i8*%fQ,i64 16
%fV=bitcast i8*%fU to i32*
%fW=load i32,i32*%fV,align 4
%fX=getelementptr inbounds i8,i8*%fQ,i64 28
%fY=bitcast i8*%fX to i32*
%fZ=load i32,i32*%fY,align 4
store i8*null,i8**%k,align 8
%f0=getelementptr inbounds i8,i8*%fQ,i64 24
%f1=bitcast i8*%f0 to i32*
%f2=load i32,i32*%f1,align 4
%f3=call i8*@sml_alloc(i32 inreg%bj)#0
%f4=or i32%a4,1342177280
%f5=bitcast i8*%f3 to i32*
%f6=getelementptr inbounds i8,i8*%f3,i64 -4
%f7=bitcast i8*%f6 to i32*
store i32%f4,i32*%f7,align 4
call void@llvm.memset.p0i8.i32(i8*%f3,i8 0,i32%bj,i1 false)
store i32%fP,i32*%f5,align 4
%f8=icmp eq i32%fW,0
%f9=load i8*,i8**%j,align 8
%ga=sext i32%B to i64
%gb=getelementptr inbounds i8,i8*%f3,i64%ga
br i1%f8,label%ge,label%gc
gc:
%gd=bitcast i8*%gb to i8**
store i8*%f9,i8**%gd,align 8
br label%gf
ge:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%gb,i8*%f9,i32%fT,i1 false)
br label%gf
gf:
%gg=load i8*,i8**%g,align 8
%gh=getelementptr inbounds i8,i8*%f3,i64%c0
%gi=bitcast i8*%gh to i8**
store i8*%gg,i8**%gi,align 8
%gj=load i8*,i8**%h,align 8
%gk=getelementptr inbounds i8,i8*%f3,i64%c4
%gl=bitcast i8*%gk to i8**
store i8*%gj,i8**%gl,align 8
%gm=icmp eq i32%f2,0
%gn=load i8*,i8**%d,align 8
%go=sext i32%N to i64
%gp=getelementptr inbounds i8,i8*%f3,i64%go
br i1%gm,label%gs,label%gq
gq:
%gr=bitcast i8*%gp to i8**
store i8*%gn,i8**%gr,align 8
br label%gt
gs:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%gp,i8*%gn,i32%fZ,i1 false)
br label%gt
gt:
%gu=sext i32%a4 to i64
%gv=getelementptr inbounds i8,i8*%f3,i64%gu
%gw=bitcast i8*%gv to i32*
store i32%bi,i32*%gw,align 4
ret i8*%f3
gx:
store i8*null,i8**%m,align 8
%gy=load i8*,i8**%k,align 8
%gz=getelementptr inbounds i8,i8*%gy,i64 8
%gA=bitcast i8*%gz to i8**
%gB=load i8*,i8**%gA,align 8
%gC=getelementptr inbounds i8,i8*%gy,i64 24
%gD=bitcast i8*%gC to i32*
%gE=load i32,i32*%gD,align 4
%gF=getelementptr inbounds i8,i8*%gy,i64 28
%gG=bitcast i8*%gF to i32*
%gH=load i32,i32*%gG,align 4
%gI=call fastcc i8*@_SMLL2T_G_322(i8*inreg%gB,i32 inreg%gE,i32 inreg%gH)
%gJ=getelementptr inbounds i8,i8*%gI,i64 16
%gK=bitcast i8*%gJ to i8*(i8*,i8*)**
%gL=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%gK,align 8
%gM=bitcast i8*%gI to i8**
%gN=load i8*,i8**%gM,align 8
store i8*%gN,i8**%l,align 8
%gO=load i8*,i8**%k,align 8
%gP=getelementptr inbounds i8,i8*%gO,i64 20
%gQ=bitcast i8*%gP to i32*
%gR=load i32,i32*%gQ,align 4
%gS=getelementptr inbounds i8,i8*%gO,i64 16
%gT=bitcast i8*%gS to i32*
%gU=load i32,i32*%gT,align 4
%gV=getelementptr inbounds i8,i8*%gO,i64 28
%gW=bitcast i8*%gV to i32*
%gX=load i32,i32*%gW,align 4
%gY=getelementptr inbounds i8,i8*%gO,i64 24
%gZ=bitcast i8*%gY to i32*
%g0=load i32,i32*%gZ,align 4
%g1=call i8*@sml_alloc(i32 inreg%av)#0
%g2=or i32%ak,1342177280
%g3=getelementptr inbounds i8,i8*%g1,i64 -4
%g4=bitcast i8*%g3 to i32*
store i32%g2,i32*%g4,align 4
call void@llvm.memset.p0i8.i32(i8*%g1,i8 0,i32%av,i1 false)
%g5=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%g6=bitcast i8*%g1 to i8**
store i8*%g5,i8**%g6,align 8
%g7=icmp eq i32%gU,0
%g8=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%g9=sext i32%O to i64
%ha=getelementptr inbounds i8,i8*%g1,i64%g9
br i1%g7,label%hd,label%hb
hb:
%hc=bitcast i8*%ha to i8**
store i8*%g8,i8**%hc,align 8
br label%he
hd:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ha,i8*%g8,i32%gR,i1 false)
br label%he
he:
%hf=icmp eq i32%g0,0
%hg=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%hh=sext i32%S to i64
%hi=getelementptr inbounds i8,i8*%g1,i64%hh
br i1%hf,label%hl,label%hj
hj:
%hk=bitcast i8*%hi to i8**
store i8*%hg,i8**%hk,align 8
br label%hm
hl:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%hi,i8*%hg,i32%gX,i1 false)
br label%hm
hm:
%hn=sext i32%ak to i64
%ho=getelementptr inbounds i8,i8*%g1,i64%hn
%hp=bitcast i8*%ho to i32*
store i32%au,i32*%hp,align 4
%hq=load i8*,i8**%e,align 8
%hr=load i8*,i8**%k,align 8
store i8*null,i8**%e,align 8
%hs=call fastcc i8*@_SMLL12insertWithi2_341(i8*inreg%hr,i8*inreg%hq,i8*inreg%g1)
store i8*%hs,i8**%d,align 8
%ht=load i8*,i8**%k,align 8
%hu=getelementptr inbounds i8,i8*%ht,i64 20
%hv=bitcast i8*%hu to i32*
%hw=load i32,i32*%hv,align 4
%hx=getelementptr inbounds i8,i8*%ht,i64 16
%hy=bitcast i8*%hx to i32*
%hz=load i32,i32*%hy,align 4
%hA=getelementptr inbounds i8,i8*%ht,i64 28
%hB=bitcast i8*%hA to i32*
%hC=load i32,i32*%hB,align 4
store i8*null,i8**%k,align 8
%hD=getelementptr inbounds i8,i8*%ht,i64 24
%hE=bitcast i8*%hD to i32*
%hF=load i32,i32*%hE,align 4
%hG=call i8*@sml_alloc(i32 inreg%aR)#0
%hH=or i32%aE,1342177280
%hI=getelementptr inbounds i8,i8*%hG,i64 -4
%hJ=bitcast i8*%hI to i32*
store i32%hH,i32*%hJ,align 4
call void@llvm.memset.p0i8.i32(i8*%hG,i8 0,i32%aR,i1 false)
%hK=icmp eq i32%hz,0
%hL=load i8*,i8**%f,align 8
%hM=getelementptr inbounds i8,i8*%hG,i64%eE
br i1%hK,label%hP,label%hN
hN:
%hO=bitcast i8*%hM to i8**
store i8*%hL,i8**%hO,align 8
br label%hQ
hP:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%hM,i8*%hL,i32%hw,i1 false)
br label%hQ
hQ:
%hR=icmp eq i32%hF,0
%hS=load i8*,i8**%i,align 8
%hT=sext i32%ax to i64
%hU=getelementptr inbounds i8,i8*%hG,i64%hT
br i1%hR,label%hX,label%hV
hV:
%hW=bitcast i8*%hU to i8**
store i8*%hS,i8**%hW,align 8
br label%hY
hX:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%hU,i8*%hS,i32%hC,i1 false)
br label%hY
hY:
%hZ=load i8*,i8**%g,align 8
%h0=sext i32%aA to i64
%h1=getelementptr inbounds i8,i8*%hG,i64%h0
%h2=bitcast i8*%h1 to i8**
store i8*%hZ,i8**%h2,align 8
%h3=load i8*,i8**%d,align 8
%h4=sext i32%aC to i64
%h5=getelementptr inbounds i8,i8*%hG,i64%h4
%h6=bitcast i8*%h5 to i8**
store i8*%h3,i8**%h6,align 8
%h7=sext i32%aE to i64
%h8=getelementptr inbounds i8,i8*%hG,i64%h7
%h9=bitcast i8*%h8 to i32*
store i32%aQ,i32*%h9,align 4
%ia=load i8*,i8**%l,align 8
%ib=tail call fastcc i8*%gL(i8*inreg%ia,i8*inreg%hG)
ret i8*%ib
ic:
store i8*null,i8**%m,align 8
%id=load i8*,i8**%k,align 8
%ie=getelementptr inbounds i8,i8*%id,i64 8
%if=bitcast i8*%ie to i8**
%ig=load i8*,i8**%if,align 8
%ih=getelementptr inbounds i8,i8*%id,i64 24
%ii=bitcast i8*%ih to i32*
%ij=load i32,i32*%ii,align 4
%ik=getelementptr inbounds i8,i8*%id,i64 28
%il=bitcast i8*%ik to i32*
%im=load i32,i32*%il,align 4
%in=call fastcc i8*@_SMLL2T_G_322(i8*inreg%ig,i32 inreg%ij,i32 inreg%im)
%io=getelementptr inbounds i8,i8*%in,i64 16
%ip=bitcast i8*%io to i8*(i8*,i8*)**
%iq=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ip,align 8
%ir=bitcast i8*%in to i8**
%is=load i8*,i8**%ir,align 8
store i8*%is,i8**%l,align 8
%it=load i8*,i8**%k,align 8
%iu=getelementptr inbounds i8,i8*%it,i64 20
%iv=bitcast i8*%iu to i32*
%iw=load i32,i32*%iv,align 4
%ix=getelementptr inbounds i8,i8*%it,i64 16
%iy=bitcast i8*%ix to i32*
%iz=load i32,i32*%iy,align 4
%iA=getelementptr inbounds i8,i8*%it,i64 28
%iB=bitcast i8*%iA to i32*
%iC=load i32,i32*%iB,align 4
%iD=getelementptr inbounds i8,i8*%it,i64 24
%iE=bitcast i8*%iD to i32*
%iF=load i32,i32*%iE,align 4
%iG=call i8*@sml_alloc(i32 inreg%av)#0
%iH=or i32%ak,1342177280
%iI=getelementptr inbounds i8,i8*%iG,i64 -4
%iJ=bitcast i8*%iI to i32*
store i32%iH,i32*%iJ,align 4
call void@llvm.memset.p0i8.i32(i8*%iG,i8 0,i32%av,i1 false)
%iK=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%iL=bitcast i8*%iG to i8**
store i8*%iK,i8**%iL,align 8
%iM=icmp eq i32%iz,0
%iN=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%iO=sext i32%O to i64
%iP=getelementptr inbounds i8,i8*%iG,i64%iO
br i1%iM,label%iS,label%iQ
iQ:
%iR=bitcast i8*%iP to i8**
store i8*%iN,i8**%iR,align 8
br label%iT
iS:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%iP,i8*%iN,i32%iw,i1 false)
br label%iT
iT:
%iU=icmp eq i32%iF,0
%iV=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%iW=sext i32%S to i64
%iX=getelementptr inbounds i8,i8*%iG,i64%iW
br i1%iU,label%i0,label%iY
iY:
%iZ=bitcast i8*%iX to i8**
store i8*%iV,i8**%iZ,align 8
br label%i1
i0:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%iX,i8*%iV,i32%iC,i1 false)
br label%i1
i1:
%i2=sext i32%ak to i64
%i3=getelementptr inbounds i8,i8*%iG,i64%i2
%i4=bitcast i8*%i3 to i32*
store i32%au,i32*%i4,align 4
%i5=load i8*,i8**%e,align 8
%i6=load i8*,i8**%k,align 8
store i8*null,i8**%e,align 8
%i7=call fastcc i8*@_SMLL12insertWithi2_341(i8*inreg%i6,i8*inreg%i5,i8*inreg%iG)
store i8*%i7,i8**%d,align 8
%i8=load i8*,i8**%k,align 8
%i9=getelementptr inbounds i8,i8*%i8,i64 20
%ja=bitcast i8*%i9 to i32*
%jb=load i32,i32*%ja,align 4
%jc=getelementptr inbounds i8,i8*%i8,i64 16
%jd=bitcast i8*%jc to i32*
%je=load i32,i32*%jd,align 4
%jf=getelementptr inbounds i8,i8*%i8,i64 28
%jg=bitcast i8*%jf to i32*
%jh=load i32,i32*%jg,align 4
store i8*null,i8**%k,align 8
%ji=getelementptr inbounds i8,i8*%i8,i64 24
%jj=bitcast i8*%ji to i32*
%jk=load i32,i32*%jj,align 4
%jl=call i8*@sml_alloc(i32 inreg%aR)#0
%jm=or i32%aE,1342177280
%jn=getelementptr inbounds i8,i8*%jl,i64 -4
%jo=bitcast i8*%jn to i32*
store i32%jm,i32*%jo,align 4
call void@llvm.memset.p0i8.i32(i8*%jl,i8 0,i32%aR,i1 false)
%jp=icmp eq i32%je,0
%jq=load i8*,i8**%f,align 8
%jr=getelementptr inbounds i8,i8*%jl,i64%eE
br i1%jp,label%ju,label%js
js:
%jt=bitcast i8*%jr to i8**
store i8*%jq,i8**%jt,align 8
br label%jv
ju:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%jr,i8*%jq,i32%jb,i1 false)
br label%jv
jv:
%jw=icmp eq i32%jk,0
%jx=load i8*,i8**%i,align 8
%jy=sext i32%ax to i64
%jz=getelementptr inbounds i8,i8*%jl,i64%jy
br i1%jw,label%jC,label%jA
jA:
%jB=bitcast i8*%jz to i8**
store i8*%jx,i8**%jB,align 8
br label%jD
jC:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%jz,i8*%jx,i32%jh,i1 false)
br label%jD
jD:
%jE=load i8*,i8**%d,align 8
%jF=sext i32%aA to i64
%jG=getelementptr inbounds i8,i8*%jl,i64%jF
%jH=bitcast i8*%jG to i8**
store i8*%jE,i8**%jH,align 8
%jI=load i8*,i8**%h,align 8
%jJ=sext i32%aC to i64
%jK=getelementptr inbounds i8,i8*%jl,i64%jJ
%jL=bitcast i8*%jK to i8**
store i8*%jI,i8**%jL,align 8
%jM=sext i32%aE to i64
%jN=getelementptr inbounds i8,i8*%jl,i64%jM
%jO=bitcast i8*%jN to i32*
store i32%aQ,i32*%jO,align 4
%jP=load i8*,i8**%l,align 8
%jQ=tail call fastcc i8*%iq(i8*inreg%jP,i8*inreg%jl)
ret i8*%jQ
}
define internal fastcc i8*@_SMLL12insertWithi2_342(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=getelementptr inbounds i8,i8*%a,i64 16
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%a,i64 20
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=call i8*@sml_alloc(i32 inreg 36)#0
%s=getelementptr inbounds i8,i8*%r,i64 -4
%t=bitcast i8*%s to i32*
store i32 1342177312,i32*%t,align 4
store i8*%r,i8**%f,align 8
%u=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%v=bitcast i8*%r to i8**
store i8*%u,i8**%v,align 8
%w=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%x=getelementptr inbounds i8,i8*%r,i64 8
%y=bitcast i8*%x to i8**
store i8*%w,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%r,i64 16
%A=bitcast i8*%z to i32*
store i32%n,i32*%A,align 4
%B=getelementptr inbounds i8,i8*%r,i64 20
%C=bitcast i8*%B to i32*
store i32%q,i32*%C,align 4
%D=getelementptr inbounds i8,i8*%r,i64 24
%E=bitcast i8*%D to i32*
store i32%b,i32*%E,align 4
%F=getelementptr inbounds i8,i8*%r,i64 28
%G=bitcast i8*%F to i32*
store i32%c,i32*%G,align 4
%H=getelementptr inbounds i8,i8*%r,i64 32
%I=bitcast i8*%H to i32*
store i32 3,i32*%I,align 4
%J=call i8*@sml_alloc(i32 inreg 28)#0
%K=getelementptr inbounds i8,i8*%J,i64 -4
%L=bitcast i8*%K to i32*
store i32 1342177304,i32*%L,align 4
%M=load i8*,i8**%f,align 8
%N=bitcast i8*%J to i8**
store i8*%M,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%J,i64 8
%P=bitcast i8*%O to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL12insertWithi2_341 to void(...)*),void(...)**%P,align 8
%Q=getelementptr inbounds i8,i8*%J,i64 16
%R=bitcast i8*%Q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL12insertWithi2_341 to void(...)*),void(...)**%R,align 8
%S=getelementptr inbounds i8,i8*%J,i64 24
%T=bitcast i8*%S to i32*
store i32 -2147483647,i32*%T,align 4
ret i8*%J
}
define internal fastcc i32@_SMLL3mem_343(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%e,align 8
%h=bitcast i8**%e to i8***
br label%i
i:
%j=phi i8*[%bN,%bH],[%b,%k]
store i8*%j,i8**%c,align 8
%l=load atomic i32,i32*@sml_check_flag unordered,align 4
%m=icmp eq i32%l,0
br i1%m,label%p,label%n
n:
call void@sml_check(i32 inreg%l)
%o=load i8*,i8**%c,align 8
br label%p
p:
%q=phi i8*[%o,%n],[%j,%i]
%r=load i8*,i8**%e,align 8
%s=getelementptr inbounds i8,i8*%r,i64 20
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=add i32%u,3
%w=sub i32 0,%u
%x=and i32%v,%w
%y=add i32%u,-1
%z=and i32%y,%w
%A=shl i32%u,1
%B=add i32%A,-1
%C=add i32%B,%z
%D=and i32%C,%w
%E=add i32%u,7
%F=add i32%E,%D
%G=and i32%F,-8
%H=lshr i32%D,3
%I=lshr i32%z,3
%J=sub nsw i32%H,%I
%K=getelementptr inbounds i8,i8*%r,i64 16
%L=bitcast i8*%K to i32*
%M=load i32,i32*%L,align 4
%N=shl i32%M,%J
%O=or i32%N,%M
%P=or i32%G,4
%Q=add i32%E,%x
%R=and i32%Q,-8
%S=add i32%R,15
%T=and i32%S,-8
%U=icmp eq i8*%q,null
%V=bitcast i8*%r to i8**
br i1%U,label%W,label%Y
W:
%X=phi i32[0,%p],[1,%bh]
ret i32%X
Y:
%Z=icmp eq i32%M,0
br i1%Z,label%af,label%aa
aa:
%ab=sext i32%x to i64
%ac=getelementptr inbounds i8,i8*%q,i64%ab
%ad=bitcast i8*%ac to i8**
%ae=load i8*,i8**%ad,align 8
br label%ar
af:
%ag=call i8*@sml_alloc(i32 inreg%u)#0
%ah=getelementptr inbounds i8,i8*%ag,i64 -4
%ai=bitcast i8*%ah to i32*
store i32%u,i32*%ai,align 4
%aj=load i8*,i8**%c,align 8
%ak=sext i32%x to i64
%al=getelementptr inbounds i8,i8*%aj,i64%ak
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ag,i8*%al,i32%u,i1 false)
%am=load i8**,i8***%h,align 8
%an=bitcast i8**%am to i8*
%ao=getelementptr inbounds i8*,i8**%am,i64 2
%ap=bitcast i8**%ao to i32*
%aq=load i32,i32*%ap,align 4
br label%ar
ar:
%as=phi i8*[%an,%af],[%r,%aa]
%at=phi i32[%aq,%af],[%M,%aa]
%au=phi i8**[%am,%af],[%V,%aa]
%av=phi i8*[%ag,%af],[%ae,%aa]
store i8*%av,i8**%d,align 8
%aw=load i8*,i8**%au,align 8
%ax=getelementptr inbounds i8,i8*%aw,i64 16
%ay=bitcast i8*%ax to i8*(i8*,i8*)**
%az=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ay,align 8
%aA=bitcast i8*%aw to i8**
%aB=load i8*,i8**%aA,align 8
store i8*%aB,i8**%g,align 8
%aC=icmp eq i32%at,0
br i1%aC,label%aH,label%aD
aD:
%aE=getelementptr inbounds i8,i8*%as,i64 8
%aF=bitcast i8*%aE to i8**
%aG=load i8*,i8**%aF,align 8
br label%aQ
aH:
%aI=getelementptr inbounds i8,i8*%as,i64 20
%aJ=bitcast i8*%aI to i32*
%aK=load i32,i32*%aJ,align 4
%aL=call i8*@sml_alloc(i32 inreg%aK)#0
%aM=getelementptr inbounds i8,i8*%aL,i64 -4
%aN=bitcast i8*%aM to i32*
store i32%aK,i32*%aN,align 4
%aO=load i8*,i8**%e,align 8
%aP=getelementptr inbounds i8,i8*%aO,i64 8
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aL,i8*%aP,i32%aK,i1 false)
br label%aQ
aQ:
%aR=phi i8*[%aO,%aH],[%as,%aD]
%aS=phi i8*[%aL,%aH],[%aG,%aD]
store i8*%aS,i8**%f,align 8
%aT=getelementptr inbounds i8,i8*%aR,i64 20
%aU=bitcast i8*%aT to i32*
%aV=load i32,i32*%aU,align 4
%aW=getelementptr inbounds i8,i8*%aR,i64 16
%aX=bitcast i8*%aW to i32*
%aY=load i32,i32*%aX,align 4
%aZ=call i8*@sml_alloc(i32 inreg%P)#0
%a0=or i32%G,1342177280
%a1=getelementptr inbounds i8,i8*%aZ,i64 -4
%a2=bitcast i8*%a1 to i32*
store i32%a0,i32*%a2,align 4
call void@llvm.memset.p0i8.i32(i8*%aZ,i8 0,i32%P,i1 false)
%a3=icmp eq i32%aY,0
%a4=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%a5=sext i32%z to i64
%a6=getelementptr inbounds i8,i8*%aZ,i64%a5
br i1%a3,label%bd,label%a7
a7:
%a8=bitcast i8*%a6 to i8**
store i8*%a4,i8**%a8,align 8
%a9=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ba=sext i32%D to i64
%bb=getelementptr inbounds i8,i8*%aZ,i64%ba
%bc=bitcast i8*%bb to i8**
store i8*%a9,i8**%bc,align 8
br label%bh
bd:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%a6,i8*%a4,i32%aV,i1 false)
%be=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bf=sext i32%D to i64
%bg=getelementptr inbounds i8,i8*%aZ,i64%bf
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bg,i8*%be,i32%aV,i1 false)
br label%bh
bh:
%bi=sext i32%G to i64
%bj=getelementptr inbounds i8,i8*%aZ,i64%bi
%bk=bitcast i8*%bj to i32*
store i32%O,i32*%bk,align 4
%bl=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%bm=call fastcc i8*%az(i8*inreg%bl,i8*inreg%aZ)
%bn=bitcast i8*%bm to i32*
%bo=load i32,i32*%bn,align 4
switch i32%bo,label%bp[
i32 0,label%W
i32 1,label%bO
i32 2,label%bH
]
bp:
store i8*null,i8**%e,align 8
call void@sml_matchcomp_bug()
%bq=load i8*,i8**@_SMLZ5Match,align 8
store i8*%bq,i8**%c,align 8
%br=call i8*@sml_alloc(i32 inreg 20)#0
%bs=getelementptr inbounds i8,i8*%br,i64 -4
%bt=bitcast i8*%bs to i32*
store i32 1342177296,i32*%bt,align 4
store i8*%br,i8**%d,align 8
%bu=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bv=bitcast i8*%br to i8**
store i8*%bu,i8**%bv,align 8
%bw=getelementptr inbounds i8,i8*%br,i64 8
%bx=bitcast i8*%bw to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[52x i8]}>,<{[4x i8],i32,[52x i8]}>*@j,i64 0,i32 2,i64 0),i8**%bx,align 8
%by=getelementptr inbounds i8,i8*%br,i64 16
%bz=bitcast i8*%by to i32*
store i32 3,i32*%bz,align 4
%bA=call i8*@sml_alloc(i32 inreg 60)#0
%bB=getelementptr inbounds i8,i8*%bA,i64 -4
%bC=bitcast i8*%bB to i32*
store i32 1342177336,i32*%bC,align 4
%bD=getelementptr inbounds i8,i8*%bA,i64 56
%bE=bitcast i8*%bD to i32*
store i32 1,i32*%bE,align 4
%bF=load i8*,i8**%d,align 8
%bG=bitcast i8*%bA to i8**
store i8*%bF,i8**%bG,align 8
call void@sml_raise(i8*inreg%bA)#1
unreachable
bH:
%bI=phi i32[%T,%bO],[%R,%bh]
%bJ=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bK=sext i32%bI to i64
%bL=getelementptr inbounds i8,i8*%bJ,i64%bK
%bM=bitcast i8*%bL to i8**
%bN=load i8*,i8**%bM,align 8
br label%i
bO:
br label%bH
}
define internal fastcc i8*@_SMLL3mem_345(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
%g=getelementptr inbounds i8,i8*%a,i64 16
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=shl i32%i,1
%k=or i32%j,1
%l=bitcast i8*%a to i8**
%m=load i8*,i8**%l,align 8
store i8*%m,i8**%e,align 8
%n=icmp eq i32%i,0
br i1%n,label%s,label%o
o:
%p=getelementptr inbounds i8,i8*%a,i64 8
%q=bitcast i8*%p to i8**
%r=load i8*,i8**%q,align 8
br label%E
s:
%t=getelementptr inbounds i8,i8*%a,i64 20
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=call i8*@sml_alloc(i32 inreg%v)#0
%x=getelementptr inbounds i8,i8*%w,i64 -4
%y=bitcast i8*%x to i32*
store i32%v,i32*%y,align 4
%z=load i8*,i8**%d,align 8
%A=getelementptr inbounds i8,i8*%z,i64 8
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%w,i8*%A,i32%v,i1 false)
%B=getelementptr inbounds i8,i8*%z,i64 16
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
br label%E
E:
%F=phi i32[%D,%s],[%i,%o]
%G=phi i8*[%z,%s],[%a,%o]
%H=phi i8*[%w,%s],[%r,%o]
store i8*%H,i8**%f,align 8
%I=getelementptr inbounds i8,i8*%G,i64 20
%J=bitcast i8*%I to i32*
%K=load i32,i32*%J,align 4
store i8*null,i8**%d,align 8
%L=call i8*@sml_alloc(i32 inreg 28)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32 1342177304,i32*%N,align 4
store i8*%L,i8**%d,align 8
%O=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%P=bitcast i8*%L to i8**
store i8*%O,i8**%P,align 8
%Q=icmp eq i32%F,0
%R=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%S=getelementptr inbounds i8,i8*%L,i64 8
br i1%Q,label%V,label%T
T:
%U=bitcast i8*%S to i8**
store i8*%R,i8**%U,align 8
br label%W
V:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%S,i8*%R,i32%K,i1 false)
br label%W
W:
%X=getelementptr inbounds i8,i8*%L,i64 16
%Y=bitcast i8*%X to i32*
store i32%F,i32*%Y,align 4
%Z=getelementptr inbounds i8,i8*%L,i64 20
%aa=bitcast i8*%Z to i32*
store i32%K,i32*%aa,align 4
%ab=getelementptr inbounds i8,i8*%L,i64 24
%ac=bitcast i8*%ab to i32*
store i32%k,i32*%ac,align 4
%ad=call i8*@sml_alloc(i32 inreg 28)#0
%ae=getelementptr inbounds i8,i8*%ad,i64 -4
%af=bitcast i8*%ae to i32*
store i32 1342177304,i32*%af,align 4
%ag=load i8*,i8**%d,align 8
%ah=bitcast i8*%ad to i8**
store i8*%ag,i8**%ah,align 8
%ai=getelementptr inbounds i8,i8*%ad,i64 8
%aj=bitcast i8*%ai to void(...)**
store void(...)*bitcast(i32(i8*,i8*)*@_SMLL3mem_343 to void(...)*),void(...)**%aj,align 8
%ak=getelementptr inbounds i8,i8*%ad,i64 16
%al=bitcast i8*%ak to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3mem_657 to void(...)*),void(...)**%al,align 8
%am=getelementptr inbounds i8,i8*%ad,i64 24
%an=bitcast i8*%am to i32*
store i32 -2147483647,i32*%an,align 4
ret i8*%ad
}
define internal fastcc i32@_SMLL8inDomain_346(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
n:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%l,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%e,align 8
br label%l
l:
%m=phi i8*[%k,%j],[%a,%n]
%o=getelementptr inbounds i8,i8*%m,i64 8
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=shl i32%q,1
%s=or i32%r,1
%t=getelementptr inbounds i8,i8*%m,i64 12
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=add i32%v,7
%x=sub i32 0,%v
%y=and i32%w,%x
%z=icmp eq i32%q,0
br i1%z,label%H,label%A
A:
%B=bitcast i8*%m to i8**
%C=load i8*,i8**%c,align 8
%D=sext i32%y to i64
%E=getelementptr inbounds i8,i8*%C,i64%D
%F=bitcast i8*%E to i8**
%G=load i8*,i8**%F,align 8
br label%R
H:
%I=call i8*@sml_alloc(i32 inreg%v)#0
%J=getelementptr inbounds i8,i8*%I,i64 -4
%K=bitcast i8*%J to i32*
store i32%v,i32*%K,align 4
%L=load i8*,i8**%c,align 8
%M=sext i32%y to i64
%N=getelementptr inbounds i8,i8*%L,i64%M
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%I,i8*%N,i32%v,i1 false)
%O=bitcast i8**%e to i8***
%P=load i8**,i8***%O,align 8
%Q=bitcast i8**%P to i8*
br label%R
R:
%S=phi i8*[%Q,%H],[%m,%A]
%T=phi i8**[%P,%H],[%B,%A]
%U=phi i8*[%I,%H],[%G,%A]
store i8*%U,i8**%d,align 8
%V=load i8*,i8**%T,align 8
store i8*%V,i8**%f,align 8
%W=getelementptr inbounds i8,i8*%S,i64 12
%X=bitcast i8*%W to i32*
%Y=load i32,i32*%X,align 4
%Z=getelementptr inbounds i8*,i8**%T,i64 1
%aa=bitcast i8**%Z to i32*
%ab=load i32,i32*%aa,align 4
%ac=call i8*@sml_alloc(i32 inreg 28)#0
%ad=getelementptr inbounds i8,i8*%ac,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 1342177304,i32*%ae,align 4
store i8*%ac,i8**%g,align 8
%af=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%ag=bitcast i8*%ac to i8**
store i8*%af,i8**%ag,align 8
%ah=icmp eq i32%ab,0
%ai=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aj=getelementptr inbounds i8,i8*%ac,i64 8
br i1%ah,label%am,label%ak
ak:
%al=bitcast i8*%aj to i8**
store i8*%ai,i8**%al,align 8
br label%an
am:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aj,i8*%ai,i32%Y,i1 false)
br label%an
an:
%ao=getelementptr inbounds i8,i8*%ac,i64 16
%ap=bitcast i8*%ao to i32*
store i32%ab,i32*%ap,align 4
%aq=getelementptr inbounds i8,i8*%ac,i64 20
%ar=bitcast i8*%aq to i32*
store i32%Y,i32*%ar,align 4
%as=getelementptr inbounds i8,i8*%ac,i64 24
%at=bitcast i8*%as to i32*
store i32%s,i32*%at,align 4
%au=call i8*@sml_alloc(i32 inreg 28)#0
%av=getelementptr inbounds i8,i8*%au,i64 -4
%aw=bitcast i8*%av to i32*
store i32 1342177304,i32*%aw,align 4
%ax=load i8*,i8**%g,align 8
%ay=bitcast i8*%au to i8**
store i8*%ax,i8**%ay,align 8
%az=getelementptr inbounds i8,i8*%au,i64 8
%aA=bitcast i8*%az to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL3mem_345 to void(...)*),void(...)**%aA,align 8
%aB=getelementptr inbounds i8,i8*%au,i64 16
%aC=bitcast i8*%aB to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL3mem_658 to void(...)*),void(...)**%aC,align 8
%aD=getelementptr inbounds i8,i8*%au,i64 24
%aE=bitcast i8*%aD to i32*
store i32 -2147483647,i32*%aE,align 4
%aF=load i8*,i8**%e,align 8
%aG=getelementptr inbounds i8,i8*%aF,i64 16
%aH=bitcast i8*%aG to i32*
%aI=load i32,i32*%aH,align 4
store i8*null,i8**%e,align 8
%aJ=getelementptr inbounds i8,i8*%aF,i64 20
%aK=bitcast i8*%aJ to i32*
%aL=load i32,i32*%aK,align 4
store i8*null,i8**%g,align 8
%aM=call fastcc i8*@_SMLL3mem_345(i8*inreg%ax,i32 inreg%aI,i32 inreg%aL)
%aN=getelementptr inbounds i8,i8*%aM,i64 16
%aO=bitcast i8*%aN to i8*(i8*,i8*)**
%aP=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aO,align 8
%aQ=bitcast i8*%aM to i8**
%aR=load i8*,i8**%aQ,align 8
%aS=bitcast i8**%c to i8***
%aT=load i8**,i8***%aS,align 8
store i8*null,i8**%c,align 8
%aU=load i8*,i8**%aT,align 8
%aV=call fastcc i8*%aP(i8*inreg%aR,i8*inreg%aU)
%aW=bitcast i8*%aV to i32*
%aX=load i32,i32*%aW,align 4
ret i32%aX
}
define internal fastcc i8*@_SMLL8inDomain_347(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=getelementptr inbounds i8,i8*%a,i64 8
%i=bitcast i8*%h to i32*
%j=load i32,i32*%i,align 4
%k=getelementptr inbounds i8,i8*%a,i64 12
%l=bitcast i8*%k to i32*
%m=load i32,i32*%l,align 4
%n=call i8*@sml_alloc(i32 inreg 28)#0
%o=getelementptr inbounds i8,i8*%n,i64 -4
%p=bitcast i8*%o to i32*
store i32 1342177304,i32*%p,align 4
store i8*%n,i8**%e,align 8
%q=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%r=bitcast i8*%n to i8**
store i8*%q,i8**%r,align 8
%s=getelementptr inbounds i8,i8*%n,i64 8
%t=bitcast i8*%s to i32*
store i32%j,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%n,i64 12
%v=bitcast i8*%u to i32*
store i32%m,i32*%v,align 4
%w=getelementptr inbounds i8,i8*%n,i64 16
%x=bitcast i8*%w to i32*
store i32%b,i32*%x,align 4
%y=getelementptr inbounds i8,i8*%n,i64 20
%z=bitcast i8*%y to i32*
store i32%c,i32*%z,align 4
%A=getelementptr inbounds i8,i8*%n,i64 24
%B=bitcast i8*%A to i32*
store i32 1,i32*%B,align 4
%C=call i8*@sml_alloc(i32 inreg 28)#0
%D=getelementptr inbounds i8,i8*%C,i64 -4
%E=bitcast i8*%D to i32*
store i32 1342177304,i32*%E,align 4
%F=load i8*,i8**%e,align 8
%G=bitcast i8*%C to i8**
store i8*%F,i8**%G,align 8
%H=getelementptr inbounds i8,i8*%C,i64 8
%I=bitcast i8*%H to void(...)**
store void(...)*bitcast(i32(i8*,i8*)*@_SMLL8inDomain_346 to void(...)*),void(...)**%I,align 8
%J=getelementptr inbounds i8,i8*%C,i64 16
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL8inDomain_659 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%C,i64 24
%M=bitcast i8*%L to i32*
store i32 -2147483647,i32*%M,align 4
ret i8*%C
}
define internal fastcc i8*@_SMLL3mem_348(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%e,align 8
%h=bitcast i8**%e to i8***
br label%i
i:
%j=phi i8*[%bS,%bM],[%b,%k]
store i8*%j,i8**%c,align 8
%l=load atomic i32,i32*@sml_check_flag unordered,align 4
%m=icmp eq i32%l,0
br i1%m,label%p,label%n
n:
call void@sml_check(i32 inreg%l)
%o=load i8*,i8**%c,align 8
br label%p
p:
%q=phi i8*[%o,%n],[%j,%i]
%r=load i8*,i8**%e,align 8
%s=getelementptr inbounds i8,i8*%r,i64 20
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=add i32%u,3
%w=sub i32 0,%u
%x=and i32%v,%w
%y=add i32%u,-1
%z=and i32%y,%w
%A=shl i32%u,1
%B=add i32%A,-1
%C=add i32%B,%z
%D=and i32%C,%w
%E=add i32%u,7
%F=add i32%E,%D
%G=and i32%F,-8
%H=lshr i32%D,3
%I=lshr i32%z,3
%J=sub nsw i32%H,%I
%K=getelementptr inbounds i8,i8*%r,i64 16
%L=bitcast i8*%K to i32*
%M=load i32,i32*%L,align 4
%N=shl i32%M,%J
%O=or i32%N,%M
%P=or i32%G,4
%Q=add i32%E,%x
%R=and i32%Q,-8
%S=add i32%R,15
%T=and i32%S,-8
%U=getelementptr inbounds i8,i8*%r,i64 28
%V=bitcast i8*%U to i32*
%W=load i32,i32*%V,align 4
%X=getelementptr inbounds i8,i8*%r,i64 24
%Y=bitcast i8*%X to i32*
%Z=load i32,i32*%Y,align 4
%aa=icmp eq i8*%q,null
%ab=bitcast i8*%r to i8**
br i1%aa,label%ac,label%ad
ac:
ret i8*null
ad:
%ae=icmp eq i32%M,0
br i1%ae,label%ak,label%af
af:
%ag=sext i32%x to i64
%ah=getelementptr inbounds i8,i8*%q,i64%ag
%ai=bitcast i8*%ah to i8**
%aj=load i8*,i8**%ai,align 8
br label%aw
ak:
%al=call i8*@sml_alloc(i32 inreg%u)#0
%am=getelementptr inbounds i8,i8*%al,i64 -4
%an=bitcast i8*%am to i32*
store i32%u,i32*%an,align 4
%ao=load i8*,i8**%c,align 8
%ap=sext i32%x to i64
%aq=getelementptr inbounds i8,i8*%ao,i64%ap
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%al,i8*%aq,i32%u,i1 false)
%ar=load i8**,i8***%h,align 8
%as=bitcast i8**%ar to i8*
%at=getelementptr inbounds i8*,i8**%ar,i64 2
%au=bitcast i8**%at to i32*
%av=load i32,i32*%au,align 4
br label%aw
aw:
%ax=phi i8*[%as,%ak],[%r,%af]
%ay=phi i32[%av,%ak],[%M,%af]
%az=phi i8**[%ar,%ak],[%ab,%af]
%aA=phi i8*[%al,%ak],[%aj,%af]
store i8*%aA,i8**%d,align 8
%aB=load i8*,i8**%az,align 8
%aC=getelementptr inbounds i8,i8*%aB,i64 16
%aD=bitcast i8*%aC to i8*(i8*,i8*)**
%aE=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aD,align 8
%aF=bitcast i8*%aB to i8**
%aG=load i8*,i8**%aF,align 8
store i8*%aG,i8**%g,align 8
%aH=icmp eq i32%ay,0
br i1%aH,label%aM,label%aI
aI:
%aJ=getelementptr inbounds i8,i8*%ax,i64 8
%aK=bitcast i8*%aJ to i8**
%aL=load i8*,i8**%aK,align 8
br label%aV
aM:
%aN=getelementptr inbounds i8,i8*%ax,i64 20
%aO=bitcast i8*%aN to i32*
%aP=load i32,i32*%aO,align 4
%aQ=call i8*@sml_alloc(i32 inreg%aP)#0
%aR=getelementptr inbounds i8,i8*%aQ,i64 -4
%aS=bitcast i8*%aR to i32*
store i32%aP,i32*%aS,align 4
%aT=load i8*,i8**%e,align 8
%aU=getelementptr inbounds i8,i8*%aT,i64 8
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aQ,i8*%aU,i32%aP,i1 false)
br label%aV
aV:
%aW=phi i8*[%aT,%aM],[%ax,%aI]
%aX=phi i8*[%aQ,%aM],[%aL,%aI]
store i8*%aX,i8**%f,align 8
%aY=getelementptr inbounds i8,i8*%aW,i64 20
%aZ=bitcast i8*%aY to i32*
%a0=load i32,i32*%aZ,align 4
%a1=getelementptr inbounds i8,i8*%aW,i64 16
%a2=bitcast i8*%a1 to i32*
%a3=load i32,i32*%a2,align 4
%a4=call i8*@sml_alloc(i32 inreg%P)#0
%a5=or i32%G,1342177280
%a6=getelementptr inbounds i8,i8*%a4,i64 -4
%a7=bitcast i8*%a6 to i32*
store i32%a5,i32*%a7,align 4
call void@llvm.memset.p0i8.i32(i8*%a4,i8 0,i32%P,i1 false)
%a8=icmp eq i32%a3,0
%a9=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%ba=sext i32%z to i64
%bb=getelementptr inbounds i8,i8*%a4,i64%ba
br i1%a8,label%bi,label%bc
bc:
%bd=bitcast i8*%bb to i8**
store i8*%a9,i8**%bd,align 8
%be=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bf=sext i32%D to i64
%bg=getelementptr inbounds i8,i8*%a4,i64%bf
%bh=bitcast i8*%bg to i8**
store i8*%be,i8**%bh,align 8
br label%bm
bi:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bb,i8*%a9,i32%a0,i1 false)
%bj=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bk=sext i32%D to i64
%bl=getelementptr inbounds i8,i8*%a4,i64%bk
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bl,i8*%bj,i32%a0,i1 false)
br label%bm
bm:
%bn=sext i32%G to i64
%bo=getelementptr inbounds i8,i8*%a4,i64%bn
%bp=bitcast i8*%bo to i32*
store i32%O,i32*%bp,align 4
%bq=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%br=call fastcc i8*%aE(i8*inreg%bq,i8*inreg%a4)
%bs=bitcast i8*%br to i32*
%bt=load i32,i32*%bs,align 4
switch i32%bt,label%bu[
i32 0,label%bU
i32 1,label%bT
i32 2,label%bM
]
bu:
store i8*null,i8**%e,align 8
call void@sml_matchcomp_bug()
%bv=load i8*,i8**@_SMLZ5Match,align 8
store i8*%bv,i8**%c,align 8
%bw=call i8*@sml_alloc(i32 inreg 20)#0
%bx=getelementptr inbounds i8,i8*%bw,i64 -4
%by=bitcast i8*%bx to i32*
store i32 1342177296,i32*%by,align 4
store i8*%bw,i8**%d,align 8
%bz=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bA=bitcast i8*%bw to i8**
store i8*%bz,i8**%bA,align 8
%bB=getelementptr inbounds i8,i8*%bw,i64 8
%bC=bitcast i8*%bB to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[52x i8]}>,<{[4x i8],i32,[52x i8]}>*@k,i64 0,i32 2,i64 0),i8**%bC,align 8
%bD=getelementptr inbounds i8,i8*%bw,i64 16
%bE=bitcast i8*%bD to i32*
store i32 3,i32*%bE,align 4
%bF=call i8*@sml_alloc(i32 inreg 60)#0
%bG=getelementptr inbounds i8,i8*%bF,i64 -4
%bH=bitcast i8*%bG to i32*
store i32 1342177336,i32*%bH,align 4
%bI=getelementptr inbounds i8,i8*%bF,i64 56
%bJ=bitcast i8*%bI to i32*
store i32 1,i32*%bJ,align 4
%bK=load i8*,i8**%d,align 8
%bL=bitcast i8*%bF to i8**
store i8*%bK,i8**%bL,align 8
call void@sml_raise(i8*inreg%bF)#1
unreachable
bM:
%bN=phi i32[%T,%bT],[%R,%bm]
%bO=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bP=sext i32%bN to i64
%bQ=getelementptr inbounds i8,i8*%bO,i64%bP
%bR=bitcast i8*%bQ to i8**
%bS=load i8*,i8**%bR,align 8
br label%i
bT:
br label%bM
bU:
%bV=add i32%W,7
%bW=add i32%bV,%T
%bX=sub i32 0,%W
%bY=and i32%bW,%bX
%bZ=add i32%W,-1
%b0=and i32%bZ,%bX
%b1=add i32%bV,%b0
%b2=and i32%b1,-8
%b3=or i32%b2,4
%b4=load i8*,i8**%e,align 8
%b5=getelementptr inbounds i8,i8*%b4,i64 24
%b6=bitcast i8*%b5 to i32*
%b7=load i32,i32*%b6,align 4
%b8=icmp eq i32%b7,0
br i1%b8,label%cf,label%b9
b9:
%ca=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cb=sext i32%bY to i64
%cc=getelementptr inbounds i8,i8*%ca,i64%cb
%cd=bitcast i8*%cc to i8**
%ce=load i8*,i8**%cd,align 8
br label%ct
cf:
%cg=getelementptr inbounds i8,i8*%b4,i64 28
%ch=bitcast i8*%cg to i32*
%ci=load i32,i32*%ch,align 4
%cj=call i8*@sml_alloc(i32 inreg%ci)#0
%ck=getelementptr inbounds i8,i8*%cj,i64 -4
%cl=bitcast i8*%ck to i32*
store i32%ci,i32*%cl,align 4
%cm=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cn=sext i32%bY to i64
%co=getelementptr inbounds i8,i8*%cm,i64%cn
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cj,i8*%co,i32%ci,i1 false)
%cp=load i8*,i8**%e,align 8
%cq=getelementptr inbounds i8,i8*%cp,i64 24
%cr=bitcast i8*%cq to i32*
%cs=load i32,i32*%cr,align 4
br label%ct
ct:
%cu=phi i32[%cs,%cf],[%b7,%b9]
%cv=phi i8*[%cp,%cf],[%b4,%b9]
%cw=phi i8*[%cj,%cf],[%ce,%b9]
store i8*%cw,i8**%c,align 8
%cx=getelementptr inbounds i8,i8*%cv,i64 28
%cy=bitcast i8*%cx to i32*
%cz=load i32,i32*%cy,align 4
store i8*null,i8**%e,align 8
%cA=call i8*@sml_alloc(i32 inreg%b3)#0
%cB=or i32%b2,1342177280
%cC=getelementptr inbounds i8,i8*%cA,i64 -4
%cD=bitcast i8*%cC to i32*
store i32%cB,i32*%cD,align 4
call void@llvm.memset.p0i8.i32(i8*%cA,i8 0,i32%b3,i1 false)
%cE=icmp eq i32%cu,0
%cF=load i8*,i8**%c,align 8
%cG=sext i32%b0 to i64
%cH=getelementptr inbounds i8,i8*%cA,i64%cG
br i1%cE,label%cK,label%cI
cI:
%cJ=bitcast i8*%cH to i8**
store i8*%cF,i8**%cJ,align 8
br label%cL
cK:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cH,i8*%cF,i32%cz,i1 false)
br label%cL
cL:
%cM=sext i32%b2 to i64
%cN=getelementptr inbounds i8,i8*%cA,i64%cM
%cO=bitcast i8*%cN to i32*
store i32%Z,i32*%cO,align 4
ret i8*%cA
}
define internal fastcc i8*@_SMLL3mem_350(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
%g=getelementptr inbounds i8,i8*%a,i64 16
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=shl i32%i,1
%k=or i32%j,1
%l=bitcast i8*%a to i8**
%m=load i8*,i8**%l,align 8
store i8*%m,i8**%e,align 8
%n=icmp eq i32%i,0
br i1%n,label%s,label%o
o:
%p=getelementptr inbounds i8,i8*%a,i64 8
%q=bitcast i8*%p to i8**
%r=load i8*,i8**%q,align 8
br label%E
s:
%t=getelementptr inbounds i8,i8*%a,i64 20
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=call i8*@sml_alloc(i32 inreg%v)#0
%x=getelementptr inbounds i8,i8*%w,i64 -4
%y=bitcast i8*%x to i32*
store i32%v,i32*%y,align 4
%z=load i8*,i8**%d,align 8
%A=getelementptr inbounds i8,i8*%z,i64 8
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%w,i8*%A,i32%v,i1 false)
%B=getelementptr inbounds i8,i8*%z,i64 16
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
br label%E
E:
%F=phi i32[%D,%s],[%i,%o]
%G=phi i8*[%z,%s],[%a,%o]
%H=phi i8*[%w,%s],[%r,%o]
store i8*%H,i8**%f,align 8
%I=getelementptr inbounds i8,i8*%G,i64 20
%J=bitcast i8*%I to i32*
%K=load i32,i32*%J,align 4
store i8*null,i8**%d,align 8
%L=call i8*@sml_alloc(i32 inreg 36)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32 1342177312,i32*%N,align 4
store i8*%L,i8**%d,align 8
%O=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%P=bitcast i8*%L to i8**
store i8*%O,i8**%P,align 8
%Q=icmp eq i32%F,0
%R=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%S=getelementptr inbounds i8,i8*%L,i64 8
br i1%Q,label%V,label%T
T:
%U=bitcast i8*%S to i8**
store i8*%R,i8**%U,align 8
br label%W
V:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%S,i8*%R,i32%K,i1 false)
br label%W
W:
%X=getelementptr inbounds i8,i8*%L,i64 16
%Y=bitcast i8*%X to i32*
store i32%F,i32*%Y,align 4
%Z=getelementptr inbounds i8,i8*%L,i64 20
%aa=bitcast i8*%Z to i32*
store i32%K,i32*%aa,align 4
%ab=getelementptr inbounds i8,i8*%L,i64 24
%ac=bitcast i8*%ab to i32*
store i32%b,i32*%ac,align 4
%ad=getelementptr inbounds i8,i8*%L,i64 28
%ae=bitcast i8*%ad to i32*
store i32%c,i32*%ae,align 4
%af=getelementptr inbounds i8,i8*%L,i64 32
%ag=bitcast i8*%af to i32*
store i32%k,i32*%ag,align 4
%ah=call i8*@sml_alloc(i32 inreg 28)#0
%ai=getelementptr inbounds i8,i8*%ah,i64 -4
%aj=bitcast i8*%ai to i32*
store i32 1342177304,i32*%aj,align 4
%ak=load i8*,i8**%d,align 8
%al=bitcast i8*%ah to i8**
store i8*%ak,i8**%al,align 8
%am=getelementptr inbounds i8,i8*%ah,i64 8
%an=bitcast i8*%am to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3mem_348 to void(...)*),void(...)**%an,align 8
%ao=getelementptr inbounds i8,i8*%ah,i64 16
%ap=bitcast i8*%ao to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3mem_348 to void(...)*),void(...)**%ap,align 8
%aq=getelementptr inbounds i8,i8*%ah,i64 24
%ar=bitcast i8*%aq to i32*
store i32 -2147483647,i32*%ar,align 4
ret i8*%ah
}
define internal fastcc i8*@_SMLL4find_351(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
n:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%l,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%e,align 8
br label%l
l:
%m=phi i8*[%k,%j],[%a,%n]
%o=getelementptr inbounds i8,i8*%m,i64 8
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=shl i32%q,1
%s=or i32%r,1
%t=getelementptr inbounds i8,i8*%m,i64 12
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=add i32%v,7
%x=sub i32 0,%v
%y=and i32%w,%x
%z=icmp eq i32%q,0
br i1%z,label%H,label%A
A:
%B=bitcast i8*%m to i8**
%C=load i8*,i8**%c,align 8
%D=sext i32%y to i64
%E=getelementptr inbounds i8,i8*%C,i64%D
%F=bitcast i8*%E to i8**
%G=load i8*,i8**%F,align 8
br label%R
H:
%I=call i8*@sml_alloc(i32 inreg%v)#0
%J=getelementptr inbounds i8,i8*%I,i64 -4
%K=bitcast i8*%J to i32*
store i32%v,i32*%K,align 4
%L=load i8*,i8**%c,align 8
%M=sext i32%y to i64
%N=getelementptr inbounds i8,i8*%L,i64%M
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%I,i8*%N,i32%v,i1 false)
%O=bitcast i8**%e to i8***
%P=load i8**,i8***%O,align 8
%Q=bitcast i8**%P to i8*
br label%R
R:
%S=phi i8*[%Q,%H],[%m,%A]
%T=phi i8**[%P,%H],[%B,%A]
%U=phi i8*[%I,%H],[%G,%A]
store i8*%U,i8**%d,align 8
%V=load i8*,i8**%T,align 8
store i8*%V,i8**%f,align 8
%W=getelementptr inbounds i8,i8*%S,i64 12
%X=bitcast i8*%W to i32*
%Y=load i32,i32*%X,align 4
%Z=getelementptr inbounds i8*,i8**%T,i64 1
%aa=bitcast i8**%Z to i32*
%ab=load i32,i32*%aa,align 4
%ac=call i8*@sml_alloc(i32 inreg 28)#0
%ad=getelementptr inbounds i8,i8*%ac,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 1342177304,i32*%ae,align 4
store i8*%ac,i8**%g,align 8
%af=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%ag=bitcast i8*%ac to i8**
store i8*%af,i8**%ag,align 8
%ah=icmp eq i32%ab,0
%ai=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aj=getelementptr inbounds i8,i8*%ac,i64 8
br i1%ah,label%am,label%ak
ak:
%al=bitcast i8*%aj to i8**
store i8*%ai,i8**%al,align 8
br label%an
am:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aj,i8*%ai,i32%Y,i1 false)
br label%an
an:
%ao=getelementptr inbounds i8,i8*%ac,i64 16
%ap=bitcast i8*%ao to i32*
store i32%ab,i32*%ap,align 4
%aq=getelementptr inbounds i8,i8*%ac,i64 20
%ar=bitcast i8*%aq to i32*
store i32%Y,i32*%ar,align 4
%as=getelementptr inbounds i8,i8*%ac,i64 24
%at=bitcast i8*%as to i32*
store i32%s,i32*%at,align 4
%au=call i8*@sml_alloc(i32 inreg 28)#0
%av=getelementptr inbounds i8,i8*%au,i64 -4
%aw=bitcast i8*%av to i32*
store i32 1342177304,i32*%aw,align 4
%ax=load i8*,i8**%g,align 8
%ay=bitcast i8*%au to i8**
store i8*%ax,i8**%ay,align 8
%az=getelementptr inbounds i8,i8*%au,i64 8
%aA=bitcast i8*%az to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL3mem_350 to void(...)*),void(...)**%aA,align 8
%aB=getelementptr inbounds i8,i8*%au,i64 16
%aC=bitcast i8*%aB to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL3mem_661 to void(...)*),void(...)**%aC,align 8
%aD=getelementptr inbounds i8,i8*%au,i64 24
%aE=bitcast i8*%aD to i32*
store i32 -2147483647,i32*%aE,align 4
%aF=load i8*,i8**%e,align 8
%aG=getelementptr inbounds i8,i8*%aF,i64 16
%aH=bitcast i8*%aG to i32*
%aI=load i32,i32*%aH,align 4
store i8*null,i8**%e,align 8
%aJ=getelementptr inbounds i8,i8*%aF,i64 20
%aK=bitcast i8*%aJ to i32*
%aL=load i32,i32*%aK,align 4
store i8*null,i8**%g,align 8
%aM=call fastcc i8*@_SMLL3mem_350(i8*inreg%ax,i32 inreg%aI,i32 inreg%aL)
%aN=getelementptr inbounds i8,i8*%aM,i64 16
%aO=bitcast i8*%aN to i8*(i8*,i8*)**
%aP=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aO,align 8
%aQ=bitcast i8*%aM to i8**
%aR=load i8*,i8**%aQ,align 8
%aS=bitcast i8**%c to i8***
%aT=load i8**,i8***%aS,align 8
%aU=load i8*,i8**%aT,align 8
%aV=tail call fastcc i8*%aP(i8*inreg%aR,i8*inreg%aU)
ret i8*%aV
}
define internal fastcc i8*@_SMLL4find_352(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=getelementptr inbounds i8,i8*%a,i64 8
%i=bitcast i8*%h to i32*
%j=load i32,i32*%i,align 4
%k=getelementptr inbounds i8,i8*%a,i64 12
%l=bitcast i8*%k to i32*
%m=load i32,i32*%l,align 4
%n=call i8*@sml_alloc(i32 inreg 28)#0
%o=getelementptr inbounds i8,i8*%n,i64 -4
%p=bitcast i8*%o to i32*
store i32 1342177304,i32*%p,align 4
store i8*%n,i8**%e,align 8
%q=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%r=bitcast i8*%n to i8**
store i8*%q,i8**%r,align 8
%s=getelementptr inbounds i8,i8*%n,i64 8
%t=bitcast i8*%s to i32*
store i32%j,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%n,i64 12
%v=bitcast i8*%u to i32*
store i32%m,i32*%v,align 4
%w=getelementptr inbounds i8,i8*%n,i64 16
%x=bitcast i8*%w to i32*
store i32%b,i32*%x,align 4
%y=getelementptr inbounds i8,i8*%n,i64 20
%z=bitcast i8*%y to i32*
store i32%c,i32*%z,align 4
%A=getelementptr inbounds i8,i8*%n,i64 24
%B=bitcast i8*%A to i32*
store i32 1,i32*%B,align 4
%C=call i8*@sml_alloc(i32 inreg 28)#0
%D=getelementptr inbounds i8,i8*%C,i64 -4
%E=bitcast i8*%D to i32*
store i32 1342177304,i32*%E,align 4
%F=load i8*,i8**%e,align 8
%G=bitcast i8*%C to i8**
store i8*%F,i8**%G,align 8
%H=getelementptr inbounds i8,i8*%C,i64 8
%I=bitcast i8*%H to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL4find_351 to void(...)*),void(...)**%I,align 8
%J=getelementptr inbounds i8,i8*%C,i64 16
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL4find_351 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%C,i64 24
%M=bitcast i8*%L to i32*
store i32 -2147483647,i32*%M,align 4
ret i8*%C
}
define internal fastcc i8*@_SMLL3mem_353(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%e,align 8
%h=bitcast i8**%e to i8***
br label%i
i:
%j=phi i8*[%bR,%bL],[%b,%k]
store i8*%j,i8**%c,align 8
%l=load atomic i32,i32*@sml_check_flag unordered,align 4
%m=icmp eq i32%l,0
br i1%m,label%p,label%n
n:
call void@sml_check(i32 inreg%l)
%o=load i8*,i8**%c,align 8
br label%p
p:
%q=phi i8*[%o,%n],[%j,%i]
%r=load i8*,i8**%e,align 8
%s=getelementptr inbounds i8,i8*%r,i64 20
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=add i32%u,3
%w=sub i32 0,%u
%x=and i32%v,%w
%y=add i32%u,-1
%z=and i32%y,%w
%A=add i32%z,%u
%B=add i32%y,%A
%C=and i32%B,%w
%D=add i32%u,7
%E=add i32%D,%C
%F=and i32%E,-8
%G=lshr i32%C,3
%H=lshr i32%z,3
%I=sub nsw i32%G,%H
%J=getelementptr inbounds i8,i8*%r,i64 16
%K=bitcast i8*%J to i32*
%L=load i32,i32*%K,align 4
%M=shl i32%L,%I
%N=or i32%M,%L
%O=or i32%F,4
%P=add i32%D,%x
%Q=and i32%P,-8
%R=add i32%Q,15
%S=and i32%R,-8
%T=getelementptr inbounds i8,i8*%r,i64 28
%U=bitcast i8*%T to i32*
%V=load i32,i32*%U,align 4
%W=getelementptr inbounds i8,i8*%r,i64 24
%X=bitcast i8*%W to i32*
%Y=load i32,i32*%X,align 4
%Z=icmp eq i8*%q,null
%aa=bitcast i8*%r to i8**
br i1%Z,label%ab,label%ac
ab:
ret i8*null
ac:
%ad=icmp eq i32%L,0
br i1%ad,label%aj,label%ae
ae:
%af=sext i32%x to i64
%ag=getelementptr inbounds i8,i8*%q,i64%af
%ah=bitcast i8*%ag to i8**
%ai=load i8*,i8**%ah,align 8
br label%av
aj:
%ak=call i8*@sml_alloc(i32 inreg%u)#0
%al=getelementptr inbounds i8,i8*%ak,i64 -4
%am=bitcast i8*%al to i32*
store i32%u,i32*%am,align 4
%an=load i8*,i8**%c,align 8
%ao=sext i32%x to i64
%ap=getelementptr inbounds i8,i8*%an,i64%ao
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ak,i8*%ap,i32%u,i1 false)
%aq=load i8**,i8***%h,align 8
%ar=bitcast i8**%aq to i8*
%as=getelementptr inbounds i8*,i8**%aq,i64 2
%at=bitcast i8**%as to i32*
%au=load i32,i32*%at,align 4
br label%av
av:
%aw=phi i8*[%ar,%aj],[%r,%ae]
%ax=phi i32[%au,%aj],[%L,%ae]
%ay=phi i8**[%aq,%aj],[%aa,%ae]
%az=phi i8*[%ak,%aj],[%ai,%ae]
store i8*%az,i8**%d,align 8
%aA=load i8*,i8**%ay,align 8
%aB=getelementptr inbounds i8,i8*%aA,i64 16
%aC=bitcast i8*%aB to i8*(i8*,i8*)**
%aD=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aC,align 8
%aE=bitcast i8*%aA to i8**
%aF=load i8*,i8**%aE,align 8
store i8*%aF,i8**%g,align 8
%aG=icmp eq i32%ax,0
br i1%aG,label%aL,label%aH
aH:
%aI=getelementptr inbounds i8,i8*%aw,i64 8
%aJ=bitcast i8*%aI to i8**
%aK=load i8*,i8**%aJ,align 8
br label%aU
aL:
%aM=getelementptr inbounds i8,i8*%aw,i64 20
%aN=bitcast i8*%aM to i32*
%aO=load i32,i32*%aN,align 4
%aP=call i8*@sml_alloc(i32 inreg%aO)#0
%aQ=getelementptr inbounds i8,i8*%aP,i64 -4
%aR=bitcast i8*%aQ to i32*
store i32%aO,i32*%aR,align 4
%aS=load i8*,i8**%e,align 8
%aT=getelementptr inbounds i8,i8*%aS,i64 8
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aP,i8*%aT,i32%aO,i1 false)
br label%aU
aU:
%aV=phi i8*[%aS,%aL],[%aw,%aH]
%aW=phi i8*[%aP,%aL],[%aK,%aH]
store i8*%aW,i8**%f,align 8
%aX=getelementptr inbounds i8,i8*%aV,i64 20
%aY=bitcast i8*%aX to i32*
%aZ=load i32,i32*%aY,align 4
%a0=getelementptr inbounds i8,i8*%aV,i64 16
%a1=bitcast i8*%a0 to i32*
%a2=load i32,i32*%a1,align 4
%a3=call i8*@sml_alloc(i32 inreg%O)#0
%a4=or i32%F,1342177280
%a5=getelementptr inbounds i8,i8*%a3,i64 -4
%a6=bitcast i8*%a5 to i32*
store i32%a4,i32*%a6,align 4
call void@llvm.memset.p0i8.i32(i8*%a3,i8 0,i32%O,i1 false)
%a7=icmp eq i32%a2,0
%a8=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%a9=sext i32%z to i64
%ba=getelementptr inbounds i8,i8*%a3,i64%a9
br i1%a7,label%bh,label%bb
bb:
%bc=bitcast i8*%ba to i8**
store i8*%a8,i8**%bc,align 8
%bd=load i8*,i8**%d,align 8
%be=sext i32%C to i64
%bf=getelementptr inbounds i8,i8*%a3,i64%be
%bg=bitcast i8*%bf to i8**
store i8*%bd,i8**%bg,align 8
br label%bl
bh:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ba,i8*%a8,i32%aZ,i1 false)
%bi=load i8*,i8**%d,align 8
%bj=sext i32%C to i64
%bk=getelementptr inbounds i8,i8*%a3,i64%bj
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bk,i8*%bi,i32%aZ,i1 false)
br label%bl
bl:
%bm=sext i32%F to i64
%bn=getelementptr inbounds i8,i8*%a3,i64%bm
%bo=bitcast i8*%bn to i32*
store i32%N,i32*%bo,align 4
%bp=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%bq=call fastcc i8*%aD(i8*inreg%bp,i8*inreg%a3)
%br=bitcast i8*%bq to i32*
%bs=load i32,i32*%br,align 4
switch i32%bs,label%bt[
i32 0,label%bT
i32 1,label%bS
i32 2,label%bL
]
bt:
store i8*null,i8**%d,align 8
store i8*null,i8**%e,align 8
call void@sml_matchcomp_bug()
%bu=load i8*,i8**@_SMLZ5Match,align 8
store i8*%bu,i8**%c,align 8
%bv=call i8*@sml_alloc(i32 inreg 20)#0
%bw=getelementptr inbounds i8,i8*%bv,i64 -4
%bx=bitcast i8*%bw to i32*
store i32 1342177296,i32*%bx,align 4
store i8*%bv,i8**%d,align 8
%by=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bz=bitcast i8*%bv to i8**
store i8*%by,i8**%bz,align 8
%bA=getelementptr inbounds i8,i8*%bv,i64 8
%bB=bitcast i8*%bA to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[52x i8]}>,<{[4x i8],i32,[52x i8]}>*@l,i64 0,i32 2,i64 0),i8**%bB,align 8
%bC=getelementptr inbounds i8,i8*%bv,i64 16
%bD=bitcast i8*%bC to i32*
store i32 3,i32*%bD,align 4
%bE=call i8*@sml_alloc(i32 inreg 60)#0
%bF=getelementptr inbounds i8,i8*%bE,i64 -4
%bG=bitcast i8*%bF to i32*
store i32 1342177336,i32*%bG,align 4
%bH=getelementptr inbounds i8,i8*%bE,i64 56
%bI=bitcast i8*%bH to i32*
store i32 1,i32*%bI,align 4
%bJ=load i8*,i8**%d,align 8
%bK=bitcast i8*%bE to i8**
store i8*%bJ,i8**%bK,align 8
call void@sml_raise(i8*inreg%bE)#1
unreachable
bL:
%bM=phi i32[%S,%bS],[%Q,%bl]
store i8*null,i8**%d,align 8
%bN=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bO=sext i32%bM to i64
%bP=getelementptr inbounds i8,i8*%bN,i64%bO
%bQ=bitcast i8*%bP to i8**
%bR=load i8*,i8**%bQ,align 8
br label%i
bS:
br label%bL
bT:
%bU=add i32%V,7
%bV=add i32%bU,%S
%bW=sub i32 0,%V
%bX=and i32%bV,%bW
%bY=add i32%V,-1
%bZ=add i32%bY,%A
%b0=and i32%bZ,%bW
%b1=add i32%bU,%b0
%b2=and i32%b1,-8
%b3=lshr i32%b0,3
%b4=sub nsw i32%b3,%H
%b5=shl i32%Y,%b4
%b6=or i32%b5,%L
%b7=or i32%b2,4
%b8=load i8*,i8**%e,align 8
%b9=getelementptr inbounds i8,i8*%b8,i64 20
%ca=bitcast i8*%b9 to i32*
%cb=load i32,i32*%ca,align 4
%cc=getelementptr inbounds i8,i8*%b8,i64 16
%cd=bitcast i8*%cc to i32*
%ce=load i32,i32*%cd,align 4
%cf=getelementptr inbounds i8,i8*%b8,i64 24
%cg=bitcast i8*%cf to i32*
%ch=load i32,i32*%cg,align 4
%ci=icmp eq i32%ch,0
br i1%ci,label%cp,label%cj
cj:
%ck=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cl=sext i32%bX to i64
%cm=getelementptr inbounds i8,i8*%ck,i64%cl
%cn=bitcast i8*%cm to i8**
%co=load i8*,i8**%cn,align 8
br label%cD
cp:
%cq=getelementptr inbounds i8,i8*%b8,i64 28
%cr=bitcast i8*%cq to i32*
%cs=load i32,i32*%cr,align 4
%ct=call i8*@sml_alloc(i32 inreg%cs)#0
%cu=getelementptr inbounds i8,i8*%ct,i64 -4
%cv=bitcast i8*%cu to i32*
store i32%cs,i32*%cv,align 4
%cw=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cx=sext i32%bX to i64
%cy=getelementptr inbounds i8,i8*%cw,i64%cx
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ct,i8*%cy,i32%cs,i1 false)
%cz=load i8*,i8**%e,align 8
%cA=getelementptr inbounds i8,i8*%cz,i64 24
%cB=bitcast i8*%cA to i32*
%cC=load i32,i32*%cB,align 4
br label%cD
cD:
%cE=phi i32[%cC,%cp],[%ch,%cj]
%cF=phi i8*[%cz,%cp],[%b8,%cj]
%cG=phi i8*[%ct,%cp],[%co,%cj]
store i8*%cG,i8**%c,align 8
%cH=getelementptr inbounds i8,i8*%cF,i64 28
%cI=bitcast i8*%cH to i32*
%cJ=load i32,i32*%cI,align 4
store i8*null,i8**%e,align 8
%cK=call i8*@sml_alloc(i32 inreg%b7)#0
%cL=or i32%b2,1342177280
%cM=getelementptr inbounds i8,i8*%cK,i64 -4
%cN=bitcast i8*%cM to i32*
store i32%cL,i32*%cN,align 4
store i8*%cK,i8**%e,align 8
call void@llvm.memset.p0i8.i32(i8*%cK,i8 0,i32%b7,i1 false)
%cO=icmp eq i32%ce,0
%cP=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%cQ=getelementptr inbounds i8,i8*%cK,i64%a9
br i1%cO,label%cT,label%cR
cR:
%cS=bitcast i8*%cQ to i8**
store i8*%cP,i8**%cS,align 8
br label%cU
cT:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cQ,i8*%cP,i32%cb,i1 false)
br label%cU
cU:
%cV=icmp eq i32%cE,0
%cW=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cX=sext i32%b0 to i64
%cY=getelementptr inbounds i8,i8*%cK,i64%cX
br i1%cV,label%c1,label%cZ
cZ:
%c0=bitcast i8*%cY to i8**
store i8*%cW,i8**%c0,align 8
br label%c2
c1:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cY,i8*%cW,i32%cJ,i1 false)
br label%c2
c2:
%c3=sext i32%b2 to i64
%c4=getelementptr inbounds i8,i8*%cK,i64%c3
%c5=bitcast i8*%c4 to i32*
store i32%b6,i32*%c5,align 4
%c6=call i8*@sml_alloc(i32 inreg 12)#0
%c7=getelementptr inbounds i8,i8*%c6,i64 -4
%c8=bitcast i8*%c7 to i32*
store i32 1342177288,i32*%c8,align 4
%c9=load i8*,i8**%e,align 8
%da=bitcast i8*%c6 to i8**
store i8*%c9,i8**%da,align 8
%db=getelementptr inbounds i8,i8*%c6,i64 8
%dc=bitcast i8*%db to i32*
store i32 1,i32*%dc,align 4
ret i8*%c6
}
define internal fastcc i8*@_SMLL3mem_355(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
%g=getelementptr inbounds i8,i8*%a,i64 16
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=shl i32%i,1
%k=or i32%j,1
%l=bitcast i8*%a to i8**
%m=load i8*,i8**%l,align 8
store i8*%m,i8**%e,align 8
%n=icmp eq i32%i,0
br i1%n,label%s,label%o
o:
%p=getelementptr inbounds i8,i8*%a,i64 8
%q=bitcast i8*%p to i8**
%r=load i8*,i8**%q,align 8
br label%E
s:
%t=getelementptr inbounds i8,i8*%a,i64 20
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=call i8*@sml_alloc(i32 inreg%v)#0
%x=getelementptr inbounds i8,i8*%w,i64 -4
%y=bitcast i8*%x to i32*
store i32%v,i32*%y,align 4
%z=load i8*,i8**%d,align 8
%A=getelementptr inbounds i8,i8*%z,i64 8
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%w,i8*%A,i32%v,i1 false)
%B=getelementptr inbounds i8,i8*%z,i64 16
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
br label%E
E:
%F=phi i32[%D,%s],[%i,%o]
%G=phi i8*[%z,%s],[%a,%o]
%H=phi i8*[%w,%s],[%r,%o]
store i8*%H,i8**%f,align 8
%I=getelementptr inbounds i8,i8*%G,i64 20
%J=bitcast i8*%I to i32*
%K=load i32,i32*%J,align 4
store i8*null,i8**%d,align 8
%L=call i8*@sml_alloc(i32 inreg 36)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32 1342177312,i32*%N,align 4
store i8*%L,i8**%d,align 8
%O=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%P=bitcast i8*%L to i8**
store i8*%O,i8**%P,align 8
%Q=icmp eq i32%F,0
%R=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%S=getelementptr inbounds i8,i8*%L,i64 8
br i1%Q,label%V,label%T
T:
%U=bitcast i8*%S to i8**
store i8*%R,i8**%U,align 8
br label%W
V:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%S,i8*%R,i32%K,i1 false)
br label%W
W:
%X=getelementptr inbounds i8,i8*%L,i64 16
%Y=bitcast i8*%X to i32*
store i32%F,i32*%Y,align 4
%Z=getelementptr inbounds i8,i8*%L,i64 20
%aa=bitcast i8*%Z to i32*
store i32%K,i32*%aa,align 4
%ab=getelementptr inbounds i8,i8*%L,i64 24
%ac=bitcast i8*%ab to i32*
store i32%b,i32*%ac,align 4
%ad=getelementptr inbounds i8,i8*%L,i64 28
%ae=bitcast i8*%ad to i32*
store i32%c,i32*%ae,align 4
%af=getelementptr inbounds i8,i8*%L,i64 32
%ag=bitcast i8*%af to i32*
store i32%k,i32*%ag,align 4
%ah=call i8*@sml_alloc(i32 inreg 28)#0
%ai=getelementptr inbounds i8,i8*%ah,i64 -4
%aj=bitcast i8*%ai to i32*
store i32 1342177304,i32*%aj,align 4
%ak=load i8*,i8**%d,align 8
%al=bitcast i8*%ah to i8**
store i8*%ak,i8**%al,align 8
%am=getelementptr inbounds i8,i8*%ah,i64 8
%an=bitcast i8*%am to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3mem_353 to void(...)*),void(...)**%an,align 8
%ao=getelementptr inbounds i8,i8*%ah,i64 16
%ap=bitcast i8*%ao to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3mem_353 to void(...)*),void(...)**%ap,align 8
%aq=getelementptr inbounds i8,i8*%ah,i64 24
%ar=bitcast i8*%aq to i32*
store i32 -2147483647,i32*%ar,align 4
ret i8*%ah
}
define internal fastcc i8*@_SMLL5findi_356(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
n:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%l,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%e,align 8
br label%l
l:
%m=phi i8*[%k,%j],[%a,%n]
%o=getelementptr inbounds i8,i8*%m,i64 8
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=shl i32%q,1
%s=or i32%r,1
%t=getelementptr inbounds i8,i8*%m,i64 12
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=add i32%v,7
%x=sub i32 0,%v
%y=and i32%w,%x
%z=icmp eq i32%q,0
br i1%z,label%H,label%A
A:
%B=bitcast i8*%m to i8**
%C=load i8*,i8**%c,align 8
%D=sext i32%y to i64
%E=getelementptr inbounds i8,i8*%C,i64%D
%F=bitcast i8*%E to i8**
%G=load i8*,i8**%F,align 8
br label%R
H:
%I=call i8*@sml_alloc(i32 inreg%v)#0
%J=getelementptr inbounds i8,i8*%I,i64 -4
%K=bitcast i8*%J to i32*
store i32%v,i32*%K,align 4
%L=load i8*,i8**%c,align 8
%M=sext i32%y to i64
%N=getelementptr inbounds i8,i8*%L,i64%M
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%I,i8*%N,i32%v,i1 false)
%O=bitcast i8**%e to i8***
%P=load i8**,i8***%O,align 8
%Q=bitcast i8**%P to i8*
br label%R
R:
%S=phi i8*[%Q,%H],[%m,%A]
%T=phi i8**[%P,%H],[%B,%A]
%U=phi i8*[%I,%H],[%G,%A]
store i8*%U,i8**%d,align 8
%V=load i8*,i8**%T,align 8
store i8*%V,i8**%f,align 8
%W=getelementptr inbounds i8,i8*%S,i64 12
%X=bitcast i8*%W to i32*
%Y=load i32,i32*%X,align 4
%Z=getelementptr inbounds i8*,i8**%T,i64 1
%aa=bitcast i8**%Z to i32*
%ab=load i32,i32*%aa,align 4
%ac=call i8*@sml_alloc(i32 inreg 28)#0
%ad=getelementptr inbounds i8,i8*%ac,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 1342177304,i32*%ae,align 4
store i8*%ac,i8**%g,align 8
%af=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%ag=bitcast i8*%ac to i8**
store i8*%af,i8**%ag,align 8
%ah=icmp eq i32%ab,0
%ai=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aj=getelementptr inbounds i8,i8*%ac,i64 8
br i1%ah,label%am,label%ak
ak:
%al=bitcast i8*%aj to i8**
store i8*%ai,i8**%al,align 8
br label%an
am:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aj,i8*%ai,i32%Y,i1 false)
br label%an
an:
%ao=getelementptr inbounds i8,i8*%ac,i64 16
%ap=bitcast i8*%ao to i32*
store i32%ab,i32*%ap,align 4
%aq=getelementptr inbounds i8,i8*%ac,i64 20
%ar=bitcast i8*%aq to i32*
store i32%Y,i32*%ar,align 4
%as=getelementptr inbounds i8,i8*%ac,i64 24
%at=bitcast i8*%as to i32*
store i32%s,i32*%at,align 4
%au=call i8*@sml_alloc(i32 inreg 28)#0
%av=getelementptr inbounds i8,i8*%au,i64 -4
%aw=bitcast i8*%av to i32*
store i32 1342177304,i32*%aw,align 4
%ax=load i8*,i8**%g,align 8
%ay=bitcast i8*%au to i8**
store i8*%ax,i8**%ay,align 8
%az=getelementptr inbounds i8,i8*%au,i64 8
%aA=bitcast i8*%az to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL3mem_355 to void(...)*),void(...)**%aA,align 8
%aB=getelementptr inbounds i8,i8*%au,i64 16
%aC=bitcast i8*%aB to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL3mem_663 to void(...)*),void(...)**%aC,align 8
%aD=getelementptr inbounds i8,i8*%au,i64 24
%aE=bitcast i8*%aD to i32*
store i32 -2147483647,i32*%aE,align 4
%aF=load i8*,i8**%e,align 8
%aG=getelementptr inbounds i8,i8*%aF,i64 16
%aH=bitcast i8*%aG to i32*
%aI=load i32,i32*%aH,align 4
store i8*null,i8**%e,align 8
%aJ=getelementptr inbounds i8,i8*%aF,i64 20
%aK=bitcast i8*%aJ to i32*
%aL=load i32,i32*%aK,align 4
store i8*null,i8**%g,align 8
%aM=call fastcc i8*@_SMLL3mem_355(i8*inreg%ax,i32 inreg%aI,i32 inreg%aL)
%aN=getelementptr inbounds i8,i8*%aM,i64 16
%aO=bitcast i8*%aN to i8*(i8*,i8*)**
%aP=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aO,align 8
%aQ=bitcast i8*%aM to i8**
%aR=load i8*,i8**%aQ,align 8
%aS=bitcast i8**%c to i8***
%aT=load i8**,i8***%aS,align 8
%aU=load i8*,i8**%aT,align 8
%aV=tail call fastcc i8*%aP(i8*inreg%aR,i8*inreg%aU)
ret i8*%aV
}
define internal fastcc i8*@_SMLL5findi_357(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=getelementptr inbounds i8,i8*%a,i64 8
%i=bitcast i8*%h to i32*
%j=load i32,i32*%i,align 4
%k=getelementptr inbounds i8,i8*%a,i64 12
%l=bitcast i8*%k to i32*
%m=load i32,i32*%l,align 4
%n=call i8*@sml_alloc(i32 inreg 28)#0
%o=getelementptr inbounds i8,i8*%n,i64 -4
%p=bitcast i8*%o to i32*
store i32 1342177304,i32*%p,align 4
store i8*%n,i8**%e,align 8
%q=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%r=bitcast i8*%n to i8**
store i8*%q,i8**%r,align 8
%s=getelementptr inbounds i8,i8*%n,i64 8
%t=bitcast i8*%s to i32*
store i32%j,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%n,i64 12
%v=bitcast i8*%u to i32*
store i32%m,i32*%v,align 4
%w=getelementptr inbounds i8,i8*%n,i64 16
%x=bitcast i8*%w to i32*
store i32%b,i32*%x,align 4
%y=getelementptr inbounds i8,i8*%n,i64 20
%z=bitcast i8*%y to i32*
store i32%c,i32*%z,align 4
%A=getelementptr inbounds i8,i8*%n,i64 24
%B=bitcast i8*%A to i32*
store i32 1,i32*%B,align 4
%C=call i8*@sml_alloc(i32 inreg 28)#0
%D=getelementptr inbounds i8,i8*%C,i64 -4
%E=bitcast i8*%D to i32*
store i32 1342177304,i32*%E,align 4
%F=load i8*,i8**%e,align 8
%G=bitcast i8*%C to i8**
store i8*%F,i8**%G,align 8
%H=getelementptr inbounds i8,i8*%C,i64 8
%I=bitcast i8*%H to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL5findi_356 to void(...)*),void(...)**%I,align 8
%J=getelementptr inbounds i8,i8*%C,i64 16
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL5findi_356 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%C,i64 24
%M=bitcast i8*%L to i32*
store i32 -2147483647,i32*%M,align 4
ret i8*%C
}
define internal fastcc i8*@_SMLL3mem_358(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%e,align 8
%h=bitcast i8**%e to i8***
br label%i
i:
%j=phi i8*[%b6,%b0],[%b,%k]
store i8*%j,i8**%c,align 8
%l=load atomic i32,i32*@sml_check_flag unordered,align 4
%m=icmp eq i32%l,0
br i1%m,label%p,label%n
n:
call void@sml_check(i32 inreg%l)
%o=load i8*,i8**%c,align 8
br label%p
p:
%q=phi i8*[%o,%n],[%j,%i]
%r=load i8*,i8**%e,align 8
%s=getelementptr inbounds i8,i8*%r,i64 20
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=add i32%u,3
%w=sub i32 0,%u
%x=and i32%v,%w
%y=add i32%u,-1
%z=and i32%y,%w
%A=shl i32%u,1
%B=add i32%A,-1
%C=add i32%B,%z
%D=and i32%C,%w
%E=add i32%u,7
%F=add i32%E,%D
%G=and i32%F,-8
%H=lshr i32%D,3
%I=lshr i32%z,3
%J=sub nsw i32%H,%I
%K=getelementptr inbounds i8,i8*%r,i64 16
%L=bitcast i8*%K to i32*
%M=load i32,i32*%L,align 4
%N=shl i32%M,%J
%O=or i32%N,%M
%P=or i32%G,4
%Q=add i32%E,%x
%R=and i32%Q,-8
%S=add i32%R,15
%T=and i32%S,-8
%U=getelementptr inbounds i8,i8*%r,i64 28
%V=bitcast i8*%U to i32*
%W=load i32,i32*%V,align 4
%X=icmp eq i8*%q,null
%Y=bitcast i8*%r to i8**
br i1%X,label%Z,label%ar
Z:
store i8*null,i8**%e,align 8
%aa=load i8*,i8**@_SMLZN7LibBase8NotFoundE,align 8
store i8*%aa,i8**%c,align 8
%ab=call i8*@sml_alloc(i32 inreg 20)#0
%ac=getelementptr inbounds i8,i8*%ab,i64 -4
%ad=bitcast i8*%ac to i32*
store i32 1342177296,i32*%ad,align 4
store i8*%ab,i8**%d,align 8
%ae=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%af=bitcast i8*%ab to i8**
store i8*%ae,i8**%af,align 8
%ag=getelementptr inbounds i8,i8*%ab,i64 8
%ah=bitcast i8*%ag to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[52x i8]}>,<{[4x i8],i32,[52x i8]}>*@n,i64 0,i32 2,i64 0),i8**%ah,align 8
%ai=getelementptr inbounds i8,i8*%ab,i64 16
%aj=bitcast i8*%ai to i32*
store i32 3,i32*%aj,align 4
%ak=call i8*@sml_alloc(i32 inreg 60)#0
%al=getelementptr inbounds i8,i8*%ak,i64 -4
%am=bitcast i8*%al to i32*
store i32 1342177336,i32*%am,align 4
%an=getelementptr inbounds i8,i8*%ak,i64 56
%ao=bitcast i8*%an to i32*
store i32 1,i32*%ao,align 4
%ap=load i8*,i8**%d,align 8
%aq=bitcast i8*%ak to i8**
store i8*%ap,i8**%aq,align 8
call void@sml_raise(i8*inreg%ak)#1
unreachable
ar:
%as=icmp eq i32%M,0
br i1%as,label%ay,label%at
at:
%au=sext i32%x to i64
%av=getelementptr inbounds i8,i8*%q,i64%au
%aw=bitcast i8*%av to i8**
%ax=load i8*,i8**%aw,align 8
br label%aK
ay:
%az=call i8*@sml_alloc(i32 inreg%u)#0
%aA=getelementptr inbounds i8,i8*%az,i64 -4
%aB=bitcast i8*%aA to i32*
store i32%u,i32*%aB,align 4
%aC=load i8*,i8**%c,align 8
%aD=sext i32%x to i64
%aE=getelementptr inbounds i8,i8*%aC,i64%aD
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%az,i8*%aE,i32%u,i1 false)
%aF=load i8**,i8***%h,align 8
%aG=bitcast i8**%aF to i8*
%aH=getelementptr inbounds i8*,i8**%aF,i64 2
%aI=bitcast i8**%aH to i32*
%aJ=load i32,i32*%aI,align 4
br label%aK
aK:
%aL=phi i8*[%aG,%ay],[%r,%at]
%aM=phi i32[%aJ,%ay],[%M,%at]
%aN=phi i8**[%aF,%ay],[%Y,%at]
%aO=phi i8*[%az,%ay],[%ax,%at]
store i8*%aO,i8**%d,align 8
%aP=load i8*,i8**%aN,align 8
%aQ=getelementptr inbounds i8,i8*%aP,i64 16
%aR=bitcast i8*%aQ to i8*(i8*,i8*)**
%aS=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aR,align 8
%aT=bitcast i8*%aP to i8**
%aU=load i8*,i8**%aT,align 8
store i8*%aU,i8**%g,align 8
%aV=icmp eq i32%aM,0
br i1%aV,label%a0,label%aW
aW:
%aX=getelementptr inbounds i8,i8*%aL,i64 8
%aY=bitcast i8*%aX to i8**
%aZ=load i8*,i8**%aY,align 8
br label%a9
a0:
%a1=getelementptr inbounds i8,i8*%aL,i64 20
%a2=bitcast i8*%a1 to i32*
%a3=load i32,i32*%a2,align 4
%a4=call i8*@sml_alloc(i32 inreg%a3)#0
%a5=getelementptr inbounds i8,i8*%a4,i64 -4
%a6=bitcast i8*%a5 to i32*
store i32%a3,i32*%a6,align 4
%a7=load i8*,i8**%e,align 8
%a8=getelementptr inbounds i8,i8*%a7,i64 8
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%a4,i8*%a8,i32%a3,i1 false)
br label%a9
a9:
%ba=phi i8*[%a7,%a0],[%aL,%aW]
%bb=phi i8*[%a4,%a0],[%aZ,%aW]
store i8*%bb,i8**%f,align 8
%bc=getelementptr inbounds i8,i8*%ba,i64 20
%bd=bitcast i8*%bc to i32*
%be=load i32,i32*%bd,align 4
%bf=getelementptr inbounds i8,i8*%ba,i64 16
%bg=bitcast i8*%bf to i32*
%bh=load i32,i32*%bg,align 4
%bi=call i8*@sml_alloc(i32 inreg%P)#0
%bj=or i32%G,1342177280
%bk=getelementptr inbounds i8,i8*%bi,i64 -4
%bl=bitcast i8*%bk to i32*
store i32%bj,i32*%bl,align 4
call void@llvm.memset.p0i8.i32(i8*%bi,i8 0,i32%P,i1 false)
%bm=icmp eq i32%bh,0
%bn=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%bo=sext i32%z to i64
%bp=getelementptr inbounds i8,i8*%bi,i64%bo
br i1%bm,label%bw,label%bq
bq:
%br=bitcast i8*%bp to i8**
store i8*%bn,i8**%br,align 8
%bs=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bt=sext i32%D to i64
%bu=getelementptr inbounds i8,i8*%bi,i64%bt
%bv=bitcast i8*%bu to i8**
store i8*%bs,i8**%bv,align 8
br label%bA
bw:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bp,i8*%bn,i32%be,i1 false)
%bx=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%by=sext i32%D to i64
%bz=getelementptr inbounds i8,i8*%bi,i64%by
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bz,i8*%bx,i32%be,i1 false)
br label%bA
bA:
%bB=sext i32%G to i64
%bC=getelementptr inbounds i8,i8*%bi,i64%bB
%bD=bitcast i8*%bC to i32*
store i32%O,i32*%bD,align 4
%bE=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%bF=call fastcc i8*%aS(i8*inreg%bE,i8*inreg%bi)
%bG=bitcast i8*%bF to i32*
%bH=load i32,i32*%bG,align 4
switch i32%bH,label%bI[
i32 0,label%b8
i32 1,label%b7
i32 2,label%b0
]
bI:
store i8*null,i8**%e,align 8
call void@sml_matchcomp_bug()
%bJ=load i8*,i8**@_SMLZ5Match,align 8
store i8*%bJ,i8**%c,align 8
%bK=call i8*@sml_alloc(i32 inreg 20)#0
%bL=getelementptr inbounds i8,i8*%bK,i64 -4
%bM=bitcast i8*%bL to i32*
store i32 1342177296,i32*%bM,align 4
store i8*%bK,i8**%d,align 8
%bN=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bO=bitcast i8*%bK to i8**
store i8*%bN,i8**%bO,align 8
%bP=getelementptr inbounds i8,i8*%bK,i64 8
%bQ=bitcast i8*%bP to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[52x i8]}>,<{[4x i8],i32,[52x i8]}>*@m,i64 0,i32 2,i64 0),i8**%bQ,align 8
%bR=getelementptr inbounds i8,i8*%bK,i64 16
%bS=bitcast i8*%bR to i32*
store i32 3,i32*%bS,align 4
%bT=call i8*@sml_alloc(i32 inreg 60)#0
%bU=getelementptr inbounds i8,i8*%bT,i64 -4
%bV=bitcast i8*%bU to i32*
store i32 1342177336,i32*%bV,align 4
%bW=getelementptr inbounds i8,i8*%bT,i64 56
%bX=bitcast i8*%bW to i32*
store i32 1,i32*%bX,align 4
%bY=load i8*,i8**%d,align 8
%bZ=bitcast i8*%bT to i8**
store i8*%bY,i8**%bZ,align 8
call void@sml_raise(i8*inreg%bT)#1
unreachable
b0:
%b1=phi i32[%T,%b7],[%R,%bA]
%b2=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%b3=sext i32%b1 to i64
%b4=getelementptr inbounds i8,i8*%b2,i64%b3
%b5=bitcast i8*%b4 to i8**
%b6=load i8*,i8**%b5,align 8
br label%i
b7:
br label%b0
b8:
%b9=add i32%W,7
%ca=add i32%b9,%T
%cb=sub i32 0,%W
%cc=and i32%ca,%cb
%cd=load i8*,i8**%e,align 8
%ce=getelementptr inbounds i8,i8*%cd,i64 24
%cf=bitcast i8*%ce to i32*
%cg=load i32,i32*%cf,align 4
%ch=icmp eq i32%cg,0
br i1%ch,label%co,label%ci
ci:
%cj=load i8*,i8**%c,align 8
%ck=sext i32%cc to i64
%cl=getelementptr inbounds i8,i8*%cj,i64%ck
%cm=bitcast i8*%cl to i8**
%cn=load i8*,i8**%cm,align 8
ret i8*%cn
co:
store i8*null,i8**%e,align 8
%cp=getelementptr inbounds i8,i8*%cd,i64 28
%cq=bitcast i8*%cp to i32*
%cr=load i32,i32*%cq,align 4
%cs=call i8*@sml_alloc(i32 inreg%cr)#0
%ct=getelementptr inbounds i8,i8*%cs,i64 -4
%cu=bitcast i8*%ct to i32*
store i32%cr,i32*%cu,align 4
%cv=load i8*,i8**%c,align 8
%cw=sext i32%cc to i64
%cx=getelementptr inbounds i8,i8*%cv,i64%cw
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cs,i8*%cx,i32%cr,i1 false)
ret i8*%cs
}
define internal fastcc i8*@_SMLL3mem_361(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
%g=getelementptr inbounds i8,i8*%a,i64 16
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=shl i32%i,1
%k=or i32%j,1
%l=bitcast i8*%a to i8**
%m=load i8*,i8**%l,align 8
store i8*%m,i8**%e,align 8
%n=icmp eq i32%i,0
br i1%n,label%s,label%o
o:
%p=getelementptr inbounds i8,i8*%a,i64 8
%q=bitcast i8*%p to i8**
%r=load i8*,i8**%q,align 8
br label%E
s:
%t=getelementptr inbounds i8,i8*%a,i64 20
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=call i8*@sml_alloc(i32 inreg%v)#0
%x=getelementptr inbounds i8,i8*%w,i64 -4
%y=bitcast i8*%x to i32*
store i32%v,i32*%y,align 4
%z=load i8*,i8**%d,align 8
%A=getelementptr inbounds i8,i8*%z,i64 8
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%w,i8*%A,i32%v,i1 false)
%B=getelementptr inbounds i8,i8*%z,i64 16
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
br label%E
E:
%F=phi i32[%D,%s],[%i,%o]
%G=phi i8*[%z,%s],[%a,%o]
%H=phi i8*[%w,%s],[%r,%o]
store i8*%H,i8**%f,align 8
%I=getelementptr inbounds i8,i8*%G,i64 20
%J=bitcast i8*%I to i32*
%K=load i32,i32*%J,align 4
store i8*null,i8**%d,align 8
%L=call i8*@sml_alloc(i32 inreg 36)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32 1342177312,i32*%N,align 4
store i8*%L,i8**%d,align 8
%O=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%P=bitcast i8*%L to i8**
store i8*%O,i8**%P,align 8
%Q=icmp eq i32%F,0
%R=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%S=getelementptr inbounds i8,i8*%L,i64 8
br i1%Q,label%V,label%T
T:
%U=bitcast i8*%S to i8**
store i8*%R,i8**%U,align 8
br label%W
V:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%S,i8*%R,i32%K,i1 false)
br label%W
W:
%X=getelementptr inbounds i8,i8*%L,i64 16
%Y=bitcast i8*%X to i32*
store i32%F,i32*%Y,align 4
%Z=getelementptr inbounds i8,i8*%L,i64 20
%aa=bitcast i8*%Z to i32*
store i32%K,i32*%aa,align 4
%ab=getelementptr inbounds i8,i8*%L,i64 24
%ac=bitcast i8*%ab to i32*
store i32%b,i32*%ac,align 4
%ad=getelementptr inbounds i8,i8*%L,i64 28
%ae=bitcast i8*%ad to i32*
store i32%c,i32*%ae,align 4
%af=getelementptr inbounds i8,i8*%L,i64 32
%ag=bitcast i8*%af to i32*
store i32%k,i32*%ag,align 4
%ah=call i8*@sml_alloc(i32 inreg 28)#0
%ai=getelementptr inbounds i8,i8*%ah,i64 -4
%aj=bitcast i8*%ai to i32*
store i32 1342177304,i32*%aj,align 4
%ak=load i8*,i8**%d,align 8
%al=bitcast i8*%ah to i8**
store i8*%ak,i8**%al,align 8
%am=getelementptr inbounds i8,i8*%ah,i64 8
%an=bitcast i8*%am to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3mem_358 to void(...)*),void(...)**%an,align 8
%ao=getelementptr inbounds i8,i8*%ah,i64 16
%ap=bitcast i8*%ao to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3mem_358 to void(...)*),void(...)**%ap,align 8
%aq=getelementptr inbounds i8,i8*%ah,i64 24
%ar=bitcast i8*%aq to i32*
store i32 1,i32*%ar,align 4
ret i8*%ah
}
define internal fastcc i8*@_SMLL6lookup_362(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
n:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%l,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%e,align 8
br label%l
l:
%m=phi i8*[%k,%j],[%a,%n]
%o=getelementptr inbounds i8,i8*%m,i64 8
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=shl i32%q,1
%s=or i32%r,1
%t=getelementptr inbounds i8,i8*%m,i64 12
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=add i32%v,7
%x=sub i32 0,%v
%y=and i32%w,%x
%z=icmp eq i32%q,0
br i1%z,label%H,label%A
A:
%B=bitcast i8*%m to i8**
%C=load i8*,i8**%c,align 8
%D=sext i32%y to i64
%E=getelementptr inbounds i8,i8*%C,i64%D
%F=bitcast i8*%E to i8**
%G=load i8*,i8**%F,align 8
br label%R
H:
%I=call i8*@sml_alloc(i32 inreg%v)#0
%J=getelementptr inbounds i8,i8*%I,i64 -4
%K=bitcast i8*%J to i32*
store i32%v,i32*%K,align 4
%L=load i8*,i8**%c,align 8
%M=sext i32%y to i64
%N=getelementptr inbounds i8,i8*%L,i64%M
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%I,i8*%N,i32%v,i1 false)
%O=bitcast i8**%e to i8***
%P=load i8**,i8***%O,align 8
%Q=bitcast i8**%P to i8*
br label%R
R:
%S=phi i8*[%Q,%H],[%m,%A]
%T=phi i8**[%P,%H],[%B,%A]
%U=phi i8*[%I,%H],[%G,%A]
store i8*%U,i8**%d,align 8
%V=load i8*,i8**%T,align 8
store i8*%V,i8**%f,align 8
%W=getelementptr inbounds i8,i8*%S,i64 12
%X=bitcast i8*%W to i32*
%Y=load i32,i32*%X,align 4
%Z=getelementptr inbounds i8*,i8**%T,i64 1
%aa=bitcast i8**%Z to i32*
%ab=load i32,i32*%aa,align 4
%ac=call i8*@sml_alloc(i32 inreg 28)#0
%ad=getelementptr inbounds i8,i8*%ac,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 1342177304,i32*%ae,align 4
store i8*%ac,i8**%g,align 8
%af=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%ag=bitcast i8*%ac to i8**
store i8*%af,i8**%ag,align 8
%ah=icmp eq i32%ab,0
%ai=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aj=getelementptr inbounds i8,i8*%ac,i64 8
br i1%ah,label%am,label%ak
ak:
%al=bitcast i8*%aj to i8**
store i8*%ai,i8**%al,align 8
br label%an
am:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aj,i8*%ai,i32%Y,i1 false)
br label%an
an:
%ao=getelementptr inbounds i8,i8*%ac,i64 16
%ap=bitcast i8*%ao to i32*
store i32%ab,i32*%ap,align 4
%aq=getelementptr inbounds i8,i8*%ac,i64 20
%ar=bitcast i8*%aq to i32*
store i32%Y,i32*%ar,align 4
%as=getelementptr inbounds i8,i8*%ac,i64 24
%at=bitcast i8*%as to i32*
store i32%s,i32*%at,align 4
%au=call i8*@sml_alloc(i32 inreg 28)#0
%av=getelementptr inbounds i8,i8*%au,i64 -4
%aw=bitcast i8*%av to i32*
store i32 1342177304,i32*%aw,align 4
%ax=load i8*,i8**%g,align 8
%ay=bitcast i8*%au to i8**
store i8*%ax,i8**%ay,align 8
%az=getelementptr inbounds i8,i8*%au,i64 8
%aA=bitcast i8*%az to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL3mem_361 to void(...)*),void(...)**%aA,align 8
%aB=getelementptr inbounds i8,i8*%au,i64 16
%aC=bitcast i8*%aB to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL3mem_665 to void(...)*),void(...)**%aC,align 8
%aD=getelementptr inbounds i8,i8*%au,i64 24
%aE=bitcast i8*%aD to i32*
store i32 -2147483647,i32*%aE,align 4
%aF=load i8*,i8**%e,align 8
%aG=getelementptr inbounds i8,i8*%aF,i64 16
%aH=bitcast i8*%aG to i32*
%aI=load i32,i32*%aH,align 4
store i8*null,i8**%e,align 8
%aJ=getelementptr inbounds i8,i8*%aF,i64 20
%aK=bitcast i8*%aJ to i32*
%aL=load i32,i32*%aK,align 4
store i8*null,i8**%g,align 8
%aM=call fastcc i8*@_SMLL3mem_361(i8*inreg%ax,i32 inreg%aI,i32 inreg%aL)
%aN=getelementptr inbounds i8,i8*%aM,i64 16
%aO=bitcast i8*%aN to i8*(i8*,i8*)**
%aP=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aO,align 8
%aQ=bitcast i8*%aM to i8**
%aR=load i8*,i8**%aQ,align 8
%aS=bitcast i8**%c to i8***
%aT=load i8**,i8***%aS,align 8
%aU=load i8*,i8**%aT,align 8
%aV=tail call fastcc i8*%aP(i8*inreg%aR,i8*inreg%aU)
ret i8*%aV
}
define internal fastcc i8*@_SMLL6lookup_363(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=getelementptr inbounds i8,i8*%a,i64 8
%i=bitcast i8*%h to i32*
%j=load i32,i32*%i,align 4
%k=getelementptr inbounds i8,i8*%a,i64 12
%l=bitcast i8*%k to i32*
%m=load i32,i32*%l,align 4
%n=call i8*@sml_alloc(i32 inreg 28)#0
%o=getelementptr inbounds i8,i8*%n,i64 -4
%p=bitcast i8*%o to i32*
store i32 1342177304,i32*%p,align 4
store i8*%n,i8**%e,align 8
%q=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%r=bitcast i8*%n to i8**
store i8*%q,i8**%r,align 8
%s=getelementptr inbounds i8,i8*%n,i64 8
%t=bitcast i8*%s to i32*
store i32%j,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%n,i64 12
%v=bitcast i8*%u to i32*
store i32%m,i32*%v,align 4
%w=getelementptr inbounds i8,i8*%n,i64 16
%x=bitcast i8*%w to i32*
store i32%b,i32*%x,align 4
%y=getelementptr inbounds i8,i8*%n,i64 20
%z=bitcast i8*%y to i32*
store i32%c,i32*%z,align 4
%A=getelementptr inbounds i8,i8*%n,i64 24
%B=bitcast i8*%A to i32*
store i32 1,i32*%B,align 4
%C=call i8*@sml_alloc(i32 inreg 28)#0
%D=getelementptr inbounds i8,i8*%C,i64 -4
%E=bitcast i8*%D to i32*
store i32 1342177304,i32*%E,align 4
%F=load i8*,i8**%e,align 8
%G=bitcast i8*%C to i8**
store i8*%F,i8**%G,align 8
%H=getelementptr inbounds i8,i8*%C,i64 8
%I=bitcast i8*%H to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6lookup_362 to void(...)*),void(...)**%I,align 8
%J=getelementptr inbounds i8,i8*%C,i64 16
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6lookup_362 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%C,i64 24
%M=bitcast i8*%L to i32*
store i32 1,i32*%M,align 4
ret i8*%C
}
define internal fastcc i8*@_SMLL6remove_364(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
store i8*%a,i8**%i,align 8
store i8*%b,i8**%c,align 8
%j=load atomic i32,i32*@sml_check_flag unordered,align 4
%k=icmp eq i32%j,0
br i1%k,label%l,label%n
l:
%m=bitcast i8*%b to i8**
br label%r
n:
call void@sml_check(i32 inreg%j)
%o=bitcast i8**%c to i8***
%p=load i8**,i8***%o,align 8
%q=load i8*,i8**%i,align 8
br label%r
r:
%s=phi i8*[%q,%n],[%a,%l]
%t=phi i8**[%p,%n],[%m,%l]
%u=getelementptr inbounds i8,i8*%s,i64 28
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=add i32%w,3
%y=sub i32 0,%w
%z=and i32%x,%y
%A=add i32%w,7
%B=add i32%A,%z
%C=and i32%B,-8
%D=add i32%C,15
%E=and i32%D,-8
%F=getelementptr inbounds i8,i8*%s,i64 36
%G=bitcast i8*%F to i32*
%H=load i32,i32*%G,align 4
%I=add i32%H,7
%J=add i32%I,%E
%K=sub i32 0,%H
%L=and i32%J,%K
%M=and i32%A,%y
%N=add i32%w,-1
%O=and i32%N,%y
%P=add i32%O,%w
%Q=add i32%N,%P
%R=and i32%Q,%y
%S=add i32%A,%R
%T=and i32%S,-8
%U=lshr i32%R,3
%V=lshr i32%O,3
%W=sub nsw i32%U,%V
%X=getelementptr inbounds i8,i8*%s,i64 24
%Y=bitcast i8*%X to i32*
%Z=load i32,i32*%Y,align 4
%aa=shl i32%Z,%W
%ab=or i32%aa,%Z
%ac=or i32%T,4
%ad=add i32%A,%M
%ae=and i32%ad,-8
%af=lshr i32%M,3
%ag=shl i32%Z,%af
%ah=or i32%ag,1
%ai=or i32%ae,4
%aj=and i32%I,%K
%ak=add i32%H,-1
%al=add i32%ak,%P
%am=and i32%al,%K
%an=add i32%I,%am
%ao=and i32%an,-8
%ap=add i32%ao,15
%aq=and i32%ap,-8
%ar=add i32%aq,15
%as=and i32%ar,-8
%at=lshr i32%ap,3
%au=lshr i32%an,3
%av=sub nsw i32%at,%au
%aw=lshr i32%am,3
%ax=sub nsw i32%au,%aw
%ay=sub nsw i32%aw,%V
%az=shl i32 1,%av
%aA=or i32%az,1
%aB=shl i32%aA,%ax
%aC=getelementptr inbounds i8,i8*%s,i64 32
%aD=bitcast i8*%aC to i32*
%aE=load i32,i32*%aD,align 4
%aF=or i32%aB,%aE
%aG=shl i32%aF,%ay
%aH=or i32%aG,%Z
%aI=or i32%as,4
%aJ=add i32%I,%aj
%aK=and i32%aJ,-8
%aL=lshr i32%aj,3
%aM=shl i32%aE,%aL
%aN=or i32%aM,1
%aO=or i32%aK,4
%aP=load i8*,i8**%t,align 8
%aQ=icmp eq i8*%aP,null
br i1%aQ,label%aR,label%a9
aR:
store i8*null,i8**%i,align 8
%aS=load i8*,i8**@_SMLZN7LibBase8NotFoundE,align 8
store i8*%aS,i8**%c,align 8
%aT=call i8*@sml_alloc(i32 inreg 20)#0
%aU=getelementptr inbounds i8,i8*%aT,i64 -4
%aV=bitcast i8*%aU to i32*
store i32 1342177296,i32*%aV,align 4
store i8*%aT,i8**%d,align 8
%aW=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aX=bitcast i8*%aT to i8**
store i8*%aW,i8**%aX,align 8
%aY=getelementptr inbounds i8,i8*%aT,i64 8
%aZ=bitcast i8*%aY to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[52x i8]}>,<{[4x i8],i32,[52x i8]}>*@o,i64 0,i32 2,i64 0),i8**%aZ,align 8
%a0=getelementptr inbounds i8,i8*%aT,i64 16
%a1=bitcast i8*%a0 to i32*
store i32 3,i32*%a1,align 4
%a2=call i8*@sml_alloc(i32 inreg 60)#0
%a3=getelementptr inbounds i8,i8*%a2,i64 -4
%a4=bitcast i8*%a3 to i32*
store i32 1342177336,i32*%a4,align 4
%a5=getelementptr inbounds i8,i8*%a2,i64 56
%a6=bitcast i8*%a5 to i32*
store i32 1,i32*%a6,align 4
%a7=load i8*,i8**%d,align 8
%a8=bitcast i8*%a2 to i8**
store i8*%a7,i8**%a8,align 8
call void@sml_raise(i8*inreg%a2)#1
unreachable
a9:
store i8*%aP,i8**%d,align 8
%ba=icmp eq i32%Z,0
br i1%ba,label%bg,label%bb
bb:
%bc=sext i32%z to i64
%bd=getelementptr inbounds i8,i8*%aP,i64%bc
%be=bitcast i8*%bd to i8**
%bf=load i8*,i8**%be,align 8
br label%br
bg:
%bh=call i8*@sml_alloc(i32 inreg%w)#0
%bi=getelementptr inbounds i8,i8*%bh,i64 -4
%bj=bitcast i8*%bi to i32*
store i32%w,i32*%bj,align 4
%bk=load i8*,i8**%d,align 8
%bl=sext i32%z to i64
%bm=getelementptr inbounds i8,i8*%bk,i64%bl
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bh,i8*%bm,i32%w,i1 false)
%bn=load i8*,i8**%i,align 8
%bo=getelementptr inbounds i8,i8*%bn,i64 32
%bp=bitcast i8*%bo to i32*
%bq=load i32,i32*%bp,align 4
br label%br
br:
%bs=phi i8*[%bn,%bg],[%s,%bb]
%bt=phi i32[%bq,%bg],[%aE,%bb]
%bu=phi i8*[%bk,%bg],[%aP,%bb]
%bv=phi i8*[%bh,%bg],[%bf,%bb]
store i8*%bv,i8**%e,align 8
%bw=sext i32%C to i64
%bx=getelementptr inbounds i8,i8*%bu,i64%bw
%by=bitcast i8*%bx to i8**
%bz=load i8*,i8**%by,align 8
store i8*%bz,i8**%f,align 8
%bA=sext i32%E to i64
%bB=getelementptr inbounds i8,i8*%bu,i64%bA
%bC=bitcast i8*%bB to i8**
%bD=load i8*,i8**%bC,align 8
store i8*%bD,i8**%g,align 8
%bE=icmp eq i32%bt,0
br i1%bE,label%bK,label%bF
bF:
%bG=sext i32%L to i64
%bH=getelementptr inbounds i8,i8*%bu,i64%bG
%bI=bitcast i8*%bH to i8**
%bJ=load i8*,i8**%bI,align 8
br label%bV
bK:
%bL=getelementptr inbounds i8,i8*%bs,i64 36
%bM=bitcast i8*%bL to i32*
%bN=load i32,i32*%bM,align 4
%bO=call i8*@sml_alloc(i32 inreg%bN)#0
%bP=getelementptr inbounds i8,i8*%bO,i64 -4
%bQ=bitcast i8*%bP to i32*
store i32%bN,i32*%bQ,align 4
%bR=load i8*,i8**%d,align 8
%bS=sext i32%L to i64
%bT=getelementptr inbounds i8,i8*%bR,i64%bS
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bO,i8*%bT,i32%bN,i1 false)
%bU=load i8*,i8**%i,align 8
br label%bV
bV:
%bW=phi i8*[%bU,%bK],[%bs,%bF]
%bX=phi i8*[%bO,%bK],[%bJ,%bF]
store i8*%bX,i8**%h,align 8
%bY=getelementptr inbounds i8,i8*%bW,i64 24
%bZ=bitcast i8*%bY to i32*
%b0=load i32,i32*%bZ,align 4
%b1=icmp eq i32%b0,0
br i1%b1,label%b9,label%b2
b2:
%b3=bitcast i8*%bW to i8**
%b4=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%b5=sext i32%M to i64
%b6=getelementptr inbounds i8,i8*%b4,i64%b5
%b7=bitcast i8*%b6 to i8**
%b8=load i8*,i8**%b7,align 8
br label%cp
b9:
%ca=getelementptr inbounds i8,i8*%bW,i64 28
%cb=bitcast i8*%ca to i32*
%cc=load i32,i32*%cb,align 4
%cd=call i8*@sml_alloc(i32 inreg%cc)#0
%ce=getelementptr inbounds i8,i8*%cd,i64 -4
%cf=bitcast i8*%ce to i32*
store i32%cc,i32*%cf,align 4
%cg=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ch=sext i32%M to i64
%ci=getelementptr inbounds i8,i8*%cg,i64%ch
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cd,i8*%ci,i32%cc,i1 false)
%cj=bitcast i8**%i to i8***
%ck=load i8**,i8***%cj,align 8
%cl=bitcast i8**%ck to i8*
%cm=getelementptr inbounds i8*,i8**%ck,i64 3
%cn=bitcast i8**%cm to i32*
%co=load i32,i32*%cn,align 4
br label%cp
cp:
%cq=phi i32[%co,%b9],[%b0,%b2]
%cr=phi i8*[%cl,%b9],[%bW,%b2]
%cs=phi i8**[%ck,%b9],[%b3,%b2]
%ct=phi i8*[%cd,%b9],[%b8,%b2]
store i8*%ct,i8**%c,align 8
%cu=load i8*,i8**%cs,align 8
%cv=getelementptr inbounds i8,i8*%cu,i64 16
%cw=bitcast i8*%cv to i8*(i8*,i8*)**
%cx=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%cw,align 8
%cy=bitcast i8*%cu to i8**
%cz=load i8*,i8**%cy,align 8
store i8*%cz,i8**%d,align 8
%cA=getelementptr inbounds i8,i8*%cr,i64 28
%cB=bitcast i8*%cA to i32*
%cC=load i32,i32*%cB,align 4
%cD=call i8*@sml_alloc(i32 inreg%ac)#0
%cE=or i32%T,1342177280
%cF=getelementptr inbounds i8,i8*%cD,i64 -4
%cG=bitcast i8*%cF to i32*
store i32%cE,i32*%cG,align 4
call void@llvm.memset.p0i8.i32(i8*%cD,i8 0,i32%ac,i1 false)
%cH=icmp eq i32%cq,0
%cI=load i8*,i8**%e,align 8
%cJ=sext i32%O to i64
%cK=getelementptr inbounds i8,i8*%cD,i64%cJ
br i1%cH,label%cR,label%cL
cL:
%cM=bitcast i8*%cK to i8**
store i8*%cI,i8**%cM,align 8
%cN=load i8*,i8**%c,align 8
%cO=sext i32%R to i64
%cP=getelementptr inbounds i8,i8*%cD,i64%cO
%cQ=bitcast i8*%cP to i8**
store i8*%cN,i8**%cQ,align 8
br label%cV
cR:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cK,i8*%cI,i32%cC,i1 false)
%cS=load i8*,i8**%c,align 8
%cT=sext i32%R to i64
%cU=getelementptr inbounds i8,i8*%cD,i64%cT
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cU,i8*%cS,i32%cC,i1 false)
br label%cV
cV:
%cW=sext i32%T to i64
%cX=getelementptr inbounds i8,i8*%cD,i64%cW
%cY=bitcast i8*%cX to i32*
store i32%ab,i32*%cY,align 4
%cZ=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%c0=call fastcc i8*%cx(i8*inreg%cZ,i8*inreg%cD)
%c1=bitcast i8*%c0 to i32*
%c2=load i32,i32*%c1,align 4
switch i32%c2,label%c3[
i32 1,label%f8
i32 2,label%dU
]
c3:
store i8*null,i8**%e,align 8
store i8*null,i8**%c,align 8
%c4=load i8*,i8**%i,align 8
%c5=getelementptr inbounds i8,i8*%c4,i64 16
%c6=bitcast i8*%c5 to i8**
%c7=load i8*,i8**%c6,align 8
%c8=getelementptr inbounds i8,i8*%c4,i64 32
%c9=bitcast i8*%c8 to i32*
%da=load i32,i32*%c9,align 4
%db=getelementptr inbounds i8,i8*%c4,i64 36
%dc=bitcast i8*%db to i32*
%dd=load i32,i32*%dc,align 4
%de=call fastcc i8*@_SMLL7delete_G_330(i8*inreg%c7,i32 inreg%da,i32 inreg%dd)
%df=getelementptr inbounds i8,i8*%de,i64 16
%dg=bitcast i8*%df to i8*(i8*,i8*)**
%dh=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%dg,align 8
%di=bitcast i8*%de to i8**
%dj=load i8*,i8**%di,align 8
store i8*%dj,i8**%c,align 8
%dk=call i8*@sml_alloc(i32 inreg 20)#0
%dl=getelementptr inbounds i8,i8*%dk,i64 -4
%dm=bitcast i8*%dl to i32*
store i32 1342177296,i32*%dm,align 4
%dn=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%do=bitcast i8*%dk to i8**
store i8*%dn,i8**%do,align 8
%dp=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%dq=getelementptr inbounds i8,i8*%dk,i64 8
%dr=bitcast i8*%dq to i8**
store i8*%dp,i8**%dr,align 8
%ds=getelementptr inbounds i8,i8*%dk,i64 16
%dt=bitcast i8*%ds to i32*
store i32 3,i32*%dt,align 4
%du=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%dv=call fastcc i8*%dh(i8*inreg%du,i8*inreg%dk)
store i8*%dv,i8**%c,align 8
%dw=load i8*,i8**%i,align 8
%dx=getelementptr inbounds i8,i8*%dw,i64 36
%dy=bitcast i8*%dx to i32*
%dz=load i32,i32*%dy,align 4
store i8*null,i8**%i,align 8
%dA=getelementptr inbounds i8,i8*%dw,i64 32
%dB=bitcast i8*%dA to i32*
%dC=load i32,i32*%dB,align 4
%dD=call i8*@sml_alloc(i32 inreg%aO)#0
%dE=or i32%aK,1342177280
%dF=getelementptr inbounds i8,i8*%dD,i64 -4
%dG=bitcast i8*%dF to i32*
store i32%dE,i32*%dG,align 4
call void@llvm.memset.p0i8.i32(i8*%dD,i8 0,i32%aO,i1 false)
%dH=load i8*,i8**%c,align 8
%dI=bitcast i8*%dD to i8**
store i8*%dH,i8**%dI,align 8
%dJ=icmp eq i32%dC,0
%dK=load i8*,i8**%h,align 8
%dL=sext i32%aj to i64
%dM=getelementptr inbounds i8,i8*%dD,i64%dL
br i1%dJ,label%dP,label%dN
dN:
%dO=bitcast i8*%dM to i8**
store i8*%dK,i8**%dO,align 8
br label%dQ
dP:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dM,i8*%dK,i32%dz,i1 false)
br label%dQ
dQ:
%dR=sext i32%aK to i64
%dS=getelementptr inbounds i8,i8*%dD,i64%dR
%dT=bitcast i8*%dS to i32*
store i32%aN,i32*%dT,align 4
ret i8*%dD
dU:
%dV=load i8*,i8**%i,align 8
%dW=getelementptr inbounds i8,i8*%dV,i64 28
%dX=bitcast i8*%dW to i32*
%dY=load i32,i32*%dX,align 4
%dZ=getelementptr inbounds i8,i8*%dV,i64 24
%d0=bitcast i8*%dZ to i32*
%d1=load i32,i32*%d0,align 4
%d2=call i8*@sml_alloc(i32 inreg%ai)#0
%d3=or i32%ae,1342177280
%d4=getelementptr inbounds i8,i8*%d2,i64 -4
%d5=bitcast i8*%d4 to i32*
store i32%d3,i32*%d5,align 4
call void@llvm.memset.p0i8.i32(i8*%d2,i8 0,i32%ai,i1 false)
%d6=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%d7=bitcast i8*%d2 to i8**
store i8*%d6,i8**%d7,align 8
%d8=icmp eq i32%d1,0
%d9=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ea=sext i32%M to i64
%eb=getelementptr inbounds i8,i8*%d2,i64%ea
br i1%d8,label%ee,label%ec
ec:
%ed=bitcast i8*%eb to i8**
store i8*%d9,i8**%ed,align 8
br label%ef
ee:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%eb,i8*%d9,i32%dY,i1 false)
br label%ef
ef:
%eg=sext i32%ae to i64
%eh=getelementptr inbounds i8,i8*%d2,i64%eg
%ei=bitcast i8*%eh to i32*
store i32%ah,i32*%ei,align 4
%ej=load i8*,i8**%i,align 8
%ek=call fastcc i8*@_SMLL6remove_364(i8*inreg%ej,i8*inreg%d2)
store i8*%ek,i8**%d,align 8
%el=bitcast i8*%ek to i8**
%em=load i8*,i8**%el,align 8
store i8*%em,i8**%c,align 8
%en=load i8*,i8**%i,align 8
%eo=getelementptr inbounds i8,i8*%en,i64 32
%ep=bitcast i8*%eo to i32*
%eq=load i32,i32*%ep,align 4
%er=icmp eq i32%eq,0
br i1%er,label%ex,label%es
es:
store i8*null,i8**%d,align 8
%et=sext i32%aj to i64
%eu=getelementptr inbounds i8,i8*%ek,i64%et
%ev=bitcast i8*%eu to i8**
%ew=load i8*,i8**%ev,align 8
br label%eL
ex:
%ey=getelementptr inbounds i8,i8*%en,i64 36
%ez=bitcast i8*%ey to i32*
%eA=load i32,i32*%ez,align 4
%eB=call i8*@sml_alloc(i32 inreg%eA)#0
%eC=getelementptr inbounds i8,i8*%eB,i64 -4
%eD=bitcast i8*%eC to i32*
store i32%eA,i32*%eD,align 4
%eE=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%eF=sext i32%aj to i64
%eG=getelementptr inbounds i8,i8*%eE,i64%eF
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%eB,i8*%eG,i32%eA,i1 false)
%eH=load i8*,i8**%i,align 8
%eI=getelementptr inbounds i8,i8*%eH,i64 32
%eJ=bitcast i8*%eI to i32*
%eK=load i32,i32*%eJ,align 4
br label%eL
eL:
%eM=phi i32[%eK,%ex],[%eq,%es]
%eN=phi i8*[%eH,%ex],[%en,%es]
%eO=phi i8*[%eB,%ex],[%ew,%es]
store i8*%eO,i8**%d,align 8
%eP=getelementptr inbounds i8,i8*%eN,i64 8
%eQ=bitcast i8*%eP to i8**
%eR=load i8*,i8**%eQ,align 8
%eS=getelementptr inbounds i8,i8*%eN,i64 36
%eT=bitcast i8*%eS to i32*
%eU=load i32,i32*%eT,align 4
%eV=call fastcc i8*@_SMLL2T_G_322(i8*inreg%eR,i32 inreg%eM,i32 inreg%eU)
%eW=getelementptr inbounds i8,i8*%eV,i64 16
%eX=bitcast i8*%eW to i8*(i8*,i8*)**
%eY=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%eX,align 8
%eZ=bitcast i8*%eV to i8**
%e0=load i8*,i8**%eZ,align 8
store i8*%e0,i8**%g,align 8
%e1=load i8*,i8**%i,align 8
%e2=getelementptr inbounds i8,i8*%e1,i64 28
%e3=bitcast i8*%e2 to i32*
%e4=load i32,i32*%e3,align 4
%e5=getelementptr inbounds i8,i8*%e1,i64 24
%e6=bitcast i8*%e5 to i32*
%e7=load i32,i32*%e6,align 4
%e8=getelementptr inbounds i8,i8*%e1,i64 36
%e9=bitcast i8*%e8 to i32*
%fa=load i32,i32*%e9,align 4
%fb=getelementptr inbounds i8,i8*%e1,i64 32
%fc=bitcast i8*%fb to i32*
%fd=load i32,i32*%fc,align 4
%fe=call i8*@sml_alloc(i32 inreg%aI)#0
%ff=or i32%as,1342177280
%fg=getelementptr inbounds i8,i8*%fe,i64 -4
%fh=bitcast i8*%fg to i32*
store i32%ff,i32*%fh,align 4
call void@llvm.memset.p0i8.i32(i8*%fe,i8 0,i32%aI,i1 false)
%fi=icmp eq i32%e7,0
%fj=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%fk=getelementptr inbounds i8,i8*%fe,i64%cJ
br i1%fi,label%fn,label%fl
fl:
%fm=bitcast i8*%fk to i8**
store i8*%fj,i8**%fm,align 8
br label%fo
fn:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%fk,i8*%fj,i32%e4,i1 false)
br label%fo
fo:
%fp=icmp eq i32%fd,0
%fq=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%fr=sext i32%am to i64
%fs=getelementptr inbounds i8,i8*%fe,i64%fr
br i1%fp,label%fv,label%ft
ft:
%fu=bitcast i8*%fs to i8**
store i8*%fq,i8**%fu,align 8
br label%fw
fv:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%fs,i8*%fq,i32%fa,i1 false)
br label%fw
fw:
%fx=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%fy=sext i32%ao to i64
%fz=getelementptr inbounds i8,i8*%fe,i64%fy
%fA=bitcast i8*%fz to i8**
store i8*%fx,i8**%fA,align 8
%fB=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%fC=sext i32%aq to i64
%fD=getelementptr inbounds i8,i8*%fe,i64%fC
%fE=bitcast i8*%fD to i8**
store i8*%fB,i8**%fE,align 8
%fF=sext i32%as to i64
%fG=getelementptr inbounds i8,i8*%fe,i64%fF
%fH=bitcast i8*%fG to i32*
store i32%aH,i32*%fH,align 4
%fI=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%fJ=call fastcc i8*%eY(i8*inreg%fI,i8*inreg%fe)
store i8*%fJ,i8**%c,align 8
%fK=load i8*,i8**%i,align 8
%fL=getelementptr inbounds i8,i8*%fK,i64 36
%fM=bitcast i8*%fL to i32*
%fN=load i32,i32*%fM,align 4
store i8*null,i8**%i,align 8
%fO=getelementptr inbounds i8,i8*%fK,i64 32
%fP=bitcast i8*%fO to i32*
%fQ=load i32,i32*%fP,align 4
%fR=call i8*@sml_alloc(i32 inreg%aO)#0
%fS=or i32%aK,1342177280
%fT=getelementptr inbounds i8,i8*%fR,i64 -4
%fU=bitcast i8*%fT to i32*
store i32%fS,i32*%fU,align 4
call void@llvm.memset.p0i8.i32(i8*%fR,i8 0,i32%aO,i1 false)
%fV=load i8*,i8**%c,align 8
%fW=bitcast i8*%fR to i8**
store i8*%fV,i8**%fW,align 8
%fX=icmp eq i32%fQ,0
%fY=load i8*,i8**%d,align 8
%fZ=sext i32%aj to i64
%f0=getelementptr inbounds i8,i8*%fR,i64%fZ
br i1%fX,label%f3,label%f1
f1:
%f2=bitcast i8*%f0 to i8**
store i8*%fY,i8**%f2,align 8
br label%f4
f3:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%f0,i8*%fY,i32%fN,i1 false)
br label%f4
f4:
%f5=sext i32%aK to i64
%f6=getelementptr inbounds i8,i8*%fR,i64%f5
%f7=bitcast i8*%f6 to i32*
store i32%aN,i32*%f7,align 4
ret i8*%fR
f8:
%f9=load i8*,i8**%i,align 8
%ga=getelementptr inbounds i8,i8*%f9,i64 28
%gb=bitcast i8*%ga to i32*
%gc=load i32,i32*%gb,align 4
%gd=getelementptr inbounds i8,i8*%f9,i64 24
%ge=bitcast i8*%gd to i32*
%gf=load i32,i32*%ge,align 4
%gg=call i8*@sml_alloc(i32 inreg%ai)#0
%gh=or i32%ae,1342177280
%gi=getelementptr inbounds i8,i8*%gg,i64 -4
%gj=bitcast i8*%gi to i32*
store i32%gh,i32*%gj,align 4
call void@llvm.memset.p0i8.i32(i8*%gg,i8 0,i32%ai,i1 false)
%gk=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%gl=bitcast i8*%gg to i8**
store i8*%gk,i8**%gl,align 8
%gm=icmp eq i32%gf,0
%gn=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%go=sext i32%M to i64
%gp=getelementptr inbounds i8,i8*%gg,i64%go
br i1%gm,label%gs,label%gq
gq:
%gr=bitcast i8*%gp to i8**
store i8*%gn,i8**%gr,align 8
br label%gt
gs:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%gp,i8*%gn,i32%gc,i1 false)
br label%gt
gt:
%gu=sext i32%ae to i64
%gv=getelementptr inbounds i8,i8*%gg,i64%gu
%gw=bitcast i8*%gv to i32*
store i32%ah,i32*%gw,align 4
%gx=load i8*,i8**%i,align 8
%gy=call fastcc i8*@_SMLL6remove_364(i8*inreg%gx,i8*inreg%gg)
store i8*%gy,i8**%d,align 8
%gz=bitcast i8*%gy to i8**
%gA=load i8*,i8**%gz,align 8
store i8*%gA,i8**%c,align 8
%gB=load i8*,i8**%i,align 8
%gC=getelementptr inbounds i8,i8*%gB,i64 32
%gD=bitcast i8*%gC to i32*
%gE=load i32,i32*%gD,align 4
%gF=icmp eq i32%gE,0
br i1%gF,label%gL,label%gG
gG:
store i8*null,i8**%d,align 8
%gH=sext i32%aj to i64
%gI=getelementptr inbounds i8,i8*%gy,i64%gH
%gJ=bitcast i8*%gI to i8**
%gK=load i8*,i8**%gJ,align 8
br label%gZ
gL:
%gM=getelementptr inbounds i8,i8*%gB,i64 36
%gN=bitcast i8*%gM to i32*
%gO=load i32,i32*%gN,align 4
%gP=call i8*@sml_alloc(i32 inreg%gO)#0
%gQ=getelementptr inbounds i8,i8*%gP,i64 -4
%gR=bitcast i8*%gQ to i32*
store i32%gO,i32*%gR,align 4
%gS=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%gT=sext i32%aj to i64
%gU=getelementptr inbounds i8,i8*%gS,i64%gT
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%gP,i8*%gU,i32%gO,i1 false)
%gV=load i8*,i8**%i,align 8
%gW=getelementptr inbounds i8,i8*%gV,i64 32
%gX=bitcast i8*%gW to i32*
%gY=load i32,i32*%gX,align 4
br label%gZ
gZ:
%g0=phi i32[%gY,%gL],[%gE,%gG]
%g1=phi i8*[%gV,%gL],[%gB,%gG]
%g2=phi i8*[%gP,%gL],[%gK,%gG]
store i8*%g2,i8**%d,align 8
%g3=getelementptr inbounds i8,i8*%g1,i64 8
%g4=bitcast i8*%g3 to i8**
%g5=load i8*,i8**%g4,align 8
%g6=getelementptr inbounds i8,i8*%g1,i64 36
%g7=bitcast i8*%g6 to i32*
%g8=load i32,i32*%g7,align 4
%g9=call fastcc i8*@_SMLL2T_G_322(i8*inreg%g5,i32 inreg%g0,i32 inreg%g8)
%ha=getelementptr inbounds i8,i8*%g9,i64 16
%hb=bitcast i8*%ha to i8*(i8*,i8*)**
%hc=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%hb,align 8
%hd=bitcast i8*%g9 to i8**
%he=load i8*,i8**%hd,align 8
store i8*%he,i8**%f,align 8
%hf=load i8*,i8**%i,align 8
%hg=getelementptr inbounds i8,i8*%hf,i64 28
%hh=bitcast i8*%hg to i32*
%hi=load i32,i32*%hh,align 4
%hj=getelementptr inbounds i8,i8*%hf,i64 24
%hk=bitcast i8*%hj to i32*
%hl=load i32,i32*%hk,align 4
%hm=getelementptr inbounds i8,i8*%hf,i64 36
%hn=bitcast i8*%hm to i32*
%ho=load i32,i32*%hn,align 4
%hp=getelementptr inbounds i8,i8*%hf,i64 32
%hq=bitcast i8*%hp to i32*
%hr=load i32,i32*%hq,align 4
%hs=call i8*@sml_alloc(i32 inreg%aI)#0
%ht=or i32%as,1342177280
%hu=getelementptr inbounds i8,i8*%hs,i64 -4
%hv=bitcast i8*%hu to i32*
store i32%ht,i32*%hv,align 4
call void@llvm.memset.p0i8.i32(i8*%hs,i8 0,i32%aI,i1 false)
%hw=icmp eq i32%hl,0
%hx=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%hy=getelementptr inbounds i8,i8*%hs,i64%cJ
br i1%hw,label%hB,label%hz
hz:
%hA=bitcast i8*%hy to i8**
store i8*%hx,i8**%hA,align 8
br label%hC
hB:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%hy,i8*%hx,i32%hi,i1 false)
br label%hC
hC:
%hD=icmp eq i32%hr,0
%hE=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%hF=sext i32%am to i64
%hG=getelementptr inbounds i8,i8*%hs,i64%hF
br i1%hD,label%hJ,label%hH
hH:
%hI=bitcast i8*%hG to i8**
store i8*%hE,i8**%hI,align 8
br label%hK
hJ:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%hG,i8*%hE,i32%ho,i1 false)
br label%hK
hK:
%hL=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%hM=sext i32%ao to i64
%hN=getelementptr inbounds i8,i8*%hs,i64%hM
%hO=bitcast i8*%hN to i8**
store i8*%hL,i8**%hO,align 8
%hP=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%hQ=sext i32%aq to i64
%hR=getelementptr inbounds i8,i8*%hs,i64%hQ
%hS=bitcast i8*%hR to i8**
store i8*%hP,i8**%hS,align 8
%hT=sext i32%as to i64
%hU=getelementptr inbounds i8,i8*%hs,i64%hT
%hV=bitcast i8*%hU to i32*
store i32%aH,i32*%hV,align 4
%hW=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%hX=call fastcc i8*%hc(i8*inreg%hW,i8*inreg%hs)
store i8*%hX,i8**%c,align 8
%hY=load i8*,i8**%i,align 8
%hZ=getelementptr inbounds i8,i8*%hY,i64 36
%h0=bitcast i8*%hZ to i32*
%h1=load i32,i32*%h0,align 4
store i8*null,i8**%i,align 8
%h2=getelementptr inbounds i8,i8*%hY,i64 32
%h3=bitcast i8*%h2 to i32*
%h4=load i32,i32*%h3,align 4
%h5=call i8*@sml_alloc(i32 inreg%aO)#0
%h6=or i32%aK,1342177280
%h7=getelementptr inbounds i8,i8*%h5,i64 -4
%h8=bitcast i8*%h7 to i32*
store i32%h6,i32*%h8,align 4
call void@llvm.memset.p0i8.i32(i8*%h5,i8 0,i32%aO,i1 false)
%h9=load i8*,i8**%c,align 8
%ia=bitcast i8*%h5 to i8**
store i8*%h9,i8**%ia,align 8
%ib=icmp eq i32%h4,0
%ic=load i8*,i8**%d,align 8
%id=sext i32%aj to i64
%ie=getelementptr inbounds i8,i8*%h5,i64%id
br i1%ib,label%ih,label%if
if:
%ig=bitcast i8*%ie to i8**
store i8*%ic,i8**%ig,align 8
br label%ii
ih:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ie,i8*%ic,i32%h1,i1 false)
br label%ii
ii:
%ij=sext i32%aK to i64
%ik=getelementptr inbounds i8,i8*%h5,i64%ij
%il=bitcast i8*%ik to i32*
store i32%aN,i32*%il,align 4
ret i8*%h5
}
define internal fastcc i8*@_SMLL6remove_366(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%d,align 8
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
store i8*%l,i8**%e,align 8
%m=getelementptr inbounds i8,i8*%a,i64 16
%n=bitcast i8*%m to i8**
%o=load i8*,i8**%n,align 8
store i8*%o,i8**%f,align 8
%p=getelementptr inbounds i8,i8*%a,i64 24
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=getelementptr inbounds i8,i8*%a,i64 28
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=call i8*@sml_alloc(i32 inreg 44)#0
%w=getelementptr inbounds i8,i8*%v,i64 -4
%x=bitcast i8*%w to i32*
store i32 1342177320,i32*%x,align 4
store i8*%v,i8**%g,align 8
%y=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%z=bitcast i8*%v to i8**
store i8*%y,i8**%z,align 8
%A=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%B=getelementptr inbounds i8,i8*%v,i64 8
%C=bitcast i8*%B to i8**
store i8*%A,i8**%C,align 8
%D=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%E=getelementptr inbounds i8,i8*%v,i64 16
%F=bitcast i8*%E to i8**
store i8*%D,i8**%F,align 8
%G=getelementptr inbounds i8,i8*%v,i64 24
%H=bitcast i8*%G to i32*
store i32%r,i32*%H,align 4
%I=getelementptr inbounds i8,i8*%v,i64 28
%J=bitcast i8*%I to i32*
store i32%u,i32*%J,align 4
%K=getelementptr inbounds i8,i8*%v,i64 32
%L=bitcast i8*%K to i32*
store i32%b,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%v,i64 36
%N=bitcast i8*%M to i32*
store i32%c,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%v,i64 40
%P=bitcast i8*%O to i32*
store i32 7,i32*%P,align 4
%Q=call i8*@sml_alloc(i32 inreg 28)#0
%R=getelementptr inbounds i8,i8*%Q,i64 -4
%S=bitcast i8*%R to i32*
store i32 1342177304,i32*%S,align 4
%T=load i8*,i8**%g,align 8
%U=bitcast i8*%Q to i8**
store i8*%T,i8**%U,align 8
%V=getelementptr inbounds i8,i8*%Q,i64 8
%W=bitcast i8*%V to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6remove_364 to void(...)*),void(...)**%W,align 8
%X=getelementptr inbounds i8,i8*%Q,i64 16
%Y=bitcast i8*%X to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6remove_364 to void(...)*),void(...)**%Y,align 8
%Z=getelementptr inbounds i8,i8*%Q,i64 24
%aa=bitcast i8*%Z to i32*
store i32 -2147483647,i32*%aa,align 4
ret i8*%Q
}
define internal fastcc i8*@_SMLL7removei_367(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
store i8*%a,i8**%j,align 8
store i8*%b,i8**%c,align 8
%k=load atomic i32,i32*@sml_check_flag unordered,align 4
%l=icmp eq i32%k,0
br i1%l,label%m,label%o
m:
%n=bitcast i8*%b to i8**
br label%s
o:
call void@sml_check(i32 inreg%k)
%p=bitcast i8**%c to i8***
%q=load i8**,i8***%p,align 8
%r=load i8*,i8**%j,align 8
br label%s
s:
%t=phi i8*[%r,%o],[%a,%m]
%u=phi i8**[%q,%o],[%n,%m]
%v=getelementptr inbounds i8,i8*%t,i64 28
%w=bitcast i8*%v to i32*
%x=load i32,i32*%w,align 4
%y=add i32%x,3
%z=sub i32 0,%x
%A=and i32%y,%z
%B=add i32%x,7
%C=add i32%B,%A
%D=and i32%C,-8
%E=add i32%D,15
%F=and i32%E,-8
%G=getelementptr inbounds i8,i8*%t,i64 36
%H=bitcast i8*%G to i32*
%I=load i32,i32*%H,align 4
%J=add i32%I,7
%K=add i32%J,%F
%L=sub i32 0,%I
%M=and i32%K,%L
%N=and i32%B,%z
%O=add i32%x,-1
%P=and i32%O,%z
%Q=add i32%P,%x
%R=add i32%O,%Q
%S=and i32%R,%z
%T=add i32%B,%S
%U=and i32%T,-8
%V=lshr i32%S,3
%W=lshr i32%P,3
%X=sub nsw i32%V,%W
%Y=getelementptr inbounds i8,i8*%t,i64 24
%Z=bitcast i8*%Y to i32*
%aa=load i32,i32*%Z,align 4
%ab=shl i32%aa,%X
%ac=or i32%ab,%aa
%ad=or i32%U,4
%ae=add i32%B,%N
%af=and i32%ae,-8
%ag=lshr i32%N,3
%ah=shl i32%aa,%ag
%ai=or i32%ah,1
%aj=or i32%af,4
%ak=add i32%Q,7
%al=and i32%ak,-8
%am=add i32%J,%al
%an=and i32%am,%L
%ao=add i32%I,-1
%ap=add i32%ao,%Q
%aq=and i32%ap,%L
%ar=add i32%J,%aq
%as=and i32%ar,-8
%at=add i32%as,15
%au=and i32%at,-8
%av=add i32%au,15
%aw=and i32%av,-8
%ax=lshr i32%at,3
%ay=lshr i32%ar,3
%az=sub nsw i32%ax,%ay
%aA=lshr i32%aq,3
%aB=sub nsw i32%ay,%aA
%aC=sub nsw i32%aA,%W
%aD=shl i32 1,%az
%aE=or i32%aD,1
%aF=shl i32%aE,%aB
%aG=getelementptr inbounds i8,i8*%t,i64 32
%aH=bitcast i8*%aG to i32*
%aI=load i32,i32*%aH,align 4
%aJ=or i32%aF,%aI
%aK=shl i32%aJ,%aC
%aL=or i32%aK,%aa
%aM=or i32%aw,4
%aN=add i32%J,%an
%aO=and i32%aN,-8
%aP=lshr i32%an,3
%aQ=lshr i32%ak,3
%aR=sub nsw i32%aP,%aQ
%aS=sub nsw i32%aQ,%W
%aT=shl i32%aI,%aR
%aU=or i32%aT,1
%aV=shl i32%aU,%aS
%aW=or i32%aV,%aa
%aX=or i32%aO,4
%aY=load i8*,i8**%u,align 8
%aZ=icmp eq i8*%aY,null
br i1%aZ,label%a0,label%bi
a0:
store i8*null,i8**%j,align 8
%a1=load i8*,i8**@_SMLZN7LibBase8NotFoundE,align 8
store i8*%a1,i8**%c,align 8
%a2=call i8*@sml_alloc(i32 inreg 20)#0
%a3=getelementptr inbounds i8,i8*%a2,i64 -4
%a4=bitcast i8*%a3 to i32*
store i32 1342177296,i32*%a4,align 4
store i8*%a2,i8**%d,align 8
%a5=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%a6=bitcast i8*%a2 to i8**
store i8*%a5,i8**%a6,align 8
%a7=getelementptr inbounds i8,i8*%a2,i64 8
%a8=bitcast i8*%a7 to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[52x i8]}>,<{[4x i8],i32,[52x i8]}>*@p,i64 0,i32 2,i64 0),i8**%a8,align 8
%a9=getelementptr inbounds i8,i8*%a2,i64 16
%ba=bitcast i8*%a9 to i32*
store i32 3,i32*%ba,align 4
%bb=call i8*@sml_alloc(i32 inreg 60)#0
%bc=getelementptr inbounds i8,i8*%bb,i64 -4
%bd=bitcast i8*%bc to i32*
store i32 1342177336,i32*%bd,align 4
%be=getelementptr inbounds i8,i8*%bb,i64 56
%bf=bitcast i8*%be to i32*
store i32 1,i32*%bf,align 4
%bg=load i8*,i8**%d,align 8
%bh=bitcast i8*%bb to i8**
store i8*%bg,i8**%bh,align 8
call void@sml_raise(i8*inreg%bb)#1
unreachable
bi:
store i8*%aY,i8**%d,align 8
%bj=icmp eq i32%aa,0
br i1%bj,label%bp,label%bk
bk:
%bl=sext i32%A to i64
%bm=getelementptr inbounds i8,i8*%aY,i64%bl
%bn=bitcast i8*%bm to i8**
%bo=load i8*,i8**%bn,align 8
br label%bA
bp:
%bq=call i8*@sml_alloc(i32 inreg%x)#0
%br=getelementptr inbounds i8,i8*%bq,i64 -4
%bs=bitcast i8*%br to i32*
store i32%x,i32*%bs,align 4
%bt=load i8*,i8**%d,align 8
%bu=sext i32%A to i64
%bv=getelementptr inbounds i8,i8*%bt,i64%bu
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bq,i8*%bv,i32%x,i1 false)
%bw=load i8*,i8**%j,align 8
%bx=getelementptr inbounds i8,i8*%bw,i64 32
%by=bitcast i8*%bx to i32*
%bz=load i32,i32*%by,align 4
br label%bA
bA:
%bB=phi i8*[%bw,%bp],[%t,%bk]
%bC=phi i32[%bz,%bp],[%aI,%bk]
%bD=phi i8*[%bt,%bp],[%aY,%bk]
%bE=phi i8*[%bq,%bp],[%bo,%bk]
store i8*%bE,i8**%f,align 8
%bF=sext i32%D to i64
%bG=getelementptr inbounds i8,i8*%bD,i64%bF
%bH=bitcast i8*%bG to i8**
%bI=load i8*,i8**%bH,align 8
store i8*%bI,i8**%g,align 8
%bJ=sext i32%F to i64
%bK=getelementptr inbounds i8,i8*%bD,i64%bJ
%bL=bitcast i8*%bK to i8**
%bM=load i8*,i8**%bL,align 8
store i8*%bM,i8**%h,align 8
%bN=icmp eq i32%bC,0
br i1%bN,label%bT,label%bO
bO:
%bP=sext i32%M to i64
%bQ=getelementptr inbounds i8,i8*%bD,i64%bP
%bR=bitcast i8*%bQ to i8**
%bS=load i8*,i8**%bR,align 8
br label%b4
bT:
%bU=getelementptr inbounds i8,i8*%bB,i64 36
%bV=bitcast i8*%bU to i32*
%bW=load i32,i32*%bV,align 4
%bX=call i8*@sml_alloc(i32 inreg%bW)#0
%bY=getelementptr inbounds i8,i8*%bX,i64 -4
%bZ=bitcast i8*%bY to i32*
store i32%bW,i32*%bZ,align 4
%b0=load i8*,i8**%d,align 8
%b1=sext i32%M to i64
%b2=getelementptr inbounds i8,i8*%b0,i64%b1
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bX,i8*%b2,i32%bW,i1 false)
%b3=load i8*,i8**%j,align 8
br label%b4
b4:
%b5=phi i8*[%b3,%bT],[%bB,%bO]
%b6=phi i8*[%bX,%bT],[%bS,%bO]
store i8*%b6,i8**%i,align 8
%b7=getelementptr inbounds i8,i8*%b5,i64 24
%b8=bitcast i8*%b7 to i32*
%b9=load i32,i32*%b8,align 4
%ca=icmp eq i32%b9,0
br i1%ca,label%ci,label%cb
cb:
%cc=bitcast i8*%b5 to i8**
%cd=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ce=sext i32%N to i64
%cf=getelementptr inbounds i8,i8*%cd,i64%ce
%cg=bitcast i8*%cf to i8**
%ch=load i8*,i8**%cg,align 8
br label%cy
ci:
%cj=getelementptr inbounds i8,i8*%b5,i64 28
%ck=bitcast i8*%cj to i32*
%cl=load i32,i32*%ck,align 4
%cm=call i8*@sml_alloc(i32 inreg%cl)#0
%cn=getelementptr inbounds i8,i8*%cm,i64 -4
%co=bitcast i8*%cn to i32*
store i32%cl,i32*%co,align 4
%cp=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cq=sext i32%N to i64
%cr=getelementptr inbounds i8,i8*%cp,i64%cq
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cm,i8*%cr,i32%cl,i1 false)
%cs=bitcast i8**%j to i8***
%ct=load i8**,i8***%cs,align 8
%cu=bitcast i8**%ct to i8*
%cv=getelementptr inbounds i8*,i8**%ct,i64 3
%cw=bitcast i8**%cv to i32*
%cx=load i32,i32*%cw,align 4
br label%cy
cy:
%cz=phi i32[%cx,%ci],[%b9,%cb]
%cA=phi i8*[%cu,%ci],[%b5,%cb]
%cB=phi i8**[%ct,%ci],[%cc,%cb]
%cC=phi i8*[%cm,%ci],[%ch,%cb]
store i8*%cC,i8**%c,align 8
%cD=load i8*,i8**%cB,align 8
%cE=getelementptr inbounds i8,i8*%cD,i64 16
%cF=bitcast i8*%cE to i8*(i8*,i8*)**
%cG=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%cF,align 8
%cH=bitcast i8*%cD to i8**
%cI=load i8*,i8**%cH,align 8
store i8*%cI,i8**%d,align 8
%cJ=getelementptr inbounds i8,i8*%cA,i64 28
%cK=bitcast i8*%cJ to i32*
%cL=load i32,i32*%cK,align 4
%cM=call i8*@sml_alloc(i32 inreg%ad)#0
%cN=or i32%U,1342177280
%cO=getelementptr inbounds i8,i8*%cM,i64 -4
%cP=bitcast i8*%cO to i32*
store i32%cN,i32*%cP,align 4
call void@llvm.memset.p0i8.i32(i8*%cM,i8 0,i32%ad,i1 false)
%cQ=icmp eq i32%cz,0
%cR=load i8*,i8**%f,align 8
%cS=sext i32%P to i64
%cT=getelementptr inbounds i8,i8*%cM,i64%cS
br i1%cQ,label%c0,label%cU
cU:
%cV=bitcast i8*%cT to i8**
store i8*%cR,i8**%cV,align 8
%cW=load i8*,i8**%c,align 8
%cX=sext i32%S to i64
%cY=getelementptr inbounds i8,i8*%cM,i64%cX
%cZ=bitcast i8*%cY to i8**
store i8*%cW,i8**%cZ,align 8
br label%c4
c0:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cT,i8*%cR,i32%cL,i1 false)
%c1=load i8*,i8**%c,align 8
%c2=sext i32%S to i64
%c3=getelementptr inbounds i8,i8*%cM,i64%c2
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%c3,i8*%c1,i32%cL,i1 false)
br label%c4
c4:
%c5=sext i32%U to i64
%c6=getelementptr inbounds i8,i8*%cM,i64%c5
%c7=bitcast i8*%c6 to i32*
store i32%ac,i32*%c7,align 4
%c8=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%c9=call fastcc i8*%cG(i8*inreg%c8,i8*inreg%cM)
%da=bitcast i8*%c9 to i32*
%db=load i32,i32*%da,align 4
switch i32%db,label%dc[
i32 1,label%g8
i32 2,label%ei
]
dc:
store i8*null,i8**%c,align 8
%dd=load i8*,i8**%j,align 8
%de=getelementptr inbounds i8,i8*%dd,i64 16
%df=bitcast i8*%de to i8**
%dg=load i8*,i8**%df,align 8
%dh=getelementptr inbounds i8,i8*%dd,i64 32
%di=bitcast i8*%dh to i32*
%dj=load i32,i32*%di,align 4
%dk=getelementptr inbounds i8,i8*%dd,i64 36
%dl=bitcast i8*%dk to i32*
%dm=load i32,i32*%dl,align 4
%dn=call fastcc i8*@_SMLL7delete_G_330(i8*inreg%dg,i32 inreg%dj,i32 inreg%dm)
%do=getelementptr inbounds i8,i8*%dn,i64 16
%dp=bitcast i8*%do to i8*(i8*,i8*)**
%dq=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%dp,align 8
%dr=bitcast i8*%dn to i8**
%ds=load i8*,i8**%dr,align 8
store i8*%ds,i8**%c,align 8
%dt=call i8*@sml_alloc(i32 inreg 20)#0
%du=getelementptr inbounds i8,i8*%dt,i64 -4
%dv=bitcast i8*%du to i32*
store i32 1342177296,i32*%dv,align 4
%dw=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%dx=bitcast i8*%dt to i8**
store i8*%dw,i8**%dx,align 8
%dy=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%dz=getelementptr inbounds i8,i8*%dt,i64 8
%dA=bitcast i8*%dz to i8**
store i8*%dy,i8**%dA,align 8
%dB=getelementptr inbounds i8,i8*%dt,i64 16
%dC=bitcast i8*%dB to i32*
store i32 3,i32*%dC,align 4
%dD=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%dE=call fastcc i8*%dq(i8*inreg%dD,i8*inreg%dt)
store i8*%dE,i8**%c,align 8
%dF=load i8*,i8**%j,align 8
%dG=getelementptr inbounds i8,i8*%dF,i64 28
%dH=bitcast i8*%dG to i32*
%dI=load i32,i32*%dH,align 4
%dJ=getelementptr inbounds i8,i8*%dF,i64 24
%dK=bitcast i8*%dJ to i32*
%dL=load i32,i32*%dK,align 4
%dM=getelementptr inbounds i8,i8*%dF,i64 36
%dN=bitcast i8*%dM to i32*
%dO=load i32,i32*%dN,align 4
store i8*null,i8**%j,align 8
%dP=getelementptr inbounds i8,i8*%dF,i64 32
%dQ=bitcast i8*%dP to i32*
%dR=load i32,i32*%dQ,align 4
%dS=call i8*@sml_alloc(i32 inreg%aX)#0
%dT=or i32%aO,1342177280
%dU=getelementptr inbounds i8,i8*%dS,i64 -4
%dV=bitcast i8*%dU to i32*
store i32%dT,i32*%dV,align 4
call void@llvm.memset.p0i8.i32(i8*%dS,i8 0,i32%aX,i1 false)
%dW=icmp eq i32%dL,0
%dX=load i8*,i8**%f,align 8
%dY=getelementptr inbounds i8,i8*%dS,i64%cS
br i1%dW,label%d1,label%dZ
dZ:
%d0=bitcast i8*%dY to i8**
store i8*%dX,i8**%d0,align 8
br label%d2
d1:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dY,i8*%dX,i32%dI,i1 false)
br label%d2
d2:
%d3=load i8*,i8**%c,align 8
%d4=sext i32%al to i64
%d5=getelementptr inbounds i8,i8*%dS,i64%d4
%d6=bitcast i8*%d5 to i8**
store i8*%d3,i8**%d6,align 8
%d7=icmp eq i32%dR,0
%d8=load i8*,i8**%i,align 8
%d9=sext i32%an to i64
%ea=getelementptr inbounds i8,i8*%dS,i64%d9
br i1%d7,label%ed,label%eb
eb:
%ec=bitcast i8*%ea to i8**
store i8*%d8,i8**%ec,align 8
br label%ee
ed:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ea,i8*%d8,i32%dO,i1 false)
br label%ee
ee:
%ef=sext i32%aO to i64
%eg=getelementptr inbounds i8,i8*%dS,i64%ef
%eh=bitcast i8*%eg to i32*
store i32%aW,i32*%eh,align 4
ret i8*%dS
ei:
%ej=load i8*,i8**%j,align 8
%ek=getelementptr inbounds i8,i8*%ej,i64 28
%el=bitcast i8*%ek to i32*
%em=load i32,i32*%el,align 4
%en=getelementptr inbounds i8,i8*%ej,i64 24
%eo=bitcast i8*%en to i32*
%ep=load i32,i32*%eo,align 4
%eq=call i8*@sml_alloc(i32 inreg%aj)#0
%er=or i32%af,1342177280
%es=getelementptr inbounds i8,i8*%eq,i64 -4
%et=bitcast i8*%es to i32*
store i32%er,i32*%et,align 4
call void@llvm.memset.p0i8.i32(i8*%eq,i8 0,i32%aj,i1 false)
%eu=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%ev=bitcast i8*%eq to i8**
store i8*%eu,i8**%ev,align 8
%ew=icmp eq i32%ep,0
%ex=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ey=sext i32%N to i64
%ez=getelementptr inbounds i8,i8*%eq,i64%ey
br i1%ew,label%eC,label%eA
eA:
%eB=bitcast i8*%ez to i8**
store i8*%ex,i8**%eB,align 8
br label%eD
eC:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ez,i8*%ex,i32%em,i1 false)
br label%eD
eD:
%eE=sext i32%af to i64
%eF=getelementptr inbounds i8,i8*%eq,i64%eE
%eG=bitcast i8*%eF to i32*
store i32%ai,i32*%eG,align 4
%eH=load i8*,i8**%j,align 8
%eI=call fastcc i8*@_SMLL7removei_367(i8*inreg%eH,i8*inreg%eq)
store i8*%eI,i8**%e,align 8
%eJ=load i8*,i8**%j,align 8
%eK=getelementptr inbounds i8,i8*%eJ,i64 24
%eL=bitcast i8*%eK to i32*
%eM=load i32,i32*%eL,align 4
%eN=icmp eq i32%eM,0
br i1%eN,label%eS,label%eO
eO:
%eP=getelementptr inbounds i8,i8*%eI,i64%cS
%eQ=bitcast i8*%eP to i8**
%eR=load i8*,i8**%eQ,align 8
br label%e2
eS:
%eT=getelementptr inbounds i8,i8*%eJ,i64 28
%eU=bitcast i8*%eT to i32*
%eV=load i32,i32*%eU,align 4
%eW=call i8*@sml_alloc(i32 inreg%eV)#0
%eX=getelementptr inbounds i8,i8*%eW,i64 -4
%eY=bitcast i8*%eX to i32*
store i32%eV,i32*%eY,align 4
%eZ=load i8*,i8**%e,align 8
%e0=getelementptr inbounds i8,i8*%eZ,i64%cS
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%eW,i8*%e0,i32%eV,i1 false)
%e1=load i8*,i8**%j,align 8
br label%e2
e2:
%e3=phi i8*[%e1,%eS],[%eJ,%eO]
%e4=phi i8*[%eZ,%eS],[%eI,%eO]
%e5=phi i8*[%eW,%eS],[%eR,%eO]
store i8*%e5,i8**%c,align 8
%e6=sext i32%al to i64
%e7=getelementptr inbounds i8,i8*%e4,i64%e6
%e8=bitcast i8*%e7 to i8**
%e9=load i8*,i8**%e8,align 8
store i8*%e9,i8**%d,align 8
%fa=getelementptr inbounds i8,i8*%e3,i64 32
%fb=bitcast i8*%fa to i32*
%fc=load i32,i32*%fb,align 4
%fd=icmp eq i32%fc,0
br i1%fd,label%fj,label%fe
fe:
store i8*null,i8**%e,align 8
%ff=sext i32%an to i64
%fg=getelementptr inbounds i8,i8*%e4,i64%ff
%fh=bitcast i8*%fg to i8**
%fi=load i8*,i8**%fh,align 8
br label%fx
fj:
%fk=getelementptr inbounds i8,i8*%e3,i64 36
%fl=bitcast i8*%fk to i32*
%fm=load i32,i32*%fl,align 4
%fn=call i8*@sml_alloc(i32 inreg%fm)#0
%fo=getelementptr inbounds i8,i8*%fn,i64 -4
%fp=bitcast i8*%fo to i32*
store i32%fm,i32*%fp,align 4
%fq=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%fr=sext i32%an to i64
%fs=getelementptr inbounds i8,i8*%fq,i64%fr
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%fn,i8*%fs,i32%fm,i1 false)
%ft=load i8*,i8**%j,align 8
%fu=getelementptr inbounds i8,i8*%ft,i64 32
%fv=bitcast i8*%fu to i32*
%fw=load i32,i32*%fv,align 4
br label%fx
fx:
%fy=phi i32[%fw,%fj],[%fc,%fe]
%fz=phi i8*[%ft,%fj],[%e3,%fe]
%fA=phi i8*[%fn,%fj],[%fi,%fe]
store i8*%fA,i8**%e,align 8
%fB=getelementptr inbounds i8,i8*%fz,i64 8
%fC=bitcast i8*%fB to i8**
%fD=load i8*,i8**%fC,align 8
%fE=getelementptr inbounds i8,i8*%fz,i64 36
%fF=bitcast i8*%fE to i32*
%fG=load i32,i32*%fF,align 4
%fH=call fastcc i8*@_SMLL2T_G_322(i8*inreg%fD,i32 inreg%fy,i32 inreg%fG)
%fI=getelementptr inbounds i8,i8*%fH,i64 16
%fJ=bitcast i8*%fI to i8*(i8*,i8*)**
%fK=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%fJ,align 8
%fL=bitcast i8*%fH to i8**
%fM=load i8*,i8**%fL,align 8
store i8*%fM,i8**%h,align 8
%fN=load i8*,i8**%j,align 8
%fO=getelementptr inbounds i8,i8*%fN,i64 28
%fP=bitcast i8*%fO to i32*
%fQ=load i32,i32*%fP,align 4
%fR=getelementptr inbounds i8,i8*%fN,i64 24
%fS=bitcast i8*%fR to i32*
%fT=load i32,i32*%fS,align 4
%fU=getelementptr inbounds i8,i8*%fN,i64 36
%fV=bitcast i8*%fU to i32*
%fW=load i32,i32*%fV,align 4
%fX=getelementptr inbounds i8,i8*%fN,i64 32
%fY=bitcast i8*%fX to i32*
%fZ=load i32,i32*%fY,align 4
%f0=call i8*@sml_alloc(i32 inreg%aM)#0
%f1=or i32%aw,1342177280
%f2=getelementptr inbounds i8,i8*%f0,i64 -4
%f3=bitcast i8*%f2 to i32*
store i32%f1,i32*%f3,align 4
call void@llvm.memset.p0i8.i32(i8*%f0,i8 0,i32%aM,i1 false)
%f4=icmp eq i32%fT,0
%f5=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%f6=getelementptr inbounds i8,i8*%f0,i64%cS
br i1%f4,label%f9,label%f7
f7:
%f8=bitcast i8*%f6 to i8**
store i8*%f5,i8**%f8,align 8
br label%ga
f9:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%f6,i8*%f5,i32%fQ,i1 false)
br label%ga
ga:
%gb=icmp eq i32%fZ,0
%gc=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%gd=sext i32%aq to i64
%ge=getelementptr inbounds i8,i8*%f0,i64%gd
br i1%gb,label%gh,label%gf
gf:
%gg=bitcast i8*%ge to i8**
store i8*%gc,i8**%gg,align 8
br label%gi
gh:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ge,i8*%gc,i32%fW,i1 false)
br label%gi
gi:
%gj=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%gk=sext i32%as to i64
%gl=getelementptr inbounds i8,i8*%f0,i64%gk
%gm=bitcast i8*%gl to i8**
store i8*%gj,i8**%gm,align 8
%gn=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%go=sext i32%au to i64
%gp=getelementptr inbounds i8,i8*%f0,i64%go
%gq=bitcast i8*%gp to i8**
store i8*%gn,i8**%gq,align 8
%gr=sext i32%aw to i64
%gs=getelementptr inbounds i8,i8*%f0,i64%gr
%gt=bitcast i8*%gs to i32*
store i32%aL,i32*%gt,align 4
%gu=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%gv=call fastcc i8*%fK(i8*inreg%gu,i8*inreg%f0)
store i8*%gv,i8**%d,align 8
%gw=load i8*,i8**%j,align 8
%gx=getelementptr inbounds i8,i8*%gw,i64 28
%gy=bitcast i8*%gx to i32*
%gz=load i32,i32*%gy,align 4
%gA=getelementptr inbounds i8,i8*%gw,i64 24
%gB=bitcast i8*%gA to i32*
%gC=load i32,i32*%gB,align 4
%gD=getelementptr inbounds i8,i8*%gw,i64 36
%gE=bitcast i8*%gD to i32*
%gF=load i32,i32*%gE,align 4
store i8*null,i8**%j,align 8
%gG=getelementptr inbounds i8,i8*%gw,i64 32
%gH=bitcast i8*%gG to i32*
%gI=load i32,i32*%gH,align 4
%gJ=call i8*@sml_alloc(i32 inreg%aX)#0
%gK=or i32%aO,1342177280
%gL=getelementptr inbounds i8,i8*%gJ,i64 -4
%gM=bitcast i8*%gL to i32*
store i32%gK,i32*%gM,align 4
call void@llvm.memset.p0i8.i32(i8*%gJ,i8 0,i32%aX,i1 false)
%gN=icmp eq i32%gC,0
%gO=load i8*,i8**%c,align 8
%gP=getelementptr inbounds i8,i8*%gJ,i64%cS
br i1%gN,label%gS,label%gQ
gQ:
%gR=bitcast i8*%gP to i8**
store i8*%gO,i8**%gR,align 8
br label%gT
gS:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%gP,i8*%gO,i32%gz,i1 false)
br label%gT
gT:
%gU=load i8*,i8**%d,align 8
%gV=getelementptr inbounds i8,i8*%gJ,i64%e6
%gW=bitcast i8*%gV to i8**
store i8*%gU,i8**%gW,align 8
%gX=icmp eq i32%gI,0
%gY=load i8*,i8**%e,align 8
%gZ=sext i32%an to i64
%g0=getelementptr inbounds i8,i8*%gJ,i64%gZ
br i1%gX,label%g3,label%g1
g1:
%g2=bitcast i8*%g0 to i8**
store i8*%gY,i8**%g2,align 8
br label%g4
g3:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%g0,i8*%gY,i32%gF,i1 false)
br label%g4
g4:
%g5=sext i32%aO to i64
%g6=getelementptr inbounds i8,i8*%gJ,i64%g5
%g7=bitcast i8*%g6 to i32*
store i32%aW,i32*%g7,align 4
ret i8*%gJ
g8:
%g9=load i8*,i8**%j,align 8
%ha=getelementptr inbounds i8,i8*%g9,i64 28
%hb=bitcast i8*%ha to i32*
%hc=load i32,i32*%hb,align 4
%hd=getelementptr inbounds i8,i8*%g9,i64 24
%he=bitcast i8*%hd to i32*
%hf=load i32,i32*%he,align 4
%hg=call i8*@sml_alloc(i32 inreg%aj)#0
%hh=or i32%af,1342177280
%hi=getelementptr inbounds i8,i8*%hg,i64 -4
%hj=bitcast i8*%hi to i32*
store i32%hh,i32*%hj,align 4
call void@llvm.memset.p0i8.i32(i8*%hg,i8 0,i32%aj,i1 false)
%hk=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%hl=bitcast i8*%hg to i8**
store i8*%hk,i8**%hl,align 8
%hm=icmp eq i32%hf,0
%hn=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ho=sext i32%N to i64
%hp=getelementptr inbounds i8,i8*%hg,i64%ho
br i1%hm,label%hs,label%hq
hq:
%hr=bitcast i8*%hp to i8**
store i8*%hn,i8**%hr,align 8
br label%ht
hs:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%hp,i8*%hn,i32%hc,i1 false)
br label%ht
ht:
%hu=sext i32%af to i64
%hv=getelementptr inbounds i8,i8*%hg,i64%hu
%hw=bitcast i8*%hv to i32*
store i32%ai,i32*%hw,align 4
%hx=load i8*,i8**%j,align 8
%hy=call fastcc i8*@_SMLL7removei_367(i8*inreg%hx,i8*inreg%hg)
store i8*%hy,i8**%e,align 8
%hz=load i8*,i8**%j,align 8
%hA=getelementptr inbounds i8,i8*%hz,i64 24
%hB=bitcast i8*%hA to i32*
%hC=load i32,i32*%hB,align 4
%hD=icmp eq i32%hC,0
br i1%hD,label%hI,label%hE
hE:
%hF=getelementptr inbounds i8,i8*%hy,i64%cS
%hG=bitcast i8*%hF to i8**
%hH=load i8*,i8**%hG,align 8
br label%hS
hI:
%hJ=getelementptr inbounds i8,i8*%hz,i64 28
%hK=bitcast i8*%hJ to i32*
%hL=load i32,i32*%hK,align 4
%hM=call i8*@sml_alloc(i32 inreg%hL)#0
%hN=getelementptr inbounds i8,i8*%hM,i64 -4
%hO=bitcast i8*%hN to i32*
store i32%hL,i32*%hO,align 4
%hP=load i8*,i8**%e,align 8
%hQ=getelementptr inbounds i8,i8*%hP,i64%cS
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%hM,i8*%hQ,i32%hL,i1 false)
%hR=load i8*,i8**%j,align 8
br label%hS
hS:
%hT=phi i8*[%hR,%hI],[%hz,%hE]
%hU=phi i8*[%hP,%hI],[%hy,%hE]
%hV=phi i8*[%hM,%hI],[%hH,%hE]
store i8*%hV,i8**%c,align 8
%hW=sext i32%al to i64
%hX=getelementptr inbounds i8,i8*%hU,i64%hW
%hY=bitcast i8*%hX to i8**
%hZ=load i8*,i8**%hY,align 8
store i8*%hZ,i8**%d,align 8
%h0=getelementptr inbounds i8,i8*%hT,i64 32
%h1=bitcast i8*%h0 to i32*
%h2=load i32,i32*%h1,align 4
%h3=icmp eq i32%h2,0
br i1%h3,label%h9,label%h4
h4:
store i8*null,i8**%e,align 8
%h5=sext i32%an to i64
%h6=getelementptr inbounds i8,i8*%hU,i64%h5
%h7=bitcast i8*%h6 to i8**
%h8=load i8*,i8**%h7,align 8
br label%in
h9:
%ia=getelementptr inbounds i8,i8*%hT,i64 36
%ib=bitcast i8*%ia to i32*
%ic=load i32,i32*%ib,align 4
%id=call i8*@sml_alloc(i32 inreg%ic)#0
%ie=getelementptr inbounds i8,i8*%id,i64 -4
%if=bitcast i8*%ie to i32*
store i32%ic,i32*%if,align 4
%ig=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%ih=sext i32%an to i64
%ii=getelementptr inbounds i8,i8*%ig,i64%ih
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%id,i8*%ii,i32%ic,i1 false)
%ij=load i8*,i8**%j,align 8
%ik=getelementptr inbounds i8,i8*%ij,i64 32
%il=bitcast i8*%ik to i32*
%im=load i32,i32*%il,align 4
br label%in
in:
%io=phi i32[%im,%h9],[%h2,%h4]
%ip=phi i8*[%ij,%h9],[%hT,%h4]
%iq=phi i8*[%id,%h9],[%h8,%h4]
store i8*%iq,i8**%e,align 8
%ir=getelementptr inbounds i8,i8*%ip,i64 8
%is=bitcast i8*%ir to i8**
%it=load i8*,i8**%is,align 8
%iu=getelementptr inbounds i8,i8*%ip,i64 36
%iv=bitcast i8*%iu to i32*
%iw=load i32,i32*%iv,align 4
%ix=call fastcc i8*@_SMLL2T_G_322(i8*inreg%it,i32 inreg%io,i32 inreg%iw)
%iy=getelementptr inbounds i8,i8*%ix,i64 16
%iz=bitcast i8*%iy to i8*(i8*,i8*)**
%iA=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%iz,align 8
%iB=bitcast i8*%ix to i8**
%iC=load i8*,i8**%iB,align 8
store i8*%iC,i8**%g,align 8
%iD=load i8*,i8**%j,align 8
%iE=getelementptr inbounds i8,i8*%iD,i64 28
%iF=bitcast i8*%iE to i32*
%iG=load i32,i32*%iF,align 4
%iH=getelementptr inbounds i8,i8*%iD,i64 24
%iI=bitcast i8*%iH to i32*
%iJ=load i32,i32*%iI,align 4
%iK=getelementptr inbounds i8,i8*%iD,i64 36
%iL=bitcast i8*%iK to i32*
%iM=load i32,i32*%iL,align 4
%iN=getelementptr inbounds i8,i8*%iD,i64 32
%iO=bitcast i8*%iN to i32*
%iP=load i32,i32*%iO,align 4
%iQ=call i8*@sml_alloc(i32 inreg%aM)#0
%iR=or i32%aw,1342177280
%iS=getelementptr inbounds i8,i8*%iQ,i64 -4
%iT=bitcast i8*%iS to i32*
store i32%iR,i32*%iT,align 4
call void@llvm.memset.p0i8.i32(i8*%iQ,i8 0,i32%aM,i1 false)
%iU=icmp eq i32%iJ,0
%iV=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%iW=getelementptr inbounds i8,i8*%iQ,i64%cS
br i1%iU,label%iZ,label%iX
iX:
%iY=bitcast i8*%iW to i8**
store i8*%iV,i8**%iY,align 8
br label%i0
iZ:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%iW,i8*%iV,i32%iG,i1 false)
br label%i0
i0:
%i1=icmp eq i32%iP,0
%i2=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%i3=sext i32%aq to i64
%i4=getelementptr inbounds i8,i8*%iQ,i64%i3
br i1%i1,label%i7,label%i5
i5:
%i6=bitcast i8*%i4 to i8**
store i8*%i2,i8**%i6,align 8
br label%i8
i7:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%i4,i8*%i2,i32%iM,i1 false)
br label%i8
i8:
%i9=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ja=sext i32%as to i64
%jb=getelementptr inbounds i8,i8*%iQ,i64%ja
%jc=bitcast i8*%jb to i8**
store i8*%i9,i8**%jc,align 8
%jd=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%je=sext i32%au to i64
%jf=getelementptr inbounds i8,i8*%iQ,i64%je
%jg=bitcast i8*%jf to i8**
store i8*%jd,i8**%jg,align 8
%jh=sext i32%aw to i64
%ji=getelementptr inbounds i8,i8*%iQ,i64%jh
%jj=bitcast i8*%ji to i32*
store i32%aL,i32*%jj,align 4
%jk=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%jl=call fastcc i8*%iA(i8*inreg%jk,i8*inreg%iQ)
store i8*%jl,i8**%d,align 8
%jm=load i8*,i8**%j,align 8
%jn=getelementptr inbounds i8,i8*%jm,i64 28
%jo=bitcast i8*%jn to i32*
%jp=load i32,i32*%jo,align 4
%jq=getelementptr inbounds i8,i8*%jm,i64 24
%jr=bitcast i8*%jq to i32*
%js=load i32,i32*%jr,align 4
%jt=getelementptr inbounds i8,i8*%jm,i64 36
%ju=bitcast i8*%jt to i32*
%jv=load i32,i32*%ju,align 4
store i8*null,i8**%j,align 8
%jw=getelementptr inbounds i8,i8*%jm,i64 32
%jx=bitcast i8*%jw to i32*
%jy=load i32,i32*%jx,align 4
%jz=call i8*@sml_alloc(i32 inreg%aX)#0
%jA=or i32%aO,1342177280
%jB=getelementptr inbounds i8,i8*%jz,i64 -4
%jC=bitcast i8*%jB to i32*
store i32%jA,i32*%jC,align 4
call void@llvm.memset.p0i8.i32(i8*%jz,i8 0,i32%aX,i1 false)
%jD=icmp eq i32%js,0
%jE=load i8*,i8**%c,align 8
%jF=getelementptr inbounds i8,i8*%jz,i64%cS
br i1%jD,label%jI,label%jG
jG:
%jH=bitcast i8*%jF to i8**
store i8*%jE,i8**%jH,align 8
br label%jJ
jI:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%jF,i8*%jE,i32%jp,i1 false)
br label%jJ
jJ:
%jK=load i8*,i8**%d,align 8
%jL=getelementptr inbounds i8,i8*%jz,i64%hW
%jM=bitcast i8*%jL to i8**
store i8*%jK,i8**%jM,align 8
%jN=icmp eq i32%jy,0
%jO=load i8*,i8**%e,align 8
%jP=sext i32%an to i64
%jQ=getelementptr inbounds i8,i8*%jz,i64%jP
br i1%jN,label%jT,label%jR
jR:
%jS=bitcast i8*%jQ to i8**
store i8*%jO,i8**%jS,align 8
br label%jU
jT:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%jQ,i8*%jO,i32%jv,i1 false)
br label%jU
jU:
%jV=sext i32%aO to i64
%jW=getelementptr inbounds i8,i8*%jz,i64%jV
%jX=bitcast i8*%jW to i32*
store i32%aW,i32*%jX,align 4
ret i8*%jz
}
define internal fastcc i8*@_SMLL7removei_369(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%d,align 8
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
store i8*%l,i8**%e,align 8
%m=getelementptr inbounds i8,i8*%a,i64 16
%n=bitcast i8*%m to i8**
%o=load i8*,i8**%n,align 8
store i8*%o,i8**%f,align 8
%p=getelementptr inbounds i8,i8*%a,i64 24
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=getelementptr inbounds i8,i8*%a,i64 28
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=call i8*@sml_alloc(i32 inreg 44)#0
%w=getelementptr inbounds i8,i8*%v,i64 -4
%x=bitcast i8*%w to i32*
store i32 1342177320,i32*%x,align 4
store i8*%v,i8**%g,align 8
%y=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%z=bitcast i8*%v to i8**
store i8*%y,i8**%z,align 8
%A=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%B=getelementptr inbounds i8,i8*%v,i64 8
%C=bitcast i8*%B to i8**
store i8*%A,i8**%C,align 8
%D=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%E=getelementptr inbounds i8,i8*%v,i64 16
%F=bitcast i8*%E to i8**
store i8*%D,i8**%F,align 8
%G=getelementptr inbounds i8,i8*%v,i64 24
%H=bitcast i8*%G to i32*
store i32%r,i32*%H,align 4
%I=getelementptr inbounds i8,i8*%v,i64 28
%J=bitcast i8*%I to i32*
store i32%u,i32*%J,align 4
%K=getelementptr inbounds i8,i8*%v,i64 32
%L=bitcast i8*%K to i32*
store i32%b,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%v,i64 36
%N=bitcast i8*%M to i32*
store i32%c,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%v,i64 40
%P=bitcast i8*%O to i32*
store i32 7,i32*%P,align 4
%Q=call i8*@sml_alloc(i32 inreg 28)#0
%R=getelementptr inbounds i8,i8*%Q,i64 -4
%S=bitcast i8*%R to i32*
store i32 1342177304,i32*%S,align 4
%T=load i8*,i8**%g,align 8
%U=bitcast i8*%Q to i8**
store i8*%T,i8**%U,align 8
%V=getelementptr inbounds i8,i8*%Q,i64 8
%W=bitcast i8*%V to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL7removei_367 to void(...)*),void(...)**%W,align 8
%X=getelementptr inbounds i8,i8*%Q,i64 16
%Y=bitcast i8*%X to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL7removei_367 to void(...)*),void(...)**%Y,align 8
%Z=getelementptr inbounds i8,i8*%Q,i64 24
%aa=bitcast i8*%Z to i32*
store i32 -2147483647,i32*%aa,align 4
ret i8*%Q
}
define internal fastcc i8*@_SMLL3d2l_370(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
j:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%g,align 8
br label%h
h:
%i=phi i8*[%bk,%bc],[%b,%j]
store i8*%i,i8**%c,align 8
%k=load atomic i32,i32*@sml_check_flag unordered,align 4
%l=icmp eq i32%k,0
br i1%l,label%o,label%m
m:
call void@sml_check(i32 inreg%k)
%n=load i8*,i8**%c,align 8
br label%o
o:
%p=phi i8*[%n,%m],[%i,%h]
%q=load i8*,i8**%g,align 8
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=add i32%s,3
%u=sub i32 0,%s
%v=and i32%t,%u
%w=add i32%s,7
%x=add i32%w,%v
%y=and i32%x,-8
%z=add i32%y,15
%A=and i32%z,-8
%B=getelementptr inbounds i8,i8*%q,i64 8
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=add i32%D,7
%F=add i32%E,%A
%G=sub i32 0,%D
%H=and i32%F,%G
%I=add i32%D,-1
%J=and i32%I,%G
%K=add i32%E,%J
%L=and i32%K,-8
%M=add i32%L,15
%N=and i32%M,-8
%O=lshr i32%K,3
%P=lshr i32%J,3
%Q=sub nsw i32%O,%P
%R=shl i32 1,%Q
%S=getelementptr inbounds i8,i8*%q,i64 4
%T=bitcast i8*%S to i32*
%U=load i32,i32*%T,align 4
%V=or i32%R,%U
%W=or i32%N,4
%X=bitcast i8*%p to i8**
%Y=load i8*,i8**%X,align 8
%Z=icmp eq i8*%Y,null
br i1%Z,label%aa,label%ae
aa:
%ab=getelementptr inbounds i8,i8*%p,i64 8
%ac=bitcast i8*%ab to i8**
%ad=load i8*,i8**%ac,align 8
ret i8*%ad
ae:
store i8*%Y,i8**%f,align 8
%af=sext i32%y to i64
%ag=getelementptr inbounds i8,i8*%Y,i64%af
%ah=bitcast i8*%ag to i8**
%ai=load i8*,i8**%ah,align 8
store i8*%ai,i8**%d,align 8
%aj=sext i32%A to i64
%ak=getelementptr inbounds i8,i8*%Y,i64%aj
%al=bitcast i8*%ak to i8**
%am=load i8*,i8**%al,align 8
store i8*%am,i8**%e,align 8
%an=load i32,i32*%T,align 4
%ao=icmp eq i32%an,0
br i1%ao,label%au,label%ap
ap:
store i8*null,i8**%f,align 8
%aq=sext i32%H to i64
%ar=getelementptr inbounds i8,i8*%Y,i64%aq
%as=bitcast i8*%ar to i8**
%at=load i8*,i8**%as,align 8
br label%aC
au:
%av=call i8*@sml_alloc(i32 inreg%D)#0
%aw=getelementptr inbounds i8,i8*%av,i64 -4
%ax=bitcast i8*%aw to i32*
store i32%D,i32*%ax,align 4
%ay=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%az=sext i32%H to i64
%aA=getelementptr inbounds i8,i8*%ay,i64%az
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%av,i8*%aA,i32%D,i1 false)
%aB=load i8*,i8**%c,align 8
br label%aC
aC:
%aD=phi i8*[%aB,%au],[%p,%ap]
%aE=phi i8*[%av,%au],[%at,%ap]
store i8*%aE,i8**%f,align 8
%aF=getelementptr inbounds i8,i8*%aD,i64 8
%aG=bitcast i8*%aF to i8**
%aH=load i8*,i8**%aG,align 8
store i8*%aH,i8**%c,align 8
%aI=call i8*@sml_alloc(i32 inreg 20)#0
%aJ=getelementptr inbounds i8,i8*%aI,i64 -4
%aK=bitcast i8*%aJ to i32*
store i32 1342177296,i32*%aK,align 4
%aL=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aM=bitcast i8*%aI to i8**
store i8*%aL,i8**%aM,align 8
%aN=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aO=getelementptr inbounds i8,i8*%aI,i64 8
%aP=bitcast i8*%aO to i8**
store i8*%aN,i8**%aP,align 8
%aQ=getelementptr inbounds i8,i8*%aI,i64 16
%aR=bitcast i8*%aQ to i32*
store i32 3,i32*%aR,align 4
%aS=load i8*,i8**%g,align 8
%aT=call fastcc i8*@_SMLL3d2l_370(i8*inreg%aS,i8*inreg%aI)
store i8*%aT,i8**%c,align 8
%aU=load i8*,i8**%g,align 8
%aV=getelementptr inbounds i8,i8*%aU,i64 8
%aW=bitcast i8*%aV to i32*
%aX=load i32,i32*%aW,align 4
%aY=getelementptr inbounds i8,i8*%aU,i64 4
%aZ=bitcast i8*%aY to i32*
%a0=load i32,i32*%aZ,align 4
%a1=call i8*@sml_alloc(i32 inreg%W)#0
%a2=or i32%N,1342177280
%a3=getelementptr inbounds i8,i8*%a1,i64 -4
%a4=bitcast i8*%a3 to i32*
store i32%a2,i32*%a4,align 4
store i8*%a1,i8**%e,align 8
call void@llvm.memset.p0i8.i32(i8*%a1,i8 0,i32%W,i1 false)
%a5=icmp eq i32%a0,0
%a6=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%a7=sext i32%J to i64
%a8=getelementptr inbounds i8,i8*%a1,i64%a7
br i1%a5,label%bb,label%a9
a9:
%ba=bitcast i8*%a8 to i8**
store i8*%a6,i8**%ba,align 8
br label%bc
bb:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%a8,i8*%a6,i32%aX,i1 false)
br label%bc
bc:
%bd=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%be=sext i32%L to i64
%bf=getelementptr inbounds i8,i8*%a1,i64%be
%bg=bitcast i8*%bf to i8**
store i8*%bd,i8**%bg,align 8
%bh=sext i32%N to i64
%bi=getelementptr inbounds i8,i8*%a1,i64%bh
%bj=bitcast i8*%bi to i32*
store i32%V,i32*%bj,align 4
%bk=call i8*@sml_alloc(i32 inreg 20)#0
%bl=getelementptr inbounds i8,i8*%bk,i64 -4
%bm=bitcast i8*%bl to i32*
store i32 1342177296,i32*%bm,align 4
%bn=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bo=bitcast i8*%bk to i8**
store i8*%bn,i8**%bo,align 8
%bp=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bq=getelementptr inbounds i8,i8*%bk,i64 8
%br=bitcast i8*%bq to i8**
store i8*%bp,i8**%br,align 8
%bs=getelementptr inbounds i8,i8*%bk,i64 16
%bt=bitcast i8*%bs to i32*
store i32 3,i32*%bt,align 4
br label%h
}
define internal fastcc i8*@_SMLL3d2l_371(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=call i8*@sml_alloc(i32 inreg 20)#0
%h=bitcast i8*%g to i32*
%i=getelementptr inbounds i8,i8*%g,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%g,i8**%d,align 8
store i32%f,i32*%h,align 4
%k=getelementptr inbounds i8,i8*%g,i64 4
%l=bitcast i8*%k to i32*
store i32%b,i32*%l,align 4
%m=getelementptr inbounds i8,i8*%g,i64 8
%n=bitcast i8*%m to i32*
store i32%c,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%g,i64 16
%p=bitcast i8*%o to i32*
store i32 0,i32*%p,align 4
%q=call i8*@sml_alloc(i32 inreg 28)#0
%r=getelementptr inbounds i8,i8*%q,i64 -4
%s=bitcast i8*%r to i32*
store i32 1342177304,i32*%s,align 4
%t=load i8*,i8**%d,align 8
%u=bitcast i8*%q to i8**
store i8*%t,i8**%u,align 8
%v=getelementptr inbounds i8,i8*%q,i64 8
%w=bitcast i8*%v to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3d2l_370 to void(...)*),void(...)**%w,align 8
%x=getelementptr inbounds i8,i8*%q,i64 16
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3d2l_370 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%q,i64 24
%A=bitcast i8*%z to i32*
store i32 -2147483647,i32*%A,align 4
ret i8*%q
}
define internal fastcc i8*@_SMLL9listItems_372(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%h,label%j
h:
%i=bitcast i8*%a to i32*
br label%m
j:
call void@sml_check(i32 inreg%f)
%k=bitcast i8**%d to i32**
%l=load i32*,i32**%k,align 8
br label%m
m:
%n=phi i32*[%l,%j],[%i,%h]
%o=load i32,i32*%n,align 4
%p=call i8*@sml_alloc(i32 inreg 12)#0
%q=bitcast i8*%p to i32*
%r=getelementptr inbounds i8,i8*%p,i64 -4
%s=bitcast i8*%r to i32*
store i32 1342177288,i32*%s,align 4
store i8*%p,i8**%e,align 8
store i32%o,i32*%q,align 4
%t=getelementptr inbounds i8,i8*%p,i64 8
%u=bitcast i8*%t to i32*
store i32 0,i32*%u,align 4
%v=call i8*@sml_alloc(i32 inreg 28)#0
%w=getelementptr inbounds i8,i8*%v,i64 -4
%x=bitcast i8*%w to i32*
store i32 1342177304,i32*%x,align 4
%y=load i8*,i8**%e,align 8
%z=bitcast i8*%v to i8**
store i8*%y,i8**%z,align 8
%A=getelementptr inbounds i8,i8*%v,i64 8
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL3d2l_371 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%v,i64 16
%D=bitcast i8*%C to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL3d2l_669 to void(...)*),void(...)**%D,align 8
%E=getelementptr inbounds i8,i8*%v,i64 24
%F=bitcast i8*%E to i32*
store i32 -2147483647,i32*%F,align 4
%G=load i8*,i8**%d,align 8
%H=getelementptr inbounds i8,i8*%G,i64 4
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
store i8*null,i8**%d,align 8
%K=getelementptr inbounds i8,i8*%G,i64 8
%L=bitcast i8*%K to i32*
%M=load i32,i32*%L,align 4
store i8*null,i8**%e,align 8
%N=call fastcc i8*@_SMLL3d2l_371(i8*inreg%y,i32 inreg%J,i32 inreg%M)
%O=getelementptr inbounds i8,i8*%N,i64 16
%P=bitcast i8*%O to i8*(i8*,i8*)**
%Q=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%P,align 8
%R=bitcast i8*%N to i8**
%S=load i8*,i8**%R,align 8
store i8*%S,i8**%d,align 8
%T=call i8*@sml_alloc(i32 inreg 20)#0
%U=getelementptr inbounds i8,i8*%T,i64 -4
%V=bitcast i8*%U to i32*
store i32 1342177296,i32*%V,align 4
%W=load i8*,i8**%c,align 8
%X=bitcast i8*%T to i8**
store i8*%W,i8**%X,align 8
%Y=getelementptr inbounds i8,i8*%T,i64 8
%Z=bitcast i8*%Y to i8**
store i8*null,i8**%Z,align 8
%aa=getelementptr inbounds i8,i8*%T,i64 16
%ab=bitcast i8*%aa to i32*
store i32 3,i32*%ab,align 4
%ac=load i8*,i8**%d,align 8
%ad=tail call fastcc i8*%Q(i8*inreg%ac,i8*inreg%T)
ret i8*%ad
}
define internal fastcc i8*@_SMLL9listItems_373(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=call i8*@sml_alloc(i32 inreg 20)#0
%h=bitcast i8*%g to i32*
%i=getelementptr inbounds i8,i8*%g,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%g,i8**%d,align 8
store i32%f,i32*%h,align 4
%k=getelementptr inbounds i8,i8*%g,i64 4
%l=bitcast i8*%k to i32*
store i32%b,i32*%l,align 4
%m=getelementptr inbounds i8,i8*%g,i64 8
%n=bitcast i8*%m to i32*
store i32%c,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%g,i64 16
%p=bitcast i8*%o to i32*
store i32 0,i32*%p,align 4
%q=call i8*@sml_alloc(i32 inreg 28)#0
%r=getelementptr inbounds i8,i8*%q,i64 -4
%s=bitcast i8*%r to i32*
store i32 1342177304,i32*%s,align 4
%t=load i8*,i8**%d,align 8
%u=bitcast i8*%q to i8**
store i8*%t,i8**%u,align 8
%v=getelementptr inbounds i8,i8*%q,i64 8
%w=bitcast i8*%v to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL9listItems_372 to void(...)*),void(...)**%w,align 8
%x=getelementptr inbounds i8,i8*%q,i64 16
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL9listItems_372 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%q,i64 24
%A=bitcast i8*%z to i32*
store i32 -2147483647,i32*%A,align 4
ret i8*%q
}
define internal fastcc i8*@_SMLL3d2l_374(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%h,align 8
br label%i
i:
%j=phi i8*[%b7,%bT],[%b,%k]
store i8*%j,i8**%c,align 8
%l=load atomic i32,i32*@sml_check_flag unordered,align 4
%m=icmp eq i32%l,0
br i1%m,label%p,label%n
n:
call void@sml_check(i32 inreg%l)
%o=load i8*,i8**%c,align 8
br label%p
p:
%q=phi i8*[%o,%n],[%j,%i]
%r=load i8*,i8**%h,align 8
%s=getelementptr inbounds i8,i8*%r,i64 4
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=add i32%u,3
%w=sub i32 0,%u
%x=and i32%v,%w
%y=add i32%u,7
%z=add i32%y,%x
%A=and i32%z,-8
%B=add i32%A,15
%C=and i32%B,-8
%D=getelementptr inbounds i8,i8*%r,i64 12
%E=bitcast i8*%D to i32*
%F=load i32,i32*%E,align 4
%G=add i32%F,7
%H=add i32%G,%C
%I=sub i32 0,%F
%J=and i32%H,%I
%K=add i32%u,-1
%L=and i32%K,%w
%M=add i32%K,%F
%N=add i32%M,%L
%O=and i32%N,%I
%P=add i32%G,%O
%Q=and i32%P,-8
%R=lshr i32%O,3
%S=lshr i32%L,3
%T=sub nsw i32%R,%S
%U=getelementptr inbounds i8,i8*%r,i64 8
%V=bitcast i8*%U to i32*
%W=load i32,i32*%V,align 4
%X=shl i32%W,%T
%Y=bitcast i8*%r to i32*
%Z=load i32,i32*%Y,align 4
%aa=or i32%X,%Z
%ab=or i32%Q,4
%ac=bitcast i8*%q to i8**
%ad=load i8*,i8**%ac,align 8
%ae=icmp eq i8*%ad,null
br i1%ae,label%af,label%aj
af:
%ag=getelementptr inbounds i8,i8*%q,i64 8
%ah=bitcast i8*%ag to i8**
%ai=load i8*,i8**%ah,align 8
ret i8*%ai
aj:
store i8*%ad,i8**%g,align 8
%ak=load i32,i32*%Y,align 4
%al=icmp eq i32%ak,0
br i1%al,label%ar,label%am
am:
%an=sext i32%x to i64
%ao=getelementptr inbounds i8,i8*%ad,i64%an
%ap=bitcast i8*%ao to i8**
%aq=load i8*,i8**%ap,align 8
br label%aD
ar:
%as=load i32,i32*%t,align 4
%at=call i8*@sml_alloc(i32 inreg%as)#0
%au=getelementptr inbounds i8,i8*%at,i64 -4
%av=bitcast i8*%au to i32*
store i32%as,i32*%av,align 4
%aw=load i8*,i8**%g,align 8
%ax=sext i32%x to i64
%ay=getelementptr inbounds i8,i8*%aw,i64%ax
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%at,i8*%ay,i32%as,i1 false)
%az=load i8*,i8**%h,align 8
%aA=getelementptr inbounds i8,i8*%az,i64 8
%aB=bitcast i8*%aA to i32*
%aC=load i32,i32*%aB,align 4
br label%aD
aD:
%aE=phi i32[%aC,%ar],[%W,%am]
%aF=phi i8*[%az,%ar],[%r,%am]
%aG=phi i8*[%aw,%ar],[%ad,%am]
%aH=phi i8*[%at,%ar],[%aq,%am]
store i8*%aH,i8**%d,align 8
%aI=sext i32%A to i64
%aJ=getelementptr inbounds i8,i8*%aG,i64%aI
%aK=bitcast i8*%aJ to i8**
%aL=load i8*,i8**%aK,align 8
store i8*%aL,i8**%e,align 8
%aM=sext i32%C to i64
%aN=getelementptr inbounds i8,i8*%aG,i64%aM
%aO=bitcast i8*%aN to i8**
%aP=load i8*,i8**%aO,align 8
store i8*%aP,i8**%f,align 8
%aQ=icmp eq i32%aE,0
br i1%aQ,label%aW,label%aR
aR:
store i8*null,i8**%g,align 8
%aS=sext i32%J to i64
%aT=getelementptr inbounds i8,i8*%aG,i64%aS
%aU=bitcast i8*%aT to i8**
%aV=load i8*,i8**%aU,align 8
br label%a6
aW:
%aX=getelementptr inbounds i8,i8*%aF,i64 12
%aY=bitcast i8*%aX to i32*
%aZ=load i32,i32*%aY,align 4
%a0=call i8*@sml_alloc(i32 inreg%aZ)#0
%a1=getelementptr inbounds i8,i8*%a0,i64 -4
%a2=bitcast i8*%a1 to i32*
store i32%aZ,i32*%a2,align 4
%a3=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%a4=sext i32%J to i64
%a5=getelementptr inbounds i8,i8*%a3,i64%a4
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%a0,i8*%a5,i32%aZ,i1 false)
br label%a6
a6:
%a7=phi i8*[%a0,%aW],[%aV,%aR]
store i8*%a7,i8**%g,align 8
%a8=load i8*,i8**%c,align 8
%a9=getelementptr inbounds i8,i8*%a8,i64 8
%ba=bitcast i8*%a9 to i8**
%bb=load i8*,i8**%ba,align 8
store i8*%bb,i8**%c,align 8
%bc=call i8*@sml_alloc(i32 inreg 20)#0
%bd=getelementptr inbounds i8,i8*%bc,i64 -4
%be=bitcast i8*%bd to i32*
store i32 1342177296,i32*%be,align 4
%bf=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%bg=bitcast i8*%bc to i8**
store i8*%bf,i8**%bg,align 8
%bh=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bi=getelementptr inbounds i8,i8*%bc,i64 8
%bj=bitcast i8*%bi to i8**
store i8*%bh,i8**%bj,align 8
%bk=getelementptr inbounds i8,i8*%bc,i64 16
%bl=bitcast i8*%bk to i32*
store i32 3,i32*%bl,align 4
%bm=load i8*,i8**%h,align 8
%bn=call fastcc i8*@_SMLL3d2l_374(i8*inreg%bm,i8*inreg%bc)
store i8*%bn,i8**%c,align 8
%bo=load i8*,i8**%h,align 8
%bp=getelementptr inbounds i8,i8*%bo,i64 4
%bq=bitcast i8*%bp to i32*
%br=load i32,i32*%bq,align 4
%bs=bitcast i8*%bo to i32*
%bt=load i32,i32*%bs,align 4
%bu=getelementptr inbounds i8,i8*%bo,i64 12
%bv=bitcast i8*%bu to i32*
%bw=load i32,i32*%bv,align 4
%bx=getelementptr inbounds i8,i8*%bo,i64 8
%by=bitcast i8*%bx to i32*
%bz=load i32,i32*%by,align 4
%bA=call i8*@sml_alloc(i32 inreg%ab)#0
%bB=or i32%Q,1342177280
%bC=getelementptr inbounds i8,i8*%bA,i64 -4
%bD=bitcast i8*%bC to i32*
store i32%bB,i32*%bD,align 4
store i8*%bA,i8**%f,align 8
call void@llvm.memset.p0i8.i32(i8*%bA,i8 0,i32%ab,i1 false)
%bE=icmp eq i32%bt,0
%bF=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bG=sext i32%L to i64
%bH=getelementptr inbounds i8,i8*%bA,i64%bG
br i1%bE,label%bK,label%bI
bI:
%bJ=bitcast i8*%bH to i8**
store i8*%bF,i8**%bJ,align 8
br label%bL
bK:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bH,i8*%bF,i32%br,i1 false)
br label%bL
bL:
%bM=icmp eq i32%bz,0
%bN=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%bO=sext i32%O to i64
%bP=getelementptr inbounds i8,i8*%bA,i64%bO
br i1%bM,label%bS,label%bQ
bQ:
%bR=bitcast i8*%bP to i8**
store i8*%bN,i8**%bR,align 8
br label%bT
bS:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bP,i8*%bN,i32%bw,i1 false)
br label%bT
bT:
%bU=sext i32%Q to i64
%bV=getelementptr inbounds i8,i8*%bA,i64%bU
%bW=bitcast i8*%bV to i32*
store i32%aa,i32*%bW,align 4
%bX=call i8*@sml_alloc(i32 inreg 20)#0
%bY=getelementptr inbounds i8,i8*%bX,i64 -4
%bZ=bitcast i8*%bY to i32*
store i32 1342177296,i32*%bZ,align 4
store i8*%bX,i8**%d,align 8
%b0=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%b1=bitcast i8*%bX to i8**
store i8*%b0,i8**%b1,align 8
%b2=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%b3=getelementptr inbounds i8,i8*%bX,i64 8
%b4=bitcast i8*%b3 to i8**
store i8*%b2,i8**%b4,align 8
%b5=getelementptr inbounds i8,i8*%bX,i64 16
%b6=bitcast i8*%b5 to i32*
store i32 3,i32*%b6,align 4
%b7=call i8*@sml_alloc(i32 inreg 20)#0
%b8=getelementptr inbounds i8,i8*%b7,i64 -4
%b9=bitcast i8*%b8 to i32*
store i32 1342177296,i32*%b9,align 4
%ca=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%cb=bitcast i8*%b7 to i8**
store i8*%ca,i8**%cb,align 8
%cc=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%cd=getelementptr inbounds i8,i8*%b7,i64 8
%ce=bitcast i8*%cd to i8**
store i8*%cc,i8**%ce,align 8
%cf=getelementptr inbounds i8,i8*%b7,i64 16
%cg=bitcast i8*%cf to i32*
store i32 3,i32*%cg,align 4
br label%i
}
define internal fastcc i8*@_SMLL3d2l_375(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=bitcast i8*%j to i32*
%l=getelementptr inbounds i8,i8*%j,i64 -4
%m=bitcast i8*%l to i32*
store i32 1342177296,i32*%m,align 4
store i8*%j,i8**%d,align 8
store i32%f,i32*%k,align 4
%n=getelementptr inbounds i8,i8*%j,i64 4
%o=bitcast i8*%n to i32*
store i32%i,i32*%o,align 4
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i32*
store i32%b,i32*%q,align 4
%r=getelementptr inbounds i8,i8*%j,i64 12
%s=bitcast i8*%r to i32*
store i32%c,i32*%s,align 4
%t=getelementptr inbounds i8,i8*%j,i64 16
%u=bitcast i8*%t to i32*
store i32 0,i32*%u,align 4
%v=call i8*@sml_alloc(i32 inreg 28)#0
%w=getelementptr inbounds i8,i8*%v,i64 -4
%x=bitcast i8*%w to i32*
store i32 1342177304,i32*%x,align 4
%y=load i8*,i8**%d,align 8
%z=bitcast i8*%v to i8**
store i8*%y,i8**%z,align 8
%A=getelementptr inbounds i8,i8*%v,i64 8
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3d2l_374 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%v,i64 16
%D=bitcast i8*%C to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3d2l_374 to void(...)*),void(...)**%D,align 8
%E=getelementptr inbounds i8,i8*%v,i64 24
%F=bitcast i8*%E to i32*
store i32 -2147483647,i32*%F,align 4
ret i8*%v
}
define internal fastcc i8*@_SMLL10listItemsi_376(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
l:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%j,label%h
h:
call void@sml_check(i32 inreg%f)
%i=load i8*,i8**%d,align 8
br label%j
j:
%k=phi i8*[%i,%h],[%a,%l]
%m=bitcast i8*%k to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%k,i64 4
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=call i8*@sml_alloc(i32 inreg 12)#0
%s=bitcast i8*%r to i32*
%t=getelementptr inbounds i8,i8*%r,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177288,i32*%u,align 4
store i8*%r,i8**%e,align 8
store i32%n,i32*%s,align 4
%v=getelementptr inbounds i8,i8*%r,i64 4
%w=bitcast i8*%v to i32*
store i32%q,i32*%w,align 4
%x=getelementptr inbounds i8,i8*%r,i64 8
%y=bitcast i8*%x to i32*
store i32 0,i32*%y,align 4
%z=call i8*@sml_alloc(i32 inreg 28)#0
%A=getelementptr inbounds i8,i8*%z,i64 -4
%B=bitcast i8*%A to i32*
store i32 1342177304,i32*%B,align 4
%C=load i8*,i8**%e,align 8
%D=bitcast i8*%z to i8**
store i8*%C,i8**%D,align 8
%E=getelementptr inbounds i8,i8*%z,i64 8
%F=bitcast i8*%E to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL3d2l_375 to void(...)*),void(...)**%F,align 8
%G=getelementptr inbounds i8,i8*%z,i64 16
%H=bitcast i8*%G to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL3d2l_671 to void(...)*),void(...)**%H,align 8
%I=getelementptr inbounds i8,i8*%z,i64 24
%J=bitcast i8*%I to i32*
store i32 -2147483647,i32*%J,align 4
%K=load i8*,i8**%d,align 8
%L=getelementptr inbounds i8,i8*%K,i64 8
%M=bitcast i8*%L to i32*
%N=load i32,i32*%M,align 4
store i8*null,i8**%d,align 8
%O=getelementptr inbounds i8,i8*%K,i64 12
%P=bitcast i8*%O to i32*
%Q=load i32,i32*%P,align 4
store i8*null,i8**%e,align 8
%R=call fastcc i8*@_SMLL3d2l_375(i8*inreg%C,i32 inreg%N,i32 inreg%Q)
%S=getelementptr inbounds i8,i8*%R,i64 16
%T=bitcast i8*%S to i8*(i8*,i8*)**
%U=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%T,align 8
%V=bitcast i8*%R to i8**
%W=load i8*,i8**%V,align 8
store i8*%W,i8**%d,align 8
%X=call i8*@sml_alloc(i32 inreg 20)#0
%Y=getelementptr inbounds i8,i8*%X,i64 -4
%Z=bitcast i8*%Y to i32*
store i32 1342177296,i32*%Z,align 4
%aa=load i8*,i8**%c,align 8
%ab=bitcast i8*%X to i8**
store i8*%aa,i8**%ab,align 8
%ac=getelementptr inbounds i8,i8*%X,i64 8
%ad=bitcast i8*%ac to i8**
store i8*null,i8**%ad,align 8
%ae=getelementptr inbounds i8,i8*%X,i64 16
%af=bitcast i8*%ae to i32*
store i32 3,i32*%af,align 4
%ag=load i8*,i8**%d,align 8
%ah=tail call fastcc i8*%U(i8*inreg%ag,i8*inreg%X)
ret i8*%ah
}
define internal fastcc i8*@_SMLL10listItemsi_377(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=bitcast i8*%j to i32*
%l=getelementptr inbounds i8,i8*%j,i64 -4
%m=bitcast i8*%l to i32*
store i32 1342177296,i32*%m,align 4
store i8*%j,i8**%d,align 8
store i32%f,i32*%k,align 4
%n=getelementptr inbounds i8,i8*%j,i64 4
%o=bitcast i8*%n to i32*
store i32%i,i32*%o,align 4
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i32*
store i32%b,i32*%q,align 4
%r=getelementptr inbounds i8,i8*%j,i64 12
%s=bitcast i8*%r to i32*
store i32%c,i32*%s,align 4
%t=getelementptr inbounds i8,i8*%j,i64 16
%u=bitcast i8*%t to i32*
store i32 0,i32*%u,align 4
%v=call i8*@sml_alloc(i32 inreg 28)#0
%w=getelementptr inbounds i8,i8*%v,i64 -4
%x=bitcast i8*%w to i32*
store i32 1342177304,i32*%x,align 4
%y=load i8*,i8**%d,align 8
%z=bitcast i8*%v to i8**
store i8*%y,i8**%z,align 8
%A=getelementptr inbounds i8,i8*%v,i64 8
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL10listItemsi_376 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%v,i64 16
%D=bitcast i8*%C to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL10listItemsi_376 to void(...)*),void(...)**%D,align 8
%E=getelementptr inbounds i8,i8*%v,i64 24
%F=bitcast i8*%E to i32*
store i32 -2147483647,i32*%F,align 4
ret i8*%v
}
define internal fastcc i8*@_SMLL3d2l_378(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
j:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%g,align 8
br label%h
h:
%i=phi i8*[%be,%a6],[%b,%j]
store i8*%i,i8**%c,align 8
%k=load atomic i32,i32*@sml_check_flag unordered,align 4
%l=icmp eq i32%k,0
br i1%l,label%o,label%m
m:
call void@sml_check(i32 inreg%k)
%n=load i8*,i8**%c,align 8
br label%o
o:
%p=phi i8*[%n,%m],[%i,%h]
%q=load i8*,i8**%g,align 8
%r=getelementptr inbounds i8,i8*%q,i64 4
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=add i32%t,3
%v=sub i32 0,%t
%w=and i32%u,%v
%x=add i32%t,7
%y=add i32%x,%w
%z=and i32%y,-8
%A=add i32%z,15
%B=and i32%A,-8
%C=add i32%t,-1
%D=and i32%C,%v
%E=add i32%x,%D
%F=and i32%E,-8
%G=add i32%F,15
%H=and i32%G,-8
%I=lshr i32%E,3
%J=lshr i32%D,3
%K=sub nsw i32%I,%J
%L=shl i32 1,%K
%M=bitcast i8*%q to i32*
%N=load i32,i32*%M,align 4
%O=or i32%L,%N
%P=or i32%H,4
%Q=bitcast i8*%p to i8**
%R=load i8*,i8**%Q,align 8
%S=icmp eq i8*%R,null
br i1%S,label%T,label%X
T:
%U=getelementptr inbounds i8,i8*%p,i64 8
%V=bitcast i8*%U to i8**
%W=load i8*,i8**%V,align 8
ret i8*%W
X:
store i8*%R,i8**%f,align 8
%Y=load i32,i32*%M,align 4
%Z=icmp eq i32%Y,0
br i1%Z,label%af,label%aa
aa:
%ab=sext i32%w to i64
%ac=getelementptr inbounds i8,i8*%R,i64%ab
%ad=bitcast i8*%ac to i8**
%ae=load i8*,i8**%ad,align 8
br label%ao
af:
%ag=load i32,i32*%s,align 4
%ah=call i8*@sml_alloc(i32 inreg%ag)#0
%ai=getelementptr inbounds i8,i8*%ah,i64 -4
%aj=bitcast i8*%ai to i32*
store i32%ag,i32*%aj,align 4
%ak=load i8*,i8**%f,align 8
%al=sext i32%w to i64
%am=getelementptr inbounds i8,i8*%ak,i64%al
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ah,i8*%am,i32%ag,i1 false)
%an=load i8*,i8**%c,align 8
br label%ao
ao:
%ap=phi i8*[%an,%af],[%p,%aa]
%aq=phi i8*[%ak,%af],[%R,%aa]
%ar=phi i8*[%ah,%af],[%ae,%aa]
store i8*%ar,i8**%d,align 8
%as=sext i32%z to i64
%at=getelementptr inbounds i8,i8*%aq,i64%as
%au=bitcast i8*%at to i8**
%av=load i8*,i8**%au,align 8
store i8*%av,i8**%e,align 8
%aw=sext i32%B to i64
%ax=getelementptr inbounds i8,i8*%aq,i64%aw
%ay=bitcast i8*%ax to i8**
%az=load i8*,i8**%ay,align 8
store i8*%az,i8**%f,align 8
%aA=getelementptr inbounds i8,i8*%ap,i64 8
%aB=bitcast i8*%aA to i8**
%aC=load i8*,i8**%aB,align 8
store i8*%aC,i8**%c,align 8
%aD=call i8*@sml_alloc(i32 inreg 20)#0
%aE=getelementptr inbounds i8,i8*%aD,i64 -4
%aF=bitcast i8*%aE to i32*
store i32 1342177296,i32*%aF,align 4
%aG=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%aH=bitcast i8*%aD to i8**
store i8*%aG,i8**%aH,align 8
%aI=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aJ=getelementptr inbounds i8,i8*%aD,i64 8
%aK=bitcast i8*%aJ to i8**
store i8*%aI,i8**%aK,align 8
%aL=getelementptr inbounds i8,i8*%aD,i64 16
%aM=bitcast i8*%aL to i32*
store i32 3,i32*%aM,align 4
%aN=load i8*,i8**%g,align 8
%aO=call fastcc i8*@_SMLL3d2l_378(i8*inreg%aN,i8*inreg%aD)
store i8*%aO,i8**%c,align 8
%aP=load i8*,i8**%g,align 8
%aQ=getelementptr inbounds i8,i8*%aP,i64 4
%aR=bitcast i8*%aQ to i32*
%aS=load i32,i32*%aR,align 4
%aT=bitcast i8*%aP to i32*
%aU=load i32,i32*%aT,align 4
%aV=call i8*@sml_alloc(i32 inreg%P)#0
%aW=or i32%H,1342177280
%aX=getelementptr inbounds i8,i8*%aV,i64 -4
%aY=bitcast i8*%aX to i32*
store i32%aW,i32*%aY,align 4
store i8*%aV,i8**%f,align 8
call void@llvm.memset.p0i8.i32(i8*%aV,i8 0,i32%P,i1 false)
%aZ=icmp eq i32%aU,0
%a0=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%a1=sext i32%D to i64
%a2=getelementptr inbounds i8,i8*%aV,i64%a1
br i1%aZ,label%a5,label%a3
a3:
%a4=bitcast i8*%a2 to i8**
store i8*%a0,i8**%a4,align 8
br label%a6
a5:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%a2,i8*%a0,i32%aS,i1 false)
br label%a6
a6:
%a7=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%a8=sext i32%F to i64
%a9=getelementptr inbounds i8,i8*%aV,i64%a8
%ba=bitcast i8*%a9 to i8**
store i8*%a7,i8**%ba,align 8
%bb=sext i32%H to i64
%bc=getelementptr inbounds i8,i8*%aV,i64%bb
%bd=bitcast i8*%bc to i32*
store i32%O,i32*%bd,align 4
%be=call i8*@sml_alloc(i32 inreg 20)#0
%bf=getelementptr inbounds i8,i8*%be,i64 -4
%bg=bitcast i8*%bf to i32*
store i32 1342177296,i32*%bg,align 4
%bh=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bi=bitcast i8*%be to i8**
store i8*%bh,i8**%bi,align 8
%bj=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%bk=getelementptr inbounds i8,i8*%be,i64 8
%bl=bitcast i8*%bk to i8**
store i8*%bj,i8**%bl,align 8
%bm=getelementptr inbounds i8,i8*%be,i64 16
%bn=bitcast i8*%bm to i32*
store i32 3,i32*%bn,align 4
br label%h
}
define internal fastcc i8*@_SMLL3d2l_379(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 12)#0
%k=bitcast i8*%j to i32*
%l=getelementptr inbounds i8,i8*%j,i64 -4
%m=bitcast i8*%l to i32*
store i32 1342177288,i32*%m,align 4
store i8*%j,i8**%d,align 8
store i32%f,i32*%k,align 4
%n=getelementptr inbounds i8,i8*%j,i64 4
%o=bitcast i8*%n to i32*
store i32%i,i32*%o,align 4
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i32*
store i32 0,i32*%q,align 4
%r=call i8*@sml_alloc(i32 inreg 28)#0
%s=getelementptr inbounds i8,i8*%r,i64 -4
%t=bitcast i8*%s to i32*
store i32 1342177304,i32*%t,align 4
%u=load i8*,i8**%d,align 8
%v=bitcast i8*%r to i8**
store i8*%u,i8**%v,align 8
%w=getelementptr inbounds i8,i8*%r,i64 8
%x=bitcast i8*%w to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3d2l_378 to void(...)*),void(...)**%x,align 8
%y=getelementptr inbounds i8,i8*%r,i64 16
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3d2l_378 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%r,i64 24
%B=bitcast i8*%A to i32*
store i32 -2147483647,i32*%B,align 4
ret i8*%r
}
define internal fastcc i8*@_SMLL8listKeys_380(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
l:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%j,label%h
h:
call void@sml_check(i32 inreg%f)
%i=load i8*,i8**%d,align 8
br label%j
j:
%k=phi i8*[%i,%h],[%a,%l]
%m=bitcast i8*%k to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%k,i64 4
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=call i8*@sml_alloc(i32 inreg 12)#0
%s=bitcast i8*%r to i32*
%t=getelementptr inbounds i8,i8*%r,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177288,i32*%u,align 4
store i8*%r,i8**%e,align 8
store i32%n,i32*%s,align 4
%v=getelementptr inbounds i8,i8*%r,i64 4
%w=bitcast i8*%v to i32*
store i32%q,i32*%w,align 4
%x=getelementptr inbounds i8,i8*%r,i64 8
%y=bitcast i8*%x to i32*
store i32 0,i32*%y,align 4
%z=call i8*@sml_alloc(i32 inreg 28)#0
%A=getelementptr inbounds i8,i8*%z,i64 -4
%B=bitcast i8*%A to i32*
store i32 1342177304,i32*%B,align 4
%C=load i8*,i8**%e,align 8
%D=bitcast i8*%z to i8**
store i8*%C,i8**%D,align 8
%E=getelementptr inbounds i8,i8*%z,i64 8
%F=bitcast i8*%E to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL3d2l_379 to void(...)*),void(...)**%F,align 8
%G=getelementptr inbounds i8,i8*%z,i64 16
%H=bitcast i8*%G to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL3d2l_673 to void(...)*),void(...)**%H,align 8
%I=getelementptr inbounds i8,i8*%z,i64 24
%J=bitcast i8*%I to i32*
store i32 -2147483647,i32*%J,align 4
%K=load i8*,i8**%d,align 8
%L=getelementptr inbounds i8,i8*%K,i64 8
%M=bitcast i8*%L to i32*
%N=load i32,i32*%M,align 4
store i8*null,i8**%d,align 8
%O=getelementptr inbounds i8,i8*%K,i64 12
%P=bitcast i8*%O to i32*
%Q=load i32,i32*%P,align 4
store i8*null,i8**%e,align 8
%R=call fastcc i8*@_SMLL3d2l_379(i8*inreg%C,i32 inreg%N,i32 inreg%Q)
%S=getelementptr inbounds i8,i8*%R,i64 16
%T=bitcast i8*%S to i8*(i8*,i8*)**
%U=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%T,align 8
%V=bitcast i8*%R to i8**
%W=load i8*,i8**%V,align 8
store i8*%W,i8**%d,align 8
%X=call i8*@sml_alloc(i32 inreg 20)#0
%Y=getelementptr inbounds i8,i8*%X,i64 -4
%Z=bitcast i8*%Y to i32*
store i32 1342177296,i32*%Z,align 4
%aa=load i8*,i8**%c,align 8
%ab=bitcast i8*%X to i8**
store i8*%aa,i8**%ab,align 8
%ac=getelementptr inbounds i8,i8*%X,i64 8
%ad=bitcast i8*%ac to i8**
store i8*null,i8**%ad,align 8
%ae=getelementptr inbounds i8,i8*%X,i64 16
%af=bitcast i8*%ae to i32*
store i32 3,i32*%af,align 4
%ag=load i8*,i8**%d,align 8
%ah=tail call fastcc i8*%U(i8*inreg%ag,i8*inreg%X)
ret i8*%ah
}
define internal fastcc i8*@_SMLL8listKeys_381(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=bitcast i8*%j to i32*
%l=getelementptr inbounds i8,i8*%j,i64 -4
%m=bitcast i8*%l to i32*
store i32 1342177296,i32*%m,align 4
store i8*%j,i8**%d,align 8
store i32%f,i32*%k,align 4
%n=getelementptr inbounds i8,i8*%j,i64 4
%o=bitcast i8*%n to i32*
store i32%i,i32*%o,align 4
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i32*
store i32%b,i32*%q,align 4
%r=getelementptr inbounds i8,i8*%j,i64 12
%s=bitcast i8*%r to i32*
store i32%c,i32*%s,align 4
%t=getelementptr inbounds i8,i8*%j,i64 16
%u=bitcast i8*%t to i32*
store i32 0,i32*%u,align 4
%v=call i8*@sml_alloc(i32 inreg 28)#0
%w=getelementptr inbounds i8,i8*%v,i64 -4
%x=bitcast i8*%w to i32*
store i32 1342177304,i32*%x,align 4
%y=load i8*,i8**%d,align 8
%z=bitcast i8*%v to i8**
store i8*%y,i8**%z,align 8
%A=getelementptr inbounds i8,i8*%v,i64 8
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL8listKeys_380 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%v,i64 16
%D=bitcast i8*%C to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL8listKeys_380 to void(...)*),void(...)**%D,align 8
%E=getelementptr inbounds i8,i8*%v,i64 24
%F=bitcast i8*%E to i32*
store i32 -2147483647,i32*%F,align 4
ret i8*%v
}
define internal fastcc i8*@_SMLL4left_382(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%f,align 8
%h=bitcast i8**%f to i32**
br label%i
i:
%j=phi i8*[%Y,%A],[%b,%k]
store i8*%j,i8**%c,align 8
%l=load atomic i32,i32*@sml_check_flag unordered,align 4
%m=icmp eq i32%l,0
br i1%m,label%p,label%n
n:
call void@sml_check(i32 inreg%l)
%o=load i8*,i8**%c,align 8
br label%p
p:
%q=phi i8*[%o,%n],[%j,%i]
%r=load i32*,i32**%h,align 8
%s=load i32,i32*%r,align 4
%t=bitcast i8*%q to i8**
%u=load i8*,i8**%t,align 8
store i8*%u,i8**%c,align 8
%v=icmp eq i8*%u,null
br i1%v,label%w,label%A
w:
%x=getelementptr inbounds i8,i8*%q,i64 8
%y=bitcast i8*%x to i8**
%z=load i8*,i8**%y,align 8
ret i8*%z
A:
%B=add i32%s,3
%C=sub i32 0,%s
%D=and i32%B,%C
%E=add i32%s,7
%F=add i32%E,%D
%G=and i32%F,-8
%H=sext i32%G to i64
%I=getelementptr inbounds i8,i8*%u,i64%H
%J=bitcast i8*%I to i8**
%K=load i8*,i8**%J,align 8
store i8*%K,i8**%d,align 8
%L=getelementptr inbounds i8,i8*%q,i64 8
%M=bitcast i8*%L to i8**
%N=load i8*,i8**%M,align 8
store i8*%N,i8**%e,align 8
%O=call i8*@sml_alloc(i32 inreg 20)#0
%P=getelementptr inbounds i8,i8*%O,i64 -4
%Q=bitcast i8*%P to i32*
store i32 1342177296,i32*%Q,align 4
store i8*%O,i8**%g,align 8
%R=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%S=bitcast i8*%O to i8**
store i8*%R,i8**%S,align 8
%T=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%U=getelementptr inbounds i8,i8*%O,i64 8
%V=bitcast i8*%U to i8**
store i8*%T,i8**%V,align 8
%W=getelementptr inbounds i8,i8*%O,i64 16
%X=bitcast i8*%W to i32*
store i32 3,i32*%X,align 4
%Y=call i8*@sml_alloc(i32 inreg 20)#0
%Z=getelementptr inbounds i8,i8*%Y,i64 -4
%aa=bitcast i8*%Z to i32*
store i32 1342177296,i32*%aa,align 4
%ab=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ac=bitcast i8*%Y to i8**
store i8*%ab,i8**%ac,align 8
%ad=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%ae=getelementptr inbounds i8,i8*%Y,i64 8
%af=bitcast i8*%ae to i8**
store i8*%ad,i8**%af,align 8
%ag=getelementptr inbounds i8,i8*%Y,i64 16
%ah=bitcast i8*%ag to i32*
store i32 3,i32*%ah,align 4
br label%i
}
define internal fastcc i8*@_SMLL4left_383(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=call i8*@sml_alloc(i32 inreg 12)#0
%h=bitcast i8*%g to i32*
%i=getelementptr inbounds i8,i8*%g,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177288,i32*%j,align 4
store i8*%g,i8**%d,align 8
store i32%f,i32*%h,align 4
%k=getelementptr inbounds i8,i8*%g,i64 8
%l=bitcast i8*%k to i32*
store i32 0,i32*%l,align 4
%m=call i8*@sml_alloc(i32 inreg 28)#0
%n=getelementptr inbounds i8,i8*%m,i64 -4
%o=bitcast i8*%n to i32*
store i32 1342177304,i32*%o,align 4
%p=load i8*,i8**%d,align 8
%q=bitcast i8*%m to i8**
store i8*%p,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%m,i64 8
%s=bitcast i8*%r to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL4left_382 to void(...)*),void(...)**%s,align 8
%t=getelementptr inbounds i8,i8*%m,i64 16
%u=bitcast i8*%t to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL4left_382 to void(...)*),void(...)**%u,align 8
%v=getelementptr inbounds i8,i8*%m,i64 24
%w=bitcast i8*%v to i32*
store i32 -2147483647,i32*%w,align 4
ret i8*%m
}
define internal fastcc i8*@_SMLL4next_385(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
n:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%f,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%l,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%c,align 8
%k=load i8*,i8**%f,align 8
br label%l
l:
%m=phi i8*[%k,%i],[%a,%n]
%o=phi i8*[%j,%i],[%b,%n]
%p=getelementptr inbounds i8,i8*%m,i64 8
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=add i32%r,3
%t=sub i32 0,%r
%u=and i32%s,%t
%v=add i32%r,23
%w=add i32%v,%u
%x=and i32%w,-8
%y=add i32%x,-1
%z=and i32%y,-8
%A=icmp eq i8*%o,null
br i1%A,label%ax,label%B
B:
%C=bitcast i8*%o to i8**
%D=load i8*,i8**%C,align 8
store i8*%D,i8**%d,align 8
%E=icmp eq i8*%D,null
br i1%E,label%ax,label%F
F:
%G=sext i32%z to i64
%H=getelementptr inbounds i8,i8*%D,i64%G
%I=bitcast i8*%H to i8**
%J=load i8*,i8**%I,align 8
store i8*%J,i8**%c,align 8
%K=getelementptr inbounds i8,i8*%o,i64 8
%L=bitcast i8*%K to i8**
%M=load i8*,i8**%L,align 8
store i8*%M,i8**%e,align 8
%N=bitcast i8*%m to i8**
%O=load i8*,i8**%N,align 8
%P=getelementptr inbounds i8,i8*%m,i64 12
%Q=bitcast i8*%P to i32*
%R=load i32,i32*%Q,align 4
store i8*null,i8**%f,align 8
%S=getelementptr inbounds i8,i8*%m,i64 16
%T=bitcast i8*%S to i32*
%U=load i32,i32*%T,align 4
%V=call fastcc i8*@_SMLL4left_383(i8*inreg%O,i32 inreg%R,i32 inreg%U)
%W=getelementptr inbounds i8,i8*%V,i64 16
%X=bitcast i8*%W to i8*(i8*,i8*)**
%Y=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%X,align 8
%Z=bitcast i8*%V to i8**
%aa=load i8*,i8**%Z,align 8
store i8*%aa,i8**%f,align 8
%ab=call i8*@sml_alloc(i32 inreg 20)#0
%ac=getelementptr inbounds i8,i8*%ab,i64 -4
%ad=bitcast i8*%ac to i32*
store i32 1342177296,i32*%ad,align 4
%ae=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%af=bitcast i8*%ab to i8**
store i8*%ae,i8**%af,align 8
%ag=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%ah=getelementptr inbounds i8,i8*%ab,i64 8
%ai=bitcast i8*%ah to i8**
store i8*%ag,i8**%ai,align 8
%aj=getelementptr inbounds i8,i8*%ab,i64 16
%ak=bitcast i8*%aj to i32*
store i32 3,i32*%ak,align 4
%al=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%am=call fastcc i8*%Y(i8*inreg%al,i8*inreg%ab)
store i8*%am,i8**%c,align 8
%an=call i8*@sml_alloc(i32 inreg 20)#0
%ao=getelementptr inbounds i8,i8*%an,i64 -4
%ap=bitcast i8*%ao to i32*
store i32 1342177296,i32*%ap,align 4
%aq=load i8*,i8**%d,align 8
%ar=bitcast i8*%an to i8**
store i8*%aq,i8**%ar,align 8
%as=load i8*,i8**%c,align 8
%at=getelementptr inbounds i8,i8*%an,i64 8
%au=bitcast i8*%at to i8**
store i8*%as,i8**%au,align 8
%av=getelementptr inbounds i8,i8*%an,i64 16
%aw=bitcast i8*%av to i32*
store i32 3,i32*%aw,align 4
ret i8*%an
ax:
ret i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,i8*,i32}>,<{[4x i8],i32,i8*,i8*,i32}>*@q,i64 0,i32 2)to i8*)
}
define internal fastcc i8*@_SMLL4next_386(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=getelementptr inbounds i8,i8*%a,i64 8
%i=bitcast i8*%h to i32*
%j=load i32,i32*%i,align 4
%k=call i8*@sml_alloc(i32 inreg 28)#0
%l=getelementptr inbounds i8,i8*%k,i64 -4
%m=bitcast i8*%l to i32*
store i32 1342177304,i32*%m,align 4
store i8*%k,i8**%e,align 8
%n=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%o=bitcast i8*%k to i8**
store i8*%n,i8**%o,align 8
%p=getelementptr inbounds i8,i8*%k,i64 8
%q=bitcast i8*%p to i32*
store i32%j,i32*%q,align 4
%r=getelementptr inbounds i8,i8*%k,i64 12
%s=bitcast i8*%r to i32*
store i32%b,i32*%s,align 4
%t=getelementptr inbounds i8,i8*%k,i64 16
%u=bitcast i8*%t to i32*
store i32%c,i32*%u,align 4
%v=getelementptr inbounds i8,i8*%k,i64 24
%w=bitcast i8*%v to i32*
store i32 1,i32*%w,align 4
%x=call i8*@sml_alloc(i32 inreg 28)#0
%y=getelementptr inbounds i8,i8*%x,i64 -4
%z=bitcast i8*%y to i32*
store i32 1342177304,i32*%z,align 4
%A=load i8*,i8**%e,align 8
%B=bitcast i8*%x to i8**
store i8*%A,i8**%B,align 8
%C=getelementptr inbounds i8,i8*%x,i64 8
%D=bitcast i8*%C to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL4next_385 to void(...)*),void(...)**%D,align 8
%E=getelementptr inbounds i8,i8*%x,i64 16
%F=bitcast i8*%E to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL4next_385 to void(...)*),void(...)**%F,align 8
%G=getelementptr inbounds i8,i8*%x,i64 24
%H=bitcast i8*%G to i32*
store i32 -2147483647,i32*%H,align 4
ret i8*%x
}
define internal fastcc i32@_SMLL3cmp_387(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
p:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
store i8*%a,i8**%i,align 8
%k=bitcast i8**%d to i8***
%l=bitcast i8**%e to i8***
%m=bitcast i8**%i to i8***
br label%n
n:
%o=phi i8*[%eA,%ez],[%b,%p]
store i8*%o,i8**%c,align 8
%q=load atomic i32,i32*@sml_check_flag unordered,align 4
%r=icmp eq i32%q,0
br i1%r,label%u,label%s
s:
call void@sml_check(i32 inreg%q)
%t=load i8*,i8**%c,align 8
br label%u
u:
%v=phi i8*[%t,%s],[%o,%n]
store i8*null,i8**%c,align 8
store i8*%v,i8**%d,align 8
%w=load i8*,i8**%i,align 8
%x=getelementptr inbounds i8,i8*%w,i64 28
%y=bitcast i8*%x to i32*
%z=load i32,i32*%y,align 4
%A=add i32%z,3
%B=sub i32 0,%z
%C=and i32%A,%B
%D=add i32%z,23
%E=add i32%D,%C
%F=and i32%E,-8
%G=getelementptr inbounds i8,i8*%w,i64 36
%H=bitcast i8*%G to i32*
%I=load i32,i32*%H,align 4
%J=add i32%I,-1
%K=add i32%J,%F
%L=sub i32 0,%I
%M=and i32%K,%L
%N=add i32%z,-1
%O=and i32%N,%B
%P=shl i32%z,1
%Q=add i32%P,-1
%R=add i32%Q,%O
%S=and i32%R,%B
%T=add i32%z,7
%U=add i32%T,%S
%V=and i32%U,-8
%W=lshr i32%S,3
%X=lshr i32%O,3
%Y=sub nsw i32%W,%X
%Z=getelementptr inbounds i8,i8*%w,i64 24
%aa=bitcast i8*%Z to i32*
%ab=load i32,i32*%aa,align 4
%ac=shl i32%ab,%Y
%ad=or i32%ac,%ab
%ae=or i32%V,4
%af=and i32%J,%L
%ag=shl i32%I,1
%ah=add i32%ag,-1
%ai=add i32%ah,%af
%aj=and i32%ai,%L
%ak=add i32%I,7
%al=add i32%ak,%aj
%am=and i32%al,-8
%an=lshr i32%aj,3
%ao=lshr i32%af,3
%ap=sub nsw i32%an,%ao
%aq=getelementptr inbounds i8,i8*%w,i64 32
%ar=bitcast i8*%aq to i32*
%as=load i32,i32*%ar,align 4
%at=shl i32%as,%ap
%au=or i32%at,%as
%av=or i32%am,4
%aw=getelementptr inbounds i8,i8*%w,i64 16
%ax=bitcast i8*%aw to i8**
%ay=load i8*,i8**%ax,align 8
%az=call fastcc i8*@_SMLL4next_386(i8*inreg%ay,i32 inreg%as,i32 inreg%I)
%aA=getelementptr inbounds i8,i8*%az,i64 16
%aB=bitcast i8*%aA to i8*(i8*,i8*)**
%aC=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aB,align 8
%aD=bitcast i8*%az to i8**
%aE=load i8*,i8**%aD,align 8
%aF=load i8**,i8***%k,align 8
%aG=load i8*,i8**%aF,align 8
%aH=call fastcc i8*%aC(i8*inreg%aE,i8*inreg%aG)
store i8*%aH,i8**%c,align 8
%aI=load i8*,i8**%i,align 8
%aJ=getelementptr inbounds i8,i8*%aI,i64 16
%aK=bitcast i8*%aJ to i8**
%aL=load i8*,i8**%aK,align 8
%aM=getelementptr inbounds i8,i8*%aI,i64 32
%aN=bitcast i8*%aM to i32*
%aO=load i32,i32*%aN,align 4
%aP=getelementptr inbounds i8,i8*%aI,i64 36
%aQ=bitcast i8*%aP to i32*
%aR=load i32,i32*%aQ,align 4
%aS=call fastcc i8*@_SMLL4next_386(i8*inreg%aL,i32 inreg%aO,i32 inreg%aR)
%aT=getelementptr inbounds i8,i8*%aS,i64 16
%aU=bitcast i8*%aT to i8*(i8*,i8*)**
%aV=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aU,align 8
%aW=bitcast i8*%aS to i8**
%aX=load i8*,i8**%aW,align 8
%aY=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aZ=getelementptr inbounds i8,i8*%aY,i64 8
%a0=bitcast i8*%aZ to i8**
%a1=load i8*,i8**%a0,align 8
%a2=call fastcc i8*%aV(i8*inreg%aX,i8*inreg%a1)
store i8*%a2,i8**%d,align 8
%a3=call i8*@sml_alloc(i32 inreg 20)#0
%a4=getelementptr inbounds i8,i8*%a3,i64 -4
%a5=bitcast i8*%a4 to i32*
store i32 1342177296,i32*%a5,align 4
store i8*%a3,i8**%e,align 8
%a6=load i8*,i8**%c,align 8
%a7=bitcast i8*%a3 to i8**
store i8*%a6,i8**%a7,align 8
%a8=load i8*,i8**%d,align 8
%a9=getelementptr inbounds i8,i8*%a3,i64 8
%ba=bitcast i8*%a9 to i8**
store i8*%a8,i8**%ba,align 8
%bb=getelementptr inbounds i8,i8*%a3,i64 16
%bc=bitcast i8*%bb to i32*
store i32 3,i32*%bc,align 4
%bd=bitcast i8*%a6 to i8**
%be=load i8*,i8**%bd,align 8
%bf=icmp eq i8*%be,null
br i1%bf,label%bg,label%bn
bg:
%bh=bitcast i8*%a8 to i8**
%bi=load i8*,i8**%bh,align 8
%bj=icmp eq i8*%bi,null
%bk=select i1%bj,i32 0,i32 2
br label%bl
bl:
%bm=phi i32[%bk,%bg],[%ex,%eq],[%dQ,%dJ],[1,%b6]
ret i32%bm
bn:
store i8*%be,i8**%d,align 8
%bo=load i8*,i8**%i,align 8
%bp=getelementptr inbounds i8,i8*%bo,i64 24
%bq=bitcast i8*%bp to i32*
%br=load i32,i32*%bq,align 4
%bs=icmp eq i32%br,0
br i1%bs,label%by,label%bt
bt:
%bu=sext i32%C to i64
%bv=getelementptr inbounds i8,i8*%be,i64%bu
%bw=bitcast i8*%bv to i8**
%bx=load i8*,i8**%bw,align 8
br label%bJ
by:
%bz=getelementptr inbounds i8,i8*%bo,i64 28
%bA=bitcast i8*%bz to i32*
%bB=load i32,i32*%bA,align 4
%bC=call i8*@sml_alloc(i32 inreg%bB)#0
%bD=getelementptr inbounds i8,i8*%bC,i64 -4
%bE=bitcast i8*%bD to i32*
store i32%bB,i32*%bE,align 4
%bF=load i8*,i8**%d,align 8
%bG=sext i32%C to i64
%bH=getelementptr inbounds i8,i8*%bF,i64%bG
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bC,i8*%bH,i32%bB,i1 false)
%bI=load i8*,i8**%i,align 8
br label%bJ
bJ:
%bK=phi i8*[%bF,%by],[%be,%bt]
%bL=phi i8*[%bI,%by],[%bo,%bt]
%bM=phi i8*[%bC,%by],[%bx,%bt]
store i8*%bM,i8**%c,align 8
%bN=getelementptr inbounds i8,i8*%bL,i64 32
%bO=bitcast i8*%bN to i32*
%bP=load i32,i32*%bO,align 4
%bQ=icmp eq i32%bP,0
br i1%bQ,label%bW,label%bR
bR:
store i8*null,i8**%d,align 8
%bS=sext i32%M to i64
%bT=getelementptr inbounds i8,i8*%bK,i64%bS
%bU=bitcast i8*%bT to i8**
%bV=load i8*,i8**%bU,align 8
br label%b6
bW:
%bX=getelementptr inbounds i8,i8*%bL,i64 36
%bY=bitcast i8*%bX to i32*
%bZ=load i32,i32*%bY,align 4
%b0=call i8*@sml_alloc(i32 inreg%bZ)#0
%b1=getelementptr inbounds i8,i8*%b0,i64 -4
%b2=bitcast i8*%b1 to i32*
store i32%bZ,i32*%b2,align 4
%b3=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%b4=sext i32%M to i64
%b5=getelementptr inbounds i8,i8*%b3,i64%b4
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%b0,i8*%b5,i32%bZ,i1 false)
br label%b6
b6:
%b7=phi i8*[%b0,%bW],[%bV,%bR]
store i8*%b7,i8**%d,align 8
%b8=load i8**,i8***%l,align 8
%b9=load i8*,i8**%b8,align 8
%ca=getelementptr inbounds i8,i8*%b9,i64 8
%cb=bitcast i8*%ca to i8**
%cc=load i8*,i8**%cb,align 8
store i8*%cc,i8**%f,align 8
%cd=getelementptr inbounds i8*,i8**%b8,i64 1
%ce=bitcast i8**%cd to i8***
%cf=load i8**,i8***%ce,align 8
%cg=load i8*,i8**%cf,align 8
%ch=icmp eq i8*%cg,null
br i1%ch,label%bl,label%ci
ci:
store i8*%cg,i8**%h,align 8
%cj=load i8*,i8**%i,align 8
%ck=getelementptr inbounds i8,i8*%cj,i64 24
%cl=bitcast i8*%ck to i32*
%cm=load i32,i32*%cl,align 4
%cn=icmp eq i32%cm,0
br i1%cn,label%ct,label%co
co:
%cp=sext i32%C to i64
%cq=getelementptr inbounds i8,i8*%cg,i64%cp
%cr=bitcast i8*%cq to i8**
%cs=load i8*,i8**%cr,align 8
br label%cE
ct:
%cu=getelementptr inbounds i8,i8*%cj,i64 28
%cv=bitcast i8*%cu to i32*
%cw=load i32,i32*%cv,align 4
%cx=call i8*@sml_alloc(i32 inreg%cw)#0
%cy=getelementptr inbounds i8,i8*%cx,i64 -4
%cz=bitcast i8*%cy to i32*
store i32%cw,i32*%cz,align 4
%cA=load i8*,i8**%h,align 8
%cB=sext i32%C to i64
%cC=getelementptr inbounds i8,i8*%cA,i64%cB
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cx,i8*%cC,i32%cw,i1 false)
%cD=load i8*,i8**%i,align 8
br label%cE
cE:
%cF=phi i8*[%cD,%ct],[%cj,%co]
%cG=phi i8*[%cA,%ct],[%cg,%co]
%cH=phi i8*[%cx,%ct],[%cs,%co]
store i8*%cH,i8**%g,align 8
%cI=getelementptr inbounds i8,i8*%cF,i64 32
%cJ=bitcast i8*%cI to i32*
%cK=load i32,i32*%cJ,align 4
%cL=icmp eq i32%cK,0
br i1%cL,label%cS,label%cM
cM:
%cN=bitcast i8*%cF to i8**
store i8*null,i8**%h,align 8
%cO=sext i32%M to i64
%cP=getelementptr inbounds i8,i8*%cG,i64%cO
%cQ=bitcast i8*%cP to i8**
%cR=load i8*,i8**%cQ,align 8
br label%c4
cS:
%cT=getelementptr inbounds i8,i8*%cF,i64 36
%cU=bitcast i8*%cT to i32*
%cV=load i32,i32*%cU,align 4
%cW=call i8*@sml_alloc(i32 inreg%cV)#0
%cX=getelementptr inbounds i8,i8*%cW,i64 -4
%cY=bitcast i8*%cX to i32*
store i32%cV,i32*%cY,align 4
%cZ=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%c0=sext i32%M to i64
%c1=getelementptr inbounds i8,i8*%cZ,i64%c0
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cW,i8*%c1,i32%cV,i1 false)
%c2=load i8**,i8***%m,align 8
%c3=bitcast i8**%c2 to i8*
br label%c4
c4:
%c5=phi i8*[%c3,%cS],[%cF,%cM]
%c6=phi i8**[%c2,%cS],[%cN,%cM]
%c7=phi i8*[%cW,%cS],[%cR,%cM]
store i8*%c7,i8**%h,align 8
%c8=load i8*,i8**%e,align 8
%c9=getelementptr inbounds i8,i8*%c8,i64 8
%da=bitcast i8*%c9 to i8**
%db=load i8*,i8**%da,align 8
%dc=getelementptr inbounds i8,i8*%db,i64 8
%dd=bitcast i8*%dc to i8**
%de=load i8*,i8**%dd,align 8
store i8*%de,i8**%e,align 8
%df=load i8*,i8**%c6,align 8
%dg=getelementptr inbounds i8,i8*%df,i64 16
%dh=bitcast i8*%dg to i8*(i8*,i8*)**
%di=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%dh,align 8
%dj=bitcast i8*%df to i8**
%dk=load i8*,i8**%dj,align 8
store i8*%dk,i8**%j,align 8
%dl=getelementptr inbounds i8,i8*%c5,i64 28
%dm=bitcast i8*%dl to i32*
%dn=load i32,i32*%dm,align 4
%do=getelementptr inbounds i8,i8*%c5,i64 24
%dp=bitcast i8*%do to i32*
%dq=load i32,i32*%dp,align 4
%dr=call i8*@sml_alloc(i32 inreg%ae)#0
%ds=or i32%V,1342177280
%dt=getelementptr inbounds i8,i8*%dr,i64 -4
%du=bitcast i8*%dt to i32*
store i32%ds,i32*%du,align 4
call void@llvm.memset.p0i8.i32(i8*%dr,i8 0,i32%ae,i1 false)
%dv=icmp eq i32%dq,0
%dw=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%dx=sext i32%O to i64
%dy=getelementptr inbounds i8,i8*%dr,i64%dx
br i1%dv,label%dF,label%dz
dz:
%dA=bitcast i8*%dy to i8**
store i8*%dw,i8**%dA,align 8
%dB=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%dC=sext i32%S to i64
%dD=getelementptr inbounds i8,i8*%dr,i64%dC
%dE=bitcast i8*%dD to i8**
store i8*%dB,i8**%dE,align 8
br label%dJ
dF:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dy,i8*%dw,i32%dn,i1 false)
%dG=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%dH=sext i32%S to i64
%dI=getelementptr inbounds i8,i8*%dr,i64%dH
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dI,i8*%dG,i32%dn,i1 false)
br label%dJ
dJ:
%dK=sext i32%V to i64
%dL=getelementptr inbounds i8,i8*%dr,i64%dK
%dM=bitcast i8*%dL to i32*
store i32%ad,i32*%dM,align 4
%dN=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%dO=call fastcc i8*%di(i8*inreg%dN,i8*inreg%dr)
%dP=bitcast i8*%dO to i32*
%dQ=load i32,i32*%dP,align 4
%dR=icmp eq i32%dQ,0
br i1%dR,label%dS,label%bl
dS:
%dT=load i8*,i8**%i,align 8
%dU=getelementptr inbounds i8,i8*%dT,i64 8
%dV=bitcast i8*%dU to i8**
%dW=load i8*,i8**%dV,align 8
%dX=getelementptr inbounds i8,i8*%dW,i64 16
%dY=bitcast i8*%dX to i8*(i8*,i8*)**
%dZ=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%dY,align 8
%d0=bitcast i8*%dW to i8**
%d1=load i8*,i8**%d0,align 8
store i8*%d1,i8**%c,align 8
%d2=getelementptr inbounds i8,i8*%dT,i64 36
%d3=bitcast i8*%d2 to i32*
%d4=load i32,i32*%d3,align 4
%d5=getelementptr inbounds i8,i8*%dT,i64 32
%d6=bitcast i8*%d5 to i32*
%d7=load i32,i32*%d6,align 4
%d8=call i8*@sml_alloc(i32 inreg%av)#0
%d9=or i32%am,1342177280
%ea=getelementptr inbounds i8,i8*%d8,i64 -4
%eb=bitcast i8*%ea to i32*
store i32%d9,i32*%eb,align 4
call void@llvm.memset.p0i8.i32(i8*%d8,i8 0,i32%av,i1 false)
%ec=icmp eq i32%d7,0
%ed=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ee=sext i32%af to i64
%ef=getelementptr inbounds i8,i8*%d8,i64%ee
br i1%ec,label%em,label%eg
eg:
%eh=bitcast i8*%ef to i8**
store i8*%ed,i8**%eh,align 8
%ei=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%ej=sext i32%aj to i64
%ek=getelementptr inbounds i8,i8*%d8,i64%ej
%el=bitcast i8*%ek to i8**
store i8*%ei,i8**%el,align 8
br label%eq
em:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ef,i8*%ed,i32%d4,i1 false)
%en=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%eo=sext i32%aj to i64
%ep=getelementptr inbounds i8,i8*%d8,i64%eo
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ep,i8*%en,i32%d4,i1 false)
br label%eq
eq:
%er=sext i32%am to i64
%es=getelementptr inbounds i8,i8*%d8,i64%er
%et=bitcast i8*%es to i32*
store i32%au,i32*%et,align 4
%eu=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ev=call fastcc i8*%dZ(i8*inreg%eu,i8*inreg%d8)
%ew=bitcast i8*%ev to i32*
%ex=load i32,i32*%ew,align 4
%ey=icmp eq i32%ex,0
br i1%ey,label%ez,label%bl
ez:
%eA=call i8*@sml_alloc(i32 inreg 20)#0
%eB=getelementptr inbounds i8,i8*%eA,i64 -4
%eC=bitcast i8*%eB to i32*
store i32 1342177296,i32*%eC,align 4
%eD=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%eE=bitcast i8*%eA to i8**
store i8*%eD,i8**%eE,align 8
%eF=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%eG=getelementptr inbounds i8,i8*%eA,i64 8
%eH=bitcast i8*%eG to i8**
store i8*%eF,i8**%eH,align 8
%eI=getelementptr inbounds i8,i8*%eA,i64 16
%eJ=bitcast i8*%eI to i32*
store i32 3,i32*%eJ,align 4
br label%n
}
define internal fastcc i32@_SMLL7collate_388(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%j=load atomic i32,i32*@sml_check_flag unordered,align 4
%k=icmp eq i32%j,0
br i1%k,label%l,label%n
l:
%m=bitcast i8*%a to i8**
br label%s
n:
call void@sml_check(i32 inreg%j)
%o=load i8*,i8**%c,align 8
%p=bitcast i8**%e to i8***
%q=load i8**,i8***%p,align 8
%r=bitcast i8**%q to i8*
br label%s
s:
%t=phi i8*[%r,%n],[%a,%l]
%u=phi i8**[%q,%n],[%m,%l]
%v=phi i8*[%o,%n],[%b,%l]
%w=bitcast i8*%v to i8**
%x=load i8*,i8**%w,align 8
store i8*%x,i8**%c,align 8
%y=getelementptr inbounds i8,i8*%v,i64 8
%z=bitcast i8*%y to i8**
%A=load i8*,i8**%z,align 8
store i8*%A,i8**%d,align 8
%B=load i8*,i8**%u,align 8
store i8*%B,i8**%f,align 8
%C=getelementptr inbounds i8*,i8**%u,i64 1
%D=load i8*,i8**%C,align 8
store i8*%D,i8**%g,align 8
%E=getelementptr inbounds i8*,i8**%u,i64 3
%F=load i8*,i8**%E,align 8
store i8*%F,i8**%h,align 8
%G=getelementptr inbounds i8,i8*%t,i64 32
%H=bitcast i8*%G to i32*
%I=load i32,i32*%H,align 4
%J=getelementptr inbounds i8,i8*%t,i64 36
%K=bitcast i8*%J to i32*
%L=load i32,i32*%K,align 4
%M=getelementptr inbounds i8,i8*%t,i64 40
%N=bitcast i8*%M to i32*
%O=load i32,i32*%N,align 4
%P=getelementptr inbounds i8,i8*%t,i64 44
%Q=bitcast i8*%P to i32*
%R=load i32,i32*%Q,align 4
%S=call i8*@sml_alloc(i32 inreg 44)#0
%T=getelementptr inbounds i8,i8*%S,i64 -4
%U=bitcast i8*%T to i32*
store i32 1342177320,i32*%U,align 4
store i8*%S,i8**%i,align 8
%V=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%W=bitcast i8*%S to i8**
store i8*%V,i8**%W,align 8
%X=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%Y=getelementptr inbounds i8,i8*%S,i64 8
%Z=bitcast i8*%Y to i8**
store i8*%X,i8**%Z,align 8
%aa=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%ab=getelementptr inbounds i8,i8*%S,i64 16
%ac=bitcast i8*%ab to i8**
store i8*%aa,i8**%ac,align 8
%ad=getelementptr inbounds i8,i8*%S,i64 24
%ae=bitcast i8*%ad to i32*
store i32%I,i32*%ae,align 4
%af=getelementptr inbounds i8,i8*%S,i64 28
%ag=bitcast i8*%af to i32*
store i32%L,i32*%ag,align 4
%ah=getelementptr inbounds i8,i8*%S,i64 32
%ai=bitcast i8*%ah to i32*
store i32%O,i32*%ai,align 4
%aj=getelementptr inbounds i8,i8*%S,i64 36
%ak=bitcast i8*%aj to i32*
store i32%R,i32*%ak,align 4
%al=getelementptr inbounds i8,i8*%S,i64 40
%am=bitcast i8*%al to i32*
store i32 7,i32*%am,align 4
%an=call i8*@sml_alloc(i32 inreg 28)#0
%ao=getelementptr inbounds i8,i8*%an,i64 -4
%ap=bitcast i8*%ao to i32*
store i32 1342177304,i32*%ap,align 4
%aq=load i8*,i8**%i,align 8
%ar=bitcast i8*%an to i8**
store i8*%aq,i8**%ar,align 8
%as=getelementptr inbounds i8,i8*%an,i64 8
%at=bitcast i8*%as to void(...)**
store void(...)*bitcast(i32(i8*,i8*)*@_SMLL3cmp_387 to void(...)*),void(...)**%at,align 8
%au=getelementptr inbounds i8,i8*%an,i64 16
%av=bitcast i8*%au to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3cmp_677 to void(...)*),void(...)**%av,align 8
%aw=getelementptr inbounds i8,i8*%an,i64 24
%ax=bitcast i8*%aw to i32*
store i32 -2147483647,i32*%ax,align 4
%ay=load i8*,i8**%e,align 8
%az=getelementptr inbounds i8,i8*%ay,i64 16
%aA=bitcast i8*%az to i8**
%aB=load i8*,i8**%aA,align 8
%aC=getelementptr inbounds i8,i8*%ay,i64 40
%aD=bitcast i8*%aC to i32*
%aE=load i32,i32*%aD,align 4
%aF=getelementptr inbounds i8,i8*%ay,i64 44
%aG=bitcast i8*%aF to i32*
%aH=load i32,i32*%aG,align 4
%aI=call fastcc i8*@_SMLL4left_383(i8*inreg%aB,i32 inreg%aE,i32 inreg%aH)
%aJ=getelementptr inbounds i8,i8*%aI,i64 16
%aK=bitcast i8*%aJ to i8*(i8*,i8*)**
%aL=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aK,align 8
%aM=bitcast i8*%aI to i8**
%aN=load i8*,i8**%aM,align 8
store i8*%aN,i8**%f,align 8
%aO=call i8*@sml_alloc(i32 inreg 20)#0
%aP=getelementptr inbounds i8,i8*%aO,i64 -4
%aQ=bitcast i8*%aP to i32*
store i32 1342177296,i32*%aQ,align 4
%aR=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aS=bitcast i8*%aO to i8**
store i8*%aR,i8**%aS,align 8
%aT=getelementptr inbounds i8,i8*%aO,i64 8
%aU=bitcast i8*%aT to i8**
store i8*null,i8**%aU,align 8
%aV=getelementptr inbounds i8,i8*%aO,i64 16
%aW=bitcast i8*%aV to i32*
store i32 3,i32*%aW,align 4
%aX=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%aY=call fastcc i8*%aL(i8*inreg%aX,i8*inreg%aO)
store i8*%aY,i8**%c,align 8
%aZ=load i8*,i8**%e,align 8
%a0=getelementptr inbounds i8,i8*%aZ,i64 16
%a1=bitcast i8*%a0 to i8**
%a2=load i8*,i8**%a1,align 8
%a3=getelementptr inbounds i8,i8*%aZ,i64 40
%a4=bitcast i8*%a3 to i32*
%a5=load i32,i32*%a4,align 4
store i8*null,i8**%e,align 8
%a6=getelementptr inbounds i8,i8*%aZ,i64 44
%a7=bitcast i8*%a6 to i32*
%a8=load i32,i32*%a7,align 4
%a9=call fastcc i8*@_SMLL4left_383(i8*inreg%a2,i32 inreg%a5,i32 inreg%a8)
%ba=getelementptr inbounds i8,i8*%a9,i64 16
%bb=bitcast i8*%ba to i8*(i8*,i8*)**
%bc=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bb,align 8
%bd=bitcast i8*%a9 to i8**
%be=load i8*,i8**%bd,align 8
store i8*%be,i8**%e,align 8
%bf=call i8*@sml_alloc(i32 inreg 20)#0
%bg=getelementptr inbounds i8,i8*%bf,i64 -4
%bh=bitcast i8*%bg to i32*
store i32 1342177296,i32*%bh,align 4
%bi=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bj=bitcast i8*%bf to i8**
store i8*%bi,i8**%bj,align 8
%bk=getelementptr inbounds i8,i8*%bf,i64 8
%bl=bitcast i8*%bk to i8**
store i8*null,i8**%bl,align 8
%bm=getelementptr inbounds i8,i8*%bf,i64 16
%bn=bitcast i8*%bm to i32*
store i32 3,i32*%bn,align 4
%bo=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bp=call fastcc i8*%bc(i8*inreg%bo,i8*inreg%bf)
store i8*%bp,i8**%d,align 8
%bq=call i8*@sml_alloc(i32 inreg 20)#0
%br=getelementptr inbounds i8,i8*%bq,i64 -4
%bs=bitcast i8*%br to i32*
store i32 1342177296,i32*%bs,align 4
%bt=load i8*,i8**%c,align 8
%bu=bitcast i8*%bq to i8**
store i8*%bt,i8**%bu,align 8
%bv=load i8*,i8**%d,align 8
%bw=getelementptr inbounds i8,i8*%bq,i64 8
%bx=bitcast i8*%bw to i8**
store i8*%bv,i8**%bx,align 8
%by=getelementptr inbounds i8,i8*%bq,i64 16
%bz=bitcast i8*%by to i32*
store i32 3,i32*%bz,align 4
%bA=load i8*,i8**%i,align 8
%bB=tail call fastcc i32@_SMLL3cmp_387(i8*inreg%bA,i8*inreg%bq)
ret i32%bB
}
define internal fastcc i8*@_SMLL7collate_389(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%b,i8**%c,align 8
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%d,align 8
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
store i8*%l,i8**%e,align 8
%m=getelementptr inbounds i8,i8*%a,i64 16
%n=bitcast i8*%m to i8**
%o=load i8*,i8**%n,align 8
store i8*%o,i8**%f,align 8
%p=getelementptr inbounds i8,i8*%a,i64 24
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=getelementptr inbounds i8,i8*%a,i64 28
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=getelementptr inbounds i8,i8*%a,i64 32
%w=bitcast i8*%v to i32*
%x=load i32,i32*%w,align 4
%y=getelementptr inbounds i8,i8*%a,i64 36
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=call i8*@sml_alloc(i32 inreg 52)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177328,i32*%D,align 4
store i8*%B,i8**%g,align 8
%E=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%F=bitcast i8*%B to i8**
store i8*%E,i8**%F,align 8
%G=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%H=getelementptr inbounds i8,i8*%B,i64 8
%I=bitcast i8*%H to i8**
store i8*%G,i8**%I,align 8
%J=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%K=getelementptr inbounds i8,i8*%B,i64 16
%L=bitcast i8*%K to i8**
store i8*%J,i8**%L,align 8
%M=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%N=getelementptr inbounds i8,i8*%B,i64 24
%O=bitcast i8*%N to i8**
store i8*%M,i8**%O,align 8
%P=getelementptr inbounds i8,i8*%B,i64 32
%Q=bitcast i8*%P to i32*
store i32%r,i32*%Q,align 4
%R=getelementptr inbounds i8,i8*%B,i64 36
%S=bitcast i8*%R to i32*
store i32%u,i32*%S,align 4
%T=getelementptr inbounds i8,i8*%B,i64 40
%U=bitcast i8*%T to i32*
store i32%x,i32*%U,align 4
%V=getelementptr inbounds i8,i8*%B,i64 44
%W=bitcast i8*%V to i32*
store i32%A,i32*%W,align 4
%X=getelementptr inbounds i8,i8*%B,i64 48
%Y=bitcast i8*%X to i32*
store i32 15,i32*%Y,align 4
%Z=call i8*@sml_alloc(i32 inreg 28)#0
%aa=getelementptr inbounds i8,i8*%Z,i64 -4
%ab=bitcast i8*%aa to i32*
store i32 1342177304,i32*%ab,align 4
%ac=load i8*,i8**%g,align 8
%ad=bitcast i8*%Z to i8**
store i8*%ac,i8**%ad,align 8
%ae=getelementptr inbounds i8,i8*%Z,i64 8
%af=bitcast i8*%ae to void(...)**
store void(...)*bitcast(i32(i8*,i8*)*@_SMLL7collate_388 to void(...)*),void(...)**%af,align 8
%ag=getelementptr inbounds i8,i8*%Z,i64 16
%ah=bitcast i8*%ag to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL7collate_678 to void(...)*),void(...)**%ah,align 8
%ai=getelementptr inbounds i8,i8*%Z,i64 24
%aj=bitcast i8*%ai to i32*
store i32 -2147483647,i32*%aj,align 4
ret i8*%Z
}
define internal fastcc i8*@_SMLL7collate_390(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%d,align 8
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
store i8*%l,i8**%e,align 8
%m=getelementptr inbounds i8,i8*%a,i64 16
%n=bitcast i8*%m to i8**
%o=load i8*,i8**%n,align 8
store i8*%o,i8**%f,align 8
%p=getelementptr inbounds i8,i8*%a,i64 24
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=getelementptr inbounds i8,i8*%a,i64 28
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=call i8*@sml_alloc(i32 inreg 44)#0
%w=getelementptr inbounds i8,i8*%v,i64 -4
%x=bitcast i8*%w to i32*
store i32 1342177320,i32*%x,align 4
store i8*%v,i8**%g,align 8
%y=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%z=bitcast i8*%v to i8**
store i8*%y,i8**%z,align 8
%A=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%B=getelementptr inbounds i8,i8*%v,i64 8
%C=bitcast i8*%B to i8**
store i8*%A,i8**%C,align 8
%D=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%E=getelementptr inbounds i8,i8*%v,i64 16
%F=bitcast i8*%E to i8**
store i8*%D,i8**%F,align 8
%G=getelementptr inbounds i8,i8*%v,i64 24
%H=bitcast i8*%G to i32*
store i32%r,i32*%H,align 4
%I=getelementptr inbounds i8,i8*%v,i64 28
%J=bitcast i8*%I to i32*
store i32%u,i32*%J,align 4
%K=getelementptr inbounds i8,i8*%v,i64 32
%L=bitcast i8*%K to i32*
store i32%b,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%v,i64 36
%N=bitcast i8*%M to i32*
store i32%c,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%v,i64 40
%P=bitcast i8*%O to i32*
store i32 7,i32*%P,align 4
%Q=call i8*@sml_alloc(i32 inreg 28)#0
%R=getelementptr inbounds i8,i8*%Q,i64 -4
%S=bitcast i8*%R to i32*
store i32 1342177304,i32*%S,align 4
%T=load i8*,i8**%g,align 8
%U=bitcast i8*%Q to i8**
store i8*%T,i8**%U,align 8
%V=getelementptr inbounds i8,i8*%Q,i64 8
%W=bitcast i8*%V to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL7collate_389 to void(...)*),void(...)**%W,align 8
%X=getelementptr inbounds i8,i8*%Q,i64 16
%Y=bitcast i8*%X to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL7collate_389 to void(...)*),void(...)**%Y,align 8
%Z=getelementptr inbounds i8,i8*%Q,i64 24
%aa=bitcast i8*%Z to i32*
store i32 -2147483647,i32*%aa,align 4
ret i8*%Q
}
define internal fastcc void@_SMLL4app_G_391(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%f,align 8
%h=bitcast i8**%f to i8***
br label%i
i:
%j=phi i8*[%bO,%bE],[%b,%k]
store i8*%j,i8**%c,align 8
%l=load atomic i32,i32*@sml_check_flag unordered,align 4
%m=icmp eq i32%l,0
br i1%m,label%p,label%n
n:
call void@sml_check(i32 inreg%l)
%o=load i8*,i8**%c,align 8
br label%p
p:
%q=phi i8*[%o,%n],[%j,%i]
%r=load i8*,i8**%f,align 8
%s=getelementptr inbounds i8,i8*%r,i64 12
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=add i32%u,3
%w=sub i32 0,%u
%x=and i32%v,%w
%y=add i32%u,7
%z=add i32%y,%x
%A=and i32%z,-8
%B=add i32%A,15
%C=and i32%B,-8
%D=getelementptr inbounds i8,i8*%r,i64 20
%E=bitcast i8*%D to i32*
%F=load i32,i32*%E,align 4
%G=add i32%F,7
%H=add i32%G,%C
%I=sub i32 0,%F
%J=and i32%H,%I
%K=add i32%u,-1
%L=and i32%K,%w
%M=add i32%K,%F
%N=add i32%M,%L
%O=and i32%N,%I
%P=add i32%G,%O
%Q=and i32%P,-8
%R=lshr i32%O,3
%S=lshr i32%L,3
%T=sub nsw i32%R,%S
%U=getelementptr inbounds i8,i8*%r,i64 16
%V=bitcast i8*%U to i32*
%W=load i32,i32*%V,align 4
%X=shl i32%W,%T
%Y=getelementptr inbounds i8,i8*%r,i64 8
%Z=bitcast i8*%Y to i32*
%aa=load i32,i32*%Z,align 4
%ab=or i32%X,%aa
%ac=or i32%Q,4
%ad=icmp eq i8*%q,null
br i1%ad,label%ae,label%af
ae:
ret void
af:
%ag=icmp eq i32%aa,0
br i1%ag,label%am,label%ah
ah:
%ai=sext i32%x to i64
%aj=getelementptr inbounds i8,i8*%q,i64%ai
%ak=bitcast i8*%aj to i8**
%al=load i8*,i8**%ak,align 8
br label%ax
am:
%an=call i8*@sml_alloc(i32 inreg%u)#0
%ao=getelementptr inbounds i8,i8*%an,i64 -4
%ap=bitcast i8*%ao to i32*
store i32%u,i32*%ap,align 4
%aq=load i8*,i8**%c,align 8
%ar=sext i32%x to i64
%as=getelementptr inbounds i8,i8*%aq,i64%ar
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%an,i8*%as,i32%u,i1 false)
%at=load i8*,i8**%f,align 8
%au=getelementptr inbounds i8,i8*%at,i64 16
%av=bitcast i8*%au to i32*
%aw=load i32,i32*%av,align 4
br label%ax
ax:
%ay=phi i8*[%aq,%am],[%q,%ah]
%az=phi i32[%aw,%am],[%W,%ah]
%aA=phi i8*[%at,%am],[%r,%ah]
%aB=phi i8*[%an,%am],[%al,%ah]
store i8*%aB,i8**%d,align 8
%aC=icmp eq i32%az,0
br i1%aC,label%aI,label%aD
aD:
%aE=sext i32%J to i64
%aF=getelementptr inbounds i8,i8*%ay,i64%aE
%aG=bitcast i8*%aF to i8**
%aH=load i8*,i8**%aG,align 8
br label%aT
aI:
%aJ=getelementptr inbounds i8,i8*%aA,i64 20
%aK=bitcast i8*%aJ to i32*
%aL=load i32,i32*%aK,align 4
%aM=call i8*@sml_alloc(i32 inreg%aL)#0
%aN=getelementptr inbounds i8,i8*%aM,i64 -4
%aO=bitcast i8*%aN to i32*
store i32%aL,i32*%aO,align 4
%aP=load i8*,i8**%c,align 8
%aQ=sext i32%J to i64
%aR=getelementptr inbounds i8,i8*%aP,i64%aQ
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aM,i8*%aR,i32%aL,i1 false)
%aS=load i8*,i8**%f,align 8
br label%aT
aT:
%aU=phi i8*[%aS,%aI],[%aA,%aD]
%aV=phi i8*[%aP,%aI],[%ay,%aD]
%aW=phi i8*[%aM,%aI],[%aH,%aD]
store i8*%aW,i8**%e,align 8
%aX=sext i32%A to i64
%aY=getelementptr inbounds i8,i8*%aV,i64%aX
%aZ=bitcast i8*%aY to i8**
%a0=load i8*,i8**%aZ,align 8
call fastcc void@_SMLL4app_G_391(i8*inreg%aU,i8*inreg%a0)
%a1=load i8**,i8***%h,align 8
%a2=load i8*,i8**%a1,align 8
%a3=getelementptr inbounds i8,i8*%a2,i64 16
%a4=bitcast i8*%a3 to i8*(i8*,i8*)**
%a5=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a4,align 8
%a6=bitcast i8*%a2 to i8**
%a7=load i8*,i8**%a6,align 8
store i8*%a7,i8**%g,align 8
%a8=bitcast i8**%a1 to i8*
%a9=getelementptr inbounds i8,i8*%a8,i64 12
%ba=bitcast i8*%a9 to i32*
%bb=load i32,i32*%ba,align 4
%bc=getelementptr inbounds i8*,i8**%a1,i64 1
%bd=bitcast i8**%bc to i32*
%be=load i32,i32*%bd,align 4
%bf=getelementptr inbounds i8,i8*%a8,i64 20
%bg=bitcast i8*%bf to i32*
%bh=load i32,i32*%bg,align 4
%bi=getelementptr inbounds i8*,i8**%a1,i64 2
%bj=bitcast i8**%bi to i32*
%bk=load i32,i32*%bj,align 4
%bl=call i8*@sml_alloc(i32 inreg%ac)#0
%bm=or i32%Q,1342177280
%bn=getelementptr inbounds i8,i8*%bl,i64 -4
%bo=bitcast i8*%bn to i32*
store i32%bm,i32*%bo,align 4
call void@llvm.memset.p0i8.i32(i8*%bl,i8 0,i32%ac,i1 false)
%bp=icmp eq i32%be,0
%bq=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%br=sext i32%L to i64
%bs=getelementptr inbounds i8,i8*%bl,i64%br
br i1%bp,label%bv,label%bt
bt:
%bu=bitcast i8*%bs to i8**
store i8*%bq,i8**%bu,align 8
br label%bw
bv:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bs,i8*%bq,i32%bb,i1 false)
br label%bw
bw:
%bx=icmp eq i32%bk,0
%by=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bz=sext i32%O to i64
%bA=getelementptr inbounds i8,i8*%bl,i64%bz
br i1%bx,label%bD,label%bB
bB:
%bC=bitcast i8*%bA to i8**
store i8*%by,i8**%bC,align 8
br label%bE
bD:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bA,i8*%by,i32%bh,i1 false)
br label%bE
bE:
%bF=sext i32%Q to i64
%bG=getelementptr inbounds i8,i8*%bl,i64%bF
%bH=bitcast i8*%bG to i32*
store i32%ab,i32*%bH,align 4
%bI=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%bJ=call fastcc i8*%a5(i8*inreg%bI,i8*inreg%bl)
%bK=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bL=sext i32%C to i64
%bM=getelementptr inbounds i8,i8*%bK,i64%bL
%bN=bitcast i8*%bM to i8**
%bO=load i8*,i8**%bN,align 8
br label%i
}
define internal fastcc void@_SMLL4appi_392(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%h,label%j
h:
%i=bitcast i8*%a to i8**
br label%n
j:
call void@sml_check(i32 inreg%f)
%k=bitcast i8**%d to i8***
%l=load i8**,i8***%k,align 8
%m=bitcast i8**%l to i8*
br label%n
n:
%o=phi i8*[%m,%j],[%a,%h]
%p=phi i8**[%l,%j],[%i,%h]
%q=load i8*,i8**%p,align 8
store i8*%q,i8**%e,align 8
%r=getelementptr inbounds i8*,i8**%p,i64 1
%s=bitcast i8**%r to i32*
%t=load i32,i32*%s,align 4
%u=getelementptr inbounds i8,i8*%o,i64 12
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=getelementptr inbounds i8*,i8**%p,i64 2
%y=bitcast i8**%x to i32*
%z=load i32,i32*%y,align 4
store i8*null,i8**%d,align 8
%A=getelementptr inbounds i8,i8*%o,i64 20
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=call i8*@sml_alloc(i32 inreg 28)#0
%E=getelementptr inbounds i8,i8*%D,i64 -4
%F=bitcast i8*%E to i32*
store i32 1342177304,i32*%F,align 4
store i8*%D,i8**%d,align 8
%G=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%H=bitcast i8*%D to i8**
store i8*%G,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%D,i64 8
%J=bitcast i8*%I to i32*
store i32%t,i32*%J,align 4
%K=getelementptr inbounds i8,i8*%D,i64 12
%L=bitcast i8*%K to i32*
store i32%w,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%D,i64 16
%N=bitcast i8*%M to i32*
store i32%z,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%D,i64 20
%P=bitcast i8*%O to i32*
store i32%C,i32*%P,align 4
%Q=getelementptr inbounds i8,i8*%D,i64 24
%R=bitcast i8*%Q to i32*
store i32 1,i32*%R,align 4
%S=call i8*@sml_alloc(i32 inreg 28)#0
%T=getelementptr inbounds i8,i8*%S,i64 -4
%U=bitcast i8*%T to i32*
store i32 1342177304,i32*%U,align 4
%V=load i8*,i8**%d,align 8
%W=bitcast i8*%S to i8**
store i8*%V,i8**%W,align 8
%X=getelementptr inbounds i8,i8*%S,i64 8
%Y=bitcast i8*%X to void(...)**
store void(...)*bitcast(void(i8*,i8*)*@_SMLL4app_G_391 to void(...)*),void(...)**%Y,align 8
%Z=getelementptr inbounds i8,i8*%S,i64 16
%aa=bitcast i8*%Z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL4app_G_680 to void(...)*),void(...)**%aa,align 8
%ab=getelementptr inbounds i8,i8*%S,i64 24
%ac=bitcast i8*%ab to i32*
store i32 -2147483647,i32*%ac,align 4
%ad=load i8*,i8**%c,align 8
tail call fastcc void@_SMLL4app_G_391(i8*inreg%V,i8*inreg%ad)
ret void
}
define internal fastcc i8*@_SMLL4appi_393(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i32*
%l=load i32,i32*%k,align 4
%m=getelementptr inbounds i8,i8*%a,i64 12
%n=bitcast i8*%m to i32*
%o=load i32,i32*%n,align 4
%p=call i8*@sml_alloc(i32 inreg 28)#0
%q=getelementptr inbounds i8,i8*%p,i64 -4
%r=bitcast i8*%q to i32*
store i32 1342177304,i32*%r,align 4
store i8*%p,i8**%d,align 8
%s=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8*%p to i8**
store i8*%s,i8**%t,align 8
%u=getelementptr inbounds i8,i8*%p,i64 8
%v=bitcast i8*%u to i32*
store i32%f,i32*%v,align 4
%w=getelementptr inbounds i8,i8*%p,i64 12
%x=bitcast i8*%w to i32*
store i32%i,i32*%x,align 4
%y=getelementptr inbounds i8,i8*%p,i64 16
%z=bitcast i8*%y to i32*
store i32%l,i32*%z,align 4
%A=getelementptr inbounds i8,i8*%p,i64 20
%B=bitcast i8*%A to i32*
store i32%o,i32*%B,align 4
%C=getelementptr inbounds i8,i8*%p,i64 24
%D=bitcast i8*%C to i32*
store i32 1,i32*%D,align 4
%E=call i8*@sml_alloc(i32 inreg 28)#0
%F=getelementptr inbounds i8,i8*%E,i64 -4
%G=bitcast i8*%F to i32*
store i32 1342177304,i32*%G,align 4
%H=load i8*,i8**%d,align 8
%I=bitcast i8*%E to i8**
store i8*%H,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%E,i64 8
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(void(i8*,i8*)*@_SMLL4appi_392 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%E,i64 16
%M=bitcast i8*%L to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL4appi_681 to void(...)*),void(...)**%M,align 8
%N=getelementptr inbounds i8,i8*%E,i64 24
%O=bitcast i8*%N to i32*
store i32 -2147483647,i32*%O,align 4
ret i8*%E
}
define internal fastcc i8*@_SMLL4appi_394(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=bitcast i8*%j to i32*
%l=getelementptr inbounds i8,i8*%j,i64 -4
%m=bitcast i8*%l to i32*
store i32 1342177296,i32*%m,align 4
store i8*%j,i8**%d,align 8
store i32%f,i32*%k,align 4
%n=getelementptr inbounds i8,i8*%j,i64 4
%o=bitcast i8*%n to i32*
store i32%i,i32*%o,align 4
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i32*
store i32%b,i32*%q,align 4
%r=getelementptr inbounds i8,i8*%j,i64 12
%s=bitcast i8*%r to i32*
store i32%c,i32*%s,align 4
%t=getelementptr inbounds i8,i8*%j,i64 16
%u=bitcast i8*%t to i32*
store i32 0,i32*%u,align 4
%v=call i8*@sml_alloc(i32 inreg 28)#0
%w=getelementptr inbounds i8,i8*%v,i64 -4
%x=bitcast i8*%w to i32*
store i32 1342177304,i32*%x,align 4
%y=load i8*,i8**%d,align 8
%z=bitcast i8*%v to i8**
store i8*%y,i8**%z,align 8
%A=getelementptr inbounds i8,i8*%v,i64 8
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL4appi_393 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%v,i64 16
%D=bitcast i8*%C to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL4appi_393 to void(...)*),void(...)**%D,align 8
%E=getelementptr inbounds i8,i8*%v,i64 24
%F=bitcast i8*%E to i32*
store i32 -2147483647,i32*%F,align 4
ret i8*%v
}
define internal fastcc void@_SMLL4app_G_395(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
i:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%d,align 8
%f=bitcast i8**%d to i8***
br label%g
g:
%h=phi i8*[%aA,%as],[%b,%i]
store i8*%h,i8**%c,align 8
%j=load atomic i32,i32*@sml_check_flag unordered,align 4
%k=icmp eq i32%j,0
br i1%k,label%n,label%l
l:
call void@sml_check(i32 inreg%j)
%m=load i8*,i8**%c,align 8
br label%n
n:
%o=phi i8*[%m,%l],[%h,%g]
%p=load i8*,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%p,i64 8
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=add i32%s,3
%u=sub i32 0,%s
%v=and i32%t,%u
%w=add i32%s,7
%x=add i32%w,%v
%y=and i32%x,-8
%z=add i32%y,15
%A=and i32%z,-8
%B=getelementptr inbounds i8,i8*%p,i64 16
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=add i32%D,7
%F=add i32%E,%A
%G=sub i32 0,%D
%H=and i32%F,%G
%I=icmp eq i8*%o,null
br i1%I,label%J,label%K
J:
ret void
K:
%L=sext i32%y to i64
%M=getelementptr inbounds i8,i8*%o,i64%L
%N=bitcast i8*%M to i8**
%O=load i8*,i8**%N,align 8
call fastcc void@_SMLL4app_G_395(i8*inreg%p,i8*inreg%O)
%P=load i8**,i8***%f,align 8
%Q=load i8*,i8**%P,align 8
%R=getelementptr inbounds i8,i8*%Q,i64 16
%S=bitcast i8*%R to i8*(i8*,i8*)**
%T=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%S,align 8
%U=bitcast i8*%Q to i8**
%V=load i8*,i8**%U,align 8
store i8*%V,i8**%e,align 8
%W=bitcast i8**%P to i8*
%X=getelementptr inbounds i8,i8*%W,i64 12
%Y=bitcast i8*%X to i32*
%Z=load i32,i32*%Y,align 4
%aa=icmp eq i32%Z,0
br i1%aa,label%ah,label%ab
ab:
%ac=load i8*,i8**%c,align 8
%ad=sext i32%H to i64
%ae=getelementptr inbounds i8,i8*%ac,i64%ad
%af=bitcast i8*%ae to i8**
%ag=load i8*,i8**%af,align 8
br label%as
ah:
%ai=getelementptr inbounds i8*,i8**%P,i64 2
%aj=bitcast i8**%ai to i32*
%ak=load i32,i32*%aj,align 4
%al=call i8*@sml_alloc(i32 inreg%ak)#0
%am=getelementptr inbounds i8,i8*%al,i64 -4
%an=bitcast i8*%am to i32*
store i32%ak,i32*%an,align 4
%ao=load i8*,i8**%c,align 8
%ap=sext i32%H to i64
%aq=getelementptr inbounds i8,i8*%ao,i64%ap
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%al,i8*%aq,i32%ak,i1 false)
%ar=load i8*,i8**%e,align 8
br label%as
as:
%at=phi i8*[%V,%ab],[%ar,%ah]
%au=phi i8*[%ag,%ab],[%al,%ah]
store i8*null,i8**%e,align 8
%av=call fastcc i8*%T(i8*inreg%at,i8*inreg%au)
%aw=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ax=sext i32%A to i64
%ay=getelementptr inbounds i8,i8*%aw,i64%ax
%az=bitcast i8*%ay to i8**
%aA=load i8*,i8**%az,align 8
br label%g
}
define internal fastcc void@_SMLL3app_396(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%h,label%j
h:
%i=bitcast i8*%a to i8**
br label%n
j:
call void@sml_check(i32 inreg%f)
%k=bitcast i8**%d to i8***
%l=load i8**,i8***%k,align 8
%m=bitcast i8**%l to i8*
br label%n
n:
%o=phi i8*[%m,%j],[%a,%h]
%p=phi i8**[%l,%j],[%i,%h]
%q=load i8*,i8**%p,align 8
store i8*%q,i8**%e,align 8
%r=getelementptr inbounds i8*,i8**%p,i64 1
%s=bitcast i8**%r to i32*
%t=load i32,i32*%s,align 4
%u=getelementptr inbounds i8,i8*%o,i64 12
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
store i8*null,i8**%d,align 8
%x=getelementptr inbounds i8*,i8**%p,i64 2
%y=bitcast i8**%x to i32*
%z=load i32,i32*%y,align 4
%A=call i8*@sml_alloc(i32 inreg 28)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177304,i32*%C,align 4
store i8*%A,i8**%d,align 8
%D=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%E=bitcast i8*%A to i8**
store i8*%D,i8**%E,align 8
%F=getelementptr inbounds i8,i8*%A,i64 8
%G=bitcast i8*%F to i32*
store i32%t,i32*%G,align 4
%H=getelementptr inbounds i8,i8*%A,i64 12
%I=bitcast i8*%H to i32*
store i32%w,i32*%I,align 4
%J=getelementptr inbounds i8,i8*%A,i64 16
%K=bitcast i8*%J to i32*
store i32%z,i32*%K,align 4
%L=getelementptr inbounds i8,i8*%A,i64 24
%M=bitcast i8*%L to i32*
store i32 1,i32*%M,align 4
%N=call i8*@sml_alloc(i32 inreg 28)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32 1342177304,i32*%P,align 4
%Q=load i8*,i8**%d,align 8
%R=bitcast i8*%N to i8**
store i8*%Q,i8**%R,align 8
%S=getelementptr inbounds i8,i8*%N,i64 8
%T=bitcast i8*%S to void(...)**
store void(...)*bitcast(void(i8*,i8*)*@_SMLL4app_G_395 to void(...)*),void(...)**%T,align 8
%U=getelementptr inbounds i8,i8*%N,i64 16
%V=bitcast i8*%U to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL4app_G_683 to void(...)*),void(...)**%V,align 8
%W=getelementptr inbounds i8,i8*%N,i64 24
%X=bitcast i8*%W to i32*
store i32 -2147483647,i32*%X,align 4
%Y=load i8*,i8**%c,align 8
tail call fastcc void@_SMLL4app_G_395(i8*inreg%Q,i8*inreg%Y)
ret void
}
define internal fastcc i8*@_SMLL3app_397(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i32*
%l=load i32,i32*%k,align 4
%m=call i8*@sml_alloc(i32 inreg 28)#0
%n=getelementptr inbounds i8,i8*%m,i64 -4
%o=bitcast i8*%n to i32*
store i32 1342177304,i32*%o,align 4
store i8*%m,i8**%d,align 8
%p=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%q=bitcast i8*%m to i8**
store i8*%p,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%m,i64 8
%s=bitcast i8*%r to i32*
store i32%f,i32*%s,align 4
%t=getelementptr inbounds i8,i8*%m,i64 12
%u=bitcast i8*%t to i32*
store i32%i,i32*%u,align 4
%v=getelementptr inbounds i8,i8*%m,i64 16
%w=bitcast i8*%v to i32*
store i32%l,i32*%w,align 4
%x=getelementptr inbounds i8,i8*%m,i64 24
%y=bitcast i8*%x to i32*
store i32 1,i32*%y,align 4
%z=call i8*@sml_alloc(i32 inreg 28)#0
%A=getelementptr inbounds i8,i8*%z,i64 -4
%B=bitcast i8*%A to i32*
store i32 1342177304,i32*%B,align 4
%C=load i8*,i8**%d,align 8
%D=bitcast i8*%z to i8**
store i8*%C,i8**%D,align 8
%E=getelementptr inbounds i8,i8*%z,i64 8
%F=bitcast i8*%E to void(...)**
store void(...)*bitcast(void(i8*,i8*)*@_SMLL3app_396 to void(...)*),void(...)**%F,align 8
%G=getelementptr inbounds i8,i8*%z,i64 16
%H=bitcast i8*%G to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3app_684 to void(...)*),void(...)**%H,align 8
%I=getelementptr inbounds i8,i8*%z,i64 24
%J=bitcast i8*%I to i32*
store i32 -2147483647,i32*%J,align 4
ret i8*%z
}
define internal fastcc i8*@_SMLL3app_398(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=call i8*@sml_alloc(i32 inreg 20)#0
%h=bitcast i8*%g to i32*
%i=getelementptr inbounds i8,i8*%g,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%g,i8**%d,align 8
store i32%f,i32*%h,align 4
%k=getelementptr inbounds i8,i8*%g,i64 4
%l=bitcast i8*%k to i32*
store i32%b,i32*%l,align 4
%m=getelementptr inbounds i8,i8*%g,i64 8
%n=bitcast i8*%m to i32*
store i32%c,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%g,i64 16
%p=bitcast i8*%o to i32*
store i32 0,i32*%p,align 4
%q=call i8*@sml_alloc(i32 inreg 28)#0
%r=getelementptr inbounds i8,i8*%q,i64 -4
%s=bitcast i8*%r to i32*
store i32 1342177304,i32*%s,align 4
%t=load i8*,i8**%d,align 8
%u=bitcast i8*%q to i8**
store i8*%t,i8**%u,align 8
%v=getelementptr inbounds i8,i8*%q,i64 8
%w=bitcast i8*%v to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3app_397 to void(...)*),void(...)**%w,align 8
%x=getelementptr inbounds i8,i8*%q,i64 16
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3app_397 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%q,i64 24
%A=bitcast i8*%z to i32*
store i32 -2147483647,i32*%A,align 4
ret i8*%q
}
define internal fastcc i8*@_SMLL4map_G_399(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
p:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%g,align 8
store i8*%b,i8**%c,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%n,label%k
k:
call void@sml_check(i32 inreg%i)
%l=load i8*,i8**%c,align 8
%m=load i8*,i8**%g,align 8
br label%n
n:
%o=phi i8*[%m,%k],[%a,%p]
%q=phi i8*[%l,%k],[%b,%p]
store i8*null,i8**%c,align 8
store i8*%q,i8**%e,align 8
%r=getelementptr inbounds i8,i8*%o,i64 12
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=add i32%t,3
%v=sub i32 0,%t
%w=and i32%u,%v
%x=add i32%t,7
%y=add i32%x,%w
%z=and i32%y,-8
%A=add i32%z,15
%B=and i32%A,-8
%C=getelementptr inbounds i8,i8*%o,i64 20
%D=bitcast i8*%C to i32*
%E=load i32,i32*%D,align 4
%F=add i32%E,%B
%G=add i32%F,7
%H=sub i32 0,%E
%I=and i32%G,%H
%J=add i32%t,-1
%K=and i32%J,%v
%L=add i32%J,%E
%M=add i32%L,%K
%N=and i32%M,%H
%O=add i32%E,7
%P=add i32%O,%N
%Q=and i32%P,-8
%R=lshr i32%N,3
%S=lshr i32%K,3
%T=sub nsw i32%R,%S
%U=getelementptr inbounds i8,i8*%o,i64 16
%V=bitcast i8*%U to i32*
%W=load i32,i32*%V,align 4
%X=shl i32%W,%T
%Y=getelementptr inbounds i8,i8*%o,i64 8
%Z=bitcast i8*%Y to i32*
%aa=load i32,i32*%Z,align 4
%ab=or i32%X,%aa
%ac=or i32%Q,4
%ad=getelementptr inbounds i8,i8*%o,i64 28
%ae=bitcast i8*%ad to i32*
%af=load i32,i32*%ae,align 4
%ag=add i32%A,%af
%ah=sub i32 0,%af
%ai=and i32%ag,%ah
%aj=add i32%af,7
%ak=add i32%aj,%ai
%al=and i32%ak,-8
%am=lshr i32%ai,3
%an=lshr i32%A,3
%ao=sub nsw i32%am,%an
%ap=lshr i32%y,3
%aq=sub nsw i32%an,%ap
%ar=lshr i32%w,3
%as=sub nsw i32%ap,%ar
%at=getelementptr inbounds i8,i8*%o,i64 24
%au=bitcast i8*%at to i32*
%av=load i32,i32*%au,align 4
%aw=shl i32%av,%ao
%ax=or i32%aw,1
%ay=shl i32%ax,%aq
%az=or i32%ay,1
%aA=shl i32%az,%as
%aB=or i32%aA,%aa
%aC=shl i32%aB,%ar
%aD=or i32%al,4
%aE=icmp eq i8*%q,null
br i1%aE,label%aF,label%aG
aF:
ret i8*null
aG:
%aH=bitcast i8*%q to i32*
%aI=load i32,i32*%aH,align 4
%aJ=icmp eq i32%aa,0
br i1%aJ,label%aP,label%aK
aK:
%aL=sext i32%w to i64
%aM=getelementptr inbounds i8,i8*%q,i64%aL
%aN=bitcast i8*%aM to i8**
%aO=load i8*,i8**%aN,align 8
br label%a0
aP:
%aQ=call i8*@sml_alloc(i32 inreg%t)#0
%aR=getelementptr inbounds i8,i8*%aQ,i64 -4
%aS=bitcast i8*%aR to i32*
store i32%t,i32*%aS,align 4
%aT=load i8*,i8**%e,align 8
%aU=sext i32%w to i64
%aV=getelementptr inbounds i8,i8*%aT,i64%aU
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aQ,i8*%aV,i32%t,i1 false)
%aW=load i8*,i8**%g,align 8
%aX=getelementptr inbounds i8,i8*%aW,i64 16
%aY=bitcast i8*%aX to i32*
%aZ=load i32,i32*%aY,align 4
br label%a0
a0:
%a1=phi i8*[%aT,%aP],[%q,%aK]
%a2=phi i32[%aZ,%aP],[%W,%aK]
%a3=phi i8*[%aW,%aP],[%o,%aK]
%a4=phi i8*[%aQ,%aP],[%aO,%aK]
store i8*%a4,i8**%f,align 8
%a5=icmp eq i32%a2,0
br i1%a5,label%bb,label%a6
a6:
%a7=sext i32%I to i64
%a8=getelementptr inbounds i8,i8*%a1,i64%a7
%a9=bitcast i8*%a8 to i8**
%ba=load i8*,i8**%a9,align 8
br label%bm
bb:
%bc=getelementptr inbounds i8,i8*%a3,i64 20
%bd=bitcast i8*%bc to i32*
%be=load i32,i32*%bd,align 4
%bf=call i8*@sml_alloc(i32 inreg%be)#0
%bg=getelementptr inbounds i8,i8*%bf,i64 -4
%bh=bitcast i8*%bg to i32*
store i32%be,i32*%bh,align 4
%bi=load i8*,i8**%e,align 8
%bj=sext i32%I to i64
%bk=getelementptr inbounds i8,i8*%bi,i64%bj
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bf,i8*%bk,i32%be,i1 false)
%bl=load i8*,i8**%g,align 8
br label%bm
bm:
%bn=phi i8*[%bl,%bb],[%a3,%a6]
%bo=phi i8*[%bi,%bb],[%a1,%a6]
%bp=phi i8*[%bf,%bb],[%ba,%a6]
store i8*%bp,i8**%d,align 8
%bq=sext i32%z to i64
%br=getelementptr inbounds i8,i8*%bo,i64%bq
%bs=bitcast i8*%br to i8**
%bt=load i8*,i8**%bs,align 8
%bu=call fastcc i8*@_SMLL4map_G_399(i8*inreg%bn,i8*inreg%bt)
store i8*%bu,i8**%c,align 8
%bv=bitcast i8**%g to i8***
%bw=load i8**,i8***%bv,align 8
%bx=load i8*,i8**%bw,align 8
%by=getelementptr inbounds i8,i8*%bx,i64 16
%bz=bitcast i8*%by to i8*(i8*,i8*)**
%bA=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bz,align 8
%bB=bitcast i8*%bx to i8**
%bC=load i8*,i8**%bB,align 8
store i8*%bC,i8**%h,align 8
%bD=bitcast i8**%bw to i8*
%bE=getelementptr inbounds i8,i8*%bD,i64 12
%bF=bitcast i8*%bE to i32*
%bG=load i32,i32*%bF,align 4
%bH=getelementptr inbounds i8*,i8**%bw,i64 1
%bI=bitcast i8**%bH to i32*
%bJ=load i32,i32*%bI,align 4
%bK=getelementptr inbounds i8,i8*%bD,i64 20
%bL=bitcast i8*%bK to i32*
%bM=load i32,i32*%bL,align 4
%bN=getelementptr inbounds i8*,i8**%bw,i64 2
%bO=bitcast i8**%bN to i32*
%bP=load i32,i32*%bO,align 4
%bQ=call i8*@sml_alloc(i32 inreg%ac)#0
%bR=or i32%Q,1342177280
%bS=getelementptr inbounds i8,i8*%bQ,i64 -4
%bT=bitcast i8*%bS to i32*
store i32%bR,i32*%bT,align 4
call void@llvm.memset.p0i8.i32(i8*%bQ,i8 0,i32%ac,i1 false)
%bU=icmp eq i32%bJ,0
%bV=load i8*,i8**%f,align 8
%bW=sext i32%K to i64
%bX=getelementptr inbounds i8,i8*%bQ,i64%bW
br i1%bU,label%b0,label%bY
bY:
%bZ=bitcast i8*%bX to i8**
store i8*%bV,i8**%bZ,align 8
br label%b1
b0:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bX,i8*%bV,i32%bG,i1 false)
br label%b1
b1:
%b2=icmp eq i32%bP,0
%b3=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%b4=sext i32%N to i64
%b5=getelementptr inbounds i8,i8*%bQ,i64%b4
br i1%b2,label%b8,label%b6
b6:
%b7=bitcast i8*%b5 to i8**
store i8*%b3,i8**%b7,align 8
br label%b9
b8:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%b5,i8*%b3,i32%bM,i1 false)
br label%b9
b9:
%ca=sext i32%Q to i64
%cb=getelementptr inbounds i8,i8*%bQ,i64%ca
%cc=bitcast i8*%cb to i32*
store i32%ab,i32*%cc,align 4
%cd=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%ce=call fastcc i8*%bA(i8*inreg%cd,i8*inreg%bQ)
store i8*%ce,i8**%d,align 8
%cf=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%cg=sext i32%B to i64
%ch=getelementptr inbounds i8,i8*%cf,i64%cg
%ci=bitcast i8*%ch to i8**
%cj=load i8*,i8**%ci,align 8
%ck=load i8*,i8**%g,align 8
%cl=call fastcc i8*@_SMLL4map_G_399(i8*inreg%ck,i8*inreg%cj)
store i8*%cl,i8**%e,align 8
%cm=load i8*,i8**%g,align 8
%cn=getelementptr inbounds i8,i8*%cm,i64 12
%co=bitcast i8*%cn to i32*
%cp=load i32,i32*%co,align 4
%cq=getelementptr inbounds i8,i8*%cm,i64 8
%cr=bitcast i8*%cq to i32*
%cs=load i32,i32*%cr,align 4
%ct=getelementptr inbounds i8,i8*%cm,i64 28
%cu=bitcast i8*%ct to i32*
%cv=load i32,i32*%cu,align 4
store i8*null,i8**%g,align 8
%cw=getelementptr inbounds i8,i8*%cm,i64 24
%cx=bitcast i8*%cw to i32*
%cy=load i32,i32*%cx,align 4
%cz=call i8*@sml_alloc(i32 inreg%aD)#0
%cA=or i32%al,1342177280
%cB=bitcast i8*%cz to i32*
%cC=getelementptr inbounds i8,i8*%cz,i64 -4
%cD=bitcast i8*%cC to i32*
store i32%cA,i32*%cD,align 4
call void@llvm.memset.p0i8.i32(i8*%cz,i8 0,i32%aD,i1 false)
store i32%aI,i32*%cB,align 4
%cE=icmp eq i32%cs,0
%cF=load i8*,i8**%f,align 8
%cG=sext i32%w to i64
%cH=getelementptr inbounds i8,i8*%cz,i64%cG
br i1%cE,label%cK,label%cI
cI:
%cJ=bitcast i8*%cH to i8**
store i8*%cF,i8**%cJ,align 8
br label%cL
cK:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cH,i8*%cF,i32%cp,i1 false)
br label%cL
cL:
%cM=load i8*,i8**%c,align 8
%cN=getelementptr inbounds i8,i8*%cz,i64%bq
%cO=bitcast i8*%cN to i8**
store i8*%cM,i8**%cO,align 8
%cP=load i8*,i8**%e,align 8
%cQ=getelementptr inbounds i8,i8*%cz,i64%cg
%cR=bitcast i8*%cQ to i8**
store i8*%cP,i8**%cR,align 8
%cS=icmp eq i32%cy,0
%cT=load i8*,i8**%d,align 8
%cU=sext i32%ai to i64
%cV=getelementptr inbounds i8,i8*%cz,i64%cU
br i1%cS,label%cY,label%cW
cW:
%cX=bitcast i8*%cV to i8**
store i8*%cT,i8**%cX,align 8
br label%cZ
cY:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cV,i8*%cT,i32%cv,i1 false)
br label%cZ
cZ:
%c0=sext i32%al to i64
%c1=getelementptr inbounds i8,i8*%cz,i64%c0
%c2=bitcast i8*%c1 to i32*
store i32%aC,i32*%c2,align 4
ret i8*%cz
}
define internal fastcc i8*@_SMLL4mapi_400(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%h,label%j
h:
%i=bitcast i8*%a to i8**
br label%n
j:
call void@sml_check(i32 inreg%f)
%k=bitcast i8**%d to i8***
%l=load i8**,i8***%k,align 8
%m=bitcast i8**%l to i8*
br label%n
n:
%o=phi i8*[%m,%j],[%a,%h]
%p=phi i8**[%l,%j],[%i,%h]
%q=load i8*,i8**%p,align 8
store i8*%q,i8**%e,align 8
%r=getelementptr inbounds i8*,i8**%p,i64 1
%s=bitcast i8**%r to i32*
%t=load i32,i32*%s,align 4
%u=getelementptr inbounds i8,i8*%o,i64 12
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=getelementptr inbounds i8*,i8**%p,i64 2
%y=bitcast i8**%x to i32*
%z=load i32,i32*%y,align 4
%A=getelementptr inbounds i8,i8*%o,i64 20
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=getelementptr inbounds i8*,i8**%p,i64 3
%E=bitcast i8**%D to i32*
%F=load i32,i32*%E,align 4
store i8*null,i8**%d,align 8
%G=getelementptr inbounds i8,i8*%o,i64 28
%H=bitcast i8*%G to i32*
%I=load i32,i32*%H,align 4
%J=call i8*@sml_alloc(i32 inreg 36)#0
%K=getelementptr inbounds i8,i8*%J,i64 -4
%L=bitcast i8*%K to i32*
store i32 1342177312,i32*%L,align 4
store i8*%J,i8**%d,align 8
%M=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%N=bitcast i8*%J to i8**
store i8*%M,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%J,i64 8
%P=bitcast i8*%O to i32*
store i32%t,i32*%P,align 4
%Q=getelementptr inbounds i8,i8*%J,i64 12
%R=bitcast i8*%Q to i32*
store i32%w,i32*%R,align 4
%S=getelementptr inbounds i8,i8*%J,i64 16
%T=bitcast i8*%S to i32*
store i32%z,i32*%T,align 4
%U=getelementptr inbounds i8,i8*%J,i64 20
%V=bitcast i8*%U to i32*
store i32%C,i32*%V,align 4
%W=getelementptr inbounds i8,i8*%J,i64 24
%X=bitcast i8*%W to i32*
store i32%F,i32*%X,align 4
%Y=getelementptr inbounds i8,i8*%J,i64 28
%Z=bitcast i8*%Y to i32*
store i32%I,i32*%Z,align 4
%aa=getelementptr inbounds i8,i8*%J,i64 32
%ab=bitcast i8*%aa to i32*
store i32 1,i32*%ab,align 4
%ac=call i8*@sml_alloc(i32 inreg 28)#0
%ad=getelementptr inbounds i8,i8*%ac,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 1342177304,i32*%ae,align 4
%af=load i8*,i8**%d,align 8
%ag=bitcast i8*%ac to i8**
store i8*%af,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%ac,i64 8
%ai=bitcast i8*%ah to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL4map_G_399 to void(...)*),void(...)**%ai,align 8
%aj=getelementptr inbounds i8,i8*%ac,i64 16
%ak=bitcast i8*%aj to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL4map_G_399 to void(...)*),void(...)**%ak,align 8
%al=getelementptr inbounds i8,i8*%ac,i64 24
%am=bitcast i8*%al to i32*
store i32 -2147483647,i32*%am,align 4
%an=load i8*,i8**%c,align 8
%ao=tail call fastcc i8*@_SMLL4map_G_399(i8*inreg%af,i8*inreg%an)
ret i8*%ao
}
define internal fastcc i8*@_SMLL4mapi_401(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i32*
%l=load i32,i32*%k,align 4
%m=getelementptr inbounds i8,i8*%a,i64 12
%n=bitcast i8*%m to i32*
%o=load i32,i32*%n,align 4
%p=getelementptr inbounds i8,i8*%a,i64 16
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=getelementptr inbounds i8,i8*%a,i64 20
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=call i8*@sml_alloc(i32 inreg 36)#0
%w=getelementptr inbounds i8,i8*%v,i64 -4
%x=bitcast i8*%w to i32*
store i32 1342177312,i32*%x,align 4
store i8*%v,i8**%d,align 8
%y=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%z=bitcast i8*%v to i8**
store i8*%y,i8**%z,align 8
%A=getelementptr inbounds i8,i8*%v,i64 8
%B=bitcast i8*%A to i32*
store i32%f,i32*%B,align 4
%C=getelementptr inbounds i8,i8*%v,i64 12
%D=bitcast i8*%C to i32*
store i32%i,i32*%D,align 4
%E=getelementptr inbounds i8,i8*%v,i64 16
%F=bitcast i8*%E to i32*
store i32%l,i32*%F,align 4
%G=getelementptr inbounds i8,i8*%v,i64 20
%H=bitcast i8*%G to i32*
store i32%o,i32*%H,align 4
%I=getelementptr inbounds i8,i8*%v,i64 24
%J=bitcast i8*%I to i32*
store i32%r,i32*%J,align 4
%K=getelementptr inbounds i8,i8*%v,i64 28
%L=bitcast i8*%K to i32*
store i32%u,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%v,i64 32
%N=bitcast i8*%M to i32*
store i32 1,i32*%N,align 4
%O=call i8*@sml_alloc(i32 inreg 28)#0
%P=getelementptr inbounds i8,i8*%O,i64 -4
%Q=bitcast i8*%P to i32*
store i32 1342177304,i32*%Q,align 4
%R=load i8*,i8**%d,align 8
%S=bitcast i8*%O to i8**
store i8*%R,i8**%S,align 8
%T=getelementptr inbounds i8,i8*%O,i64 8
%U=bitcast i8*%T to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL4mapi_400 to void(...)*),void(...)**%U,align 8
%V=getelementptr inbounds i8,i8*%O,i64 16
%W=bitcast i8*%V to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL4mapi_400 to void(...)*),void(...)**%W,align 8
%X=getelementptr inbounds i8,i8*%O,i64 24
%Y=bitcast i8*%X to i32*
store i32 -2147483647,i32*%Y,align 4
ret i8*%O
}
define internal fastcc i8*@_SMLL4mapi_402(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e)#4 gc"smlsharp"{
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%f,i8*null)#0
%g=bitcast i8*%a to i32*
%h=load i32,i32*%g,align 4
%i=getelementptr inbounds i8,i8*%a,i64 4
%j=bitcast i8*%i to i32*
%k=load i32,i32*%j,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=bitcast i8*%l to i32*
%n=getelementptr inbounds i8,i8*%l,i64 -4
%o=bitcast i8*%n to i32*
store i32 1342177304,i32*%o,align 4
store i8*%l,i8**%f,align 8
store i32%h,i32*%m,align 4
%p=getelementptr inbounds i8,i8*%l,i64 4
%q=bitcast i8*%p to i32*
store i32%k,i32*%q,align 4
%r=getelementptr inbounds i8,i8*%l,i64 8
%s=bitcast i8*%r to i32*
store i32%b,i32*%s,align 4
%t=getelementptr inbounds i8,i8*%l,i64 12
%u=bitcast i8*%t to i32*
store i32%c,i32*%u,align 4
%v=getelementptr inbounds i8,i8*%l,i64 16
%w=bitcast i8*%v to i32*
store i32%d,i32*%w,align 4
%x=getelementptr inbounds i8,i8*%l,i64 20
%y=bitcast i8*%x to i32*
store i32%e,i32*%y,align 4
%z=getelementptr inbounds i8,i8*%l,i64 24
%A=bitcast i8*%z to i32*
store i32 0,i32*%A,align 4
%B=call i8*@sml_alloc(i32 inreg 28)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177304,i32*%D,align 4
%E=load i8*,i8**%f,align 8
%F=bitcast i8*%B to i8**
store i8*%E,i8**%F,align 8
%G=getelementptr inbounds i8,i8*%B,i64 8
%H=bitcast i8*%G to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL4mapi_401 to void(...)*),void(...)**%H,align 8
%I=getelementptr inbounds i8,i8*%B,i64 16
%J=bitcast i8*%I to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL4mapi_401 to void(...)*),void(...)**%J,align 8
%K=getelementptr inbounds i8,i8*%B,i64 24
%L=bitcast i8*%K to i32*
store i32 -2147483647,i32*%L,align 4
ret i8*%B
}
define internal fastcc i8*@_SMLL4map_G_403(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
p:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%g,align 8
store i8*%b,i8**%c,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%n,label%k
k:
call void@sml_check(i32 inreg%i)
%l=load i8*,i8**%c,align 8
%m=load i8*,i8**%g,align 8
br label%n
n:
%o=phi i8*[%m,%k],[%a,%p]
%q=phi i8*[%l,%k],[%b,%p]
store i8*null,i8**%c,align 8
store i8*%q,i8**%f,align 8
%r=getelementptr inbounds i8,i8*%o,i64 12
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=add i32%t,3
%v=sub i32 0,%t
%w=and i32%u,%v
%x=add i32%t,7
%y=add i32%x,%w
%z=and i32%y,-8
%A=add i32%z,15
%B=and i32%A,-8
%C=add i32%B,8
%D=getelementptr inbounds i8,i8*%o,i64 20
%E=bitcast i8*%D to i32*
%F=load i32,i32*%E,align 4
%G=add i32%F,-1
%H=add i32%G,%C
%I=sub i32 0,%F
%J=and i32%H,%I
%K=add i32%t,-1
%L=and i32%K,%v
%M=add i32%L,%t
%N=add i32%G,%M
%O=and i32%N,%I
%P=add i32%F,7
%Q=add i32%P,%O
%R=and i32%Q,-8
%S=lshr i32%O,3
%T=lshr i32%L,3
%U=sub nsw i32%S,%T
%V=getelementptr inbounds i8,i8*%o,i64 16
%W=bitcast i8*%V to i32*
%X=load i32,i32*%W,align 4
%Y=shl i32%X,%U
%Z=getelementptr inbounds i8,i8*%o,i64 8
%aa=bitcast i8*%Z to i32*
%ab=load i32,i32*%aa,align 4
%ac=or i32%Y,%ab
%ad=or i32%R,4
%ae=getelementptr inbounds i8,i8*%o,i64 28
%af=bitcast i8*%ae to i32*
%ag=load i32,i32*%af,align 4
%ah=add i32%M,-1
%ai=add i32%ah,%ag
%aj=sub i32 0,%ag
%ak=and i32%ai,%aj
%al=add i32%ag,-1
%am=add i32%al,%C
%an=and i32%am,%aj
%ao=add i32%ag,7
%ap=add i32%ao,%an
%aq=and i32%ap,-8
%ar=lshr i32%an,3
%as=lshr i32%A,3
%at=sub nsw i32%ar,%as
%au=lshr i32%y,3
%av=sub nsw i32%as,%au
%aw=lshr i32%w,3
%ax=sub nsw i32%au,%aw
%ay=getelementptr inbounds i8,i8*%o,i64 24
%az=bitcast i8*%ay to i32*
%aA=load i32,i32*%az,align 4
%aB=shl i32%aA,%at
%aC=or i32%aB,1
%aD=shl i32%aC,%av
%aE=or i32%aD,1
%aF=shl i32%aE,%ax
%aG=or i32%aF,%ab
%aH=shl i32%aG,%aw
%aI=or i32%aq,4
%aJ=icmp eq i8*%q,null
br i1%aJ,label%aK,label%aL
aK:
ret i8*null
aL:
%aM=bitcast i8*%q to i32*
%aN=load i32,i32*%aM,align 4
%aO=icmp eq i32%ab,0
br i1%aO,label%aU,label%aP
aP:
%aQ=sext i32%w to i64
%aR=getelementptr inbounds i8,i8*%q,i64%aQ
%aS=bitcast i8*%aR to i8**
%aT=load i8*,i8**%aS,align 8
br label%a5
aU:
%aV=call i8*@sml_alloc(i32 inreg%t)#0
%aW=getelementptr inbounds i8,i8*%aV,i64 -4
%aX=bitcast i8*%aW to i32*
store i32%t,i32*%aX,align 4
%aY=load i8*,i8**%f,align 8
%aZ=sext i32%w to i64
%a0=getelementptr inbounds i8,i8*%aY,i64%aZ
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aV,i8*%a0,i32%t,i1 false)
%a1=load i8*,i8**%g,align 8
%a2=getelementptr inbounds i8,i8*%a1,i64 16
%a3=bitcast i8*%a2 to i32*
%a4=load i32,i32*%a3,align 4
br label%a5
a5:
%a6=phi i8*[%aY,%aU],[%q,%aP]
%a7=phi i32[%a4,%aU],[%X,%aP]
%a8=phi i8*[%a1,%aU],[%o,%aP]
%a9=phi i8*[%aV,%aU],[%aT,%aP]
store i8*%a9,i8**%d,align 8
%ba=icmp eq i32%a7,0
br i1%ba,label%bg,label%bb
bb:
%bc=sext i32%J to i64
%bd=getelementptr inbounds i8,i8*%a6,i64%bc
%be=bitcast i8*%bd to i8**
%bf=load i8*,i8**%be,align 8
br label%br
bg:
%bh=getelementptr inbounds i8,i8*%a8,i64 20
%bi=bitcast i8*%bh to i32*
%bj=load i32,i32*%bi,align 4
%bk=call i8*@sml_alloc(i32 inreg%bj)#0
%bl=getelementptr inbounds i8,i8*%bk,i64 -4
%bm=bitcast i8*%bl to i32*
store i32%bj,i32*%bm,align 4
%bn=load i8*,i8**%f,align 8
%bo=sext i32%J to i64
%bp=getelementptr inbounds i8,i8*%bn,i64%bo
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bk,i8*%bp,i32%bj,i1 false)
%bq=load i8*,i8**%g,align 8
br label%br
br:
%bs=phi i8*[%bq,%bg],[%a8,%bb]
%bt=phi i8*[%bn,%bg],[%a6,%bb]
%bu=phi i8*[%bk,%bg],[%bf,%bb]
store i8*%bu,i8**%e,align 8
%bv=sext i32%z to i64
%bw=getelementptr inbounds i8,i8*%bt,i64%bv
%bx=bitcast i8*%bw to i8**
%by=load i8*,i8**%bx,align 8
%bz=call fastcc i8*@_SMLL4map_G_403(i8*inreg%bs,i8*inreg%by)
store i8*%bz,i8**%c,align 8
%bA=bitcast i8**%g to i8***
%bB=load i8**,i8***%bA,align 8
%bC=load i8*,i8**%bB,align 8
%bD=getelementptr inbounds i8,i8*%bC,i64 16
%bE=bitcast i8*%bD to i8*(i8*,i8*)**
%bF=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bE,align 8
%bG=bitcast i8*%bC to i8**
%bH=load i8*,i8**%bG,align 8
store i8*%bH,i8**%h,align 8
%bI=bitcast i8**%bB to i8*
%bJ=getelementptr inbounds i8,i8*%bI,i64 12
%bK=bitcast i8*%bJ to i32*
%bL=load i32,i32*%bK,align 4
%bM=getelementptr inbounds i8*,i8**%bB,i64 1
%bN=bitcast i8**%bM to i32*
%bO=load i32,i32*%bN,align 4
%bP=getelementptr inbounds i8,i8*%bI,i64 20
%bQ=bitcast i8*%bP to i32*
%bR=load i32,i32*%bQ,align 4
%bS=getelementptr inbounds i8*,i8**%bB,i64 2
%bT=bitcast i8**%bS to i32*
%bU=load i32,i32*%bT,align 4
%bV=call i8*@sml_alloc(i32 inreg%ad)#0
%bW=or i32%R,1342177280
%bX=getelementptr inbounds i8,i8*%bV,i64 -4
%bY=bitcast i8*%bX to i32*
store i32%bW,i32*%bY,align 4
call void@llvm.memset.p0i8.i32(i8*%bV,i8 0,i32%ad,i1 false)
%bZ=icmp eq i32%bO,0
%b0=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%b1=sext i32%L to i64
%b2=getelementptr inbounds i8,i8*%bV,i64%b1
br i1%bZ,label%b5,label%b3
b3:
%b4=bitcast i8*%b2 to i8**
store i8*%b0,i8**%b4,align 8
br label%b6
b5:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%b2,i8*%b0,i32%bL,i1 false)
br label%b6
b6:
%b7=icmp eq i32%bU,0
%b8=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%b9=sext i32%O to i64
%ca=getelementptr inbounds i8,i8*%bV,i64%b9
br i1%b7,label%cd,label%cb
cb:
%cc=bitcast i8*%ca to i8**
store i8*%b8,i8**%cc,align 8
br label%ce
cd:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ca,i8*%b8,i32%bR,i1 false)
br label%ce
ce:
%cf=sext i32%R to i64
%cg=getelementptr inbounds i8,i8*%bV,i64%cf
%ch=bitcast i8*%cg to i32*
store i32%ac,i32*%ch,align 4
%ci=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%cj=call fastcc i8*%bF(i8*inreg%ci,i8*inreg%bV)
store i8*%cj,i8**%e,align 8
%ck=load i8*,i8**%g,align 8
%cl=getelementptr inbounds i8,i8*%ck,i64 8
%cm=bitcast i8*%cl to i32*
%cn=load i32,i32*%cm,align 4
%co=icmp eq i32%cn,0
br i1%co,label%ct,label%cp
cp:
%cq=getelementptr inbounds i8,i8*%cj,i64%b1
%cr=bitcast i8*%cq to i8**
%cs=load i8*,i8**%cr,align 8
br label%cD
ct:
%cu=getelementptr inbounds i8,i8*%ck,i64 12
%cv=bitcast i8*%cu to i32*
%cw=load i32,i32*%cv,align 4
%cx=call i8*@sml_alloc(i32 inreg%cw)#0
%cy=getelementptr inbounds i8,i8*%cx,i64 -4
%cz=bitcast i8*%cy to i32*
store i32%cw,i32*%cz,align 4
%cA=load i8*,i8**%e,align 8
%cB=getelementptr inbounds i8,i8*%cA,i64%b1
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cx,i8*%cB,i32%cw,i1 false)
%cC=load i8*,i8**%g,align 8
br label%cD
cD:
%cE=phi i8*[%cA,%ct],[%cj,%cp]
%cF=phi i8*[%cC,%ct],[%ck,%cp]
%cG=phi i8*[%cx,%ct],[%cs,%cp]
store i8*%cG,i8**%d,align 8
%cH=getelementptr inbounds i8,i8*%cF,i64 24
%cI=bitcast i8*%cH to i32*
%cJ=load i32,i32*%cI,align 4
%cK=icmp eq i32%cJ,0
br i1%cK,label%cQ,label%cL
cL:
store i8*null,i8**%e,align 8
%cM=sext i32%ak to i64
%cN=getelementptr inbounds i8,i8*%cE,i64%cM
%cO=bitcast i8*%cN to i8**
%cP=load i8*,i8**%cO,align 8
br label%c1
cQ:
%cR=getelementptr inbounds i8,i8*%cF,i64 28
%cS=bitcast i8*%cR to i32*
%cT=load i32,i32*%cS,align 4
%cU=call i8*@sml_alloc(i32 inreg%cT)#0
%cV=getelementptr inbounds i8,i8*%cU,i64 -4
%cW=bitcast i8*%cV to i32*
store i32%cT,i32*%cW,align 4
%cX=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%cY=sext i32%ak to i64
%cZ=getelementptr inbounds i8,i8*%cX,i64%cY
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cU,i8*%cZ,i32%cT,i1 false)
%c0=load i8*,i8**%g,align 8
br label%c1
c1:
%c2=phi i8*[%c0,%cQ],[%cF,%cL]
%c3=phi i8*[%cU,%cQ],[%cP,%cL]
store i8*%c3,i8**%e,align 8
%c4=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%c5=sext i32%B to i64
%c6=getelementptr inbounds i8,i8*%c4,i64%c5
%c7=bitcast i8*%c6 to i8**
%c8=load i8*,i8**%c7,align 8
%c9=call fastcc i8*@_SMLL4map_G_403(i8*inreg%c2,i8*inreg%c8)
store i8*%c9,i8**%f,align 8
%da=load i8*,i8**%g,align 8
%db=getelementptr inbounds i8,i8*%da,i64 12
%dc=bitcast i8*%db to i32*
%dd=load i32,i32*%dc,align 4
%de=getelementptr inbounds i8,i8*%da,i64 8
%df=bitcast i8*%de to i32*
%dg=load i32,i32*%df,align 4
%dh=getelementptr inbounds i8,i8*%da,i64 28
%di=bitcast i8*%dh to i32*
%dj=load i32,i32*%di,align 4
store i8*null,i8**%g,align 8
%dk=getelementptr inbounds i8,i8*%da,i64 24
%dl=bitcast i8*%dk to i32*
%dm=load i32,i32*%dl,align 4
%dn=call i8*@sml_alloc(i32 inreg%aI)#0
%do=or i32%aq,1342177280
%dp=bitcast i8*%dn to i32*
%dq=getelementptr inbounds i8,i8*%dn,i64 -4
%dr=bitcast i8*%dq to i32*
store i32%do,i32*%dr,align 4
call void@llvm.memset.p0i8.i32(i8*%dn,i8 0,i32%aI,i1 false)
store i32%aN,i32*%dp,align 4
%ds=icmp eq i32%dg,0
%dt=load i8*,i8**%d,align 8
%du=sext i32%w to i64
%dv=getelementptr inbounds i8,i8*%dn,i64%du
br i1%ds,label%dy,label%dw
dw:
%dx=bitcast i8*%dv to i8**
store i8*%dt,i8**%dx,align 8
br label%dz
dy:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dv,i8*%dt,i32%dd,i1 false)
br label%dz
dz:
%dA=load i8*,i8**%c,align 8
%dB=getelementptr inbounds i8,i8*%dn,i64%bv
%dC=bitcast i8*%dB to i8**
store i8*%dA,i8**%dC,align 8
%dD=load i8*,i8**%f,align 8
%dE=getelementptr inbounds i8,i8*%dn,i64%c5
%dF=bitcast i8*%dE to i8**
store i8*%dD,i8**%dF,align 8
%dG=icmp eq i32%dm,0
%dH=load i8*,i8**%e,align 8
%dI=sext i32%an to i64
%dJ=getelementptr inbounds i8,i8*%dn,i64%dI
br i1%dG,label%dM,label%dK
dK:
%dL=bitcast i8*%dJ to i8**
store i8*%dH,i8**%dL,align 8
br label%dN
dM:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dJ,i8*%dH,i32%dj,i1 false)
br label%dN
dN:
%dO=sext i32%aq to i64
%dP=getelementptr inbounds i8,i8*%dn,i64%dO
%dQ=bitcast i8*%dP to i32*
store i32%aH,i32*%dQ,align 4
ret i8*%dn
}
define internal fastcc i8*@_SMLL5mapi2_404(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%h,label%j
h:
%i=bitcast i8*%a to i8**
br label%n
j:
call void@sml_check(i32 inreg%f)
%k=bitcast i8**%d to i8***
%l=load i8**,i8***%k,align 8
%m=bitcast i8**%l to i8*
br label%n
n:
%o=phi i8*[%m,%j],[%a,%h]
%p=phi i8**[%l,%j],[%i,%h]
%q=load i8*,i8**%p,align 8
store i8*%q,i8**%e,align 8
%r=getelementptr inbounds i8*,i8**%p,i64 1
%s=bitcast i8**%r to i32*
%t=load i32,i32*%s,align 4
%u=getelementptr inbounds i8,i8*%o,i64 12
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=getelementptr inbounds i8*,i8**%p,i64 2
%y=bitcast i8**%x to i32*
%z=load i32,i32*%y,align 4
%A=getelementptr inbounds i8,i8*%o,i64 20
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=getelementptr inbounds i8*,i8**%p,i64 3
%E=bitcast i8**%D to i32*
%F=load i32,i32*%E,align 4
store i8*null,i8**%d,align 8
%G=getelementptr inbounds i8,i8*%o,i64 28
%H=bitcast i8*%G to i32*
%I=load i32,i32*%H,align 4
%J=call i8*@sml_alloc(i32 inreg 36)#0
%K=getelementptr inbounds i8,i8*%J,i64 -4
%L=bitcast i8*%K to i32*
store i32 1342177312,i32*%L,align 4
store i8*%J,i8**%d,align 8
%M=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%N=bitcast i8*%J to i8**
store i8*%M,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%J,i64 8
%P=bitcast i8*%O to i32*
store i32%t,i32*%P,align 4
%Q=getelementptr inbounds i8,i8*%J,i64 12
%R=bitcast i8*%Q to i32*
store i32%w,i32*%R,align 4
%S=getelementptr inbounds i8,i8*%J,i64 16
%T=bitcast i8*%S to i32*
store i32%z,i32*%T,align 4
%U=getelementptr inbounds i8,i8*%J,i64 20
%V=bitcast i8*%U to i32*
store i32%C,i32*%V,align 4
%W=getelementptr inbounds i8,i8*%J,i64 24
%X=bitcast i8*%W to i32*
store i32%F,i32*%X,align 4
%Y=getelementptr inbounds i8,i8*%J,i64 28
%Z=bitcast i8*%Y to i32*
store i32%I,i32*%Z,align 4
%aa=getelementptr inbounds i8,i8*%J,i64 32
%ab=bitcast i8*%aa to i32*
store i32 1,i32*%ab,align 4
%ac=call i8*@sml_alloc(i32 inreg 28)#0
%ad=getelementptr inbounds i8,i8*%ac,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 1342177304,i32*%ae,align 4
%af=load i8*,i8**%d,align 8
%ag=bitcast i8*%ac to i8**
store i8*%af,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%ac,i64 8
%ai=bitcast i8*%ah to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL4map_G_403 to void(...)*),void(...)**%ai,align 8
%aj=getelementptr inbounds i8,i8*%ac,i64 16
%ak=bitcast i8*%aj to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL4map_G_403 to void(...)*),void(...)**%ak,align 8
%al=getelementptr inbounds i8,i8*%ac,i64 24
%am=bitcast i8*%al to i32*
store i32 -2147483647,i32*%am,align 4
%an=load i8*,i8**%c,align 8
%ao=tail call fastcc i8*@_SMLL4map_G_403(i8*inreg%af,i8*inreg%an)
ret i8*%ao
}
define internal fastcc i8*@_SMLL5mapi2_405(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i32*
%l=load i32,i32*%k,align 4
%m=getelementptr inbounds i8,i8*%a,i64 12
%n=bitcast i8*%m to i32*
%o=load i32,i32*%n,align 4
%p=getelementptr inbounds i8,i8*%a,i64 16
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=getelementptr inbounds i8,i8*%a,i64 20
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=call i8*@sml_alloc(i32 inreg 36)#0
%w=getelementptr inbounds i8,i8*%v,i64 -4
%x=bitcast i8*%w to i32*
store i32 1342177312,i32*%x,align 4
store i8*%v,i8**%d,align 8
%y=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%z=bitcast i8*%v to i8**
store i8*%y,i8**%z,align 8
%A=getelementptr inbounds i8,i8*%v,i64 8
%B=bitcast i8*%A to i32*
store i32%f,i32*%B,align 4
%C=getelementptr inbounds i8,i8*%v,i64 12
%D=bitcast i8*%C to i32*
store i32%i,i32*%D,align 4
%E=getelementptr inbounds i8,i8*%v,i64 16
%F=bitcast i8*%E to i32*
store i32%l,i32*%F,align 4
%G=getelementptr inbounds i8,i8*%v,i64 20
%H=bitcast i8*%G to i32*
store i32%o,i32*%H,align 4
%I=getelementptr inbounds i8,i8*%v,i64 24
%J=bitcast i8*%I to i32*
store i32%r,i32*%J,align 4
%K=getelementptr inbounds i8,i8*%v,i64 28
%L=bitcast i8*%K to i32*
store i32%u,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%v,i64 32
%N=bitcast i8*%M to i32*
store i32 1,i32*%N,align 4
%O=call i8*@sml_alloc(i32 inreg 28)#0
%P=getelementptr inbounds i8,i8*%O,i64 -4
%Q=bitcast i8*%P to i32*
store i32 1342177304,i32*%Q,align 4
%R=load i8*,i8**%d,align 8
%S=bitcast i8*%O to i8**
store i8*%R,i8**%S,align 8
%T=getelementptr inbounds i8,i8*%O,i64 8
%U=bitcast i8*%T to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL5mapi2_404 to void(...)*),void(...)**%U,align 8
%V=getelementptr inbounds i8,i8*%O,i64 16
%W=bitcast i8*%V to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL5mapi2_404 to void(...)*),void(...)**%W,align 8
%X=getelementptr inbounds i8,i8*%O,i64 24
%Y=bitcast i8*%X to i32*
store i32 -2147483647,i32*%Y,align 4
ret i8*%O
}
define internal fastcc i8*@_SMLL5mapi2_406(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e)#4 gc"smlsharp"{
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%f,i8*null)#0
%g=bitcast i8*%a to i32*
%h=load i32,i32*%g,align 4
%i=getelementptr inbounds i8,i8*%a,i64 4
%j=bitcast i8*%i to i32*
%k=load i32,i32*%j,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=bitcast i8*%l to i32*
%n=getelementptr inbounds i8,i8*%l,i64 -4
%o=bitcast i8*%n to i32*
store i32 1342177304,i32*%o,align 4
store i8*%l,i8**%f,align 8
store i32%h,i32*%m,align 4
%p=getelementptr inbounds i8,i8*%l,i64 4
%q=bitcast i8*%p to i32*
store i32%k,i32*%q,align 4
%r=getelementptr inbounds i8,i8*%l,i64 8
%s=bitcast i8*%r to i32*
store i32%b,i32*%s,align 4
%t=getelementptr inbounds i8,i8*%l,i64 12
%u=bitcast i8*%t to i32*
store i32%c,i32*%u,align 4
%v=getelementptr inbounds i8,i8*%l,i64 16
%w=bitcast i8*%v to i32*
store i32%d,i32*%w,align 4
%x=getelementptr inbounds i8,i8*%l,i64 20
%y=bitcast i8*%x to i32*
store i32%e,i32*%y,align 4
%z=getelementptr inbounds i8,i8*%l,i64 24
%A=bitcast i8*%z to i32*
store i32 0,i32*%A,align 4
%B=call i8*@sml_alloc(i32 inreg 28)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177304,i32*%D,align 4
%E=load i8*,i8**%f,align 8
%F=bitcast i8*%B to i8**
store i8*%E,i8**%F,align 8
%G=getelementptr inbounds i8,i8*%B,i64 8
%H=bitcast i8*%G to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL5mapi2_405 to void(...)*),void(...)**%H,align 8
%I=getelementptr inbounds i8,i8*%B,i64 16
%J=bitcast i8*%I to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL5mapi2_405 to void(...)*),void(...)**%J,align 8
%K=getelementptr inbounds i8,i8*%B,i64 24
%L=bitcast i8*%K to i32*
store i32 -2147483647,i32*%L,align 4
ret i8*%B
}
define internal fastcc i8*@_SMLL4fold_407(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
m:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
store i8*%a,i8**%h,align 8
%j=bitcast i8**%h to i8***
br label%k
k:
%l=phi i8*[%dC,%dN],[%b,%m]
store i8*%l,i8**%c,align 8
%n=load atomic i32,i32*@sml_check_flag unordered,align 4
%o=icmp eq i32%n,0
br i1%o,label%r,label%p
p:
call void@sml_check(i32 inreg%n)
%q=load i8*,i8**%c,align 8
br label%r
r:
%s=phi i8*[%q,%p],[%l,%k]
%t=load i8*,i8**%h,align 8
%u=getelementptr inbounds i8,i8*%t,i64 12
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=add i32%w,3
%y=sub i32 0,%w
%z=and i32%x,%y
%A=add i32%w,7
%B=add i32%A,%z
%C=and i32%B,-8
%D=add i32%C,15
%E=and i32%D,-8
%F=getelementptr inbounds i8,i8*%t,i64 20
%G=bitcast i8*%F to i32*
%H=load i32,i32*%G,align 4
%I=add i32%H,7
%J=add i32%I,%E
%K=sub i32 0,%H
%L=and i32%J,%K
%M=getelementptr inbounds i8,i8*%t,i64 28
%N=bitcast i8*%M to i32*
%O=load i32,i32*%N,align 4
%P=add i32%O,7
%Q=sub i32 0,%O
%R=and i32%P,%Q
%S=add i32%P,%R
%T=and i32%S,-8
%U=lshr i32%R,3
%V=getelementptr inbounds i8,i8*%t,i64 24
%W=bitcast i8*%V to i32*
%X=load i32,i32*%W,align 4
%Y=shl i32%X,%U
%Z=or i32%Y,1
%aa=or i32%T,4
%ab=add i32%w,-1
%ac=and i32%ab,%y
%ad=add i32%H,-1
%ae=add i32%ad,%w
%af=add i32%ae,%ac
%ag=and i32%af,%K
%ah=add i32%ad,%O
%ai=add i32%ah,%ag
%aj=and i32%ai,%Q
%ak=add i32%P,%aj
%al=and i32%ak,-8
%am=lshr i32%aj,3
%an=lshr i32%ag,3
%ao=sub nsw i32%am,%an
%ap=lshr i32%ac,3
%aq=sub nsw i32%an,%ap
%ar=shl i32%X,%ao
%as=getelementptr inbounds i8,i8*%t,i64 16
%at=bitcast i8*%as to i32*
%au=load i32,i32*%at,align 4
%av=or i32%ar,%au
%aw=shl i32%av,%aq
%ax=getelementptr inbounds i8,i8*%t,i64 8
%ay=bitcast i8*%ax to i32*
%az=load i32,i32*%ay,align 4
%aA=or i32%aw,%az
%aB=or i32%al,4
%aC=bitcast i8*%s to i8**
%aD=load i8*,i8**%aC,align 8
%aE=icmp eq i8*%aD,null
br i1%aE,label%aF,label%aT
aF:
%aG=icmp eq i32%X,0
br i1%aG,label%aM,label%aH
aH:
%aI=sext i32%R to i64
%aJ=getelementptr inbounds i8,i8*%s,i64%aI
%aK=bitcast i8*%aJ to i8**
%aL=load i8*,i8**%aK,align 8
ret i8*%aL
aM:
store i8*null,i8**%h,align 8
%aN=call i8*@sml_alloc(i32 inreg%O)#0
%aO=getelementptr inbounds i8,i8*%aN,i64 -4
%aP=bitcast i8*%aO to i32*
store i32%O,i32*%aP,align 4
%aQ=load i8*,i8**%c,align 8
%aR=sext i32%R to i64
%aS=getelementptr inbounds i8,i8*%aQ,i64%aR
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aN,i8*%aS,i32%O,i1 false)
ret i8*%aN
aT:
store i8*%aD,i8**%g,align 8
%aU=icmp eq i32%az,0
br i1%aU,label%a0,label%aV
aV:
%aW=sext i32%z to i64
%aX=getelementptr inbounds i8,i8*%aD,i64%aW
%aY=bitcast i8*%aX to i8**
%aZ=load i8*,i8**%aY,align 8
br label%bb
a0:
%a1=call i8*@sml_alloc(i32 inreg%w)#0
%a2=getelementptr inbounds i8,i8*%a1,i64 -4
%a3=bitcast i8*%a2 to i32*
store i32%w,i32*%a3,align 4
%a4=load i8*,i8**%g,align 8
%a5=sext i32%z to i64
%a6=getelementptr inbounds i8,i8*%a4,i64%a5
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%a1,i8*%a6,i32%w,i1 false)
%a7=load i8*,i8**%h,align 8
%a8=getelementptr inbounds i8,i8*%a7,i64 16
%a9=bitcast i8*%a8 to i32*
%ba=load i32,i32*%a9,align 4
br label%bb
bb:
%bc=phi i8*[%a7,%a0],[%t,%aV]
%bd=phi i32[%ba,%a0],[%au,%aV]
%be=phi i8*[%a4,%a0],[%aD,%aV]
%bf=phi i8*[%a1,%a0],[%aZ,%aV]
store i8*%bf,i8**%d,align 8
%bg=sext i32%C to i64
%bh=getelementptr inbounds i8,i8*%be,i64%bg
%bi=bitcast i8*%bh to i8**
%bj=load i8*,i8**%bi,align 8
store i8*%bj,i8**%e,align 8
%bk=sext i32%E to i64
%bl=getelementptr inbounds i8,i8*%be,i64%bk
%bm=bitcast i8*%bl to i8**
%bn=load i8*,i8**%bm,align 8
store i8*%bn,i8**%f,align 8
%bo=icmp eq i32%bd,0
br i1%bo,label%bu,label%bp
bp:
store i8*null,i8**%g,align 8
%bq=sext i32%L to i64
%br=getelementptr inbounds i8,i8*%be,i64%bq
%bs=bitcast i8*%br to i8**
%bt=load i8*,i8**%bs,align 8
br label%bF
bu:
%bv=getelementptr inbounds i8,i8*%bc,i64 20
%bw=bitcast i8*%bv to i32*
%bx=load i32,i32*%bw,align 4
%by=call i8*@sml_alloc(i32 inreg%bx)#0
%bz=getelementptr inbounds i8,i8*%by,i64 -4
%bA=bitcast i8*%bz to i32*
store i32%bx,i32*%bA,align 4
%bB=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%bC=sext i32%L to i64
%bD=getelementptr inbounds i8,i8*%bB,i64%bC
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%by,i8*%bD,i32%bx,i1 false)
%bE=load i8*,i8**%h,align 8
br label%bF
bF:
%bG=phi i8*[%bE,%bu],[%bc,%bp]
%bH=phi i8*[%by,%bu],[%bt,%bp]
store i8*%bH,i8**%g,align 8
%bI=getelementptr inbounds i8,i8*%bG,i64 24
%bJ=bitcast i8*%bI to i32*
%bK=load i32,i32*%bJ,align 4
%bL=icmp eq i32%bK,0
br i1%bL,label%bT,label%bM
bM:
%bN=bitcast i8*%bG to i8**
%bO=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bP=sext i32%R to i64
%bQ=getelementptr inbounds i8,i8*%bO,i64%bP
%bR=bitcast i8*%bQ to i8**
%bS=load i8*,i8**%bR,align 8
br label%b8
bT:
%bU=getelementptr inbounds i8,i8*%bG,i64 28
%bV=bitcast i8*%bU to i32*
%bW=load i32,i32*%bV,align 4
%bX=call i8*@sml_alloc(i32 inreg%bW)#0
%bY=getelementptr inbounds i8,i8*%bX,i64 -4
%bZ=bitcast i8*%bY to i32*
store i32%bW,i32*%bZ,align 4
%b0=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%b1=sext i32%R to i64
%b2=getelementptr inbounds i8,i8*%b0,i64%b1
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bX,i8*%b2,i32%bW,i1 false)
%b3=load i8**,i8***%j,align 8
%b4=bitcast i8**%b3 to i8*
%b5=getelementptr inbounds i8*,i8**%b3,i64 3
%b6=bitcast i8**%b5 to i32*
%b7=load i32,i32*%b6,align 4
br label%b8
b8:
%b9=phi i64[%b1,%bT],[%bP,%bM]
%ca=phi i32[%b7,%bT],[%bK,%bM]
%cb=phi i8*[%b4,%bT],[%bG,%bM]
%cc=phi i8**[%b3,%bT],[%bN,%bM]
%cd=phi i8*[%bX,%bT],[%bS,%bM]
store i8*%cd,i8**%c,align 8
%ce=load i8*,i8**%cc,align 8
%cf=getelementptr inbounds i8,i8*%ce,i64 16
%cg=bitcast i8*%cf to i8*(i8*,i8*)**
%ch=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%cg,align 8
%ci=bitcast i8*%ce to i8**
%cj=load i8*,i8**%ci,align 8
store i8*%cj,i8**%i,align 8
%ck=getelementptr inbounds i8,i8*%cb,i64 28
%cl=bitcast i8*%ck to i32*
%cm=load i32,i32*%cl,align 4
%cn=call i8*@sml_alloc(i32 inreg%aa)#0
%co=or i32%T,1342177280
%cp=getelementptr inbounds i8,i8*%cn,i64 -4
%cq=bitcast i8*%cp to i32*
store i32%co,i32*%cq,align 4
call void@llvm.memset.p0i8.i32(i8*%cn,i8 0,i32%aa,i1 false)
%cr=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%cs=bitcast i8*%cn to i8**
store i8*%cr,i8**%cs,align 8
%ct=icmp eq i32%ca,0
%cu=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cv=getelementptr inbounds i8,i8*%cn,i64%b9
br i1%ct,label%cy,label%cw
cw:
%cx=bitcast i8*%cv to i8**
store i8*%cu,i8**%cx,align 8
br label%cz
cy:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cv,i8*%cu,i32%cm,i1 false)
br label%cz
cz:
%cA=sext i32%T to i64
%cB=getelementptr inbounds i8,i8*%cn,i64%cA
%cC=bitcast i8*%cB to i32*
store i32%Z,i32*%cC,align 4
%cD=load i8*,i8**%h,align 8
%cE=call fastcc i8*@_SMLL4fold_407(i8*inreg%cD,i8*inreg%cn)
store i8*%cE,i8**%c,align 8
%cF=load i8*,i8**%h,align 8
%cG=getelementptr inbounds i8,i8*%cF,i64 12
%cH=bitcast i8*%cG to i32*
%cI=load i32,i32*%cH,align 4
%cJ=getelementptr inbounds i8,i8*%cF,i64 8
%cK=bitcast i8*%cJ to i32*
%cL=load i32,i32*%cK,align 4
%cM=getelementptr inbounds i8,i8*%cF,i64 20
%cN=bitcast i8*%cM to i32*
%cO=load i32,i32*%cN,align 4
%cP=getelementptr inbounds i8,i8*%cF,i64 16
%cQ=bitcast i8*%cP to i32*
%cR=load i32,i32*%cQ,align 4
%cS=getelementptr inbounds i8,i8*%cF,i64 28
%cT=bitcast i8*%cS to i32*
%cU=load i32,i32*%cT,align 4
%cV=getelementptr inbounds i8,i8*%cF,i64 24
%cW=bitcast i8*%cV to i32*
%cX=load i32,i32*%cW,align 4
%cY=call i8*@sml_alloc(i32 inreg%aB)#0
%cZ=or i32%al,1342177280
%c0=getelementptr inbounds i8,i8*%cY,i64 -4
%c1=bitcast i8*%c0 to i32*
store i32%cZ,i32*%c1,align 4
call void@llvm.memset.p0i8.i32(i8*%cY,i8 0,i32%aB,i1 false)
%c2=icmp eq i32%cL,0
%c3=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%c4=sext i32%ac to i64
%c5=getelementptr inbounds i8,i8*%cY,i64%c4
br i1%c2,label%c8,label%c6
c6:
%c7=bitcast i8*%c5 to i8**
store i8*%c3,i8**%c7,align 8
br label%c9
c8:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%c5,i8*%c3,i32%cI,i1 false)
br label%c9
c9:
%da=icmp eq i32%cR,0
%db=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%dc=sext i32%ag to i64
%dd=getelementptr inbounds i8,i8*%cY,i64%dc
br i1%da,label%dg,label%de
de:
%df=bitcast i8*%dd to i8**
store i8*%db,i8**%df,align 8
br label%dh
dg:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dd,i8*%db,i32%cO,i1 false)
br label%dh
dh:
%di=icmp eq i32%cX,0
%dj=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%dk=sext i32%aj to i64
%dl=getelementptr inbounds i8,i8*%cY,i64%dk
br i1%di,label%do,label%dm
dm:
%dn=bitcast i8*%dl to i8**
store i8*%dj,i8**%dn,align 8
br label%dp
do:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dl,i8*%dj,i32%cU,i1 false)
br label%dp
dp:
%dq=sext i32%al to i64
%dr=getelementptr inbounds i8,i8*%cY,i64%dq
%ds=bitcast i8*%dr to i32*
store i32%aA,i32*%ds,align 4
%dt=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%du=call fastcc i8*%ch(i8*inreg%dt,i8*inreg%cY)
store i8*%du,i8**%c,align 8
%dv=load i8*,i8**%h,align 8
%dw=getelementptr inbounds i8,i8*%dv,i64 28
%dx=bitcast i8*%dw to i32*
%dy=load i32,i32*%dx,align 4
%dz=getelementptr inbounds i8,i8*%dv,i64 24
%dA=bitcast i8*%dz to i32*
%dB=load i32,i32*%dA,align 4
%dC=call i8*@sml_alloc(i32 inreg%aa)#0
%dD=getelementptr inbounds i8,i8*%dC,i64 -4
%dE=bitcast i8*%dD to i32*
store i32%co,i32*%dE,align 4
call void@llvm.memset.p0i8.i32(i8*%dC,i8 0,i32%aa,i1 false)
%dF=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%dG=bitcast i8*%dC to i8**
store i8*%dF,i8**%dG,align 8
%dH=icmp eq i32%dB,0
%dI=load i8*,i8**%c,align 8
%dJ=getelementptr inbounds i8,i8*%dC,i64%b9
br i1%dH,label%dM,label%dK
dK:
%dL=bitcast i8*%dJ to i8**
store i8*%dI,i8**%dL,align 8
br label%dN
dM:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dJ,i8*%dI,i32%dy,i1 false)
br label%dN
dN:
%dO=getelementptr inbounds i8,i8*%dC,i64%cA
%dP=bitcast i8*%dO to i32*
store i32%Z,i32*%dP,align 4
br label%k
}
define internal fastcc i8*@_SMLL6foldli_408(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
m:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%k,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%d,align 8
br label%k
k:
%l=phi i8*[%j,%i],[%a,%m]
%n=getelementptr inbounds i8,i8*%l,i64 36
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=add i32%p,7
%r=sub i32 0,%p
%s=and i32%q,%r
%t=add i32%q,%s
%u=and i32%t,-8
%v=lshr i32%s,3
%w=getelementptr inbounds i8,i8*%l,i64 32
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=shl i32%y,%v
%A=or i32%z,1
%B=or i32%u,4
%C=bitcast i8*%l to i8**
%D=load i8*,i8**%C,align 8
store i8*%D,i8**%e,align 8
%E=getelementptr inbounds i8,i8*%l,i64 16
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
%H=getelementptr inbounds i8,i8*%l,i64 20
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
%K=getelementptr inbounds i8,i8*%l,i64 24
%L=bitcast i8*%K to i32*
%M=load i32,i32*%L,align 4
%N=getelementptr inbounds i8,i8*%l,i64 28
%O=bitcast i8*%N to i32*
%P=load i32,i32*%O,align 4
%Q=call i8*@sml_alloc(i32 inreg 36)#0
%R=getelementptr inbounds i8,i8*%Q,i64 -4
%S=bitcast i8*%R to i32*
store i32 1342177312,i32*%S,align 4
store i8*%Q,i8**%f,align 8
%T=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%U=bitcast i8*%Q to i8**
store i8*%T,i8**%U,align 8
%V=getelementptr inbounds i8,i8*%Q,i64 8
%W=bitcast i8*%V to i32*
store i32%G,i32*%W,align 4
%X=getelementptr inbounds i8,i8*%Q,i64 12
%Y=bitcast i8*%X to i32*
store i32%J,i32*%Y,align 4
%Z=getelementptr inbounds i8,i8*%Q,i64 16
%aa=bitcast i8*%Z to i32*
store i32%M,i32*%aa,align 4
%ab=getelementptr inbounds i8,i8*%Q,i64 20
%ac=bitcast i8*%ab to i32*
store i32%P,i32*%ac,align 4
%ad=getelementptr inbounds i8,i8*%Q,i64 24
%ae=bitcast i8*%ad to i32*
store i32%y,i32*%ae,align 4
%af=getelementptr inbounds i8,i8*%Q,i64 28
%ag=bitcast i8*%af to i32*
store i32%p,i32*%ag,align 4
%ah=getelementptr inbounds i8,i8*%Q,i64 32
%ai=bitcast i8*%ah to i32*
store i32 1,i32*%ai,align 4
%aj=call i8*@sml_alloc(i32 inreg 28)#0
%ak=getelementptr inbounds i8,i8*%aj,i64 -4
%al=bitcast i8*%ak to i32*
store i32 1342177304,i32*%al,align 4
%am=load i8*,i8**%f,align 8
%an=bitcast i8*%aj to i8**
store i8*%am,i8**%an,align 8
%ao=getelementptr inbounds i8,i8*%aj,i64 8
%ap=bitcast i8*%ao to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL4fold_407 to void(...)*),void(...)**%ap,align 8
%aq=getelementptr inbounds i8,i8*%aj,i64 16
%ar=bitcast i8*%aq to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL4fold_407 to void(...)*),void(...)**%ar,align 8
%as=getelementptr inbounds i8,i8*%aj,i64 24
%at=bitcast i8*%as to i32*
store i32 1,i32*%at,align 4
%au=load i8*,i8**%d,align 8
%av=getelementptr inbounds i8,i8*%au,i64 32
%aw=bitcast i8*%av to i32*
%ax=load i32,i32*%aw,align 4
%ay=icmp eq i32%ax,0
br i1%ay,label%aD,label%az
az:
%aA=getelementptr inbounds i8,i8*%au,i64 8
%aB=bitcast i8*%aA to i8**
%aC=load i8*,i8**%aB,align 8
br label%aP
aD:
%aE=getelementptr inbounds i8,i8*%au,i64 36
%aF=bitcast i8*%aE to i32*
%aG=load i32,i32*%aF,align 4
%aH=call i8*@sml_alloc(i32 inreg%aG)#0
%aI=getelementptr inbounds i8,i8*%aH,i64 -4
%aJ=bitcast i8*%aI to i32*
store i32%aG,i32*%aJ,align 4
%aK=load i8*,i8**%d,align 8
%aL=getelementptr inbounds i8,i8*%aK,i64 8
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aH,i8*%aL,i32%aG,i1 false)
%aM=getelementptr inbounds i8,i8*%aK,i64 32
%aN=bitcast i8*%aM to i32*
%aO=load i32,i32*%aN,align 4
br label%aP
aP:
%aQ=phi i32[%aO,%aD],[%ax,%az]
%aR=phi i8*[%aK,%aD],[%au,%az]
%aS=phi i8*[%aH,%aD],[%aC,%az]
store i8*%aS,i8**%e,align 8
%aT=getelementptr inbounds i8,i8*%aR,i64 36
%aU=bitcast i8*%aT to i32*
%aV=load i32,i32*%aU,align 4
store i8*null,i8**%d,align 8
%aW=call i8*@sml_alloc(i32 inreg%B)#0
%aX=or i32%u,1342177280
%aY=getelementptr inbounds i8,i8*%aW,i64 -4
%aZ=bitcast i8*%aY to i32*
store i32%aX,i32*%aZ,align 4
call void@llvm.memset.p0i8.i32(i8*%aW,i8 0,i32%B,i1 false)
%a0=load i8*,i8**%c,align 8
%a1=bitcast i8*%aW to i8**
store i8*%a0,i8**%a1,align 8
%a2=icmp eq i32%aQ,0
%a3=load i8*,i8**%e,align 8
%a4=sext i32%s to i64
%a5=getelementptr inbounds i8,i8*%aW,i64%a4
br i1%a2,label%a8,label%a6
a6:
%a7=bitcast i8*%a5 to i8**
store i8*%a3,i8**%a7,align 8
br label%a9
a8:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%a5,i8*%a3,i32%aV,i1 false)
br label%a9
a9:
%ba=sext i32%u to i64
%bb=getelementptr inbounds i8,i8*%aW,i64%ba
%bc=bitcast i8*%bb to i32*
store i32%A,i32*%bc,align 4
%bd=load i8*,i8**%f,align 8
%be=tail call fastcc i8*@_SMLL4fold_407(i8*inreg%bd,i8*inreg%aW)
ret i8*%be
}
define internal fastcc i8*@_SMLL6foldli_409(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%b,i8**%c,align 8
%f=getelementptr inbounds i8,i8*%a,i64 24
%g=bitcast i8*%f to i32*
%h=load i32,i32*%g,align 4
%i=shl i32%h,1
%j=or i32%i,1
%k=bitcast i8*%a to i8**
%l=load i8*,i8**%k,align 8
store i8*%l,i8**%d,align 8
%m=getelementptr inbounds i8,i8*%a,i64 28
%n=bitcast i8*%m to i32*
%o=load i32,i32*%n,align 4
%p=getelementptr inbounds i8,i8*%a,i64 8
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=getelementptr inbounds i8,i8*%a,i64 12
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=getelementptr inbounds i8,i8*%a,i64 16
%w=bitcast i8*%v to i32*
%x=load i32,i32*%w,align 4
%y=getelementptr inbounds i8,i8*%a,i64 20
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=call i8*@sml_alloc(i32 inreg 44)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177320,i32*%D,align 4
store i8*%B,i8**%e,align 8
%E=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%F=bitcast i8*%B to i8**
store i8*%E,i8**%F,align 8
%G=icmp eq i32%h,0
%H=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%I=getelementptr inbounds i8,i8*%B,i64 8
br i1%G,label%L,label%J
J:
%K=bitcast i8*%I to i8**
store i8*%H,i8**%K,align 8
br label%M
L:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%I,i8*%H,i32%o,i1 false)
br label%M
M:
%N=getelementptr inbounds i8,i8*%B,i64 16
%O=bitcast i8*%N to i32*
store i32%r,i32*%O,align 4
%P=getelementptr inbounds i8,i8*%B,i64 20
%Q=bitcast i8*%P to i32*
store i32%u,i32*%Q,align 4
%R=getelementptr inbounds i8,i8*%B,i64 24
%S=bitcast i8*%R to i32*
store i32%x,i32*%S,align 4
%T=getelementptr inbounds i8,i8*%B,i64 28
%U=bitcast i8*%T to i32*
store i32%A,i32*%U,align 4
%V=getelementptr inbounds i8,i8*%B,i64 32
%W=bitcast i8*%V to i32*
store i32%h,i32*%W,align 4
%X=getelementptr inbounds i8,i8*%B,i64 36
%Y=bitcast i8*%X to i32*
store i32%o,i32*%Y,align 4
%Z=getelementptr inbounds i8,i8*%B,i64 40
%aa=bitcast i8*%Z to i32*
store i32%j,i32*%aa,align 4
%ab=call i8*@sml_alloc(i32 inreg 28)#0
%ac=getelementptr inbounds i8,i8*%ab,i64 -4
%ad=bitcast i8*%ac to i32*
store i32 1342177304,i32*%ad,align 4
%ae=load i8*,i8**%e,align 8
%af=bitcast i8*%ab to i8**
store i8*%ae,i8**%af,align 8
%ag=getelementptr inbounds i8,i8*%ab,i64 8
%ah=bitcast i8*%ag to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6foldli_408 to void(...)*),void(...)**%ah,align 8
%ai=getelementptr inbounds i8,i8*%ab,i64 16
%aj=bitcast i8*%ai to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6foldli_408 to void(...)*),void(...)**%aj,align 8
%ak=getelementptr inbounds i8,i8*%ab,i64 24
%al=bitcast i8*%ak to i32*
store i32 1,i32*%al,align 4
ret i8*%ab
}
define internal fastcc i8*@_SMLL6foldli_410(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i32*
%l=load i32,i32*%k,align 4
%m=getelementptr inbounds i8,i8*%a,i64 12
%n=bitcast i8*%m to i32*
%o=load i32,i32*%n,align 4
%p=getelementptr inbounds i8,i8*%a,i64 16
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=getelementptr inbounds i8,i8*%a,i64 20
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=call i8*@sml_alloc(i32 inreg 36)#0
%w=getelementptr inbounds i8,i8*%v,i64 -4
%x=bitcast i8*%w to i32*
store i32 1342177312,i32*%x,align 4
store i8*%v,i8**%d,align 8
%y=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%z=bitcast i8*%v to i8**
store i8*%y,i8**%z,align 8
%A=getelementptr inbounds i8,i8*%v,i64 8
%B=bitcast i8*%A to i32*
store i32%f,i32*%B,align 4
%C=getelementptr inbounds i8,i8*%v,i64 12
%D=bitcast i8*%C to i32*
store i32%i,i32*%D,align 4
%E=getelementptr inbounds i8,i8*%v,i64 16
%F=bitcast i8*%E to i32*
store i32%l,i32*%F,align 4
%G=getelementptr inbounds i8,i8*%v,i64 20
%H=bitcast i8*%G to i32*
store i32%o,i32*%H,align 4
%I=getelementptr inbounds i8,i8*%v,i64 24
%J=bitcast i8*%I to i32*
store i32%r,i32*%J,align 4
%K=getelementptr inbounds i8,i8*%v,i64 28
%L=bitcast i8*%K to i32*
store i32%u,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%v,i64 32
%N=bitcast i8*%M to i32*
store i32 1,i32*%N,align 4
%O=call i8*@sml_alloc(i32 inreg 28)#0
%P=getelementptr inbounds i8,i8*%O,i64 -4
%Q=bitcast i8*%P to i32*
store i32 1342177304,i32*%Q,align 4
%R=load i8*,i8**%d,align 8
%S=bitcast i8*%O to i8**
store i8*%R,i8**%S,align 8
%T=getelementptr inbounds i8,i8*%O,i64 8
%U=bitcast i8*%T to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6foldli_409 to void(...)*),void(...)**%U,align 8
%V=getelementptr inbounds i8,i8*%O,i64 16
%W=bitcast i8*%V to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6foldli_409 to void(...)*),void(...)**%W,align 8
%X=getelementptr inbounds i8,i8*%O,i64 24
%Y=bitcast i8*%X to i32*
store i32 1,i32*%Y,align 4
ret i8*%O
}
define internal fastcc i8*@_SMLL6foldli_411(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e)#4 gc"smlsharp"{
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%f,i8*null)#0
%g=bitcast i8*%a to i32*
%h=load i32,i32*%g,align 4
%i=getelementptr inbounds i8,i8*%a,i64 4
%j=bitcast i8*%i to i32*
%k=load i32,i32*%j,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=bitcast i8*%l to i32*
%n=getelementptr inbounds i8,i8*%l,i64 -4
%o=bitcast i8*%n to i32*
store i32 1342177304,i32*%o,align 4
store i8*%l,i8**%f,align 8
store i32%h,i32*%m,align 4
%p=getelementptr inbounds i8,i8*%l,i64 4
%q=bitcast i8*%p to i32*
store i32%k,i32*%q,align 4
%r=getelementptr inbounds i8,i8*%l,i64 8
%s=bitcast i8*%r to i32*
store i32%b,i32*%s,align 4
%t=getelementptr inbounds i8,i8*%l,i64 12
%u=bitcast i8*%t to i32*
store i32%c,i32*%u,align 4
%v=getelementptr inbounds i8,i8*%l,i64 16
%w=bitcast i8*%v to i32*
store i32%d,i32*%w,align 4
%x=getelementptr inbounds i8,i8*%l,i64 20
%y=bitcast i8*%x to i32*
store i32%e,i32*%y,align 4
%z=getelementptr inbounds i8,i8*%l,i64 24
%A=bitcast i8*%z to i32*
store i32 0,i32*%A,align 4
%B=call i8*@sml_alloc(i32 inreg 28)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177304,i32*%D,align 4
%E=load i8*,i8**%f,align 8
%F=bitcast i8*%B to i8**
store i8*%E,i8**%F,align 8
%G=getelementptr inbounds i8,i8*%B,i64 8
%H=bitcast i8*%G to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6foldli_410 to void(...)*),void(...)**%H,align 8
%I=getelementptr inbounds i8,i8*%B,i64 16
%J=bitcast i8*%I to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6foldli_410 to void(...)*),void(...)**%J,align 8
%K=getelementptr inbounds i8,i8*%B,i64 24
%L=bitcast i8*%K to i32*
store i32 -2147483647,i32*%L,align 4
ret i8*%B
}
define internal fastcc i8*@_SMLL5foldl_412(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
m:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%k,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%e,align 8
br label%k
k:
%l=phi i8*[%j,%i],[%a,%m]
%n=getelementptr inbounds i8,i8*%l,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=add i32%p,-1
%r=sub i32 0,%p
%s=and i32%q,%r
%t=getelementptr inbounds i8,i8*%l,i64 16
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=add i32%v,-1
%x=add i32%w,%p
%y=add i32%x,%s
%z=sub i32 0,%v
%A=and i32%y,%z
%B=getelementptr inbounds i8,i8*%l,i64 24
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=add i32%w,%D
%F=add i32%E,%A
%G=sub i32 0,%D
%H=and i32%F,%G
%I=and i32%w,%z
%J=add i32%E,%I
%K=and i32%J,%G
%L=add i32%D,7
%M=add i32%L,%K
%N=and i32%M,-8
%O=lshr i32%K,3
%P=lshr i32%I,3
%Q=sub nsw i32%O,%P
%R=getelementptr inbounds i8,i8*%l,i64 20
%S=bitcast i8*%R to i32*
%T=load i32,i32*%S,align 4
%U=shl i32%T,%Q
%V=getelementptr inbounds i8,i8*%l,i64 12
%W=bitcast i8*%V to i32*
%X=load i32,i32*%W,align 4
%Y=or i32%U,%X
%Z=or i32%N,4
%aa=icmp eq i32%X,0
br i1%aa,label%ah,label%ab
ab:
%ac=load i8*,i8**%c,align 8
%ad=sext i32%A to i64
%ae=getelementptr inbounds i8,i8*%ac,i64%ad
%af=bitcast i8*%ae to i8**
%ag=load i8*,i8**%af,align 8
br label%as
ah:
%ai=call i8*@sml_alloc(i32 inreg%v)#0
%aj=getelementptr inbounds i8,i8*%ai,i64 -4
%ak=bitcast i8*%aj to i32*
store i32%v,i32*%ak,align 4
%al=load i8*,i8**%c,align 8
%am=sext i32%A to i64
%an=getelementptr inbounds i8,i8*%al,i64%am
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ai,i8*%an,i32%v,i1 false)
%ao=load i8*,i8**%e,align 8
%ap=getelementptr inbounds i8,i8*%ao,i64 20
%aq=bitcast i8*%ap to i32*
%ar=load i32,i32*%aq,align 4
br label%as
as:
%at=phi i8*[%ao,%ah],[%l,%ab]
%au=phi i8*[%al,%ah],[%ac,%ab]
%av=phi i32[%ar,%ah],[%T,%ab]
%aw=phi i8*[%ai,%ah],[%ag,%ab]
store i8*%aw,i8**%d,align 8
%ax=icmp eq i32%av,0
br i1%ax,label%aE,label%ay
ay:
%az=bitcast i8*%at to i8**
store i8*null,i8**%c,align 8
%aA=sext i32%H to i64
%aB=getelementptr inbounds i8,i8*%au,i64%aA
%aC=bitcast i8*%aB to i8**
%aD=load i8*,i8**%aC,align 8
br label%aU
aE:
%aF=getelementptr inbounds i8,i8*%at,i64 24
%aG=bitcast i8*%aF to i32*
%aH=load i32,i32*%aG,align 4
%aI=call i8*@sml_alloc(i32 inreg%aH)#0
%aJ=getelementptr inbounds i8,i8*%aI,i64 -4
%aK=bitcast i8*%aJ to i32*
store i32%aH,i32*%aK,align 4
%aL=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aM=sext i32%H to i64
%aN=getelementptr inbounds i8,i8*%aL,i64%aM
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aI,i8*%aN,i32%aH,i1 false)
%aO=bitcast i8**%e to i8***
%aP=load i8**,i8***%aO,align 8
%aQ=bitcast i8**%aP to i8*
%aR=getelementptr inbounds i8,i8*%aQ,i64 20
%aS=bitcast i8*%aR to i32*
%aT=load i32,i32*%aS,align 4
br label%aU
aU:
%aV=phi i32[%aT,%aE],[%av,%ay]
%aW=phi i8*[%aQ,%aE],[%at,%ay]
%aX=phi i8**[%aP,%aE],[%az,%ay]
%aY=phi i8*[%aI,%aE],[%aD,%ay]
store i8*%aY,i8**%c,align 8
%aZ=load i8*,i8**%aX,align 8
%a0=getelementptr inbounds i8,i8*%aZ,i64 16
%a1=bitcast i8*%a0 to i8*(i8*,i8*)**
%a2=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a1,align 8
%a3=bitcast i8*%aZ to i8**
%a4=load i8*,i8**%a3,align 8
store i8*%a4,i8**%f,align 8
%a5=getelementptr inbounds i8,i8*%aW,i64 16
%a6=bitcast i8*%a5 to i32*
%a7=load i32,i32*%a6,align 4
%a8=getelementptr inbounds i8,i8*%aW,i64 12
%a9=bitcast i8*%a8 to i32*
%ba=load i32,i32*%a9,align 4
%bb=getelementptr inbounds i8,i8*%aW,i64 24
%bc=bitcast i8*%bb to i32*
%bd=load i32,i32*%bc,align 4
store i8*null,i8**%e,align 8
%be=call i8*@sml_alloc(i32 inreg%Z)#0
%bf=or i32%N,1342177280
%bg=getelementptr inbounds i8,i8*%be,i64 -4
%bh=bitcast i8*%bg to i32*
store i32%bf,i32*%bh,align 4
call void@llvm.memset.p0i8.i32(i8*%be,i8 0,i32%Z,i1 false)
%bi=icmp eq i32%ba,0
%bj=load i8*,i8**%d,align 8
%bk=sext i32%I to i64
%bl=getelementptr inbounds i8,i8*%be,i64%bk
br i1%bi,label%bo,label%bm
bm:
%bn=bitcast i8*%bl to i8**
store i8*%bj,i8**%bn,align 8
br label%bp
bo:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bl,i8*%bj,i32%a7,i1 false)
br label%bp
bp:
%bq=icmp eq i32%aV,0
%br=load i8*,i8**%c,align 8
%bs=sext i32%K to i64
%bt=getelementptr inbounds i8,i8*%be,i64%bs
br i1%bq,label%bw,label%bu
bu:
%bv=bitcast i8*%bt to i8**
store i8*%br,i8**%bv,align 8
br label%bx
bw:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bt,i8*%br,i32%bd,i1 false)
br label%bx
bx:
%by=sext i32%N to i64
%bz=getelementptr inbounds i8,i8*%be,i64%by
%bA=bitcast i8*%bz to i32*
store i32%Y,i32*%bA,align 4
%bB=load i8*,i8**%f,align 8
%bC=tail call fastcc i8*%a2(i8*inreg%bB,i8*inreg%be)
ret i8*%bC
}
define internal fastcc i8*@_SMLL5foldl_413(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
n:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%l,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%d,align 8
br label%l
l:
%m=phi i8*[%k,%j],[%a,%n]
%o=getelementptr inbounds i8,i8*%m,i64 16
%p=bitcast i8*%o to i8**
%q=load i8*,i8**%p,align 8
%r=getelementptr inbounds i8,i8*%m,i64 28
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=getelementptr inbounds i8,i8*%m,i64 32
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=getelementptr inbounds i8,i8*%m,i64 36
%y=bitcast i8*%x to i32*
%z=load i32,i32*%y,align 4
%A=getelementptr inbounds i8,i8*%m,i64 40
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=call fastcc i8*@_SMLL6foldli_411(i8*inreg%q,i32 inreg%t,i32 inreg%w,i32 inreg%z,i32 inreg%C)
%E=getelementptr inbounds i8,i8*%D,i64 16
%F=bitcast i8*%E to i8*(i8*,i8*)**
%G=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%F,align 8
%H=bitcast i8*%D to i8**
%I=load i8*,i8**%H,align 8
store i8*%I,i8**%f,align 8
%J=bitcast i8**%d to i8***
%K=load i8**,i8***%J,align 8
%L=load i8*,i8**%K,align 8
store i8*%L,i8**%e,align 8
%M=bitcast i8**%K to i8*
%N=getelementptr inbounds i8*,i8**%K,i64 3
%O=bitcast i8**%N to i32*
%P=load i32,i32*%O,align 4
%Q=getelementptr inbounds i8,i8*%M,i64 28
%R=bitcast i8*%Q to i32*
%S=load i32,i32*%R,align 4
%T=getelementptr inbounds i8*,i8**%K,i64 4
%U=bitcast i8**%T to i32*
%V=load i32,i32*%U,align 4
%W=getelementptr inbounds i8,i8*%M,i64 36
%X=bitcast i8*%W to i32*
%Y=load i32,i32*%X,align 4
%Z=getelementptr inbounds i8*,i8**%K,i64 5
%aa=bitcast i8**%Z to i32*
%ab=load i32,i32*%aa,align 4
%ac=call i8*@sml_alloc(i32 inreg 36)#0
%ad=getelementptr inbounds i8,i8*%ac,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 1342177312,i32*%ae,align 4
store i8*%ac,i8**%g,align 8
%af=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%ag=bitcast i8*%ac to i8**
store i8*%af,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%ac,i64 8
%ai=bitcast i8*%ah to i32*
store i32%P,i32*%ai,align 4
%aj=getelementptr inbounds i8,i8*%ac,i64 12
%ak=bitcast i8*%aj to i32*
store i32%S,i32*%ak,align 4
%al=getelementptr inbounds i8,i8*%ac,i64 16
%am=bitcast i8*%al to i32*
store i32%V,i32*%am,align 4
%an=getelementptr inbounds i8,i8*%ac,i64 20
%ao=bitcast i8*%an to i32*
store i32%Y,i32*%ao,align 4
%ap=getelementptr inbounds i8,i8*%ac,i64 24
%aq=bitcast i8*%ap to i32*
store i32%ab,i32*%aq,align 4
%ar=getelementptr inbounds i8,i8*%ac,i64 32
%as=bitcast i8*%ar to i32*
store i32 1,i32*%as,align 4
%at=call i8*@sml_alloc(i32 inreg 28)#0
%au=getelementptr inbounds i8,i8*%at,i64 -4
%av=bitcast i8*%au to i32*
store i32 1342177304,i32*%av,align 4
%aw=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%ax=bitcast i8*%at to i8**
store i8*%aw,i8**%ax,align 8
%ay=getelementptr inbounds i8,i8*%at,i64 8
%az=bitcast i8*%ay to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL5foldl_412 to void(...)*),void(...)**%az,align 8
%aA=getelementptr inbounds i8,i8*%at,i64 16
%aB=bitcast i8*%aA to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL5foldl_412 to void(...)*),void(...)**%aB,align 8
%aC=getelementptr inbounds i8,i8*%at,i64 24
%aD=bitcast i8*%aC to i32*
store i32 1,i32*%aD,align 4
%aE=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%aF=call fastcc i8*%G(i8*inreg%aE,i8*inreg%at)
%aG=getelementptr inbounds i8,i8*%aF,i64 16
%aH=bitcast i8*%aG to i8*(i8*,i8*)**
%aI=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aH,align 8
%aJ=bitcast i8*%aF to i8**
%aK=load i8*,i8**%aJ,align 8
store i8*%aK,i8**%e,align 8
%aL=load i8*,i8**%d,align 8
%aM=getelementptr inbounds i8,i8*%aL,i64 36
%aN=bitcast i8*%aM to i32*
%aO=load i32,i32*%aN,align 4
%aP=icmp eq i32%aO,0
br i1%aP,label%aU,label%aQ
aQ:
store i8*null,i8**%d,align 8
%aR=getelementptr inbounds i8,i8*%aL,i64 8
%aS=bitcast i8*%aR to i8**
%aT=load i8*,i8**%aS,align 8
br label%a4
aU:
%aV=getelementptr inbounds i8,i8*%aL,i64 40
%aW=bitcast i8*%aV to i32*
%aX=load i32,i32*%aW,align 4
%aY=call i8*@sml_alloc(i32 inreg%aX)#0
%aZ=getelementptr inbounds i8,i8*%aY,i64 -4
%a0=bitcast i8*%aZ to i32*
store i32%aX,i32*%a0,align 4
%a1=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%a2=getelementptr inbounds i8,i8*%a1,i64 8
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aY,i8*%a2,i32%aX,i1 false)
%a3=load i8*,i8**%e,align 8
br label%a4
a4:
%a5=phi i8*[%aK,%aQ],[%a3,%aU]
%a6=phi i8*[%aT,%aQ],[%aY,%aU]
store i8*null,i8**%e,align 8
%a7=call fastcc i8*%aI(i8*inreg%a5,i8*inreg%a6)
%a8=getelementptr inbounds i8,i8*%a7,i64 16
%a9=bitcast i8*%a8 to i8*(i8*,i8*)**
%ba=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a9,align 8
%bb=bitcast i8*%a7 to i8**
%bc=load i8*,i8**%bb,align 8
%bd=load i8*,i8**%c,align 8
%be=tail call fastcc i8*%ba(i8*inreg%bc,i8*inreg%bd)
ret i8*%be
}
define internal fastcc i8*@_SMLL5foldl_414(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=getelementptr inbounds i8,i8*%a,i64 28
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=shl i32%i,1
%k=or i32%j,5
%l=bitcast i8*%a to i8**
%m=load i8*,i8**%l,align 8
store i8*%m,i8**%d,align 8
%n=getelementptr inbounds i8,i8*%a,i64 32
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%a,i64 8
%r=bitcast i8*%q to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%e,align 8
%t=getelementptr inbounds i8,i8*%a,i64 16
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=getelementptr inbounds i8,i8*%a,i64 20
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=getelementptr inbounds i8,i8*%a,i64 24
%A=bitcast i8*%z to i32*
%B=load i32,i32*%A,align 4
%C=call i8*@sml_alloc(i32 inreg 52)#0
%D=getelementptr inbounds i8,i8*%C,i64 -4
%E=bitcast i8*%D to i32*
store i32 1342177328,i32*%E,align 4
store i8*%C,i8**%f,align 8
%F=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%G=bitcast i8*%C to i8**
store i8*%F,i8**%G,align 8
%H=icmp eq i32%i,0
%I=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%J=getelementptr inbounds i8,i8*%C,i64 8
br i1%H,label%M,label%K
K:
%L=bitcast i8*%J to i8**
store i8*%I,i8**%L,align 8
br label%N
M:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%J,i8*%I,i32%p,i1 false)
br label%N
N:
%O=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%P=getelementptr inbounds i8,i8*%C,i64 16
%Q=bitcast i8*%P to i8**
store i8*%O,i8**%Q,align 8
%R=getelementptr inbounds i8,i8*%C,i64 24
%S=bitcast i8*%R to i32*
store i32%v,i32*%S,align 4
%T=getelementptr inbounds i8,i8*%C,i64 28
%U=bitcast i8*%T to i32*
store i32%y,i32*%U,align 4
%V=getelementptr inbounds i8,i8*%C,i64 32
%W=bitcast i8*%V to i32*
store i32%B,i32*%W,align 4
%X=getelementptr inbounds i8,i8*%C,i64 36
%Y=bitcast i8*%X to i32*
store i32%i,i32*%Y,align 4
%Z=getelementptr inbounds i8,i8*%C,i64 40
%aa=bitcast i8*%Z to i32*
store i32%p,i32*%aa,align 4
%ab=getelementptr inbounds i8,i8*%C,i64 48
%ac=bitcast i8*%ab to i32*
store i32%k,i32*%ac,align 4
%ad=call i8*@sml_alloc(i32 inreg 28)#0
%ae=getelementptr inbounds i8,i8*%ad,i64 -4
%af=bitcast i8*%ae to i32*
store i32 1342177304,i32*%af,align 4
%ag=load i8*,i8**%f,align 8
%ah=bitcast i8*%ad to i8**
store i8*%ag,i8**%ah,align 8
%ai=getelementptr inbounds i8,i8*%ad,i64 8
%aj=bitcast i8*%ai to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL5foldl_413 to void(...)*),void(...)**%aj,align 8
%ak=getelementptr inbounds i8,i8*%ad,i64 16
%al=bitcast i8*%ak to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL5foldl_413 to void(...)*),void(...)**%al,align 8
%am=getelementptr inbounds i8,i8*%ad,i64 24
%an=bitcast i8*%am to i32*
store i32 1,i32*%an,align 4
ret i8*%ad
}
define internal fastcc i8*@_SMLL5foldl_415(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%b,i8**%c,align 8
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=getelementptr inbounds i8,i8*%a,i64 8
%i=bitcast i8*%h to i32*
%j=load i32,i32*%i,align 4
%k=getelementptr inbounds i8,i8*%a,i64 12
%l=bitcast i8*%k to i32*
%m=load i32,i32*%l,align 4
%n=getelementptr inbounds i8,i8*%a,i64 16
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%a,i64 20
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=getelementptr inbounds i8,i8*%a,i64 24
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=call i8*@sml_alloc(i32 inreg 44)#0
%x=getelementptr inbounds i8,i8*%w,i64 -4
%y=bitcast i8*%x to i32*
store i32 1342177320,i32*%y,align 4
store i8*%w,i8**%e,align 8
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=bitcast i8*%w to i8**
store i8*%z,i8**%A,align 8
%B=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%C=getelementptr inbounds i8,i8*%w,i64 8
%D=bitcast i8*%C to i8**
store i8*%B,i8**%D,align 8
%E=getelementptr inbounds i8,i8*%w,i64 16
%F=bitcast i8*%E to i32*
store i32%j,i32*%F,align 4
%G=getelementptr inbounds i8,i8*%w,i64 20
%H=bitcast i8*%G to i32*
store i32%m,i32*%H,align 4
%I=getelementptr inbounds i8,i8*%w,i64 24
%J=bitcast i8*%I to i32*
store i32%p,i32*%J,align 4
%K=getelementptr inbounds i8,i8*%w,i64 28
%L=bitcast i8*%K to i32*
store i32%s,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%w,i64 32
%N=bitcast i8*%M to i32*
store i32%v,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%w,i64 40
%P=bitcast i8*%O to i32*
store i32 3,i32*%P,align 4
%Q=call i8*@sml_alloc(i32 inreg 28)#0
%R=getelementptr inbounds i8,i8*%Q,i64 -4
%S=bitcast i8*%R to i32*
store i32 1342177304,i32*%S,align 4
%T=load i8*,i8**%e,align 8
%U=bitcast i8*%Q to i8**
store i8*%T,i8**%U,align 8
%V=getelementptr inbounds i8,i8*%Q,i64 8
%W=bitcast i8*%V to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL5foldl_414 to void(...)*),void(...)**%W,align 8
%X=getelementptr inbounds i8,i8*%Q,i64 16
%Y=bitcast i8*%X to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL5foldl_414 to void(...)*),void(...)**%Y,align 8
%Z=getelementptr inbounds i8,i8*%Q,i64 24
%aa=bitcast i8*%Z to i32*
store i32 1,i32*%aa,align 4
ret i8*%Q
}
define internal fastcc i8*@_SMLL5foldl_416(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e)#4 gc"smlsharp"{
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%f,align 8
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i32*
%l=load i32,i32*%k,align 4
%m=call i8*@sml_alloc(i32 inreg 36)#0
%n=getelementptr inbounds i8,i8*%m,i64 -4
%o=bitcast i8*%n to i32*
store i32 1342177312,i32*%o,align 4
store i8*%m,i8**%g,align 8
%p=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%q=bitcast i8*%m to i8**
store i8*%p,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%m,i64 8
%s=bitcast i8*%r to i32*
store i32%l,i32*%s,align 4
%t=getelementptr inbounds i8,i8*%m,i64 12
%u=bitcast i8*%t to i32*
store i32%b,i32*%u,align 4
%v=getelementptr inbounds i8,i8*%m,i64 16
%w=bitcast i8*%v to i32*
store i32%c,i32*%w,align 4
%x=getelementptr inbounds i8,i8*%m,i64 20
%y=bitcast i8*%x to i32*
store i32%d,i32*%y,align 4
%z=getelementptr inbounds i8,i8*%m,i64 24
%A=bitcast i8*%z to i32*
store i32%e,i32*%A,align 4
%B=getelementptr inbounds i8,i8*%m,i64 32
%C=bitcast i8*%B to i32*
store i32 1,i32*%C,align 4
%D=call i8*@sml_alloc(i32 inreg 28)#0
%E=getelementptr inbounds i8,i8*%D,i64 -4
%F=bitcast i8*%E to i32*
store i32 1342177304,i32*%F,align 4
%G=load i8*,i8**%g,align 8
%H=bitcast i8*%D to i8**
store i8*%G,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%D,i64 8
%J=bitcast i8*%I to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL5foldl_415 to void(...)*),void(...)**%J,align 8
%K=getelementptr inbounds i8,i8*%D,i64 16
%L=bitcast i8*%K to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL5foldl_415 to void(...)*),void(...)**%L,align 8
%M=getelementptr inbounds i8,i8*%D,i64 24
%N=bitcast i8*%M to i32*
store i32 -2147483647,i32*%N,align 4
ret i8*%D
}
define internal fastcc i8*@_SMLL4fold_417(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
m:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
store i8*%a,i8**%h,align 8
%j=bitcast i8**%h to i8***
br label%k
k:
%l=phi i8*[%dC,%dN],[%b,%m]
store i8*%l,i8**%c,align 8
%n=load atomic i32,i32*@sml_check_flag unordered,align 4
%o=icmp eq i32%n,0
br i1%o,label%r,label%p
p:
call void@sml_check(i32 inreg%n)
%q=load i8*,i8**%c,align 8
br label%r
r:
%s=phi i8*[%q,%p],[%l,%k]
%t=load i8*,i8**%h,align 8
%u=getelementptr inbounds i8,i8*%t,i64 12
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=add i32%w,3
%y=sub i32 0,%w
%z=and i32%x,%y
%A=add i32%w,7
%B=add i32%A,%z
%C=and i32%B,-8
%D=add i32%C,15
%E=and i32%D,-8
%F=getelementptr inbounds i8,i8*%t,i64 20
%G=bitcast i8*%F to i32*
%H=load i32,i32*%G,align 4
%I=add i32%H,7
%J=add i32%I,%E
%K=sub i32 0,%H
%L=and i32%J,%K
%M=getelementptr inbounds i8,i8*%t,i64 28
%N=bitcast i8*%M to i32*
%O=load i32,i32*%N,align 4
%P=add i32%O,7
%Q=sub i32 0,%O
%R=and i32%P,%Q
%S=add i32%P,%R
%T=and i32%S,-8
%U=lshr i32%R,3
%V=getelementptr inbounds i8,i8*%t,i64 24
%W=bitcast i8*%V to i32*
%X=load i32,i32*%W,align 4
%Y=shl i32%X,%U
%Z=or i32%Y,1
%aa=or i32%T,4
%ab=add i32%w,-1
%ac=and i32%ab,%y
%ad=add i32%H,-1
%ae=add i32%ad,%w
%af=add i32%ae,%ac
%ag=and i32%af,%K
%ah=add i32%ad,%O
%ai=add i32%ah,%ag
%aj=and i32%ai,%Q
%ak=add i32%P,%aj
%al=and i32%ak,-8
%am=lshr i32%aj,3
%an=lshr i32%ag,3
%ao=sub nsw i32%am,%an
%ap=lshr i32%ac,3
%aq=sub nsw i32%an,%ap
%ar=shl i32%X,%ao
%as=getelementptr inbounds i8,i8*%t,i64 16
%at=bitcast i8*%as to i32*
%au=load i32,i32*%at,align 4
%av=or i32%ar,%au
%aw=shl i32%av,%aq
%ax=getelementptr inbounds i8,i8*%t,i64 8
%ay=bitcast i8*%ax to i32*
%az=load i32,i32*%ay,align 4
%aA=or i32%aw,%az
%aB=or i32%al,4
%aC=bitcast i8*%s to i8**
%aD=load i8*,i8**%aC,align 8
%aE=icmp eq i8*%aD,null
br i1%aE,label%aF,label%aT
aF:
%aG=icmp eq i32%X,0
br i1%aG,label%aM,label%aH
aH:
%aI=sext i32%R to i64
%aJ=getelementptr inbounds i8,i8*%s,i64%aI
%aK=bitcast i8*%aJ to i8**
%aL=load i8*,i8**%aK,align 8
ret i8*%aL
aM:
store i8*null,i8**%h,align 8
%aN=call i8*@sml_alloc(i32 inreg%O)#0
%aO=getelementptr inbounds i8,i8*%aN,i64 -4
%aP=bitcast i8*%aO to i32*
store i32%O,i32*%aP,align 4
%aQ=load i8*,i8**%c,align 8
%aR=sext i32%R to i64
%aS=getelementptr inbounds i8,i8*%aQ,i64%aR
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aN,i8*%aS,i32%O,i1 false)
ret i8*%aN
aT:
store i8*%aD,i8**%g,align 8
%aU=icmp eq i32%az,0
br i1%aU,label%a0,label%aV
aV:
%aW=sext i32%z to i64
%aX=getelementptr inbounds i8,i8*%aD,i64%aW
%aY=bitcast i8*%aX to i8**
%aZ=load i8*,i8**%aY,align 8
br label%bb
a0:
%a1=call i8*@sml_alloc(i32 inreg%w)#0
%a2=getelementptr inbounds i8,i8*%a1,i64 -4
%a3=bitcast i8*%a2 to i32*
store i32%w,i32*%a3,align 4
%a4=load i8*,i8**%g,align 8
%a5=sext i32%z to i64
%a6=getelementptr inbounds i8,i8*%a4,i64%a5
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%a1,i8*%a6,i32%w,i1 false)
%a7=load i8*,i8**%h,align 8
%a8=getelementptr inbounds i8,i8*%a7,i64 16
%a9=bitcast i8*%a8 to i32*
%ba=load i32,i32*%a9,align 4
br label%bb
bb:
%bc=phi i8*[%a7,%a0],[%t,%aV]
%bd=phi i32[%ba,%a0],[%au,%aV]
%be=phi i8*[%a4,%a0],[%aD,%aV]
%bf=phi i8*[%a1,%a0],[%aZ,%aV]
store i8*%bf,i8**%d,align 8
%bg=sext i32%C to i64
%bh=getelementptr inbounds i8,i8*%be,i64%bg
%bi=bitcast i8*%bh to i8**
%bj=load i8*,i8**%bi,align 8
store i8*%bj,i8**%e,align 8
%bk=sext i32%E to i64
%bl=getelementptr inbounds i8,i8*%be,i64%bk
%bm=bitcast i8*%bl to i8**
%bn=load i8*,i8**%bm,align 8
store i8*%bn,i8**%f,align 8
%bo=icmp eq i32%bd,0
br i1%bo,label%bu,label%bp
bp:
store i8*null,i8**%g,align 8
%bq=sext i32%L to i64
%br=getelementptr inbounds i8,i8*%be,i64%bq
%bs=bitcast i8*%br to i8**
%bt=load i8*,i8**%bs,align 8
br label%bF
bu:
%bv=getelementptr inbounds i8,i8*%bc,i64 20
%bw=bitcast i8*%bv to i32*
%bx=load i32,i32*%bw,align 4
%by=call i8*@sml_alloc(i32 inreg%bx)#0
%bz=getelementptr inbounds i8,i8*%by,i64 -4
%bA=bitcast i8*%bz to i32*
store i32%bx,i32*%bA,align 4
%bB=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%bC=sext i32%L to i64
%bD=getelementptr inbounds i8,i8*%bB,i64%bC
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%by,i8*%bD,i32%bx,i1 false)
%bE=load i8*,i8**%h,align 8
br label%bF
bF:
%bG=phi i8*[%bE,%bu],[%bc,%bp]
%bH=phi i8*[%by,%bu],[%bt,%bp]
store i8*%bH,i8**%g,align 8
%bI=getelementptr inbounds i8,i8*%bG,i64 24
%bJ=bitcast i8*%bI to i32*
%bK=load i32,i32*%bJ,align 4
%bL=icmp eq i32%bK,0
br i1%bL,label%bT,label%bM
bM:
%bN=bitcast i8*%bG to i8**
%bO=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bP=sext i32%R to i64
%bQ=getelementptr inbounds i8,i8*%bO,i64%bP
%bR=bitcast i8*%bQ to i8**
%bS=load i8*,i8**%bR,align 8
br label%b8
bT:
%bU=getelementptr inbounds i8,i8*%bG,i64 28
%bV=bitcast i8*%bU to i32*
%bW=load i32,i32*%bV,align 4
%bX=call i8*@sml_alloc(i32 inreg%bW)#0
%bY=getelementptr inbounds i8,i8*%bX,i64 -4
%bZ=bitcast i8*%bY to i32*
store i32%bW,i32*%bZ,align 4
%b0=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%b1=sext i32%R to i64
%b2=getelementptr inbounds i8,i8*%b0,i64%b1
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bX,i8*%b2,i32%bW,i1 false)
%b3=load i8**,i8***%j,align 8
%b4=bitcast i8**%b3 to i8*
%b5=getelementptr inbounds i8*,i8**%b3,i64 3
%b6=bitcast i8**%b5 to i32*
%b7=load i32,i32*%b6,align 4
br label%b8
b8:
%b9=phi i64[%b1,%bT],[%bP,%bM]
%ca=phi i32[%b7,%bT],[%bK,%bM]
%cb=phi i8*[%b4,%bT],[%bG,%bM]
%cc=phi i8**[%b3,%bT],[%bN,%bM]
%cd=phi i8*[%bX,%bT],[%bS,%bM]
store i8*%cd,i8**%c,align 8
%ce=load i8*,i8**%cc,align 8
%cf=getelementptr inbounds i8,i8*%ce,i64 16
%cg=bitcast i8*%cf to i8*(i8*,i8*)**
%ch=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%cg,align 8
%ci=bitcast i8*%ce to i8**
%cj=load i8*,i8**%ci,align 8
store i8*%cj,i8**%i,align 8
%ck=getelementptr inbounds i8,i8*%cb,i64 28
%cl=bitcast i8*%ck to i32*
%cm=load i32,i32*%cl,align 4
%cn=call i8*@sml_alloc(i32 inreg%aa)#0
%co=or i32%T,1342177280
%cp=getelementptr inbounds i8,i8*%cn,i64 -4
%cq=bitcast i8*%cp to i32*
store i32%co,i32*%cq,align 4
call void@llvm.memset.p0i8.i32(i8*%cn,i8 0,i32%aa,i1 false)
%cr=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%cs=bitcast i8*%cn to i8**
store i8*%cr,i8**%cs,align 8
%ct=icmp eq i32%ca,0
%cu=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cv=getelementptr inbounds i8,i8*%cn,i64%b9
br i1%ct,label%cy,label%cw
cw:
%cx=bitcast i8*%cv to i8**
store i8*%cu,i8**%cx,align 8
br label%cz
cy:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cv,i8*%cu,i32%cm,i1 false)
br label%cz
cz:
%cA=sext i32%T to i64
%cB=getelementptr inbounds i8,i8*%cn,i64%cA
%cC=bitcast i8*%cB to i32*
store i32%Z,i32*%cC,align 4
%cD=load i8*,i8**%h,align 8
%cE=call fastcc i8*@_SMLL4fold_417(i8*inreg%cD,i8*inreg%cn)
store i8*%cE,i8**%c,align 8
%cF=load i8*,i8**%h,align 8
%cG=getelementptr inbounds i8,i8*%cF,i64 12
%cH=bitcast i8*%cG to i32*
%cI=load i32,i32*%cH,align 4
%cJ=getelementptr inbounds i8,i8*%cF,i64 8
%cK=bitcast i8*%cJ to i32*
%cL=load i32,i32*%cK,align 4
%cM=getelementptr inbounds i8,i8*%cF,i64 20
%cN=bitcast i8*%cM to i32*
%cO=load i32,i32*%cN,align 4
%cP=getelementptr inbounds i8,i8*%cF,i64 16
%cQ=bitcast i8*%cP to i32*
%cR=load i32,i32*%cQ,align 4
%cS=getelementptr inbounds i8,i8*%cF,i64 28
%cT=bitcast i8*%cS to i32*
%cU=load i32,i32*%cT,align 4
%cV=getelementptr inbounds i8,i8*%cF,i64 24
%cW=bitcast i8*%cV to i32*
%cX=load i32,i32*%cW,align 4
%cY=call i8*@sml_alloc(i32 inreg%aB)#0
%cZ=or i32%al,1342177280
%c0=getelementptr inbounds i8,i8*%cY,i64 -4
%c1=bitcast i8*%c0 to i32*
store i32%cZ,i32*%c1,align 4
call void@llvm.memset.p0i8.i32(i8*%cY,i8 0,i32%aB,i1 false)
%c2=icmp eq i32%cL,0
%c3=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%c4=sext i32%ac to i64
%c5=getelementptr inbounds i8,i8*%cY,i64%c4
br i1%c2,label%c8,label%c6
c6:
%c7=bitcast i8*%c5 to i8**
store i8*%c3,i8**%c7,align 8
br label%c9
c8:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%c5,i8*%c3,i32%cI,i1 false)
br label%c9
c9:
%da=icmp eq i32%cR,0
%db=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%dc=sext i32%ag to i64
%dd=getelementptr inbounds i8,i8*%cY,i64%dc
br i1%da,label%dg,label%de
de:
%df=bitcast i8*%dd to i8**
store i8*%db,i8**%df,align 8
br label%dh
dg:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dd,i8*%db,i32%cO,i1 false)
br label%dh
dh:
%di=icmp eq i32%cX,0
%dj=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%dk=sext i32%aj to i64
%dl=getelementptr inbounds i8,i8*%cY,i64%dk
br i1%di,label%do,label%dm
dm:
%dn=bitcast i8*%dl to i8**
store i8*%dj,i8**%dn,align 8
br label%dp
do:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dl,i8*%dj,i32%cU,i1 false)
br label%dp
dp:
%dq=sext i32%al to i64
%dr=getelementptr inbounds i8,i8*%cY,i64%dq
%ds=bitcast i8*%dr to i32*
store i32%aA,i32*%ds,align 4
%dt=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%du=call fastcc i8*%ch(i8*inreg%dt,i8*inreg%cY)
store i8*%du,i8**%c,align 8
%dv=load i8*,i8**%h,align 8
%dw=getelementptr inbounds i8,i8*%dv,i64 28
%dx=bitcast i8*%dw to i32*
%dy=load i32,i32*%dx,align 4
%dz=getelementptr inbounds i8,i8*%dv,i64 24
%dA=bitcast i8*%dz to i32*
%dB=load i32,i32*%dA,align 4
%dC=call i8*@sml_alloc(i32 inreg%aa)#0
%dD=getelementptr inbounds i8,i8*%dC,i64 -4
%dE=bitcast i8*%dD to i32*
store i32%co,i32*%dE,align 4
call void@llvm.memset.p0i8.i32(i8*%dC,i8 0,i32%aa,i1 false)
%dF=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%dG=bitcast i8*%dC to i8**
store i8*%dF,i8**%dG,align 8
%dH=icmp eq i32%dB,0
%dI=load i8*,i8**%c,align 8
%dJ=getelementptr inbounds i8,i8*%dC,i64%b9
br i1%dH,label%dM,label%dK
dK:
%dL=bitcast i8*%dJ to i8**
store i8*%dI,i8**%dL,align 8
br label%dN
dM:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dJ,i8*%dI,i32%dy,i1 false)
br label%dN
dN:
%dO=getelementptr inbounds i8,i8*%dC,i64%cA
%dP=bitcast i8*%dO to i32*
store i32%Z,i32*%dP,align 4
br label%k
}
define internal fastcc i8*@_SMLL6foldri_418(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
m:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%k,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%d,align 8
br label%k
k:
%l=phi i8*[%j,%i],[%a,%m]
%n=getelementptr inbounds i8,i8*%l,i64 36
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=add i32%p,7
%r=sub i32 0,%p
%s=and i32%q,%r
%t=add i32%q,%s
%u=and i32%t,-8
%v=lshr i32%s,3
%w=getelementptr inbounds i8,i8*%l,i64 32
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=shl i32%y,%v
%A=or i32%z,1
%B=or i32%u,4
%C=bitcast i8*%l to i8**
%D=load i8*,i8**%C,align 8
store i8*%D,i8**%e,align 8
%E=getelementptr inbounds i8,i8*%l,i64 16
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
%H=getelementptr inbounds i8,i8*%l,i64 20
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
%K=getelementptr inbounds i8,i8*%l,i64 24
%L=bitcast i8*%K to i32*
%M=load i32,i32*%L,align 4
%N=getelementptr inbounds i8,i8*%l,i64 28
%O=bitcast i8*%N to i32*
%P=load i32,i32*%O,align 4
%Q=call i8*@sml_alloc(i32 inreg 36)#0
%R=getelementptr inbounds i8,i8*%Q,i64 -4
%S=bitcast i8*%R to i32*
store i32 1342177312,i32*%S,align 4
store i8*%Q,i8**%f,align 8
%T=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%U=bitcast i8*%Q to i8**
store i8*%T,i8**%U,align 8
%V=getelementptr inbounds i8,i8*%Q,i64 8
%W=bitcast i8*%V to i32*
store i32%G,i32*%W,align 4
%X=getelementptr inbounds i8,i8*%Q,i64 12
%Y=bitcast i8*%X to i32*
store i32%J,i32*%Y,align 4
%Z=getelementptr inbounds i8,i8*%Q,i64 16
%aa=bitcast i8*%Z to i32*
store i32%M,i32*%aa,align 4
%ab=getelementptr inbounds i8,i8*%Q,i64 20
%ac=bitcast i8*%ab to i32*
store i32%P,i32*%ac,align 4
%ad=getelementptr inbounds i8,i8*%Q,i64 24
%ae=bitcast i8*%ad to i32*
store i32%y,i32*%ae,align 4
%af=getelementptr inbounds i8,i8*%Q,i64 28
%ag=bitcast i8*%af to i32*
store i32%p,i32*%ag,align 4
%ah=getelementptr inbounds i8,i8*%Q,i64 32
%ai=bitcast i8*%ah to i32*
store i32 1,i32*%ai,align 4
%aj=call i8*@sml_alloc(i32 inreg 28)#0
%ak=getelementptr inbounds i8,i8*%aj,i64 -4
%al=bitcast i8*%ak to i32*
store i32 1342177304,i32*%al,align 4
%am=load i8*,i8**%f,align 8
%an=bitcast i8*%aj to i8**
store i8*%am,i8**%an,align 8
%ao=getelementptr inbounds i8,i8*%aj,i64 8
%ap=bitcast i8*%ao to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL4fold_417 to void(...)*),void(...)**%ap,align 8
%aq=getelementptr inbounds i8,i8*%aj,i64 16
%ar=bitcast i8*%aq to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL4fold_417 to void(...)*),void(...)**%ar,align 8
%as=getelementptr inbounds i8,i8*%aj,i64 24
%at=bitcast i8*%as to i32*
store i32 1,i32*%at,align 4
%au=load i8*,i8**%d,align 8
%av=getelementptr inbounds i8,i8*%au,i64 32
%aw=bitcast i8*%av to i32*
%ax=load i32,i32*%aw,align 4
%ay=icmp eq i32%ax,0
br i1%ay,label%aD,label%az
az:
%aA=getelementptr inbounds i8,i8*%au,i64 8
%aB=bitcast i8*%aA to i8**
%aC=load i8*,i8**%aB,align 8
br label%aP
aD:
%aE=getelementptr inbounds i8,i8*%au,i64 36
%aF=bitcast i8*%aE to i32*
%aG=load i32,i32*%aF,align 4
%aH=call i8*@sml_alloc(i32 inreg%aG)#0
%aI=getelementptr inbounds i8,i8*%aH,i64 -4
%aJ=bitcast i8*%aI to i32*
store i32%aG,i32*%aJ,align 4
%aK=load i8*,i8**%d,align 8
%aL=getelementptr inbounds i8,i8*%aK,i64 8
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aH,i8*%aL,i32%aG,i1 false)
%aM=getelementptr inbounds i8,i8*%aK,i64 32
%aN=bitcast i8*%aM to i32*
%aO=load i32,i32*%aN,align 4
br label%aP
aP:
%aQ=phi i32[%aO,%aD],[%ax,%az]
%aR=phi i8*[%aK,%aD],[%au,%az]
%aS=phi i8*[%aH,%aD],[%aC,%az]
store i8*%aS,i8**%e,align 8
%aT=getelementptr inbounds i8,i8*%aR,i64 36
%aU=bitcast i8*%aT to i32*
%aV=load i32,i32*%aU,align 4
store i8*null,i8**%d,align 8
%aW=call i8*@sml_alloc(i32 inreg%B)#0
%aX=or i32%u,1342177280
%aY=getelementptr inbounds i8,i8*%aW,i64 -4
%aZ=bitcast i8*%aY to i32*
store i32%aX,i32*%aZ,align 4
call void@llvm.memset.p0i8.i32(i8*%aW,i8 0,i32%B,i1 false)
%a0=load i8*,i8**%c,align 8
%a1=bitcast i8*%aW to i8**
store i8*%a0,i8**%a1,align 8
%a2=icmp eq i32%aQ,0
%a3=load i8*,i8**%e,align 8
%a4=sext i32%s to i64
%a5=getelementptr inbounds i8,i8*%aW,i64%a4
br i1%a2,label%a8,label%a6
a6:
%a7=bitcast i8*%a5 to i8**
store i8*%a3,i8**%a7,align 8
br label%a9
a8:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%a5,i8*%a3,i32%aV,i1 false)
br label%a9
a9:
%ba=sext i32%u to i64
%bb=getelementptr inbounds i8,i8*%aW,i64%ba
%bc=bitcast i8*%bb to i32*
store i32%A,i32*%bc,align 4
%bd=load i8*,i8**%f,align 8
%be=tail call fastcc i8*@_SMLL4fold_417(i8*inreg%bd,i8*inreg%aW)
ret i8*%be
}
define internal fastcc i8*@_SMLL6foldri_419(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%b,i8**%c,align 8
%f=getelementptr inbounds i8,i8*%a,i64 24
%g=bitcast i8*%f to i32*
%h=load i32,i32*%g,align 4
%i=shl i32%h,1
%j=or i32%i,1
%k=bitcast i8*%a to i8**
%l=load i8*,i8**%k,align 8
store i8*%l,i8**%d,align 8
%m=getelementptr inbounds i8,i8*%a,i64 28
%n=bitcast i8*%m to i32*
%o=load i32,i32*%n,align 4
%p=getelementptr inbounds i8,i8*%a,i64 8
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=getelementptr inbounds i8,i8*%a,i64 12
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=getelementptr inbounds i8,i8*%a,i64 16
%w=bitcast i8*%v to i32*
%x=load i32,i32*%w,align 4
%y=getelementptr inbounds i8,i8*%a,i64 20
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=call i8*@sml_alloc(i32 inreg 44)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177320,i32*%D,align 4
store i8*%B,i8**%e,align 8
%E=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%F=bitcast i8*%B to i8**
store i8*%E,i8**%F,align 8
%G=icmp eq i32%h,0
%H=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%I=getelementptr inbounds i8,i8*%B,i64 8
br i1%G,label%L,label%J
J:
%K=bitcast i8*%I to i8**
store i8*%H,i8**%K,align 8
br label%M
L:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%I,i8*%H,i32%o,i1 false)
br label%M
M:
%N=getelementptr inbounds i8,i8*%B,i64 16
%O=bitcast i8*%N to i32*
store i32%r,i32*%O,align 4
%P=getelementptr inbounds i8,i8*%B,i64 20
%Q=bitcast i8*%P to i32*
store i32%u,i32*%Q,align 4
%R=getelementptr inbounds i8,i8*%B,i64 24
%S=bitcast i8*%R to i32*
store i32%x,i32*%S,align 4
%T=getelementptr inbounds i8,i8*%B,i64 28
%U=bitcast i8*%T to i32*
store i32%A,i32*%U,align 4
%V=getelementptr inbounds i8,i8*%B,i64 32
%W=bitcast i8*%V to i32*
store i32%h,i32*%W,align 4
%X=getelementptr inbounds i8,i8*%B,i64 36
%Y=bitcast i8*%X to i32*
store i32%o,i32*%Y,align 4
%Z=getelementptr inbounds i8,i8*%B,i64 40
%aa=bitcast i8*%Z to i32*
store i32%j,i32*%aa,align 4
%ab=call i8*@sml_alloc(i32 inreg 28)#0
%ac=getelementptr inbounds i8,i8*%ab,i64 -4
%ad=bitcast i8*%ac to i32*
store i32 1342177304,i32*%ad,align 4
%ae=load i8*,i8**%e,align 8
%af=bitcast i8*%ab to i8**
store i8*%ae,i8**%af,align 8
%ag=getelementptr inbounds i8,i8*%ab,i64 8
%ah=bitcast i8*%ag to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6foldri_418 to void(...)*),void(...)**%ah,align 8
%ai=getelementptr inbounds i8,i8*%ab,i64 16
%aj=bitcast i8*%ai to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6foldri_418 to void(...)*),void(...)**%aj,align 8
%ak=getelementptr inbounds i8,i8*%ab,i64 24
%al=bitcast i8*%ak to i32*
store i32 1,i32*%al,align 4
ret i8*%ab
}
define internal fastcc i8*@_SMLL6foldri_420(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i32*
%l=load i32,i32*%k,align 4
%m=getelementptr inbounds i8,i8*%a,i64 12
%n=bitcast i8*%m to i32*
%o=load i32,i32*%n,align 4
%p=getelementptr inbounds i8,i8*%a,i64 16
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=getelementptr inbounds i8,i8*%a,i64 20
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=call i8*@sml_alloc(i32 inreg 36)#0
%w=getelementptr inbounds i8,i8*%v,i64 -4
%x=bitcast i8*%w to i32*
store i32 1342177312,i32*%x,align 4
store i8*%v,i8**%d,align 8
%y=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%z=bitcast i8*%v to i8**
store i8*%y,i8**%z,align 8
%A=getelementptr inbounds i8,i8*%v,i64 8
%B=bitcast i8*%A to i32*
store i32%f,i32*%B,align 4
%C=getelementptr inbounds i8,i8*%v,i64 12
%D=bitcast i8*%C to i32*
store i32%i,i32*%D,align 4
%E=getelementptr inbounds i8,i8*%v,i64 16
%F=bitcast i8*%E to i32*
store i32%l,i32*%F,align 4
%G=getelementptr inbounds i8,i8*%v,i64 20
%H=bitcast i8*%G to i32*
store i32%o,i32*%H,align 4
%I=getelementptr inbounds i8,i8*%v,i64 24
%J=bitcast i8*%I to i32*
store i32%r,i32*%J,align 4
%K=getelementptr inbounds i8,i8*%v,i64 28
%L=bitcast i8*%K to i32*
store i32%u,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%v,i64 32
%N=bitcast i8*%M to i32*
store i32 1,i32*%N,align 4
%O=call i8*@sml_alloc(i32 inreg 28)#0
%P=getelementptr inbounds i8,i8*%O,i64 -4
%Q=bitcast i8*%P to i32*
store i32 1342177304,i32*%Q,align 4
%R=load i8*,i8**%d,align 8
%S=bitcast i8*%O to i8**
store i8*%R,i8**%S,align 8
%T=getelementptr inbounds i8,i8*%O,i64 8
%U=bitcast i8*%T to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6foldri_419 to void(...)*),void(...)**%U,align 8
%V=getelementptr inbounds i8,i8*%O,i64 16
%W=bitcast i8*%V to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6foldri_419 to void(...)*),void(...)**%W,align 8
%X=getelementptr inbounds i8,i8*%O,i64 24
%Y=bitcast i8*%X to i32*
store i32 1,i32*%Y,align 4
ret i8*%O
}
define internal fastcc i8*@_SMLL6foldri_421(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e)#4 gc"smlsharp"{
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%f,i8*null)#0
%g=bitcast i8*%a to i32*
%h=load i32,i32*%g,align 4
%i=getelementptr inbounds i8,i8*%a,i64 4
%j=bitcast i8*%i to i32*
%k=load i32,i32*%j,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=bitcast i8*%l to i32*
%n=getelementptr inbounds i8,i8*%l,i64 -4
%o=bitcast i8*%n to i32*
store i32 1342177304,i32*%o,align 4
store i8*%l,i8**%f,align 8
store i32%h,i32*%m,align 4
%p=getelementptr inbounds i8,i8*%l,i64 4
%q=bitcast i8*%p to i32*
store i32%k,i32*%q,align 4
%r=getelementptr inbounds i8,i8*%l,i64 8
%s=bitcast i8*%r to i32*
store i32%b,i32*%s,align 4
%t=getelementptr inbounds i8,i8*%l,i64 12
%u=bitcast i8*%t to i32*
store i32%c,i32*%u,align 4
%v=getelementptr inbounds i8,i8*%l,i64 16
%w=bitcast i8*%v to i32*
store i32%d,i32*%w,align 4
%x=getelementptr inbounds i8,i8*%l,i64 20
%y=bitcast i8*%x to i32*
store i32%e,i32*%y,align 4
%z=getelementptr inbounds i8,i8*%l,i64 24
%A=bitcast i8*%z to i32*
store i32 0,i32*%A,align 4
%B=call i8*@sml_alloc(i32 inreg 28)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177304,i32*%D,align 4
%E=load i8*,i8**%f,align 8
%F=bitcast i8*%B to i8**
store i8*%E,i8**%F,align 8
%G=getelementptr inbounds i8,i8*%B,i64 8
%H=bitcast i8*%G to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6foldri_420 to void(...)*),void(...)**%H,align 8
%I=getelementptr inbounds i8,i8*%B,i64 16
%J=bitcast i8*%I to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6foldri_420 to void(...)*),void(...)**%J,align 8
%K=getelementptr inbounds i8,i8*%B,i64 24
%L=bitcast i8*%K to i32*
store i32 -2147483647,i32*%L,align 4
ret i8*%B
}
define internal fastcc i8*@_SMLL5foldr_422(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
m:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%k,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%e,align 8
br label%k
k:
%l=phi i8*[%j,%i],[%a,%m]
%n=getelementptr inbounds i8,i8*%l,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=add i32%p,-1
%r=sub i32 0,%p
%s=and i32%q,%r
%t=getelementptr inbounds i8,i8*%l,i64 16
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=add i32%v,-1
%x=add i32%w,%p
%y=add i32%x,%s
%z=sub i32 0,%v
%A=and i32%y,%z
%B=getelementptr inbounds i8,i8*%l,i64 24
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=add i32%w,%D
%F=add i32%E,%A
%G=sub i32 0,%D
%H=and i32%F,%G
%I=and i32%w,%z
%J=add i32%E,%I
%K=and i32%J,%G
%L=add i32%D,7
%M=add i32%L,%K
%N=and i32%M,-8
%O=lshr i32%K,3
%P=lshr i32%I,3
%Q=sub nsw i32%O,%P
%R=getelementptr inbounds i8,i8*%l,i64 20
%S=bitcast i8*%R to i32*
%T=load i32,i32*%S,align 4
%U=shl i32%T,%Q
%V=getelementptr inbounds i8,i8*%l,i64 12
%W=bitcast i8*%V to i32*
%X=load i32,i32*%W,align 4
%Y=or i32%U,%X
%Z=or i32%N,4
%aa=icmp eq i32%X,0
br i1%aa,label%ah,label%ab
ab:
%ac=load i8*,i8**%c,align 8
%ad=sext i32%A to i64
%ae=getelementptr inbounds i8,i8*%ac,i64%ad
%af=bitcast i8*%ae to i8**
%ag=load i8*,i8**%af,align 8
br label%as
ah:
%ai=call i8*@sml_alloc(i32 inreg%v)#0
%aj=getelementptr inbounds i8,i8*%ai,i64 -4
%ak=bitcast i8*%aj to i32*
store i32%v,i32*%ak,align 4
%al=load i8*,i8**%c,align 8
%am=sext i32%A to i64
%an=getelementptr inbounds i8,i8*%al,i64%am
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ai,i8*%an,i32%v,i1 false)
%ao=load i8*,i8**%e,align 8
%ap=getelementptr inbounds i8,i8*%ao,i64 20
%aq=bitcast i8*%ap to i32*
%ar=load i32,i32*%aq,align 4
br label%as
as:
%at=phi i8*[%ao,%ah],[%l,%ab]
%au=phi i8*[%al,%ah],[%ac,%ab]
%av=phi i32[%ar,%ah],[%T,%ab]
%aw=phi i8*[%ai,%ah],[%ag,%ab]
store i8*%aw,i8**%d,align 8
%ax=icmp eq i32%av,0
br i1%ax,label%aE,label%ay
ay:
%az=bitcast i8*%at to i8**
store i8*null,i8**%c,align 8
%aA=sext i32%H to i64
%aB=getelementptr inbounds i8,i8*%au,i64%aA
%aC=bitcast i8*%aB to i8**
%aD=load i8*,i8**%aC,align 8
br label%aU
aE:
%aF=getelementptr inbounds i8,i8*%at,i64 24
%aG=bitcast i8*%aF to i32*
%aH=load i32,i32*%aG,align 4
%aI=call i8*@sml_alloc(i32 inreg%aH)#0
%aJ=getelementptr inbounds i8,i8*%aI,i64 -4
%aK=bitcast i8*%aJ to i32*
store i32%aH,i32*%aK,align 4
%aL=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aM=sext i32%H to i64
%aN=getelementptr inbounds i8,i8*%aL,i64%aM
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aI,i8*%aN,i32%aH,i1 false)
%aO=bitcast i8**%e to i8***
%aP=load i8**,i8***%aO,align 8
%aQ=bitcast i8**%aP to i8*
%aR=getelementptr inbounds i8,i8*%aQ,i64 20
%aS=bitcast i8*%aR to i32*
%aT=load i32,i32*%aS,align 4
br label%aU
aU:
%aV=phi i32[%aT,%aE],[%av,%ay]
%aW=phi i8*[%aQ,%aE],[%at,%ay]
%aX=phi i8**[%aP,%aE],[%az,%ay]
%aY=phi i8*[%aI,%aE],[%aD,%ay]
store i8*%aY,i8**%c,align 8
%aZ=load i8*,i8**%aX,align 8
%a0=getelementptr inbounds i8,i8*%aZ,i64 16
%a1=bitcast i8*%a0 to i8*(i8*,i8*)**
%a2=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a1,align 8
%a3=bitcast i8*%aZ to i8**
%a4=load i8*,i8**%a3,align 8
store i8*%a4,i8**%f,align 8
%a5=getelementptr inbounds i8,i8*%aW,i64 16
%a6=bitcast i8*%a5 to i32*
%a7=load i32,i32*%a6,align 4
%a8=getelementptr inbounds i8,i8*%aW,i64 12
%a9=bitcast i8*%a8 to i32*
%ba=load i32,i32*%a9,align 4
%bb=getelementptr inbounds i8,i8*%aW,i64 24
%bc=bitcast i8*%bb to i32*
%bd=load i32,i32*%bc,align 4
store i8*null,i8**%e,align 8
%be=call i8*@sml_alloc(i32 inreg%Z)#0
%bf=or i32%N,1342177280
%bg=getelementptr inbounds i8,i8*%be,i64 -4
%bh=bitcast i8*%bg to i32*
store i32%bf,i32*%bh,align 4
call void@llvm.memset.p0i8.i32(i8*%be,i8 0,i32%Z,i1 false)
%bi=icmp eq i32%ba,0
%bj=load i8*,i8**%d,align 8
%bk=sext i32%I to i64
%bl=getelementptr inbounds i8,i8*%be,i64%bk
br i1%bi,label%bo,label%bm
bm:
%bn=bitcast i8*%bl to i8**
store i8*%bj,i8**%bn,align 8
br label%bp
bo:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bl,i8*%bj,i32%a7,i1 false)
br label%bp
bp:
%bq=icmp eq i32%aV,0
%br=load i8*,i8**%c,align 8
%bs=sext i32%K to i64
%bt=getelementptr inbounds i8,i8*%be,i64%bs
br i1%bq,label%bw,label%bu
bu:
%bv=bitcast i8*%bt to i8**
store i8*%br,i8**%bv,align 8
br label%bx
bw:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bt,i8*%br,i32%bd,i1 false)
br label%bx
bx:
%by=sext i32%N to i64
%bz=getelementptr inbounds i8,i8*%be,i64%by
%bA=bitcast i8*%bz to i32*
store i32%Y,i32*%bA,align 4
%bB=load i8*,i8**%f,align 8
%bC=tail call fastcc i8*%a2(i8*inreg%bB,i8*inreg%be)
ret i8*%bC
}
define internal fastcc i8*@_SMLL5foldr_423(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
n:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%l,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%d,align 8
br label%l
l:
%m=phi i8*[%k,%j],[%a,%n]
%o=getelementptr inbounds i8,i8*%m,i64 16
%p=bitcast i8*%o to i8**
%q=load i8*,i8**%p,align 8
%r=getelementptr inbounds i8,i8*%m,i64 28
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=getelementptr inbounds i8,i8*%m,i64 32
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=getelementptr inbounds i8,i8*%m,i64 36
%y=bitcast i8*%x to i32*
%z=load i32,i32*%y,align 4
%A=getelementptr inbounds i8,i8*%m,i64 40
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=call fastcc i8*@_SMLL6foldri_421(i8*inreg%q,i32 inreg%t,i32 inreg%w,i32 inreg%z,i32 inreg%C)
%E=getelementptr inbounds i8,i8*%D,i64 16
%F=bitcast i8*%E to i8*(i8*,i8*)**
%G=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%F,align 8
%H=bitcast i8*%D to i8**
%I=load i8*,i8**%H,align 8
store i8*%I,i8**%f,align 8
%J=bitcast i8**%d to i8***
%K=load i8**,i8***%J,align 8
%L=load i8*,i8**%K,align 8
store i8*%L,i8**%e,align 8
%M=bitcast i8**%K to i8*
%N=getelementptr inbounds i8*,i8**%K,i64 3
%O=bitcast i8**%N to i32*
%P=load i32,i32*%O,align 4
%Q=getelementptr inbounds i8,i8*%M,i64 28
%R=bitcast i8*%Q to i32*
%S=load i32,i32*%R,align 4
%T=getelementptr inbounds i8*,i8**%K,i64 4
%U=bitcast i8**%T to i32*
%V=load i32,i32*%U,align 4
%W=getelementptr inbounds i8,i8*%M,i64 36
%X=bitcast i8*%W to i32*
%Y=load i32,i32*%X,align 4
%Z=getelementptr inbounds i8*,i8**%K,i64 5
%aa=bitcast i8**%Z to i32*
%ab=load i32,i32*%aa,align 4
%ac=call i8*@sml_alloc(i32 inreg 36)#0
%ad=getelementptr inbounds i8,i8*%ac,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 1342177312,i32*%ae,align 4
store i8*%ac,i8**%g,align 8
%af=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%ag=bitcast i8*%ac to i8**
store i8*%af,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%ac,i64 8
%ai=bitcast i8*%ah to i32*
store i32%P,i32*%ai,align 4
%aj=getelementptr inbounds i8,i8*%ac,i64 12
%ak=bitcast i8*%aj to i32*
store i32%S,i32*%ak,align 4
%al=getelementptr inbounds i8,i8*%ac,i64 16
%am=bitcast i8*%al to i32*
store i32%V,i32*%am,align 4
%an=getelementptr inbounds i8,i8*%ac,i64 20
%ao=bitcast i8*%an to i32*
store i32%Y,i32*%ao,align 4
%ap=getelementptr inbounds i8,i8*%ac,i64 24
%aq=bitcast i8*%ap to i32*
store i32%ab,i32*%aq,align 4
%ar=getelementptr inbounds i8,i8*%ac,i64 32
%as=bitcast i8*%ar to i32*
store i32 1,i32*%as,align 4
%at=call i8*@sml_alloc(i32 inreg 28)#0
%au=getelementptr inbounds i8,i8*%at,i64 -4
%av=bitcast i8*%au to i32*
store i32 1342177304,i32*%av,align 4
%aw=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%ax=bitcast i8*%at to i8**
store i8*%aw,i8**%ax,align 8
%ay=getelementptr inbounds i8,i8*%at,i64 8
%az=bitcast i8*%ay to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL5foldr_422 to void(...)*),void(...)**%az,align 8
%aA=getelementptr inbounds i8,i8*%at,i64 16
%aB=bitcast i8*%aA to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL5foldr_422 to void(...)*),void(...)**%aB,align 8
%aC=getelementptr inbounds i8,i8*%at,i64 24
%aD=bitcast i8*%aC to i32*
store i32 1,i32*%aD,align 4
%aE=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%aF=call fastcc i8*%G(i8*inreg%aE,i8*inreg%at)
%aG=getelementptr inbounds i8,i8*%aF,i64 16
%aH=bitcast i8*%aG to i8*(i8*,i8*)**
%aI=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aH,align 8
%aJ=bitcast i8*%aF to i8**
%aK=load i8*,i8**%aJ,align 8
store i8*%aK,i8**%e,align 8
%aL=load i8*,i8**%d,align 8
%aM=getelementptr inbounds i8,i8*%aL,i64 36
%aN=bitcast i8*%aM to i32*
%aO=load i32,i32*%aN,align 4
%aP=icmp eq i32%aO,0
br i1%aP,label%aU,label%aQ
aQ:
store i8*null,i8**%d,align 8
%aR=getelementptr inbounds i8,i8*%aL,i64 8
%aS=bitcast i8*%aR to i8**
%aT=load i8*,i8**%aS,align 8
br label%a4
aU:
%aV=getelementptr inbounds i8,i8*%aL,i64 40
%aW=bitcast i8*%aV to i32*
%aX=load i32,i32*%aW,align 4
%aY=call i8*@sml_alloc(i32 inreg%aX)#0
%aZ=getelementptr inbounds i8,i8*%aY,i64 -4
%a0=bitcast i8*%aZ to i32*
store i32%aX,i32*%a0,align 4
%a1=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%a2=getelementptr inbounds i8,i8*%a1,i64 8
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aY,i8*%a2,i32%aX,i1 false)
%a3=load i8*,i8**%e,align 8
br label%a4
a4:
%a5=phi i8*[%aK,%aQ],[%a3,%aU]
%a6=phi i8*[%aT,%aQ],[%aY,%aU]
store i8*null,i8**%e,align 8
%a7=call fastcc i8*%aI(i8*inreg%a5,i8*inreg%a6)
%a8=getelementptr inbounds i8,i8*%a7,i64 16
%a9=bitcast i8*%a8 to i8*(i8*,i8*)**
%ba=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a9,align 8
%bb=bitcast i8*%a7 to i8**
%bc=load i8*,i8**%bb,align 8
%bd=load i8*,i8**%c,align 8
%be=tail call fastcc i8*%ba(i8*inreg%bc,i8*inreg%bd)
ret i8*%be
}
define internal fastcc i8*@_SMLL5foldr_424(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=getelementptr inbounds i8,i8*%a,i64 28
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=shl i32%i,1
%k=or i32%j,5
%l=bitcast i8*%a to i8**
%m=load i8*,i8**%l,align 8
store i8*%m,i8**%d,align 8
%n=getelementptr inbounds i8,i8*%a,i64 32
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%a,i64 8
%r=bitcast i8*%q to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%e,align 8
%t=getelementptr inbounds i8,i8*%a,i64 16
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=getelementptr inbounds i8,i8*%a,i64 20
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=getelementptr inbounds i8,i8*%a,i64 24
%A=bitcast i8*%z to i32*
%B=load i32,i32*%A,align 4
%C=call i8*@sml_alloc(i32 inreg 52)#0
%D=getelementptr inbounds i8,i8*%C,i64 -4
%E=bitcast i8*%D to i32*
store i32 1342177328,i32*%E,align 4
store i8*%C,i8**%f,align 8
%F=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%G=bitcast i8*%C to i8**
store i8*%F,i8**%G,align 8
%H=icmp eq i32%i,0
%I=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%J=getelementptr inbounds i8,i8*%C,i64 8
br i1%H,label%M,label%K
K:
%L=bitcast i8*%J to i8**
store i8*%I,i8**%L,align 8
br label%N
M:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%J,i8*%I,i32%p,i1 false)
br label%N
N:
%O=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%P=getelementptr inbounds i8,i8*%C,i64 16
%Q=bitcast i8*%P to i8**
store i8*%O,i8**%Q,align 8
%R=getelementptr inbounds i8,i8*%C,i64 24
%S=bitcast i8*%R to i32*
store i32%v,i32*%S,align 4
%T=getelementptr inbounds i8,i8*%C,i64 28
%U=bitcast i8*%T to i32*
store i32%y,i32*%U,align 4
%V=getelementptr inbounds i8,i8*%C,i64 32
%W=bitcast i8*%V to i32*
store i32%B,i32*%W,align 4
%X=getelementptr inbounds i8,i8*%C,i64 36
%Y=bitcast i8*%X to i32*
store i32%i,i32*%Y,align 4
%Z=getelementptr inbounds i8,i8*%C,i64 40
%aa=bitcast i8*%Z to i32*
store i32%p,i32*%aa,align 4
%ab=getelementptr inbounds i8,i8*%C,i64 48
%ac=bitcast i8*%ab to i32*
store i32%k,i32*%ac,align 4
%ad=call i8*@sml_alloc(i32 inreg 28)#0
%ae=getelementptr inbounds i8,i8*%ad,i64 -4
%af=bitcast i8*%ae to i32*
store i32 1342177304,i32*%af,align 4
%ag=load i8*,i8**%f,align 8
%ah=bitcast i8*%ad to i8**
store i8*%ag,i8**%ah,align 8
%ai=getelementptr inbounds i8,i8*%ad,i64 8
%aj=bitcast i8*%ai to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL5foldr_423 to void(...)*),void(...)**%aj,align 8
%ak=getelementptr inbounds i8,i8*%ad,i64 16
%al=bitcast i8*%ak to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL5foldr_423 to void(...)*),void(...)**%al,align 8
%am=getelementptr inbounds i8,i8*%ad,i64 24
%an=bitcast i8*%am to i32*
store i32 1,i32*%an,align 4
ret i8*%ad
}
define internal fastcc i8*@_SMLL5foldr_425(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%b,i8**%c,align 8
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=getelementptr inbounds i8,i8*%a,i64 8
%i=bitcast i8*%h to i32*
%j=load i32,i32*%i,align 4
%k=getelementptr inbounds i8,i8*%a,i64 12
%l=bitcast i8*%k to i32*
%m=load i32,i32*%l,align 4
%n=getelementptr inbounds i8,i8*%a,i64 16
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%a,i64 20
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=getelementptr inbounds i8,i8*%a,i64 24
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=call i8*@sml_alloc(i32 inreg 44)#0
%x=getelementptr inbounds i8,i8*%w,i64 -4
%y=bitcast i8*%x to i32*
store i32 1342177320,i32*%y,align 4
store i8*%w,i8**%e,align 8
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=bitcast i8*%w to i8**
store i8*%z,i8**%A,align 8
%B=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%C=getelementptr inbounds i8,i8*%w,i64 8
%D=bitcast i8*%C to i8**
store i8*%B,i8**%D,align 8
%E=getelementptr inbounds i8,i8*%w,i64 16
%F=bitcast i8*%E to i32*
store i32%j,i32*%F,align 4
%G=getelementptr inbounds i8,i8*%w,i64 20
%H=bitcast i8*%G to i32*
store i32%m,i32*%H,align 4
%I=getelementptr inbounds i8,i8*%w,i64 24
%J=bitcast i8*%I to i32*
store i32%p,i32*%J,align 4
%K=getelementptr inbounds i8,i8*%w,i64 28
%L=bitcast i8*%K to i32*
store i32%s,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%w,i64 32
%N=bitcast i8*%M to i32*
store i32%v,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%w,i64 40
%P=bitcast i8*%O to i32*
store i32 3,i32*%P,align 4
%Q=call i8*@sml_alloc(i32 inreg 28)#0
%R=getelementptr inbounds i8,i8*%Q,i64 -4
%S=bitcast i8*%R to i32*
store i32 1342177304,i32*%S,align 4
%T=load i8*,i8**%e,align 8
%U=bitcast i8*%Q to i8**
store i8*%T,i8**%U,align 8
%V=getelementptr inbounds i8,i8*%Q,i64 8
%W=bitcast i8*%V to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL5foldr_424 to void(...)*),void(...)**%W,align 8
%X=getelementptr inbounds i8,i8*%Q,i64 16
%Y=bitcast i8*%X to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL5foldr_424 to void(...)*),void(...)**%Y,align 8
%Z=getelementptr inbounds i8,i8*%Q,i64 24
%aa=bitcast i8*%Z to i32*
store i32 1,i32*%aa,align 4
ret i8*%Q
}
define internal fastcc i8*@_SMLL5foldr_426(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e)#4 gc"smlsharp"{
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%f,align 8
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i32*
%l=load i32,i32*%k,align 4
%m=call i8*@sml_alloc(i32 inreg 36)#0
%n=getelementptr inbounds i8,i8*%m,i64 -4
%o=bitcast i8*%n to i32*
store i32 1342177312,i32*%o,align 4
store i8*%m,i8**%g,align 8
%p=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%q=bitcast i8*%m to i8**
store i8*%p,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%m,i64 8
%s=bitcast i8*%r to i32*
store i32%l,i32*%s,align 4
%t=getelementptr inbounds i8,i8*%m,i64 12
%u=bitcast i8*%t to i32*
store i32%b,i32*%u,align 4
%v=getelementptr inbounds i8,i8*%m,i64 16
%w=bitcast i8*%v to i32*
store i32%c,i32*%w,align 4
%x=getelementptr inbounds i8,i8*%m,i64 20
%y=bitcast i8*%x to i32*
store i32%d,i32*%y,align 4
%z=getelementptr inbounds i8,i8*%m,i64 24
%A=bitcast i8*%z to i32*
store i32%e,i32*%A,align 4
%B=getelementptr inbounds i8,i8*%m,i64 32
%C=bitcast i8*%B to i32*
store i32 1,i32*%C,align 4
%D=call i8*@sml_alloc(i32 inreg 28)#0
%E=getelementptr inbounds i8,i8*%D,i64 -4
%F=bitcast i8*%E to i32*
store i32 1342177304,i32*%F,align 4
%G=load i8*,i8**%g,align 8
%H=bitcast i8*%D to i8**
store i8*%G,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%D,i64 8
%J=bitcast i8*%I to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL5foldr_425 to void(...)*),void(...)**%J,align 8
%K=getelementptr inbounds i8,i8*%D,i64 16
%L=bitcast i8*%K to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL5foldr_425 to void(...)*),void(...)**%L,align 8
%M=getelementptr inbounds i8,i8*%D,i64 24
%N=bitcast i8*%M to i32*
store i32 -2147483647,i32*%N,align 4
ret i8*%D
}
define internal fastcc i8*@_SMLL3ins_427(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
p:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
store i8*%a,i8**%g,align 8
store i8*%b,i8**%c,align 8
%j=load atomic i32,i32*@sml_check_flag unordered,align 4
%k=icmp eq i32%j,0
br i1%k,label%n,label%l
l:
call void@sml_check(i32 inreg%j)
%m=load i8*,i8**%g,align 8
br label%n
n:
%o=phi i8*[%m,%l],[%a,%p]
%q=getelementptr inbounds i8,i8*%o,i64 28
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=add i32%s,-1
%u=sub i32 0,%s
%v=and i32%t,%u
%w=getelementptr inbounds i8,i8*%o,i64 36
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=add i32%y,-1
%A=add i32%z,%s
%B=add i32%A,%v
%C=sub i32 0,%y
%D=and i32%B,%C
%E=add i32%y,7
%F=add i32%E,%D
%G=and i32%F,-8
%H=add i32%s,7
%I=and i32%H,%u
%J=add i32%I,%s
%K=add i32%J,7
%L=and i32%K,-8
%M=lshr i32%I,3
%N=getelementptr inbounds i8,i8*%o,i64 24
%O=bitcast i8*%N to i32*
%P=load i32,i32*%O,align 4
%Q=shl i32%P,%M
%R=or i32%Q,1
%S=or i32%L,4
%T=and i32%z,%C
%U=shl i32%y,1
%V=add i32%U,-1
%W=add i32%V,%T
%X=and i32%W,%C
%Y=add i32%E,%X
%Z=and i32%Y,-8
%aa=lshr i32%X,3
%ab=lshr i32%T,3
%ac=sub nsw i32%aa,%ab
%ad=getelementptr inbounds i8,i8*%o,i64 32
%ae=bitcast i8*%ad to i32*
%af=load i32,i32*%ae,align 4
%ag=shl i32%af,%ac
%ah=or i32%ag,%af
%ai=or i32%Z,4
%aj=add i32%z,%J
%ak=and i32%aj,%C
%al=add i32%E,%ak
%am=and i32%al,-8
%an=lshr i32%ak,3
%ao=sub nsw i32%an,%M
%ap=shl i32%af,%ao
%aq=or i32%ap,%P
%ar=shl i32%aq,%M
%as=or i32%ar,1
%at=or i32%am,4
%au=icmp eq i32%P,0
br i1%au,label%aB,label%av
av:
%aw=load i8*,i8**%c,align 8
%ax=sext i32%v to i64
%ay=getelementptr inbounds i8,i8*%aw,i64%ax
%az=bitcast i8*%ay to i8**
%aA=load i8*,i8**%az,align 8
br label%aM
aB:
%aC=call i8*@sml_alloc(i32 inreg%s)#0
%aD=getelementptr inbounds i8,i8*%aC,i64 -4
%aE=bitcast i8*%aD to i32*
store i32%s,i32*%aE,align 4
%aF=load i8*,i8**%c,align 8
%aG=sext i32%v to i64
%aH=getelementptr inbounds i8,i8*%aF,i64%aG
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aC,i8*%aH,i32%s,i1 false)
%aI=load i8*,i8**%g,align 8
%aJ=getelementptr inbounds i8,i8*%aI,i64 32
%aK=bitcast i8*%aJ to i32*
%aL=load i32,i32*%aK,align 4
br label%aM
aM:
%aN=phi i8*[%aF,%aB],[%aw,%av]
%aO=phi i32[%aL,%aB],[%af,%av]
%aP=phi i8*[%aI,%aB],[%o,%av]
%aQ=phi i8*[%aC,%aB],[%aA,%av]
store i8*%aQ,i8**%d,align 8
%aR=icmp eq i32%aO,0
br i1%aR,label%aX,label%aS
aS:
%aT=sext i32%D to i64
%aU=getelementptr inbounds i8,i8*%aN,i64%aT
%aV=bitcast i8*%aU to i8**
%aW=load i8*,i8**%aV,align 8
br label%bb
aX:
%aY=getelementptr inbounds i8,i8*%aP,i64 36
%aZ=bitcast i8*%aY to i32*
%a0=load i32,i32*%aZ,align 4
%a1=call i8*@sml_alloc(i32 inreg%a0)#0
%a2=getelementptr inbounds i8,i8*%a1,i64 -4
%a3=bitcast i8*%a2 to i32*
store i32%a0,i32*%a3,align 4
%a4=load i8*,i8**%c,align 8
%a5=sext i32%D to i64
%a6=getelementptr inbounds i8,i8*%a4,i64%a5
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%a1,i8*%a6,i32%a0,i1 false)
%a7=load i8*,i8**%g,align 8
%a8=getelementptr inbounds i8,i8*%a7,i64 32
%a9=bitcast i8*%a8 to i32*
%ba=load i32,i32*%a9,align 4
br label%bb
bb:
%bc=phi i32[%ba,%aX],[%aO,%aS]
%bd=phi i8*[%a7,%aX],[%aP,%aS]
%be=phi i8*[%a4,%aX],[%aN,%aS]
%bf=phi i8*[%a1,%aX],[%aW,%aS]
store i8*%bf,i8**%e,align 8
store i8*null,i8**%c,align 8
%bg=sext i32%G to i64
%bh=getelementptr inbounds i8,i8*%be,i64%bg
%bi=bitcast i8*%bh to i8**
%bj=load i8*,i8**%bi,align 8
store i8*%bj,i8**%f,align 8
%bk=getelementptr inbounds i8,i8*%bd,i64 16
%bl=bitcast i8*%bk to i8**
%bm=load i8*,i8**%bl,align 8
%bn=getelementptr inbounds i8,i8*%bd,i64 36
%bo=bitcast i8*%bn to i32*
%bp=load i32,i32*%bo,align 4
%bq=call fastcc i8*@_SMLL4find_352(i8*inreg%bm,i32 inreg%bc,i32 inreg%bp)
%br=getelementptr inbounds i8,i8*%bq,i64 16
%bs=bitcast i8*%br to i8*(i8*,i8*)**
%bt=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bs,align 8
%bu=bitcast i8*%bq to i8**
%bv=load i8*,i8**%bu,align 8
store i8*%bv,i8**%c,align 8
%bw=load i8*,i8**%g,align 8
%bx=getelementptr inbounds i8,i8*%bw,i64 28
%by=bitcast i8*%bx to i32*
%bz=load i32,i32*%by,align 4
%bA=getelementptr inbounds i8,i8*%bw,i64 24
%bB=bitcast i8*%bA to i32*
%bC=load i32,i32*%bB,align 4
%bD=call i8*@sml_alloc(i32 inreg%S)#0
%bE=or i32%L,1342177280
%bF=getelementptr inbounds i8,i8*%bD,i64 -4
%bG=bitcast i8*%bF to i32*
store i32%bE,i32*%bG,align 4
call void@llvm.memset.p0i8.i32(i8*%bD,i8 0,i32%S,i1 false)
%bH=load i8*,i8**%f,align 8
%bI=bitcast i8*%bD to i8**
store i8*%bH,i8**%bI,align 8
%bJ=icmp eq i32%bC,0
%bK=load i8*,i8**%d,align 8
%bL=sext i32%I to i64
%bM=getelementptr inbounds i8,i8*%bD,i64%bL
br i1%bJ,label%bP,label%bN
bN:
%bO=bitcast i8*%bM to i8**
store i8*%bK,i8**%bO,align 8
br label%bQ
bP:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bM,i8*%bK,i32%bz,i1 false)
br label%bQ
bQ:
%bR=sext i32%L to i64
%bS=getelementptr inbounds i8,i8*%bD,i64%bR
%bT=bitcast i8*%bS to i32*
store i32%R,i32*%bT,align 4
%bU=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bV=call fastcc i8*%bt(i8*inreg%bU,i8*inreg%bD)
store i8*%bV,i8**%c,align 8
%bW=icmp eq i8*%bV,null
br i1%bW,label%bX,label%cR
bX:
store i8*null,i8**%c,align 8
%bY=load i8*,i8**%g,align 8
%bZ=getelementptr inbounds i8,i8*%bY,i64 8
%b0=bitcast i8*%bZ to i8**
%b1=load i8*,i8**%b0,align 8
%b2=getelementptr inbounds i8,i8*%bY,i64 32
%b3=bitcast i8*%b2 to i32*
%b4=load i32,i32*%b3,align 4
%b5=getelementptr inbounds i8,i8*%bY,i64 36
%b6=bitcast i8*%b5 to i32*
%b7=load i32,i32*%b6,align 4
%b8=call fastcc i8*@_SMLL6insert_334(i8*inreg%b1,i32 inreg%b4,i32 inreg%b7)
%b9=getelementptr inbounds i8,i8*%b8,i64 16
%ca=bitcast i8*%b9 to i8*(i8*,i8*)**
%cb=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ca,align 8
%cc=bitcast i8*%b8 to i8**
%cd=load i8*,i8**%cc,align 8
store i8*%cd,i8**%c,align 8
%ce=load i8*,i8**%g,align 8
%cf=getelementptr inbounds i8,i8*%ce,i64 28
%cg=bitcast i8*%cf to i32*
%ch=load i32,i32*%cg,align 4
%ci=getelementptr inbounds i8,i8*%ce,i64 24
%cj=bitcast i8*%ci to i32*
%ck=load i32,i32*%cj,align 4
%cl=getelementptr inbounds i8,i8*%ce,i64 36
%cm=bitcast i8*%cl to i32*
%cn=load i32,i32*%cm,align 4
store i8*null,i8**%g,align 8
%co=getelementptr inbounds i8,i8*%ce,i64 32
%cp=bitcast i8*%co to i32*
%cq=load i32,i32*%cp,align 4
%cr=call i8*@sml_alloc(i32 inreg%at)#0
%cs=or i32%am,1342177280
%ct=getelementptr inbounds i8,i8*%cr,i64 -4
%cu=bitcast i8*%ct to i32*
store i32%cs,i32*%cu,align 4
call void@llvm.memset.p0i8.i32(i8*%cr,i8 0,i32%at,i1 false)
%cv=load i8*,i8**%f,align 8
%cw=bitcast i8*%cr to i8**
store i8*%cv,i8**%cw,align 8
%cx=icmp eq i32%ck,0
%cy=load i8*,i8**%d,align 8
%cz=getelementptr inbounds i8,i8*%cr,i64%bL
br i1%cx,label%cC,label%cA
cA:
%cB=bitcast i8*%cz to i8**
store i8*%cy,i8**%cB,align 8
br label%cD
cC:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cz,i8*%cy,i32%ch,i1 false)
br label%cD
cD:
%cE=icmp eq i32%cq,0
%cF=load i8*,i8**%e,align 8
%cG=sext i32%ak to i64
%cH=getelementptr inbounds i8,i8*%cr,i64%cG
br i1%cE,label%cK,label%cI
cI:
%cJ=bitcast i8*%cH to i8**
store i8*%cF,i8**%cJ,align 8
br label%cL
cK:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cH,i8*%cF,i32%cn,i1 false)
br label%cL
cL:
%cM=sext i32%am to i64
%cN=getelementptr inbounds i8,i8*%cr,i64%cM
%cO=bitcast i8*%cN to i32*
store i32%as,i32*%cO,align 4
%cP=load i8*,i8**%c,align 8
%cQ=tail call fastcc i8*%cb(i8*inreg%cP,i8*inreg%cr)
ret i8*%cQ
cR:
%cS=load i8*,i8**%g,align 8
%cT=getelementptr inbounds i8,i8*%cS,i64 32
%cU=bitcast i8*%cT to i32*
%cV=load i32,i32*%cU,align 4
%cW=icmp eq i32%cV,0
br i1%cW,label%c2,label%cX
cX:
store i8*null,i8**%c,align 8
%cY=sext i32%T to i64
%cZ=getelementptr inbounds i8,i8*%bV,i64%cY
%c0=bitcast i8*%cZ to i8**
%c1=load i8*,i8**%c0,align 8
br label%dg
c2:
%c3=getelementptr inbounds i8,i8*%cS,i64 36
%c4=bitcast i8*%c3 to i32*
%c5=load i32,i32*%c4,align 4
%c6=call i8*@sml_alloc(i32 inreg%c5)#0
%c7=getelementptr inbounds i8,i8*%c6,i64 -4
%c8=bitcast i8*%c7 to i32*
store i32%c5,i32*%c8,align 4
%c9=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%da=sext i32%T to i64
%db=getelementptr inbounds i8,i8*%c9,i64%da
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%c6,i8*%db,i32%c5,i1 false)
%dc=load i8*,i8**%g,align 8
%dd=getelementptr inbounds i8,i8*%dc,i64 32
%de=bitcast i8*%dd to i32*
%df=load i32,i32*%de,align 4
br label%dg
dg:
%dh=phi i64[%da,%c2],[%cY,%cX]
%di=phi i32[%df,%c2],[%cV,%cX]
%dj=phi i8*[%dc,%c2],[%cS,%cX]
%dk=phi i8*[%c6,%c2],[%c1,%cX]
store i8*%dk,i8**%c,align 8
%dl=getelementptr inbounds i8,i8*%dj,i64 8
%dm=bitcast i8*%dl to i8**
%dn=load i8*,i8**%dm,align 8
%do=getelementptr inbounds i8,i8*%dj,i64 36
%dp=bitcast i8*%do to i32*
%dq=load i32,i32*%dp,align 4
%dr=call fastcc i8*@_SMLL6insert_334(i8*inreg%dn,i32 inreg%di,i32 inreg%dq)
%ds=getelementptr inbounds i8,i8*%dr,i64 16
%dt=bitcast i8*%ds to i8*(i8*,i8*)**
%du=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%dt,align 8
%dv=bitcast i8*%dr to i8**
%dw=load i8*,i8**%dv,align 8
store i8*%dw,i8**%i,align 8
%dx=bitcast i8**%g to i8***
%dy=load i8**,i8***%dx,align 8
%dz=load i8*,i8**%dy,align 8
%dA=getelementptr inbounds i8,i8*%dz,i64 16
%dB=bitcast i8*%dA to i8*(i8*,i8*)**
%dC=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%dB,align 8
%dD=bitcast i8*%dz to i8**
%dE=load i8*,i8**%dD,align 8
store i8*%dE,i8**%h,align 8
%dF=bitcast i8**%dy to i8*
%dG=getelementptr inbounds i8,i8*%dF,i64 36
%dH=bitcast i8*%dG to i32*
%dI=load i32,i32*%dH,align 4
%dJ=getelementptr inbounds i8*,i8**%dy,i64 4
%dK=bitcast i8**%dJ to i32*
%dL=load i32,i32*%dK,align 4
%dM=call i8*@sml_alloc(i32 inreg%ai)#0
%dN=or i32%Z,1342177280
%dO=getelementptr inbounds i8,i8*%dM,i64 -4
%dP=bitcast i8*%dO to i32*
store i32%dN,i32*%dP,align 4
call void@llvm.memset.p0i8.i32(i8*%dM,i8 0,i32%ai,i1 false)
%dQ=icmp eq i32%dL,0
%dR=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%dS=getelementptr inbounds i8,i8*%dM,i64%dh
br i1%dQ,label%dZ,label%dT
dT:
%dU=bitcast i8*%dS to i8**
store i8*%dR,i8**%dU,align 8
%dV=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%dW=sext i32%X to i64
%dX=getelementptr inbounds i8,i8*%dM,i64%dW
%dY=bitcast i8*%dX to i8**
store i8*%dV,i8**%dY,align 8
br label%d3
dZ:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dS,i8*%dR,i32%dI,i1 false)
%d0=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%d1=sext i32%X to i64
%d2=getelementptr inbounds i8,i8*%dM,i64%d1
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%d2,i8*%d0,i32%dI,i1 false)
br label%d3
d3:
%d4=sext i32%Z to i64
%d5=getelementptr inbounds i8,i8*%dM,i64%d4
%d6=bitcast i8*%d5 to i32*
store i32%ah,i32*%d6,align 4
%d7=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%d8=call fastcc i8*%dC(i8*inreg%d7,i8*inreg%dM)
store i8*%d8,i8**%c,align 8
%d9=load i8*,i8**%g,align 8
%ea=getelementptr inbounds i8,i8*%d9,i64 28
%eb=bitcast i8*%ea to i32*
%ec=load i32,i32*%eb,align 4
%ed=getelementptr inbounds i8,i8*%d9,i64 24
%ee=bitcast i8*%ed to i32*
%ef=load i32,i32*%ee,align 4
%eg=getelementptr inbounds i8,i8*%d9,i64 36
%eh=bitcast i8*%eg to i32*
%ei=load i32,i32*%eh,align 4
store i8*null,i8**%g,align 8
%ej=getelementptr inbounds i8,i8*%d9,i64 32
%ek=bitcast i8*%ej to i32*
%el=load i32,i32*%ek,align 4
%em=call i8*@sml_alloc(i32 inreg%at)#0
%en=or i32%am,1342177280
%eo=getelementptr inbounds i8,i8*%em,i64 -4
%ep=bitcast i8*%eo to i32*
store i32%en,i32*%ep,align 4
call void@llvm.memset.p0i8.i32(i8*%em,i8 0,i32%at,i1 false)
%eq=load i8*,i8**%f,align 8
%er=bitcast i8*%em to i8**
store i8*%eq,i8**%er,align 8
%es=icmp eq i32%ef,0
%et=load i8*,i8**%d,align 8
%eu=getelementptr inbounds i8,i8*%em,i64%bL
br i1%es,label%ex,label%ev
ev:
%ew=bitcast i8*%eu to i8**
store i8*%et,i8**%ew,align 8
br label%ey
ex:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%eu,i8*%et,i32%ec,i1 false)
br label%ey
ey:
%ez=icmp eq i32%el,0
%eA=load i8*,i8**%c,align 8
%eB=sext i32%ak to i64
%eC=getelementptr inbounds i8,i8*%em,i64%eB
br i1%ez,label%eF,label%eD
eD:
%eE=bitcast i8*%eC to i8**
store i8*%eA,i8**%eE,align 8
br label%eG
eF:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%eC,i8*%eA,i32%ei,i1 false)
br label%eG
eG:
%eH=sext i32%am to i64
%eI=getelementptr inbounds i8,i8*%em,i64%eH
%eJ=bitcast i8*%eI to i32*
store i32%as,i32*%eJ,align 4
%eK=load i8*,i8**%i,align 8
%eL=tail call fastcc i8*%du(i8*inreg%eK,i8*inreg%em)
ret i8*%eL
}
define internal fastcc i8*@_SMLL3ins_428(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=getelementptr inbounds i8,i8*%a,i64 16
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%a,i64 20
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=getelementptr inbounds i8,i8*%a,i64 24
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=getelementptr inbounds i8,i8*%a,i64 28
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=call i8*@sml_alloc(i32 inreg 44)#0
%y=getelementptr inbounds i8,i8*%x,i64 -4
%z=bitcast i8*%y to i32*
store i32 1342177320,i32*%z,align 4
store i8*%x,i8**%f,align 8
%A=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%B=bitcast i8*%x to i8**
store i8*%A,i8**%B,align 8
%C=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%D=getelementptr inbounds i8,i8*%x,i64 8
%E=bitcast i8*%D to i8**
store i8*%C,i8**%E,align 8
%F=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%G=getelementptr inbounds i8,i8*%x,i64 16
%H=bitcast i8*%G to i8**
store i8*%F,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%x,i64 24
%J=bitcast i8*%I to i32*
store i32%n,i32*%J,align 4
%K=getelementptr inbounds i8,i8*%x,i64 28
%L=bitcast i8*%K to i32*
store i32%q,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%x,i64 32
%N=bitcast i8*%M to i32*
store i32%t,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%x,i64 36
%P=bitcast i8*%O to i32*
store i32%w,i32*%P,align 4
%Q=getelementptr inbounds i8,i8*%x,i64 40
%R=bitcast i8*%Q to i32*
store i32 7,i32*%R,align 4
%S=call i8*@sml_alloc(i32 inreg 28)#0
%T=getelementptr inbounds i8,i8*%S,i64 -4
%U=bitcast i8*%T to i32*
store i32 1342177304,i32*%U,align 4
%V=load i8*,i8**%f,align 8
%W=bitcast i8*%S to i8**
store i8*%V,i8**%W,align 8
%X=getelementptr inbounds i8,i8*%S,i64 8
%Y=bitcast i8*%X to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3ins_427 to void(...)*),void(...)**%Y,align 8
%Z=getelementptr inbounds i8,i8*%S,i64 16
%aa=bitcast i8*%Z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3ins_427 to void(...)*),void(...)**%aa,align 8
%ab=getelementptr inbounds i8,i8*%S,i64 24
%ac=bitcast i8*%ab to i32*
store i32 -2147483647,i32*%ac,align 4
ret i8*%S
}
define internal fastcc i8*@_SMLL3ins_429(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=getelementptr inbounds i8,i8*%a,i64 16
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%a,i64 20
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=call i8*@sml_alloc(i32 inreg 36)#0
%s=getelementptr inbounds i8,i8*%r,i64 -4
%t=bitcast i8*%s to i32*
store i32 1342177312,i32*%t,align 4
store i8*%r,i8**%f,align 8
%u=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%v=bitcast i8*%r to i8**
store i8*%u,i8**%v,align 8
%w=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%x=getelementptr inbounds i8,i8*%r,i64 8
%y=bitcast i8*%x to i8**
store i8*%w,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%r,i64 16
%A=bitcast i8*%z to i32*
store i32%n,i32*%A,align 4
%B=getelementptr inbounds i8,i8*%r,i64 20
%C=bitcast i8*%B to i32*
store i32%q,i32*%C,align 4
%D=getelementptr inbounds i8,i8*%r,i64 24
%E=bitcast i8*%D to i32*
store i32%b,i32*%E,align 4
%F=getelementptr inbounds i8,i8*%r,i64 28
%G=bitcast i8*%F to i32*
store i32%c,i32*%G,align 4
%H=getelementptr inbounds i8,i8*%r,i64 32
%I=bitcast i8*%H to i32*
store i32 3,i32*%I,align 4
%J=call i8*@sml_alloc(i32 inreg 28)#0
%K=getelementptr inbounds i8,i8*%J,i64 -4
%L=bitcast i8*%K to i32*
store i32 1342177304,i32*%L,align 4
%M=load i8*,i8**%f,align 8
%N=bitcast i8*%J to i8**
store i8*%M,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%J,i64 8
%P=bitcast i8*%O to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3ins_428 to void(...)*),void(...)**%P,align 8
%Q=getelementptr inbounds i8,i8*%J,i64 16
%R=bitcast i8*%Q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3ins_428 to void(...)*),void(...)**%R,align 8
%S=getelementptr inbounds i8,i8*%J,i64 24
%T=bitcast i8*%S to i32*
store i32 -2147483647,i32*%T,align 4
ret i8*%J
}
define internal fastcc i8*@_SMLL9unionWith_430(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
m:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%k,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%e,align 8
br label%k
k:
%l=phi i8*[%j,%i],[%a,%m]
%n=getelementptr inbounds i8,i8*%l,i64 12
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=add i32%p,-1
%r=sub i32 0,%p
%s=and i32%q,%r
%t=shl i32%p,1
%u=add i32%t,-1
%v=add i32%u,%s
%w=and i32%v,%r
%x=add i32%p,7
%y=add i32%x,%w
%z=and i32%y,-8
%A=lshr i32%w,3
%B=lshr i32%s,3
%C=sub nsw i32%A,%B
%D=getelementptr inbounds i8,i8*%l,i64 8
%E=bitcast i8*%D to i32*
%F=load i32,i32*%E,align 4
%G=shl i32%F,%C
%H=or i32%G,%F
%I=or i32%z,4
%J=icmp eq i32%F,0
br i1%J,label%Q,label%K
K:
%L=load i8*,i8**%c,align 8
%M=sext i32%s to i64
%N=getelementptr inbounds i8,i8*%L,i64%M
%O=bitcast i8*%N to i8**
%P=load i8*,i8**%O,align 8
store i8*%P,i8**%d,align 8
br label%ac
Q:
%R=call i8*@sml_alloc(i32 inreg%p)#0
%S=getelementptr inbounds i8,i8*%R,i64 -4
%T=bitcast i8*%S to i32*
store i32%p,i32*%T,align 4
%U=load i8*,i8**%c,align 8
%V=sext i32%s to i64
%W=getelementptr inbounds i8,i8*%U,i64%V
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%R,i8*%W,i32%p,i1 false)
%X=load i8*,i8**%e,align 8
%Y=getelementptr inbounds i8,i8*%X,i64 8
%Z=bitcast i8*%Y to i32*
%aa=load i32,i32*%Z,align 4
store i8*%R,i8**%d,align 8
%ab=icmp eq i32%aa,0
br i1%ab,label%al,label%ac
ac:
%ad=phi i8*[%l,%K],[%X,%Q]
%ae=phi i32[%F,%K],[%aa,%Q]
%af=phi i8*[%L,%K],[%U,%Q]
%ag=bitcast i8*%ad to i8**
store i8*null,i8**%c,align 8
%ah=sext i32%w to i64
%ai=getelementptr inbounds i8,i8*%af,i64%ah
%aj=bitcast i8*%ai to i8**
%ak=load i8*,i8**%aj,align 8
br label%aB
al:
%am=getelementptr inbounds i8,i8*%X,i64 12
%an=bitcast i8*%am to i32*
%ao=load i32,i32*%an,align 4
%ap=call i8*@sml_alloc(i32 inreg%ao)#0
%aq=getelementptr inbounds i8,i8*%ap,i64 -4
%ar=bitcast i8*%aq to i32*
store i32%ao,i32*%ar,align 4
%as=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%at=sext i32%w to i64
%au=getelementptr inbounds i8,i8*%as,i64%at
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ap,i8*%au,i32%ao,i1 false)
%av=bitcast i8**%e to i8***
%aw=load i8**,i8***%av,align 8
%ax=bitcast i8**%aw to i8*
%ay=getelementptr inbounds i8*,i8**%aw,i64 1
%az=bitcast i8**%ay to i32*
%aA=load i32,i32*%az,align 4
br label%aB
aB:
%aC=phi i32[%aA,%al],[%ae,%ac]
%aD=phi i8*[%ax,%al],[%ad,%ac]
%aE=phi i8**[%aw,%al],[%ag,%ac]
%aF=phi i8*[%ap,%al],[%ak,%ac]
store i8*%aF,i8**%c,align 8
%aG=load i8*,i8**%aE,align 8
%aH=getelementptr inbounds i8,i8*%aG,i64 16
%aI=bitcast i8*%aH to i8*(i8*,i8*)**
%aJ=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aI,align 8
%aK=bitcast i8*%aG to i8**
%aL=load i8*,i8**%aK,align 8
store i8*%aL,i8**%f,align 8
%aM=getelementptr inbounds i8,i8*%aD,i64 12
%aN=bitcast i8*%aM to i32*
%aO=load i32,i32*%aN,align 4
store i8*null,i8**%e,align 8
%aP=call i8*@sml_alloc(i32 inreg%I)#0
%aQ=or i32%z,1342177280
%aR=getelementptr inbounds i8,i8*%aP,i64 -4
%aS=bitcast i8*%aR to i32*
store i32%aQ,i32*%aS,align 4
call void@llvm.memset.p0i8.i32(i8*%aP,i8 0,i32%I,i1 false)
%aT=icmp eq i32%aC,0
%aU=load i8*,i8**%c,align 8
%aV=sext i32%s to i64
%aW=getelementptr inbounds i8,i8*%aP,i64%aV
br i1%aT,label%a3,label%aX
aX:
%aY=bitcast i8*%aW to i8**
store i8*%aU,i8**%aY,align 8
%aZ=load i8*,i8**%d,align 8
%a0=sext i32%w to i64
%a1=getelementptr inbounds i8,i8*%aP,i64%a0
%a2=bitcast i8*%a1 to i8**
store i8*%aZ,i8**%a2,align 8
br label%a7
a3:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aW,i8*%aU,i32%aO,i1 false)
%a4=load i8*,i8**%d,align 8
%a5=sext i32%w to i64
%a6=getelementptr inbounds i8,i8*%aP,i64%a5
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%a6,i8*%a4,i32%aO,i1 false)
br label%a7
a7:
%a8=sext i32%z to i64
%a9=getelementptr inbounds i8,i8*%aP,i64%a8
%ba=bitcast i8*%a9 to i32*
store i32%H,i32*%ba,align 4
%bb=load i8*,i8**%f,align 8
%bc=tail call fastcc i8*%aJ(i8*inreg%bb,i8*inreg%aP)
ret i8*%bc
}
define internal fastcc i8*@_SMLL9unionWith_431(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
o:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%m,label%k
k:
call void@sml_check(i32 inreg%i)
%l=load i8*,i8**%d,align 8
br label%m
m:
%n=phi i8*[%l,%k],[%a,%o]
%p=getelementptr inbounds i8,i8*%n,i64 8
%q=bitcast i8*%p to i8**
%r=load i8*,i8**%q,align 8
store i8*%r,i8**%e,align 8
%s=getelementptr inbounds i8,i8*%n,i64 16
%t=bitcast i8*%s to i8**
%u=load i8*,i8**%t,align 8
store i8*%u,i8**%f,align 8
%v=getelementptr inbounds i8,i8*%n,i64 32
%w=bitcast i8*%v to i32*
%x=load i32,i32*%w,align 4
%y=getelementptr inbounds i8,i8*%n,i64 36
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=call i8*@sml_alloc(i32 inreg 28)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177304,i32*%D,align 4
store i8*%B,i8**%h,align 8
%E=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%F=bitcast i8*%B to i8**
store i8*%E,i8**%F,align 8
%G=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%H=getelementptr inbounds i8,i8*%B,i64 8
%I=bitcast i8*%H to i8**
store i8*%G,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%B,i64 16
%K=bitcast i8*%J to i32*
store i32%x,i32*%K,align 4
%L=getelementptr inbounds i8,i8*%B,i64 20
%M=bitcast i8*%L to i32*
store i32%A,i32*%M,align 4
%N=getelementptr inbounds i8,i8*%B,i64 24
%O=bitcast i8*%N to i32*
store i32 3,i32*%O,align 4
%P=call i8*@sml_alloc(i32 inreg 28)#0
%Q=getelementptr inbounds i8,i8*%P,i64 -4
%R=bitcast i8*%Q to i32*
store i32 1342177304,i32*%R,align 4
%S=load i8*,i8**%h,align 8
%T=bitcast i8*%P to i8**
store i8*%S,i8**%T,align 8
%U=getelementptr inbounds i8,i8*%P,i64 8
%V=bitcast i8*%U to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL3ins_429 to void(...)*),void(...)**%V,align 8
%W=getelementptr inbounds i8,i8*%P,i64 16
%X=bitcast i8*%W to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL3ins_692 to void(...)*),void(...)**%X,align 8
%Y=getelementptr inbounds i8,i8*%P,i64 24
%Z=bitcast i8*%Y to i32*
store i32 -2147483647,i32*%Z,align 4
%aa=bitcast i8**%c to i8***
%ab=load i8**,i8***%aa,align 8
%ac=load i8*,i8**%ab,align 8
%ad=icmp eq i8*%ac,null
br i1%ad,label%ah,label%ae
ae:
%af=bitcast i8*%ac to i32*
%ag=load i32,i32*%af,align 4
br label%ah
ah:
%ai=phi i32[%ag,%ae],[0,%m]
%aj=getelementptr inbounds i8*,i8**%ab,i64 1
%ak=load i8*,i8**%aj,align 8
%al=icmp eq i8*%ak,null
br i1%al,label%ap,label%am
am:
%an=bitcast i8*%ak to i32*
%ao=load i32,i32*%an,align 4
br label%ap
ap:
%aq=phi i32[%ao,%am],[0,%ah]
%ar=icmp sgt i32%ai,%aq
%as=load i8*,i8**%d,align 8
%at=getelementptr inbounds i8,i8*%as,i64 24
%au=bitcast i8*%at to i8**
%av=load i8*,i8**%au,align 8
%aw=getelementptr inbounds i8,i8*%as,i64 40
%ax=bitcast i8*%aw to i32*
%ay=load i32,i32*%ax,align 4
%az=getelementptr inbounds i8,i8*%as,i64 44
%aA=bitcast i8*%az to i32*
%aB=load i32,i32*%aA,align 4
%aC=call fastcc i8*@_SMLL6foldli_411(i8*inreg%av,i32 inreg%ay,i32 inreg%aB,i32 inreg 1,i32 inreg 8)
%aD=getelementptr inbounds i8,i8*%aC,i64 16
%aE=bitcast i8*%aD to void(...)**
%aF=load void(...)*,void(...)**%aE,align 8
%aG=bitcast i8*%aC to i8**
%aH=load i8*,i8**%aG,align 8
br i1%ar,label%aI,label%bm
aI:
store i8*%aH,i8**%e,align 8
%aJ=load i8*,i8**%d,align 8
%aK=getelementptr inbounds i8,i8*%aJ,i64 40
%aL=bitcast i8*%aK to i32*
%aM=load i32,i32*%aL,align 4
%aN=getelementptr inbounds i8,i8*%aJ,i64 44
%aO=bitcast i8*%aN to i32*
%aP=load i32,i32*%aO,align 4
%aQ=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%aR=call fastcc i8*@_SMLL3ins_429(i8*inreg%aQ,i32 inreg%aM,i32 inreg%aP)
%aS=getelementptr inbounds i8,i8*%aR,i64 16
%aT=bitcast i8*%aS to i8*(i8*,i8*)**
%aU=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aT,align 8
%aV=bitcast i8*%aR to i8**
%aW=load i8*,i8**%aV,align 8
%aX=bitcast i8**%d to i8***
%aY=load i8**,i8***%aX,align 8
store i8*null,i8**%d,align 8
%aZ=load i8*,i8**%aY,align 8
%a0=call fastcc i8*%aU(i8*inreg%aW,i8*inreg%aZ)
%a1=bitcast void(...)*%aF to i8*(i8*,i8*)*
%a2=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%a3=call fastcc i8*%a1(i8*inreg%a2,i8*inreg%a0)
%a4=getelementptr inbounds i8,i8*%a3,i64 16
%a5=bitcast i8*%a4 to i8*(i8*,i8*)**
%a6=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a5,align 8
%a7=bitcast i8*%a3 to i8**
%a8=load i8*,i8**%a7,align 8
%a9=load i8**,i8***%aa,align 8
%ba=load i8*,i8**%a9,align 8
%bb=call fastcc i8*%a6(i8*inreg%a8,i8*inreg%ba)
%bc=getelementptr inbounds i8,i8*%bb,i64 16
%bd=bitcast i8*%bc to i8*(i8*,i8*)**
%be=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bd,align 8
%bf=bitcast i8*%bb to i8**
%bg=load i8*,i8**%bf,align 8
%bh=load i8*,i8**%c,align 8
%bi=getelementptr inbounds i8,i8*%bh,i64 8
%bj=bitcast i8*%bi to i8**
%bk=load i8*,i8**%bj,align 8
%bl=tail call fastcc i8*%be(i8*inreg%bg,i8*inreg%bk)
ret i8*%bl
bm:
store i8*%aH,i8**%g,align 8
%bn=load i8*,i8**%d,align 8
%bo=getelementptr inbounds i8,i8*%bn,i64 40
%bp=bitcast i8*%bo to i32*
%bq=load i32,i32*%bp,align 4
%br=getelementptr inbounds i8,i8*%bn,i64 44
%bs=bitcast i8*%br to i32*
%bt=load i32,i32*%bs,align 4
%bu=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%bv=call fastcc i8*@_SMLL3ins_429(i8*inreg%bu,i32 inreg%bq,i32 inreg%bt)
%bw=getelementptr inbounds i8,i8*%bv,i64 16
%bx=bitcast i8*%bw to i8*(i8*,i8*)**
%by=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bx,align 8
%bz=bitcast i8*%bv to i8**
%bA=load i8*,i8**%bz,align 8
store i8*%bA,i8**%f,align 8
%bB=bitcast i8**%d to i8***
%bC=load i8**,i8***%bB,align 8
%bD=load i8*,i8**%bC,align 8
store i8*%bD,i8**%e,align 8
%bE=bitcast i8**%bC to i8*
%bF=getelementptr inbounds i8*,i8**%bC,i64 5
%bG=bitcast i8**%bF to i32*
%bH=load i32,i32*%bG,align 4
store i8*null,i8**%d,align 8
%bI=getelementptr inbounds i8,i8*%bE,i64 44
%bJ=bitcast i8*%bI to i32*
%bK=load i32,i32*%bJ,align 4
%bL=call i8*@sml_alloc(i32 inreg 20)#0
%bM=getelementptr inbounds i8,i8*%bL,i64 -4
%bN=bitcast i8*%bM to i32*
store i32 1342177296,i32*%bN,align 4
store i8*%bL,i8**%d,align 8
%bO=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bP=bitcast i8*%bL to i8**
store i8*%bO,i8**%bP,align 8
%bQ=getelementptr inbounds i8,i8*%bL,i64 8
%bR=bitcast i8*%bQ to i32*
store i32%bH,i32*%bR,align 4
%bS=getelementptr inbounds i8,i8*%bL,i64 12
%bT=bitcast i8*%bS to i32*
store i32%bK,i32*%bT,align 4
%bU=getelementptr inbounds i8,i8*%bL,i64 16
%bV=bitcast i8*%bU to i32*
store i32 1,i32*%bV,align 4
%bW=call i8*@sml_alloc(i32 inreg 28)#0
%bX=getelementptr inbounds i8,i8*%bW,i64 -4
%bY=bitcast i8*%bX to i32*
store i32 1342177304,i32*%bY,align 4
%bZ=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%b0=bitcast i8*%bW to i8**
store i8*%bZ,i8**%b0,align 8
%b1=getelementptr inbounds i8,i8*%bW,i64 8
%b2=bitcast i8*%b1 to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL9unionWith_430 to void(...)*),void(...)**%b2,align 8
%b3=getelementptr inbounds i8,i8*%bW,i64 16
%b4=bitcast i8*%b3 to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL9unionWith_430 to void(...)*),void(...)**%b4,align 8
%b5=getelementptr inbounds i8,i8*%bW,i64 24
%b6=bitcast i8*%b5 to i32*
store i32 1,i32*%b6,align 4
%b7=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%b8=call fastcc i8*%by(i8*inreg%b7,i8*inreg%bW)
%b9=bitcast void(...)*%aF to i8*(i8*,i8*)*
%ca=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%cb=call fastcc i8*%b9(i8*inreg%ca,i8*inreg%b8)
%cc=getelementptr inbounds i8,i8*%cb,i64 16
%cd=bitcast i8*%cc to i8*(i8*,i8*)**
%ce=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%cd,align 8
%cf=bitcast i8*%cb to i8**
%cg=load i8*,i8**%cf,align 8
%ch=load i8*,i8**%c,align 8
%ci=getelementptr inbounds i8,i8*%ch,i64 8
%cj=bitcast i8*%ci to i8**
%ck=load i8*,i8**%cj,align 8
%cl=call fastcc i8*%ce(i8*inreg%cg,i8*inreg%ck)
%cm=getelementptr inbounds i8,i8*%cl,i64 16
%cn=bitcast i8*%cm to i8*(i8*,i8*)**
%co=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%cn,align 8
%cp=bitcast i8*%cl to i8**
%cq=load i8*,i8**%cp,align 8
%cr=load i8**,i8***%aa,align 8
%cs=load i8*,i8**%cr,align 8
%ct=tail call fastcc i8*%co(i8*inreg%cq,i8*inreg%cs)
ret i8*%ct
}
define internal fastcc i8*@_SMLL9unionWith_432(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%b,i8**%c,align 8
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%d,align 8
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
store i8*%l,i8**%e,align 8
%m=getelementptr inbounds i8,i8*%a,i64 16
%n=bitcast i8*%m to i8**
%o=load i8*,i8**%n,align 8
store i8*%o,i8**%f,align 8
%p=getelementptr inbounds i8,i8*%a,i64 24
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=getelementptr inbounds i8,i8*%a,i64 28
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=getelementptr inbounds i8,i8*%a,i64 32
%w=bitcast i8*%v to i32*
%x=load i32,i32*%w,align 4
%y=getelementptr inbounds i8,i8*%a,i64 36
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=call i8*@sml_alloc(i32 inreg 52)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177328,i32*%D,align 4
store i8*%B,i8**%g,align 8
%E=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%F=bitcast i8*%B to i8**
store i8*%E,i8**%F,align 8
%G=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%H=getelementptr inbounds i8,i8*%B,i64 8
%I=bitcast i8*%H to i8**
store i8*%G,i8**%I,align 8
%J=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%K=getelementptr inbounds i8,i8*%B,i64 16
%L=bitcast i8*%K to i8**
store i8*%J,i8**%L,align 8
%M=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%N=getelementptr inbounds i8,i8*%B,i64 24
%O=bitcast i8*%N to i8**
store i8*%M,i8**%O,align 8
%P=getelementptr inbounds i8,i8*%B,i64 32
%Q=bitcast i8*%P to i32*
store i32%r,i32*%Q,align 4
%R=getelementptr inbounds i8,i8*%B,i64 36
%S=bitcast i8*%R to i32*
store i32%u,i32*%S,align 4
%T=getelementptr inbounds i8,i8*%B,i64 40
%U=bitcast i8*%T to i32*
store i32%x,i32*%U,align 4
%V=getelementptr inbounds i8,i8*%B,i64 44
%W=bitcast i8*%V to i32*
store i32%A,i32*%W,align 4
%X=getelementptr inbounds i8,i8*%B,i64 48
%Y=bitcast i8*%X to i32*
store i32 15,i32*%Y,align 4
%Z=call i8*@sml_alloc(i32 inreg 28)#0
%aa=getelementptr inbounds i8,i8*%Z,i64 -4
%ab=bitcast i8*%aa to i32*
store i32 1342177304,i32*%ab,align 4
%ac=load i8*,i8**%g,align 8
%ad=bitcast i8*%Z to i8**
store i8*%ac,i8**%ad,align 8
%ae=getelementptr inbounds i8,i8*%Z,i64 8
%af=bitcast i8*%ae to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL9unionWith_431 to void(...)*),void(...)**%af,align 8
%ag=getelementptr inbounds i8,i8*%Z,i64 16
%ah=bitcast i8*%ag to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL9unionWith_431 to void(...)*),void(...)**%ah,align 8
%ai=getelementptr inbounds i8,i8*%Z,i64 24
%aj=bitcast i8*%ai to i32*
store i32 -2147483647,i32*%aj,align 4
ret i8*%Z
}
define internal fastcc i8*@_SMLL9unionWith_433(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%d,align 8
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
store i8*%l,i8**%e,align 8
%m=getelementptr inbounds i8,i8*%a,i64 16
%n=bitcast i8*%m to i8**
%o=load i8*,i8**%n,align 8
store i8*%o,i8**%f,align 8
%p=getelementptr inbounds i8,i8*%a,i64 24
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=getelementptr inbounds i8,i8*%a,i64 28
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=call i8*@sml_alloc(i32 inreg 44)#0
%w=getelementptr inbounds i8,i8*%v,i64 -4
%x=bitcast i8*%w to i32*
store i32 1342177320,i32*%x,align 4
store i8*%v,i8**%g,align 8
%y=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%z=bitcast i8*%v to i8**
store i8*%y,i8**%z,align 8
%A=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%B=getelementptr inbounds i8,i8*%v,i64 8
%C=bitcast i8*%B to i8**
store i8*%A,i8**%C,align 8
%D=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%E=getelementptr inbounds i8,i8*%v,i64 16
%F=bitcast i8*%E to i8**
store i8*%D,i8**%F,align 8
%G=getelementptr inbounds i8,i8*%v,i64 24
%H=bitcast i8*%G to i32*
store i32%r,i32*%H,align 4
%I=getelementptr inbounds i8,i8*%v,i64 28
%J=bitcast i8*%I to i32*
store i32%u,i32*%J,align 4
%K=getelementptr inbounds i8,i8*%v,i64 32
%L=bitcast i8*%K to i32*
store i32%b,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%v,i64 36
%N=bitcast i8*%M to i32*
store i32%c,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%v,i64 40
%P=bitcast i8*%O to i32*
store i32 7,i32*%P,align 4
%Q=call i8*@sml_alloc(i32 inreg 28)#0
%R=getelementptr inbounds i8,i8*%Q,i64 -4
%S=bitcast i8*%R to i32*
store i32 1342177304,i32*%S,align 4
%T=load i8*,i8**%g,align 8
%U=bitcast i8*%Q to i8**
store i8*%T,i8**%U,align 8
%V=getelementptr inbounds i8,i8*%Q,i64 8
%W=bitcast i8*%V to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL9unionWith_432 to void(...)*),void(...)**%W,align 8
%X=getelementptr inbounds i8,i8*%Q,i64 16
%Y=bitcast i8*%X to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL9unionWith_432 to void(...)*),void(...)**%Y,align 8
%Z=getelementptr inbounds i8,i8*%Q,i64 24
%aa=bitcast i8*%Z to i32*
store i32 -2147483647,i32*%aa,align 4
ret i8*%Q
}
define internal fastcc i8*@_SMLL3ins_434(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
p:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
store i8*%a,i8**%g,align 8
store i8*%b,i8**%c,align 8
%j=load atomic i32,i32*@sml_check_flag unordered,align 4
%k=icmp eq i32%j,0
br i1%k,label%n,label%l
l:
call void@sml_check(i32 inreg%j)
%m=load i8*,i8**%g,align 8
br label%n
n:
%o=phi i8*[%m,%l],[%a,%p]
%q=getelementptr inbounds i8,i8*%o,i64 28
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=add i32%s,-1
%u=sub i32 0,%s
%v=and i32%t,%u
%w=getelementptr inbounds i8,i8*%o,i64 36
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=add i32%y,-1
%A=add i32%z,%s
%B=add i32%A,%v
%C=sub i32 0,%y
%D=and i32%B,%C
%E=add i32%D,%y
%F=add i32%E,7
%G=and i32%F,-8
%H=add i32%s,7
%I=and i32%H,%u
%J=add i32%I,%s
%K=add i32%J,7
%L=and i32%K,-8
%M=lshr i32%I,3
%N=getelementptr inbounds i8,i8*%o,i64 24
%O=bitcast i8*%N to i32*
%P=load i32,i32*%O,align 4
%Q=shl i32%P,%M
%R=or i32%Q,1
%S=or i32%L,4
%T=and i32%z,%C
%U=add i32%z,%E
%V=and i32%U,%C
%W=add i32%y,7
%X=add i32%W,%V
%Y=and i32%X,-8
%Z=lshr i32%V,3
%aa=lshr i32%D,3
%ab=sub nsw i32%Z,%aa
%ac=lshr i32%v,3
%ad=sub nsw i32%aa,%ac
%ae=getelementptr inbounds i8,i8*%o,i64 32
%af=bitcast i8*%ae to i32*
%ag=load i32,i32*%af,align 4
%ah=shl i32%ag,%ab
%ai=or i32%ah,%ag
%aj=shl i32%ai,%ad
%ak=or i32%aj,%P
%al=or i32%Y,4
%am=add i32%z,%J
%an=and i32%am,%C
%ao=add i32%W,%an
%ap=and i32%ao,-8
%aq=lshr i32%an,3
%ar=sub nsw i32%aq,%M
%as=shl i32%ag,%ar
%at=or i32%as,%P
%au=shl i32%at,%M
%av=or i32%au,1
%aw=or i32%ap,4
%ax=icmp eq i32%P,0
br i1%ax,label%aE,label%ay
ay:
%az=load i8*,i8**%c,align 8
%aA=sext i32%v to i64
%aB=getelementptr inbounds i8,i8*%az,i64%aA
%aC=bitcast i8*%aB to i8**
%aD=load i8*,i8**%aC,align 8
br label%aP
aE:
%aF=call i8*@sml_alloc(i32 inreg%s)#0
%aG=getelementptr inbounds i8,i8*%aF,i64 -4
%aH=bitcast i8*%aG to i32*
store i32%s,i32*%aH,align 4
%aI=load i8*,i8**%c,align 8
%aJ=sext i32%v to i64
%aK=getelementptr inbounds i8,i8*%aI,i64%aJ
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aF,i8*%aK,i32%s,i1 false)
%aL=load i8*,i8**%g,align 8
%aM=getelementptr inbounds i8,i8*%aL,i64 32
%aN=bitcast i8*%aM to i32*
%aO=load i32,i32*%aN,align 4
br label%aP
aP:
%aQ=phi i8*[%aI,%aE],[%az,%ay]
%aR=phi i32[%aO,%aE],[%ag,%ay]
%aS=phi i8*[%aL,%aE],[%o,%ay]
%aT=phi i8*[%aF,%aE],[%aD,%ay]
store i8*%aT,i8**%d,align 8
%aU=icmp eq i32%aR,0
br i1%aU,label%a0,label%aV
aV:
%aW=sext i32%D to i64
%aX=getelementptr inbounds i8,i8*%aQ,i64%aW
%aY=bitcast i8*%aX to i8**
%aZ=load i8*,i8**%aY,align 8
br label%be
a0:
%a1=getelementptr inbounds i8,i8*%aS,i64 36
%a2=bitcast i8*%a1 to i32*
%a3=load i32,i32*%a2,align 4
%a4=call i8*@sml_alloc(i32 inreg%a3)#0
%a5=getelementptr inbounds i8,i8*%a4,i64 -4
%a6=bitcast i8*%a5 to i32*
store i32%a3,i32*%a6,align 4
%a7=load i8*,i8**%c,align 8
%a8=sext i32%D to i64
%a9=getelementptr inbounds i8,i8*%a7,i64%a8
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%a4,i8*%a9,i32%a3,i1 false)
%ba=load i8*,i8**%g,align 8
%bb=getelementptr inbounds i8,i8*%ba,i64 32
%bc=bitcast i8*%bb to i32*
%bd=load i32,i32*%bc,align 4
br label%be
be:
%bf=phi i32[%bd,%a0],[%aR,%aV]
%bg=phi i8*[%ba,%a0],[%aS,%aV]
%bh=phi i8*[%a7,%a0],[%aQ,%aV]
%bi=phi i8*[%a4,%a0],[%aZ,%aV]
store i8*%bi,i8**%e,align 8
store i8*null,i8**%c,align 8
%bj=sext i32%G to i64
%bk=getelementptr inbounds i8,i8*%bh,i64%bj
%bl=bitcast i8*%bk to i8**
%bm=load i8*,i8**%bl,align 8
store i8*%bm,i8**%f,align 8
%bn=getelementptr inbounds i8,i8*%bg,i64 16
%bo=bitcast i8*%bn to i8**
%bp=load i8*,i8**%bo,align 8
%bq=getelementptr inbounds i8,i8*%bg,i64 36
%br=bitcast i8*%bq to i32*
%bs=load i32,i32*%br,align 4
%bt=call fastcc i8*@_SMLL4find_352(i8*inreg%bp,i32 inreg%bf,i32 inreg%bs)
%bu=getelementptr inbounds i8,i8*%bt,i64 16
%bv=bitcast i8*%bu to i8*(i8*,i8*)**
%bw=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bv,align 8
%bx=bitcast i8*%bt to i8**
%by=load i8*,i8**%bx,align 8
store i8*%by,i8**%c,align 8
%bz=load i8*,i8**%g,align 8
%bA=getelementptr inbounds i8,i8*%bz,i64 28
%bB=bitcast i8*%bA to i32*
%bC=load i32,i32*%bB,align 4
%bD=getelementptr inbounds i8,i8*%bz,i64 24
%bE=bitcast i8*%bD to i32*
%bF=load i32,i32*%bE,align 4
%bG=call i8*@sml_alloc(i32 inreg%S)#0
%bH=or i32%L,1342177280
%bI=getelementptr inbounds i8,i8*%bG,i64 -4
%bJ=bitcast i8*%bI to i32*
store i32%bH,i32*%bJ,align 4
call void@llvm.memset.p0i8.i32(i8*%bG,i8 0,i32%S,i1 false)
%bK=load i8*,i8**%f,align 8
%bL=bitcast i8*%bG to i8**
store i8*%bK,i8**%bL,align 8
%bM=icmp eq i32%bF,0
%bN=load i8*,i8**%d,align 8
%bO=sext i32%I to i64
%bP=getelementptr inbounds i8,i8*%bG,i64%bO
br i1%bM,label%bS,label%bQ
bQ:
%bR=bitcast i8*%bP to i8**
store i8*%bN,i8**%bR,align 8
br label%bT
bS:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bP,i8*%bN,i32%bC,i1 false)
br label%bT
bT:
%bU=sext i32%L to i64
%bV=getelementptr inbounds i8,i8*%bG,i64%bU
%bW=bitcast i8*%bV to i32*
store i32%R,i32*%bW,align 4
%bX=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bY=call fastcc i8*%bw(i8*inreg%bX,i8*inreg%bG)
store i8*%bY,i8**%c,align 8
%bZ=icmp eq i8*%bY,null
br i1%bZ,label%b0,label%cU
b0:
store i8*null,i8**%c,align 8
%b1=load i8*,i8**%g,align 8
%b2=getelementptr inbounds i8,i8*%b1,i64 8
%b3=bitcast i8*%b2 to i8**
%b4=load i8*,i8**%b3,align 8
%b5=getelementptr inbounds i8,i8*%b1,i64 32
%b6=bitcast i8*%b5 to i32*
%b7=load i32,i32*%b6,align 4
%b8=getelementptr inbounds i8,i8*%b1,i64 36
%b9=bitcast i8*%b8 to i32*
%ca=load i32,i32*%b9,align 4
%cb=call fastcc i8*@_SMLL6insert_334(i8*inreg%b4,i32 inreg%b7,i32 inreg%ca)
%cc=getelementptr inbounds i8,i8*%cb,i64 16
%cd=bitcast i8*%cc to i8*(i8*,i8*)**
%ce=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%cd,align 8
%cf=bitcast i8*%cb to i8**
%cg=load i8*,i8**%cf,align 8
store i8*%cg,i8**%c,align 8
%ch=load i8*,i8**%g,align 8
%ci=getelementptr inbounds i8,i8*%ch,i64 28
%cj=bitcast i8*%ci to i32*
%ck=load i32,i32*%cj,align 4
%cl=getelementptr inbounds i8,i8*%ch,i64 24
%cm=bitcast i8*%cl to i32*
%cn=load i32,i32*%cm,align 4
%co=getelementptr inbounds i8,i8*%ch,i64 36
%cp=bitcast i8*%co to i32*
%cq=load i32,i32*%cp,align 4
store i8*null,i8**%g,align 8
%cr=getelementptr inbounds i8,i8*%ch,i64 32
%cs=bitcast i8*%cr to i32*
%ct=load i32,i32*%cs,align 4
%cu=call i8*@sml_alloc(i32 inreg%aw)#0
%cv=or i32%ap,1342177280
%cw=getelementptr inbounds i8,i8*%cu,i64 -4
%cx=bitcast i8*%cw to i32*
store i32%cv,i32*%cx,align 4
call void@llvm.memset.p0i8.i32(i8*%cu,i8 0,i32%aw,i1 false)
%cy=load i8*,i8**%f,align 8
%cz=bitcast i8*%cu to i8**
store i8*%cy,i8**%cz,align 8
%cA=icmp eq i32%cn,0
%cB=load i8*,i8**%d,align 8
%cC=getelementptr inbounds i8,i8*%cu,i64%bO
br i1%cA,label%cF,label%cD
cD:
%cE=bitcast i8*%cC to i8**
store i8*%cB,i8**%cE,align 8
br label%cG
cF:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cC,i8*%cB,i32%ck,i1 false)
br label%cG
cG:
%cH=icmp eq i32%ct,0
%cI=load i8*,i8**%e,align 8
%cJ=sext i32%an to i64
%cK=getelementptr inbounds i8,i8*%cu,i64%cJ
br i1%cH,label%cN,label%cL
cL:
%cM=bitcast i8*%cK to i8**
store i8*%cI,i8**%cM,align 8
br label%cO
cN:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cK,i8*%cI,i32%cq,i1 false)
br label%cO
cO:
%cP=sext i32%ap to i64
%cQ=getelementptr inbounds i8,i8*%cu,i64%cP
%cR=bitcast i8*%cQ to i32*
store i32%av,i32*%cR,align 4
%cS=load i8*,i8**%c,align 8
%cT=tail call fastcc i8*%ce(i8*inreg%cS,i8*inreg%cu)
ret i8*%cT
cU:
%cV=load i8*,i8**%g,align 8
%cW=getelementptr inbounds i8,i8*%cV,i64 32
%cX=bitcast i8*%cW to i32*
%cY=load i32,i32*%cX,align 4
%cZ=icmp eq i32%cY,0
br i1%cZ,label%c5,label%c0
c0:
store i8*null,i8**%c,align 8
%c1=sext i32%T to i64
%c2=getelementptr inbounds i8,i8*%bY,i64%c1
%c3=bitcast i8*%c2 to i8**
%c4=load i8*,i8**%c3,align 8
br label%dj
c5:
%c6=getelementptr inbounds i8,i8*%cV,i64 36
%c7=bitcast i8*%c6 to i32*
%c8=load i32,i32*%c7,align 4
%c9=call i8*@sml_alloc(i32 inreg%c8)#0
%da=getelementptr inbounds i8,i8*%c9,i64 -4
%db=bitcast i8*%da to i32*
store i32%c8,i32*%db,align 4
%dc=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%dd=sext i32%T to i64
%de=getelementptr inbounds i8,i8*%dc,i64%dd
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%c9,i8*%de,i32%c8,i1 false)
%df=load i8*,i8**%g,align 8
%dg=getelementptr inbounds i8,i8*%df,i64 32
%dh=bitcast i8*%dg to i32*
%di=load i32,i32*%dh,align 4
br label%dj
dj:
%dk=phi i32[%di,%c5],[%cY,%c0]
%dl=phi i8*[%df,%c5],[%cV,%c0]
%dm=phi i8*[%c9,%c5],[%c4,%c0]
store i8*%dm,i8**%c,align 8
%dn=getelementptr inbounds i8,i8*%dl,i64 8
%do=bitcast i8*%dn to i8**
%dp=load i8*,i8**%do,align 8
%dq=getelementptr inbounds i8,i8*%dl,i64 36
%dr=bitcast i8*%dq to i32*
%ds=load i32,i32*%dr,align 4
%dt=call fastcc i8*@_SMLL6insert_334(i8*inreg%dp,i32 inreg%dk,i32 inreg%ds)
%du=getelementptr inbounds i8,i8*%dt,i64 16
%dv=bitcast i8*%du to i8*(i8*,i8*)**
%dw=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%dv,align 8
%dx=bitcast i8*%dt to i8**
%dy=load i8*,i8**%dx,align 8
store i8*%dy,i8**%i,align 8
%dz=bitcast i8**%g to i8***
%dA=load i8**,i8***%dz,align 8
%dB=load i8*,i8**%dA,align 8
%dC=getelementptr inbounds i8,i8*%dB,i64 16
%dD=bitcast i8*%dC to i8*(i8*,i8*)**
%dE=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%dD,align 8
%dF=bitcast i8*%dB to i8**
%dG=load i8*,i8**%dF,align 8
store i8*%dG,i8**%h,align 8
%dH=bitcast i8**%dA to i8*
%dI=getelementptr inbounds i8,i8*%dH,i64 28
%dJ=bitcast i8*%dI to i32*
%dK=load i32,i32*%dJ,align 4
%dL=getelementptr inbounds i8*,i8**%dA,i64 3
%dM=bitcast i8**%dL to i32*
%dN=load i32,i32*%dM,align 4
%dO=getelementptr inbounds i8,i8*%dH,i64 36
%dP=bitcast i8*%dO to i32*
%dQ=load i32,i32*%dP,align 4
%dR=getelementptr inbounds i8*,i8**%dA,i64 4
%dS=bitcast i8**%dR to i32*
%dT=load i32,i32*%dS,align 4
%dU=call i8*@sml_alloc(i32 inreg%al)#0
%dV=or i32%Y,1342177280
%dW=getelementptr inbounds i8,i8*%dU,i64 -4
%dX=bitcast i8*%dW to i32*
store i32%dV,i32*%dX,align 4
call void@llvm.memset.p0i8.i32(i8*%dU,i8 0,i32%al,i1 false)
%dY=icmp eq i32%dN,0
%dZ=load i8*,i8**%d,align 8
%d0=sext i32%v to i64
%d1=getelementptr inbounds i8,i8*%dU,i64%d0
br i1%dY,label%d4,label%d2
d2:
%d3=bitcast i8*%d1 to i8**
store i8*%dZ,i8**%d3,align 8
br label%d5
d4:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%d1,i8*%dZ,i32%dK,i1 false)
br label%d5
d5:
%d6=icmp eq i32%dT,0
%d7=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%d8=sext i32%D to i64
%d9=getelementptr inbounds i8,i8*%dU,i64%d8
br i1%d6,label%eg,label%ea
ea:
%eb=bitcast i8*%d9 to i8**
store i8*%d7,i8**%eb,align 8
%ec=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%ed=sext i32%V to i64
%ee=getelementptr inbounds i8,i8*%dU,i64%ed
%ef=bitcast i8*%ee to i8**
store i8*%ec,i8**%ef,align 8
br label%ek
eg:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%d9,i8*%d7,i32%dQ,i1 false)
%eh=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%ei=sext i32%V to i64
%ej=getelementptr inbounds i8,i8*%dU,i64%ei
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ej,i8*%eh,i32%dQ,i1 false)
br label%ek
ek:
%el=sext i32%Y to i64
%em=getelementptr inbounds i8,i8*%dU,i64%el
%en=bitcast i8*%em to i32*
store i32%ak,i32*%en,align 4
%eo=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%ep=call fastcc i8*%dE(i8*inreg%eo,i8*inreg%dU)
store i8*%ep,i8**%c,align 8
%eq=load i8*,i8**%g,align 8
%er=getelementptr inbounds i8,i8*%eq,i64 28
%es=bitcast i8*%er to i32*
%et=load i32,i32*%es,align 4
%eu=getelementptr inbounds i8,i8*%eq,i64 24
%ev=bitcast i8*%eu to i32*
%ew=load i32,i32*%ev,align 4
%ex=getelementptr inbounds i8,i8*%eq,i64 36
%ey=bitcast i8*%ex to i32*
%ez=load i32,i32*%ey,align 4
store i8*null,i8**%g,align 8
%eA=getelementptr inbounds i8,i8*%eq,i64 32
%eB=bitcast i8*%eA to i32*
%eC=load i32,i32*%eB,align 4
%eD=call i8*@sml_alloc(i32 inreg%aw)#0
%eE=or i32%ap,1342177280
%eF=getelementptr inbounds i8,i8*%eD,i64 -4
%eG=bitcast i8*%eF to i32*
store i32%eE,i32*%eG,align 4
call void@llvm.memset.p0i8.i32(i8*%eD,i8 0,i32%aw,i1 false)
%eH=load i8*,i8**%f,align 8
%eI=bitcast i8*%eD to i8**
store i8*%eH,i8**%eI,align 8
%eJ=icmp eq i32%ew,0
%eK=load i8*,i8**%d,align 8
%eL=getelementptr inbounds i8,i8*%eD,i64%bO
br i1%eJ,label%eO,label%eM
eM:
%eN=bitcast i8*%eL to i8**
store i8*%eK,i8**%eN,align 8
br label%eP
eO:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%eL,i8*%eK,i32%et,i1 false)
br label%eP
eP:
%eQ=icmp eq i32%eC,0
%eR=load i8*,i8**%c,align 8
%eS=sext i32%an to i64
%eT=getelementptr inbounds i8,i8*%eD,i64%eS
br i1%eQ,label%eW,label%eU
eU:
%eV=bitcast i8*%eT to i8**
store i8*%eR,i8**%eV,align 8
br label%eX
eW:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%eT,i8*%eR,i32%ez,i1 false)
br label%eX
eX:
%eY=sext i32%ap to i64
%eZ=getelementptr inbounds i8,i8*%eD,i64%eY
%e0=bitcast i8*%eZ to i32*
store i32%av,i32*%e0,align 4
%e1=load i8*,i8**%i,align 8
%e2=tail call fastcc i8*%dw(i8*inreg%e1,i8*inreg%eD)
ret i8*%e2
}
define internal fastcc i8*@_SMLL3ins_435(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=getelementptr inbounds i8,i8*%a,i64 16
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%a,i64 20
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=getelementptr inbounds i8,i8*%a,i64 24
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=getelementptr inbounds i8,i8*%a,i64 28
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=call i8*@sml_alloc(i32 inreg 44)#0
%y=getelementptr inbounds i8,i8*%x,i64 -4
%z=bitcast i8*%y to i32*
store i32 1342177320,i32*%z,align 4
store i8*%x,i8**%f,align 8
%A=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%B=bitcast i8*%x to i8**
store i8*%A,i8**%B,align 8
%C=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%D=getelementptr inbounds i8,i8*%x,i64 8
%E=bitcast i8*%D to i8**
store i8*%C,i8**%E,align 8
%F=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%G=getelementptr inbounds i8,i8*%x,i64 16
%H=bitcast i8*%G to i8**
store i8*%F,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%x,i64 24
%J=bitcast i8*%I to i32*
store i32%n,i32*%J,align 4
%K=getelementptr inbounds i8,i8*%x,i64 28
%L=bitcast i8*%K to i32*
store i32%q,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%x,i64 32
%N=bitcast i8*%M to i32*
store i32%t,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%x,i64 36
%P=bitcast i8*%O to i32*
store i32%w,i32*%P,align 4
%Q=getelementptr inbounds i8,i8*%x,i64 40
%R=bitcast i8*%Q to i32*
store i32 7,i32*%R,align 4
%S=call i8*@sml_alloc(i32 inreg 28)#0
%T=getelementptr inbounds i8,i8*%S,i64 -4
%U=bitcast i8*%T to i32*
store i32 1342177304,i32*%U,align 4
%V=load i8*,i8**%f,align 8
%W=bitcast i8*%S to i8**
store i8*%V,i8**%W,align 8
%X=getelementptr inbounds i8,i8*%S,i64 8
%Y=bitcast i8*%X to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3ins_434 to void(...)*),void(...)**%Y,align 8
%Z=getelementptr inbounds i8,i8*%S,i64 16
%aa=bitcast i8*%Z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3ins_434 to void(...)*),void(...)**%aa,align 8
%ab=getelementptr inbounds i8,i8*%S,i64 24
%ac=bitcast i8*%ab to i32*
store i32 -2147483647,i32*%ac,align 4
ret i8*%S
}
define internal fastcc i8*@_SMLL3ins_436(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=getelementptr inbounds i8,i8*%a,i64 16
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%a,i64 20
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=call i8*@sml_alloc(i32 inreg 36)#0
%s=getelementptr inbounds i8,i8*%r,i64 -4
%t=bitcast i8*%s to i32*
store i32 1342177312,i32*%t,align 4
store i8*%r,i8**%f,align 8
%u=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%v=bitcast i8*%r to i8**
store i8*%u,i8**%v,align 8
%w=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%x=getelementptr inbounds i8,i8*%r,i64 8
%y=bitcast i8*%x to i8**
store i8*%w,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%r,i64 16
%A=bitcast i8*%z to i32*
store i32%n,i32*%A,align 4
%B=getelementptr inbounds i8,i8*%r,i64 20
%C=bitcast i8*%B to i32*
store i32%q,i32*%C,align 4
%D=getelementptr inbounds i8,i8*%r,i64 24
%E=bitcast i8*%D to i32*
store i32%b,i32*%E,align 4
%F=getelementptr inbounds i8,i8*%r,i64 28
%G=bitcast i8*%F to i32*
store i32%c,i32*%G,align 4
%H=getelementptr inbounds i8,i8*%r,i64 32
%I=bitcast i8*%H to i32*
store i32 3,i32*%I,align 4
%J=call i8*@sml_alloc(i32 inreg 28)#0
%K=getelementptr inbounds i8,i8*%J,i64 -4
%L=bitcast i8*%K to i32*
store i32 1342177304,i32*%L,align 4
%M=load i8*,i8**%f,align 8
%N=bitcast i8*%J to i8**
store i8*%M,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%J,i64 8
%P=bitcast i8*%O to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3ins_435 to void(...)*),void(...)**%P,align 8
%Q=getelementptr inbounds i8,i8*%J,i64 16
%R=bitcast i8*%Q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3ins_435 to void(...)*),void(...)**%R,align 8
%S=getelementptr inbounds i8,i8*%J,i64 24
%T=bitcast i8*%S to i32*
store i32 -2147483647,i32*%T,align 4
ret i8*%J
}
define internal fastcc i8*@_SMLL10unionWithi_437(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
n:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%f,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%l,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%f,align 8
br label%l
l:
%m=phi i8*[%k,%j],[%a,%n]
%o=getelementptr inbounds i8,i8*%m,i64 12
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=add i32%q,-1
%s=sub i32 0,%q
%t=and i32%r,%s
%u=getelementptr inbounds i8,i8*%m,i64 20
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=add i32%r,%w
%y=add i32%x,%t
%z=sub i32 0,%w
%A=and i32%y,%z
%B=shl i32%w,1
%C=add i32%B,-1
%D=add i32%C,%A
%E=and i32%D,%z
%F=add i32%w,7
%G=add i32%F,%E
%H=and i32%G,-8
%I=lshr i32%E,3
%J=lshr i32%A,3
%K=sub nsw i32%I,%J
%L=lshr i32%t,3
%M=sub nsw i32%J,%L
%N=getelementptr inbounds i8,i8*%m,i64 16
%O=bitcast i8*%N to i32*
%P=load i32,i32*%O,align 4
%Q=shl i32%P,%K
%R=or i32%Q,%P
%S=shl i32%R,%M
%T=getelementptr inbounds i8,i8*%m,i64 8
%U=bitcast i8*%T to i32*
%V=load i32,i32*%U,align 4
%W=or i32%S,%V
%X=or i32%H,4
%Y=icmp eq i32%V,0
br i1%Y,label%af,label%Z
Z:
%aa=load i8*,i8**%c,align 8
%ab=sext i32%t to i64
%ac=getelementptr inbounds i8,i8*%aa,i64%ab
%ad=bitcast i8*%ac to i8**
%ae=load i8*,i8**%ad,align 8
br label%aq
af:
%ag=call i8*@sml_alloc(i32 inreg%q)#0
%ah=getelementptr inbounds i8,i8*%ag,i64 -4
%ai=bitcast i8*%ah to i32*
store i32%q,i32*%ai,align 4
%aj=load i8*,i8**%c,align 8
%ak=sext i32%t to i64
%al=getelementptr inbounds i8,i8*%aj,i64%ak
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ag,i8*%al,i32%q,i1 false)
%am=load i8*,i8**%f,align 8
%an=getelementptr inbounds i8,i8*%am,i64 16
%ao=bitcast i8*%an to i32*
%ap=load i32,i32*%ao,align 4
br label%aq
aq:
%ar=phi i8*[%am,%af],[%m,%Z]
%as=phi i8*[%aj,%af],[%aa,%Z]
%at=phi i32[%ap,%af],[%P,%Z]
%au=phi i8*[%ag,%af],[%ae,%Z]
store i8*%au,i8**%d,align 8
%av=icmp eq i32%at,0
br i1%av,label%aB,label%aw
aw:
%ax=sext i32%A to i64
%ay=getelementptr inbounds i8,i8*%as,i64%ax
%az=bitcast i8*%ay to i8**
%aA=load i8*,i8**%az,align 8
store i8*%aA,i8**%e,align 8
br label%aQ
aB:
%aC=getelementptr inbounds i8,i8*%ar,i64 20
%aD=bitcast i8*%aC to i32*
%aE=load i32,i32*%aD,align 4
%aF=call i8*@sml_alloc(i32 inreg%aE)#0
%aG=getelementptr inbounds i8,i8*%aF,i64 -4
%aH=bitcast i8*%aG to i32*
store i32%aE,i32*%aH,align 4
%aI=load i8*,i8**%c,align 8
%aJ=sext i32%A to i64
%aK=getelementptr inbounds i8,i8*%aI,i64%aJ
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aF,i8*%aK,i32%aE,i1 false)
%aL=load i8*,i8**%f,align 8
%aM=getelementptr inbounds i8,i8*%aL,i64 16
%aN=bitcast i8*%aM to i32*
%aO=load i32,i32*%aN,align 4
store i8*%aF,i8**%e,align 8
%aP=icmp eq i32%aO,0
br i1%aP,label%aZ,label%aQ
aQ:
%aR=phi i8*[%ar,%aw],[%aL,%aB]
%aS=phi i32[%at,%aw],[%aO,%aB]
%aT=phi i8*[%as,%aw],[%aI,%aB]
%aU=bitcast i8*%aR to i8**
store i8*null,i8**%c,align 8
%aV=sext i32%E to i64
%aW=getelementptr inbounds i8,i8*%aT,i64%aV
%aX=bitcast i8*%aW to i8**
%aY=load i8*,i8**%aX,align 8
br label%bf
aZ:
%a0=getelementptr inbounds i8,i8*%aL,i64 20
%a1=bitcast i8*%a0 to i32*
%a2=load i32,i32*%a1,align 4
%a3=call i8*@sml_alloc(i32 inreg%a2)#0
%a4=getelementptr inbounds i8,i8*%a3,i64 -4
%a5=bitcast i8*%a4 to i32*
store i32%a2,i32*%a5,align 4
%a6=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%a7=sext i32%E to i64
%a8=getelementptr inbounds i8,i8*%a6,i64%a7
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%a3,i8*%a8,i32%a2,i1 false)
%a9=bitcast i8**%f to i8***
%ba=load i8**,i8***%a9,align 8
%bb=bitcast i8**%ba to i8*
%bc=getelementptr inbounds i8*,i8**%ba,i64 2
%bd=bitcast i8**%bc to i32*
%be=load i32,i32*%bd,align 4
br label%bf
bf:
%bg=phi i32[%be,%aZ],[%aS,%aQ]
%bh=phi i8*[%bb,%aZ],[%aR,%aQ]
%bi=phi i8**[%ba,%aZ],[%aU,%aQ]
%bj=phi i8*[%a3,%aZ],[%aY,%aQ]
store i8*%bj,i8**%c,align 8
%bk=load i8*,i8**%bi,align 8
%bl=getelementptr inbounds i8,i8*%bk,i64 16
%bm=bitcast i8*%bl to i8*(i8*,i8*)**
%bn=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bm,align 8
%bo=bitcast i8*%bk to i8**
%bp=load i8*,i8**%bo,align 8
store i8*%bp,i8**%g,align 8
%bq=getelementptr inbounds i8,i8*%bh,i64 12
%br=bitcast i8*%bq to i32*
%bs=load i32,i32*%br,align 4
%bt=getelementptr inbounds i8,i8*%bh,i64 8
%bu=bitcast i8*%bt to i32*
%bv=load i32,i32*%bu,align 4
%bw=getelementptr inbounds i8,i8*%bh,i64 20
%bx=bitcast i8*%bw to i32*
%by=load i32,i32*%bx,align 4
store i8*null,i8**%f,align 8
%bz=call i8*@sml_alloc(i32 inreg%X)#0
%bA=or i32%H,1342177280
%bB=getelementptr inbounds i8,i8*%bz,i64 -4
%bC=bitcast i8*%bB to i32*
store i32%bA,i32*%bC,align 4
call void@llvm.memset.p0i8.i32(i8*%bz,i8 0,i32%X,i1 false)
%bD=icmp eq i32%bv,0
%bE=load i8*,i8**%d,align 8
%bF=sext i32%t to i64
%bG=getelementptr inbounds i8,i8*%bz,i64%bF
br i1%bD,label%bJ,label%bH
bH:
%bI=bitcast i8*%bG to i8**
store i8*%bE,i8**%bI,align 8
br label%bK
bJ:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bG,i8*%bE,i32%bs,i1 false)
br label%bK
bK:
%bL=icmp eq i32%bg,0
%bM=load i8*,i8**%c,align 8
%bN=sext i32%A to i64
%bO=getelementptr inbounds i8,i8*%bz,i64%bN
br i1%bL,label%bV,label%bP
bP:
%bQ=bitcast i8*%bO to i8**
store i8*%bM,i8**%bQ,align 8
%bR=load i8*,i8**%e,align 8
%bS=sext i32%E to i64
%bT=getelementptr inbounds i8,i8*%bz,i64%bS
%bU=bitcast i8*%bT to i8**
store i8*%bR,i8**%bU,align 8
br label%bZ
bV:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bO,i8*%bM,i32%by,i1 false)
%bW=load i8*,i8**%e,align 8
%bX=sext i32%E to i64
%bY=getelementptr inbounds i8,i8*%bz,i64%bX
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bY,i8*%bW,i32%by,i1 false)
br label%bZ
bZ:
%b0=sext i32%H to i64
%b1=getelementptr inbounds i8,i8*%bz,i64%b0
%b2=bitcast i8*%b1 to i32*
store i32%W,i32*%b2,align 4
%b3=load i8*,i8**%g,align 8
%b4=tail call fastcc i8*%bn(i8*inreg%b3,i8*inreg%bz)
ret i8*%b4
}
define internal fastcc i8*@_SMLL10unionWithi_438(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
o:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%m,label%k
k:
call void@sml_check(i32 inreg%i)
%l=load i8*,i8**%d,align 8
br label%m
m:
%n=phi i8*[%l,%k],[%a,%o]
%p=getelementptr inbounds i8,i8*%n,i64 8
%q=bitcast i8*%p to i8**
%r=load i8*,i8**%q,align 8
store i8*%r,i8**%e,align 8
%s=getelementptr inbounds i8,i8*%n,i64 16
%t=bitcast i8*%s to i8**
%u=load i8*,i8**%t,align 8
store i8*%u,i8**%f,align 8
%v=getelementptr inbounds i8,i8*%n,i64 32
%w=bitcast i8*%v to i32*
%x=load i32,i32*%w,align 4
%y=getelementptr inbounds i8,i8*%n,i64 36
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=call i8*@sml_alloc(i32 inreg 28)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177304,i32*%D,align 4
store i8*%B,i8**%h,align 8
%E=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%F=bitcast i8*%B to i8**
store i8*%E,i8**%F,align 8
%G=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%H=getelementptr inbounds i8,i8*%B,i64 8
%I=bitcast i8*%H to i8**
store i8*%G,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%B,i64 16
%K=bitcast i8*%J to i32*
store i32%x,i32*%K,align 4
%L=getelementptr inbounds i8,i8*%B,i64 20
%M=bitcast i8*%L to i32*
store i32%A,i32*%M,align 4
%N=getelementptr inbounds i8,i8*%B,i64 24
%O=bitcast i8*%N to i32*
store i32 3,i32*%O,align 4
%P=call i8*@sml_alloc(i32 inreg 28)#0
%Q=getelementptr inbounds i8,i8*%P,i64 -4
%R=bitcast i8*%Q to i32*
store i32 1342177304,i32*%R,align 4
%S=load i8*,i8**%h,align 8
%T=bitcast i8*%P to i8**
store i8*%S,i8**%T,align 8
%U=getelementptr inbounds i8,i8*%P,i64 8
%V=bitcast i8*%U to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL3ins_436 to void(...)*),void(...)**%V,align 8
%W=getelementptr inbounds i8,i8*%P,i64 16
%X=bitcast i8*%W to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL3ins_694 to void(...)*),void(...)**%X,align 8
%Y=getelementptr inbounds i8,i8*%P,i64 24
%Z=bitcast i8*%Y to i32*
store i32 -2147483647,i32*%Z,align 4
%aa=bitcast i8**%c to i8***
%ab=load i8**,i8***%aa,align 8
%ac=load i8*,i8**%ab,align 8
%ad=icmp eq i8*%ac,null
br i1%ad,label%ah,label%ae
ae:
%af=bitcast i8*%ac to i32*
%ag=load i32,i32*%af,align 4
br label%ah
ah:
%ai=phi i32[%ag,%ae],[0,%m]
%aj=getelementptr inbounds i8*,i8**%ab,i64 1
%ak=load i8*,i8**%aj,align 8
%al=icmp eq i8*%ak,null
br i1%al,label%ap,label%am
am:
%an=bitcast i8*%ak to i32*
%ao=load i32,i32*%an,align 4
br label%ap
ap:
%aq=phi i32[%ao,%am],[0,%ah]
%ar=icmp sgt i32%ai,%aq
%as=load i8*,i8**%d,align 8
%at=getelementptr inbounds i8,i8*%as,i64 24
%au=bitcast i8*%at to i8**
%av=load i8*,i8**%au,align 8
%aw=getelementptr inbounds i8,i8*%as,i64 40
%ax=bitcast i8*%aw to i32*
%ay=load i32,i32*%ax,align 4
%az=getelementptr inbounds i8,i8*%as,i64 44
%aA=bitcast i8*%az to i32*
%aB=load i32,i32*%aA,align 4
%aC=call fastcc i8*@_SMLL6foldli_411(i8*inreg%av,i32 inreg%ay,i32 inreg%aB,i32 inreg 1,i32 inreg 8)
%aD=getelementptr inbounds i8,i8*%aC,i64 16
%aE=bitcast i8*%aD to void(...)**
%aF=load void(...)*,void(...)**%aE,align 8
%aG=bitcast i8*%aC to i8**
%aH=load i8*,i8**%aG,align 8
br i1%ar,label%aI,label%bm
aI:
store i8*%aH,i8**%e,align 8
%aJ=load i8*,i8**%d,align 8
%aK=getelementptr inbounds i8,i8*%aJ,i64 40
%aL=bitcast i8*%aK to i32*
%aM=load i32,i32*%aL,align 4
%aN=getelementptr inbounds i8,i8*%aJ,i64 44
%aO=bitcast i8*%aN to i32*
%aP=load i32,i32*%aO,align 4
%aQ=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%aR=call fastcc i8*@_SMLL3ins_436(i8*inreg%aQ,i32 inreg%aM,i32 inreg%aP)
%aS=getelementptr inbounds i8,i8*%aR,i64 16
%aT=bitcast i8*%aS to i8*(i8*,i8*)**
%aU=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aT,align 8
%aV=bitcast i8*%aR to i8**
%aW=load i8*,i8**%aV,align 8
%aX=bitcast i8**%d to i8***
%aY=load i8**,i8***%aX,align 8
store i8*null,i8**%d,align 8
%aZ=load i8*,i8**%aY,align 8
%a0=call fastcc i8*%aU(i8*inreg%aW,i8*inreg%aZ)
%a1=bitcast void(...)*%aF to i8*(i8*,i8*)*
%a2=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%a3=call fastcc i8*%a1(i8*inreg%a2,i8*inreg%a0)
%a4=getelementptr inbounds i8,i8*%a3,i64 16
%a5=bitcast i8*%a4 to i8*(i8*,i8*)**
%a6=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a5,align 8
%a7=bitcast i8*%a3 to i8**
%a8=load i8*,i8**%a7,align 8
%a9=load i8**,i8***%aa,align 8
%ba=load i8*,i8**%a9,align 8
%bb=call fastcc i8*%a6(i8*inreg%a8,i8*inreg%ba)
%bc=getelementptr inbounds i8,i8*%bb,i64 16
%bd=bitcast i8*%bc to i8*(i8*,i8*)**
%be=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bd,align 8
%bf=bitcast i8*%bb to i8**
%bg=load i8*,i8**%bf,align 8
%bh=load i8*,i8**%c,align 8
%bi=getelementptr inbounds i8,i8*%bh,i64 8
%bj=bitcast i8*%bi to i8**
%bk=load i8*,i8**%bj,align 8
%bl=tail call fastcc i8*%be(i8*inreg%bg,i8*inreg%bk)
ret i8*%bl
bm:
store i8*%aH,i8**%g,align 8
%bn=load i8*,i8**%d,align 8
%bo=getelementptr inbounds i8,i8*%bn,i64 40
%bp=bitcast i8*%bo to i32*
%bq=load i32,i32*%bp,align 4
%br=getelementptr inbounds i8,i8*%bn,i64 44
%bs=bitcast i8*%br to i32*
%bt=load i32,i32*%bs,align 4
%bu=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%bv=call fastcc i8*@_SMLL3ins_436(i8*inreg%bu,i32 inreg%bq,i32 inreg%bt)
%bw=getelementptr inbounds i8,i8*%bv,i64 16
%bx=bitcast i8*%bw to i8*(i8*,i8*)**
%by=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bx,align 8
%bz=bitcast i8*%bv to i8**
%bA=load i8*,i8**%bz,align 8
store i8*%bA,i8**%f,align 8
%bB=bitcast i8**%d to i8***
%bC=load i8**,i8***%bB,align 8
%bD=load i8*,i8**%bC,align 8
store i8*%bD,i8**%e,align 8
%bE=bitcast i8**%bC to i8*
%bF=getelementptr inbounds i8*,i8**%bC,i64 4
%bG=bitcast i8**%bF to i32*
%bH=load i32,i32*%bG,align 4
%bI=getelementptr inbounds i8,i8*%bE,i64 36
%bJ=bitcast i8*%bI to i32*
%bK=load i32,i32*%bJ,align 4
%bL=getelementptr inbounds i8*,i8**%bC,i64 5
%bM=bitcast i8**%bL to i32*
%bN=load i32,i32*%bM,align 4
store i8*null,i8**%d,align 8
%bO=getelementptr inbounds i8,i8*%bE,i64 44
%bP=bitcast i8*%bO to i32*
%bQ=load i32,i32*%bP,align 4
%bR=call i8*@sml_alloc(i32 inreg 28)#0
%bS=getelementptr inbounds i8,i8*%bR,i64 -4
%bT=bitcast i8*%bS to i32*
store i32 1342177304,i32*%bT,align 4
store i8*%bR,i8**%d,align 8
%bU=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bV=bitcast i8*%bR to i8**
store i8*%bU,i8**%bV,align 8
%bW=getelementptr inbounds i8,i8*%bR,i64 8
%bX=bitcast i8*%bW to i32*
store i32%bH,i32*%bX,align 4
%bY=getelementptr inbounds i8,i8*%bR,i64 12
%bZ=bitcast i8*%bY to i32*
store i32%bK,i32*%bZ,align 4
%b0=getelementptr inbounds i8,i8*%bR,i64 16
%b1=bitcast i8*%b0 to i32*
store i32%bN,i32*%b1,align 4
%b2=getelementptr inbounds i8,i8*%bR,i64 20
%b3=bitcast i8*%b2 to i32*
store i32%bQ,i32*%b3,align 4
%b4=getelementptr inbounds i8,i8*%bR,i64 24
%b5=bitcast i8*%b4 to i32*
store i32 1,i32*%b5,align 4
%b6=call i8*@sml_alloc(i32 inreg 28)#0
%b7=getelementptr inbounds i8,i8*%b6,i64 -4
%b8=bitcast i8*%b7 to i32*
store i32 1342177304,i32*%b8,align 4
%b9=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ca=bitcast i8*%b6 to i8**
store i8*%b9,i8**%ca,align 8
%cb=getelementptr inbounds i8,i8*%b6,i64 8
%cc=bitcast i8*%cb to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL10unionWithi_437 to void(...)*),void(...)**%cc,align 8
%cd=getelementptr inbounds i8,i8*%b6,i64 16
%ce=bitcast i8*%cd to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL10unionWithi_437 to void(...)*),void(...)**%ce,align 8
%cf=getelementptr inbounds i8,i8*%b6,i64 24
%cg=bitcast i8*%cf to i32*
store i32 1,i32*%cg,align 4
%ch=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%ci=call fastcc i8*%by(i8*inreg%ch,i8*inreg%b6)
%cj=bitcast void(...)*%aF to i8*(i8*,i8*)*
%ck=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%cl=call fastcc i8*%cj(i8*inreg%ck,i8*inreg%ci)
%cm=getelementptr inbounds i8,i8*%cl,i64 16
%cn=bitcast i8*%cm to i8*(i8*,i8*)**
%co=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%cn,align 8
%cp=bitcast i8*%cl to i8**
%cq=load i8*,i8**%cp,align 8
%cr=load i8*,i8**%c,align 8
%cs=getelementptr inbounds i8,i8*%cr,i64 8
%ct=bitcast i8*%cs to i8**
%cu=load i8*,i8**%ct,align 8
%cv=call fastcc i8*%co(i8*inreg%cq,i8*inreg%cu)
%cw=getelementptr inbounds i8,i8*%cv,i64 16
%cx=bitcast i8*%cw to i8*(i8*,i8*)**
%cy=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%cx,align 8
%cz=bitcast i8*%cv to i8**
%cA=load i8*,i8**%cz,align 8
%cB=load i8**,i8***%aa,align 8
%cC=load i8*,i8**%cB,align 8
%cD=tail call fastcc i8*%cy(i8*inreg%cA,i8*inreg%cC)
ret i8*%cD
}
define internal fastcc i8*@_SMLL10unionWithi_439(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%b,i8**%c,align 8
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%d,align 8
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
store i8*%l,i8**%e,align 8
%m=getelementptr inbounds i8,i8*%a,i64 16
%n=bitcast i8*%m to i8**
%o=load i8*,i8**%n,align 8
store i8*%o,i8**%f,align 8
%p=getelementptr inbounds i8,i8*%a,i64 24
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=getelementptr inbounds i8,i8*%a,i64 28
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=getelementptr inbounds i8,i8*%a,i64 32
%w=bitcast i8*%v to i32*
%x=load i32,i32*%w,align 4
%y=getelementptr inbounds i8,i8*%a,i64 36
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=call i8*@sml_alloc(i32 inreg 52)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177328,i32*%D,align 4
store i8*%B,i8**%g,align 8
%E=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%F=bitcast i8*%B to i8**
store i8*%E,i8**%F,align 8
%G=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%H=getelementptr inbounds i8,i8*%B,i64 8
%I=bitcast i8*%H to i8**
store i8*%G,i8**%I,align 8
%J=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%K=getelementptr inbounds i8,i8*%B,i64 16
%L=bitcast i8*%K to i8**
store i8*%J,i8**%L,align 8
%M=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%N=getelementptr inbounds i8,i8*%B,i64 24
%O=bitcast i8*%N to i8**
store i8*%M,i8**%O,align 8
%P=getelementptr inbounds i8,i8*%B,i64 32
%Q=bitcast i8*%P to i32*
store i32%r,i32*%Q,align 4
%R=getelementptr inbounds i8,i8*%B,i64 36
%S=bitcast i8*%R to i32*
store i32%u,i32*%S,align 4
%T=getelementptr inbounds i8,i8*%B,i64 40
%U=bitcast i8*%T to i32*
store i32%x,i32*%U,align 4
%V=getelementptr inbounds i8,i8*%B,i64 44
%W=bitcast i8*%V to i32*
store i32%A,i32*%W,align 4
%X=getelementptr inbounds i8,i8*%B,i64 48
%Y=bitcast i8*%X to i32*
store i32 15,i32*%Y,align 4
%Z=call i8*@sml_alloc(i32 inreg 28)#0
%aa=getelementptr inbounds i8,i8*%Z,i64 -4
%ab=bitcast i8*%aa to i32*
store i32 1342177304,i32*%ab,align 4
%ac=load i8*,i8**%g,align 8
%ad=bitcast i8*%Z to i8**
store i8*%ac,i8**%ad,align 8
%ae=getelementptr inbounds i8,i8*%Z,i64 8
%af=bitcast i8*%ae to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL10unionWithi_438 to void(...)*),void(...)**%af,align 8
%ag=getelementptr inbounds i8,i8*%Z,i64 16
%ah=bitcast i8*%ag to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL10unionWithi_438 to void(...)*),void(...)**%ah,align 8
%ai=getelementptr inbounds i8,i8*%Z,i64 24
%aj=bitcast i8*%ai to i32*
store i32 -2147483647,i32*%aj,align 4
ret i8*%Z
}
define internal fastcc i8*@_SMLL10unionWithi_440(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%d,align 8
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
store i8*%l,i8**%e,align 8
%m=getelementptr inbounds i8,i8*%a,i64 16
%n=bitcast i8*%m to i8**
%o=load i8*,i8**%n,align 8
store i8*%o,i8**%f,align 8
%p=getelementptr inbounds i8,i8*%a,i64 24
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=getelementptr inbounds i8,i8*%a,i64 28
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=call i8*@sml_alloc(i32 inreg 44)#0
%w=getelementptr inbounds i8,i8*%v,i64 -4
%x=bitcast i8*%w to i32*
store i32 1342177320,i32*%x,align 4
store i8*%v,i8**%g,align 8
%y=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%z=bitcast i8*%v to i8**
store i8*%y,i8**%z,align 8
%A=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%B=getelementptr inbounds i8,i8*%v,i64 8
%C=bitcast i8*%B to i8**
store i8*%A,i8**%C,align 8
%D=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%E=getelementptr inbounds i8,i8*%v,i64 16
%F=bitcast i8*%E to i8**
store i8*%D,i8**%F,align 8
%G=getelementptr inbounds i8,i8*%v,i64 24
%H=bitcast i8*%G to i32*
store i32%r,i32*%H,align 4
%I=getelementptr inbounds i8,i8*%v,i64 28
%J=bitcast i8*%I to i32*
store i32%u,i32*%J,align 4
%K=getelementptr inbounds i8,i8*%v,i64 32
%L=bitcast i8*%K to i32*
store i32%b,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%v,i64 36
%N=bitcast i8*%M to i32*
store i32%c,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%v,i64 40
%P=bitcast i8*%O to i32*
store i32 7,i32*%P,align 4
%Q=call i8*@sml_alloc(i32 inreg 28)#0
%R=getelementptr inbounds i8,i8*%Q,i64 -4
%S=bitcast i8*%R to i32*
store i32 1342177304,i32*%S,align 4
%T=load i8*,i8**%g,align 8
%U=bitcast i8*%Q to i8**
store i8*%T,i8**%U,align 8
%V=getelementptr inbounds i8,i8*%Q,i64 8
%W=bitcast i8*%V to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL10unionWithi_439 to void(...)*),void(...)**%W,align 8
%X=getelementptr inbounds i8,i8*%Q,i64 16
%Y=bitcast i8*%X to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL10unionWithi_439 to void(...)*),void(...)**%Y,align 8
%Z=getelementptr inbounds i8,i8*%Q,i64 24
%aa=bitcast i8*%Z to i32*
store i32 -2147483647,i32*%aa,align 4
ret i8*%Q
}
define internal fastcc i8*@_SMLL3ins_441(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
q:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
store i8*%a,i8**%h,align 8
store i8*%b,i8**%c,align 8
%k=load atomic i32,i32*@sml_check_flag unordered,align 4
%l=icmp eq i32%k,0
br i1%l,label%o,label%m
m:
call void@sml_check(i32 inreg%k)
%n=load i8*,i8**%h,align 8
br label%o
o:
%p=phi i8*[%n,%m],[%a,%q]
%r=getelementptr inbounds i8,i8*%p,i64 28
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=add i32%t,-1
%v=sub i32 0,%t
%w=and i32%u,%v
%x=getelementptr inbounds i8,i8*%p,i64 36
%y=bitcast i8*%x to i32*
%z=load i32,i32*%y,align 4
%A=add i32%u,%z
%B=add i32%A,%w
%C=sub i32 0,%z
%D=and i32%B,%C
%E=add i32%z,7
%F=add i32%E,%D
%G=and i32%F,-8
%H=add i32%t,7
%I=and i32%H,%v
%J=add i32%I,%t
%K=add i32%J,7
%L=and i32%K,-8
%M=lshr i32%I,3
%N=getelementptr inbounds i8,i8*%p,i64 24
%O=bitcast i8*%N to i32*
%P=load i32,i32*%O,align 4
%Q=shl i32%P,%M
%R=or i32%Q,1
%S=or i32%L,4
%T=lshr i32%D,3
%U=lshr i32%w,3
%V=sub nsw i32%T,%U
%W=getelementptr inbounds i8,i8*%p,i64 32
%X=bitcast i8*%W to i32*
%Y=load i32,i32*%X,align 4
%Z=shl i32%Y,%V
%aa=or i32%Z,%P
%ab=or i32%G,4
%ac=add i32%z,-1
%ad=add i32%ac,%J
%ae=and i32%ad,%C
%af=add i32%E,%ae
%ag=and i32%af,-8
%ah=lshr i32%ae,3
%ai=sub nsw i32%ah,%M
%aj=shl i32%Y,%ai
%ak=or i32%aj,%P
%al=shl i32%ak,%M
%am=or i32%al,1
%an=or i32%ag,4
%ao=icmp eq i32%P,0
br i1%ao,label%av,label%ap
ap:
%aq=load i8*,i8**%c,align 8
%ar=sext i32%w to i64
%as=getelementptr inbounds i8,i8*%aq,i64%ar
%at=bitcast i8*%as to i8**
%au=load i8*,i8**%at,align 8
br label%aG
av:
%aw=call i8*@sml_alloc(i32 inreg%t)#0
%ax=getelementptr inbounds i8,i8*%aw,i64 -4
%ay=bitcast i8*%ax to i32*
store i32%t,i32*%ay,align 4
%az=load i8*,i8**%c,align 8
%aA=sext i32%w to i64
%aB=getelementptr inbounds i8,i8*%az,i64%aA
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aw,i8*%aB,i32%t,i1 false)
%aC=load i8*,i8**%h,align 8
%aD=getelementptr inbounds i8,i8*%aC,i64 32
%aE=bitcast i8*%aD to i32*
%aF=load i32,i32*%aE,align 4
br label%aG
aG:
%aH=phi i8*[%az,%av],[%aq,%ap]
%aI=phi i32[%aF,%av],[%Y,%ap]
%aJ=phi i8*[%aC,%av],[%p,%ap]
%aK=phi i8*[%aw,%av],[%au,%ap]
store i8*%aK,i8**%d,align 8
%aL=icmp eq i32%aI,0
br i1%aL,label%aR,label%aM
aM:
%aN=sext i32%D to i64
%aO=getelementptr inbounds i8,i8*%aH,i64%aN
%aP=bitcast i8*%aO to i8**
%aQ=load i8*,i8**%aP,align 8
br label%a5
aR:
%aS=getelementptr inbounds i8,i8*%aJ,i64 36
%aT=bitcast i8*%aS to i32*
%aU=load i32,i32*%aT,align 4
%aV=call i8*@sml_alloc(i32 inreg%aU)#0
%aW=getelementptr inbounds i8,i8*%aV,i64 -4
%aX=bitcast i8*%aW to i32*
store i32%aU,i32*%aX,align 4
%aY=load i8*,i8**%c,align 8
%aZ=sext i32%D to i64
%a0=getelementptr inbounds i8,i8*%aY,i64%aZ
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aV,i8*%a0,i32%aU,i1 false)
%a1=load i8*,i8**%h,align 8
%a2=getelementptr inbounds i8,i8*%a1,i64 32
%a3=bitcast i8*%a2 to i32*
%a4=load i32,i32*%a3,align 4
br label%a5
a5:
%a6=phi i32[%a4,%aR],[%aI,%aM]
%a7=phi i8*[%a1,%aR],[%aJ,%aM]
%a8=phi i8*[%aY,%aR],[%aH,%aM]
%a9=phi i8*[%aV,%aR],[%aQ,%aM]
store i8*%a9,i8**%e,align 8
store i8*null,i8**%c,align 8
%ba=sext i32%G to i64
%bb=getelementptr inbounds i8,i8*%a8,i64%ba
%bc=bitcast i8*%bb to i8**
%bd=load i8*,i8**%bc,align 8
store i8*%bd,i8**%f,align 8
%be=getelementptr inbounds i8,i8*%a7,i64 16
%bf=bitcast i8*%be to i8**
%bg=load i8*,i8**%bf,align 8
%bh=getelementptr inbounds i8,i8*%a7,i64 36
%bi=bitcast i8*%bh to i32*
%bj=load i32,i32*%bi,align 4
%bk=call fastcc i8*@_SMLL5findi_357(i8*inreg%bg,i32 inreg%a6,i32 inreg%bj)
%bl=getelementptr inbounds i8,i8*%bk,i64 16
%bm=bitcast i8*%bl to i8*(i8*,i8*)**
%bn=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bm,align 8
%bo=bitcast i8*%bk to i8**
%bp=load i8*,i8**%bo,align 8
store i8*%bp,i8**%c,align 8
%bq=load i8*,i8**%h,align 8
%br=getelementptr inbounds i8,i8*%bq,i64 28
%bs=bitcast i8*%br to i32*
%bt=load i32,i32*%bs,align 4
%bu=getelementptr inbounds i8,i8*%bq,i64 24
%bv=bitcast i8*%bu to i32*
%bw=load i32,i32*%bv,align 4
%bx=call i8*@sml_alloc(i32 inreg%S)#0
%by=or i32%L,1342177280
%bz=getelementptr inbounds i8,i8*%bx,i64 -4
%bA=bitcast i8*%bz to i32*
store i32%by,i32*%bA,align 4
call void@llvm.memset.p0i8.i32(i8*%bx,i8 0,i32%S,i1 false)
%bB=load i8*,i8**%f,align 8
%bC=bitcast i8*%bx to i8**
store i8*%bB,i8**%bC,align 8
%bD=icmp eq i32%bw,0
%bE=load i8*,i8**%d,align 8
%bF=sext i32%I to i64
%bG=getelementptr inbounds i8,i8*%bx,i64%bF
br i1%bD,label%bJ,label%bH
bH:
%bI=bitcast i8*%bG to i8**
store i8*%bE,i8**%bI,align 8
br label%bK
bJ:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bG,i8*%bE,i32%bt,i1 false)
br label%bK
bK:
%bL=sext i32%L to i64
%bM=getelementptr inbounds i8,i8*%bx,i64%bL
%bN=bitcast i8*%bM to i32*
store i32%R,i32*%bN,align 4
%bO=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bP=call fastcc i8*%bn(i8*inreg%bO,i8*inreg%bx)
%bQ=icmp eq i8*%bP,null
br i1%bQ,label%bR,label%cL
bR:
%bS=load i8*,i8**%h,align 8
%bT=getelementptr inbounds i8,i8*%bS,i64 8
%bU=bitcast i8*%bT to i8**
%bV=load i8*,i8**%bU,align 8
%bW=getelementptr inbounds i8,i8*%bS,i64 32
%bX=bitcast i8*%bW to i32*
%bY=load i32,i32*%bX,align 4
%bZ=getelementptr inbounds i8,i8*%bS,i64 36
%b0=bitcast i8*%bZ to i32*
%b1=load i32,i32*%b0,align 4
%b2=call fastcc i8*@_SMLL6insert_334(i8*inreg%bV,i32 inreg%bY,i32 inreg%b1)
%b3=getelementptr inbounds i8,i8*%b2,i64 16
%b4=bitcast i8*%b3 to i8*(i8*,i8*)**
%b5=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%b4,align 8
%b6=bitcast i8*%b2 to i8**
%b7=load i8*,i8**%b6,align 8
store i8*%b7,i8**%c,align 8
%b8=load i8*,i8**%h,align 8
%b9=getelementptr inbounds i8,i8*%b8,i64 28
%ca=bitcast i8*%b9 to i32*
%cb=load i32,i32*%ca,align 4
%cc=getelementptr inbounds i8,i8*%b8,i64 24
%cd=bitcast i8*%cc to i32*
%ce=load i32,i32*%cd,align 4
%cf=getelementptr inbounds i8,i8*%b8,i64 36
%cg=bitcast i8*%cf to i32*
%ch=load i32,i32*%cg,align 4
store i8*null,i8**%h,align 8
%ci=getelementptr inbounds i8,i8*%b8,i64 32
%cj=bitcast i8*%ci to i32*
%ck=load i32,i32*%cj,align 4
%cl=call i8*@sml_alloc(i32 inreg%an)#0
%cm=or i32%ag,1342177280
%cn=getelementptr inbounds i8,i8*%cl,i64 -4
%co=bitcast i8*%cn to i32*
store i32%cm,i32*%co,align 4
call void@llvm.memset.p0i8.i32(i8*%cl,i8 0,i32%an,i1 false)
%cp=load i8*,i8**%f,align 8
%cq=bitcast i8*%cl to i8**
store i8*%cp,i8**%cq,align 8
%cr=icmp eq i32%ce,0
%cs=load i8*,i8**%d,align 8
%ct=getelementptr inbounds i8,i8*%cl,i64%bF
br i1%cr,label%cw,label%cu
cu:
%cv=bitcast i8*%ct to i8**
store i8*%cs,i8**%cv,align 8
br label%cx
cw:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ct,i8*%cs,i32%cb,i1 false)
br label%cx
cx:
%cy=icmp eq i32%ck,0
%cz=load i8*,i8**%e,align 8
%cA=sext i32%ae to i64
%cB=getelementptr inbounds i8,i8*%cl,i64%cA
br i1%cy,label%cE,label%cC
cC:
%cD=bitcast i8*%cB to i8**
store i8*%cz,i8**%cD,align 8
br label%cF
cE:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cB,i8*%cz,i32%ch,i1 false)
br label%cF
cF:
%cG=sext i32%ag to i64
%cH=getelementptr inbounds i8,i8*%cl,i64%cG
%cI=bitcast i8*%cH to i32*
store i32%am,i32*%cI,align 4
%cJ=load i8*,i8**%c,align 8
%cK=tail call fastcc i8*%b5(i8*inreg%cJ,i8*inreg%cl)
ret i8*%cK
cL:
%cM=bitcast i8*%bP to i8**
%cN=load i8*,i8**%cM,align 8
store i8*%cN,i8**%c,align 8
%cO=load i8*,i8**%h,align 8
%cP=getelementptr inbounds i8,i8*%cO,i64 24
%cQ=bitcast i8*%cP to i32*
%cR=load i32,i32*%cQ,align 4
%cS=icmp eq i32%cR,0
br i1%cS,label%cY,label%cT
cT:
%cU=sext i32%w to i64
%cV=getelementptr inbounds i8,i8*%cN,i64%cU
%cW=bitcast i8*%cV to i8**
%cX=load i8*,i8**%cW,align 8
br label%c9
cY:
%cZ=getelementptr inbounds i8,i8*%cO,i64 28
%c0=bitcast i8*%cZ to i32*
%c1=load i32,i32*%c0,align 4
%c2=call i8*@sml_alloc(i32 inreg%c1)#0
%c3=getelementptr inbounds i8,i8*%c2,i64 -4
%c4=bitcast i8*%c3 to i32*
store i32%c1,i32*%c4,align 4
%c5=load i8*,i8**%c,align 8
%c6=sext i32%w to i64
%c7=getelementptr inbounds i8,i8*%c5,i64%c6
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%c2,i8*%c7,i32%c1,i1 false)
%c8=load i8*,i8**%h,align 8
br label%c9
c9:
%da=phi i8*[%c8,%cY],[%cO,%cT]
%db=phi i8*[%c5,%cY],[%cN,%cT]
%dc=phi i8*[%c2,%cY],[%cX,%cT]
store i8*%dc,i8**%g,align 8
%dd=getelementptr inbounds i8,i8*%da,i64 32
%de=bitcast i8*%dd to i32*
%df=load i32,i32*%de,align 4
%dg=icmp eq i32%df,0
br i1%dg,label%dn,label%dh
dh:
%di=bitcast i8*%da to i8**
store i8*null,i8**%c,align 8
%dj=sext i32%D to i64
%dk=getelementptr inbounds i8,i8*%db,i64%dj
%dl=bitcast i8*%dk to i8**
%dm=load i8*,i8**%dl,align 8
br label%dD
dn:
%do=getelementptr inbounds i8,i8*%da,i64 36
%dp=bitcast i8*%do to i32*
%dq=load i32,i32*%dp,align 4
%dr=call i8*@sml_alloc(i32 inreg%dq)#0
%ds=getelementptr inbounds i8,i8*%dr,i64 -4
%dt=bitcast i8*%ds to i32*
store i32%dq,i32*%dt,align 4
%du=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%dv=sext i32%D to i64
%dw=getelementptr inbounds i8,i8*%du,i64%dv
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dr,i8*%dw,i32%dq,i1 false)
%dx=bitcast i8**%h to i8***
%dy=load i8**,i8***%dx,align 8
%dz=bitcast i8**%dy to i8*
%dA=getelementptr inbounds i8*,i8**%dy,i64 4
%dB=bitcast i8**%dA to i32*
%dC=load i32,i32*%dB,align 4
br label%dD
dD:
%dE=phi i32[%dC,%dn],[%df,%dh]
%dF=phi i8*[%dz,%dn],[%da,%dh]
%dG=phi i8**[%dy,%dn],[%di,%dh]
%dH=phi i8*[%dr,%dn],[%dm,%dh]
store i8*%dH,i8**%c,align 8
%dI=load i8*,i8**%dG,align 8
%dJ=getelementptr inbounds i8,i8*%dI,i64 16
%dK=bitcast i8*%dJ to i8*(i8*,i8*)**
%dL=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%dK,align 8
%dM=bitcast i8*%dI to i8**
%dN=load i8*,i8**%dM,align 8
store i8*%dN,i8**%j,align 8
%dO=getelementptr inbounds i8,i8*%dF,i64 28
%dP=bitcast i8*%dO to i32*
%dQ=load i32,i32*%dP,align 4
%dR=getelementptr inbounds i8,i8*%dF,i64 24
%dS=bitcast i8*%dR to i32*
%dT=load i32,i32*%dS,align 4
%dU=getelementptr inbounds i8,i8*%dF,i64 36
%dV=bitcast i8*%dU to i32*
%dW=load i32,i32*%dV,align 4
%dX=call i8*@sml_alloc(i32 inreg%ab)#0
%dY=or i32%G,1342177280
%dZ=getelementptr inbounds i8,i8*%dX,i64 -4
%d0=bitcast i8*%dZ to i32*
store i32%dY,i32*%d0,align 4
store i8*%dX,i8**%i,align 8
call void@llvm.memset.p0i8.i32(i8*%dX,i8 0,i32%ab,i1 false)
%d1=icmp eq i32%dT,0
%d2=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%d3=sext i32%w to i64
%d4=getelementptr inbounds i8,i8*%dX,i64%d3
br i1%d1,label%d7,label%d5
d5:
%d6=bitcast i8*%d4 to i8**
store i8*%d2,i8**%d6,align 8
br label%d8
d7:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%d4,i8*%d2,i32%dQ,i1 false)
br label%d8
d8:
%d9=icmp eq i32%dE,0
%ea=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%eb=sext i32%D to i64
%ec=getelementptr inbounds i8,i8*%dX,i64%eb
br i1%d9,label%ef,label%ed
ed:
%ee=bitcast i8*%ec to i8**
store i8*%ea,i8**%ee,align 8
br label%eg
ef:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ec,i8*%ea,i32%dW,i1 false)
br label%eg
eg:
%eh=getelementptr inbounds i8,i8*%dX,i64%ba
%ei=bitcast i8*%eh to i32*
store i32%aa,i32*%ei,align 4
%ej=load i8*,i8**%h,align 8
%ek=getelementptr inbounds i8,i8*%ej,i64 28
%el=bitcast i8*%ek to i32*
%em=load i32,i32*%el,align 4
%en=getelementptr inbounds i8,i8*%ej,i64 24
%eo=bitcast i8*%en to i32*
%ep=load i32,i32*%eo,align 4
%eq=getelementptr inbounds i8,i8*%ej,i64 36
%er=bitcast i8*%eq to i32*
%es=load i32,i32*%er,align 4
%et=getelementptr inbounds i8,i8*%ej,i64 32
%eu=bitcast i8*%et to i32*
%ev=load i32,i32*%eu,align 4
%ew=call i8*@sml_alloc(i32 inreg%ab)#0
%ex=getelementptr inbounds i8,i8*%ew,i64 -4
%ey=bitcast i8*%ex to i32*
store i32%dY,i32*%ey,align 4
store i8*%ew,i8**%c,align 8
call void@llvm.memset.p0i8.i32(i8*%ew,i8 0,i32%ab,i1 false)
%ez=icmp eq i32%ep,0
%eA=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%eB=getelementptr inbounds i8,i8*%ew,i64%d3
br i1%ez,label%eE,label%eC
eC:
%eD=bitcast i8*%eB to i8**
store i8*%eA,i8**%eD,align 8
br label%eF
eE:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%eB,i8*%eA,i32%em,i1 false)
br label%eF
eF:
%eG=icmp eq i32%ev,0
%eH=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%eI=getelementptr inbounds i8,i8*%ew,i64%eb
br i1%eG,label%eL,label%eJ
eJ:
%eK=bitcast i8*%eI to i8**
store i8*%eH,i8**%eK,align 8
br label%eM
eL:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%eI,i8*%eH,i32%es,i1 false)
br label%eM
eM:
%eN=getelementptr inbounds i8,i8*%ew,i64%ba
%eO=bitcast i8*%eN to i32*
store i32%aa,i32*%eO,align 4
%eP=call i8*@sml_alloc(i32 inreg 20)#0
%eQ=getelementptr inbounds i8,i8*%eP,i64 -4
%eR=bitcast i8*%eQ to i32*
store i32 1342177296,i32*%eR,align 4
%eS=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%eT=bitcast i8*%eP to i8**
store i8*%eS,i8**%eT,align 8
%eU=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%eV=getelementptr inbounds i8,i8*%eP,i64 8
%eW=bitcast i8*%eV to i8**
store i8*%eU,i8**%eW,align 8
%eX=getelementptr inbounds i8,i8*%eP,i64 16
%eY=bitcast i8*%eX to i32*
store i32 3,i32*%eY,align 4
%eZ=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%e0=call fastcc i8*%dL(i8*inreg%eZ,i8*inreg%eP)
store i8*%e0,i8**%d,align 8
%e1=load i8*,i8**%h,align 8
%e2=getelementptr inbounds i8,i8*%e1,i64 24
%e3=bitcast i8*%e2 to i32*
%e4=load i32,i32*%e3,align 4
%e5=icmp eq i32%e4,0
br i1%e5,label%fa,label%e6
e6:
%e7=getelementptr inbounds i8,i8*%e0,i64%d3
%e8=bitcast i8*%e7 to i8**
%e9=load i8*,i8**%e8,align 8
br label%fk
fa:
%fb=getelementptr inbounds i8,i8*%e1,i64 28
%fc=bitcast i8*%fb to i32*
%fd=load i32,i32*%fc,align 4
%fe=call i8*@sml_alloc(i32 inreg%fd)#0
%ff=getelementptr inbounds i8,i8*%fe,i64 -4
%fg=bitcast i8*%ff to i32*
store i32%fd,i32*%fg,align 4
%fh=load i8*,i8**%d,align 8
%fi=getelementptr inbounds i8,i8*%fh,i64%d3
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%fe,i8*%fi,i32%fd,i1 false)
%fj=load i8*,i8**%h,align 8
br label%fk
fk:
%fl=phi i8*[%fh,%fa],[%e0,%e6]
%fm=phi i8*[%fj,%fa],[%e1,%e6]
%fn=phi i8*[%fe,%fa],[%e9,%e6]
store i8*%fn,i8**%c,align 8
%fo=getelementptr inbounds i8,i8*%fm,i64 32
%fp=bitcast i8*%fo to i32*
%fq=load i32,i32*%fp,align 4
%fr=icmp eq i32%fq,0
br i1%fr,label%fw,label%fs
fs:
store i8*null,i8**%d,align 8
%ft=getelementptr inbounds i8,i8*%fl,i64%eb
%fu=bitcast i8*%ft to i8**
%fv=load i8*,i8**%fu,align 8
br label%fJ
fw:
%fx=getelementptr inbounds i8,i8*%fm,i64 36
%fy=bitcast i8*%fx to i32*
%fz=load i32,i32*%fy,align 4
%fA=call i8*@sml_alloc(i32 inreg%fz)#0
%fB=getelementptr inbounds i8,i8*%fA,i64 -4
%fC=bitcast i8*%fB to i32*
store i32%fz,i32*%fC,align 4
%fD=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%fE=getelementptr inbounds i8,i8*%fD,i64%eb
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%fA,i8*%fE,i32%fz,i1 false)
%fF=load i8*,i8**%h,align 8
%fG=getelementptr inbounds i8,i8*%fF,i64 32
%fH=bitcast i8*%fG to i32*
%fI=load i32,i32*%fH,align 4
br label%fJ
fJ:
%fK=phi i32[%fI,%fw],[%fq,%fs]
%fL=phi i8*[%fF,%fw],[%fm,%fs]
%fM=phi i8*[%fA,%fw],[%fv,%fs]
store i8*%fM,i8**%d,align 8
%fN=getelementptr inbounds i8,i8*%fL,i64 8
%fO=bitcast i8*%fN to i8**
%fP=load i8*,i8**%fO,align 8
%fQ=getelementptr inbounds i8,i8*%fL,i64 36
%fR=bitcast i8*%fQ to i32*
%fS=load i32,i32*%fR,align 4
%fT=call fastcc i8*@_SMLL6insert_334(i8*inreg%fP,i32 inreg%fK,i32 inreg%fS)
%fU=getelementptr inbounds i8,i8*%fT,i64 16
%fV=bitcast i8*%fU to i8*(i8*,i8*)**
%fW=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%fV,align 8
%fX=bitcast i8*%fT to i8**
%fY=load i8*,i8**%fX,align 8
store i8*%fY,i8**%e,align 8
%fZ=load i8*,i8**%h,align 8
%f0=getelementptr inbounds i8,i8*%fZ,i64 28
%f1=bitcast i8*%f0 to i32*
%f2=load i32,i32*%f1,align 4
%f3=getelementptr inbounds i8,i8*%fZ,i64 24
%f4=bitcast i8*%f3 to i32*
%f5=load i32,i32*%f4,align 4
%f6=getelementptr inbounds i8,i8*%fZ,i64 36
%f7=bitcast i8*%f6 to i32*
%f8=load i32,i32*%f7,align 4
store i8*null,i8**%h,align 8
%f9=getelementptr inbounds i8,i8*%fZ,i64 32
%ga=bitcast i8*%f9 to i32*
%gb=load i32,i32*%ga,align 4
%gc=call i8*@sml_alloc(i32 inreg%an)#0
%gd=or i32%ag,1342177280
%ge=getelementptr inbounds i8,i8*%gc,i64 -4
%gf=bitcast i8*%ge to i32*
store i32%gd,i32*%gf,align 4
call void@llvm.memset.p0i8.i32(i8*%gc,i8 0,i32%an,i1 false)
%gg=load i8*,i8**%f,align 8
%gh=bitcast i8*%gc to i8**
store i8*%gg,i8**%gh,align 8
%gi=icmp eq i32%f5,0
%gj=load i8*,i8**%c,align 8
%gk=getelementptr inbounds i8,i8*%gc,i64%bF
br i1%gi,label%gn,label%gl
gl:
%gm=bitcast i8*%gk to i8**
store i8*%gj,i8**%gm,align 8
br label%go
gn:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%gk,i8*%gj,i32%f2,i1 false)
br label%go
go:
%gp=icmp eq i32%gb,0
%gq=load i8*,i8**%d,align 8
%gr=sext i32%ae to i64
%gs=getelementptr inbounds i8,i8*%gc,i64%gr
br i1%gp,label%gv,label%gt
gt:
%gu=bitcast i8*%gs to i8**
store i8*%gq,i8**%gu,align 8
br label%gw
gv:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%gs,i8*%gq,i32%f8,i1 false)
br label%gw
gw:
%gx=sext i32%ag to i64
%gy=getelementptr inbounds i8,i8*%gc,i64%gx
%gz=bitcast i8*%gy to i32*
store i32%am,i32*%gz,align 4
%gA=load i8*,i8**%e,align 8
%gB=tail call fastcc i8*%fW(i8*inreg%gA,i8*inreg%gc)
ret i8*%gB
}
define internal fastcc i8*@_SMLL3ins_442(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=getelementptr inbounds i8,i8*%a,i64 16
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%a,i64 20
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=getelementptr inbounds i8,i8*%a,i64 24
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=getelementptr inbounds i8,i8*%a,i64 28
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=call i8*@sml_alloc(i32 inreg 44)#0
%y=getelementptr inbounds i8,i8*%x,i64 -4
%z=bitcast i8*%y to i32*
store i32 1342177320,i32*%z,align 4
store i8*%x,i8**%f,align 8
%A=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%B=bitcast i8*%x to i8**
store i8*%A,i8**%B,align 8
%C=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%D=getelementptr inbounds i8,i8*%x,i64 8
%E=bitcast i8*%D to i8**
store i8*%C,i8**%E,align 8
%F=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%G=getelementptr inbounds i8,i8*%x,i64 16
%H=bitcast i8*%G to i8**
store i8*%F,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%x,i64 24
%J=bitcast i8*%I to i32*
store i32%n,i32*%J,align 4
%K=getelementptr inbounds i8,i8*%x,i64 28
%L=bitcast i8*%K to i32*
store i32%q,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%x,i64 32
%N=bitcast i8*%M to i32*
store i32%t,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%x,i64 36
%P=bitcast i8*%O to i32*
store i32%w,i32*%P,align 4
%Q=getelementptr inbounds i8,i8*%x,i64 40
%R=bitcast i8*%Q to i32*
store i32 7,i32*%R,align 4
%S=call i8*@sml_alloc(i32 inreg 28)#0
%T=getelementptr inbounds i8,i8*%S,i64 -4
%U=bitcast i8*%T to i32*
store i32 1342177304,i32*%U,align 4
%V=load i8*,i8**%f,align 8
%W=bitcast i8*%S to i8**
store i8*%V,i8**%W,align 8
%X=getelementptr inbounds i8,i8*%S,i64 8
%Y=bitcast i8*%X to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3ins_441 to void(...)*),void(...)**%Y,align 8
%Z=getelementptr inbounds i8,i8*%S,i64 16
%aa=bitcast i8*%Z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3ins_441 to void(...)*),void(...)**%aa,align 8
%ab=getelementptr inbounds i8,i8*%S,i64 24
%ac=bitcast i8*%ab to i32*
store i32 -2147483647,i32*%ac,align 4
ret i8*%S
}
define internal fastcc i8*@_SMLL3ins_443(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=getelementptr inbounds i8,i8*%a,i64 16
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%a,i64 20
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=call i8*@sml_alloc(i32 inreg 36)#0
%s=getelementptr inbounds i8,i8*%r,i64 -4
%t=bitcast i8*%s to i32*
store i32 1342177312,i32*%t,align 4
store i8*%r,i8**%f,align 8
%u=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%v=bitcast i8*%r to i8**
store i8*%u,i8**%v,align 8
%w=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%x=getelementptr inbounds i8,i8*%r,i64 8
%y=bitcast i8*%x to i8**
store i8*%w,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%r,i64 16
%A=bitcast i8*%z to i32*
store i32%n,i32*%A,align 4
%B=getelementptr inbounds i8,i8*%r,i64 20
%C=bitcast i8*%B to i32*
store i32%q,i32*%C,align 4
%D=getelementptr inbounds i8,i8*%r,i64 24
%E=bitcast i8*%D to i32*
store i32%b,i32*%E,align 4
%F=getelementptr inbounds i8,i8*%r,i64 28
%G=bitcast i8*%F to i32*
store i32%c,i32*%G,align 4
%H=getelementptr inbounds i8,i8*%r,i64 32
%I=bitcast i8*%H to i32*
store i32 3,i32*%I,align 4
%J=call i8*@sml_alloc(i32 inreg 28)#0
%K=getelementptr inbounds i8,i8*%J,i64 -4
%L=bitcast i8*%K to i32*
store i32 1342177304,i32*%L,align 4
%M=load i8*,i8**%f,align 8
%N=bitcast i8*%J to i8**
store i8*%M,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%J,i64 8
%P=bitcast i8*%O to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3ins_442 to void(...)*),void(...)**%P,align 8
%Q=getelementptr inbounds i8,i8*%J,i64 16
%R=bitcast i8*%Q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3ins_442 to void(...)*),void(...)**%R,align 8
%S=getelementptr inbounds i8,i8*%J,i64 24
%T=bitcast i8*%S to i32*
store i32 -2147483647,i32*%T,align 4
ret i8*%J
}
define internal fastcc i8*@_SMLL11unionWithi2_444(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%h,label%j
h:
%i=bitcast i8*%a to i8**
br label%n
j:
call void@sml_check(i32 inreg%f)
%k=load i8*,i8**%c,align 8
%l=bitcast i8**%e to i8***
%m=load i8**,i8***%l,align 8
br label%n
n:
%o=phi i8**[%m,%j],[%i,%h]
%p=phi i8*[%k,%j],[%b,%h]
%q=bitcast i8*%p to i8**
%r=load i8*,i8**%q,align 8
store i8*%r,i8**%c,align 8
%s=getelementptr inbounds i8,i8*%p,i64 8
%t=bitcast i8*%s to i8**
%u=load i8*,i8**%t,align 8
store i8*%u,i8**%d,align 8
%v=load i8*,i8**%o,align 8
%w=getelementptr inbounds i8,i8*%v,i64 16
%x=bitcast i8*%w to i8*(i8*,i8*)**
%y=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%x,align 8
%z=bitcast i8*%v to i8**
%A=load i8*,i8**%z,align 8
store i8*%A,i8**%e,align 8
%B=call i8*@sml_alloc(i32 inreg 20)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177296,i32*%D,align 4
%E=load i8*,i8**%d,align 8
%F=bitcast i8*%B to i8**
store i8*%E,i8**%F,align 8
%G=load i8*,i8**%c,align 8
%H=getelementptr inbounds i8,i8*%B,i64 8
%I=bitcast i8*%H to i8**
store i8*%G,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%B,i64 16
%K=bitcast i8*%J to i32*
store i32 3,i32*%K,align 4
%L=load i8*,i8**%e,align 8
%M=tail call fastcc i8*%y(i8*inreg%L,i8*inreg%B)
ret i8*%M
}
define internal fastcc i8*@_SMLL11unionWithi2_445(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
n:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%l,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%d,align 8
br label%l
l:
%m=phi i8*[%k,%j],[%a,%n]
%o=getelementptr inbounds i8,i8*%m,i64 8
%p=bitcast i8*%o to i8**
%q=load i8*,i8**%p,align 8
store i8*%q,i8**%e,align 8
%r=getelementptr inbounds i8,i8*%m,i64 16
%s=bitcast i8*%r to i8**
%t=load i8*,i8**%s,align 8
store i8*%t,i8**%f,align 8
%u=getelementptr inbounds i8,i8*%m,i64 32
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=getelementptr inbounds i8,i8*%m,i64 36
%y=bitcast i8*%x to i32*
%z=load i32,i32*%y,align 4
%A=call i8*@sml_alloc(i32 inreg 28)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177304,i32*%C,align 4
store i8*%A,i8**%g,align 8
%D=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%E=bitcast i8*%A to i8**
store i8*%D,i8**%E,align 8
%F=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%G=getelementptr inbounds i8,i8*%A,i64 8
%H=bitcast i8*%G to i8**
store i8*%F,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%A,i64 16
%J=bitcast i8*%I to i32*
store i32%w,i32*%J,align 4
%K=getelementptr inbounds i8,i8*%A,i64 20
%L=bitcast i8*%K to i32*
store i32%z,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%A,i64 24
%N=bitcast i8*%M to i32*
store i32 3,i32*%N,align 4
%O=call i8*@sml_alloc(i32 inreg 28)#0
%P=getelementptr inbounds i8,i8*%O,i64 -4
%Q=bitcast i8*%P to i32*
store i32 1342177304,i32*%Q,align 4
%R=load i8*,i8**%g,align 8
%S=bitcast i8*%O to i8**
store i8*%R,i8**%S,align 8
%T=getelementptr inbounds i8,i8*%O,i64 8
%U=bitcast i8*%T to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL3ins_443 to void(...)*),void(...)**%U,align 8
%V=getelementptr inbounds i8,i8*%O,i64 16
%W=bitcast i8*%V to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL3ins_696 to void(...)*),void(...)**%W,align 8
%X=getelementptr inbounds i8,i8*%O,i64 24
%Y=bitcast i8*%X to i32*
store i32 -2147483647,i32*%Y,align 4
%Z=bitcast i8**%c to i8***
%aa=load i8**,i8***%Z,align 8
%ab=load i8*,i8**%aa,align 8
%ac=icmp eq i8*%ab,null
br i1%ac,label%ag,label%ad
ad:
%ae=bitcast i8*%ab to i32*
%af=load i32,i32*%ae,align 4
br label%ag
ag:
%ah=phi i32[%af,%ad],[0,%l]
%ai=getelementptr inbounds i8*,i8**%aa,i64 1
%aj=load i8*,i8**%ai,align 8
%ak=icmp eq i8*%aj,null
br i1%ak,label%ao,label%al
al:
%am=bitcast i8*%aj to i32*
%an=load i32,i32*%am,align 4
br label%ao
ao:
%ap=phi i32[%an,%al],[0,%ag]
%aq=icmp sgt i32%ah,%ap
%ar=load i8*,i8**%d,align 8
%as=getelementptr inbounds i8,i8*%ar,i64 24
%at=bitcast i8*%as to i8**
%au=load i8*,i8**%at,align 8
%av=getelementptr inbounds i8,i8*%ar,i64 40
%aw=bitcast i8*%av to i32*
%ax=load i32,i32*%aw,align 4
%ay=getelementptr inbounds i8,i8*%ar,i64 44
%az=bitcast i8*%ay to i32*
%aA=load i32,i32*%az,align 4
%aB=call fastcc i8*@_SMLL6foldli_411(i8*inreg%au,i32 inreg%ax,i32 inreg%aA,i32 inreg 1,i32 inreg 8)
%aC=getelementptr inbounds i8,i8*%aB,i64 16
%aD=bitcast i8*%aC to void(...)**
%aE=load void(...)*,void(...)**%aD,align 8
%aF=bitcast i8*%aB to i8**
%aG=load i8*,i8**%aF,align 8
br i1%aq,label%aH,label%bl
aH:
store i8*%aG,i8**%e,align 8
%aI=load i8*,i8**%d,align 8
%aJ=getelementptr inbounds i8,i8*%aI,i64 40
%aK=bitcast i8*%aJ to i32*
%aL=load i32,i32*%aK,align 4
%aM=getelementptr inbounds i8,i8*%aI,i64 44
%aN=bitcast i8*%aM to i32*
%aO=load i32,i32*%aN,align 4
%aP=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%aQ=call fastcc i8*@_SMLL3ins_443(i8*inreg%aP,i32 inreg%aL,i32 inreg%aO)
%aR=getelementptr inbounds i8,i8*%aQ,i64 16
%aS=bitcast i8*%aR to i8*(i8*,i8*)**
%aT=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aS,align 8
%aU=bitcast i8*%aQ to i8**
%aV=load i8*,i8**%aU,align 8
%aW=bitcast i8**%d to i8***
%aX=load i8**,i8***%aW,align 8
store i8*null,i8**%d,align 8
%aY=load i8*,i8**%aX,align 8
%aZ=call fastcc i8*%aT(i8*inreg%aV,i8*inreg%aY)
%a0=bitcast void(...)*%aE to i8*(i8*,i8*)*
%a1=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%a2=call fastcc i8*%a0(i8*inreg%a1,i8*inreg%aZ)
%a3=getelementptr inbounds i8,i8*%a2,i64 16
%a4=bitcast i8*%a3 to i8*(i8*,i8*)**
%a5=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a4,align 8
%a6=bitcast i8*%a2 to i8**
%a7=load i8*,i8**%a6,align 8
%a8=load i8**,i8***%Z,align 8
%a9=load i8*,i8**%a8,align 8
%ba=call fastcc i8*%a5(i8*inreg%a7,i8*inreg%a9)
%bb=getelementptr inbounds i8,i8*%ba,i64 16
%bc=bitcast i8*%bb to i8*(i8*,i8*)**
%bd=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bc,align 8
%be=bitcast i8*%ba to i8**
%bf=load i8*,i8**%be,align 8
%bg=load i8*,i8**%c,align 8
%bh=getelementptr inbounds i8,i8*%bg,i64 8
%bi=bitcast i8*%bh to i8**
%bj=load i8*,i8**%bi,align 8
%bk=tail call fastcc i8*%bd(i8*inreg%bf,i8*inreg%bj)
ret i8*%bk
bl:
store i8*%aG,i8**%f,align 8
%bm=load i8*,i8**%d,align 8
%bn=getelementptr inbounds i8,i8*%bm,i64 40
%bo=bitcast i8*%bn to i32*
%bp=load i32,i32*%bo,align 4
%bq=getelementptr inbounds i8,i8*%bm,i64 44
%br=bitcast i8*%bq to i32*
%bs=load i32,i32*%br,align 4
%bt=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%bu=call fastcc i8*@_SMLL3ins_443(i8*inreg%bt,i32 inreg%bp,i32 inreg%bs)
%bv=getelementptr inbounds i8,i8*%bu,i64 16
%bw=bitcast i8*%bv to i8*(i8*,i8*)**
%bx=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bw,align 8
%by=bitcast i8*%bu to i8**
%bz=load i8*,i8**%by,align 8
store i8*%bz,i8**%e,align 8
%bA=bitcast i8**%d to i8***
%bB=load i8**,i8***%bA,align 8
%bC=load i8*,i8**%bB,align 8
store i8*%bC,i8**%d,align 8
%bD=call i8*@sml_alloc(i32 inreg 12)#0
%bE=getelementptr inbounds i8,i8*%bD,i64 -4
%bF=bitcast i8*%bE to i32*
store i32 1342177288,i32*%bF,align 4
store i8*%bD,i8**%g,align 8
%bG=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bH=bitcast i8*%bD to i8**
store i8*%bG,i8**%bH,align 8
%bI=getelementptr inbounds i8,i8*%bD,i64 8
%bJ=bitcast i8*%bI to i32*
store i32 1,i32*%bJ,align 4
%bK=call i8*@sml_alloc(i32 inreg 28)#0
%bL=getelementptr inbounds i8,i8*%bK,i64 -4
%bM=bitcast i8*%bL to i32*
store i32 1342177304,i32*%bM,align 4
%bN=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%bO=bitcast i8*%bK to i8**
store i8*%bN,i8**%bO,align 8
%bP=getelementptr inbounds i8,i8*%bK,i64 8
%bQ=bitcast i8*%bP to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL11unionWithi2_444 to void(...)*),void(...)**%bQ,align 8
%bR=getelementptr inbounds i8,i8*%bK,i64 16
%bS=bitcast i8*%bR to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL11unionWithi2_444 to void(...)*),void(...)**%bS,align 8
%bT=getelementptr inbounds i8,i8*%bK,i64 24
%bU=bitcast i8*%bT to i32*
store i32 -2147483647,i32*%bU,align 4
%bV=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bW=call fastcc i8*%bx(i8*inreg%bV,i8*inreg%bK)
%bX=bitcast void(...)*%aE to i8*(i8*,i8*)*
%bY=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%bZ=call fastcc i8*%bX(i8*inreg%bY,i8*inreg%bW)
%b0=getelementptr inbounds i8,i8*%bZ,i64 16
%b1=bitcast i8*%b0 to i8*(i8*,i8*)**
%b2=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%b1,align 8
%b3=bitcast i8*%bZ to i8**
%b4=load i8*,i8**%b3,align 8
%b5=load i8*,i8**%c,align 8
%b6=getelementptr inbounds i8,i8*%b5,i64 8
%b7=bitcast i8*%b6 to i8**
%b8=load i8*,i8**%b7,align 8
%b9=call fastcc i8*%b2(i8*inreg%b4,i8*inreg%b8)
%ca=getelementptr inbounds i8,i8*%b9,i64 16
%cb=bitcast i8*%ca to i8*(i8*,i8*)**
%cc=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%cb,align 8
%cd=bitcast i8*%b9 to i8**
%ce=load i8*,i8**%cd,align 8
%cf=load i8**,i8***%Z,align 8
%cg=load i8*,i8**%cf,align 8
%ch=tail call fastcc i8*%cc(i8*inreg%ce,i8*inreg%cg)
ret i8*%ch
}
define internal fastcc i8*@_SMLL11unionWithi2_446(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%b,i8**%c,align 8
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%d,align 8
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
store i8*%l,i8**%e,align 8
%m=getelementptr inbounds i8,i8*%a,i64 16
%n=bitcast i8*%m to i8**
%o=load i8*,i8**%n,align 8
store i8*%o,i8**%f,align 8
%p=getelementptr inbounds i8,i8*%a,i64 24
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=getelementptr inbounds i8,i8*%a,i64 28
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=getelementptr inbounds i8,i8*%a,i64 32
%w=bitcast i8*%v to i32*
%x=load i32,i32*%w,align 4
%y=getelementptr inbounds i8,i8*%a,i64 36
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=call i8*@sml_alloc(i32 inreg 52)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177328,i32*%D,align 4
store i8*%B,i8**%g,align 8
%E=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%F=bitcast i8*%B to i8**
store i8*%E,i8**%F,align 8
%G=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%H=getelementptr inbounds i8,i8*%B,i64 8
%I=bitcast i8*%H to i8**
store i8*%G,i8**%I,align 8
%J=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%K=getelementptr inbounds i8,i8*%B,i64 16
%L=bitcast i8*%K to i8**
store i8*%J,i8**%L,align 8
%M=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%N=getelementptr inbounds i8,i8*%B,i64 24
%O=bitcast i8*%N to i8**
store i8*%M,i8**%O,align 8
%P=getelementptr inbounds i8,i8*%B,i64 32
%Q=bitcast i8*%P to i32*
store i32%r,i32*%Q,align 4
%R=getelementptr inbounds i8,i8*%B,i64 36
%S=bitcast i8*%R to i32*
store i32%u,i32*%S,align 4
%T=getelementptr inbounds i8,i8*%B,i64 40
%U=bitcast i8*%T to i32*
store i32%x,i32*%U,align 4
%V=getelementptr inbounds i8,i8*%B,i64 44
%W=bitcast i8*%V to i32*
store i32%A,i32*%W,align 4
%X=getelementptr inbounds i8,i8*%B,i64 48
%Y=bitcast i8*%X to i32*
store i32 15,i32*%Y,align 4
%Z=call i8*@sml_alloc(i32 inreg 28)#0
%aa=getelementptr inbounds i8,i8*%Z,i64 -4
%ab=bitcast i8*%aa to i32*
store i32 1342177304,i32*%ab,align 4
%ac=load i8*,i8**%g,align 8
%ad=bitcast i8*%Z to i8**
store i8*%ac,i8**%ad,align 8
%ae=getelementptr inbounds i8,i8*%Z,i64 8
%af=bitcast i8*%ae to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL11unionWithi2_445 to void(...)*),void(...)**%af,align 8
%ag=getelementptr inbounds i8,i8*%Z,i64 16
%ah=bitcast i8*%ag to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL11unionWithi2_445 to void(...)*),void(...)**%ah,align 8
%ai=getelementptr inbounds i8,i8*%Z,i64 24
%aj=bitcast i8*%ai to i32*
store i32 -2147483647,i32*%aj,align 4
ret i8*%Z
}
define internal fastcc i8*@_SMLL11unionWithi2_447(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%d,align 8
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
store i8*%l,i8**%e,align 8
%m=getelementptr inbounds i8,i8*%a,i64 16
%n=bitcast i8*%m to i8**
%o=load i8*,i8**%n,align 8
store i8*%o,i8**%f,align 8
%p=getelementptr inbounds i8,i8*%a,i64 24
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=getelementptr inbounds i8,i8*%a,i64 28
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=call i8*@sml_alloc(i32 inreg 44)#0
%w=getelementptr inbounds i8,i8*%v,i64 -4
%x=bitcast i8*%w to i32*
store i32 1342177320,i32*%x,align 4
store i8*%v,i8**%g,align 8
%y=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%z=bitcast i8*%v to i8**
store i8*%y,i8**%z,align 8
%A=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%B=getelementptr inbounds i8,i8*%v,i64 8
%C=bitcast i8*%B to i8**
store i8*%A,i8**%C,align 8
%D=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%E=getelementptr inbounds i8,i8*%v,i64 16
%F=bitcast i8*%E to i8**
store i8*%D,i8**%F,align 8
%G=getelementptr inbounds i8,i8*%v,i64 24
%H=bitcast i8*%G to i32*
store i32%r,i32*%H,align 4
%I=getelementptr inbounds i8,i8*%v,i64 28
%J=bitcast i8*%I to i32*
store i32%u,i32*%J,align 4
%K=getelementptr inbounds i8,i8*%v,i64 32
%L=bitcast i8*%K to i32*
store i32%b,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%v,i64 36
%N=bitcast i8*%M to i32*
store i32%c,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%v,i64 40
%P=bitcast i8*%O to i32*
store i32 7,i32*%P,align 4
%Q=call i8*@sml_alloc(i32 inreg 28)#0
%R=getelementptr inbounds i8,i8*%Q,i64 -4
%S=bitcast i8*%R to i32*
store i32 1342177304,i32*%S,align 4
%T=load i8*,i8**%g,align 8
%U=bitcast i8*%Q to i8**
store i8*%T,i8**%U,align 8
%V=getelementptr inbounds i8,i8*%Q,i64 8
%W=bitcast i8*%V to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL11unionWithi2_446 to void(...)*),void(...)**%W,align 8
%X=getelementptr inbounds i8,i8*%Q,i64 16
%Y=bitcast i8*%X to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL11unionWithi2_446 to void(...)*),void(...)**%Y,align 8
%Z=getelementptr inbounds i8,i8*%Q,i64 24
%aa=bitcast i8*%Z to i32*
store i32 -2147483647,i32*%aa,align 4
ret i8*%Q
}
define internal fastcc i8*@_SMLL3ins_448(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
q:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
store i8*%a,i8**%h,align 8
store i8*%b,i8**%c,align 8
%k=load atomic i32,i32*@sml_check_flag unordered,align 4
%l=icmp eq i32%k,0
br i1%l,label%o,label%m
m:
call void@sml_check(i32 inreg%k)
%n=load i8*,i8**%h,align 8
br label%o
o:
%p=phi i8*[%n,%m],[%a,%q]
%r=getelementptr inbounds i8,i8*%p,i64 28
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=add i32%t,-1
%v=sub i32 0,%t
%w=and i32%u,%v
%x=add i32%w,%t
%y=getelementptr inbounds i8,i8*%p,i64 44
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=add i32%x,-1
%C=add i32%B,%A
%D=sub i32 0,%A
%E=and i32%C,%D
%F=add i32%A,7
%G=add i32%F,%E
%H=and i32%G,-8
%I=add i32%t,7
%J=and i32%I,%v
%K=add i32%J,%t
%L=add i32%K,7
%M=and i32%L,-8
%N=lshr i32%J,3
%O=getelementptr inbounds i8,i8*%p,i64 24
%P=bitcast i8*%O to i32*
%Q=load i32,i32*%P,align 4
%R=shl i32%Q,%N
%S=or i32%R,1
%T=or i32%M,4
%U=getelementptr inbounds i8,i8*%p,i64 36
%V=bitcast i8*%U to i32*
%W=load i32,i32*%V,align 4
%X=add i32%W,-1
%Y=add i32%X,%x
%Z=sub i32 0,%W
%aa=and i32%Y,%Z
%ab=add i32%W,7
%ac=add i32%ab,%aa
%ad=and i32%ac,-8
%ae=lshr i32%aa,3
%af=lshr i32%w,3
%ag=sub nsw i32%ae,%af
%ah=getelementptr inbounds i8,i8*%p,i64 32
%ai=bitcast i8*%ah to i32*
%aj=load i32,i32*%ai,align 4
%ak=shl i32%aj,%ag
%al=or i32%ak,%Q
%am=or i32%ad,4
%an=lshr i32%E,3
%ao=sub nsw i32%an,%af
%ap=getelementptr inbounds i8,i8*%p,i64 40
%aq=bitcast i8*%ap to i32*
%ar=load i32,i32*%aq,align 4
%as=shl i32%ar,%ao
%at=or i32%as,%Q
%au=or i32%H,4
%av=add i32%X,%K
%aw=and i32%av,%Z
%ax=add i32%ab,%aw
%ay=and i32%ax,-8
%az=lshr i32%aw,3
%aA=sub nsw i32%az,%N
%aB=shl i32%aj,%aA
%aC=or i32%aB,%Q
%aD=shl i32%aC,%N
%aE=or i32%aD,1
%aF=or i32%ay,4
%aG=icmp eq i32%Q,0
br i1%aG,label%aN,label%aH
aH:
%aI=load i8*,i8**%c,align 8
%aJ=sext i32%w to i64
%aK=getelementptr inbounds i8,i8*%aI,i64%aJ
%aL=bitcast i8*%aK to i8**
%aM=load i8*,i8**%aL,align 8
br label%aY
aN:
%aO=call i8*@sml_alloc(i32 inreg%t)#0
%aP=getelementptr inbounds i8,i8*%aO,i64 -4
%aQ=bitcast i8*%aP to i32*
store i32%t,i32*%aQ,align 4
%aR=load i8*,i8**%c,align 8
%aS=sext i32%w to i64
%aT=getelementptr inbounds i8,i8*%aR,i64%aS
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aO,i8*%aT,i32%t,i1 false)
%aU=load i8*,i8**%h,align 8
%aV=getelementptr inbounds i8,i8*%aU,i64 40
%aW=bitcast i8*%aV to i32*
%aX=load i32,i32*%aW,align 4
br label%aY
aY:
%aZ=phi i8*[%aR,%aN],[%aI,%aH]
%a0=phi i32[%aX,%aN],[%ar,%aH]
%a1=phi i8*[%aU,%aN],[%p,%aH]
%a2=phi i8*[%aO,%aN],[%aM,%aH]
store i8*%a2,i8**%d,align 8
%a3=icmp eq i32%a0,0
br i1%a3,label%a9,label%a4
a4:
%a5=sext i32%E to i64
%a6=getelementptr inbounds i8,i8*%aZ,i64%a5
%a7=bitcast i8*%a6 to i8**
%a8=load i8*,i8**%a7,align 8
br label%bk
a9:
%ba=getelementptr inbounds i8,i8*%a1,i64 44
%bb=bitcast i8*%ba to i32*
%bc=load i32,i32*%bb,align 4
%bd=call i8*@sml_alloc(i32 inreg%bc)#0
%be=getelementptr inbounds i8,i8*%bd,i64 -4
%bf=bitcast i8*%be to i32*
store i32%bc,i32*%bf,align 4
%bg=load i8*,i8**%c,align 8
%bh=sext i32%E to i64
%bi=getelementptr inbounds i8,i8*%bg,i64%bh
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bd,i8*%bi,i32%bc,i1 false)
%bj=load i8*,i8**%h,align 8
br label%bk
bk:
%bl=phi i8*[%bj,%a9],[%a1,%a4]
%bm=phi i8*[%bg,%a9],[%aZ,%a4]
%bn=phi i8*[%bd,%a9],[%a8,%a4]
store i8*%bn,i8**%e,align 8
store i8*null,i8**%c,align 8
%bo=sext i32%H to i64
%bp=getelementptr inbounds i8,i8*%bm,i64%bo
%bq=bitcast i8*%bp to i8**
%br=load i8*,i8**%bq,align 8
store i8*%br,i8**%f,align 8
%bs=getelementptr inbounds i8,i8*%bl,i64 16
%bt=bitcast i8*%bs to i8**
%bu=load i8*,i8**%bt,align 8
%bv=getelementptr inbounds i8,i8*%bl,i64 32
%bw=bitcast i8*%bv to i32*
%bx=load i32,i32*%bw,align 4
%by=getelementptr inbounds i8,i8*%bl,i64 36
%bz=bitcast i8*%by to i32*
%bA=load i32,i32*%bz,align 4
%bB=call fastcc i8*@_SMLL5findi_357(i8*inreg%bu,i32 inreg%bx,i32 inreg%bA)
%bC=getelementptr inbounds i8,i8*%bB,i64 16
%bD=bitcast i8*%bC to i8*(i8*,i8*)**
%bE=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bD,align 8
%bF=bitcast i8*%bB to i8**
%bG=load i8*,i8**%bF,align 8
store i8*%bG,i8**%c,align 8
%bH=load i8*,i8**%h,align 8
%bI=getelementptr inbounds i8,i8*%bH,i64 28
%bJ=bitcast i8*%bI to i32*
%bK=load i32,i32*%bJ,align 4
%bL=getelementptr inbounds i8,i8*%bH,i64 24
%bM=bitcast i8*%bL to i32*
%bN=load i32,i32*%bM,align 4
%bO=call i8*@sml_alloc(i32 inreg%T)#0
%bP=or i32%M,1342177280
%bQ=getelementptr inbounds i8,i8*%bO,i64 -4
%bR=bitcast i8*%bQ to i32*
store i32%bP,i32*%bR,align 4
call void@llvm.memset.p0i8.i32(i8*%bO,i8 0,i32%T,i1 false)
%bS=load i8*,i8**%f,align 8
%bT=bitcast i8*%bO to i8**
store i8*%bS,i8**%bT,align 8
%bU=icmp eq i32%bN,0
%bV=load i8*,i8**%d,align 8
%bW=sext i32%J to i64
%bX=getelementptr inbounds i8,i8*%bO,i64%bW
br i1%bU,label%b0,label%bY
bY:
%bZ=bitcast i8*%bX to i8**
store i8*%bV,i8**%bZ,align 8
br label%b1
b0:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bX,i8*%bV,i32%bK,i1 false)
br label%b1
b1:
%b2=sext i32%M to i64
%b3=getelementptr inbounds i8,i8*%bO,i64%b2
%b4=bitcast i8*%b3 to i32*
store i32%S,i32*%b4,align 4
%b5=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%b6=call fastcc i8*%bE(i8*inreg%b5,i8*inreg%bO)
%b7=icmp eq i8*%b6,null
br i1%b7,label%b8,label%eL
b8:
%b9=bitcast i8**%h to i8***
%ca=load i8**,i8***%b9,align 8
%cb=load i8*,i8**%ca,align 8
%cc=getelementptr inbounds i8,i8*%cb,i64 16
%cd=bitcast i8*%cc to i8*(i8*,i8*)**
%ce=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%cd,align 8
%cf=bitcast i8*%cb to i8**
%cg=load i8*,i8**%cf,align 8
store i8*%cg,i8**%g,align 8
%ch=bitcast i8**%ca to i8*
%ci=getelementptr inbounds i8,i8*%ch,i64 28
%cj=bitcast i8*%ci to i32*
%ck=load i32,i32*%cj,align 4
%cl=getelementptr inbounds i8*,i8**%ca,i64 3
%cm=bitcast i8**%cl to i32*
%cn=load i32,i32*%cm,align 4
%co=getelementptr inbounds i8,i8*%ch,i64 44
%cp=bitcast i8*%co to i32*
%cq=load i32,i32*%cp,align 4
%cr=getelementptr inbounds i8*,i8**%ca,i64 5
%cs=bitcast i8**%cr to i32*
%ct=load i32,i32*%cs,align 4
%cu=call i8*@sml_alloc(i32 inreg%au)#0
%cv=or i32%H,1342177280
%cw=getelementptr inbounds i8,i8*%cu,i64 -4
%cx=bitcast i8*%cw to i32*
store i32%cv,i32*%cx,align 4
store i8*%cu,i8**%c,align 8
call void@llvm.memset.p0i8.i32(i8*%cu,i8 0,i32%au,i1 false)
%cy=icmp eq i32%cn,0
%cz=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%cA=sext i32%w to i64
%cB=getelementptr inbounds i8,i8*%cu,i64%cA
br i1%cy,label%cE,label%cC
cC:
%cD=bitcast i8*%cB to i8**
store i8*%cz,i8**%cD,align 8
br label%cF
cE:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cB,i8*%cz,i32%ck,i1 false)
br label%cF
cF:
%cG=icmp eq i32%ct,0
%cH=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%cI=sext i32%E to i64
%cJ=getelementptr inbounds i8,i8*%cu,i64%cI
br i1%cG,label%cM,label%cK
cK:
%cL=bitcast i8*%cJ to i8**
store i8*%cH,i8**%cL,align 8
br label%cN
cM:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cJ,i8*%cH,i32%cq,i1 false)
br label%cN
cN:
%cO=getelementptr inbounds i8,i8*%cu,i64%bo
%cP=bitcast i8*%cO to i32*
store i32%at,i32*%cP,align 4
%cQ=call i8*@sml_alloc(i32 inreg 12)#0
%cR=getelementptr inbounds i8,i8*%cQ,i64 -4
%cS=bitcast i8*%cR to i32*
store i32 1342177288,i32*%cS,align 4
store i8*%cQ,i8**%d,align 8
%cT=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cU=bitcast i8*%cQ to i8**
store i8*%cT,i8**%cU,align 8
%cV=getelementptr inbounds i8,i8*%cQ,i64 8
%cW=bitcast i8*%cV to i32*
store i32 1,i32*%cW,align 4
%cX=call i8*@sml_alloc(i32 inreg 20)#0
%cY=getelementptr inbounds i8,i8*%cX,i64 -4
%cZ=bitcast i8*%cY to i32*
store i32 1342177296,i32*%cZ,align 4
%c0=bitcast i8*%cX to i8**
store i8*null,i8**%c0,align 8
%c1=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%c2=getelementptr inbounds i8,i8*%cX,i64 8
%c3=bitcast i8*%c2 to i8**
store i8*%c1,i8**%c3,align 8
%c4=getelementptr inbounds i8,i8*%cX,i64 16
%c5=bitcast i8*%c4 to i32*
store i32 3,i32*%c5,align 4
%c6=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%c7=call fastcc i8*%ce(i8*inreg%c6,i8*inreg%cX)
store i8*%c7,i8**%d,align 8
%c8=load i8*,i8**%h,align 8
%c9=getelementptr inbounds i8,i8*%c8,i64 24
%da=bitcast i8*%c9 to i32*
%db=load i32,i32*%da,align 4
%dc=icmp eq i32%db,0
br i1%dc,label%dh,label%dd
dd:
%de=getelementptr inbounds i8,i8*%c7,i64%cA
%df=bitcast i8*%de to i8**
%dg=load i8*,i8**%df,align 8
br label%dr
dh:
%di=getelementptr inbounds i8,i8*%c8,i64 28
%dj=bitcast i8*%di to i32*
%dk=load i32,i32*%dj,align 4
%dl=call i8*@sml_alloc(i32 inreg%dk)#0
%dm=getelementptr inbounds i8,i8*%dl,i64 -4
%dn=bitcast i8*%dm to i32*
store i32%dk,i32*%dn,align 4
%do=load i8*,i8**%d,align 8
%dp=getelementptr inbounds i8,i8*%do,i64%cA
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dl,i8*%dp,i32%dk,i1 false)
%dq=load i8*,i8**%h,align 8
br label%dr
dr:
%ds=phi i8*[%do,%dh],[%c7,%dd]
%dt=phi i8*[%dq,%dh],[%c8,%dd]
%du=phi i8*[%dl,%dh],[%dg,%dd]
store i8*%du,i8**%c,align 8
%dv=getelementptr inbounds i8,i8*%dt,i64 32
%dw=bitcast i8*%dv to i32*
%dx=load i32,i32*%dw,align 4
%dy=icmp eq i32%dx,0
br i1%dy,label%dE,label%dz
dz:
store i8*null,i8**%d,align 8
%dA=sext i32%aa to i64
%dB=getelementptr inbounds i8,i8*%ds,i64%dA
%dC=bitcast i8*%dB to i8**
%dD=load i8*,i8**%dC,align 8
br label%dS
dE:
%dF=getelementptr inbounds i8,i8*%dt,i64 36
%dG=bitcast i8*%dF to i32*
%dH=load i32,i32*%dG,align 4
%dI=call i8*@sml_alloc(i32 inreg%dH)#0
%dJ=getelementptr inbounds i8,i8*%dI,i64 -4
%dK=bitcast i8*%dJ to i32*
store i32%dH,i32*%dK,align 4
%dL=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%dM=sext i32%aa to i64
%dN=getelementptr inbounds i8,i8*%dL,i64%dM
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dI,i8*%dN,i32%dH,i1 false)
%dO=load i8*,i8**%h,align 8
%dP=getelementptr inbounds i8,i8*%dO,i64 32
%dQ=bitcast i8*%dP to i32*
%dR=load i32,i32*%dQ,align 4
br label%dS
dS:
%dT=phi i32[%dR,%dE],[%dx,%dz]
%dU=phi i8*[%dO,%dE],[%dt,%dz]
%dV=phi i8*[%dI,%dE],[%dD,%dz]
store i8*%dV,i8**%d,align 8
%dW=getelementptr inbounds i8,i8*%dU,i64 8
%dX=bitcast i8*%dW to i8**
%dY=load i8*,i8**%dX,align 8
%dZ=getelementptr inbounds i8,i8*%dU,i64 36
%d0=bitcast i8*%dZ to i32*
%d1=load i32,i32*%d0,align 4
%d2=call fastcc i8*@_SMLL6insert_334(i8*inreg%dY,i32 inreg%dT,i32 inreg%d1)
%d3=getelementptr inbounds i8,i8*%d2,i64 16
%d4=bitcast i8*%d3 to i8*(i8*,i8*)**
%d5=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%d4,align 8
%d6=bitcast i8*%d2 to i8**
%d7=load i8*,i8**%d6,align 8
store i8*%d7,i8**%e,align 8
%d8=load i8*,i8**%h,align 8
%d9=getelementptr inbounds i8,i8*%d8,i64 28
%ea=bitcast i8*%d9 to i32*
%eb=load i32,i32*%ea,align 4
%ec=getelementptr inbounds i8,i8*%d8,i64 24
%ed=bitcast i8*%ec to i32*
%ee=load i32,i32*%ed,align 4
%ef=getelementptr inbounds i8,i8*%d8,i64 36
%eg=bitcast i8*%ef to i32*
%eh=load i32,i32*%eg,align 4
store i8*null,i8**%h,align 8
%ei=getelementptr inbounds i8,i8*%d8,i64 32
%ej=bitcast i8*%ei to i32*
%ek=load i32,i32*%ej,align 4
%el=call i8*@sml_alloc(i32 inreg%aF)#0
%em=or i32%ay,1342177280
%en=getelementptr inbounds i8,i8*%el,i64 -4
%eo=bitcast i8*%en to i32*
store i32%em,i32*%eo,align 4
call void@llvm.memset.p0i8.i32(i8*%el,i8 0,i32%aF,i1 false)
%ep=load i8*,i8**%f,align 8
%eq=bitcast i8*%el to i8**
store i8*%ep,i8**%eq,align 8
%er=icmp eq i32%ee,0
%es=load i8*,i8**%c,align 8
%et=getelementptr inbounds i8,i8*%el,i64%bW
br i1%er,label%ew,label%eu
eu:
%ev=bitcast i8*%et to i8**
store i8*%es,i8**%ev,align 8
br label%ex
ew:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%et,i8*%es,i32%eb,i1 false)
br label%ex
ex:
%ey=icmp eq i32%ek,0
%ez=load i8*,i8**%d,align 8
%eA=sext i32%aw to i64
%eB=getelementptr inbounds i8,i8*%el,i64%eA
br i1%ey,label%eE,label%eC
eC:
%eD=bitcast i8*%eB to i8**
store i8*%ez,i8**%eD,align 8
br label%eF
eE:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%eB,i8*%ez,i32%eh,i1 false)
br label%eF
eF:
%eG=sext i32%ay to i64
%eH=getelementptr inbounds i8,i8*%el,i64%eG
%eI=bitcast i8*%eH to i32*
store i32%aE,i32*%eI,align 4
%eJ=load i8*,i8**%e,align 8
%eK=tail call fastcc i8*%d5(i8*inreg%eJ,i8*inreg%el)
ret i8*%eK
eL:
%eM=bitcast i8*%b6 to i8**
%eN=load i8*,i8**%eM,align 8
store i8*%eN,i8**%c,align 8
%eO=load i8*,i8**%h,align 8
%eP=getelementptr inbounds i8,i8*%eO,i64 24
%eQ=bitcast i8*%eP to i32*
%eR=load i32,i32*%eQ,align 4
%eS=icmp eq i32%eR,0
br i1%eS,label%eY,label%eT
eT:
%eU=sext i32%w to i64
%eV=getelementptr inbounds i8,i8*%eN,i64%eU
%eW=bitcast i8*%eV to i8**
%eX=load i8*,i8**%eW,align 8
br label%e9
eY:
%eZ=getelementptr inbounds i8,i8*%eO,i64 28
%e0=bitcast i8*%eZ to i32*
%e1=load i32,i32*%e0,align 4
%e2=call i8*@sml_alloc(i32 inreg%e1)#0
%e3=getelementptr inbounds i8,i8*%e2,i64 -4
%e4=bitcast i8*%e3 to i32*
store i32%e1,i32*%e4,align 4
%e5=load i8*,i8**%c,align 8
%e6=sext i32%w to i64
%e7=getelementptr inbounds i8,i8*%e5,i64%e6
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%e2,i8*%e7,i32%e1,i1 false)
%e8=load i8*,i8**%h,align 8
br label%e9
e9:
%fa=phi i8*[%e8,%eY],[%eO,%eT]
%fb=phi i8*[%e5,%eY],[%eN,%eT]
%fc=phi i8*[%e2,%eY],[%eX,%eT]
store i8*%fc,i8**%g,align 8
%fd=getelementptr inbounds i8,i8*%fa,i64 32
%fe=bitcast i8*%fd to i32*
%ff=load i32,i32*%fe,align 4
%fg=icmp eq i32%ff,0
br i1%fg,label%fn,label%fh
fh:
%fi=bitcast i8*%fa to i8**
store i8*null,i8**%c,align 8
%fj=sext i32%aa to i64
%fk=getelementptr inbounds i8,i8*%fb,i64%fj
%fl=bitcast i8*%fk to i8**
%fm=load i8*,i8**%fl,align 8
br label%fD
fn:
%fo=getelementptr inbounds i8,i8*%fa,i64 36
%fp=bitcast i8*%fo to i32*
%fq=load i32,i32*%fp,align 4
%fr=call i8*@sml_alloc(i32 inreg%fq)#0
%fs=getelementptr inbounds i8,i8*%fr,i64 -4
%ft=bitcast i8*%fs to i32*
store i32%fq,i32*%ft,align 4
%fu=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%fv=sext i32%aa to i64
%fw=getelementptr inbounds i8,i8*%fu,i64%fv
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%fr,i8*%fw,i32%fq,i1 false)
%fx=bitcast i8**%h to i8***
%fy=load i8**,i8***%fx,align 8
%fz=bitcast i8**%fy to i8*
%fA=getelementptr inbounds i8*,i8**%fy,i64 4
%fB=bitcast i8**%fA to i32*
%fC=load i32,i32*%fB,align 4
br label%fD
fD:
%fE=phi i32[%fC,%fn],[%ff,%fh]
%fF=phi i8*[%fz,%fn],[%fa,%fh]
%fG=phi i8**[%fy,%fn],[%fi,%fh]
%fH=phi i8*[%fr,%fn],[%fm,%fh]
store i8*%fH,i8**%c,align 8
%fI=load i8*,i8**%fG,align 8
%fJ=getelementptr inbounds i8,i8*%fI,i64 16
%fK=bitcast i8*%fJ to i8*(i8*,i8*)**
%fL=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%fK,align 8
%fM=bitcast i8*%fI to i8**
%fN=load i8*,i8**%fM,align 8
store i8*%fN,i8**%j,align 8
%fO=getelementptr inbounds i8,i8*%fF,i64 28
%fP=bitcast i8*%fO to i32*
%fQ=load i32,i32*%fP,align 4
%fR=getelementptr inbounds i8,i8*%fF,i64 24
%fS=bitcast i8*%fR to i32*
%fT=load i32,i32*%fS,align 4
%fU=getelementptr inbounds i8,i8*%fF,i64 36
%fV=bitcast i8*%fU to i32*
%fW=load i32,i32*%fV,align 4
%fX=call i8*@sml_alloc(i32 inreg%am)#0
%fY=or i32%ad,1342177280
%fZ=getelementptr inbounds i8,i8*%fX,i64 -4
%f0=bitcast i8*%fZ to i32*
store i32%fY,i32*%f0,align 4
store i8*%fX,i8**%i,align 8
call void@llvm.memset.p0i8.i32(i8*%fX,i8 0,i32%am,i1 false)
%f1=icmp eq i32%fT,0
%f2=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%f3=sext i32%w to i64
%f4=getelementptr inbounds i8,i8*%fX,i64%f3
br i1%f1,label%f7,label%f5
f5:
%f6=bitcast i8*%f4 to i8**
store i8*%f2,i8**%f6,align 8
br label%f8
f7:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%f4,i8*%f2,i32%fQ,i1 false)
br label%f8
f8:
%f9=icmp eq i32%fE,0
%ga=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%gb=sext i32%aa to i64
%gc=getelementptr inbounds i8,i8*%fX,i64%gb
br i1%f9,label%gf,label%gd
gd:
%ge=bitcast i8*%gc to i8**
store i8*%ga,i8**%ge,align 8
br label%gg
gf:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%gc,i8*%ga,i32%fW,i1 false)
br label%gg
gg:
%gh=sext i32%ad to i64
%gi=getelementptr inbounds i8,i8*%fX,i64%gh
%gj=bitcast i8*%gi to i32*
store i32%al,i32*%gj,align 4
%gk=call i8*@sml_alloc(i32 inreg 12)#0
%gl=getelementptr inbounds i8,i8*%gk,i64 -4
%gm=bitcast i8*%gl to i32*
store i32 1342177288,i32*%gm,align 4
store i8*%gk,i8**%g,align 8
%gn=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%go=bitcast i8*%gk to i8**
store i8*%gn,i8**%go,align 8
%gp=getelementptr inbounds i8,i8*%gk,i64 8
%gq=bitcast i8*%gp to i32*
store i32 1,i32*%gq,align 4
%gr=load i8*,i8**%h,align 8
%gs=getelementptr inbounds i8,i8*%gr,i64 28
%gt=bitcast i8*%gs to i32*
%gu=load i32,i32*%gt,align 4
%gv=getelementptr inbounds i8,i8*%gr,i64 24
%gw=bitcast i8*%gv to i32*
%gx=load i32,i32*%gw,align 4
%gy=getelementptr inbounds i8,i8*%gr,i64 44
%gz=bitcast i8*%gy to i32*
%gA=load i32,i32*%gz,align 4
%gB=getelementptr inbounds i8,i8*%gr,i64 40
%gC=bitcast i8*%gB to i32*
%gD=load i32,i32*%gC,align 4
%gE=call i8*@sml_alloc(i32 inreg%au)#0
%gF=or i32%H,1342177280
%gG=getelementptr inbounds i8,i8*%gE,i64 -4
%gH=bitcast i8*%gG to i32*
store i32%gF,i32*%gH,align 4
store i8*%gE,i8**%c,align 8
call void@llvm.memset.p0i8.i32(i8*%gE,i8 0,i32%au,i1 false)
%gI=icmp eq i32%gx,0
%gJ=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%gK=getelementptr inbounds i8,i8*%gE,i64%f3
br i1%gI,label%gN,label%gL
gL:
%gM=bitcast i8*%gK to i8**
store i8*%gJ,i8**%gM,align 8
br label%gO
gN:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%gK,i8*%gJ,i32%gu,i1 false)
br label%gO
gO:
%gP=icmp eq i32%gD,0
%gQ=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%gR=sext i32%E to i64
%gS=getelementptr inbounds i8,i8*%gE,i64%gR
br i1%gP,label%gV,label%gT
gT:
%gU=bitcast i8*%gS to i8**
store i8*%gQ,i8**%gU,align 8
br label%gW
gV:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%gS,i8*%gQ,i32%gA,i1 false)
br label%gW
gW:
%gX=getelementptr inbounds i8,i8*%gE,i64%bo
%gY=bitcast i8*%gX to i32*
store i32%at,i32*%gY,align 4
%gZ=call i8*@sml_alloc(i32 inreg 12)#0
%g0=getelementptr inbounds i8,i8*%gZ,i64 -4
%g1=bitcast i8*%g0 to i32*
store i32 1342177288,i32*%g1,align 4
store i8*%gZ,i8**%d,align 8
%g2=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%g3=bitcast i8*%gZ to i8**
store i8*%g2,i8**%g3,align 8
%g4=getelementptr inbounds i8,i8*%gZ,i64 8
%g5=bitcast i8*%g4 to i32*
store i32 1,i32*%g5,align 4
%g6=call i8*@sml_alloc(i32 inreg 20)#0
%g7=getelementptr inbounds i8,i8*%g6,i64 -4
%g8=bitcast i8*%g7 to i32*
store i32 1342177296,i32*%g8,align 4
%g9=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%ha=bitcast i8*%g6 to i8**
store i8*%g9,i8**%ha,align 8
%hb=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%hc=getelementptr inbounds i8,i8*%g6,i64 8
%hd=bitcast i8*%hc to i8**
store i8*%hb,i8**%hd,align 8
%he=getelementptr inbounds i8,i8*%g6,i64 16
%hf=bitcast i8*%he to i32*
store i32 3,i32*%hf,align 4
%hg=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%hh=call fastcc i8*%fL(i8*inreg%hg,i8*inreg%g6)
store i8*%hh,i8**%d,align 8
%hi=load i8*,i8**%h,align 8
%hj=getelementptr inbounds i8,i8*%hi,i64 24
%hk=bitcast i8*%hj to i32*
%hl=load i32,i32*%hk,align 4
%hm=icmp eq i32%hl,0
br i1%hm,label%hr,label%hn
hn:
%ho=getelementptr inbounds i8,i8*%hh,i64%f3
%hp=bitcast i8*%ho to i8**
%hq=load i8*,i8**%hp,align 8
br label%hB
hr:
%hs=getelementptr inbounds i8,i8*%hi,i64 28
%ht=bitcast i8*%hs to i32*
%hu=load i32,i32*%ht,align 4
%hv=call i8*@sml_alloc(i32 inreg%hu)#0
%hw=getelementptr inbounds i8,i8*%hv,i64 -4
%hx=bitcast i8*%hw to i32*
store i32%hu,i32*%hx,align 4
%hy=load i8*,i8**%d,align 8
%hz=getelementptr inbounds i8,i8*%hy,i64%f3
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%hv,i8*%hz,i32%hu,i1 false)
%hA=load i8*,i8**%h,align 8
br label%hB
hB:
%hC=phi i8*[%hy,%hr],[%hh,%hn]
%hD=phi i8*[%hA,%hr],[%hi,%hn]
%hE=phi i8*[%hv,%hr],[%hq,%hn]
store i8*%hE,i8**%c,align 8
%hF=getelementptr inbounds i8,i8*%hD,i64 32
%hG=bitcast i8*%hF to i32*
%hH=load i32,i32*%hG,align 4
%hI=icmp eq i32%hH,0
br i1%hI,label%hN,label%hJ
hJ:
store i8*null,i8**%d,align 8
%hK=getelementptr inbounds i8,i8*%hC,i64%gb
%hL=bitcast i8*%hK to i8**
%hM=load i8*,i8**%hL,align 8
br label%h0
hN:
%hO=getelementptr inbounds i8,i8*%hD,i64 36
%hP=bitcast i8*%hO to i32*
%hQ=load i32,i32*%hP,align 4
%hR=call i8*@sml_alloc(i32 inreg%hQ)#0
%hS=getelementptr inbounds i8,i8*%hR,i64 -4
%hT=bitcast i8*%hS to i32*
store i32%hQ,i32*%hT,align 4
%hU=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%hV=getelementptr inbounds i8,i8*%hU,i64%gb
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%hR,i8*%hV,i32%hQ,i1 false)
%hW=load i8*,i8**%h,align 8
%hX=getelementptr inbounds i8,i8*%hW,i64 32
%hY=bitcast i8*%hX to i32*
%hZ=load i32,i32*%hY,align 4
br label%h0
h0:
%h1=phi i32[%hZ,%hN],[%hH,%hJ]
%h2=phi i8*[%hW,%hN],[%hD,%hJ]
%h3=phi i8*[%hR,%hN],[%hM,%hJ]
store i8*%h3,i8**%d,align 8
%h4=getelementptr inbounds i8,i8*%h2,i64 8
%h5=bitcast i8*%h4 to i8**
%h6=load i8*,i8**%h5,align 8
%h7=getelementptr inbounds i8,i8*%h2,i64 36
%h8=bitcast i8*%h7 to i32*
%h9=load i32,i32*%h8,align 4
%ia=call fastcc i8*@_SMLL6insert_334(i8*inreg%h6,i32 inreg%h1,i32 inreg%h9)
%ib=getelementptr inbounds i8,i8*%ia,i64 16
%ic=bitcast i8*%ib to i8*(i8*,i8*)**
%id=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ic,align 8
%ie=bitcast i8*%ia to i8**
%if=load i8*,i8**%ie,align 8
store i8*%if,i8**%e,align 8
%ig=load i8*,i8**%h,align 8
%ih=getelementptr inbounds i8,i8*%ig,i64 28
%ii=bitcast i8*%ih to i32*
%ij=load i32,i32*%ii,align 4
%ik=getelementptr inbounds i8,i8*%ig,i64 24
%il=bitcast i8*%ik to i32*
%im=load i32,i32*%il,align 4
%in=getelementptr inbounds i8,i8*%ig,i64 36
%io=bitcast i8*%in to i32*
%ip=load i32,i32*%io,align 4
store i8*null,i8**%h,align 8
%iq=getelementptr inbounds i8,i8*%ig,i64 32
%ir=bitcast i8*%iq to i32*
%is=load i32,i32*%ir,align 4
%it=call i8*@sml_alloc(i32 inreg%aF)#0
%iu=or i32%ay,1342177280
%iv=getelementptr inbounds i8,i8*%it,i64 -4
%iw=bitcast i8*%iv to i32*
store i32%iu,i32*%iw,align 4
call void@llvm.memset.p0i8.i32(i8*%it,i8 0,i32%aF,i1 false)
%ix=load i8*,i8**%f,align 8
%iy=bitcast i8*%it to i8**
store i8*%ix,i8**%iy,align 8
%iz=icmp eq i32%im,0
%iA=load i8*,i8**%c,align 8
%iB=getelementptr inbounds i8,i8*%it,i64%bW
br i1%iz,label%iE,label%iC
iC:
%iD=bitcast i8*%iB to i8**
store i8*%iA,i8**%iD,align 8
br label%iF
iE:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%iB,i8*%iA,i32%ij,i1 false)
br label%iF
iF:
%iG=icmp eq i32%is,0
%iH=load i8*,i8**%d,align 8
%iI=sext i32%aw to i64
%iJ=getelementptr inbounds i8,i8*%it,i64%iI
br i1%iG,label%iM,label%iK
iK:
%iL=bitcast i8*%iJ to i8**
store i8*%iH,i8**%iL,align 8
br label%iN
iM:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%iJ,i8*%iH,i32%ip,i1 false)
br label%iN
iN:
%iO=sext i32%ay to i64
%iP=getelementptr inbounds i8,i8*%it,i64%iO
%iQ=bitcast i8*%iP to i32*
store i32%aE,i32*%iQ,align 4
%iR=load i8*,i8**%e,align 8
%iS=tail call fastcc i8*%id(i8*inreg%iR,i8*inreg%it)
ret i8*%iS
}
define internal fastcc i8*@_SMLL3ins_449(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=getelementptr inbounds i8,i8*%a,i64 16
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%a,i64 20
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=getelementptr inbounds i8,i8*%a,i64 24
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=getelementptr inbounds i8,i8*%a,i64 28
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=getelementptr inbounds i8,i8*%a,i64 32
%y=bitcast i8*%x to i32*
%z=load i32,i32*%y,align 4
%A=getelementptr inbounds i8,i8*%a,i64 36
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=call i8*@sml_alloc(i32 inreg 52)#0
%E=getelementptr inbounds i8,i8*%D,i64 -4
%F=bitcast i8*%E to i32*
store i32 1342177328,i32*%F,align 4
store i8*%D,i8**%f,align 8
%G=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%H=bitcast i8*%D to i8**
store i8*%G,i8**%H,align 8
%I=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%J=getelementptr inbounds i8,i8*%D,i64 8
%K=bitcast i8*%J to i8**
store i8*%I,i8**%K,align 8
%L=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%M=getelementptr inbounds i8,i8*%D,i64 16
%N=bitcast i8*%M to i8**
store i8*%L,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%D,i64 24
%P=bitcast i8*%O to i32*
store i32%n,i32*%P,align 4
%Q=getelementptr inbounds i8,i8*%D,i64 28
%R=bitcast i8*%Q to i32*
store i32%q,i32*%R,align 4
%S=getelementptr inbounds i8,i8*%D,i64 32
%T=bitcast i8*%S to i32*
store i32%t,i32*%T,align 4
%U=getelementptr inbounds i8,i8*%D,i64 36
%V=bitcast i8*%U to i32*
store i32%w,i32*%V,align 4
%W=getelementptr inbounds i8,i8*%D,i64 40
%X=bitcast i8*%W to i32*
store i32%z,i32*%X,align 4
%Y=getelementptr inbounds i8,i8*%D,i64 44
%Z=bitcast i8*%Y to i32*
store i32%C,i32*%Z,align 4
%aa=getelementptr inbounds i8,i8*%D,i64 48
%ab=bitcast i8*%aa to i32*
store i32 7,i32*%ab,align 4
%ac=call i8*@sml_alloc(i32 inreg 28)#0
%ad=getelementptr inbounds i8,i8*%ac,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 1342177304,i32*%ae,align 4
%af=load i8*,i8**%f,align 8
%ag=bitcast i8*%ac to i8**
store i8*%af,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%ac,i64 8
%ai=bitcast i8*%ah to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3ins_448 to void(...)*),void(...)**%ai,align 8
%aj=getelementptr inbounds i8,i8*%ac,i64 16
%ak=bitcast i8*%aj to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3ins_448 to void(...)*),void(...)**%ak,align 8
%al=getelementptr inbounds i8,i8*%ac,i64 24
%am=bitcast i8*%al to i32*
store i32 -2147483647,i32*%am,align 4
ret i8*%ac
}
define internal fastcc i8*@_SMLL3ins_450(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e)#4 gc"smlsharp"{
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
%i=bitcast i8*%a to i8**
%j=load i8*,i8**%i,align 8
store i8*%j,i8**%f,align 8
%k=getelementptr inbounds i8,i8*%a,i64 8
%l=bitcast i8*%k to i8**
%m=load i8*,i8**%l,align 8
store i8*%m,i8**%g,align 8
%n=getelementptr inbounds i8,i8*%a,i64 16
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%a,i64 20
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call i8*@sml_alloc(i32 inreg 44)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177320,i32*%v,align 4
store i8*%t,i8**%h,align 8
%w=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%z=getelementptr inbounds i8,i8*%t,i64 8
%A=bitcast i8*%z to i8**
store i8*%y,i8**%A,align 8
%B=getelementptr inbounds i8,i8*%t,i64 16
%C=bitcast i8*%B to i32*
store i32%p,i32*%C,align 4
%D=getelementptr inbounds i8,i8*%t,i64 20
%E=bitcast i8*%D to i32*
store i32%s,i32*%E,align 4
%F=getelementptr inbounds i8,i8*%t,i64 24
%G=bitcast i8*%F to i32*
store i32%b,i32*%G,align 4
%H=getelementptr inbounds i8,i8*%t,i64 28
%I=bitcast i8*%H to i32*
store i32%c,i32*%I,align 4
%J=getelementptr inbounds i8,i8*%t,i64 32
%K=bitcast i8*%J to i32*
store i32%d,i32*%K,align 4
%L=getelementptr inbounds i8,i8*%t,i64 36
%M=bitcast i8*%L to i32*
store i32%e,i32*%M,align 4
%N=getelementptr inbounds i8,i8*%t,i64 40
%O=bitcast i8*%N to i32*
store i32 3,i32*%O,align 4
%P=call i8*@sml_alloc(i32 inreg 28)#0
%Q=getelementptr inbounds i8,i8*%P,i64 -4
%R=bitcast i8*%Q to i32*
store i32 1342177304,i32*%R,align 4
%S=load i8*,i8**%h,align 8
%T=bitcast i8*%P to i8**
store i8*%S,i8**%T,align 8
%U=getelementptr inbounds i8,i8*%P,i64 8
%V=bitcast i8*%U to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3ins_449 to void(...)*),void(...)**%V,align 8
%W=getelementptr inbounds i8,i8*%P,i64 16
%X=bitcast i8*%W to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3ins_449 to void(...)*),void(...)**%X,align 8
%Y=getelementptr inbounds i8,i8*%P,i64 24
%Z=bitcast i8*%Y to i32*
store i32 -2147483647,i32*%Z,align 4
ret i8*%P
}
define internal fastcc i8*@_SMLL11unionWithi3_451(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%h,label%j
h:
%i=bitcast i8*%a to i8**
br label%n
j:
call void@sml_check(i32 inreg%f)
%k=load i8*,i8**%c,align 8
%l=bitcast i8**%e to i8***
%m=load i8**,i8***%l,align 8
br label%n
n:
%o=phi i8**[%m,%j],[%i,%h]
%p=phi i8*[%k,%j],[%b,%h]
%q=bitcast i8*%p to i8**
%r=load i8*,i8**%q,align 8
store i8*%r,i8**%c,align 8
%s=getelementptr inbounds i8,i8*%p,i64 8
%t=bitcast i8*%s to i8**
%u=load i8*,i8**%t,align 8
store i8*%u,i8**%d,align 8
%v=load i8*,i8**%o,align 8
%w=getelementptr inbounds i8,i8*%v,i64 16
%x=bitcast i8*%w to i8*(i8*,i8*)**
%y=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%x,align 8
%z=bitcast i8*%v to i8**
%A=load i8*,i8**%z,align 8
store i8*%A,i8**%e,align 8
%B=call i8*@sml_alloc(i32 inreg 20)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177296,i32*%D,align 4
%E=load i8*,i8**%d,align 8
%F=bitcast i8*%B to i8**
store i8*%E,i8**%F,align 8
%G=load i8*,i8**%c,align 8
%H=getelementptr inbounds i8,i8*%B,i64 8
%I=bitcast i8*%H to i8**
store i8*%G,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%B,i64 16
%K=bitcast i8*%J to i32*
store i32 3,i32*%K,align 4
%L=load i8*,i8**%e,align 8
%M=tail call fastcc i8*%y(i8*inreg%L,i8*inreg%B)
ret i8*%M
}
define internal fastcc i8*@_SMLL11unionWithi3_452(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
n:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%l,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%d,align 8
br label%l
l:
%m=phi i8*[%k,%j],[%a,%n]
%o=getelementptr inbounds i8,i8*%m,i64 8
%p=bitcast i8*%o to i8**
%q=load i8*,i8**%p,align 8
store i8*%q,i8**%e,align 8
%r=getelementptr inbounds i8,i8*%m,i64 16
%s=bitcast i8*%r to i8**
%t=load i8*,i8**%s,align 8
store i8*%t,i8**%f,align 8
%u=getelementptr inbounds i8,i8*%m,i64 32
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=getelementptr inbounds i8,i8*%m,i64 36
%y=bitcast i8*%x to i32*
%z=load i32,i32*%y,align 4
%A=call i8*@sml_alloc(i32 inreg 28)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177304,i32*%C,align 4
store i8*%A,i8**%g,align 8
%D=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%E=bitcast i8*%A to i8**
store i8*%D,i8**%E,align 8
%F=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%G=getelementptr inbounds i8,i8*%A,i64 8
%H=bitcast i8*%G to i8**
store i8*%F,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%A,i64 16
%J=bitcast i8*%I to i32*
store i32%w,i32*%J,align 4
%K=getelementptr inbounds i8,i8*%A,i64 20
%L=bitcast i8*%K to i32*
store i32%z,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%A,i64 24
%N=bitcast i8*%M to i32*
store i32 3,i32*%N,align 4
%O=call i8*@sml_alloc(i32 inreg 28)#0
%P=getelementptr inbounds i8,i8*%O,i64 -4
%Q=bitcast i8*%P to i32*
store i32 1342177304,i32*%Q,align 4
%R=load i8*,i8**%g,align 8
%S=bitcast i8*%O to i8**
store i8*%R,i8**%S,align 8
%T=getelementptr inbounds i8,i8*%O,i64 8
%U=bitcast i8*%T to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32)*@_SMLL3ins_450 to void(...)*),void(...)**%U,align 8
%V=getelementptr inbounds i8,i8*%O,i64 16
%W=bitcast i8*%V to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLL3ins_698 to void(...)*),void(...)**%W,align 8
%X=getelementptr inbounds i8,i8*%O,i64 24
%Y=bitcast i8*%X to i32*
store i32 -2147483647,i32*%Y,align 4
%Z=bitcast i8**%c to i8***
%aa=load i8**,i8***%Z,align 8
%ab=load i8*,i8**%aa,align 8
%ac=icmp eq i8*%ab,null
br i1%ac,label%ag,label%ad
ad:
%ae=bitcast i8*%ab to i32*
%af=load i32,i32*%ae,align 4
br label%ag
ag:
%ah=phi i32[%af,%ad],[0,%l]
%ai=getelementptr inbounds i8*,i8**%aa,i64 1
%aj=load i8*,i8**%ai,align 8
%ak=icmp eq i8*%aj,null
br i1%ak,label%ao,label%al
al:
%am=bitcast i8*%aj to i32*
%an=load i32,i32*%am,align 4
br label%ao
ao:
%ap=phi i32[%an,%al],[0,%ag]
%aq=icmp sgt i32%ah,%ap
%ar=load i8*,i8**%d,align 8
%as=getelementptr inbounds i8,i8*%ar,i64 24
%at=bitcast i8*%as to i8**
%au=load i8*,i8**%at,align 8
%av=getelementptr inbounds i8,i8*%ar,i64 40
%aw=bitcast i8*%av to i32*
%ax=load i32,i32*%aw,align 4
%ay=getelementptr inbounds i8,i8*%ar,i64 44
%az=bitcast i8*%ay to i32*
%aA=load i32,i32*%az,align 4
%aB=call fastcc i8*@_SMLL6foldli_411(i8*inreg%au,i32 inreg%ax,i32 inreg%aA,i32 inreg 1,i32 inreg 8)
%aC=getelementptr inbounds i8,i8*%aB,i64 16
%aD=bitcast i8*%aC to void(...)**
%aE=load void(...)*,void(...)**%aD,align 8
%aF=bitcast i8*%aB to i8**
%aG=load i8*,i8**%aF,align 8
br i1%aq,label%aH,label%bl
aH:
store i8*%aG,i8**%e,align 8
%aI=load i8*,i8**%d,align 8
%aJ=getelementptr inbounds i8,i8*%aI,i64 40
%aK=bitcast i8*%aJ to i32*
%aL=load i32,i32*%aK,align 4
%aM=getelementptr inbounds i8,i8*%aI,i64 44
%aN=bitcast i8*%aM to i32*
%aO=load i32,i32*%aN,align 4
%aP=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%aQ=call fastcc i8*@_SMLL3ins_450(i8*inreg%aP,i32 inreg%aL,i32 inreg%aO,i32 inreg%aL,i32 inreg%aO)
%aR=getelementptr inbounds i8,i8*%aQ,i64 16
%aS=bitcast i8*%aR to i8*(i8*,i8*)**
%aT=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aS,align 8
%aU=bitcast i8*%aQ to i8**
%aV=load i8*,i8**%aU,align 8
%aW=bitcast i8**%d to i8***
%aX=load i8**,i8***%aW,align 8
store i8*null,i8**%d,align 8
%aY=load i8*,i8**%aX,align 8
%aZ=call fastcc i8*%aT(i8*inreg%aV,i8*inreg%aY)
%a0=bitcast void(...)*%aE to i8*(i8*,i8*)*
%a1=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%a2=call fastcc i8*%a0(i8*inreg%a1,i8*inreg%aZ)
%a3=getelementptr inbounds i8,i8*%a2,i64 16
%a4=bitcast i8*%a3 to i8*(i8*,i8*)**
%a5=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a4,align 8
%a6=bitcast i8*%a2 to i8**
%a7=load i8*,i8**%a6,align 8
%a8=load i8**,i8***%Z,align 8
%a9=load i8*,i8**%a8,align 8
%ba=call fastcc i8*%a5(i8*inreg%a7,i8*inreg%a9)
%bb=getelementptr inbounds i8,i8*%ba,i64 16
%bc=bitcast i8*%bb to i8*(i8*,i8*)**
%bd=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bc,align 8
%be=bitcast i8*%ba to i8**
%bf=load i8*,i8**%be,align 8
%bg=load i8*,i8**%c,align 8
%bh=getelementptr inbounds i8,i8*%bg,i64 8
%bi=bitcast i8*%bh to i8**
%bj=load i8*,i8**%bi,align 8
%bk=tail call fastcc i8*%bd(i8*inreg%bf,i8*inreg%bj)
ret i8*%bk
bl:
store i8*%aG,i8**%f,align 8
%bm=load i8*,i8**%d,align 8
%bn=getelementptr inbounds i8,i8*%bm,i64 40
%bo=bitcast i8*%bn to i32*
%bp=load i32,i32*%bo,align 4
%bq=getelementptr inbounds i8,i8*%bm,i64 44
%br=bitcast i8*%bq to i32*
%bs=load i32,i32*%br,align 4
%bt=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%bu=call fastcc i8*@_SMLL3ins_450(i8*inreg%bt,i32 inreg%bp,i32 inreg%bs,i32 inreg%bp,i32 inreg%bs)
%bv=getelementptr inbounds i8,i8*%bu,i64 16
%bw=bitcast i8*%bv to i8*(i8*,i8*)**
%bx=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bw,align 8
%by=bitcast i8*%bu to i8**
%bz=load i8*,i8**%by,align 8
store i8*%bz,i8**%e,align 8
%bA=bitcast i8**%d to i8***
%bB=load i8**,i8***%bA,align 8
%bC=load i8*,i8**%bB,align 8
store i8*%bC,i8**%d,align 8
%bD=call i8*@sml_alloc(i32 inreg 12)#0
%bE=getelementptr inbounds i8,i8*%bD,i64 -4
%bF=bitcast i8*%bE to i32*
store i32 1342177288,i32*%bF,align 4
store i8*%bD,i8**%g,align 8
%bG=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bH=bitcast i8*%bD to i8**
store i8*%bG,i8**%bH,align 8
%bI=getelementptr inbounds i8,i8*%bD,i64 8
%bJ=bitcast i8*%bI to i32*
store i32 1,i32*%bJ,align 4
%bK=call i8*@sml_alloc(i32 inreg 28)#0
%bL=getelementptr inbounds i8,i8*%bK,i64 -4
%bM=bitcast i8*%bL to i32*
store i32 1342177304,i32*%bM,align 4
%bN=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%bO=bitcast i8*%bK to i8**
store i8*%bN,i8**%bO,align 8
%bP=getelementptr inbounds i8,i8*%bK,i64 8
%bQ=bitcast i8*%bP to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL11unionWithi3_451 to void(...)*),void(...)**%bQ,align 8
%bR=getelementptr inbounds i8,i8*%bK,i64 16
%bS=bitcast i8*%bR to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL11unionWithi3_451 to void(...)*),void(...)**%bS,align 8
%bT=getelementptr inbounds i8,i8*%bK,i64 24
%bU=bitcast i8*%bT to i32*
store i32 -2147483647,i32*%bU,align 4
%bV=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bW=call fastcc i8*%bx(i8*inreg%bV,i8*inreg%bK)
%bX=bitcast void(...)*%aE to i8*(i8*,i8*)*
%bY=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%bZ=call fastcc i8*%bX(i8*inreg%bY,i8*inreg%bW)
%b0=getelementptr inbounds i8,i8*%bZ,i64 16
%b1=bitcast i8*%b0 to i8*(i8*,i8*)**
%b2=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%b1,align 8
%b3=bitcast i8*%bZ to i8**
%b4=load i8*,i8**%b3,align 8
%b5=load i8*,i8**%c,align 8
%b6=getelementptr inbounds i8,i8*%b5,i64 8
%b7=bitcast i8*%b6 to i8**
%b8=load i8*,i8**%b7,align 8
%b9=call fastcc i8*%b2(i8*inreg%b4,i8*inreg%b8)
%ca=getelementptr inbounds i8,i8*%b9,i64 16
%cb=bitcast i8*%ca to i8*(i8*,i8*)**
%cc=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%cb,align 8
%cd=bitcast i8*%b9 to i8**
%ce=load i8*,i8**%cd,align 8
%cf=load i8**,i8***%Z,align 8
%cg=load i8*,i8**%cf,align 8
%ch=tail call fastcc i8*%cc(i8*inreg%ce,i8*inreg%cg)
ret i8*%ch
}
define internal fastcc i8*@_SMLL11unionWithi3_453(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%b,i8**%c,align 8
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%d,align 8
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
store i8*%l,i8**%e,align 8
%m=getelementptr inbounds i8,i8*%a,i64 16
%n=bitcast i8*%m to i8**
%o=load i8*,i8**%n,align 8
store i8*%o,i8**%f,align 8
%p=getelementptr inbounds i8,i8*%a,i64 24
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=getelementptr inbounds i8,i8*%a,i64 28
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=getelementptr inbounds i8,i8*%a,i64 32
%w=bitcast i8*%v to i32*
%x=load i32,i32*%w,align 4
%y=getelementptr inbounds i8,i8*%a,i64 36
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=call i8*@sml_alloc(i32 inreg 52)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177328,i32*%D,align 4
store i8*%B,i8**%g,align 8
%E=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%F=bitcast i8*%B to i8**
store i8*%E,i8**%F,align 8
%G=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%H=getelementptr inbounds i8,i8*%B,i64 8
%I=bitcast i8*%H to i8**
store i8*%G,i8**%I,align 8
%J=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%K=getelementptr inbounds i8,i8*%B,i64 16
%L=bitcast i8*%K to i8**
store i8*%J,i8**%L,align 8
%M=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%N=getelementptr inbounds i8,i8*%B,i64 24
%O=bitcast i8*%N to i8**
store i8*%M,i8**%O,align 8
%P=getelementptr inbounds i8,i8*%B,i64 32
%Q=bitcast i8*%P to i32*
store i32%r,i32*%Q,align 4
%R=getelementptr inbounds i8,i8*%B,i64 36
%S=bitcast i8*%R to i32*
store i32%u,i32*%S,align 4
%T=getelementptr inbounds i8,i8*%B,i64 40
%U=bitcast i8*%T to i32*
store i32%x,i32*%U,align 4
%V=getelementptr inbounds i8,i8*%B,i64 44
%W=bitcast i8*%V to i32*
store i32%A,i32*%W,align 4
%X=getelementptr inbounds i8,i8*%B,i64 48
%Y=bitcast i8*%X to i32*
store i32 15,i32*%Y,align 4
%Z=call i8*@sml_alloc(i32 inreg 28)#0
%aa=getelementptr inbounds i8,i8*%Z,i64 -4
%ab=bitcast i8*%aa to i32*
store i32 1342177304,i32*%ab,align 4
%ac=load i8*,i8**%g,align 8
%ad=bitcast i8*%Z to i8**
store i8*%ac,i8**%ad,align 8
%ae=getelementptr inbounds i8,i8*%Z,i64 8
%af=bitcast i8*%ae to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL11unionWithi3_452 to void(...)*),void(...)**%af,align 8
%ag=getelementptr inbounds i8,i8*%Z,i64 16
%ah=bitcast i8*%ag to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL11unionWithi3_452 to void(...)*),void(...)**%ah,align 8
%ai=getelementptr inbounds i8,i8*%Z,i64 24
%aj=bitcast i8*%ai to i32*
store i32 -2147483647,i32*%aj,align 4
ret i8*%Z
}
define internal fastcc i8*@_SMLL11unionWithi3_454(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%d,align 8
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
store i8*%l,i8**%e,align 8
%m=getelementptr inbounds i8,i8*%a,i64 16
%n=bitcast i8*%m to i8**
%o=load i8*,i8**%n,align 8
store i8*%o,i8**%f,align 8
%p=getelementptr inbounds i8,i8*%a,i64 24
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=getelementptr inbounds i8,i8*%a,i64 28
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=call i8*@sml_alloc(i32 inreg 44)#0
%w=getelementptr inbounds i8,i8*%v,i64 -4
%x=bitcast i8*%w to i32*
store i32 1342177320,i32*%x,align 4
store i8*%v,i8**%g,align 8
%y=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%z=bitcast i8*%v to i8**
store i8*%y,i8**%z,align 8
%A=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%B=getelementptr inbounds i8,i8*%v,i64 8
%C=bitcast i8*%B to i8**
store i8*%A,i8**%C,align 8
%D=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%E=getelementptr inbounds i8,i8*%v,i64 16
%F=bitcast i8*%E to i8**
store i8*%D,i8**%F,align 8
%G=getelementptr inbounds i8,i8*%v,i64 24
%H=bitcast i8*%G to i32*
store i32%r,i32*%H,align 4
%I=getelementptr inbounds i8,i8*%v,i64 28
%J=bitcast i8*%I to i32*
store i32%u,i32*%J,align 4
%K=getelementptr inbounds i8,i8*%v,i64 32
%L=bitcast i8*%K to i32*
store i32%b,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%v,i64 36
%N=bitcast i8*%M to i32*
store i32%c,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%v,i64 40
%P=bitcast i8*%O to i32*
store i32 7,i32*%P,align 4
%Q=call i8*@sml_alloc(i32 inreg 28)#0
%R=getelementptr inbounds i8,i8*%Q,i64 -4
%S=bitcast i8*%R to i32*
store i32 1342177304,i32*%S,align 4
%T=load i8*,i8**%g,align 8
%U=bitcast i8*%Q to i8**
store i8*%T,i8**%U,align 8
%V=getelementptr inbounds i8,i8*%Q,i64 8
%W=bitcast i8*%V to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL11unionWithi3_453 to void(...)*),void(...)**%W,align 8
%X=getelementptr inbounds i8,i8*%Q,i64 16
%Y=bitcast i8*%X to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL11unionWithi3_453 to void(...)*),void(...)**%Y,align 8
%Z=getelementptr inbounds i8,i8*%Q,i64 24
%aa=bitcast i8*%Z to i32*
store i32 -2147483647,i32*%aa,align 4
ret i8*%Q
}
define internal fastcc i8*@_SMLL3ins_455(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
p:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
store i8*%a,i8**%g,align 8
store i8*%b,i8**%c,align 8
%j=load atomic i32,i32*@sml_check_flag unordered,align 4
%k=icmp eq i32%j,0
br i1%k,label%n,label%l
l:
call void@sml_check(i32 inreg%j)
%m=load i8*,i8**%g,align 8
br label%n
n:
%o=phi i8*[%m,%l],[%a,%p]
%q=getelementptr inbounds i8,i8*%o,i64 36
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=add i32%s,-1
%u=sub i32 0,%s
%v=and i32%t,%u
%w=getelementptr inbounds i8,i8*%o,i64 52
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=add i32%t,%y
%A=add i32%z,%v
%B=sub i32 0,%y
%C=and i32%A,%B
%D=add i32%y,7
%E=add i32%D,%C
%F=and i32%E,-8
%G=add i32%s,7
%H=and i32%G,%u
%I=add i32%H,%s
%J=add i32%I,7
%K=and i32%J,-8
%L=lshr i32%H,3
%M=getelementptr inbounds i8,i8*%o,i64 32
%N=bitcast i8*%M to i32*
%O=load i32,i32*%N,align 4
%P=shl i32%O,%L
%Q=or i32%P,1
%R=or i32%K,4
%S=getelementptr inbounds i8,i8*%o,i64 44
%T=bitcast i8*%S to i32*
%U=load i32,i32*%T,align 4
%V=add i32%U,-1
%W=sub i32 0,%U
%X=and i32%V,%W
%Y=add i32%y,-1
%Z=add i32%Y,%U
%aa=add i32%Z,%X
%ab=and i32%aa,%B
%ac=add i32%D,%ab
%ad=and i32%ac,-8
%ae=lshr i32%ab,3
%af=lshr i32%X,3
%ag=sub nsw i32%ae,%af
%ah=getelementptr inbounds i8,i8*%o,i64 48
%ai=bitcast i8*%ah to i32*
%aj=load i32,i32*%ai,align 4
%ak=shl i32%aj,%ag
%al=getelementptr inbounds i8,i8*%o,i64 40
%am=bitcast i8*%al to i32*
%an=load i32,i32*%am,align 4
%ao=or i32%ak,%an
%ap=or i32%ad,4
%aq=getelementptr inbounds i8,i8*%o,i64 60
%ar=bitcast i8*%aq to i32*
%as=load i32,i32*%ar,align 4
%at=add i32%I,-1
%au=add i32%at,%as
%av=sub i32 0,%as
%aw=and i32%au,%av
%ax=add i32%as,7
%ay=add i32%ax,%aw
%az=and i32%ay,-8
%aA=lshr i32%aw,3
%aB=sub nsw i32%aA,%L
%aC=getelementptr inbounds i8,i8*%o,i64 56
%aD=bitcast i8*%aC to i32*
%aE=load i32,i32*%aD,align 4
%aF=shl i32%aE,%aB
%aG=or i32%aF,%O
%aH=shl i32%aG,%L
%aI=or i32%aH,1
%aJ=or i32%az,4
%aK=icmp eq i32%O,0
br i1%aK,label%aR,label%aL
aL:
%aM=load i8*,i8**%c,align 8
%aN=sext i32%v to i64
%aO=getelementptr inbounds i8,i8*%aM,i64%aN
%aP=bitcast i8*%aO to i8**
%aQ=load i8*,i8**%aP,align 8
br label%a2
aR:
%aS=call i8*@sml_alloc(i32 inreg%s)#0
%aT=getelementptr inbounds i8,i8*%aS,i64 -4
%aU=bitcast i8*%aT to i32*
store i32%s,i32*%aU,align 4
%aV=load i8*,i8**%c,align 8
%aW=sext i32%v to i64
%aX=getelementptr inbounds i8,i8*%aV,i64%aW
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aS,i8*%aX,i32%s,i1 false)
%aY=load i8*,i8**%g,align 8
%aZ=getelementptr inbounds i8,i8*%aY,i64 48
%a0=bitcast i8*%aZ to i32*
%a1=load i32,i32*%a0,align 4
br label%a2
a2:
%a3=phi i8*[%aV,%aR],[%aM,%aL]
%a4=phi i32[%a1,%aR],[%aj,%aL]
%a5=phi i8*[%aY,%aR],[%o,%aL]
%a6=phi i8*[%aS,%aR],[%aQ,%aL]
store i8*%a6,i8**%d,align 8
%a7=icmp eq i32%a4,0
br i1%a7,label%bd,label%a8
a8:
%a9=sext i32%C to i64
%ba=getelementptr inbounds i8,i8*%a3,i64%a9
%bb=bitcast i8*%ba to i8**
%bc=load i8*,i8**%bb,align 8
br label%bo
bd:
%be=getelementptr inbounds i8,i8*%a5,i64 52
%bf=bitcast i8*%be to i32*
%bg=load i32,i32*%bf,align 4
%bh=call i8*@sml_alloc(i32 inreg%bg)#0
%bi=getelementptr inbounds i8,i8*%bh,i64 -4
%bj=bitcast i8*%bi to i32*
store i32%bg,i32*%bj,align 4
%bk=load i8*,i8**%c,align 8
%bl=sext i32%C to i64
%bm=getelementptr inbounds i8,i8*%bk,i64%bl
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bh,i8*%bm,i32%bg,i1 false)
%bn=load i8*,i8**%g,align 8
br label%bo
bo:
%bp=phi i8*[%bn,%bd],[%a5,%a8]
%bq=phi i8*[%bk,%bd],[%a3,%a8]
%br=phi i8*[%bh,%bd],[%bc,%a8]
store i8*%br,i8**%e,align 8
store i8*null,i8**%c,align 8
%bs=sext i32%F to i64
%bt=getelementptr inbounds i8,i8*%bq,i64%bs
%bu=bitcast i8*%bt to i8**
%bv=load i8*,i8**%bu,align 8
store i8*%bv,i8**%f,align 8
%bw=getelementptr inbounds i8,i8*%bp,i64 24
%bx=bitcast i8*%bw to i8**
%by=load i8*,i8**%bx,align 8
%bz=getelementptr inbounds i8,i8*%bp,i64 40
%bA=bitcast i8*%bz to i32*
%bB=load i32,i32*%bA,align 4
%bC=getelementptr inbounds i8,i8*%bp,i64 44
%bD=bitcast i8*%bC to i32*
%bE=load i32,i32*%bD,align 4
%bF=call fastcc i8*@_SMLL4find_352(i8*inreg%by,i32 inreg%bB,i32 inreg%bE)
%bG=getelementptr inbounds i8,i8*%bF,i64 16
%bH=bitcast i8*%bG to i8*(i8*,i8*)**
%bI=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bH,align 8
%bJ=bitcast i8*%bF to i8**
%bK=load i8*,i8**%bJ,align 8
store i8*%bK,i8**%h,align 8
%bL=load i8*,i8**%g,align 8
%bM=getelementptr inbounds i8,i8*%bL,i64 8
%bN=bitcast i8*%bM to i8**
%bO=load i8*,i8**%bN,align 8
store i8*%bO,i8**%c,align 8
%bP=getelementptr inbounds i8,i8*%bL,i64 36
%bQ=bitcast i8*%bP to i32*
%bR=load i32,i32*%bQ,align 4
%bS=getelementptr inbounds i8,i8*%bL,i64 32
%bT=bitcast i8*%bS to i32*
%bU=load i32,i32*%bT,align 4
%bV=call i8*@sml_alloc(i32 inreg%R)#0
%bW=or i32%K,1342177280
%bX=getelementptr inbounds i8,i8*%bV,i64 -4
%bY=bitcast i8*%bX to i32*
store i32%bW,i32*%bY,align 4
call void@llvm.memset.p0i8.i32(i8*%bV,i8 0,i32%R,i1 false)
%bZ=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%b0=bitcast i8*%bV to i8**
store i8*%bZ,i8**%b0,align 8
%b1=icmp eq i32%bU,0
%b2=load i8*,i8**%d,align 8
%b3=sext i32%H to i64
%b4=getelementptr inbounds i8,i8*%bV,i64%b3
br i1%b1,label%b7,label%b5
b5:
%b6=bitcast i8*%b4 to i8**
store i8*%b2,i8**%b6,align 8
br label%b8
b7:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%b4,i8*%b2,i32%bR,i1 false)
br label%b8
b8:
%b9=sext i32%K to i64
%ca=getelementptr inbounds i8,i8*%bV,i64%b9
%cb=bitcast i8*%ca to i32*
store i32%Q,i32*%cb,align 4
%cc=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%cd=call fastcc i8*%bI(i8*inreg%cc,i8*inreg%bV)
store i8*%cd,i8**%c,align 8
%ce=icmp eq i8*%cd,null
br i1%ce,label%cf,label%ch
cf:
%cg=load i8*,i8**%f,align 8
ret i8*%cg
ch:
%ci=load i8*,i8**%g,align 8
%cj=getelementptr inbounds i8,i8*%ci,i64 40
%ck=bitcast i8*%cj to i32*
%cl=load i32,i32*%ck,align 4
%cm=icmp eq i32%cl,0
br i1%cm,label%cs,label%cn
cn:
store i8*null,i8**%c,align 8
%co=sext i32%X to i64
%cp=getelementptr inbounds i8,i8*%cd,i64%co
%cq=bitcast i8*%cp to i8**
%cr=load i8*,i8**%cq,align 8
br label%cD
cs:
%ct=getelementptr inbounds i8,i8*%ci,i64 44
%cu=bitcast i8*%ct to i32*
%cv=load i32,i32*%cu,align 4
%cw=call i8*@sml_alloc(i32 inreg%cv)#0
%cx=getelementptr inbounds i8,i8*%cw,i64 -4
%cy=bitcast i8*%cx to i32*
store i32%cv,i32*%cy,align 4
%cz=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cA=sext i32%X to i64
%cB=getelementptr inbounds i8,i8*%cz,i64%cA
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cw,i8*%cB,i32%cv,i1 false)
%cC=load i8*,i8**%g,align 8
br label%cD
cD:
%cE=phi i64[%cA,%cs],[%co,%cn]
%cF=phi i8*[%cC,%cs],[%ci,%cn]
%cG=phi i8*[%cw,%cs],[%cr,%cn]
store i8*%cG,i8**%c,align 8
%cH=getelementptr inbounds i8,i8*%cF,i64 16
%cI=bitcast i8*%cH to i8**
%cJ=load i8*,i8**%cI,align 8
%cK=getelementptr inbounds i8,i8*%cF,i64 56
%cL=bitcast i8*%cK to i32*
%cM=load i32,i32*%cL,align 4
%cN=getelementptr inbounds i8,i8*%cF,i64 60
%cO=bitcast i8*%cN to i32*
%cP=load i32,i32*%cO,align 4
%cQ=call fastcc i8*@_SMLL6insert_334(i8*inreg%cJ,i32 inreg%cM,i32 inreg%cP)
%cR=getelementptr inbounds i8,i8*%cQ,i64 16
%cS=bitcast i8*%cR to i8*(i8*,i8*)**
%cT=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%cS,align 8
%cU=bitcast i8*%cQ to i8**
%cV=load i8*,i8**%cU,align 8
store i8*%cV,i8**%i,align 8
%cW=bitcast i8**%g to i8***
%cX=load i8**,i8***%cW,align 8
%cY=load i8*,i8**%cX,align 8
%cZ=getelementptr inbounds i8,i8*%cY,i64 16
%c0=bitcast i8*%cZ to i8*(i8*,i8*)**
%c1=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%c0,align 8
%c2=bitcast i8*%cY to i8**
%c3=load i8*,i8**%c2,align 8
store i8*%c3,i8**%h,align 8
%c4=bitcast i8**%cX to i8*
%c5=getelementptr inbounds i8,i8*%c4,i64 44
%c6=bitcast i8*%c5 to i32*
%c7=load i32,i32*%c6,align 4
%c8=getelementptr inbounds i8*,i8**%cX,i64 5
%c9=bitcast i8**%c8 to i32*
%da=load i32,i32*%c9,align 4
%db=getelementptr inbounds i8,i8*%c4,i64 52
%dc=bitcast i8*%db to i32*
%dd=load i32,i32*%dc,align 4
%de=getelementptr inbounds i8*,i8**%cX,i64 6
%df=bitcast i8**%de to i32*
%dg=load i32,i32*%df,align 4
%dh=call i8*@sml_alloc(i32 inreg%ap)#0
%di=or i32%ad,1342177280
%dj=getelementptr inbounds i8,i8*%dh,i64 -4
%dk=bitcast i8*%dj to i32*
store i32%di,i32*%dk,align 4
call void@llvm.memset.p0i8.i32(i8*%dh,i8 0,i32%ap,i1 false)
%dl=icmp eq i32%da,0
%dm=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%dn=getelementptr inbounds i8,i8*%dh,i64%cE
br i1%dl,label%dq,label%do
do:
%dp=bitcast i8*%dn to i8**
store i8*%dm,i8**%dp,align 8
br label%dr
dq:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dn,i8*%dm,i32%c7,i1 false)
br label%dr
dr:
%ds=icmp eq i32%dg,0
%dt=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%du=sext i32%ab to i64
%dv=getelementptr inbounds i8,i8*%dh,i64%du
br i1%ds,label%dy,label%dw
dw:
%dx=bitcast i8*%dv to i8**
store i8*%dt,i8**%dx,align 8
br label%dz
dy:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dv,i8*%dt,i32%dd,i1 false)
br label%dz
dz:
%dA=sext i32%ad to i64
%dB=getelementptr inbounds i8,i8*%dh,i64%dA
%dC=bitcast i8*%dB to i32*
store i32%ao,i32*%dC,align 4
%dD=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%dE=call fastcc i8*%c1(i8*inreg%dD,i8*inreg%dh)
store i8*%dE,i8**%c,align 8
%dF=load i8*,i8**%g,align 8
%dG=getelementptr inbounds i8,i8*%dF,i64 36
%dH=bitcast i8*%dG to i32*
%dI=load i32,i32*%dH,align 4
%dJ=getelementptr inbounds i8,i8*%dF,i64 32
%dK=bitcast i8*%dJ to i32*
%dL=load i32,i32*%dK,align 4
%dM=getelementptr inbounds i8,i8*%dF,i64 60
%dN=bitcast i8*%dM to i32*
%dO=load i32,i32*%dN,align 4
store i8*null,i8**%g,align 8
%dP=getelementptr inbounds i8,i8*%dF,i64 56
%dQ=bitcast i8*%dP to i32*
%dR=load i32,i32*%dQ,align 4
%dS=call i8*@sml_alloc(i32 inreg%aJ)#0
%dT=or i32%az,1342177280
%dU=getelementptr inbounds i8,i8*%dS,i64 -4
%dV=bitcast i8*%dU to i32*
store i32%dT,i32*%dV,align 4
call void@llvm.memset.p0i8.i32(i8*%dS,i8 0,i32%aJ,i1 false)
%dW=load i8*,i8**%f,align 8
%dX=bitcast i8*%dS to i8**
store i8*%dW,i8**%dX,align 8
%dY=icmp eq i32%dL,0
%dZ=load i8*,i8**%d,align 8
%d0=getelementptr inbounds i8,i8*%dS,i64%b3
br i1%dY,label%d3,label%d1
d1:
%d2=bitcast i8*%d0 to i8**
store i8*%dZ,i8**%d2,align 8
br label%d4
d3:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%d0,i8*%dZ,i32%dI,i1 false)
br label%d4
d4:
%d5=icmp eq i32%dR,0
%d6=load i8*,i8**%c,align 8
%d7=sext i32%aw to i64
%d8=getelementptr inbounds i8,i8*%dS,i64%d7
br i1%d5,label%eb,label%d9
d9:
%ea=bitcast i8*%d8 to i8**
store i8*%d6,i8**%ea,align 8
br label%ec
eb:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%d8,i8*%d6,i32%dO,i1 false)
br label%ec
ec:
%ed=sext i32%az to i64
%ee=getelementptr inbounds i8,i8*%dS,i64%ed
%ef=bitcast i8*%ee to i32*
store i32%aI,i32*%ef,align 4
%eg=load i8*,i8**%i,align 8
%eh=tail call fastcc i8*%cT(i8*inreg%eg,i8*inreg%dS)
ret i8*%eh
}
define internal fastcc i8*@_SMLL9intersect_456(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%j=load atomic i32,i32*@sml_check_flag unordered,align 4
%k=icmp eq i32%j,0
br i1%k,label%l,label%o
l:
%m=bitcast i8*%a to i8**
%n=bitcast i8*%b to i8**
br label%u
o:
call void@sml_check(i32 inreg%j)
%p=bitcast i8**%c to i8***
%q=load i8**,i8***%p,align 8
%r=bitcast i8**%e to i8***
%s=load i8**,i8***%r,align 8
%t=bitcast i8**%s to i8*
br label%u
u:
%v=phi i8*[%t,%o],[%a,%l]
%w=phi i8**[%s,%o],[%m,%l]
%x=phi i8**[%q,%o],[%n,%l]
%y=load i8*,i8**%x,align 8
store i8*%y,i8**%d,align 8
%z=load i8*,i8**%w,align 8
store i8*%z,i8**%f,align 8
%A=getelementptr inbounds i8*,i8**%w,i64 1
%B=load i8*,i8**%A,align 8
store i8*%B,i8**%g,align 8
%C=getelementptr inbounds i8*,i8**%w,i64 2
%D=load i8*,i8**%C,align 8
store i8*%D,i8**%h,align 8
%E=getelementptr inbounds i8,i8*%v,i64 32
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
%H=getelementptr inbounds i8,i8*%v,i64 36
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
%K=getelementptr inbounds i8,i8*%v,i64 40
%L=bitcast i8*%K to i32*
%M=load i32,i32*%L,align 4
%N=getelementptr inbounds i8,i8*%v,i64 44
%O=bitcast i8*%N to i32*
%P=load i32,i32*%O,align 4
%Q=getelementptr inbounds i8,i8*%v,i64 48
%R=bitcast i8*%Q to i32*
%S=load i32,i32*%R,align 4
%T=getelementptr inbounds i8,i8*%v,i64 52
%U=bitcast i8*%T to i32*
%V=load i32,i32*%U,align 4
%W=getelementptr inbounds i8,i8*%v,i64 56
%X=bitcast i8*%W to i32*
%Y=load i32,i32*%X,align 4
%Z=getelementptr inbounds i8,i8*%v,i64 60
%aa=bitcast i8*%Z to i32*
%ab=load i32,i32*%aa,align 4
%ac=call i8*@sml_alloc(i32 inreg 68)#0
%ad=getelementptr inbounds i8,i8*%ac,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 1342177344,i32*%ae,align 4
store i8*%ac,i8**%i,align 8
%af=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%ag=bitcast i8*%ac to i8**
store i8*%af,i8**%ag,align 8
%ah=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ai=getelementptr inbounds i8,i8*%ac,i64 8
%aj=bitcast i8*%ai to i8**
store i8*%ah,i8**%aj,align 8
%ak=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%al=getelementptr inbounds i8,i8*%ac,i64 16
%am=bitcast i8*%al to i8**
store i8*%ak,i8**%am,align 8
%an=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%ao=getelementptr inbounds i8,i8*%ac,i64 24
%ap=bitcast i8*%ao to i8**
store i8*%an,i8**%ap,align 8
%aq=getelementptr inbounds i8,i8*%ac,i64 32
%ar=bitcast i8*%aq to i32*
store i32%G,i32*%ar,align 4
%as=getelementptr inbounds i8,i8*%ac,i64 36
%at=bitcast i8*%as to i32*
store i32%J,i32*%at,align 4
%au=getelementptr inbounds i8,i8*%ac,i64 40
%av=bitcast i8*%au to i32*
store i32%M,i32*%av,align 4
%aw=getelementptr inbounds i8,i8*%ac,i64 44
%ax=bitcast i8*%aw to i32*
store i32%P,i32*%ax,align 4
%ay=getelementptr inbounds i8,i8*%ac,i64 48
%az=bitcast i8*%ay to i32*
store i32%S,i32*%az,align 4
%aA=getelementptr inbounds i8,i8*%ac,i64 52
%aB=bitcast i8*%aA to i32*
store i32%V,i32*%aB,align 4
%aC=getelementptr inbounds i8,i8*%ac,i64 56
%aD=bitcast i8*%aC to i32*
store i32%Y,i32*%aD,align 4
%aE=getelementptr inbounds i8,i8*%ac,i64 60
%aF=bitcast i8*%aE to i32*
store i32%ab,i32*%aF,align 4
%aG=getelementptr inbounds i8,i8*%ac,i64 64
%aH=bitcast i8*%aG to i32*
store i32 15,i32*%aH,align 4
%aI=call i8*@sml_alloc(i32 inreg 28)#0
%aJ=getelementptr inbounds i8,i8*%aI,i64 -4
%aK=bitcast i8*%aJ to i32*
store i32 1342177304,i32*%aK,align 4
store i8*%aI,i8**%d,align 8
%aL=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%aM=bitcast i8*%aI to i8**
store i8*%aL,i8**%aM,align 8
%aN=getelementptr inbounds i8,i8*%aI,i64 8
%aO=bitcast i8*%aN to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3ins_455 to void(...)*),void(...)**%aO,align 8
%aP=getelementptr inbounds i8,i8*%aI,i64 16
%aQ=bitcast i8*%aP to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3ins_455 to void(...)*),void(...)**%aQ,align 8
%aR=getelementptr inbounds i8,i8*%aI,i64 24
%aS=bitcast i8*%aR to i32*
store i32 -2147483647,i32*%aS,align 4
%aT=load i8*,i8**%e,align 8
%aU=getelementptr inbounds i8,i8*%aT,i64 24
%aV=bitcast i8*%aU to i8**
%aW=load i8*,i8**%aV,align 8
%aX=getelementptr inbounds i8,i8*%aT,i64 48
%aY=bitcast i8*%aX to i32*
%aZ=load i32,i32*%aY,align 4
%a0=getelementptr inbounds i8,i8*%aT,i64 52
%a1=bitcast i8*%a0 to i32*
%a2=load i32,i32*%a1,align 4
%a3=call fastcc i8*@_SMLL6foldli_411(i8*inreg%aW,i32 inreg%aZ,i32 inreg%a2,i32 inreg 1,i32 inreg 8)
%a4=getelementptr inbounds i8,i8*%a3,i64 16
%a5=bitcast i8*%a4 to i8*(i8*,i8*)**
%a6=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a5,align 8
%a7=bitcast i8*%a3 to i8**
%a8=load i8*,i8**%a7,align 8
%a9=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ba=call fastcc i8*%a6(i8*inreg%a8,i8*inreg%a9)
%bb=getelementptr inbounds i8,i8*%ba,i64 16
%bc=bitcast i8*%bb to i8*(i8*,i8*)**
%bd=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bc,align 8
%be=bitcast i8*%ba to i8**
%bf=load i8*,i8**%be,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%d,align 8
%bg=call fastcc i8*%bd(i8*inreg%bf,i8*inreg null)
%bh=getelementptr inbounds i8,i8*%bg,i64 16
%bi=bitcast i8*%bh to i8*(i8*,i8*)**
%bj=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bi,align 8
%bk=bitcast i8*%bg to i8**
%bl=load i8*,i8**%bk,align 8
%bm=load i8*,i8**%c,align 8
%bn=getelementptr inbounds i8,i8*%bm,i64 8
%bo=bitcast i8*%bn to i8**
%bp=load i8*,i8**%bo,align 8
%bq=tail call fastcc i8*%bj(i8*inreg%bl,i8*inreg%bp)
ret i8*%bq
}
define internal fastcc i8*@_SMLL9intersect_457(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%b,i8**%c,align 8
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%d,align 8
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
store i8*%l,i8**%e,align 8
%m=getelementptr inbounds i8,i8*%a,i64 16
%n=bitcast i8*%m to i8**
%o=load i8*,i8**%n,align 8
store i8*%o,i8**%f,align 8
%p=getelementptr inbounds i8,i8*%a,i64 24
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=getelementptr inbounds i8,i8*%a,i64 28
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=getelementptr inbounds i8,i8*%a,i64 32
%w=bitcast i8*%v to i32*
%x=load i32,i32*%w,align 4
%y=getelementptr inbounds i8,i8*%a,i64 36
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=getelementptr inbounds i8,i8*%a,i64 40
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=getelementptr inbounds i8,i8*%a,i64 44
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
%H=getelementptr inbounds i8,i8*%a,i64 48
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
%K=getelementptr inbounds i8,i8*%a,i64 52
%L=bitcast i8*%K to i32*
%M=load i32,i32*%L,align 4
%N=call i8*@sml_alloc(i32 inreg 68)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32 1342177344,i32*%P,align 4
store i8*%N,i8**%g,align 8
%Q=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%R=bitcast i8*%N to i8**
store i8*%Q,i8**%R,align 8
%S=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%T=getelementptr inbounds i8,i8*%N,i64 8
%U=bitcast i8*%T to i8**
store i8*%S,i8**%U,align 8
%V=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%W=getelementptr inbounds i8,i8*%N,i64 16
%X=bitcast i8*%W to i8**
store i8*%V,i8**%X,align 8
%Y=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%Z=getelementptr inbounds i8,i8*%N,i64 24
%aa=bitcast i8*%Z to i8**
store i8*%Y,i8**%aa,align 8
%ab=getelementptr inbounds i8,i8*%N,i64 32
%ac=bitcast i8*%ab to i32*
store i32%r,i32*%ac,align 4
%ad=getelementptr inbounds i8,i8*%N,i64 36
%ae=bitcast i8*%ad to i32*
store i32%u,i32*%ae,align 4
%af=getelementptr inbounds i8,i8*%N,i64 40
%ag=bitcast i8*%af to i32*
store i32%x,i32*%ag,align 4
%ah=getelementptr inbounds i8,i8*%N,i64 44
%ai=bitcast i8*%ah to i32*
store i32%A,i32*%ai,align 4
%aj=getelementptr inbounds i8,i8*%N,i64 48
%ak=bitcast i8*%aj to i32*
store i32%D,i32*%ak,align 4
%al=getelementptr inbounds i8,i8*%N,i64 52
%am=bitcast i8*%al to i32*
store i32%G,i32*%am,align 4
%an=getelementptr inbounds i8,i8*%N,i64 56
%ao=bitcast i8*%an to i32*
store i32%J,i32*%ao,align 4
%ap=getelementptr inbounds i8,i8*%N,i64 60
%aq=bitcast i8*%ap to i32*
store i32%M,i32*%aq,align 4
%ar=getelementptr inbounds i8,i8*%N,i64 64
%as=bitcast i8*%ar to i32*
store i32 15,i32*%as,align 4
%at=call i8*@sml_alloc(i32 inreg 28)#0
%au=getelementptr inbounds i8,i8*%at,i64 -4
%av=bitcast i8*%au to i32*
store i32 1342177304,i32*%av,align 4
%aw=load i8*,i8**%g,align 8
%ax=bitcast i8*%at to i8**
store i8*%aw,i8**%ax,align 8
%ay=getelementptr inbounds i8,i8*%at,i64 8
%az=bitcast i8*%ay to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL9intersect_456 to void(...)*),void(...)**%az,align 8
%aA=getelementptr inbounds i8,i8*%at,i64 16
%aB=bitcast i8*%aA to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL9intersect_456 to void(...)*),void(...)**%aB,align 8
%aC=getelementptr inbounds i8,i8*%at,i64 24
%aD=bitcast i8*%aC to i32*
store i32 -2147483647,i32*%aD,align 4
ret i8*%at
}
define internal fastcc i8*@_SMLL9intersect_458(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e,i32 inreg%f,i32 inreg%g)#4 gc"smlsharp"{
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
%k=alloca i8*,align 8
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
call void@llvm.gcroot(i8**%k,i8*null)#0
%l=bitcast i8*%a to i8**
%m=load i8*,i8**%l,align 8
store i8*%m,i8**%h,align 8
%n=getelementptr inbounds i8,i8*%a,i64 8
%o=bitcast i8*%n to i8**
%p=load i8*,i8**%o,align 8
store i8*%p,i8**%i,align 8
%q=getelementptr inbounds i8,i8*%a,i64 16
%r=bitcast i8*%q to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%j,align 8
%t=getelementptr inbounds i8,i8*%a,i64 24
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=getelementptr inbounds i8,i8*%a,i64 28
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=call i8*@sml_alloc(i32 inreg 60)#0
%A=getelementptr inbounds i8,i8*%z,i64 -4
%B=bitcast i8*%A to i32*
store i32 1342177336,i32*%B,align 4
store i8*%z,i8**%k,align 8
%C=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%D=bitcast i8*%z to i8**
store i8*%C,i8**%D,align 8
%E=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%F=getelementptr inbounds i8,i8*%z,i64 8
%G=bitcast i8*%F to i8**
store i8*%E,i8**%G,align 8
%H=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%I=getelementptr inbounds i8,i8*%z,i64 16
%J=bitcast i8*%I to i8**
store i8*%H,i8**%J,align 8
%K=getelementptr inbounds i8,i8*%z,i64 24
%L=bitcast i8*%K to i32*
store i32%v,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%z,i64 28
%N=bitcast i8*%M to i32*
store i32%y,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%z,i64 32
%P=bitcast i8*%O to i32*
store i32%b,i32*%P,align 4
%Q=getelementptr inbounds i8,i8*%z,i64 36
%R=bitcast i8*%Q to i32*
store i32%c,i32*%R,align 4
%S=getelementptr inbounds i8,i8*%z,i64 40
%T=bitcast i8*%S to i32*
store i32%d,i32*%T,align 4
%U=getelementptr inbounds i8,i8*%z,i64 44
%V=bitcast i8*%U to i32*
store i32%e,i32*%V,align 4
%W=getelementptr inbounds i8,i8*%z,i64 48
%X=bitcast i8*%W to i32*
store i32%f,i32*%X,align 4
%Y=getelementptr inbounds i8,i8*%z,i64 52
%Z=bitcast i8*%Y to i32*
store i32%g,i32*%Z,align 4
%aa=getelementptr inbounds i8,i8*%z,i64 56
%ab=bitcast i8*%aa to i32*
store i32 7,i32*%ab,align 4
%ac=call i8*@sml_alloc(i32 inreg 28)#0
%ad=getelementptr inbounds i8,i8*%ac,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 1342177304,i32*%ae,align 4
%af=load i8*,i8**%k,align 8
%ag=bitcast i8*%ac to i8**
store i8*%af,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%ac,i64 8
%ai=bitcast i8*%ah to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL9intersect_457 to void(...)*),void(...)**%ai,align 8
%aj=getelementptr inbounds i8,i8*%ac,i64 16
%ak=bitcast i8*%aj to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL9intersect_457 to void(...)*),void(...)**%ak,align 8
%al=getelementptr inbounds i8,i8*%ac,i64 24
%am=bitcast i8*%al to i32*
store i32 -2147483647,i32*%am,align 4
ret i8*%ac
}
define internal fastcc i8*@_SMLL13intersectWith_459(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
m:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%k,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%e,align 8
br label%k
k:
%l=phi i8*[%j,%i],[%a,%m]
%n=getelementptr inbounds i8,i8*%l,i64 20
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=add i32%p,-1
%r=sub i32 0,%p
%s=and i32%q,%r
%t=getelementptr inbounds i8,i8*%l,i64 12
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=add i32%q,%v
%x=add i32%w,%s
%y=sub i32 0,%v
%z=and i32%x,%y
%A=add i32%v,-1
%B=and i32%A,%y
%C=add i32%w,%B
%D=and i32%C,%r
%E=add i32%p,7
%F=add i32%E,%D
%G=and i32%F,-8
%H=lshr i32%D,3
%I=lshr i32%B,3
%J=sub nsw i32%H,%I
%K=getelementptr inbounds i8,i8*%l,i64 16
%L=bitcast i8*%K to i32*
%M=load i32,i32*%L,align 4
%N=shl i32%M,%J
%O=getelementptr inbounds i8,i8*%l,i64 8
%P=bitcast i8*%O to i32*
%Q=load i32,i32*%P,align 4
%R=or i32%N,%Q
%S=or i32%G,4
%T=icmp eq i32%M,0
br i1%T,label%aa,label%U
U:
%V=load i8*,i8**%c,align 8
%W=sext i32%s to i64
%X=getelementptr inbounds i8,i8*%V,i64%W
%Y=bitcast i8*%X to i8**
%Z=load i8*,i8**%Y,align 8
br label%al
aa:
%ab=call i8*@sml_alloc(i32 inreg%p)#0
%ac=getelementptr inbounds i8,i8*%ab,i64 -4
%ad=bitcast i8*%ac to i32*
store i32%p,i32*%ad,align 4
%ae=load i8*,i8**%c,align 8
%af=sext i32%s to i64
%ag=getelementptr inbounds i8,i8*%ae,i64%af
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ab,i8*%ag,i32%p,i1 false)
%ah=load i8*,i8**%e,align 8
%ai=getelementptr inbounds i8,i8*%ah,i64 8
%aj=bitcast i8*%ai to i32*
%ak=load i32,i32*%aj,align 4
br label%al
al:
%am=phi i8*[%ah,%aa],[%l,%U]
%an=phi i8*[%ae,%aa],[%V,%U]
%ao=phi i32[%ak,%aa],[%Q,%U]
%ap=phi i8*[%ab,%aa],[%Z,%U]
store i8*%ap,i8**%d,align 8
%aq=icmp eq i32%ao,0
br i1%aq,label%ax,label%ar
ar:
%as=bitcast i8*%am to i8**
store i8*null,i8**%c,align 8
%at=sext i32%z to i64
%au=getelementptr inbounds i8,i8*%an,i64%at
%av=bitcast i8*%au to i8**
%aw=load i8*,i8**%av,align 8
br label%aN
ax:
%ay=getelementptr inbounds i8,i8*%am,i64 12
%az=bitcast i8*%ay to i32*
%aA=load i32,i32*%az,align 4
%aB=call i8*@sml_alloc(i32 inreg%aA)#0
%aC=getelementptr inbounds i8,i8*%aB,i64 -4
%aD=bitcast i8*%aC to i32*
store i32%aA,i32*%aD,align 4
%aE=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aF=sext i32%z to i64
%aG=getelementptr inbounds i8,i8*%aE,i64%aF
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aB,i8*%aG,i32%aA,i1 false)
%aH=bitcast i8**%e to i8***
%aI=load i8**,i8***%aH,align 8
%aJ=bitcast i8**%aI to i8*
%aK=getelementptr inbounds i8*,i8**%aI,i64 1
%aL=bitcast i8**%aK to i32*
%aM=load i32,i32*%aL,align 4
br label%aN
aN:
%aO=phi i32[%aM,%ax],[%ao,%ar]
%aP=phi i8*[%aJ,%ax],[%am,%ar]
%aQ=phi i8**[%aI,%ax],[%as,%ar]
%aR=phi i8*[%aB,%ax],[%aw,%ar]
store i8*%aR,i8**%c,align 8
%aS=load i8*,i8**%aQ,align 8
%aT=getelementptr inbounds i8,i8*%aS,i64 16
%aU=bitcast i8*%aT to i8*(i8*,i8*)**
%aV=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aU,align 8
%aW=bitcast i8*%aS to i8**
%aX=load i8*,i8**%aW,align 8
store i8*%aX,i8**%f,align 8
%aY=getelementptr inbounds i8,i8*%aP,i64 12
%aZ=bitcast i8*%aY to i32*
%a0=load i32,i32*%aZ,align 4
%a1=getelementptr inbounds i8,i8*%aP,i64 20
%a2=bitcast i8*%a1 to i32*
%a3=load i32,i32*%a2,align 4
store i8*null,i8**%e,align 8
%a4=getelementptr inbounds i8,i8*%aP,i64 16
%a5=bitcast i8*%a4 to i32*
%a6=load i32,i32*%a5,align 4
%a7=call i8*@sml_alloc(i32 inreg%S)#0
%a8=or i32%G,1342177280
%a9=getelementptr inbounds i8,i8*%a7,i64 -4
%ba=bitcast i8*%a9 to i32*
store i32%a8,i32*%ba,align 4
call void@llvm.memset.p0i8.i32(i8*%a7,i8 0,i32%S,i1 false)
%bb=icmp eq i32%aO,0
%bc=load i8*,i8**%c,align 8
%bd=sext i32%B to i64
%be=getelementptr inbounds i8,i8*%a7,i64%bd
br i1%bb,label%bh,label%bf
bf:
%bg=bitcast i8*%be to i8**
store i8*%bc,i8**%bg,align 8
br label%bi
bh:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%be,i8*%bc,i32%a0,i1 false)
br label%bi
bi:
%bj=icmp eq i32%a6,0
%bk=load i8*,i8**%d,align 8
%bl=sext i32%D to i64
%bm=getelementptr inbounds i8,i8*%a7,i64%bl
br i1%bj,label%bp,label%bn
bn:
%bo=bitcast i8*%bm to i8**
store i8*%bk,i8**%bo,align 8
br label%bq
bp:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bm,i8*%bk,i32%a3,i1 false)
br label%bq
bq:
%br=sext i32%G to i64
%bs=getelementptr inbounds i8,i8*%a7,i64%br
%bt=bitcast i8*%bs to i32*
store i32%R,i32*%bt,align 4
%bu=load i8*,i8**%f,align 8
%bv=tail call fastcc i8*%aV(i8*inreg%bu,i8*inreg%a7)
ret i8*%bv
}
define internal fastcc i8*@_SMLL13intersectWith_460(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
q:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%j=load atomic i32,i32*@sml_check_flag unordered,align 4
%k=icmp eq i32%j,0
br i1%k,label%o,label%l
l:
call void@sml_check(i32 inreg%j)
%m=load i8*,i8**%c,align 8
%n=load i8*,i8**%e,align 8
br label%o
o:
%p=phi i8*[%n,%l],[%a,%q]
%r=phi i8*[%m,%l],[%b,%q]
%s=bitcast i8*%r to i8**
%t=load i8*,i8**%s,align 8
store i8*%t,i8**%c,align 8
%u=getelementptr inbounds i8,i8*%r,i64 8
%v=bitcast i8*%u to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%d,align 8
%x=getelementptr inbounds i8,i8*%p,i64 8
%y=bitcast i8*%x to i8**
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%f,align 8
%A=getelementptr inbounds i8,i8*%p,i64 16
%B=bitcast i8*%A to i8**
%C=load i8*,i8**%B,align 8
store i8*%C,i8**%g,align 8
%D=getelementptr inbounds i8,i8*%p,i64 24
%E=bitcast i8*%D to i8**
%F=load i8*,i8**%E,align 8
store i8*%F,i8**%h,align 8
%G=getelementptr inbounds i8,i8*%p,i64 32
%H=bitcast i8*%G to i32*
%I=load i32,i32*%H,align 4
%J=getelementptr inbounds i8,i8*%p,i64 36
%K=bitcast i8*%J to i32*
%L=load i32,i32*%K,align 4
%M=call i8*@sml_alloc(i32 inreg 36)#0
%N=getelementptr inbounds i8,i8*%M,i64 -4
%O=bitcast i8*%N to i32*
store i32 1342177312,i32*%O,align 4
store i8*%M,i8**%i,align 8
%P=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%Q=bitcast i8*%M to i8**
store i8*%P,i8**%Q,align 8
%R=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%S=getelementptr inbounds i8,i8*%M,i64 8
%T=bitcast i8*%S to i8**
store i8*%R,i8**%T,align 8
%U=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%V=getelementptr inbounds i8,i8*%M,i64 16
%W=bitcast i8*%V to i8**
store i8*%U,i8**%W,align 8
%X=getelementptr inbounds i8,i8*%M,i64 24
%Y=bitcast i8*%X to i32*
store i32%I,i32*%Y,align 4
%Z=getelementptr inbounds i8,i8*%M,i64 28
%aa=bitcast i8*%Z to i32*
store i32%L,i32*%aa,align 4
%ab=getelementptr inbounds i8,i8*%M,i64 32
%ac=bitcast i8*%ab to i32*
store i32 7,i32*%ac,align 4
%ad=call i8*@sml_alloc(i32 inreg 28)#0
%ae=getelementptr inbounds i8,i8*%ad,i64 -4
%af=bitcast i8*%ae to i32*
store i32 1342177304,i32*%af,align 4
%ag=load i8*,i8**%i,align 8
%ah=bitcast i8*%ad to i8**
store i8*%ag,i8**%ah,align 8
%ai=getelementptr inbounds i8,i8*%ad,i64 8
%aj=bitcast i8*%ai to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32,i32,i32)*@_SMLL9intersect_458 to void(...)*),void(...)**%aj,align 8
%ak=getelementptr inbounds i8,i8*%ad,i64 16
%al=bitcast i8*%ak to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*,i8*,i8*)*@_SMLL9intersect_700 to void(...)*),void(...)**%al,align 8
%am=getelementptr inbounds i8,i8*%ad,i64 24
%an=bitcast i8*%am to i32*
store i32 -2147483647,i32*%an,align 4
%ao=load i8*,i8**%c,align 8
%ap=icmp eq i8*%ao,null
br i1%ap,label%at,label%aq
aq:
%ar=bitcast i8*%ao to i32*
%as=load i32,i32*%ar,align 4
br label%at
at:
%au=phi i32[%as,%aq],[0,%o]
%av=load i8*,i8**%d,align 8
%aw=icmp eq i8*%av,null
br i1%aw,label%aA,label%ax
ax:
%ay=bitcast i8*%av to i32*
%az=load i32,i32*%ay,align 4
br label%aA
aA:
%aB=phi i32[%az,%ax],[0,%at]
%aC=icmp sgt i32%au,%aB
%aD=load i8*,i8**%e,align 8
br i1%aC,label%aE,label%bo
aE:
%aF=getelementptr inbounds i8,i8*%aD,i64 40
%aG=bitcast i8*%aF to i32*
%aH=load i32,i32*%aG,align 4
%aI=getelementptr inbounds i8,i8*%aD,i64 44
%aJ=bitcast i8*%aI to i32*
%aK=load i32,i32*%aJ,align 4
%aL=getelementptr inbounds i8,i8*%aD,i64 48
%aM=bitcast i8*%aL to i32*
%aN=load i32,i32*%aM,align 4
%aO=getelementptr inbounds i8,i8*%aD,i64 52
%aP=bitcast i8*%aO to i32*
%aQ=load i32,i32*%aP,align 4
%aR=getelementptr inbounds i8,i8*%aD,i64 56
%aS=bitcast i8*%aR to i32*
%aT=load i32,i32*%aS,align 4
%aU=getelementptr inbounds i8,i8*%aD,i64 60
%aV=bitcast i8*%aU to i32*
%aW=load i32,i32*%aV,align 4
store i8*null,i8**%i,align 8
%aX=call fastcc i8*@_SMLL9intersect_458(i8*inreg%ag,i32 inreg%aH,i32 inreg%aK,i32 inreg%aN,i32 inreg%aQ,i32 inreg%aT,i32 inreg%aW)
%aY=getelementptr inbounds i8,i8*%aX,i64 16
%aZ=bitcast i8*%aY to i8*(i8*,i8*)**
%a0=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aZ,align 8
%a1=bitcast i8*%aX to i8**
%a2=load i8*,i8**%a1,align 8
%a3=bitcast i8**%e to i8***
%a4=load i8**,i8***%a3,align 8
store i8*null,i8**%e,align 8
%a5=load i8*,i8**%a4,align 8
%a6=call fastcc i8*%a0(i8*inreg%a2,i8*inreg%a5)
%a7=getelementptr inbounds i8,i8*%a6,i64 16
%a8=bitcast i8*%a7 to i8*(i8*,i8*)**
%a9=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a8,align 8
%ba=bitcast i8*%a6 to i8**
%bb=load i8*,i8**%ba,align 8
store i8*%bb,i8**%e,align 8
%bc=call i8*@sml_alloc(i32 inreg 20)#0
%bd=getelementptr inbounds i8,i8*%bc,i64 -4
%be=bitcast i8*%bd to i32*
store i32 1342177296,i32*%be,align 4
%bf=load i8*,i8**%c,align 8
%bg=bitcast i8*%bc to i8**
store i8*%bf,i8**%bg,align 8
%bh=load i8*,i8**%d,align 8
%bi=getelementptr inbounds i8,i8*%bc,i64 8
%bj=bitcast i8*%bi to i8**
store i8*%bh,i8**%bj,align 8
%bk=getelementptr inbounds i8,i8*%bc,i64 16
%bl=bitcast i8*%bk to i32*
store i32 3,i32*%bl,align 4
%bm=load i8*,i8**%e,align 8
%bn=tail call fastcc i8*%a9(i8*inreg%bm,i8*inreg%bc)
ret i8*%bn
bo:
%bp=getelementptr inbounds i8,i8*%aD,i64 48
%bq=bitcast i8*%bp to i32*
%br=load i32,i32*%bq,align 4
%bs=getelementptr inbounds i8,i8*%aD,i64 52
%bt=bitcast i8*%bs to i32*
%bu=load i32,i32*%bt,align 4
%bv=getelementptr inbounds i8,i8*%aD,i64 40
%bw=bitcast i8*%bv to i32*
%bx=load i32,i32*%bw,align 4
%by=getelementptr inbounds i8,i8*%aD,i64 44
%bz=bitcast i8*%by to i32*
%bA=load i32,i32*%bz,align 4
%bB=getelementptr inbounds i8,i8*%aD,i64 56
%bC=bitcast i8*%bB to i32*
%bD=load i32,i32*%bC,align 4
%bE=getelementptr inbounds i8,i8*%aD,i64 60
%bF=bitcast i8*%bE to i32*
%bG=load i32,i32*%bF,align 4
store i8*null,i8**%i,align 8
%bH=call fastcc i8*@_SMLL9intersect_458(i8*inreg%ag,i32 inreg%br,i32 inreg%bu,i32 inreg%bx,i32 inreg%bA,i32 inreg%bD,i32 inreg%bG)
%bI=getelementptr inbounds i8,i8*%bH,i64 16
%bJ=bitcast i8*%bI to i8*(i8*,i8*)**
%bK=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bJ,align 8
%bL=bitcast i8*%bH to i8**
%bM=load i8*,i8**%bL,align 8
store i8*%bM,i8**%g,align 8
%bN=bitcast i8**%e to i8***
%bO=load i8**,i8***%bN,align 8
%bP=load i8*,i8**%bO,align 8
store i8*%bP,i8**%f,align 8
%bQ=bitcast i8**%bO to i8*
%bR=getelementptr inbounds i8*,i8**%bO,i64 5
%bS=bitcast i8**%bR to i32*
%bT=load i32,i32*%bS,align 4
%bU=getelementptr inbounds i8,i8*%bQ,i64 44
%bV=bitcast i8*%bU to i32*
%bW=load i32,i32*%bV,align 4
%bX=getelementptr inbounds i8*,i8**%bO,i64 6
%bY=bitcast i8**%bX to i32*
%bZ=load i32,i32*%bY,align 4
store i8*null,i8**%e,align 8
%b0=getelementptr inbounds i8,i8*%bQ,i64 52
%b1=bitcast i8*%b0 to i32*
%b2=load i32,i32*%b1,align 4
%b3=call i8*@sml_alloc(i32 inreg 28)#0
%b4=getelementptr inbounds i8,i8*%b3,i64 -4
%b5=bitcast i8*%b4 to i32*
store i32 1342177304,i32*%b5,align 4
store i8*%b3,i8**%e,align 8
%b6=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%b7=bitcast i8*%b3 to i8**
store i8*%b6,i8**%b7,align 8
%b8=getelementptr inbounds i8,i8*%b3,i64 8
%b9=bitcast i8*%b8 to i32*
store i32%bT,i32*%b9,align 4
%ca=getelementptr inbounds i8,i8*%b3,i64 12
%cb=bitcast i8*%ca to i32*
store i32%bW,i32*%cb,align 4
%cc=getelementptr inbounds i8,i8*%b3,i64 16
%cd=bitcast i8*%cc to i32*
store i32%bZ,i32*%cd,align 4
%ce=getelementptr inbounds i8,i8*%b3,i64 20
%cf=bitcast i8*%ce to i32*
store i32%b2,i32*%cf,align 4
%cg=getelementptr inbounds i8,i8*%b3,i64 24
%ch=bitcast i8*%cg to i32*
store i32 1,i32*%ch,align 4
%ci=call i8*@sml_alloc(i32 inreg 28)#0
%cj=getelementptr inbounds i8,i8*%ci,i64 -4
%ck=bitcast i8*%cj to i32*
store i32 1342177304,i32*%ck,align 4
%cl=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%cm=bitcast i8*%ci to i8**
store i8*%cl,i8**%cm,align 8
%cn=getelementptr inbounds i8,i8*%ci,i64 8
%co=bitcast i8*%cn to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL13intersectWith_459 to void(...)*),void(...)**%co,align 8
%cp=getelementptr inbounds i8,i8*%ci,i64 16
%cq=bitcast i8*%cp to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL13intersectWith_459 to void(...)*),void(...)**%cq,align 8
%cr=getelementptr inbounds i8,i8*%ci,i64 24
%cs=bitcast i8*%cr to i32*
store i32 1,i32*%cs,align 4
%ct=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%cu=call fastcc i8*%bK(i8*inreg%ct,i8*inreg%ci)
%cv=getelementptr inbounds i8,i8*%cu,i64 16
%cw=bitcast i8*%cv to i8*(i8*,i8*)**
%cx=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%cw,align 8
%cy=bitcast i8*%cu to i8**
%cz=load i8*,i8**%cy,align 8
store i8*%cz,i8**%e,align 8
%cA=call i8*@sml_alloc(i32 inreg 20)#0
%cB=getelementptr inbounds i8,i8*%cA,i64 -4
%cC=bitcast i8*%cB to i32*
store i32 1342177296,i32*%cC,align 4
%cD=load i8*,i8**%d,align 8
%cE=bitcast i8*%cA to i8**
store i8*%cD,i8**%cE,align 8
%cF=load i8*,i8**%c,align 8
%cG=getelementptr inbounds i8,i8*%cA,i64 8
%cH=bitcast i8*%cG to i8**
store i8*%cF,i8**%cH,align 8
%cI=getelementptr inbounds i8,i8*%cA,i64 16
%cJ=bitcast i8*%cI to i32*
store i32 3,i32*%cJ,align 4
%cK=load i8*,i8**%e,align 8
%cL=tail call fastcc i8*%cx(i8*inreg%cK,i8*inreg%cA)
ret i8*%cL
}
define internal fastcc i8*@_SMLL13intersectWith_461(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%b,i8**%c,align 8
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%d,align 8
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
store i8*%l,i8**%e,align 8
%m=getelementptr inbounds i8,i8*%a,i64 16
%n=bitcast i8*%m to i8**
%o=load i8*,i8**%n,align 8
store i8*%o,i8**%f,align 8
%p=getelementptr inbounds i8,i8*%a,i64 24
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=getelementptr inbounds i8,i8*%a,i64 28
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=getelementptr inbounds i8,i8*%a,i64 32
%w=bitcast i8*%v to i32*
%x=load i32,i32*%w,align 4
%y=getelementptr inbounds i8,i8*%a,i64 36
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=getelementptr inbounds i8,i8*%a,i64 40
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=getelementptr inbounds i8,i8*%a,i64 44
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
%H=getelementptr inbounds i8,i8*%a,i64 48
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
%K=getelementptr inbounds i8,i8*%a,i64 52
%L=bitcast i8*%K to i32*
%M=load i32,i32*%L,align 4
%N=call i8*@sml_alloc(i32 inreg 68)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32 1342177344,i32*%P,align 4
store i8*%N,i8**%g,align 8
%Q=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%R=bitcast i8*%N to i8**
store i8*%Q,i8**%R,align 8
%S=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%T=getelementptr inbounds i8,i8*%N,i64 8
%U=bitcast i8*%T to i8**
store i8*%S,i8**%U,align 8
%V=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%W=getelementptr inbounds i8,i8*%N,i64 16
%X=bitcast i8*%W to i8**
store i8*%V,i8**%X,align 8
%Y=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%Z=getelementptr inbounds i8,i8*%N,i64 24
%aa=bitcast i8*%Z to i8**
store i8*%Y,i8**%aa,align 8
%ab=getelementptr inbounds i8,i8*%N,i64 32
%ac=bitcast i8*%ab to i32*
store i32%r,i32*%ac,align 4
%ad=getelementptr inbounds i8,i8*%N,i64 36
%ae=bitcast i8*%ad to i32*
store i32%u,i32*%ae,align 4
%af=getelementptr inbounds i8,i8*%N,i64 40
%ag=bitcast i8*%af to i32*
store i32%x,i32*%ag,align 4
%ah=getelementptr inbounds i8,i8*%N,i64 44
%ai=bitcast i8*%ah to i32*
store i32%A,i32*%ai,align 4
%aj=getelementptr inbounds i8,i8*%N,i64 48
%ak=bitcast i8*%aj to i32*
store i32%D,i32*%ak,align 4
%al=getelementptr inbounds i8,i8*%N,i64 52
%am=bitcast i8*%al to i32*
store i32%G,i32*%am,align 4
%an=getelementptr inbounds i8,i8*%N,i64 56
%ao=bitcast i8*%an to i32*
store i32%J,i32*%ao,align 4
%ap=getelementptr inbounds i8,i8*%N,i64 60
%aq=bitcast i8*%ap to i32*
store i32%M,i32*%aq,align 4
%ar=getelementptr inbounds i8,i8*%N,i64 64
%as=bitcast i8*%ar to i32*
store i32 15,i32*%as,align 4
%at=call i8*@sml_alloc(i32 inreg 28)#0
%au=getelementptr inbounds i8,i8*%at,i64 -4
%av=bitcast i8*%au to i32*
store i32 1342177304,i32*%av,align 4
%aw=load i8*,i8**%g,align 8
%ax=bitcast i8*%at to i8**
store i8*%aw,i8**%ax,align 8
%ay=getelementptr inbounds i8,i8*%at,i64 8
%az=bitcast i8*%ay to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL13intersectWith_460 to void(...)*),void(...)**%az,align 8
%aA=getelementptr inbounds i8,i8*%at,i64 16
%aB=bitcast i8*%aA to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL13intersectWith_460 to void(...)*),void(...)**%aB,align 8
%aC=getelementptr inbounds i8,i8*%at,i64 24
%aD=bitcast i8*%aC to i32*
store i32 -2147483647,i32*%aD,align 4
ret i8*%at
}
define internal fastcc i8*@_SMLL13intersectWith_462(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e,i32 inreg%f,i32 inreg%g)#4 gc"smlsharp"{
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
%k=alloca i8*,align 8
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
call void@llvm.gcroot(i8**%k,i8*null)#0
%l=bitcast i8*%a to i8**
%m=load i8*,i8**%l,align 8
store i8*%m,i8**%h,align 8
%n=getelementptr inbounds i8,i8*%a,i64 8
%o=bitcast i8*%n to i8**
%p=load i8*,i8**%o,align 8
store i8*%p,i8**%i,align 8
%q=getelementptr inbounds i8,i8*%a,i64 16
%r=bitcast i8*%q to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%j,align 8
%t=getelementptr inbounds i8,i8*%a,i64 24
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=getelementptr inbounds i8,i8*%a,i64 28
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=call i8*@sml_alloc(i32 inreg 60)#0
%A=getelementptr inbounds i8,i8*%z,i64 -4
%B=bitcast i8*%A to i32*
store i32 1342177336,i32*%B,align 4
store i8*%z,i8**%k,align 8
%C=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%D=bitcast i8*%z to i8**
store i8*%C,i8**%D,align 8
%E=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%F=getelementptr inbounds i8,i8*%z,i64 8
%G=bitcast i8*%F to i8**
store i8*%E,i8**%G,align 8
%H=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%I=getelementptr inbounds i8,i8*%z,i64 16
%J=bitcast i8*%I to i8**
store i8*%H,i8**%J,align 8
%K=getelementptr inbounds i8,i8*%z,i64 24
%L=bitcast i8*%K to i32*
store i32%v,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%z,i64 28
%N=bitcast i8*%M to i32*
store i32%y,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%z,i64 32
%P=bitcast i8*%O to i32*
store i32%b,i32*%P,align 4
%Q=getelementptr inbounds i8,i8*%z,i64 36
%R=bitcast i8*%Q to i32*
store i32%c,i32*%R,align 4
%S=getelementptr inbounds i8,i8*%z,i64 40
%T=bitcast i8*%S to i32*
store i32%d,i32*%T,align 4
%U=getelementptr inbounds i8,i8*%z,i64 44
%V=bitcast i8*%U to i32*
store i32%e,i32*%V,align 4
%W=getelementptr inbounds i8,i8*%z,i64 48
%X=bitcast i8*%W to i32*
store i32%f,i32*%X,align 4
%Y=getelementptr inbounds i8,i8*%z,i64 52
%Z=bitcast i8*%Y to i32*
store i32%g,i32*%Z,align 4
%aa=getelementptr inbounds i8,i8*%z,i64 56
%ab=bitcast i8*%aa to i32*
store i32 7,i32*%ab,align 4
%ac=call i8*@sml_alloc(i32 inreg 28)#0
%ad=getelementptr inbounds i8,i8*%ac,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 1342177304,i32*%ae,align 4
%af=load i8*,i8**%k,align 8
%ag=bitcast i8*%ac to i8**
store i8*%af,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%ac,i64 8
%ai=bitcast i8*%ah to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL13intersectWith_461 to void(...)*),void(...)**%ai,align 8
%aj=getelementptr inbounds i8,i8*%ac,i64 16
%ak=bitcast i8*%aj to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL13intersectWith_461 to void(...)*),void(...)**%ak,align 8
%al=getelementptr inbounds i8,i8*%ac,i64 24
%am=bitcast i8*%al to i32*
store i32 -2147483647,i32*%am,align 4
ret i8*%ac
}
define internal fastcc i8*@_SMLL3ins_463(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
p:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
store i8*%a,i8**%g,align 8
store i8*%b,i8**%c,align 8
%j=load atomic i32,i32*@sml_check_flag unordered,align 4
%k=icmp eq i32%j,0
br i1%k,label%n,label%l
l:
call void@sml_check(i32 inreg%j)
%m=load i8*,i8**%g,align 8
br label%n
n:
%o=phi i8*[%m,%l],[%a,%p]
%q=getelementptr inbounds i8,i8*%o,i64 36
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=add i32%s,-1
%u=sub i32 0,%s
%v=and i32%t,%u
%w=add i32%v,%s
%x=getelementptr inbounds i8,i8*%o,i64 52
%y=bitcast i8*%x to i32*
%z=load i32,i32*%y,align 4
%A=add i32%z,-1
%B=add i32%A,%w
%C=sub i32 0,%z
%D=and i32%B,%C
%E=add i32%z,7
%F=add i32%E,%D
%G=and i32%F,-8
%H=add i32%s,7
%I=and i32%H,%u
%J=add i32%I,%s
%K=add i32%J,7
%L=and i32%K,-8
%M=lshr i32%I,3
%N=getelementptr inbounds i8,i8*%o,i64 32
%O=bitcast i8*%N to i32*
%P=load i32,i32*%O,align 4
%Q=shl i32%P,%M
%R=or i32%Q,1
%S=or i32%L,4
%T=getelementptr inbounds i8,i8*%o,i64 44
%U=bitcast i8*%T to i32*
%V=load i32,i32*%U,align 4
%W=add i32%V,-1
%X=sub i32 0,%V
%Y=and i32%W,%X
%Z=add i32%W,%w
%aa=and i32%Z,%X
%ab=add i32%W,%z
%ac=add i32%ab,%aa
%ad=and i32%ac,%C
%ae=add i32%E,%ad
%af=and i32%ae,-8
%ag=lshr i32%ad,3
%ah=lshr i32%aa,3
%ai=sub nsw i32%ag,%ah
%aj=lshr i32%v,3
%ak=sub nsw i32%ah,%aj
%al=getelementptr inbounds i8,i8*%o,i64 48
%am=bitcast i8*%al to i32*
%an=load i32,i32*%am,align 4
%ao=shl i32%an,%ai
%ap=getelementptr inbounds i8,i8*%o,i64 40
%aq=bitcast i8*%ap to i32*
%ar=load i32,i32*%aq,align 4
%as=or i32%ao,%ar
%at=shl i32%as,%ak
%au=or i32%at,%P
%av=or i32%af,4
%aw=getelementptr inbounds i8,i8*%o,i64 60
%ax=bitcast i8*%aw to i32*
%ay=load i32,i32*%ax,align 4
%az=add i32%J,-1
%aA=add i32%az,%ay
%aB=sub i32 0,%ay
%aC=and i32%aA,%aB
%aD=add i32%ay,7
%aE=add i32%aD,%aC
%aF=and i32%aE,-8
%aG=lshr i32%aC,3
%aH=sub nsw i32%aG,%M
%aI=getelementptr inbounds i8,i8*%o,i64 56
%aJ=bitcast i8*%aI to i32*
%aK=load i32,i32*%aJ,align 4
%aL=shl i32%aK,%aH
%aM=or i32%aL,%P
%aN=shl i32%aM,%M
%aO=or i32%aN,1
%aP=or i32%aF,4
%aQ=icmp eq i32%P,0
br i1%aQ,label%aX,label%aR
aR:
%aS=load i8*,i8**%c,align 8
%aT=sext i32%v to i64
%aU=getelementptr inbounds i8,i8*%aS,i64%aT
%aV=bitcast i8*%aU to i8**
%aW=load i8*,i8**%aV,align 8
br label%a8
aX:
%aY=call i8*@sml_alloc(i32 inreg%s)#0
%aZ=getelementptr inbounds i8,i8*%aY,i64 -4
%a0=bitcast i8*%aZ to i32*
store i32%s,i32*%a0,align 4
%a1=load i8*,i8**%c,align 8
%a2=sext i32%v to i64
%a3=getelementptr inbounds i8,i8*%a1,i64%a2
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aY,i8*%a3,i32%s,i1 false)
%a4=load i8*,i8**%g,align 8
%a5=getelementptr inbounds i8,i8*%a4,i64 48
%a6=bitcast i8*%a5 to i32*
%a7=load i32,i32*%a6,align 4
br label%a8
a8:
%a9=phi i8*[%a1,%aX],[%aS,%aR]
%ba=phi i32[%a7,%aX],[%an,%aR]
%bb=phi i8*[%a4,%aX],[%o,%aR]
%bc=phi i8*[%aY,%aX],[%aW,%aR]
store i8*%bc,i8**%d,align 8
%bd=icmp eq i32%ba,0
br i1%bd,label%bj,label%be
be:
%bf=sext i32%D to i64
%bg=getelementptr inbounds i8,i8*%a9,i64%bf
%bh=bitcast i8*%bg to i8**
%bi=load i8*,i8**%bh,align 8
br label%bu
bj:
%bk=getelementptr inbounds i8,i8*%bb,i64 52
%bl=bitcast i8*%bk to i32*
%bm=load i32,i32*%bl,align 4
%bn=call i8*@sml_alloc(i32 inreg%bm)#0
%bo=getelementptr inbounds i8,i8*%bn,i64 -4
%bp=bitcast i8*%bo to i32*
store i32%bm,i32*%bp,align 4
%bq=load i8*,i8**%c,align 8
%br=sext i32%D to i64
%bs=getelementptr inbounds i8,i8*%bq,i64%br
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bn,i8*%bs,i32%bm,i1 false)
%bt=load i8*,i8**%g,align 8
br label%bu
bu:
%bv=phi i8*[%bt,%bj],[%bb,%be]
%bw=phi i8*[%bq,%bj],[%a9,%be]
%bx=phi i8*[%bn,%bj],[%bi,%be]
store i8*%bx,i8**%e,align 8
store i8*null,i8**%c,align 8
%by=sext i32%G to i64
%bz=getelementptr inbounds i8,i8*%bw,i64%by
%bA=bitcast i8*%bz to i8**
%bB=load i8*,i8**%bA,align 8
store i8*%bB,i8**%f,align 8
%bC=getelementptr inbounds i8,i8*%bv,i64 24
%bD=bitcast i8*%bC to i8**
%bE=load i8*,i8**%bD,align 8
%bF=getelementptr inbounds i8,i8*%bv,i64 40
%bG=bitcast i8*%bF to i32*
%bH=load i32,i32*%bG,align 4
%bI=getelementptr inbounds i8,i8*%bv,i64 44
%bJ=bitcast i8*%bI to i32*
%bK=load i32,i32*%bJ,align 4
%bL=call fastcc i8*@_SMLL4find_352(i8*inreg%bE,i32 inreg%bH,i32 inreg%bK)
%bM=getelementptr inbounds i8,i8*%bL,i64 16
%bN=bitcast i8*%bM to i8*(i8*,i8*)**
%bO=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bN,align 8
%bP=bitcast i8*%bL to i8**
%bQ=load i8*,i8**%bP,align 8
store i8*%bQ,i8**%h,align 8
%bR=load i8*,i8**%g,align 8
%bS=getelementptr inbounds i8,i8*%bR,i64 8
%bT=bitcast i8*%bS to i8**
%bU=load i8*,i8**%bT,align 8
store i8*%bU,i8**%c,align 8
%bV=getelementptr inbounds i8,i8*%bR,i64 36
%bW=bitcast i8*%bV to i32*
%bX=load i32,i32*%bW,align 4
%bY=getelementptr inbounds i8,i8*%bR,i64 32
%bZ=bitcast i8*%bY to i32*
%b0=load i32,i32*%bZ,align 4
%b1=call i8*@sml_alloc(i32 inreg%S)#0
%b2=or i32%L,1342177280
%b3=getelementptr inbounds i8,i8*%b1,i64 -4
%b4=bitcast i8*%b3 to i32*
store i32%b2,i32*%b4,align 4
call void@llvm.memset.p0i8.i32(i8*%b1,i8 0,i32%S,i1 false)
%b5=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%b6=bitcast i8*%b1 to i8**
store i8*%b5,i8**%b6,align 8
%b7=icmp eq i32%b0,0
%b8=load i8*,i8**%d,align 8
%b9=sext i32%I to i64
%ca=getelementptr inbounds i8,i8*%b1,i64%b9
br i1%b7,label%cd,label%cb
cb:
%cc=bitcast i8*%ca to i8**
store i8*%b8,i8**%cc,align 8
br label%ce
cd:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ca,i8*%b8,i32%bX,i1 false)
br label%ce
ce:
%cf=sext i32%L to i64
%cg=getelementptr inbounds i8,i8*%b1,i64%cf
%ch=bitcast i8*%cg to i32*
store i32%R,i32*%ch,align 4
%ci=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%cj=call fastcc i8*%bO(i8*inreg%ci,i8*inreg%b1)
store i8*%cj,i8**%c,align 8
%ck=icmp eq i8*%cj,null
br i1%ck,label%cl,label%cn
cl:
%cm=load i8*,i8**%f,align 8
ret i8*%cm
cn:
%co=load i8*,i8**%g,align 8
%cp=getelementptr inbounds i8,i8*%co,i64 40
%cq=bitcast i8*%cp to i32*
%cr=load i32,i32*%cq,align 4
%cs=icmp eq i32%cr,0
br i1%cs,label%cy,label%ct
ct:
store i8*null,i8**%c,align 8
%cu=sext i32%Y to i64
%cv=getelementptr inbounds i8,i8*%cj,i64%cu
%cw=bitcast i8*%cv to i8**
%cx=load i8*,i8**%cw,align 8
br label%cJ
cy:
%cz=getelementptr inbounds i8,i8*%co,i64 44
%cA=bitcast i8*%cz to i32*
%cB=load i32,i32*%cA,align 4
%cC=call i8*@sml_alloc(i32 inreg%cB)#0
%cD=getelementptr inbounds i8,i8*%cC,i64 -4
%cE=bitcast i8*%cD to i32*
store i32%cB,i32*%cE,align 4
%cF=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cG=sext i32%Y to i64
%cH=getelementptr inbounds i8,i8*%cF,i64%cG
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cC,i8*%cH,i32%cB,i1 false)
%cI=load i8*,i8**%g,align 8
br label%cJ
cJ:
%cK=phi i8*[%cI,%cy],[%co,%ct]
%cL=phi i8*[%cC,%cy],[%cx,%ct]
store i8*%cL,i8**%c,align 8
%cM=getelementptr inbounds i8,i8*%cK,i64 16
%cN=bitcast i8*%cM to i8**
%cO=load i8*,i8**%cN,align 8
%cP=getelementptr inbounds i8,i8*%cK,i64 56
%cQ=bitcast i8*%cP to i32*
%cR=load i32,i32*%cQ,align 4
%cS=getelementptr inbounds i8,i8*%cK,i64 60
%cT=bitcast i8*%cS to i32*
%cU=load i32,i32*%cT,align 4
%cV=call fastcc i8*@_SMLL6insert_334(i8*inreg%cO,i32 inreg%cR,i32 inreg%cU)
%cW=getelementptr inbounds i8,i8*%cV,i64 16
%cX=bitcast i8*%cW to i8*(i8*,i8*)**
%cY=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%cX,align 8
%cZ=bitcast i8*%cV to i8**
%c0=load i8*,i8**%cZ,align 8
store i8*%c0,i8**%i,align 8
%c1=bitcast i8**%g to i8***
%c2=load i8**,i8***%c1,align 8
%c3=load i8*,i8**%c2,align 8
%c4=getelementptr inbounds i8,i8*%c3,i64 16
%c5=bitcast i8*%c4 to i8*(i8*,i8*)**
%c6=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%c5,align 8
%c7=bitcast i8*%c3 to i8**
%c8=load i8*,i8**%c7,align 8
store i8*%c8,i8**%h,align 8
%c9=bitcast i8**%c2 to i8*
%da=getelementptr inbounds i8,i8*%c9,i64 36
%db=bitcast i8*%da to i32*
%dc=load i32,i32*%db,align 4
%dd=getelementptr inbounds i8*,i8**%c2,i64 4
%de=bitcast i8**%dd to i32*
%df=load i32,i32*%de,align 4
%dg=getelementptr inbounds i8,i8*%c9,i64 44
%dh=bitcast i8*%dg to i32*
%di=load i32,i32*%dh,align 4
%dj=getelementptr inbounds i8*,i8**%c2,i64 5
%dk=bitcast i8**%dj to i32*
%dl=load i32,i32*%dk,align 4
%dm=getelementptr inbounds i8,i8*%c9,i64 52
%dn=bitcast i8*%dm to i32*
%do=load i32,i32*%dn,align 4
%dp=getelementptr inbounds i8*,i8**%c2,i64 6
%dq=bitcast i8**%dp to i32*
%dr=load i32,i32*%dq,align 4
%ds=call i8*@sml_alloc(i32 inreg%av)#0
%dt=or i32%af,1342177280
%du=getelementptr inbounds i8,i8*%ds,i64 -4
%dv=bitcast i8*%du to i32*
store i32%dt,i32*%dv,align 4
call void@llvm.memset.p0i8.i32(i8*%ds,i8 0,i32%av,i1 false)
%dw=icmp eq i32%df,0
%dx=load i8*,i8**%d,align 8
%dy=sext i32%v to i64
%dz=getelementptr inbounds i8,i8*%ds,i64%dy
br i1%dw,label%dC,label%dA
dA:
%dB=bitcast i8*%dz to i8**
store i8*%dx,i8**%dB,align 8
br label%dD
dC:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dz,i8*%dx,i32%dc,i1 false)
br label%dD
dD:
%dE=icmp eq i32%dl,0
%dF=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%dG=sext i32%aa to i64
%dH=getelementptr inbounds i8,i8*%ds,i64%dG
br i1%dE,label%dK,label%dI
dI:
%dJ=bitcast i8*%dH to i8**
store i8*%dF,i8**%dJ,align 8
br label%dL
dK:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dH,i8*%dF,i32%di,i1 false)
br label%dL
dL:
%dM=icmp eq i32%dr,0
%dN=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%dO=sext i32%ad to i64
%dP=getelementptr inbounds i8,i8*%ds,i64%dO
br i1%dM,label%dS,label%dQ
dQ:
%dR=bitcast i8*%dP to i8**
store i8*%dN,i8**%dR,align 8
br label%dT
dS:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dP,i8*%dN,i32%do,i1 false)
br label%dT
dT:
%dU=sext i32%af to i64
%dV=getelementptr inbounds i8,i8*%ds,i64%dU
%dW=bitcast i8*%dV to i32*
store i32%au,i32*%dW,align 4
%dX=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%dY=call fastcc i8*%c6(i8*inreg%dX,i8*inreg%ds)
store i8*%dY,i8**%c,align 8
%dZ=load i8*,i8**%g,align 8
%d0=getelementptr inbounds i8,i8*%dZ,i64 36
%d1=bitcast i8*%d0 to i32*
%d2=load i32,i32*%d1,align 4
%d3=getelementptr inbounds i8,i8*%dZ,i64 32
%d4=bitcast i8*%d3 to i32*
%d5=load i32,i32*%d4,align 4
%d6=getelementptr inbounds i8,i8*%dZ,i64 60
%d7=bitcast i8*%d6 to i32*
%d8=load i32,i32*%d7,align 4
store i8*null,i8**%g,align 8
%d9=getelementptr inbounds i8,i8*%dZ,i64 56
%ea=bitcast i8*%d9 to i32*
%eb=load i32,i32*%ea,align 4
%ec=call i8*@sml_alloc(i32 inreg%aP)#0
%ed=or i32%aF,1342177280
%ee=getelementptr inbounds i8,i8*%ec,i64 -4
%ef=bitcast i8*%ee to i32*
store i32%ed,i32*%ef,align 4
call void@llvm.memset.p0i8.i32(i8*%ec,i8 0,i32%aP,i1 false)
%eg=load i8*,i8**%f,align 8
%eh=bitcast i8*%ec to i8**
store i8*%eg,i8**%eh,align 8
%ei=icmp eq i32%d5,0
%ej=load i8*,i8**%d,align 8
%ek=getelementptr inbounds i8,i8*%ec,i64%b9
br i1%ei,label%en,label%el
el:
%em=bitcast i8*%ek to i8**
store i8*%ej,i8**%em,align 8
br label%eo
en:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ek,i8*%ej,i32%d2,i1 false)
br label%eo
eo:
%ep=icmp eq i32%eb,0
%eq=load i8*,i8**%c,align 8
%er=sext i32%aC to i64
%es=getelementptr inbounds i8,i8*%ec,i64%er
br i1%ep,label%ev,label%et
et:
%eu=bitcast i8*%es to i8**
store i8*%eq,i8**%eu,align 8
br label%ew
ev:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%es,i8*%eq,i32%d8,i1 false)
br label%ew
ew:
%ex=sext i32%aF to i64
%ey=getelementptr inbounds i8,i8*%ec,i64%ex
%ez=bitcast i8*%ey to i32*
store i32%aO,i32*%ez,align 4
%eA=load i8*,i8**%i,align 8
%eB=tail call fastcc i8*%cY(i8*inreg%eA,i8*inreg%ec)
ret i8*%eB
}
define internal fastcc i8*@_SMLL9intersect_464(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%j=load atomic i32,i32*@sml_check_flag unordered,align 4
%k=icmp eq i32%j,0
br i1%k,label%l,label%o
l:
%m=bitcast i8*%a to i8**
%n=bitcast i8*%b to i8**
br label%u
o:
call void@sml_check(i32 inreg%j)
%p=bitcast i8**%c to i8***
%q=load i8**,i8***%p,align 8
%r=bitcast i8**%e to i8***
%s=load i8**,i8***%r,align 8
%t=bitcast i8**%s to i8*
br label%u
u:
%v=phi i8*[%t,%o],[%a,%l]
%w=phi i8**[%s,%o],[%m,%l]
%x=phi i8**[%q,%o],[%n,%l]
%y=load i8*,i8**%x,align 8
store i8*%y,i8**%d,align 8
%z=load i8*,i8**%w,align 8
store i8*%z,i8**%f,align 8
%A=getelementptr inbounds i8*,i8**%w,i64 1
%B=load i8*,i8**%A,align 8
store i8*%B,i8**%g,align 8
%C=getelementptr inbounds i8*,i8**%w,i64 2
%D=load i8*,i8**%C,align 8
store i8*%D,i8**%h,align 8
%E=getelementptr inbounds i8,i8*%v,i64 32
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
%H=getelementptr inbounds i8,i8*%v,i64 36
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
%K=getelementptr inbounds i8,i8*%v,i64 40
%L=bitcast i8*%K to i32*
%M=load i32,i32*%L,align 4
%N=getelementptr inbounds i8,i8*%v,i64 44
%O=bitcast i8*%N to i32*
%P=load i32,i32*%O,align 4
%Q=getelementptr inbounds i8,i8*%v,i64 48
%R=bitcast i8*%Q to i32*
%S=load i32,i32*%R,align 4
%T=getelementptr inbounds i8,i8*%v,i64 52
%U=bitcast i8*%T to i32*
%V=load i32,i32*%U,align 4
%W=getelementptr inbounds i8,i8*%v,i64 56
%X=bitcast i8*%W to i32*
%Y=load i32,i32*%X,align 4
%Z=getelementptr inbounds i8,i8*%v,i64 60
%aa=bitcast i8*%Z to i32*
%ab=load i32,i32*%aa,align 4
%ac=call i8*@sml_alloc(i32 inreg 68)#0
%ad=getelementptr inbounds i8,i8*%ac,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 1342177344,i32*%ae,align 4
store i8*%ac,i8**%i,align 8
%af=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%ag=bitcast i8*%ac to i8**
store i8*%af,i8**%ag,align 8
%ah=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ai=getelementptr inbounds i8,i8*%ac,i64 8
%aj=bitcast i8*%ai to i8**
store i8*%ah,i8**%aj,align 8
%ak=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%al=getelementptr inbounds i8,i8*%ac,i64 16
%am=bitcast i8*%al to i8**
store i8*%ak,i8**%am,align 8
%an=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%ao=getelementptr inbounds i8,i8*%ac,i64 24
%ap=bitcast i8*%ao to i8**
store i8*%an,i8**%ap,align 8
%aq=getelementptr inbounds i8,i8*%ac,i64 32
%ar=bitcast i8*%aq to i32*
store i32%G,i32*%ar,align 4
%as=getelementptr inbounds i8,i8*%ac,i64 36
%at=bitcast i8*%as to i32*
store i32%J,i32*%at,align 4
%au=getelementptr inbounds i8,i8*%ac,i64 40
%av=bitcast i8*%au to i32*
store i32%M,i32*%av,align 4
%aw=getelementptr inbounds i8,i8*%ac,i64 44
%ax=bitcast i8*%aw to i32*
store i32%P,i32*%ax,align 4
%ay=getelementptr inbounds i8,i8*%ac,i64 48
%az=bitcast i8*%ay to i32*
store i32%S,i32*%az,align 4
%aA=getelementptr inbounds i8,i8*%ac,i64 52
%aB=bitcast i8*%aA to i32*
store i32%V,i32*%aB,align 4
%aC=getelementptr inbounds i8,i8*%ac,i64 56
%aD=bitcast i8*%aC to i32*
store i32%Y,i32*%aD,align 4
%aE=getelementptr inbounds i8,i8*%ac,i64 60
%aF=bitcast i8*%aE to i32*
store i32%ab,i32*%aF,align 4
%aG=getelementptr inbounds i8,i8*%ac,i64 64
%aH=bitcast i8*%aG to i32*
store i32 15,i32*%aH,align 4
%aI=call i8*@sml_alloc(i32 inreg 28)#0
%aJ=getelementptr inbounds i8,i8*%aI,i64 -4
%aK=bitcast i8*%aJ to i32*
store i32 1342177304,i32*%aK,align 4
store i8*%aI,i8**%d,align 8
%aL=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%aM=bitcast i8*%aI to i8**
store i8*%aL,i8**%aM,align 8
%aN=getelementptr inbounds i8,i8*%aI,i64 8
%aO=bitcast i8*%aN to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3ins_463 to void(...)*),void(...)**%aO,align 8
%aP=getelementptr inbounds i8,i8*%aI,i64 16
%aQ=bitcast i8*%aP to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3ins_463 to void(...)*),void(...)**%aQ,align 8
%aR=getelementptr inbounds i8,i8*%aI,i64 24
%aS=bitcast i8*%aR to i32*
store i32 -2147483647,i32*%aS,align 4
%aT=load i8*,i8**%e,align 8
%aU=getelementptr inbounds i8,i8*%aT,i64 24
%aV=bitcast i8*%aU to i8**
%aW=load i8*,i8**%aV,align 8
%aX=getelementptr inbounds i8,i8*%aT,i64 48
%aY=bitcast i8*%aX to i32*
%aZ=load i32,i32*%aY,align 4
%a0=getelementptr inbounds i8,i8*%aT,i64 52
%a1=bitcast i8*%a0 to i32*
%a2=load i32,i32*%a1,align 4
%a3=call fastcc i8*@_SMLL6foldli_411(i8*inreg%aW,i32 inreg%aZ,i32 inreg%a2,i32 inreg 1,i32 inreg 8)
%a4=getelementptr inbounds i8,i8*%a3,i64 16
%a5=bitcast i8*%a4 to i8*(i8*,i8*)**
%a6=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a5,align 8
%a7=bitcast i8*%a3 to i8**
%a8=load i8*,i8**%a7,align 8
%a9=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ba=call fastcc i8*%a6(i8*inreg%a8,i8*inreg%a9)
%bb=getelementptr inbounds i8,i8*%ba,i64 16
%bc=bitcast i8*%bb to i8*(i8*,i8*)**
%bd=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bc,align 8
%be=bitcast i8*%ba to i8**
%bf=load i8*,i8**%be,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%d,align 8
%bg=call fastcc i8*%bd(i8*inreg%bf,i8*inreg null)
%bh=getelementptr inbounds i8,i8*%bg,i64 16
%bi=bitcast i8*%bh to i8*(i8*,i8*)**
%bj=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bi,align 8
%bk=bitcast i8*%bg to i8**
%bl=load i8*,i8**%bk,align 8
%bm=load i8*,i8**%c,align 8
%bn=getelementptr inbounds i8,i8*%bm,i64 8
%bo=bitcast i8*%bn to i8**
%bp=load i8*,i8**%bo,align 8
%bq=tail call fastcc i8*%bj(i8*inreg%bl,i8*inreg%bp)
ret i8*%bq
}
define internal fastcc i8*@_SMLL9intersect_465(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%b,i8**%c,align 8
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%d,align 8
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
store i8*%l,i8**%e,align 8
%m=getelementptr inbounds i8,i8*%a,i64 16
%n=bitcast i8*%m to i8**
%o=load i8*,i8**%n,align 8
store i8*%o,i8**%f,align 8
%p=getelementptr inbounds i8,i8*%a,i64 24
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=getelementptr inbounds i8,i8*%a,i64 28
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=getelementptr inbounds i8,i8*%a,i64 32
%w=bitcast i8*%v to i32*
%x=load i32,i32*%w,align 4
%y=getelementptr inbounds i8,i8*%a,i64 36
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=getelementptr inbounds i8,i8*%a,i64 40
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=getelementptr inbounds i8,i8*%a,i64 44
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
%H=getelementptr inbounds i8,i8*%a,i64 48
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
%K=getelementptr inbounds i8,i8*%a,i64 52
%L=bitcast i8*%K to i32*
%M=load i32,i32*%L,align 4
%N=call i8*@sml_alloc(i32 inreg 68)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32 1342177344,i32*%P,align 4
store i8*%N,i8**%g,align 8
%Q=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%R=bitcast i8*%N to i8**
store i8*%Q,i8**%R,align 8
%S=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%T=getelementptr inbounds i8,i8*%N,i64 8
%U=bitcast i8*%T to i8**
store i8*%S,i8**%U,align 8
%V=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%W=getelementptr inbounds i8,i8*%N,i64 16
%X=bitcast i8*%W to i8**
store i8*%V,i8**%X,align 8
%Y=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%Z=getelementptr inbounds i8,i8*%N,i64 24
%aa=bitcast i8*%Z to i8**
store i8*%Y,i8**%aa,align 8
%ab=getelementptr inbounds i8,i8*%N,i64 32
%ac=bitcast i8*%ab to i32*
store i32%r,i32*%ac,align 4
%ad=getelementptr inbounds i8,i8*%N,i64 36
%ae=bitcast i8*%ad to i32*
store i32%u,i32*%ae,align 4
%af=getelementptr inbounds i8,i8*%N,i64 40
%ag=bitcast i8*%af to i32*
store i32%x,i32*%ag,align 4
%ah=getelementptr inbounds i8,i8*%N,i64 44
%ai=bitcast i8*%ah to i32*
store i32%A,i32*%ai,align 4
%aj=getelementptr inbounds i8,i8*%N,i64 48
%ak=bitcast i8*%aj to i32*
store i32%D,i32*%ak,align 4
%al=getelementptr inbounds i8,i8*%N,i64 52
%am=bitcast i8*%al to i32*
store i32%G,i32*%am,align 4
%an=getelementptr inbounds i8,i8*%N,i64 56
%ao=bitcast i8*%an to i32*
store i32%J,i32*%ao,align 4
%ap=getelementptr inbounds i8,i8*%N,i64 60
%aq=bitcast i8*%ap to i32*
store i32%M,i32*%aq,align 4
%ar=getelementptr inbounds i8,i8*%N,i64 64
%as=bitcast i8*%ar to i32*
store i32 15,i32*%as,align 4
%at=call i8*@sml_alloc(i32 inreg 28)#0
%au=getelementptr inbounds i8,i8*%at,i64 -4
%av=bitcast i8*%au to i32*
store i32 1342177304,i32*%av,align 4
%aw=load i8*,i8**%g,align 8
%ax=bitcast i8*%at to i8**
store i8*%aw,i8**%ax,align 8
%ay=getelementptr inbounds i8,i8*%at,i64 8
%az=bitcast i8*%ay to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL9intersect_464 to void(...)*),void(...)**%az,align 8
%aA=getelementptr inbounds i8,i8*%at,i64 16
%aB=bitcast i8*%aA to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL9intersect_464 to void(...)*),void(...)**%aB,align 8
%aC=getelementptr inbounds i8,i8*%at,i64 24
%aD=bitcast i8*%aC to i32*
store i32 -2147483647,i32*%aD,align 4
ret i8*%at
}
define internal fastcc i8*@_SMLL9intersect_466(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e,i32 inreg%f,i32 inreg%g)#4 gc"smlsharp"{
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
%k=alloca i8*,align 8
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
call void@llvm.gcroot(i8**%k,i8*null)#0
%l=bitcast i8*%a to i8**
%m=load i8*,i8**%l,align 8
store i8*%m,i8**%h,align 8
%n=getelementptr inbounds i8,i8*%a,i64 8
%o=bitcast i8*%n to i8**
%p=load i8*,i8**%o,align 8
store i8*%p,i8**%i,align 8
%q=getelementptr inbounds i8,i8*%a,i64 16
%r=bitcast i8*%q to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%j,align 8
%t=getelementptr inbounds i8,i8*%a,i64 24
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=getelementptr inbounds i8,i8*%a,i64 28
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=call i8*@sml_alloc(i32 inreg 60)#0
%A=getelementptr inbounds i8,i8*%z,i64 -4
%B=bitcast i8*%A to i32*
store i32 1342177336,i32*%B,align 4
store i8*%z,i8**%k,align 8
%C=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%D=bitcast i8*%z to i8**
store i8*%C,i8**%D,align 8
%E=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%F=getelementptr inbounds i8,i8*%z,i64 8
%G=bitcast i8*%F to i8**
store i8*%E,i8**%G,align 8
%H=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%I=getelementptr inbounds i8,i8*%z,i64 16
%J=bitcast i8*%I to i8**
store i8*%H,i8**%J,align 8
%K=getelementptr inbounds i8,i8*%z,i64 24
%L=bitcast i8*%K to i32*
store i32%v,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%z,i64 28
%N=bitcast i8*%M to i32*
store i32%y,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%z,i64 32
%P=bitcast i8*%O to i32*
store i32%b,i32*%P,align 4
%Q=getelementptr inbounds i8,i8*%z,i64 36
%R=bitcast i8*%Q to i32*
store i32%c,i32*%R,align 4
%S=getelementptr inbounds i8,i8*%z,i64 40
%T=bitcast i8*%S to i32*
store i32%d,i32*%T,align 4
%U=getelementptr inbounds i8,i8*%z,i64 44
%V=bitcast i8*%U to i32*
store i32%e,i32*%V,align 4
%W=getelementptr inbounds i8,i8*%z,i64 48
%X=bitcast i8*%W to i32*
store i32%f,i32*%X,align 4
%Y=getelementptr inbounds i8,i8*%z,i64 52
%Z=bitcast i8*%Y to i32*
store i32%g,i32*%Z,align 4
%aa=getelementptr inbounds i8,i8*%z,i64 56
%ab=bitcast i8*%aa to i32*
store i32 7,i32*%ab,align 4
%ac=call i8*@sml_alloc(i32 inreg 28)#0
%ad=getelementptr inbounds i8,i8*%ac,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 1342177304,i32*%ae,align 4
%af=load i8*,i8**%k,align 8
%ag=bitcast i8*%ac to i8**
store i8*%af,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%ac,i64 8
%ai=bitcast i8*%ah to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL9intersect_465 to void(...)*),void(...)**%ai,align 8
%aj=getelementptr inbounds i8,i8*%ac,i64 16
%ak=bitcast i8*%aj to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL9intersect_465 to void(...)*),void(...)**%ak,align 8
%al=getelementptr inbounds i8,i8*%ac,i64 24
%am=bitcast i8*%al to i32*
store i32 -2147483647,i32*%am,align 4
ret i8*%ac
}
define internal fastcc i8*@_SMLL14intersectWithi_467(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
n:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%f,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%l,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%f,align 8
br label%l
l:
%m=phi i8*[%k,%j],[%a,%n]
%o=getelementptr inbounds i8,i8*%m,i64 12
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=add i32%q,-1
%s=sub i32 0,%q
%t=and i32%r,%s
%u=add i32%t,%q
%v=getelementptr inbounds i8,i8*%m,i64 28
%w=bitcast i8*%v to i32*
%x=load i32,i32*%w,align 4
%y=add i32%x,-1
%z=add i32%y,%u
%A=sub i32 0,%x
%B=and i32%z,%A
%C=getelementptr inbounds i8,i8*%m,i64 20
%D=bitcast i8*%C to i32*
%E=load i32,i32*%D,align 4
%F=add i32%y,%E
%G=add i32%F,%B
%H=sub i32 0,%E
%I=and i32%G,%H
%J=add i32%E,-1
%K=add i32%J,%u
%L=and i32%K,%H
%M=add i32%F,%L
%N=and i32%M,%A
%O=add i32%x,7
%P=add i32%O,%N
%Q=and i32%P,-8
%R=lshr i32%N,3
%S=lshr i32%L,3
%T=sub nsw i32%R,%S
%U=lshr i32%t,3
%V=sub nsw i32%S,%U
%W=getelementptr inbounds i8,i8*%m,i64 24
%X=bitcast i8*%W to i32*
%Y=load i32,i32*%X,align 4
%Z=shl i32%Y,%T
%aa=getelementptr inbounds i8,i8*%m,i64 16
%ab=bitcast i8*%aa to i32*
%ac=load i32,i32*%ab,align 4
%ad=or i32%Z,%ac
%ae=shl i32%ad,%V
%af=getelementptr inbounds i8,i8*%m,i64 8
%ag=bitcast i8*%af to i32*
%ah=load i32,i32*%ag,align 4
%ai=or i32%ae,%ah
%aj=or i32%Q,4
%ak=icmp eq i32%ah,0
br i1%ak,label%ar,label%al
al:
%am=load i8*,i8**%c,align 8
%an=sext i32%t to i64
%ao=getelementptr inbounds i8,i8*%am,i64%an
%ap=bitcast i8*%ao to i8**
%aq=load i8*,i8**%ap,align 8
br label%aC
ar:
%as=call i8*@sml_alloc(i32 inreg%q)#0
%at=getelementptr inbounds i8,i8*%as,i64 -4
%au=bitcast i8*%at to i32*
store i32%q,i32*%au,align 4
%av=load i8*,i8**%c,align 8
%aw=sext i32%t to i64
%ax=getelementptr inbounds i8,i8*%av,i64%aw
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%as,i8*%ax,i32%q,i1 false)
%ay=load i8*,i8**%f,align 8
%az=getelementptr inbounds i8,i8*%ay,i64 24
%aA=bitcast i8*%az to i32*
%aB=load i32,i32*%aA,align 4
br label%aC
aC:
%aD=phi i8*[%ay,%ar],[%m,%al]
%aE=phi i8*[%av,%ar],[%am,%al]
%aF=phi i32[%aB,%ar],[%Y,%al]
%aG=phi i8*[%as,%ar],[%aq,%al]
store i8*%aG,i8**%d,align 8
%aH=icmp eq i32%aF,0
br i1%aH,label%aN,label%aI
aI:
%aJ=sext i32%B to i64
%aK=getelementptr inbounds i8,i8*%aE,i64%aJ
%aL=bitcast i8*%aK to i8**
%aM=load i8*,i8**%aL,align 8
br label%aY
aN:
%aO=getelementptr inbounds i8,i8*%aD,i64 28
%aP=bitcast i8*%aO to i32*
%aQ=load i32,i32*%aP,align 4
%aR=call i8*@sml_alloc(i32 inreg%aQ)#0
%aS=getelementptr inbounds i8,i8*%aR,i64 -4
%aT=bitcast i8*%aS to i32*
store i32%aQ,i32*%aT,align 4
%aU=load i8*,i8**%c,align 8
%aV=sext i32%B to i64
%aW=getelementptr inbounds i8,i8*%aU,i64%aV
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aR,i8*%aW,i32%aQ,i1 false)
%aX=load i8*,i8**%f,align 8
br label%aY
aY:
%aZ=phi i8*[%aX,%aN],[%aD,%aI]
%a0=phi i8*[%aU,%aN],[%aE,%aI]
%a1=phi i8*[%aR,%aN],[%aM,%aI]
store i8*%a1,i8**%e,align 8
%a2=getelementptr inbounds i8,i8*%aZ,i64 16
%a3=bitcast i8*%a2 to i32*
%a4=load i32,i32*%a3,align 4
%a5=icmp eq i32%a4,0
br i1%a5,label%bc,label%a6
a6:
%a7=bitcast i8*%aZ to i8**
store i8*null,i8**%c,align 8
%a8=sext i32%I to i64
%a9=getelementptr inbounds i8,i8*%a0,i64%a8
%ba=bitcast i8*%a9 to i8**
%bb=load i8*,i8**%ba,align 8
br label%bs
bc:
%bd=getelementptr inbounds i8,i8*%aZ,i64 20
%be=bitcast i8*%bd to i32*
%bf=load i32,i32*%be,align 4
%bg=call i8*@sml_alloc(i32 inreg%bf)#0
%bh=getelementptr inbounds i8,i8*%bg,i64 -4
%bi=bitcast i8*%bh to i32*
store i32%bf,i32*%bi,align 4
%bj=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bk=sext i32%I to i64
%bl=getelementptr inbounds i8,i8*%bj,i64%bk
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bg,i8*%bl,i32%bf,i1 false)
%bm=bitcast i8**%f to i8***
%bn=load i8**,i8***%bm,align 8
%bo=bitcast i8**%bn to i8*
%bp=getelementptr inbounds i8*,i8**%bn,i64 2
%bq=bitcast i8**%bp to i32*
%br=load i32,i32*%bq,align 4
br label%bs
bs:
%bt=phi i32[%br,%bc],[%a4,%a6]
%bu=phi i8*[%bo,%bc],[%aZ,%a6]
%bv=phi i8**[%bn,%bc],[%a7,%a6]
%bw=phi i8*[%bg,%bc],[%bb,%a6]
store i8*%bw,i8**%c,align 8
%bx=load i8*,i8**%bv,align 8
%by=getelementptr inbounds i8,i8*%bx,i64 16
%bz=bitcast i8*%by to i8*(i8*,i8*)**
%bA=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bz,align 8
%bB=bitcast i8*%bx to i8**
%bC=load i8*,i8**%bB,align 8
store i8*%bC,i8**%g,align 8
%bD=getelementptr inbounds i8,i8*%bu,i64 12
%bE=bitcast i8*%bD to i32*
%bF=load i32,i32*%bE,align 4
%bG=getelementptr inbounds i8,i8*%bu,i64 8
%bH=bitcast i8*%bG to i32*
%bI=load i32,i32*%bH,align 4
%bJ=getelementptr inbounds i8,i8*%bu,i64 20
%bK=bitcast i8*%bJ to i32*
%bL=load i32,i32*%bK,align 4
%bM=getelementptr inbounds i8,i8*%bu,i64 28
%bN=bitcast i8*%bM to i32*
%bO=load i32,i32*%bN,align 4
store i8*null,i8**%f,align 8
%bP=getelementptr inbounds i8,i8*%bu,i64 24
%bQ=bitcast i8*%bP to i32*
%bR=load i32,i32*%bQ,align 4
%bS=call i8*@sml_alloc(i32 inreg%aj)#0
%bT=or i32%Q,1342177280
%bU=getelementptr inbounds i8,i8*%bS,i64 -4
%bV=bitcast i8*%bU to i32*
store i32%bT,i32*%bV,align 4
call void@llvm.memset.p0i8.i32(i8*%bS,i8 0,i32%aj,i1 false)
%bW=icmp eq i32%bI,0
%bX=load i8*,i8**%d,align 8
%bY=sext i32%t to i64
%bZ=getelementptr inbounds i8,i8*%bS,i64%bY
br i1%bW,label%b2,label%b0
b0:
%b1=bitcast i8*%bZ to i8**
store i8*%bX,i8**%b1,align 8
br label%b3
b2:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bZ,i8*%bX,i32%bF,i1 false)
br label%b3
b3:
%b4=icmp eq i32%bt,0
%b5=load i8*,i8**%c,align 8
%b6=sext i32%L to i64
%b7=getelementptr inbounds i8,i8*%bS,i64%b6
br i1%b4,label%ca,label%b8
b8:
%b9=bitcast i8*%b7 to i8**
store i8*%b5,i8**%b9,align 8
br label%cb
ca:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%b7,i8*%b5,i32%bL,i1 false)
br label%cb
cb:
%cc=icmp eq i32%bR,0
%cd=load i8*,i8**%e,align 8
%ce=sext i32%N to i64
%cf=getelementptr inbounds i8,i8*%bS,i64%ce
br i1%cc,label%ci,label%cg
cg:
%ch=bitcast i8*%cf to i8**
store i8*%cd,i8**%ch,align 8
br label%cj
ci:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cf,i8*%cd,i32%bO,i1 false)
br label%cj
cj:
%ck=sext i32%Q to i64
%cl=getelementptr inbounds i8,i8*%bS,i64%ck
%cm=bitcast i8*%cl to i32*
store i32%ai,i32*%cm,align 4
%cn=load i8*,i8**%g,align 8
%co=tail call fastcc i8*%bA(i8*inreg%cn,i8*inreg%bS)
ret i8*%co
}
define internal fastcc i8*@_SMLL14intersectWithi_468(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
q:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%j=load atomic i32,i32*@sml_check_flag unordered,align 4
%k=icmp eq i32%j,0
br i1%k,label%o,label%l
l:
call void@sml_check(i32 inreg%j)
%m=load i8*,i8**%c,align 8
%n=load i8*,i8**%e,align 8
br label%o
o:
%p=phi i8*[%n,%l],[%a,%q]
%r=phi i8*[%m,%l],[%b,%q]
%s=bitcast i8*%r to i8**
%t=load i8*,i8**%s,align 8
store i8*%t,i8**%c,align 8
%u=getelementptr inbounds i8,i8*%r,i64 8
%v=bitcast i8*%u to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%d,align 8
%x=getelementptr inbounds i8,i8*%p,i64 8
%y=bitcast i8*%x to i8**
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%f,align 8
%A=getelementptr inbounds i8,i8*%p,i64 16
%B=bitcast i8*%A to i8**
%C=load i8*,i8**%B,align 8
store i8*%C,i8**%g,align 8
%D=getelementptr inbounds i8,i8*%p,i64 24
%E=bitcast i8*%D to i8**
%F=load i8*,i8**%E,align 8
store i8*%F,i8**%h,align 8
%G=getelementptr inbounds i8,i8*%p,i64 32
%H=bitcast i8*%G to i32*
%I=load i32,i32*%H,align 4
%J=getelementptr inbounds i8,i8*%p,i64 36
%K=bitcast i8*%J to i32*
%L=load i32,i32*%K,align 4
%M=call i8*@sml_alloc(i32 inreg 36)#0
%N=getelementptr inbounds i8,i8*%M,i64 -4
%O=bitcast i8*%N to i32*
store i32 1342177312,i32*%O,align 4
store i8*%M,i8**%i,align 8
%P=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%Q=bitcast i8*%M to i8**
store i8*%P,i8**%Q,align 8
%R=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%S=getelementptr inbounds i8,i8*%M,i64 8
%T=bitcast i8*%S to i8**
store i8*%R,i8**%T,align 8
%U=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%V=getelementptr inbounds i8,i8*%M,i64 16
%W=bitcast i8*%V to i8**
store i8*%U,i8**%W,align 8
%X=getelementptr inbounds i8,i8*%M,i64 24
%Y=bitcast i8*%X to i32*
store i32%I,i32*%Y,align 4
%Z=getelementptr inbounds i8,i8*%M,i64 28
%aa=bitcast i8*%Z to i32*
store i32%L,i32*%aa,align 4
%ab=getelementptr inbounds i8,i8*%M,i64 32
%ac=bitcast i8*%ab to i32*
store i32 7,i32*%ac,align 4
%ad=call i8*@sml_alloc(i32 inreg 28)#0
%ae=getelementptr inbounds i8,i8*%ad,i64 -4
%af=bitcast i8*%ae to i32*
store i32 1342177304,i32*%af,align 4
%ag=load i8*,i8**%i,align 8
%ah=bitcast i8*%ad to i8**
store i8*%ag,i8**%ah,align 8
%ai=getelementptr inbounds i8,i8*%ad,i64 8
%aj=bitcast i8*%ai to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32,i32,i32)*@_SMLL9intersect_466 to void(...)*),void(...)**%aj,align 8
%ak=getelementptr inbounds i8,i8*%ad,i64 16
%al=bitcast i8*%ak to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*,i8*,i8*)*@_SMLL9intersect_702 to void(...)*),void(...)**%al,align 8
%am=getelementptr inbounds i8,i8*%ad,i64 24
%an=bitcast i8*%am to i32*
store i32 -2147483647,i32*%an,align 4
%ao=load i8*,i8**%c,align 8
%ap=icmp eq i8*%ao,null
br i1%ap,label%at,label%aq
aq:
%ar=bitcast i8*%ao to i32*
%as=load i32,i32*%ar,align 4
br label%at
at:
%au=phi i32[%as,%aq],[0,%o]
%av=load i8*,i8**%d,align 8
%aw=icmp eq i8*%av,null
br i1%aw,label%aA,label%ax
ax:
%ay=bitcast i8*%av to i32*
%az=load i32,i32*%ay,align 4
br label%aA
aA:
%aB=phi i32[%az,%ax],[0,%at]
%aC=icmp sgt i32%au,%aB
%aD=load i8*,i8**%e,align 8
br i1%aC,label%aE,label%bo
aE:
%aF=getelementptr inbounds i8,i8*%aD,i64 40
%aG=bitcast i8*%aF to i32*
%aH=load i32,i32*%aG,align 4
%aI=getelementptr inbounds i8,i8*%aD,i64 44
%aJ=bitcast i8*%aI to i32*
%aK=load i32,i32*%aJ,align 4
%aL=getelementptr inbounds i8,i8*%aD,i64 48
%aM=bitcast i8*%aL to i32*
%aN=load i32,i32*%aM,align 4
%aO=getelementptr inbounds i8,i8*%aD,i64 52
%aP=bitcast i8*%aO to i32*
%aQ=load i32,i32*%aP,align 4
%aR=getelementptr inbounds i8,i8*%aD,i64 56
%aS=bitcast i8*%aR to i32*
%aT=load i32,i32*%aS,align 4
%aU=getelementptr inbounds i8,i8*%aD,i64 60
%aV=bitcast i8*%aU to i32*
%aW=load i32,i32*%aV,align 4
store i8*null,i8**%i,align 8
%aX=call fastcc i8*@_SMLL9intersect_466(i8*inreg%ag,i32 inreg%aH,i32 inreg%aK,i32 inreg%aN,i32 inreg%aQ,i32 inreg%aT,i32 inreg%aW)
%aY=getelementptr inbounds i8,i8*%aX,i64 16
%aZ=bitcast i8*%aY to i8*(i8*,i8*)**
%a0=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aZ,align 8
%a1=bitcast i8*%aX to i8**
%a2=load i8*,i8**%a1,align 8
%a3=bitcast i8**%e to i8***
%a4=load i8**,i8***%a3,align 8
store i8*null,i8**%e,align 8
%a5=load i8*,i8**%a4,align 8
%a6=call fastcc i8*%a0(i8*inreg%a2,i8*inreg%a5)
%a7=getelementptr inbounds i8,i8*%a6,i64 16
%a8=bitcast i8*%a7 to i8*(i8*,i8*)**
%a9=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a8,align 8
%ba=bitcast i8*%a6 to i8**
%bb=load i8*,i8**%ba,align 8
store i8*%bb,i8**%e,align 8
%bc=call i8*@sml_alloc(i32 inreg 20)#0
%bd=getelementptr inbounds i8,i8*%bc,i64 -4
%be=bitcast i8*%bd to i32*
store i32 1342177296,i32*%be,align 4
%bf=load i8*,i8**%c,align 8
%bg=bitcast i8*%bc to i8**
store i8*%bf,i8**%bg,align 8
%bh=load i8*,i8**%d,align 8
%bi=getelementptr inbounds i8,i8*%bc,i64 8
%bj=bitcast i8*%bi to i8**
store i8*%bh,i8**%bj,align 8
%bk=getelementptr inbounds i8,i8*%bc,i64 16
%bl=bitcast i8*%bk to i32*
store i32 3,i32*%bl,align 4
%bm=load i8*,i8**%e,align 8
%bn=tail call fastcc i8*%a9(i8*inreg%bm,i8*inreg%bc)
ret i8*%bn
bo:
%bp=getelementptr inbounds i8,i8*%aD,i64 48
%bq=bitcast i8*%bp to i32*
%br=load i32,i32*%bq,align 4
%bs=getelementptr inbounds i8,i8*%aD,i64 52
%bt=bitcast i8*%bs to i32*
%bu=load i32,i32*%bt,align 4
%bv=getelementptr inbounds i8,i8*%aD,i64 40
%bw=bitcast i8*%bv to i32*
%bx=load i32,i32*%bw,align 4
%by=getelementptr inbounds i8,i8*%aD,i64 44
%bz=bitcast i8*%by to i32*
%bA=load i32,i32*%bz,align 4
%bB=getelementptr inbounds i8,i8*%aD,i64 56
%bC=bitcast i8*%bB to i32*
%bD=load i32,i32*%bC,align 4
%bE=getelementptr inbounds i8,i8*%aD,i64 60
%bF=bitcast i8*%bE to i32*
%bG=load i32,i32*%bF,align 4
store i8*null,i8**%i,align 8
%bH=call fastcc i8*@_SMLL9intersect_466(i8*inreg%ag,i32 inreg%br,i32 inreg%bu,i32 inreg%bx,i32 inreg%bA,i32 inreg%bD,i32 inreg%bG)
%bI=getelementptr inbounds i8,i8*%bH,i64 16
%bJ=bitcast i8*%bI to i8*(i8*,i8*)**
%bK=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bJ,align 8
%bL=bitcast i8*%bH to i8**
%bM=load i8*,i8**%bL,align 8
store i8*%bM,i8**%g,align 8
%bN=bitcast i8**%e to i8***
%bO=load i8**,i8***%bN,align 8
%bP=load i8*,i8**%bO,align 8
store i8*%bP,i8**%f,align 8
%bQ=bitcast i8**%bO to i8*
%bR=getelementptr inbounds i8*,i8**%bO,i64 4
%bS=bitcast i8**%bR to i32*
%bT=load i32,i32*%bS,align 4
%bU=getelementptr inbounds i8,i8*%bQ,i64 36
%bV=bitcast i8*%bU to i32*
%bW=load i32,i32*%bV,align 4
%bX=getelementptr inbounds i8*,i8**%bO,i64 5
%bY=bitcast i8**%bX to i32*
%bZ=load i32,i32*%bY,align 4
%b0=getelementptr inbounds i8,i8*%bQ,i64 44
%b1=bitcast i8*%b0 to i32*
%b2=load i32,i32*%b1,align 4
%b3=getelementptr inbounds i8*,i8**%bO,i64 6
%b4=bitcast i8**%b3 to i32*
%b5=load i32,i32*%b4,align 4
store i8*null,i8**%e,align 8
%b6=getelementptr inbounds i8,i8*%bQ,i64 52
%b7=bitcast i8*%b6 to i32*
%b8=load i32,i32*%b7,align 4
%b9=call i8*@sml_alloc(i32 inreg 36)#0
%ca=getelementptr inbounds i8,i8*%b9,i64 -4
%cb=bitcast i8*%ca to i32*
store i32 1342177312,i32*%cb,align 4
store i8*%b9,i8**%e,align 8
%cc=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%cd=bitcast i8*%b9 to i8**
store i8*%cc,i8**%cd,align 8
%ce=getelementptr inbounds i8,i8*%b9,i64 8
%cf=bitcast i8*%ce to i32*
store i32%bT,i32*%cf,align 4
%cg=getelementptr inbounds i8,i8*%b9,i64 12
%ch=bitcast i8*%cg to i32*
store i32%bW,i32*%ch,align 4
%ci=getelementptr inbounds i8,i8*%b9,i64 16
%cj=bitcast i8*%ci to i32*
store i32%bZ,i32*%cj,align 4
%ck=getelementptr inbounds i8,i8*%b9,i64 20
%cl=bitcast i8*%ck to i32*
store i32%b2,i32*%cl,align 4
%cm=getelementptr inbounds i8,i8*%b9,i64 24
%cn=bitcast i8*%cm to i32*
store i32%b5,i32*%cn,align 4
%co=getelementptr inbounds i8,i8*%b9,i64 28
%cp=bitcast i8*%co to i32*
store i32%b8,i32*%cp,align 4
%cq=getelementptr inbounds i8,i8*%b9,i64 32
%cr=bitcast i8*%cq to i32*
store i32 1,i32*%cr,align 4
%cs=call i8*@sml_alloc(i32 inreg 28)#0
%ct=getelementptr inbounds i8,i8*%cs,i64 -4
%cu=bitcast i8*%ct to i32*
store i32 1342177304,i32*%cu,align 4
%cv=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%cw=bitcast i8*%cs to i8**
store i8*%cv,i8**%cw,align 8
%cx=getelementptr inbounds i8,i8*%cs,i64 8
%cy=bitcast i8*%cx to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL14intersectWithi_467 to void(...)*),void(...)**%cy,align 8
%cz=getelementptr inbounds i8,i8*%cs,i64 16
%cA=bitcast i8*%cz to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL14intersectWithi_467 to void(...)*),void(...)**%cA,align 8
%cB=getelementptr inbounds i8,i8*%cs,i64 24
%cC=bitcast i8*%cB to i32*
store i32 1,i32*%cC,align 4
%cD=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%cE=call fastcc i8*%bK(i8*inreg%cD,i8*inreg%cs)
%cF=getelementptr inbounds i8,i8*%cE,i64 16
%cG=bitcast i8*%cF to i8*(i8*,i8*)**
%cH=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%cG,align 8
%cI=bitcast i8*%cE to i8**
%cJ=load i8*,i8**%cI,align 8
store i8*%cJ,i8**%e,align 8
%cK=call i8*@sml_alloc(i32 inreg 20)#0
%cL=getelementptr inbounds i8,i8*%cK,i64 -4
%cM=bitcast i8*%cL to i32*
store i32 1342177296,i32*%cM,align 4
%cN=load i8*,i8**%d,align 8
%cO=bitcast i8*%cK to i8**
store i8*%cN,i8**%cO,align 8
%cP=load i8*,i8**%c,align 8
%cQ=getelementptr inbounds i8,i8*%cK,i64 8
%cR=bitcast i8*%cQ to i8**
store i8*%cP,i8**%cR,align 8
%cS=getelementptr inbounds i8,i8*%cK,i64 16
%cT=bitcast i8*%cS to i32*
store i32 3,i32*%cT,align 4
%cU=load i8*,i8**%e,align 8
%cV=tail call fastcc i8*%cH(i8*inreg%cU,i8*inreg%cK)
ret i8*%cV
}
define internal fastcc i8*@_SMLL14intersectWithi_469(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%b,i8**%c,align 8
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%d,align 8
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
store i8*%l,i8**%e,align 8
%m=getelementptr inbounds i8,i8*%a,i64 16
%n=bitcast i8*%m to i8**
%o=load i8*,i8**%n,align 8
store i8*%o,i8**%f,align 8
%p=getelementptr inbounds i8,i8*%a,i64 24
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=getelementptr inbounds i8,i8*%a,i64 28
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=getelementptr inbounds i8,i8*%a,i64 32
%w=bitcast i8*%v to i32*
%x=load i32,i32*%w,align 4
%y=getelementptr inbounds i8,i8*%a,i64 36
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=getelementptr inbounds i8,i8*%a,i64 40
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=getelementptr inbounds i8,i8*%a,i64 44
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
%H=getelementptr inbounds i8,i8*%a,i64 48
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
%K=getelementptr inbounds i8,i8*%a,i64 52
%L=bitcast i8*%K to i32*
%M=load i32,i32*%L,align 4
%N=call i8*@sml_alloc(i32 inreg 68)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32 1342177344,i32*%P,align 4
store i8*%N,i8**%g,align 8
%Q=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%R=bitcast i8*%N to i8**
store i8*%Q,i8**%R,align 8
%S=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%T=getelementptr inbounds i8,i8*%N,i64 8
%U=bitcast i8*%T to i8**
store i8*%S,i8**%U,align 8
%V=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%W=getelementptr inbounds i8,i8*%N,i64 16
%X=bitcast i8*%W to i8**
store i8*%V,i8**%X,align 8
%Y=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%Z=getelementptr inbounds i8,i8*%N,i64 24
%aa=bitcast i8*%Z to i8**
store i8*%Y,i8**%aa,align 8
%ab=getelementptr inbounds i8,i8*%N,i64 32
%ac=bitcast i8*%ab to i32*
store i32%r,i32*%ac,align 4
%ad=getelementptr inbounds i8,i8*%N,i64 36
%ae=bitcast i8*%ad to i32*
store i32%u,i32*%ae,align 4
%af=getelementptr inbounds i8,i8*%N,i64 40
%ag=bitcast i8*%af to i32*
store i32%x,i32*%ag,align 4
%ah=getelementptr inbounds i8,i8*%N,i64 44
%ai=bitcast i8*%ah to i32*
store i32%A,i32*%ai,align 4
%aj=getelementptr inbounds i8,i8*%N,i64 48
%ak=bitcast i8*%aj to i32*
store i32%D,i32*%ak,align 4
%al=getelementptr inbounds i8,i8*%N,i64 52
%am=bitcast i8*%al to i32*
store i32%G,i32*%am,align 4
%an=getelementptr inbounds i8,i8*%N,i64 56
%ao=bitcast i8*%an to i32*
store i32%J,i32*%ao,align 4
%ap=getelementptr inbounds i8,i8*%N,i64 60
%aq=bitcast i8*%ap to i32*
store i32%M,i32*%aq,align 4
%ar=getelementptr inbounds i8,i8*%N,i64 64
%as=bitcast i8*%ar to i32*
store i32 15,i32*%as,align 4
%at=call i8*@sml_alloc(i32 inreg 28)#0
%au=getelementptr inbounds i8,i8*%at,i64 -4
%av=bitcast i8*%au to i32*
store i32 1342177304,i32*%av,align 4
%aw=load i8*,i8**%g,align 8
%ax=bitcast i8*%at to i8**
store i8*%aw,i8**%ax,align 8
%ay=getelementptr inbounds i8,i8*%at,i64 8
%az=bitcast i8*%ay to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL14intersectWithi_468 to void(...)*),void(...)**%az,align 8
%aA=getelementptr inbounds i8,i8*%at,i64 16
%aB=bitcast i8*%aA to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL14intersectWithi_468 to void(...)*),void(...)**%aB,align 8
%aC=getelementptr inbounds i8,i8*%at,i64 24
%aD=bitcast i8*%aC to i32*
store i32 -2147483647,i32*%aD,align 4
ret i8*%at
}
define internal fastcc i8*@_SMLL14intersectWithi_470(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e,i32 inreg%f,i32 inreg%g)#4 gc"smlsharp"{
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
%k=alloca i8*,align 8
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
call void@llvm.gcroot(i8**%k,i8*null)#0
%l=bitcast i8*%a to i8**
%m=load i8*,i8**%l,align 8
store i8*%m,i8**%h,align 8
%n=getelementptr inbounds i8,i8*%a,i64 8
%o=bitcast i8*%n to i8**
%p=load i8*,i8**%o,align 8
store i8*%p,i8**%i,align 8
%q=getelementptr inbounds i8,i8*%a,i64 16
%r=bitcast i8*%q to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%j,align 8
%t=getelementptr inbounds i8,i8*%a,i64 24
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=getelementptr inbounds i8,i8*%a,i64 28
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=call i8*@sml_alloc(i32 inreg 60)#0
%A=getelementptr inbounds i8,i8*%z,i64 -4
%B=bitcast i8*%A to i32*
store i32 1342177336,i32*%B,align 4
store i8*%z,i8**%k,align 8
%C=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%D=bitcast i8*%z to i8**
store i8*%C,i8**%D,align 8
%E=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%F=getelementptr inbounds i8,i8*%z,i64 8
%G=bitcast i8*%F to i8**
store i8*%E,i8**%G,align 8
%H=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%I=getelementptr inbounds i8,i8*%z,i64 16
%J=bitcast i8*%I to i8**
store i8*%H,i8**%J,align 8
%K=getelementptr inbounds i8,i8*%z,i64 24
%L=bitcast i8*%K to i32*
store i32%v,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%z,i64 28
%N=bitcast i8*%M to i32*
store i32%y,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%z,i64 32
%P=bitcast i8*%O to i32*
store i32%b,i32*%P,align 4
%Q=getelementptr inbounds i8,i8*%z,i64 36
%R=bitcast i8*%Q to i32*
store i32%c,i32*%R,align 4
%S=getelementptr inbounds i8,i8*%z,i64 40
%T=bitcast i8*%S to i32*
store i32%d,i32*%T,align 4
%U=getelementptr inbounds i8,i8*%z,i64 44
%V=bitcast i8*%U to i32*
store i32%e,i32*%V,align 4
%W=getelementptr inbounds i8,i8*%z,i64 48
%X=bitcast i8*%W to i32*
store i32%f,i32*%X,align 4
%Y=getelementptr inbounds i8,i8*%z,i64 52
%Z=bitcast i8*%Y to i32*
store i32%g,i32*%Z,align 4
%aa=getelementptr inbounds i8,i8*%z,i64 56
%ab=bitcast i8*%aa to i32*
store i32 7,i32*%ab,align 4
%ac=call i8*@sml_alloc(i32 inreg 28)#0
%ad=getelementptr inbounds i8,i8*%ac,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 1342177304,i32*%ae,align 4
%af=load i8*,i8**%k,align 8
%ag=bitcast i8*%ac to i8**
store i8*%af,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%ac,i64 8
%ai=bitcast i8*%ah to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL14intersectWithi_469 to void(...)*),void(...)**%ai,align 8
%aj=getelementptr inbounds i8,i8*%ac,i64 16
%ak=bitcast i8*%aj to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL14intersectWithi_469 to void(...)*),void(...)**%ak,align 8
%al=getelementptr inbounds i8,i8*%ac,i64 24
%am=bitcast i8*%al to i32*
store i32 -2147483647,i32*%am,align 4
ret i8*%ac
}
define internal fastcc i8*@_SMLL3ins_471(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
q:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
store i8*%a,i8**%h,align 8
store i8*%b,i8**%c,align 8
%k=load atomic i32,i32*@sml_check_flag unordered,align 4
%l=icmp eq i32%k,0
br i1%l,label%o,label%m
m:
call void@sml_check(i32 inreg%k)
%n=load i8*,i8**%h,align 8
br label%o
o:
%p=phi i8*[%n,%m],[%a,%q]
%r=getelementptr inbounds i8,i8*%p,i64 36
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=add i32%t,-1
%v=sub i32 0,%t
%w=and i32%u,%v
%x=add i32%w,%t
%y=getelementptr inbounds i8,i8*%p,i64 52
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=add i32%x,-1
%C=add i32%B,%A
%D=sub i32 0,%A
%E=and i32%C,%D
%F=add i32%A,7
%G=add i32%F,%E
%H=and i32%G,-8
%I=add i32%t,7
%J=and i32%I,%v
%K=add i32%J,%t
%L=add i32%K,7
%M=and i32%L,-8
%N=lshr i32%J,3
%O=getelementptr inbounds i8,i8*%p,i64 32
%P=bitcast i8*%O to i32*
%Q=load i32,i32*%P,align 4
%R=shl i32%Q,%N
%S=or i32%R,1
%T=or i32%M,4
%U=getelementptr inbounds i8,i8*%p,i64 44
%V=bitcast i8*%U to i32*
%W=load i32,i32*%V,align 4
%X=add i32%B,%W
%Y=sub i32 0,%W
%Z=and i32%X,%Y
%aa=add i32%W,7
%ab=add i32%aa,%Z
%ac=and i32%ab,-8
%ad=lshr i32%Z,3
%ae=lshr i32%w,3
%af=sub nsw i32%ad,%ae
%ag=getelementptr inbounds i8,i8*%p,i64 40
%ah=bitcast i8*%ag to i32*
%ai=load i32,i32*%ah,align 4
%aj=shl i32%ai,%af
%ak=or i32%aj,%Q
%al=or i32%ac,4
%am=lshr i32%E,3
%an=sub nsw i32%am,%ae
%ao=getelementptr inbounds i8,i8*%p,i64 48
%ap=bitcast i8*%ao to i32*
%aq=load i32,i32*%ap,align 4
%ar=shl i32%aq,%an
%as=or i32%ar,%Q
%at=or i32%H,4
%au=getelementptr inbounds i8,i8*%p,i64 60
%av=bitcast i8*%au to i32*
%aw=load i32,i32*%av,align 4
%ax=add i32%B,%aw
%ay=sub i32 0,%aw
%az=and i32%ax,%ay
%aA=add i32%aw,-1
%aB=add i32%aA,%K
%aC=and i32%aB,%ay
%aD=add i32%aw,7
%aE=add i32%aD,%aC
%aF=and i32%aE,-8
%aG=lshr i32%aC,3
%aH=sub nsw i32%aG,%N
%aI=getelementptr inbounds i8,i8*%p,i64 56
%aJ=bitcast i8*%aI to i32*
%aK=load i32,i32*%aJ,align 4
%aL=shl i32%aK,%aH
%aM=or i32%aL,%Q
%aN=shl i32%aM,%N
%aO=or i32%aN,1
%aP=or i32%aF,4
%aQ=icmp eq i32%Q,0
br i1%aQ,label%aX,label%aR
aR:
%aS=load i8*,i8**%c,align 8
%aT=sext i32%w to i64
%aU=getelementptr inbounds i8,i8*%aS,i64%aT
%aV=bitcast i8*%aU to i8**
%aW=load i8*,i8**%aV,align 8
br label%a8
aX:
%aY=call i8*@sml_alloc(i32 inreg%t)#0
%aZ=getelementptr inbounds i8,i8*%aY,i64 -4
%a0=bitcast i8*%aZ to i32*
store i32%t,i32*%a0,align 4
%a1=load i8*,i8**%c,align 8
%a2=sext i32%w to i64
%a3=getelementptr inbounds i8,i8*%a1,i64%a2
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aY,i8*%a3,i32%t,i1 false)
%a4=load i8*,i8**%h,align 8
%a5=getelementptr inbounds i8,i8*%a4,i64 48
%a6=bitcast i8*%a5 to i32*
%a7=load i32,i32*%a6,align 4
br label%a8
a8:
%a9=phi i8*[%a1,%aX],[%aS,%aR]
%ba=phi i32[%a7,%aX],[%aq,%aR]
%bb=phi i8*[%a4,%aX],[%p,%aR]
%bc=phi i8*[%aY,%aX],[%aW,%aR]
store i8*%bc,i8**%d,align 8
%bd=icmp eq i32%ba,0
br i1%bd,label%bj,label%be
be:
%bf=sext i32%E to i64
%bg=getelementptr inbounds i8,i8*%a9,i64%bf
%bh=bitcast i8*%bg to i8**
%bi=load i8*,i8**%bh,align 8
br label%bu
bj:
%bk=getelementptr inbounds i8,i8*%bb,i64 52
%bl=bitcast i8*%bk to i32*
%bm=load i32,i32*%bl,align 4
%bn=call i8*@sml_alloc(i32 inreg%bm)#0
%bo=getelementptr inbounds i8,i8*%bn,i64 -4
%bp=bitcast i8*%bo to i32*
store i32%bm,i32*%bp,align 4
%bq=load i8*,i8**%c,align 8
%br=sext i32%E to i64
%bs=getelementptr inbounds i8,i8*%bq,i64%br
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bn,i8*%bs,i32%bm,i1 false)
%bt=load i8*,i8**%h,align 8
br label%bu
bu:
%bv=phi i8*[%bt,%bj],[%bb,%be]
%bw=phi i8*[%bq,%bj],[%a9,%be]
%bx=phi i8*[%bn,%bj],[%bi,%be]
store i8*%bx,i8**%e,align 8
store i8*null,i8**%c,align 8
%by=sext i32%H to i64
%bz=getelementptr inbounds i8,i8*%bw,i64%by
%bA=bitcast i8*%bz to i8**
%bB=load i8*,i8**%bA,align 8
store i8*%bB,i8**%f,align 8
%bC=getelementptr inbounds i8,i8*%bv,i64 24
%bD=bitcast i8*%bC to i8**
%bE=load i8*,i8**%bD,align 8
%bF=getelementptr inbounds i8,i8*%bv,i64 40
%bG=bitcast i8*%bF to i32*
%bH=load i32,i32*%bG,align 4
%bI=getelementptr inbounds i8,i8*%bv,i64 44
%bJ=bitcast i8*%bI to i32*
%bK=load i32,i32*%bJ,align 4
%bL=call fastcc i8*@_SMLL5findi_357(i8*inreg%bE,i32 inreg%bH,i32 inreg%bK)
%bM=getelementptr inbounds i8,i8*%bL,i64 16
%bN=bitcast i8*%bM to i8*(i8*,i8*)**
%bO=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bN,align 8
%bP=bitcast i8*%bL to i8**
%bQ=load i8*,i8**%bP,align 8
store i8*%bQ,i8**%g,align 8
%bR=load i8*,i8**%h,align 8
%bS=getelementptr inbounds i8,i8*%bR,i64 8
%bT=bitcast i8*%bS to i8**
%bU=load i8*,i8**%bT,align 8
store i8*%bU,i8**%c,align 8
%bV=getelementptr inbounds i8,i8*%bR,i64 36
%bW=bitcast i8*%bV to i32*
%bX=load i32,i32*%bW,align 4
%bY=getelementptr inbounds i8,i8*%bR,i64 32
%bZ=bitcast i8*%bY to i32*
%b0=load i32,i32*%bZ,align 4
%b1=call i8*@sml_alloc(i32 inreg%T)#0
%b2=or i32%M,1342177280
%b3=getelementptr inbounds i8,i8*%b1,i64 -4
%b4=bitcast i8*%b3 to i32*
store i32%b2,i32*%b4,align 4
call void@llvm.memset.p0i8.i32(i8*%b1,i8 0,i32%T,i1 false)
%b5=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%b6=bitcast i8*%b1 to i8**
store i8*%b5,i8**%b6,align 8
%b7=icmp eq i32%b0,0
%b8=load i8*,i8**%d,align 8
%b9=sext i32%J to i64
%ca=getelementptr inbounds i8,i8*%b1,i64%b9
br i1%b7,label%cd,label%cb
cb:
%cc=bitcast i8*%ca to i8**
store i8*%b8,i8**%cc,align 8
br label%ce
cd:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ca,i8*%b8,i32%bX,i1 false)
br label%ce
ce:
%cf=sext i32%M to i64
%cg=getelementptr inbounds i8,i8*%b1,i64%cf
%ch=bitcast i8*%cg to i32*
store i32%S,i32*%ch,align 4
%ci=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%cj=call fastcc i8*%bO(i8*inreg%ci,i8*inreg%b1)
%ck=icmp eq i8*%cj,null
br i1%ck,label%cl,label%cn
cl:
%cm=load i8*,i8**%f,align 8
ret i8*%cm
cn:
%co=bitcast i8*%cj to i8**
%cp=load i8*,i8**%co,align 8
store i8*%cp,i8**%c,align 8
%cq=load i8*,i8**%h,align 8
%cr=getelementptr inbounds i8,i8*%cq,i64 32
%cs=bitcast i8*%cr to i32*
%ct=load i32,i32*%cs,align 4
%cu=icmp eq i32%ct,0
br i1%cu,label%cA,label%cv
cv:
%cw=sext i32%w to i64
%cx=getelementptr inbounds i8,i8*%cp,i64%cw
%cy=bitcast i8*%cx to i8**
%cz=load i8*,i8**%cy,align 8
br label%cL
cA:
%cB=getelementptr inbounds i8,i8*%cq,i64 36
%cC=bitcast i8*%cB to i32*
%cD=load i32,i32*%cC,align 4
%cE=call i8*@sml_alloc(i32 inreg%cD)#0
%cF=getelementptr inbounds i8,i8*%cE,i64 -4
%cG=bitcast i8*%cF to i32*
store i32%cD,i32*%cG,align 4
%cH=load i8*,i8**%c,align 8
%cI=sext i32%w to i64
%cJ=getelementptr inbounds i8,i8*%cH,i64%cI
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cE,i8*%cJ,i32%cD,i1 false)
%cK=load i8*,i8**%h,align 8
br label%cL
cL:
%cM=phi i8*[%cK,%cA],[%cq,%cv]
%cN=phi i8*[%cH,%cA],[%cp,%cv]
%cO=phi i8*[%cE,%cA],[%cz,%cv]
store i8*%cO,i8**%g,align 8
%cP=getelementptr inbounds i8,i8*%cM,i64 40
%cQ=bitcast i8*%cP to i32*
%cR=load i32,i32*%cQ,align 4
%cS=icmp eq i32%cR,0
br i1%cS,label%cZ,label%cT
cT:
%cU=bitcast i8*%cM to i8**
store i8*null,i8**%c,align 8
%cV=sext i32%Z to i64
%cW=getelementptr inbounds i8,i8*%cN,i64%cV
%cX=bitcast i8*%cW to i8**
%cY=load i8*,i8**%cX,align 8
br label%df
cZ:
%c0=getelementptr inbounds i8,i8*%cM,i64 44
%c1=bitcast i8*%c0 to i32*
%c2=load i32,i32*%c1,align 4
%c3=call i8*@sml_alloc(i32 inreg%c2)#0
%c4=getelementptr inbounds i8,i8*%c3,i64 -4
%c5=bitcast i8*%c4 to i32*
store i32%c2,i32*%c5,align 4
%c6=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%c7=sext i32%Z to i64
%c8=getelementptr inbounds i8,i8*%c6,i64%c7
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%c3,i8*%c8,i32%c2,i1 false)
%c9=bitcast i8**%h to i8***
%da=load i8**,i8***%c9,align 8
%db=bitcast i8**%da to i8*
%dc=getelementptr inbounds i8*,i8**%da,i64 5
%dd=bitcast i8**%dc to i32*
%de=load i32,i32*%dd,align 4
br label%df
df:
%dg=phi i32[%de,%cZ],[%cR,%cT]
%dh=phi i8*[%db,%cZ],[%cM,%cT]
%di=phi i8**[%da,%cZ],[%cU,%cT]
%dj=phi i8*[%c3,%cZ],[%cY,%cT]
store i8*%dj,i8**%c,align 8
%dk=load i8*,i8**%di,align 8
%dl=getelementptr inbounds i8,i8*%dk,i64 16
%dm=bitcast i8*%dl to i8*(i8*,i8*)**
%dn=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%dm,align 8
%do=bitcast i8*%dk to i8**
%dp=load i8*,i8**%do,align 8
store i8*%dp,i8**%j,align 8
%dq=getelementptr inbounds i8,i8*%dh,i64 36
%dr=bitcast i8*%dq to i32*
%ds=load i32,i32*%dr,align 4
%dt=getelementptr inbounds i8,i8*%dh,i64 32
%du=bitcast i8*%dt to i32*
%dv=load i32,i32*%du,align 4
%dw=getelementptr inbounds i8,i8*%dh,i64 44
%dx=bitcast i8*%dw to i32*
%dy=load i32,i32*%dx,align 4
%dz=call i8*@sml_alloc(i32 inreg%al)#0
%dA=or i32%ac,1342177280
%dB=getelementptr inbounds i8,i8*%dz,i64 -4
%dC=bitcast i8*%dB to i32*
store i32%dA,i32*%dC,align 4
store i8*%dz,i8**%i,align 8
call void@llvm.memset.p0i8.i32(i8*%dz,i8 0,i32%al,i1 false)
%dD=icmp eq i32%dv,0
%dE=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%dF=sext i32%w to i64
%dG=getelementptr inbounds i8,i8*%dz,i64%dF
br i1%dD,label%dJ,label%dH
dH:
%dI=bitcast i8*%dG to i8**
store i8*%dE,i8**%dI,align 8
br label%dK
dJ:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dG,i8*%dE,i32%ds,i1 false)
br label%dK
dK:
%dL=icmp eq i32%dg,0
%dM=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%dN=sext i32%Z to i64
%dO=getelementptr inbounds i8,i8*%dz,i64%dN
br i1%dL,label%dR,label%dP
dP:
%dQ=bitcast i8*%dO to i8**
store i8*%dM,i8**%dQ,align 8
br label%dS
dR:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dO,i8*%dM,i32%dy,i1 false)
br label%dS
dS:
%dT=sext i32%ac to i64
%dU=getelementptr inbounds i8,i8*%dz,i64%dT
%dV=bitcast i8*%dU to i32*
store i32%ak,i32*%dV,align 4
%dW=load i8*,i8**%h,align 8
%dX=getelementptr inbounds i8,i8*%dW,i64 36
%dY=bitcast i8*%dX to i32*
%dZ=load i32,i32*%dY,align 4
%d0=getelementptr inbounds i8,i8*%dW,i64 32
%d1=bitcast i8*%d0 to i32*
%d2=load i32,i32*%d1,align 4
%d3=getelementptr inbounds i8,i8*%dW,i64 52
%d4=bitcast i8*%d3 to i32*
%d5=load i32,i32*%d4,align 4
%d6=getelementptr inbounds i8,i8*%dW,i64 48
%d7=bitcast i8*%d6 to i32*
%d8=load i32,i32*%d7,align 4
%d9=call i8*@sml_alloc(i32 inreg%at)#0
%ea=or i32%H,1342177280
%eb=getelementptr inbounds i8,i8*%d9,i64 -4
%ec=bitcast i8*%eb to i32*
store i32%ea,i32*%ec,align 4
store i8*%d9,i8**%c,align 8
call void@llvm.memset.p0i8.i32(i8*%d9,i8 0,i32%at,i1 false)
%ed=icmp eq i32%d2,0
%ee=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ef=getelementptr inbounds i8,i8*%d9,i64%dF
br i1%ed,label%ei,label%eg
eg:
%eh=bitcast i8*%ef to i8**
store i8*%ee,i8**%eh,align 8
br label%ej
ei:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ef,i8*%ee,i32%dZ,i1 false)
br label%ej
ej:
%ek=icmp eq i32%d8,0
%el=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%em=sext i32%E to i64
%en=getelementptr inbounds i8,i8*%d9,i64%em
br i1%ek,label%eq,label%eo
eo:
%ep=bitcast i8*%en to i8**
store i8*%el,i8**%ep,align 8
br label%er
eq:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%en,i8*%el,i32%d5,i1 false)
br label%er
er:
%es=getelementptr inbounds i8,i8*%d9,i64%by
%et=bitcast i8*%es to i32*
store i32%as,i32*%et,align 4
%eu=call i8*@sml_alloc(i32 inreg 20)#0
%ev=getelementptr inbounds i8,i8*%eu,i64 -4
%ew=bitcast i8*%ev to i32*
store i32 1342177296,i32*%ew,align 4
%ex=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%ey=bitcast i8*%eu to i8**
store i8*%ex,i8**%ey,align 8
%ez=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%eA=getelementptr inbounds i8,i8*%eu,i64 8
%eB=bitcast i8*%eA to i8**
store i8*%ez,i8**%eB,align 8
%eC=getelementptr inbounds i8,i8*%eu,i64 16
%eD=bitcast i8*%eC to i32*
store i32 3,i32*%eD,align 4
%eE=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%eF=call fastcc i8*%dn(i8*inreg%eE,i8*inreg%eu)
store i8*%eF,i8**%d,align 8
%eG=load i8*,i8**%h,align 8
%eH=getelementptr inbounds i8,i8*%eG,i64 32
%eI=bitcast i8*%eH to i32*
%eJ=load i32,i32*%eI,align 4
%eK=icmp eq i32%eJ,0
br i1%eK,label%eP,label%eL
eL:
%eM=getelementptr inbounds i8,i8*%eF,i64%dF
%eN=bitcast i8*%eM to i8**
%eO=load i8*,i8**%eN,align 8
br label%eZ
eP:
%eQ=getelementptr inbounds i8,i8*%eG,i64 36
%eR=bitcast i8*%eQ to i32*
%eS=load i32,i32*%eR,align 4
%eT=call i8*@sml_alloc(i32 inreg%eS)#0
%eU=getelementptr inbounds i8,i8*%eT,i64 -4
%eV=bitcast i8*%eU to i32*
store i32%eS,i32*%eV,align 4
%eW=load i8*,i8**%d,align 8
%eX=getelementptr inbounds i8,i8*%eW,i64%dF
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%eT,i8*%eX,i32%eS,i1 false)
%eY=load i8*,i8**%h,align 8
br label%eZ
eZ:
%e0=phi i8*[%eW,%eP],[%eF,%eL]
%e1=phi i8*[%eY,%eP],[%eG,%eL]
%e2=phi i8*[%eT,%eP],[%eO,%eL]
store i8*%e2,i8**%c,align 8
%e3=getelementptr inbounds i8,i8*%e1,i64 56
%e4=bitcast i8*%e3 to i32*
%e5=load i32,i32*%e4,align 4
%e6=icmp eq i32%e5,0
br i1%e6,label%fc,label%e7
e7:
store i8*null,i8**%d,align 8
%e8=sext i32%az to i64
%e9=getelementptr inbounds i8,i8*%e0,i64%e8
%fa=bitcast i8*%e9 to i8**
%fb=load i8*,i8**%fa,align 8
br label%fq
fc:
%fd=getelementptr inbounds i8,i8*%e1,i64 60
%fe=bitcast i8*%fd to i32*
%ff=load i32,i32*%fe,align 4
%fg=call i8*@sml_alloc(i32 inreg%ff)#0
%fh=getelementptr inbounds i8,i8*%fg,i64 -4
%fi=bitcast i8*%fh to i32*
store i32%ff,i32*%fi,align 4
%fj=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%fk=sext i32%az to i64
%fl=getelementptr inbounds i8,i8*%fj,i64%fk
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%fg,i8*%fl,i32%ff,i1 false)
%fm=load i8*,i8**%h,align 8
%fn=getelementptr inbounds i8,i8*%fm,i64 56
%fo=bitcast i8*%fn to i32*
%fp=load i32,i32*%fo,align 4
br label%fq
fq:
%fr=phi i32[%fp,%fc],[%e5,%e7]
%fs=phi i8*[%fm,%fc],[%e1,%e7]
%ft=phi i8*[%fg,%fc],[%fb,%e7]
store i8*%ft,i8**%d,align 8
%fu=getelementptr inbounds i8,i8*%fs,i64 16
%fv=bitcast i8*%fu to i8**
%fw=load i8*,i8**%fv,align 8
%fx=getelementptr inbounds i8,i8*%fs,i64 60
%fy=bitcast i8*%fx to i32*
%fz=load i32,i32*%fy,align 4
%fA=call fastcc i8*@_SMLL6insert_334(i8*inreg%fw,i32 inreg%fr,i32 inreg%fz)
%fB=getelementptr inbounds i8,i8*%fA,i64 16
%fC=bitcast i8*%fB to i8*(i8*,i8*)**
%fD=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%fC,align 8
%fE=bitcast i8*%fA to i8**
%fF=load i8*,i8**%fE,align 8
store i8*%fF,i8**%e,align 8
%fG=load i8*,i8**%h,align 8
%fH=getelementptr inbounds i8,i8*%fG,i64 36
%fI=bitcast i8*%fH to i32*
%fJ=load i32,i32*%fI,align 4
%fK=getelementptr inbounds i8,i8*%fG,i64 32
%fL=bitcast i8*%fK to i32*
%fM=load i32,i32*%fL,align 4
%fN=getelementptr inbounds i8,i8*%fG,i64 60
%fO=bitcast i8*%fN to i32*
%fP=load i32,i32*%fO,align 4
store i8*null,i8**%h,align 8
%fQ=getelementptr inbounds i8,i8*%fG,i64 56
%fR=bitcast i8*%fQ to i32*
%fS=load i32,i32*%fR,align 4
%fT=call i8*@sml_alloc(i32 inreg%aP)#0
%fU=or i32%aF,1342177280
%fV=getelementptr inbounds i8,i8*%fT,i64 -4
%fW=bitcast i8*%fV to i32*
store i32%fU,i32*%fW,align 4
call void@llvm.memset.p0i8.i32(i8*%fT,i8 0,i32%aP,i1 false)
%fX=load i8*,i8**%f,align 8
%fY=bitcast i8*%fT to i8**
store i8*%fX,i8**%fY,align 8
%fZ=icmp eq i32%fM,0
%f0=load i8*,i8**%c,align 8
%f1=getelementptr inbounds i8,i8*%fT,i64%b9
br i1%fZ,label%f4,label%f2
f2:
%f3=bitcast i8*%f1 to i8**
store i8*%f0,i8**%f3,align 8
br label%f5
f4:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%f1,i8*%f0,i32%fJ,i1 false)
br label%f5
f5:
%f6=icmp eq i32%fS,0
%f7=load i8*,i8**%d,align 8
%f8=sext i32%aC to i64
%f9=getelementptr inbounds i8,i8*%fT,i64%f8
br i1%f6,label%gc,label%ga
ga:
%gb=bitcast i8*%f9 to i8**
store i8*%f7,i8**%gb,align 8
br label%gd
gc:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%f9,i8*%f7,i32%fP,i1 false)
br label%gd
gd:
%ge=sext i32%aF to i64
%gf=getelementptr inbounds i8,i8*%fT,i64%ge
%gg=bitcast i8*%gf to i32*
store i32%aO,i32*%gg,align 4
%gh=load i8*,i8**%e,align 8
%gi=tail call fastcc i8*%fD(i8*inreg%gh,i8*inreg%fT)
ret i8*%gi
}
define internal fastcc i8*@_SMLL9intersect_472(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%j=load atomic i32,i32*@sml_check_flag unordered,align 4
%k=icmp eq i32%j,0
br i1%k,label%l,label%o
l:
%m=bitcast i8*%a to i8**
%n=bitcast i8*%b to i8**
br label%u
o:
call void@sml_check(i32 inreg%j)
%p=bitcast i8**%c to i8***
%q=load i8**,i8***%p,align 8
%r=bitcast i8**%e to i8***
%s=load i8**,i8***%r,align 8
%t=bitcast i8**%s to i8*
br label%u
u:
%v=phi i8*[%t,%o],[%a,%l]
%w=phi i8**[%s,%o],[%m,%l]
%x=phi i8**[%q,%o],[%n,%l]
%y=load i8*,i8**%x,align 8
store i8*%y,i8**%d,align 8
%z=load i8*,i8**%w,align 8
store i8*%z,i8**%f,align 8
%A=getelementptr inbounds i8*,i8**%w,i64 1
%B=load i8*,i8**%A,align 8
store i8*%B,i8**%g,align 8
%C=getelementptr inbounds i8*,i8**%w,i64 2
%D=load i8*,i8**%C,align 8
store i8*%D,i8**%h,align 8
%E=getelementptr inbounds i8,i8*%v,i64 32
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
%H=getelementptr inbounds i8,i8*%v,i64 36
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
%K=getelementptr inbounds i8,i8*%v,i64 40
%L=bitcast i8*%K to i32*
%M=load i32,i32*%L,align 4
%N=getelementptr inbounds i8,i8*%v,i64 44
%O=bitcast i8*%N to i32*
%P=load i32,i32*%O,align 4
%Q=getelementptr inbounds i8,i8*%v,i64 48
%R=bitcast i8*%Q to i32*
%S=load i32,i32*%R,align 4
%T=getelementptr inbounds i8,i8*%v,i64 52
%U=bitcast i8*%T to i32*
%V=load i32,i32*%U,align 4
%W=getelementptr inbounds i8,i8*%v,i64 56
%X=bitcast i8*%W to i32*
%Y=load i32,i32*%X,align 4
%Z=getelementptr inbounds i8,i8*%v,i64 60
%aa=bitcast i8*%Z to i32*
%ab=load i32,i32*%aa,align 4
%ac=call i8*@sml_alloc(i32 inreg 68)#0
%ad=getelementptr inbounds i8,i8*%ac,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 1342177344,i32*%ae,align 4
store i8*%ac,i8**%i,align 8
%af=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%ag=bitcast i8*%ac to i8**
store i8*%af,i8**%ag,align 8
%ah=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ai=getelementptr inbounds i8,i8*%ac,i64 8
%aj=bitcast i8*%ai to i8**
store i8*%ah,i8**%aj,align 8
%ak=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%al=getelementptr inbounds i8,i8*%ac,i64 16
%am=bitcast i8*%al to i8**
store i8*%ak,i8**%am,align 8
%an=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%ao=getelementptr inbounds i8,i8*%ac,i64 24
%ap=bitcast i8*%ao to i8**
store i8*%an,i8**%ap,align 8
%aq=getelementptr inbounds i8,i8*%ac,i64 32
%ar=bitcast i8*%aq to i32*
store i32%G,i32*%ar,align 4
%as=getelementptr inbounds i8,i8*%ac,i64 36
%at=bitcast i8*%as to i32*
store i32%J,i32*%at,align 4
%au=getelementptr inbounds i8,i8*%ac,i64 40
%av=bitcast i8*%au to i32*
store i32%M,i32*%av,align 4
%aw=getelementptr inbounds i8,i8*%ac,i64 44
%ax=bitcast i8*%aw to i32*
store i32%P,i32*%ax,align 4
%ay=getelementptr inbounds i8,i8*%ac,i64 48
%az=bitcast i8*%ay to i32*
store i32%S,i32*%az,align 4
%aA=getelementptr inbounds i8,i8*%ac,i64 52
%aB=bitcast i8*%aA to i32*
store i32%V,i32*%aB,align 4
%aC=getelementptr inbounds i8,i8*%ac,i64 56
%aD=bitcast i8*%aC to i32*
store i32%Y,i32*%aD,align 4
%aE=getelementptr inbounds i8,i8*%ac,i64 60
%aF=bitcast i8*%aE to i32*
store i32%ab,i32*%aF,align 4
%aG=getelementptr inbounds i8,i8*%ac,i64 64
%aH=bitcast i8*%aG to i32*
store i32 15,i32*%aH,align 4
%aI=call i8*@sml_alloc(i32 inreg 28)#0
%aJ=getelementptr inbounds i8,i8*%aI,i64 -4
%aK=bitcast i8*%aJ to i32*
store i32 1342177304,i32*%aK,align 4
store i8*%aI,i8**%d,align 8
%aL=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%aM=bitcast i8*%aI to i8**
store i8*%aL,i8**%aM,align 8
%aN=getelementptr inbounds i8,i8*%aI,i64 8
%aO=bitcast i8*%aN to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3ins_471 to void(...)*),void(...)**%aO,align 8
%aP=getelementptr inbounds i8,i8*%aI,i64 16
%aQ=bitcast i8*%aP to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL3ins_471 to void(...)*),void(...)**%aQ,align 8
%aR=getelementptr inbounds i8,i8*%aI,i64 24
%aS=bitcast i8*%aR to i32*
store i32 -2147483647,i32*%aS,align 4
%aT=load i8*,i8**%e,align 8
%aU=getelementptr inbounds i8,i8*%aT,i64 24
%aV=bitcast i8*%aU to i8**
%aW=load i8*,i8**%aV,align 8
%aX=getelementptr inbounds i8,i8*%aT,i64 48
%aY=bitcast i8*%aX to i32*
%aZ=load i32,i32*%aY,align 4
%a0=getelementptr inbounds i8,i8*%aT,i64 52
%a1=bitcast i8*%a0 to i32*
%a2=load i32,i32*%a1,align 4
%a3=call fastcc i8*@_SMLL6foldli_411(i8*inreg%aW,i32 inreg%aZ,i32 inreg%a2,i32 inreg 1,i32 inreg 8)
%a4=getelementptr inbounds i8,i8*%a3,i64 16
%a5=bitcast i8*%a4 to i8*(i8*,i8*)**
%a6=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a5,align 8
%a7=bitcast i8*%a3 to i8**
%a8=load i8*,i8**%a7,align 8
%a9=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ba=call fastcc i8*%a6(i8*inreg%a8,i8*inreg%a9)
%bb=getelementptr inbounds i8,i8*%ba,i64 16
%bc=bitcast i8*%bb to i8*(i8*,i8*)**
%bd=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bc,align 8
%be=bitcast i8*%ba to i8**
%bf=load i8*,i8**%be,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%d,align 8
%bg=call fastcc i8*%bd(i8*inreg%bf,i8*inreg null)
%bh=getelementptr inbounds i8,i8*%bg,i64 16
%bi=bitcast i8*%bh to i8*(i8*,i8*)**
%bj=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bi,align 8
%bk=bitcast i8*%bg to i8**
%bl=load i8*,i8**%bk,align 8
%bm=load i8*,i8**%c,align 8
%bn=getelementptr inbounds i8,i8*%bm,i64 8
%bo=bitcast i8*%bn to i8**
%bp=load i8*,i8**%bo,align 8
%bq=tail call fastcc i8*%bj(i8*inreg%bl,i8*inreg%bp)
ret i8*%bq
}
define internal fastcc i8*@_SMLL9intersect_473(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%b,i8**%c,align 8
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%d,align 8
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
store i8*%l,i8**%e,align 8
%m=getelementptr inbounds i8,i8*%a,i64 16
%n=bitcast i8*%m to i8**
%o=load i8*,i8**%n,align 8
store i8*%o,i8**%f,align 8
%p=getelementptr inbounds i8,i8*%a,i64 24
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=getelementptr inbounds i8,i8*%a,i64 28
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=getelementptr inbounds i8,i8*%a,i64 32
%w=bitcast i8*%v to i32*
%x=load i32,i32*%w,align 4
%y=getelementptr inbounds i8,i8*%a,i64 36
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=getelementptr inbounds i8,i8*%a,i64 40
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=getelementptr inbounds i8,i8*%a,i64 44
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
%H=getelementptr inbounds i8,i8*%a,i64 48
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
%K=getelementptr inbounds i8,i8*%a,i64 52
%L=bitcast i8*%K to i32*
%M=load i32,i32*%L,align 4
%N=call i8*@sml_alloc(i32 inreg 68)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32 1342177344,i32*%P,align 4
store i8*%N,i8**%g,align 8
%Q=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%R=bitcast i8*%N to i8**
store i8*%Q,i8**%R,align 8
%S=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%T=getelementptr inbounds i8,i8*%N,i64 8
%U=bitcast i8*%T to i8**
store i8*%S,i8**%U,align 8
%V=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%W=getelementptr inbounds i8,i8*%N,i64 16
%X=bitcast i8*%W to i8**
store i8*%V,i8**%X,align 8
%Y=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%Z=getelementptr inbounds i8,i8*%N,i64 24
%aa=bitcast i8*%Z to i8**
store i8*%Y,i8**%aa,align 8
%ab=getelementptr inbounds i8,i8*%N,i64 32
%ac=bitcast i8*%ab to i32*
store i32%r,i32*%ac,align 4
%ad=getelementptr inbounds i8,i8*%N,i64 36
%ae=bitcast i8*%ad to i32*
store i32%u,i32*%ae,align 4
%af=getelementptr inbounds i8,i8*%N,i64 40
%ag=bitcast i8*%af to i32*
store i32%x,i32*%ag,align 4
%ah=getelementptr inbounds i8,i8*%N,i64 44
%ai=bitcast i8*%ah to i32*
store i32%A,i32*%ai,align 4
%aj=getelementptr inbounds i8,i8*%N,i64 48
%ak=bitcast i8*%aj to i32*
store i32%D,i32*%ak,align 4
%al=getelementptr inbounds i8,i8*%N,i64 52
%am=bitcast i8*%al to i32*
store i32%G,i32*%am,align 4
%an=getelementptr inbounds i8,i8*%N,i64 56
%ao=bitcast i8*%an to i32*
store i32%J,i32*%ao,align 4
%ap=getelementptr inbounds i8,i8*%N,i64 60
%aq=bitcast i8*%ap to i32*
store i32%M,i32*%aq,align 4
%ar=getelementptr inbounds i8,i8*%N,i64 64
%as=bitcast i8*%ar to i32*
store i32 15,i32*%as,align 4
%at=call i8*@sml_alloc(i32 inreg 28)#0
%au=getelementptr inbounds i8,i8*%at,i64 -4
%av=bitcast i8*%au to i32*
store i32 1342177304,i32*%av,align 4
%aw=load i8*,i8**%g,align 8
%ax=bitcast i8*%at to i8**
store i8*%aw,i8**%ax,align 8
%ay=getelementptr inbounds i8,i8*%at,i64 8
%az=bitcast i8*%ay to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL9intersect_472 to void(...)*),void(...)**%az,align 8
%aA=getelementptr inbounds i8,i8*%at,i64 16
%aB=bitcast i8*%aA to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL9intersect_472 to void(...)*),void(...)**%aB,align 8
%aC=getelementptr inbounds i8,i8*%at,i64 24
%aD=bitcast i8*%aC to i32*
store i32 -2147483647,i32*%aD,align 4
ret i8*%at
}
define internal fastcc i8*@_SMLL9intersect_474(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e,i32 inreg%f,i32 inreg%g)#4 gc"smlsharp"{
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
%k=alloca i8*,align 8
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
call void@llvm.gcroot(i8**%k,i8*null)#0
%l=bitcast i8*%a to i8**
%m=load i8*,i8**%l,align 8
store i8*%m,i8**%h,align 8
%n=getelementptr inbounds i8,i8*%a,i64 8
%o=bitcast i8*%n to i8**
%p=load i8*,i8**%o,align 8
store i8*%p,i8**%i,align 8
%q=getelementptr inbounds i8,i8*%a,i64 16
%r=bitcast i8*%q to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%j,align 8
%t=getelementptr inbounds i8,i8*%a,i64 24
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=getelementptr inbounds i8,i8*%a,i64 28
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=call i8*@sml_alloc(i32 inreg 60)#0
%A=getelementptr inbounds i8,i8*%z,i64 -4
%B=bitcast i8*%A to i32*
store i32 1342177336,i32*%B,align 4
store i8*%z,i8**%k,align 8
%C=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%D=bitcast i8*%z to i8**
store i8*%C,i8**%D,align 8
%E=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%F=getelementptr inbounds i8,i8*%z,i64 8
%G=bitcast i8*%F to i8**
store i8*%E,i8**%G,align 8
%H=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%I=getelementptr inbounds i8,i8*%z,i64 16
%J=bitcast i8*%I to i8**
store i8*%H,i8**%J,align 8
%K=getelementptr inbounds i8,i8*%z,i64 24
%L=bitcast i8*%K to i32*
store i32%v,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%z,i64 28
%N=bitcast i8*%M to i32*
store i32%y,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%z,i64 32
%P=bitcast i8*%O to i32*
store i32%b,i32*%P,align 4
%Q=getelementptr inbounds i8,i8*%z,i64 36
%R=bitcast i8*%Q to i32*
store i32%c,i32*%R,align 4
%S=getelementptr inbounds i8,i8*%z,i64 40
%T=bitcast i8*%S to i32*
store i32%d,i32*%T,align 4
%U=getelementptr inbounds i8,i8*%z,i64 44
%V=bitcast i8*%U to i32*
store i32%e,i32*%V,align 4
%W=getelementptr inbounds i8,i8*%z,i64 48
%X=bitcast i8*%W to i32*
store i32%f,i32*%X,align 4
%Y=getelementptr inbounds i8,i8*%z,i64 52
%Z=bitcast i8*%Y to i32*
store i32%g,i32*%Z,align 4
%aa=getelementptr inbounds i8,i8*%z,i64 56
%ab=bitcast i8*%aa to i32*
store i32 7,i32*%ab,align 4
%ac=call i8*@sml_alloc(i32 inreg 28)#0
%ad=getelementptr inbounds i8,i8*%ac,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 1342177304,i32*%ae,align 4
%af=load i8*,i8**%k,align 8
%ag=bitcast i8*%ac to i8**
store i8*%af,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%ac,i64 8
%ai=bitcast i8*%ah to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL9intersect_473 to void(...)*),void(...)**%ai,align 8
%aj=getelementptr inbounds i8,i8*%ac,i64 16
%ak=bitcast i8*%aj to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL9intersect_473 to void(...)*),void(...)**%ak,align 8
%al=getelementptr inbounds i8,i8*%ac,i64 24
%am=bitcast i8*%al to i32*
store i32 -2147483647,i32*%am,align 4
ret i8*%ac
}
define internal fastcc i8*@_SMLL15intersectWithi2_475(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%h,label%j
h:
%i=bitcast i8*%a to i8**
br label%n
j:
call void@sml_check(i32 inreg%f)
%k=load i8*,i8**%c,align 8
%l=bitcast i8**%e to i8***
%m=load i8**,i8***%l,align 8
br label%n
n:
%o=phi i8**[%m,%j],[%i,%h]
%p=phi i8*[%k,%j],[%b,%h]
%q=bitcast i8*%p to i8**
%r=load i8*,i8**%q,align 8
store i8*%r,i8**%c,align 8
%s=getelementptr inbounds i8,i8*%p,i64 8
%t=bitcast i8*%s to i8**
%u=load i8*,i8**%t,align 8
store i8*%u,i8**%d,align 8
%v=load i8*,i8**%o,align 8
%w=getelementptr inbounds i8,i8*%v,i64 16
%x=bitcast i8*%w to i8*(i8*,i8*)**
%y=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%x,align 8
%z=bitcast i8*%v to i8**
%A=load i8*,i8**%z,align 8
store i8*%A,i8**%e,align 8
%B=call i8*@sml_alloc(i32 inreg 20)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177296,i32*%D,align 4
%E=load i8*,i8**%d,align 8
%F=bitcast i8*%B to i8**
store i8*%E,i8**%F,align 8
%G=load i8*,i8**%c,align 8
%H=getelementptr inbounds i8,i8*%B,i64 8
%I=bitcast i8*%H to i8**
store i8*%G,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%B,i64 16
%K=bitcast i8*%J to i32*
store i32 3,i32*%K,align 4
%L=load i8*,i8**%e,align 8
%M=tail call fastcc i8*%y(i8*inreg%L,i8*inreg%B)
ret i8*%M
}
define internal fastcc i8*@_SMLL15intersectWithi2_476(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
q:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%j=load atomic i32,i32*@sml_check_flag unordered,align 4
%k=icmp eq i32%j,0
br i1%k,label%o,label%l
l:
call void@sml_check(i32 inreg%j)
%m=load i8*,i8**%c,align 8
%n=load i8*,i8**%e,align 8
br label%o
o:
%p=phi i8*[%n,%l],[%a,%q]
%r=phi i8*[%m,%l],[%b,%q]
%s=bitcast i8*%r to i8**
%t=load i8*,i8**%s,align 8
store i8*%t,i8**%c,align 8
%u=getelementptr inbounds i8,i8*%r,i64 8
%v=bitcast i8*%u to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%d,align 8
%x=getelementptr inbounds i8,i8*%p,i64 8
%y=bitcast i8*%x to i8**
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%f,align 8
%A=getelementptr inbounds i8,i8*%p,i64 16
%B=bitcast i8*%A to i8**
%C=load i8*,i8**%B,align 8
store i8*%C,i8**%g,align 8
%D=getelementptr inbounds i8,i8*%p,i64 24
%E=bitcast i8*%D to i8**
%F=load i8*,i8**%E,align 8
store i8*%F,i8**%h,align 8
%G=getelementptr inbounds i8,i8*%p,i64 32
%H=bitcast i8*%G to i32*
%I=load i32,i32*%H,align 4
%J=getelementptr inbounds i8,i8*%p,i64 36
%K=bitcast i8*%J to i32*
%L=load i32,i32*%K,align 4
%M=call i8*@sml_alloc(i32 inreg 36)#0
%N=getelementptr inbounds i8,i8*%M,i64 -4
%O=bitcast i8*%N to i32*
store i32 1342177312,i32*%O,align 4
store i8*%M,i8**%i,align 8
%P=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%Q=bitcast i8*%M to i8**
store i8*%P,i8**%Q,align 8
%R=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%S=getelementptr inbounds i8,i8*%M,i64 8
%T=bitcast i8*%S to i8**
store i8*%R,i8**%T,align 8
%U=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%V=getelementptr inbounds i8,i8*%M,i64 16
%W=bitcast i8*%V to i8**
store i8*%U,i8**%W,align 8
%X=getelementptr inbounds i8,i8*%M,i64 24
%Y=bitcast i8*%X to i32*
store i32%I,i32*%Y,align 4
%Z=getelementptr inbounds i8,i8*%M,i64 28
%aa=bitcast i8*%Z to i32*
store i32%L,i32*%aa,align 4
%ab=getelementptr inbounds i8,i8*%M,i64 32
%ac=bitcast i8*%ab to i32*
store i32 7,i32*%ac,align 4
%ad=call i8*@sml_alloc(i32 inreg 28)#0
%ae=getelementptr inbounds i8,i8*%ad,i64 -4
%af=bitcast i8*%ae to i32*
store i32 1342177304,i32*%af,align 4
%ag=load i8*,i8**%i,align 8
%ah=bitcast i8*%ad to i8**
store i8*%ag,i8**%ah,align 8
%ai=getelementptr inbounds i8,i8*%ad,i64 8
%aj=bitcast i8*%ai to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32,i32,i32)*@_SMLL9intersect_474 to void(...)*),void(...)**%aj,align 8
%ak=getelementptr inbounds i8,i8*%ad,i64 16
%al=bitcast i8*%ak to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*,i8*,i8*)*@_SMLL9intersect_704 to void(...)*),void(...)**%al,align 8
%am=getelementptr inbounds i8,i8*%ad,i64 24
%an=bitcast i8*%am to i32*
store i32 -2147483647,i32*%an,align 4
%ao=load i8*,i8**%c,align 8
%ap=icmp eq i8*%ao,null
br i1%ap,label%at,label%aq
aq:
%ar=bitcast i8*%ao to i32*
%as=load i32,i32*%ar,align 4
br label%at
at:
%au=phi i32[%as,%aq],[0,%o]
%av=load i8*,i8**%d,align 8
%aw=icmp eq i8*%av,null
br i1%aw,label%aA,label%ax
ax:
%ay=bitcast i8*%av to i32*
%az=load i32,i32*%ay,align 4
br label%aA
aA:
%aB=phi i32[%az,%ax],[0,%at]
%aC=icmp sgt i32%au,%aB
%aD=load i8*,i8**%e,align 8
br i1%aC,label%aE,label%bo
aE:
%aF=getelementptr inbounds i8,i8*%aD,i64 40
%aG=bitcast i8*%aF to i32*
%aH=load i32,i32*%aG,align 4
%aI=getelementptr inbounds i8,i8*%aD,i64 44
%aJ=bitcast i8*%aI to i32*
%aK=load i32,i32*%aJ,align 4
%aL=getelementptr inbounds i8,i8*%aD,i64 48
%aM=bitcast i8*%aL to i32*
%aN=load i32,i32*%aM,align 4
%aO=getelementptr inbounds i8,i8*%aD,i64 52
%aP=bitcast i8*%aO to i32*
%aQ=load i32,i32*%aP,align 4
%aR=getelementptr inbounds i8,i8*%aD,i64 56
%aS=bitcast i8*%aR to i32*
%aT=load i32,i32*%aS,align 4
%aU=getelementptr inbounds i8,i8*%aD,i64 60
%aV=bitcast i8*%aU to i32*
%aW=load i32,i32*%aV,align 4
store i8*null,i8**%i,align 8
%aX=call fastcc i8*@_SMLL9intersect_474(i8*inreg%ag,i32 inreg%aH,i32 inreg%aK,i32 inreg%aN,i32 inreg%aQ,i32 inreg%aT,i32 inreg%aW)
%aY=getelementptr inbounds i8,i8*%aX,i64 16
%aZ=bitcast i8*%aY to i8*(i8*,i8*)**
%a0=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aZ,align 8
%a1=bitcast i8*%aX to i8**
%a2=load i8*,i8**%a1,align 8
%a3=bitcast i8**%e to i8***
%a4=load i8**,i8***%a3,align 8
store i8*null,i8**%e,align 8
%a5=load i8*,i8**%a4,align 8
%a6=call fastcc i8*%a0(i8*inreg%a2,i8*inreg%a5)
%a7=getelementptr inbounds i8,i8*%a6,i64 16
%a8=bitcast i8*%a7 to i8*(i8*,i8*)**
%a9=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a8,align 8
%ba=bitcast i8*%a6 to i8**
%bb=load i8*,i8**%ba,align 8
store i8*%bb,i8**%e,align 8
%bc=call i8*@sml_alloc(i32 inreg 20)#0
%bd=getelementptr inbounds i8,i8*%bc,i64 -4
%be=bitcast i8*%bd to i32*
store i32 1342177296,i32*%be,align 4
%bf=load i8*,i8**%c,align 8
%bg=bitcast i8*%bc to i8**
store i8*%bf,i8**%bg,align 8
%bh=load i8*,i8**%d,align 8
%bi=getelementptr inbounds i8,i8*%bc,i64 8
%bj=bitcast i8*%bi to i8**
store i8*%bh,i8**%bj,align 8
%bk=getelementptr inbounds i8,i8*%bc,i64 16
%bl=bitcast i8*%bk to i32*
store i32 3,i32*%bl,align 4
%bm=load i8*,i8**%e,align 8
%bn=tail call fastcc i8*%a9(i8*inreg%bm,i8*inreg%bc)
ret i8*%bn
bo:
%bp=getelementptr inbounds i8,i8*%aD,i64 48
%bq=bitcast i8*%bp to i32*
%br=load i32,i32*%bq,align 4
%bs=getelementptr inbounds i8,i8*%aD,i64 52
%bt=bitcast i8*%bs to i32*
%bu=load i32,i32*%bt,align 4
%bv=getelementptr inbounds i8,i8*%aD,i64 40
%bw=bitcast i8*%bv to i32*
%bx=load i32,i32*%bw,align 4
%by=getelementptr inbounds i8,i8*%aD,i64 44
%bz=bitcast i8*%by to i32*
%bA=load i32,i32*%bz,align 4
%bB=getelementptr inbounds i8,i8*%aD,i64 56
%bC=bitcast i8*%bB to i32*
%bD=load i32,i32*%bC,align 4
%bE=getelementptr inbounds i8,i8*%aD,i64 60
%bF=bitcast i8*%bE to i32*
%bG=load i32,i32*%bF,align 4
store i8*null,i8**%i,align 8
%bH=call fastcc i8*@_SMLL9intersect_474(i8*inreg%ag,i32 inreg%br,i32 inreg%bu,i32 inreg%bx,i32 inreg%bA,i32 inreg%bD,i32 inreg%bG)
%bI=getelementptr inbounds i8,i8*%bH,i64 16
%bJ=bitcast i8*%bI to i8*(i8*,i8*)**
%bK=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bJ,align 8
%bL=bitcast i8*%bH to i8**
%bM=load i8*,i8**%bL,align 8
store i8*%bM,i8**%f,align 8
%bN=bitcast i8**%e to i8***
%bO=load i8**,i8***%bN,align 8
%bP=load i8*,i8**%bO,align 8
store i8*%bP,i8**%e,align 8
%bQ=call i8*@sml_alloc(i32 inreg 12)#0
%bR=getelementptr inbounds i8,i8*%bQ,i64 -4
%bS=bitcast i8*%bR to i32*
store i32 1342177288,i32*%bS,align 4
store i8*%bQ,i8**%g,align 8
%bT=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bU=bitcast i8*%bQ to i8**
store i8*%bT,i8**%bU,align 8
%bV=getelementptr inbounds i8,i8*%bQ,i64 8
%bW=bitcast i8*%bV to i32*
store i32 1,i32*%bW,align 4
%bX=call i8*@sml_alloc(i32 inreg 28)#0
%bY=getelementptr inbounds i8,i8*%bX,i64 -4
%bZ=bitcast i8*%bY to i32*
store i32 1342177304,i32*%bZ,align 4
%b0=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%b1=bitcast i8*%bX to i8**
store i8*%b0,i8**%b1,align 8
%b2=getelementptr inbounds i8,i8*%bX,i64 8
%b3=bitcast i8*%b2 to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL15intersectWithi2_475 to void(...)*),void(...)**%b3,align 8
%b4=getelementptr inbounds i8,i8*%bX,i64 16
%b5=bitcast i8*%b4 to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL15intersectWithi2_475 to void(...)*),void(...)**%b5,align 8
%b6=getelementptr inbounds i8,i8*%bX,i64 24
%b7=bitcast i8*%b6 to i32*
store i32 -2147483647,i32*%b7,align 4
%b8=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%b9=call fastcc i8*%bK(i8*inreg%b8,i8*inreg%bX)
%ca=getelementptr inbounds i8,i8*%b9,i64 16
%cb=bitcast i8*%ca to i8*(i8*,i8*)**
%cc=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%cb,align 8
%cd=bitcast i8*%b9 to i8**
%ce=load i8*,i8**%cd,align 8
store i8*%ce,i8**%e,align 8
%cf=call i8*@sml_alloc(i32 inreg 20)#0
%cg=getelementptr inbounds i8,i8*%cf,i64 -4
%ch=bitcast i8*%cg to i32*
store i32 1342177296,i32*%ch,align 4
%ci=load i8*,i8**%d,align 8
%cj=bitcast i8*%cf to i8**
store i8*%ci,i8**%cj,align 8
%ck=load i8*,i8**%c,align 8
%cl=getelementptr inbounds i8,i8*%cf,i64 8
%cm=bitcast i8*%cl to i8**
store i8*%ck,i8**%cm,align 8
%cn=getelementptr inbounds i8,i8*%cf,i64 16
%co=bitcast i8*%cn to i32*
store i32 3,i32*%co,align 4
%cp=load i8*,i8**%e,align 8
%cq=tail call fastcc i8*%cc(i8*inreg%cp,i8*inreg%cf)
ret i8*%cq
}
define internal fastcc i8*@_SMLL15intersectWithi2_477(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%b,i8**%c,align 8
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%d,align 8
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
store i8*%l,i8**%e,align 8
%m=getelementptr inbounds i8,i8*%a,i64 16
%n=bitcast i8*%m to i8**
%o=load i8*,i8**%n,align 8
store i8*%o,i8**%f,align 8
%p=getelementptr inbounds i8,i8*%a,i64 24
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=getelementptr inbounds i8,i8*%a,i64 28
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=getelementptr inbounds i8,i8*%a,i64 32
%w=bitcast i8*%v to i32*
%x=load i32,i32*%w,align 4
%y=getelementptr inbounds i8,i8*%a,i64 36
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=getelementptr inbounds i8,i8*%a,i64 40
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=getelementptr inbounds i8,i8*%a,i64 44
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
%H=getelementptr inbounds i8,i8*%a,i64 48
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
%K=getelementptr inbounds i8,i8*%a,i64 52
%L=bitcast i8*%K to i32*
%M=load i32,i32*%L,align 4
%N=call i8*@sml_alloc(i32 inreg 68)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32 1342177344,i32*%P,align 4
store i8*%N,i8**%g,align 8
%Q=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%R=bitcast i8*%N to i8**
store i8*%Q,i8**%R,align 8
%S=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%T=getelementptr inbounds i8,i8*%N,i64 8
%U=bitcast i8*%T to i8**
store i8*%S,i8**%U,align 8
%V=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%W=getelementptr inbounds i8,i8*%N,i64 16
%X=bitcast i8*%W to i8**
store i8*%V,i8**%X,align 8
%Y=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%Z=getelementptr inbounds i8,i8*%N,i64 24
%aa=bitcast i8*%Z to i8**
store i8*%Y,i8**%aa,align 8
%ab=getelementptr inbounds i8,i8*%N,i64 32
%ac=bitcast i8*%ab to i32*
store i32%r,i32*%ac,align 4
%ad=getelementptr inbounds i8,i8*%N,i64 36
%ae=bitcast i8*%ad to i32*
store i32%u,i32*%ae,align 4
%af=getelementptr inbounds i8,i8*%N,i64 40
%ag=bitcast i8*%af to i32*
store i32%x,i32*%ag,align 4
%ah=getelementptr inbounds i8,i8*%N,i64 44
%ai=bitcast i8*%ah to i32*
store i32%A,i32*%ai,align 4
%aj=getelementptr inbounds i8,i8*%N,i64 48
%ak=bitcast i8*%aj to i32*
store i32%D,i32*%ak,align 4
%al=getelementptr inbounds i8,i8*%N,i64 52
%am=bitcast i8*%al to i32*
store i32%G,i32*%am,align 4
%an=getelementptr inbounds i8,i8*%N,i64 56
%ao=bitcast i8*%an to i32*
store i32%J,i32*%ao,align 4
%ap=getelementptr inbounds i8,i8*%N,i64 60
%aq=bitcast i8*%ap to i32*
store i32%M,i32*%aq,align 4
%ar=getelementptr inbounds i8,i8*%N,i64 64
%as=bitcast i8*%ar to i32*
store i32 15,i32*%as,align 4
%at=call i8*@sml_alloc(i32 inreg 28)#0
%au=getelementptr inbounds i8,i8*%at,i64 -4
%av=bitcast i8*%au to i32*
store i32 1342177304,i32*%av,align 4
%aw=load i8*,i8**%g,align 8
%ax=bitcast i8*%at to i8**
store i8*%aw,i8**%ax,align 8
%ay=getelementptr inbounds i8,i8*%at,i64 8
%az=bitcast i8*%ay to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL15intersectWithi2_476 to void(...)*),void(...)**%az,align 8
%aA=getelementptr inbounds i8,i8*%at,i64 16
%aB=bitcast i8*%aA to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL15intersectWithi2_476 to void(...)*),void(...)**%aB,align 8
%aC=getelementptr inbounds i8,i8*%at,i64 24
%aD=bitcast i8*%aC to i32*
store i32 -2147483647,i32*%aD,align 4
ret i8*%at
}
define internal fastcc i8*@_SMLL15intersectWithi2_478(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e,i32 inreg%f,i32 inreg%g)#4 gc"smlsharp"{
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
%k=alloca i8*,align 8
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
call void@llvm.gcroot(i8**%k,i8*null)#0
%l=bitcast i8*%a to i8**
%m=load i8*,i8**%l,align 8
store i8*%m,i8**%h,align 8
%n=getelementptr inbounds i8,i8*%a,i64 8
%o=bitcast i8*%n to i8**
%p=load i8*,i8**%o,align 8
store i8*%p,i8**%i,align 8
%q=getelementptr inbounds i8,i8*%a,i64 16
%r=bitcast i8*%q to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%j,align 8
%t=getelementptr inbounds i8,i8*%a,i64 24
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=getelementptr inbounds i8,i8*%a,i64 28
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=call i8*@sml_alloc(i32 inreg 60)#0
%A=getelementptr inbounds i8,i8*%z,i64 -4
%B=bitcast i8*%A to i32*
store i32 1342177336,i32*%B,align 4
store i8*%z,i8**%k,align 8
%C=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%D=bitcast i8*%z to i8**
store i8*%C,i8**%D,align 8
%E=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%F=getelementptr inbounds i8,i8*%z,i64 8
%G=bitcast i8*%F to i8**
store i8*%E,i8**%G,align 8
%H=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%I=getelementptr inbounds i8,i8*%z,i64 16
%J=bitcast i8*%I to i8**
store i8*%H,i8**%J,align 8
%K=getelementptr inbounds i8,i8*%z,i64 24
%L=bitcast i8*%K to i32*
store i32%v,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%z,i64 28
%N=bitcast i8*%M to i32*
store i32%y,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%z,i64 32
%P=bitcast i8*%O to i32*
store i32%b,i32*%P,align 4
%Q=getelementptr inbounds i8,i8*%z,i64 36
%R=bitcast i8*%Q to i32*
store i32%c,i32*%R,align 4
%S=getelementptr inbounds i8,i8*%z,i64 40
%T=bitcast i8*%S to i32*
store i32%d,i32*%T,align 4
%U=getelementptr inbounds i8,i8*%z,i64 44
%V=bitcast i8*%U to i32*
store i32%e,i32*%V,align 4
%W=getelementptr inbounds i8,i8*%z,i64 48
%X=bitcast i8*%W to i32*
store i32%f,i32*%X,align 4
%Y=getelementptr inbounds i8,i8*%z,i64 52
%Z=bitcast i8*%Y to i32*
store i32%g,i32*%Z,align 4
%aa=getelementptr inbounds i8,i8*%z,i64 56
%ab=bitcast i8*%aa to i32*
store i32 7,i32*%ab,align 4
%ac=call i8*@sml_alloc(i32 inreg 28)#0
%ad=getelementptr inbounds i8,i8*%ac,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 1342177304,i32*%ae,align 4
%af=load i8*,i8**%k,align 8
%ag=bitcast i8*%ac to i8**
store i8*%af,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%ac,i64 8
%ai=bitcast i8*%ah to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL15intersectWithi2_477 to void(...)*),void(...)**%ai,align 8
%aj=getelementptr inbounds i8,i8*%ac,i64 16
%ak=bitcast i8*%aj to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL15intersectWithi2_477 to void(...)*),void(...)**%ak,align 8
%al=getelementptr inbounds i8,i8*%ac,i64 24
%am=bitcast i8*%al to i32*
store i32 -2147483647,i32*%am,align 4
ret i8*%ac
}
define internal fastcc i8*@_SMLL5merge_479(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
%k=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
call void@llvm.gcroot(i8**%k,i8*null)#0
store i8*%a,i8**%j,align 8
store i8*%b,i8**%c,align 8
%l=load atomic i32,i32*@sml_check_flag unordered,align 4
%m=icmp eq i32%l,0
br i1%m,label%n,label%p
n:
%o=bitcast i8*%b to i8**
br label%u
p:
call void@sml_check(i32 inreg%l)
%q=bitcast i8**%c to i8***
%r=load i8**,i8***%q,align 8
%s=load i8*,i8**%j,align 8
%t=bitcast i8**%r to i8*
br label%u
u:
%v=phi i8*[%t,%p],[%b,%n]
%w=phi i8*[%s,%p],[%a,%n]
%x=phi i8**[%r,%p],[%o,%n]
%y=getelementptr inbounds i8,i8*%w,i64 28
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=add i32%A,-1
%C=sub i32 0,%A
%D=and i32%B,%C
%E=add i32%D,%A
%F=add i32%E,-1
%G=add i32%F,%A
%H=and i32%G,%C
%I=add i32%A,7
%J=add i32%I,%H
%K=and i32%J,-8
%L=lshr i32%H,3
%M=lshr i32%D,3
%N=sub nsw i32%L,%M
%O=getelementptr inbounds i8,i8*%w,i64 24
%P=bitcast i8*%O to i32*
%Q=load i32,i32*%P,align 4
%R=shl i32%Q,%N
%S=or i32%R,%Q
%T=or i32%K,4
%U=getelementptr inbounds i8,i8*%w,i64 36
%V=bitcast i8*%U to i32*
%W=load i32,i32*%V,align 4
%X=add i32%F,%W
%Y=sub i32 0,%W
%Z=and i32%X,%Y
%aa=add i32%W,-1
%ab=and i32%aa,%Y
%ac=add i32%W,7
%ad=add i32%ac,%ab
%ae=and i32%ad,-8
%af=getelementptr inbounds i8,i8*%w,i64 32
%ag=bitcast i8*%af to i32*
%ah=load i32,i32*%ag,align 4
%ai=or i32%ae,4
%aj=getelementptr inbounds i8,i8*%w,i64 44
%ak=bitcast i8*%aj to i32*
%al=load i32,i32*%ak,align 4
%am=add i32%F,%al
%an=sub i32 0,%al
%ao=and i32%am,%an
%ap=add i32%al,-1
%aq=and i32%ap,%an
%ar=add i32%al,7
%as=add i32%ar,%aq
%at=and i32%as,-8
%au=getelementptr inbounds i8,i8*%w,i64 40
%av=bitcast i8*%au to i32*
%aw=load i32,i32*%av,align 4
%ax=or i32%at,4
%ay=add i32%E,7
%az=and i32%ay,-8
%aA=add i32%az,15
%aB=and i32%aA,-8
%aC=add i32%aB,15
%aD=and i32%aC,-8
%aE=add i32%aD,15
%aF=and i32%aE,-8
%aG=add i32%aF,15
%aH=and i32%aG,-8
%aI=add i32%aH,15
%aJ=and i32%aI,-8
%aK=lshr i32%aG,3
%aL=lshr i32%aE,3
%aM=sub nsw i32%aK,%aL
%aN=lshr i32%aC,3
%aO=sub nsw i32%aL,%aN
%aP=lshr i32%aA,3
%aQ=sub nsw i32%aN,%aP
%aR=lshr i32%ay,3
%aS=sub nsw i32%aP,%aR
%aT=sub nsw i32%aR,%M
%aU=shl i32 1,%aM
%aV=or i32%aU,1
%aW=shl i32%aV,%aO
%aX=or i32%aW,1
%aY=shl i32%aX,%aQ
%aZ=or i32%aY,1
%a0=shl i32%aZ,%aS
%a1=or i32%a0,1
%a2=shl i32%a1,%aT
%a3=or i32%a2,%Q
%a4=or i32%aJ,4
%a5=load i8*,i8**%x,align 8
store i8*%a5,i8**%d,align 8
%a6=icmp eq i8*%a5,null
%a7=bitcast i8*%a5 to i8**
br i1%a6,label%a8,label%de
a8:
%a9=getelementptr inbounds i8,i8*%v,i64 8
%ba=bitcast i8*%a9 to i8**
%bb=load i8*,i8**%ba,align 8
%bc=icmp eq i8*%bb,null
br i1%bc,label%bd,label%bh
bd:
%be=getelementptr inbounds i8,i8*%v,i64 16
%bf=bitcast i8*%be to i8**
%bg=load i8*,i8**%bf,align 8
ret i8*%bg
bh:
store i8*%bb,i8**%f,align 8
%bi=bitcast i8*%bb to i8**
%bj=load i8*,i8**%bi,align 8
store i8*%bj,i8**%d,align 8
%bk=icmp eq i32%Q,0
br i1%bk,label%bq,label%bl
bl:
store i8*null,i8**%d,align 8
%bm=sext i32%D to i64
%bn=getelementptr inbounds i8,i8*%bj,i64%bm
%bo=bitcast i8*%bn to i8**
%bp=load i8*,i8**%bo,align 8
br label%bE
bq:
%br=call i8*@sml_alloc(i32 inreg%A)#0
%bs=getelementptr inbounds i8,i8*%br,i64 -4
%bt=bitcast i8*%bs to i32*
store i32%A,i32*%bt,align 4
%bu=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bv=sext i32%D to i64
%bw=getelementptr inbounds i8,i8*%bu,i64%bv
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%br,i8*%bw,i32%A,i1 false)
%bx=load i8*,i8**%f,align 8
%by=load i8*,i8**%c,align 8
%bz=bitcast i8*%bx to i8**
%bA=load i8*,i8**%j,align 8
%bB=getelementptr inbounds i8,i8*%bA,i64 40
%bC=bitcast i8*%bB to i32*
%bD=load i32,i32*%bC,align 4
br label%bE
bE:
%bF=phi i32[%bD,%bq],[%aw,%bl]
%bG=phi i8*[%bA,%bq],[%w,%bl]
%bH=phi i8**[%bz,%bq],[%bi,%bl]
%bI=phi i8*[%by,%bq],[%v,%bl]
%bJ=phi i8*[%bx,%bq],[%bb,%bl]
%bK=phi i8*[%br,%bq],[%bp,%bl]
store i8*%bK,i8**%d,align 8
%bL=getelementptr inbounds i8,i8*%bJ,i64 8
%bM=bitcast i8*%bL to i8**
%bN=load i8*,i8**%bM,align 8
store i8*%bN,i8**%e,align 8
%bO=getelementptr inbounds i8,i8*%bI,i64 16
%bP=bitcast i8*%bO to i8**
%bQ=load i8*,i8**%bP,align 8
store i8*%bQ,i8**%c,align 8
%bR=load i8*,i8**%bH,align 8
store i8*%bR,i8**%f,align 8
%bS=icmp eq i32%bF,0
br i1%bS,label%bY,label%bT
bT:
store i8*null,i8**%f,align 8
%bU=sext i32%ao to i64
%bV=getelementptr inbounds i8,i8*%bR,i64%bU
%bW=bitcast i8*%bV to i8**
%bX=load i8*,i8**%bW,align 8
br label%cc
bY:
%bZ=getelementptr inbounds i8,i8*%bG,i64 44
%b0=bitcast i8*%bZ to i32*
%b1=load i32,i32*%b0,align 4
%b2=call i8*@sml_alloc(i32 inreg%b1)#0
%b3=getelementptr inbounds i8,i8*%b2,i64 -4
%b4=bitcast i8*%b3 to i32*
store i32%b1,i32*%b4,align 4
%b5=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%b6=sext i32%ao to i64
%b7=getelementptr inbounds i8,i8*%b5,i64%b6
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%b2,i8*%b7,i32%b1,i1 false)
%b8=load i8*,i8**%j,align 8
%b9=getelementptr inbounds i8,i8*%b8,i64 40
%ca=bitcast i8*%b9 to i32*
%cb=load i32,i32*%ca,align 4
br label%cc
cc:
%cd=phi i32[%cb,%bY],[%bF,%bT]
%ce=phi i8*[%b8,%bY],[%bG,%bT]
%cf=phi i8*[%b2,%bY],[%bX,%bT]
store i8*%cf,i8**%f,align 8
%cg=getelementptr inbounds i8,i8*%ce,i64 44
%ch=bitcast i8*%cg to i32*
%ci=load i32,i32*%ch,align 4
%cj=call i8*@sml_alloc(i32 inreg%ax)#0
%ck=or i32%at,1342177280
%cl=getelementptr inbounds i8,i8*%cj,i64 -4
%cm=bitcast i8*%cl to i32*
store i32%ck,i32*%cm,align 4
store i8*%cj,i8**%g,align 8
call void@llvm.memset.p0i8.i32(i8*%cj,i8 0,i32%ax,i1 false)
%cn=icmp eq i32%cd,0
%co=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%cp=sext i32%aq to i64
%cq=getelementptr inbounds i8,i8*%cj,i64%cp
br i1%cn,label%ct,label%cr
cr:
%cs=bitcast i8*%cq to i8**
store i8*%co,i8**%cs,align 8
br label%cu
ct:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cq,i8*%co,i32%ci,i1 false)
br label%cu
cu:
%cv=sext i32%at to i64
%cw=getelementptr inbounds i8,i8*%cj,i64%cv
%cx=bitcast i8*%cw to i32*
store i32%aw,i32*%cx,align 4
%cy=load i8*,i8**%j,align 8
%cz=getelementptr inbounds i8,i8*%cy,i64 28
%cA=bitcast i8*%cz to i32*
%cB=load i32,i32*%cA,align 4
%cC=getelementptr inbounds i8,i8*%cy,i64 24
%cD=bitcast i8*%cC to i32*
%cE=load i32,i32*%cD,align 4
%cF=call i8*@sml_alloc(i32 inreg%a4)#0
%cG=or i32%aJ,1342177280
%cH=getelementptr inbounds i8,i8*%cF,i64 -4
%cI=bitcast i8*%cH to i32*
store i32%cG,i32*%cI,align 4
call void@llvm.memset.p0i8.i32(i8*%cF,i8 0,i32%a4,i1 false)
%cJ=icmp eq i32%cE,0
%cK=load i8*,i8**%d,align 8
%cL=sext i32%D to i64
%cM=getelementptr inbounds i8,i8*%cF,i64%cL
br i1%cJ,label%cP,label%cN
cN:
%cO=bitcast i8*%cM to i8**
store i8*%cK,i8**%cO,align 8
br label%cQ
cP:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cM,i8*%cK,i32%cB,i1 false)
br label%cQ
cQ:
%cR=sext i32%az to i64
%cS=getelementptr inbounds i8,i8*%cF,i64%cR
%cT=bitcast i8*%cS to i8**
store i8*null,i8**%cT,align 8
%cU=load i8*,i8**%g,align 8
%cV=sext i32%aB to i64
%cW=getelementptr inbounds i8,i8*%cF,i64%cV
%cX=bitcast i8*%cW to i8**
store i8*%cU,i8**%cX,align 8
%cY=sext i32%aD to i64
%cZ=getelementptr inbounds i8,i8*%cF,i64%cY
%c0=bitcast i8*%cZ to i8**
store i8*null,i8**%c0,align 8
%c1=load i8*,i8**%e,align 8
%c2=sext i32%aF to i64
%c3=getelementptr inbounds i8,i8*%cF,i64%c2
%c4=bitcast i8*%c3 to i8**
store i8*%c1,i8**%c4,align 8
%c5=load i8*,i8**%c,align 8
%c6=sext i32%aH to i64
%c7=getelementptr inbounds i8,i8*%cF,i64%c6
%c8=bitcast i8*%c7 to i8**
store i8*%c5,i8**%c8,align 8
%c9=sext i32%aJ to i64
%da=getelementptr inbounds i8,i8*%cF,i64%c9
%db=bitcast i8*%da to i32*
store i32%a3,i32*%db,align 4
%dc=load i8*,i8**%j,align 8
%dd=tail call fastcc i8*@_SMLL6mergef_480(i8*inreg%dc,i8*inreg%cF)
ret i8*%dd
de:
%df=load i8*,i8**%a7,align 8
store i8*%df,i8**%e,align 8
%dg=icmp eq i32%Q,0
br i1%dg,label%dm,label%dh
dh:
store i8*null,i8**%e,align 8
%di=sext i32%D to i64
%dj=getelementptr inbounds i8,i8*%df,i64%di
%dk=bitcast i8*%dj to i8**
%dl=load i8*,i8**%dk,align 8
br label%dw
dm:
%dn=call i8*@sml_alloc(i32 inreg%A)#0
%do=getelementptr inbounds i8,i8*%dn,i64 -4
%dp=bitcast i8*%do to i32*
store i32%A,i32*%dp,align 4
%dq=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%dr=sext i32%D to i64
%ds=getelementptr inbounds i8,i8*%dq,i64%dr
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dn,i8*%ds,i32%A,i1 false)
%dt=load i8*,i8**%d,align 8
%du=load i8*,i8**%c,align 8
%dv=bitcast i8*%dt to i8**
br label%dw
dw:
%dx=phi i8**[%dv,%dm],[%a7,%dh]
%dy=phi i8*[%du,%dm],[%v,%dh]
%dz=phi i8*[%dt,%dm],[%a5,%dh]
%dA=phi i8*[%dn,%dm],[%dl,%dh]
store i8*%dA,i8**%e,align 8
%dB=getelementptr inbounds i8,i8*%dz,i64 8
%dC=bitcast i8*%dB to i8**
%dD=load i8*,i8**%dC,align 8
store i8*%dD,i8**%f,align 8
%dE=getelementptr inbounds i8,i8*%dy,i64 8
%dF=bitcast i8*%dE to i8**
%dG=load i8*,i8**%dF,align 8
store i8*%dG,i8**%g,align 8
%dH=icmp eq i8*%dG,null
br i1%dH,label%dI,label%fd
dI:
store i8*null,i8**%g,align 8
%dJ=getelementptr inbounds i8,i8*%dy,i64 16
%dK=bitcast i8*%dJ to i8**
%dL=load i8*,i8**%dK,align 8
store i8*%dL,i8**%c,align 8
%dM=load i8*,i8**%dx,align 8
store i8*%dM,i8**%d,align 8
%dN=load i8*,i8**%j,align 8
%dO=getelementptr inbounds i8,i8*%dN,i64 32
%dP=bitcast i8*%dO to i32*
%dQ=load i32,i32*%dP,align 4
%dR=icmp eq i32%dQ,0
br i1%dR,label%dX,label%dS
dS:
store i8*null,i8**%d,align 8
%dT=sext i32%Z to i64
%dU=getelementptr inbounds i8,i8*%dM,i64%dT
%dV=bitcast i8*%dU to i8**
%dW=load i8*,i8**%dV,align 8
br label%eb
dX:
%dY=getelementptr inbounds i8,i8*%dN,i64 36
%dZ=bitcast i8*%dY to i32*
%d0=load i32,i32*%dZ,align 4
%d1=call i8*@sml_alloc(i32 inreg%d0)#0
%d2=getelementptr inbounds i8,i8*%d1,i64 -4
%d3=bitcast i8*%d2 to i32*
store i32%d0,i32*%d3,align 4
%d4=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%d5=sext i32%Z to i64
%d6=getelementptr inbounds i8,i8*%d4,i64%d5
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%d1,i8*%d6,i32%d0,i1 false)
%d7=load i8*,i8**%j,align 8
%d8=getelementptr inbounds i8,i8*%d7,i64 32
%d9=bitcast i8*%d8 to i32*
%ea=load i32,i32*%d9,align 4
br label%eb
eb:
%ec=phi i32[%ea,%dX],[%dQ,%dS]
%ed=phi i8*[%d7,%dX],[%dN,%dS]
%ee=phi i8*[%d1,%dX],[%dW,%dS]
store i8*%ee,i8**%d,align 8
%ef=getelementptr inbounds i8,i8*%ed,i64 36
%eg=bitcast i8*%ef to i32*
%eh=load i32,i32*%eg,align 4
%ei=call i8*@sml_alloc(i32 inreg%ai)#0
%ej=or i32%ae,1342177280
%ek=getelementptr inbounds i8,i8*%ei,i64 -4
%el=bitcast i8*%ek to i32*
store i32%ej,i32*%el,align 4
store i8*%ei,i8**%g,align 8
call void@llvm.memset.p0i8.i32(i8*%ei,i8 0,i32%ai,i1 false)
%em=icmp eq i32%ec,0
%en=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%eo=sext i32%ab to i64
%ep=getelementptr inbounds i8,i8*%ei,i64%eo
br i1%em,label%es,label%eq
eq:
%er=bitcast i8*%ep to i8**
store i8*%en,i8**%er,align 8
br label%et
es:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ep,i8*%en,i32%eh,i1 false)
br label%et
et:
%eu=sext i32%ae to i64
%ev=getelementptr inbounds i8,i8*%ei,i64%eu
%ew=bitcast i8*%ev to i32*
store i32%ah,i32*%ew,align 4
%ex=load i8*,i8**%j,align 8
%ey=getelementptr inbounds i8,i8*%ex,i64 28
%ez=bitcast i8*%ey to i32*
%eA=load i32,i32*%ez,align 4
%eB=getelementptr inbounds i8,i8*%ex,i64 24
%eC=bitcast i8*%eB to i32*
%eD=load i32,i32*%eC,align 4
%eE=call i8*@sml_alloc(i32 inreg%a4)#0
%eF=or i32%aJ,1342177280
%eG=getelementptr inbounds i8,i8*%eE,i64 -4
%eH=bitcast i8*%eG to i32*
store i32%eF,i32*%eH,align 4
call void@llvm.memset.p0i8.i32(i8*%eE,i8 0,i32%a4,i1 false)
%eI=icmp eq i32%eD,0
%eJ=load i8*,i8**%e,align 8
%eK=sext i32%D to i64
%eL=getelementptr inbounds i8,i8*%eE,i64%eK
br i1%eI,label%eO,label%eM
eM:
%eN=bitcast i8*%eL to i8**
store i8*%eJ,i8**%eN,align 8
br label%eP
eO:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%eL,i8*%eJ,i32%eA,i1 false)
br label%eP
eP:
%eQ=load i8*,i8**%g,align 8
%eR=sext i32%az to i64
%eS=getelementptr inbounds i8,i8*%eE,i64%eR
%eT=bitcast i8*%eS to i8**
store i8*%eQ,i8**%eT,align 8
%eU=sext i32%aB to i64
%eV=getelementptr inbounds i8,i8*%eE,i64%eU
%eW=bitcast i8*%eV to i8**
store i8*null,i8**%eW,align 8
%eX=load i8*,i8**%f,align 8
%eY=sext i32%aD to i64
%eZ=getelementptr inbounds i8,i8*%eE,i64%eY
%e0=bitcast i8*%eZ to i8**
store i8*%eX,i8**%e0,align 8
%e1=sext i32%aF to i64
%e2=getelementptr inbounds i8,i8*%eE,i64%e1
%e3=bitcast i8*%e2 to i8**
store i8*null,i8**%e3,align 8
%e4=load i8*,i8**%c,align 8
%e5=sext i32%aH to i64
%e6=getelementptr inbounds i8,i8*%eE,i64%e5
%e7=bitcast i8*%e6 to i8**
store i8*%e4,i8**%e7,align 8
%e8=sext i32%aJ to i64
%e9=getelementptr inbounds i8,i8*%eE,i64%e8
%fa=bitcast i8*%e9 to i32*
store i32%a3,i32*%fa,align 4
%fb=load i8*,i8**%j,align 8
%fc=tail call fastcc i8*@_SMLL6mergef_480(i8*inreg%fb,i8*inreg%eE)
ret i8*%fc
fd:
%fe=bitcast i8*%dG to i8**
%ff=load i8*,i8**%fe,align 8
store i8*%ff,i8**%h,align 8
%fg=load i8*,i8**%j,align 8
%fh=getelementptr inbounds i8,i8*%fg,i64 24
%fi=bitcast i8*%fh to i32*
%fj=load i32,i32*%fi,align 4
%fk=icmp eq i32%fj,0
br i1%fk,label%fr,label%fl
fl:
%fm=bitcast i8*%fg to i8**
store i8*null,i8**%h,align 8
%fn=sext i32%D to i64
%fo=getelementptr inbounds i8,i8*%ff,i64%fn
%fp=bitcast i8*%fo to i8**
%fq=load i8*,i8**%fp,align 8
br label%fJ
fr:
%fs=getelementptr inbounds i8,i8*%fg,i64 28
%ft=bitcast i8*%fs to i32*
%fu=load i32,i32*%ft,align 4
%fv=call i8*@sml_alloc(i32 inreg%fu)#0
%fw=getelementptr inbounds i8,i8*%fv,i64 -4
%fx=bitcast i8*%fw to i32*
store i32%fu,i32*%fx,align 4
%fy=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%fz=sext i32%D to i64
%fA=getelementptr inbounds i8,i8*%fy,i64%fz
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%fv,i8*%fA,i32%fu,i1 false)
%fB=load i8*,i8**%g,align 8
%fC=load i8*,i8**%c,align 8
%fD=bitcast i8**%j to i8***
%fE=load i8**,i8***%fD,align 8
%fF=bitcast i8**%fE to i8*
%fG=getelementptr inbounds i8*,i8**%fE,i64 3
%fH=bitcast i8**%fG to i32*
%fI=load i32,i32*%fH,align 4
br label%fJ
fJ:
%fK=phi i64[%fz,%fr],[%fn,%fl]
%fL=phi i32[%fI,%fr],[%fj,%fl]
%fM=phi i8*[%fF,%fr],[%fg,%fl]
%fN=phi i8**[%fE,%fr],[%fm,%fl]
%fO=phi i8*[%fC,%fr],[%dy,%fl]
%fP=phi i8*[%fB,%fr],[%dG,%fl]
%fQ=phi i8*[%fv,%fr],[%fq,%fl]
store i8*%fQ,i8**%h,align 8
%fR=getelementptr inbounds i8,i8*%fP,i64 8
%fS=bitcast i8*%fR to i8**
%fT=load i8*,i8**%fS,align 8
store i8*%fT,i8**%i,align 8
%fU=getelementptr inbounds i8,i8*%fO,i64 16
%fV=bitcast i8*%fU to i8**
%fW=load i8*,i8**%fV,align 8
store i8*%fW,i8**%c,align 8
%fX=load i8*,i8**%fN,align 8
%fY=getelementptr inbounds i8,i8*%fX,i64 16
%fZ=bitcast i8*%fY to i8*(i8*,i8*)**
%f0=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%fZ,align 8
%f1=bitcast i8*%fX to i8**
%f2=load i8*,i8**%f1,align 8
store i8*%f2,i8**%k,align 8
%f3=getelementptr inbounds i8,i8*%fM,i64 28
%f4=bitcast i8*%f3 to i32*
%f5=load i32,i32*%f4,align 4
%f6=call i8*@sml_alloc(i32 inreg%T)#0
%f7=or i32%K,1342177280
%f8=getelementptr inbounds i8,i8*%f6,i64 -4
%f9=bitcast i8*%f8 to i32*
store i32%f7,i32*%f9,align 4
call void@llvm.memset.p0i8.i32(i8*%f6,i8 0,i32%T,i1 false)
%ga=icmp eq i32%fL,0
%gb=load i8*,i8**%e,align 8
%gc=getelementptr inbounds i8,i8*%f6,i64%fK
br i1%ga,label%gj,label%gd
gd:
%ge=bitcast i8*%gc to i8**
store i8*%gb,i8**%ge,align 8
%gf=load i8*,i8**%h,align 8
%gg=sext i32%H to i64
%gh=getelementptr inbounds i8,i8*%f6,i64%gg
%gi=bitcast i8*%gh to i8**
store i8*%gf,i8**%gi,align 8
br label%gn
gj:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%gc,i8*%gb,i32%f5,i1 false)
%gk=load i8*,i8**%h,align 8
%gl=sext i32%H to i64
%gm=getelementptr inbounds i8,i8*%f6,i64%gl
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%gm,i8*%gk,i32%f5,i1 false)
br label%gn
gn:
%go=sext i32%K to i64
%gp=getelementptr inbounds i8,i8*%f6,i64%go
%gq=bitcast i8*%gp to i32*
store i32%S,i32*%gq,align 4
%gr=load i8*,i8**%k,align 8
store i8*null,i8**%k,align 8
%gs=call fastcc i8*%f0(i8*inreg%gr,i8*inreg%f6)
%gt=bitcast i8*%gs to i32*
%gu=load i32,i32*%gt,align 4
switch i32%gu,label%gv[
i32 0,label%jL
i32 1,label%ih
i32 2,label%gN
]
gv:
store i8*null,i8**%d,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%f,align 8
store i8*null,i8**%g,align 8
store i8*null,i8**%h,align 8
store i8*null,i8**%i,align 8
store i8*null,i8**%j,align 8
call void@sml_matchcomp_bug()
%gw=load i8*,i8**@_SMLZ5Match,align 8
store i8*%gw,i8**%c,align 8
%gx=call i8*@sml_alloc(i32 inreg 20)#0
%gy=getelementptr inbounds i8,i8*%gx,i64 -4
%gz=bitcast i8*%gy to i32*
store i32 1342177296,i32*%gz,align 4
store i8*%gx,i8**%d,align 8
%gA=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%gB=bitcast i8*%gx to i8**
store i8*%gA,i8**%gB,align 8
%gC=getelementptr inbounds i8,i8*%gx,i64 8
%gD=bitcast i8*%gC to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[52x i8]}>,<{[4x i8],i32,[52x i8]}>*@r,i64 0,i32 2,i64 0),i8**%gD,align 8
%gE=getelementptr inbounds i8,i8*%gx,i64 16
%gF=bitcast i8*%gE to i32*
store i32 3,i32*%gF,align 4
%gG=call i8*@sml_alloc(i32 inreg 60)#0
%gH=getelementptr inbounds i8,i8*%gG,i64 -4
%gI=bitcast i8*%gH to i32*
store i32 1342177336,i32*%gI,align 4
%gJ=getelementptr inbounds i8,i8*%gG,i64 56
%gK=bitcast i8*%gJ to i32*
store i32 1,i32*%gK,align 4
%gL=load i8*,i8**%d,align 8
%gM=bitcast i8*%gG to i8**
store i8*%gL,i8**%gM,align 8
call void@sml_raise(i8*inreg%gG)#1
unreachable
gN:
store i8*null,i8**%h,align 8
store i8*null,i8**%i,align 8
%gO=bitcast i8**%d to i8***
%gP=load i8**,i8***%gO,align 8
%gQ=load i8*,i8**%gP,align 8
store i8*%gQ,i8**%d,align 8
%gR=load i8*,i8**%j,align 8
%gS=getelementptr inbounds i8,i8*%gR,i64 32
%gT=bitcast i8*%gS to i32*
%gU=load i32,i32*%gT,align 4
%gV=icmp eq i32%gU,0
br i1%gV,label%g1,label%gW
gW:
store i8*null,i8**%d,align 8
%gX=sext i32%Z to i64
%gY=getelementptr inbounds i8,i8*%gQ,i64%gX
%gZ=bitcast i8*%gY to i8**
%g0=load i8*,i8**%gZ,align 8
br label%hf
g1:
%g2=getelementptr inbounds i8,i8*%gR,i64 36
%g3=bitcast i8*%g2 to i32*
%g4=load i32,i32*%g3,align 4
%g5=call i8*@sml_alloc(i32 inreg%g4)#0
%g6=getelementptr inbounds i8,i8*%g5,i64 -4
%g7=bitcast i8*%g6 to i32*
store i32%g4,i32*%g7,align 4
%g8=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%g9=sext i32%Z to i64
%ha=getelementptr inbounds i8,i8*%g8,i64%g9
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%g5,i8*%ha,i32%g4,i1 false)
%hb=load i8*,i8**%j,align 8
%hc=getelementptr inbounds i8,i8*%hb,i64 32
%hd=bitcast i8*%hc to i32*
%he=load i32,i32*%hd,align 4
br label%hf
hf:
%hg=phi i32[%he,%g1],[%gU,%gW]
%hh=phi i8*[%hb,%g1],[%gR,%gW]
%hi=phi i8*[%g5,%g1],[%g0,%gW]
store i8*%hi,i8**%d,align 8
%hj=getelementptr inbounds i8,i8*%hh,i64 36
%hk=bitcast i8*%hj to i32*
%hl=load i32,i32*%hk,align 4
%hm=call i8*@sml_alloc(i32 inreg%ai)#0
%hn=or i32%ae,1342177280
%ho=getelementptr inbounds i8,i8*%hm,i64 -4
%hp=bitcast i8*%ho to i32*
store i32%hn,i32*%hp,align 4
store i8*%hm,i8**%h,align 8
call void@llvm.memset.p0i8.i32(i8*%hm,i8 0,i32%ai,i1 false)
%hq=icmp eq i32%hg,0
%hr=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%hs=sext i32%ab to i64
%ht=getelementptr inbounds i8,i8*%hm,i64%hs
br i1%hq,label%hw,label%hu
hu:
%hv=bitcast i8*%ht to i8**
store i8*%hr,i8**%hv,align 8
br label%hx
hw:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ht,i8*%hr,i32%hl,i1 false)
br label%hx
hx:
%hy=sext i32%ae to i64
%hz=getelementptr inbounds i8,i8*%hm,i64%hy
%hA=bitcast i8*%hz to i32*
store i32%ah,i32*%hA,align 4
%hB=load i8*,i8**%j,align 8
%hC=getelementptr inbounds i8,i8*%hB,i64 28
%hD=bitcast i8*%hC to i32*
%hE=load i32,i32*%hD,align 4
%hF=getelementptr inbounds i8,i8*%hB,i64 24
%hG=bitcast i8*%hF to i32*
%hH=load i32,i32*%hG,align 4
%hI=call i8*@sml_alloc(i32 inreg%a4)#0
%hJ=or i32%aJ,1342177280
%hK=getelementptr inbounds i8,i8*%hI,i64 -4
%hL=bitcast i8*%hK to i32*
store i32%hJ,i32*%hL,align 4
call void@llvm.memset.p0i8.i32(i8*%hI,i8 0,i32%a4,i1 false)
%hM=icmp eq i32%hH,0
%hN=load i8*,i8**%e,align 8
%hO=getelementptr inbounds i8,i8*%hI,i64%fK
br i1%hM,label%hR,label%hP
hP:
%hQ=bitcast i8*%hO to i8**
store i8*%hN,i8**%hQ,align 8
br label%hS
hR:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%hO,i8*%hN,i32%hE,i1 false)
br label%hS
hS:
%hT=load i8*,i8**%h,align 8
%hU=sext i32%az to i64
%hV=getelementptr inbounds i8,i8*%hI,i64%hU
%hW=bitcast i8*%hV to i8**
store i8*%hT,i8**%hW,align 8
%hX=sext i32%aB to i64
%hY=getelementptr inbounds i8,i8*%hI,i64%hX
%hZ=bitcast i8*%hY to i8**
store i8*null,i8**%hZ,align 8
%h0=load i8*,i8**%f,align 8
%h1=sext i32%aD to i64
%h2=getelementptr inbounds i8,i8*%hI,i64%h1
%h3=bitcast i8*%h2 to i8**
store i8*%h0,i8**%h3,align 8
%h4=load i8*,i8**%g,align 8
%h5=sext i32%aF to i64
%h6=getelementptr inbounds i8,i8*%hI,i64%h5
%h7=bitcast i8*%h6 to i8**
store i8*%h4,i8**%h7,align 8
%h8=load i8*,i8**%c,align 8
%h9=sext i32%aH to i64
%ia=getelementptr inbounds i8,i8*%hI,i64%h9
%ib=bitcast i8*%ia to i8**
store i8*%h8,i8**%ib,align 8
%ic=sext i32%aJ to i64
%id=getelementptr inbounds i8,i8*%hI,i64%ic
%ie=bitcast i8*%id to i32*
store i32%a3,i32*%ie,align 4
%if=load i8*,i8**%j,align 8
%ig=tail call fastcc i8*@_SMLL6mergef_480(i8*inreg%if,i8*inreg%hI)
ret i8*%ig
ih:
store i8*null,i8**%f,align 8
%ii=bitcast i8**%g to i8***
%ij=load i8**,i8***%ii,align 8
store i8*null,i8**%g,align 8
%ik=load i8*,i8**%ij,align 8
store i8*%ik,i8**%e,align 8
%il=load i8*,i8**%j,align 8
%im=getelementptr inbounds i8,i8*%il,i64 40
%in=bitcast i8*%im to i32*
%io=load i32,i32*%in,align 4
%ip=icmp eq i32%io,0
br i1%ip,label%iv,label%iq
iq:
store i8*null,i8**%e,align 8
%ir=sext i32%ao to i64
%is=getelementptr inbounds i8,i8*%ik,i64%ir
%it=bitcast i8*%is to i8**
%iu=load i8*,i8**%it,align 8
br label%iJ
iv:
%iw=getelementptr inbounds i8,i8*%il,i64 44
%ix=bitcast i8*%iw to i32*
%iy=load i32,i32*%ix,align 4
%iz=call i8*@sml_alloc(i32 inreg%iy)#0
%iA=getelementptr inbounds i8,i8*%iz,i64 -4
%iB=bitcast i8*%iA to i32*
store i32%iy,i32*%iB,align 4
%iC=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%iD=sext i32%ao to i64
%iE=getelementptr inbounds i8,i8*%iC,i64%iD
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%iz,i8*%iE,i32%iy,i1 false)
%iF=load i8*,i8**%j,align 8
%iG=getelementptr inbounds i8,i8*%iF,i64 40
%iH=bitcast i8*%iG to i32*
%iI=load i32,i32*%iH,align 4
br label%iJ
iJ:
%iK=phi i32[%iI,%iv],[%io,%iq]
%iL=phi i8*[%iF,%iv],[%il,%iq]
%iM=phi i8*[%iz,%iv],[%iu,%iq]
store i8*%iM,i8**%e,align 8
%iN=getelementptr inbounds i8,i8*%iL,i64 44
%iO=bitcast i8*%iN to i32*
%iP=load i32,i32*%iO,align 4
%iQ=call i8*@sml_alloc(i32 inreg%ax)#0
%iR=or i32%at,1342177280
%iS=getelementptr inbounds i8,i8*%iQ,i64 -4
%iT=bitcast i8*%iS to i32*
store i32%iR,i32*%iT,align 4
store i8*%iQ,i8**%f,align 8
call void@llvm.memset.p0i8.i32(i8*%iQ,i8 0,i32%ax,i1 false)
%iU=icmp eq i32%iK,0
%iV=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%iW=sext i32%aq to i64
%iX=getelementptr inbounds i8,i8*%iQ,i64%iW
br i1%iU,label%i0,label%iY
iY:
%iZ=bitcast i8*%iX to i8**
store i8*%iV,i8**%iZ,align 8
br label%i1
i0:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%iX,i8*%iV,i32%iP,i1 false)
br label%i1
i1:
%i2=sext i32%at to i64
%i3=getelementptr inbounds i8,i8*%iQ,i64%i2
%i4=bitcast i8*%i3 to i32*
store i32%aw,i32*%i4,align 4
%i5=load i8*,i8**%j,align 8
%i6=getelementptr inbounds i8,i8*%i5,i64 28
%i7=bitcast i8*%i6 to i32*
%i8=load i32,i32*%i7,align 4
%i9=getelementptr inbounds i8,i8*%i5,i64 24
%ja=bitcast i8*%i9 to i32*
%jb=load i32,i32*%ja,align 4
%jc=call i8*@sml_alloc(i32 inreg%a4)#0
%jd=or i32%aJ,1342177280
%je=getelementptr inbounds i8,i8*%jc,i64 -4
%jf=bitcast i8*%je to i32*
store i32%jd,i32*%jf,align 4
call void@llvm.memset.p0i8.i32(i8*%jc,i8 0,i32%a4,i1 false)
%jg=icmp eq i32%jb,0
%jh=load i8*,i8**%h,align 8
%ji=getelementptr inbounds i8,i8*%jc,i64%fK
br i1%jg,label%jl,label%jj
jj:
%jk=bitcast i8*%ji to i8**
store i8*%jh,i8**%jk,align 8
br label%jm
jl:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ji,i8*%jh,i32%i8,i1 false)
br label%jm
jm:
%jn=sext i32%az to i64
%jo=getelementptr inbounds i8,i8*%jc,i64%jn
%jp=bitcast i8*%jo to i8**
store i8*null,i8**%jp,align 8
%jq=load i8*,i8**%f,align 8
%jr=sext i32%aB to i64
%js=getelementptr inbounds i8,i8*%jc,i64%jr
%jt=bitcast i8*%js to i8**
store i8*%jq,i8**%jt,align 8
%ju=load i8*,i8**%d,align 8
%jv=sext i32%aD to i64
%jw=getelementptr inbounds i8,i8*%jc,i64%jv
%jx=bitcast i8*%jw to i8**
store i8*%ju,i8**%jx,align 8
%jy=load i8*,i8**%i,align 8
%jz=sext i32%aF to i64
%jA=getelementptr inbounds i8,i8*%jc,i64%jz
%jB=bitcast i8*%jA to i8**
store i8*%jy,i8**%jB,align 8
%jC=load i8*,i8**%c,align 8
%jD=sext i32%aH to i64
%jE=getelementptr inbounds i8,i8*%jc,i64%jD
%jF=bitcast i8*%jE to i8**
store i8*%jC,i8**%jF,align 8
%jG=sext i32%aJ to i64
%jH=getelementptr inbounds i8,i8*%jc,i64%jG
%jI=bitcast i8*%jH to i32*
store i32%a3,i32*%jI,align 4
%jJ=load i8*,i8**%j,align 8
%jK=tail call fastcc i8*@_SMLL6mergef_480(i8*inreg%jJ,i8*inreg%jc)
ret i8*%jK
jL:
store i8*null,i8**%h,align 8
%jM=load i8*,i8**%j,align 8
%jN=getelementptr inbounds i8,i8*%jM,i64 28
%jO=bitcast i8*%jN to i32*
%jP=load i32,i32*%jO,align 4
%jQ=getelementptr inbounds i8,i8*%jM,i64 24
%jR=bitcast i8*%jQ to i32*
%jS=load i32,i32*%jR,align 4
%jT=bitcast i8**%d to i8***
%jU=load i8**,i8***%jT,align 8
%jV=load i8*,i8**%jU,align 8
store i8*%jV,i8**%d,align 8
%jW=getelementptr inbounds i8,i8*%jM,i64 32
%jX=bitcast i8*%jW to i32*
%jY=load i32,i32*%jX,align 4
%jZ=icmp eq i32%jY,0
br i1%jZ,label%j5,label%j0
j0:
store i8*null,i8**%d,align 8
%j1=sext i32%Z to i64
%j2=getelementptr inbounds i8,i8*%jV,i64%j1
%j3=bitcast i8*%j2 to i8**
%j4=load i8*,i8**%j3,align 8
br label%kj
j5:
%j6=getelementptr inbounds i8,i8*%jM,i64 36
%j7=bitcast i8*%j6 to i32*
%j8=load i32,i32*%j7,align 4
%j9=call i8*@sml_alloc(i32 inreg%j8)#0
%ka=getelementptr inbounds i8,i8*%j9,i64 -4
%kb=bitcast i8*%ka to i32*
store i32%j8,i32*%kb,align 4
%kc=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%kd=sext i32%Z to i64
%ke=getelementptr inbounds i8,i8*%kc,i64%kd
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%j9,i8*%ke,i32%j8,i1 false)
%kf=load i8*,i8**%j,align 8
%kg=getelementptr inbounds i8,i8*%kf,i64 32
%kh=bitcast i8*%kg to i32*
%ki=load i32,i32*%kh,align 4
br label%kj
kj:
%kk=phi i32[%ki,%j5],[%jY,%j0]
%kl=phi i8*[%kf,%j5],[%jM,%j0]
%km=phi i8*[%j9,%j5],[%j4,%j0]
store i8*%km,i8**%d,align 8
%kn=getelementptr inbounds i8,i8*%kl,i64 36
%ko=bitcast i8*%kn to i32*
%kp=load i32,i32*%ko,align 4
%kq=call i8*@sml_alloc(i32 inreg%ai)#0
%kr=or i32%ae,1342177280
%ks=getelementptr inbounds i8,i8*%kq,i64 -4
%kt=bitcast i8*%ks to i32*
store i32%kr,i32*%kt,align 4
store i8*%kq,i8**%h,align 8
call void@llvm.memset.p0i8.i32(i8*%kq,i8 0,i32%ai,i1 false)
%ku=icmp eq i32%kk,0
%kv=load i8*,i8**%d,align 8
%kw=sext i32%ab to i64
%kx=getelementptr inbounds i8,i8*%kq,i64%kw
br i1%ku,label%kA,label%ky
ky:
%kz=bitcast i8*%kx to i8**
store i8*%kv,i8**%kz,align 8
br label%kB
kA:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%kx,i8*%kv,i32%kp,i1 false)
br label%kB
kB:
%kC=sext i32%ae to i64
%kD=getelementptr inbounds i8,i8*%kq,i64%kC
%kE=bitcast i8*%kD to i32*
store i32%ah,i32*%kE,align 4
%kF=bitcast i8**%g to i8***
%kG=load i8**,i8***%kF,align 8
store i8*null,i8**%g,align 8
%kH=load i8*,i8**%kG,align 8
store i8*%kH,i8**%d,align 8
%kI=load i8*,i8**%j,align 8
%kJ=getelementptr inbounds i8,i8*%kI,i64 40
%kK=bitcast i8*%kJ to i32*
%kL=load i32,i32*%kK,align 4
%kM=icmp eq i32%kL,0
br i1%kM,label%kS,label%kN
kN:
store i8*null,i8**%d,align 8
%kO=sext i32%ao to i64
%kP=getelementptr inbounds i8,i8*%kH,i64%kO
%kQ=bitcast i8*%kP to i8**
%kR=load i8*,i8**%kQ,align 8
br label%k6
kS:
%kT=getelementptr inbounds i8,i8*%kI,i64 44
%kU=bitcast i8*%kT to i32*
%kV=load i32,i32*%kU,align 4
%kW=call i8*@sml_alloc(i32 inreg%kV)#0
%kX=getelementptr inbounds i8,i8*%kW,i64 -4
%kY=bitcast i8*%kX to i32*
store i32%kV,i32*%kY,align 4
%kZ=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%k0=sext i32%ao to i64
%k1=getelementptr inbounds i8,i8*%kZ,i64%k0
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%kW,i8*%k1,i32%kV,i1 false)
%k2=load i8*,i8**%j,align 8
%k3=getelementptr inbounds i8,i8*%k2,i64 40
%k4=bitcast i8*%k3 to i32*
%k5=load i32,i32*%k4,align 4
br label%k6
k6:
%k7=phi i32[%k5,%kS],[%kL,%kN]
%k8=phi i8*[%k2,%kS],[%kI,%kN]
%k9=phi i8*[%kW,%kS],[%kR,%kN]
store i8*%k9,i8**%d,align 8
%la=getelementptr inbounds i8,i8*%k8,i64 44
%lb=bitcast i8*%la to i32*
%lc=load i32,i32*%lb,align 4
%ld=call i8*@sml_alloc(i32 inreg%ax)#0
%le=or i32%at,1342177280
%lf=getelementptr inbounds i8,i8*%ld,i64 -4
%lg=bitcast i8*%lf to i32*
store i32%le,i32*%lg,align 4
store i8*%ld,i8**%g,align 8
call void@llvm.memset.p0i8.i32(i8*%ld,i8 0,i32%ax,i1 false)
%lh=icmp eq i32%k7,0
%li=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%lj=sext i32%aq to i64
%lk=getelementptr inbounds i8,i8*%ld,i64%lj
br i1%lh,label%ln,label%ll
ll:
%lm=bitcast i8*%lk to i8**
store i8*%li,i8**%lm,align 8
br label%lo
ln:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%lk,i8*%li,i32%lc,i1 false)
br label%lo
lo:
%lp=sext i32%at to i64
%lq=getelementptr inbounds i8,i8*%ld,i64%lp
%lr=bitcast i8*%lq to i32*
store i32%aw,i32*%lr,align 4
%ls=call i8*@sml_alloc(i32 inreg%a4)#0
%lt=or i32%aJ,1342177280
%lu=getelementptr inbounds i8,i8*%ls,i64 -4
%lv=bitcast i8*%lu to i32*
store i32%lt,i32*%lv,align 4
call void@llvm.memset.p0i8.i32(i8*%ls,i8 0,i32%a4,i1 false)
%lw=icmp eq i32%jS,0
%lx=load i8*,i8**%e,align 8
%ly=getelementptr inbounds i8,i8*%ls,i64%fK
br i1%lw,label%lB,label%lz
lz:
%lA=bitcast i8*%ly to i8**
store i8*%lx,i8**%lA,align 8
br label%lC
lB:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ly,i8*%lx,i32%jP,i1 false)
br label%lC
lC:
%lD=load i8*,i8**%h,align 8
%lE=sext i32%az to i64
%lF=getelementptr inbounds i8,i8*%ls,i64%lE
%lG=bitcast i8*%lF to i8**
store i8*%lD,i8**%lG,align 8
%lH=load i8*,i8**%g,align 8
%lI=sext i32%aB to i64
%lJ=getelementptr inbounds i8,i8*%ls,i64%lI
%lK=bitcast i8*%lJ to i8**
store i8*%lH,i8**%lK,align 8
%lL=load i8*,i8**%f,align 8
%lM=sext i32%aD to i64
%lN=getelementptr inbounds i8,i8*%ls,i64%lM
%lO=bitcast i8*%lN to i8**
store i8*%lL,i8**%lO,align 8
%lP=load i8*,i8**%i,align 8
%lQ=sext i32%aF to i64
%lR=getelementptr inbounds i8,i8*%ls,i64%lQ
%lS=bitcast i8*%lR to i8**
store i8*%lP,i8**%lS,align 8
%lT=load i8*,i8**%c,align 8
%lU=sext i32%aH to i64
%lV=getelementptr inbounds i8,i8*%ls,i64%lU
%lW=bitcast i8*%lV to i8**
store i8*%lT,i8**%lW,align 8
%lX=sext i32%aJ to i64
%lY=getelementptr inbounds i8,i8*%ls,i64%lX
%lZ=bitcast i8*%lY to i32*
store i32%a3,i32*%lZ,align 4
%l0=load i8*,i8**%j,align 8
%l1=tail call fastcc i8*@_SMLL6mergef_480(i8*inreg%l0,i8*inreg%ls)
ret i8*%l1
}
define internal fastcc i8*@_SMLL6mergef_480(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
q:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
store i8*%b,i8**%c,align 8
store i8*%a,i8**%j,align 8
%k=load atomic i32,i32*@sml_check_flag unordered,align 4
%l=icmp eq i32%k,0
br i1%l,label%o,label%m
m:
call void@sml_check(i32 inreg%k)
%n=load i8*,i8**%j,align 8
br label%o
o:
%p=phi i8*[%n,%m],[%a,%q]
%r=getelementptr inbounds i8,i8*%p,i64 28
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=add i32%t,-1
%v=sub i32 0,%t
%w=and i32%u,%v
%x=add i32%t,7
%y=add i32%x,%w
%z=and i32%y,-8
%A=add i32%z,15
%B=and i32%A,-8
%C=add i32%B,15
%D=and i32%C,-8
%E=add i32%D,15
%F=and i32%E,-8
%G=add i32%F,15
%H=and i32%G,-8
%I=getelementptr inbounds i8,i8*%p,i64 52
%J=bitcast i8*%I to i32*
%K=load i32,i32*%J,align 4
%L=add i32%K,-1
%M=sub i32 0,%K
%N=and i32%L,%M
%O=and i32%x,%v
%P=add i32%u,%K
%Q=add i32%P,%O
%R=and i32%Q,%M
%S=add i32%K,7
%T=add i32%S,%R
%U=and i32%T,-8
%V=lshr i32%R,3
%W=lshr i32%O,3
%X=sub nsw i32%V,%W
%Y=getelementptr inbounds i8,i8*%p,i64 48
%Z=bitcast i8*%Y to i32*
%aa=load i32,i32*%Z,align 4
%ab=shl i32%aa,%X
%ac=getelementptr inbounds i8,i8*%p,i64 24
%ad=bitcast i8*%ac to i32*
%ae=load i32,i32*%ad,align 4
%af=or i32%ab,%ae
%ag=shl i32%af,%W
%ah=or i32%ag,1
%ai=or i32%U,4
%aj=icmp eq i32%ae,0
br i1%aj,label%aq,label%ak
ak:
%al=load i8*,i8**%c,align 8
%am=sext i32%w to i64
%an=getelementptr inbounds i8,i8*%al,i64%am
%ao=bitcast i8*%an to i8**
%ap=load i8*,i8**%ao,align 8
br label%ay
aq:
%ar=call i8*@sml_alloc(i32 inreg%t)#0
%as=getelementptr inbounds i8,i8*%ar,i64 -4
%at=bitcast i8*%as to i32*
store i32%t,i32*%at,align 4
%au=load i8*,i8**%c,align 8
%av=sext i32%w to i64
%aw=getelementptr inbounds i8,i8*%au,i64%av
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ar,i8*%aw,i32%t,i1 false)
%ax=load i8*,i8**%j,align 8
br label%ay
ay:
%az=phi i8*[%ax,%aq],[%p,%ak]
%aA=phi i8*[%au,%aq],[%al,%ak]
%aB=phi i8*[%ar,%aq],[%ap,%ak]
store i8*%aB,i8**%d,align 8
%aC=sext i32%z to i64
%aD=getelementptr inbounds i8,i8*%aA,i64%aC
%aE=bitcast i8*%aD to i8**
%aF=load i8*,i8**%aE,align 8
store i8*%aF,i8**%e,align 8
%aG=sext i32%B to i64
%aH=getelementptr inbounds i8,i8*%aA,i64%aG
%aI=bitcast i8*%aH to i8**
%aJ=load i8*,i8**%aI,align 8
store i8*%aJ,i8**%f,align 8
%aK=sext i32%D to i64
%aL=getelementptr inbounds i8,i8*%aA,i64%aK
%aM=bitcast i8*%aL to i8**
%aN=load i8*,i8**%aM,align 8
store i8*%aN,i8**%g,align 8
%aO=sext i32%F to i64
%aP=getelementptr inbounds i8,i8*%aA,i64%aO
%aQ=bitcast i8*%aP to i8**
%aR=load i8*,i8**%aQ,align 8
store i8*%aR,i8**%h,align 8
%aS=sext i32%H to i64
%aT=getelementptr inbounds i8,i8*%aA,i64%aS
%aU=bitcast i8*%aT to i8**
%aV=load i8*,i8**%aU,align 8
store i8*%aV,i8**%c,align 8
%aW=getelementptr inbounds i8,i8*%az,i64 8
%aX=bitcast i8*%aW to i8**
%aY=load i8*,i8**%aX,align 8
%aZ=getelementptr inbounds i8,i8*%aY,i64 16
%a0=bitcast i8*%aZ to i8*(i8*,i8*)**
%a1=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a0,align 8
%a2=bitcast i8*%aY to i8**
%a3=load i8*,i8**%a2,align 8
store i8*%a3,i8**%i,align 8
%a4=call i8*@sml_alloc(i32 inreg 20)#0
%a5=getelementptr inbounds i8,i8*%a4,i64 -4
%a6=bitcast i8*%a5 to i32*
store i32 1342177296,i32*%a6,align 4
%a7=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%a8=bitcast i8*%a4 to i8**
store i8*%a7,i8**%a8,align 8
%a9=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%ba=getelementptr inbounds i8,i8*%a4,i64 8
%bb=bitcast i8*%ba to i8**
store i8*%a9,i8**%bb,align 8
%bc=getelementptr inbounds i8,i8*%a4,i64 16
%bd=bitcast i8*%bc to i32*
store i32 3,i32*%bd,align 4
%be=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%bf=call fastcc i8*%a1(i8*inreg%be,i8*inreg%a4)
store i8*%bf,i8**%e,align 8
%bg=icmp eq i8*%bf,null
br i1%bg,label%bh,label%bx
bh:
store i8*null,i8**%d,align 8
store i8*null,i8**%e,align 8
%bi=call i8*@sml_alloc(i32 inreg 28)#0
%bj=getelementptr inbounds i8,i8*%bi,i64 -4
%bk=bitcast i8*%bj to i32*
store i32 1342177304,i32*%bk,align 4
%bl=load i8*,i8**%g,align 8
%bm=bitcast i8*%bi to i8**
store i8*%bl,i8**%bm,align 8
%bn=load i8*,i8**%h,align 8
%bo=getelementptr inbounds i8,i8*%bi,i64 8
%bp=bitcast i8*%bo to i8**
store i8*%bn,i8**%bp,align 8
%bq=load i8*,i8**%c,align 8
%br=getelementptr inbounds i8,i8*%bi,i64 16
%bs=bitcast i8*%br to i8**
store i8*%bq,i8**%bs,align 8
%bt=getelementptr inbounds i8,i8*%bi,i64 24
%bu=bitcast i8*%bt to i32*
store i32 7,i32*%bu,align 4
%bv=load i8*,i8**%j,align 8
%bw=tail call fastcc i8*@_SMLL5merge_479(i8*inreg%bv,i8*inreg%bi)
ret i8*%bw
bx:
%by=load i8*,i8**%j,align 8
%bz=getelementptr inbounds i8,i8*%by,i64 48
%bA=bitcast i8*%bz to i32*
%bB=load i32,i32*%bA,align 4
%bC=icmp eq i32%bB,0
br i1%bC,label%bI,label%bD
bD:
store i8*null,i8**%e,align 8
%bE=sext i32%N to i64
%bF=getelementptr inbounds i8,i8*%bf,i64%bE
%bG=bitcast i8*%bF to i8**
%bH=load i8*,i8**%bG,align 8
br label%bW
bI:
%bJ=getelementptr inbounds i8,i8*%by,i64 52
%bK=bitcast i8*%bJ to i32*
%bL=load i32,i32*%bK,align 4
%bM=call i8*@sml_alloc(i32 inreg%bL)#0
%bN=getelementptr inbounds i8,i8*%bM,i64 -4
%bO=bitcast i8*%bN to i32*
store i32%bL,i32*%bO,align 4
%bP=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bQ=sext i32%N to i64
%bR=getelementptr inbounds i8,i8*%bP,i64%bQ
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bM,i8*%bR,i32%bL,i1 false)
%bS=load i8*,i8**%j,align 8
%bT=getelementptr inbounds i8,i8*%bS,i64 48
%bU=bitcast i8*%bT to i32*
%bV=load i32,i32*%bU,align 4
br label%bW
bW:
%bX=phi i32[%bV,%bI],[%bB,%bD]
%bY=phi i8*[%bS,%bI],[%by,%bD]
%bZ=phi i8*[%bM,%bI],[%bH,%bD]
store i8*%bZ,i8**%e,align 8
%b0=getelementptr inbounds i8,i8*%bY,i64 16
%b1=bitcast i8*%b0 to i8**
%b2=load i8*,i8**%b1,align 8
%b3=getelementptr inbounds i8,i8*%bY,i64 52
%b4=bitcast i8*%b3 to i32*
%b5=load i32,i32*%b4,align 4
%b6=call fastcc i8*@_SMLL6insert_334(i8*inreg%b2,i32 inreg%bX,i32 inreg%b5)
%b7=getelementptr inbounds i8,i8*%b6,i64 16
%b8=bitcast i8*%b7 to i8*(i8*,i8*)**
%b9=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%b8,align 8
%ca=bitcast i8*%b6 to i8**
%cb=load i8*,i8**%ca,align 8
store i8*%cb,i8**%f,align 8
%cc=load i8*,i8**%j,align 8
%cd=getelementptr inbounds i8,i8*%cc,i64 28
%ce=bitcast i8*%cd to i32*
%cf=load i32,i32*%ce,align 4
%cg=getelementptr inbounds i8,i8*%cc,i64 24
%ch=bitcast i8*%cg to i32*
%ci=load i32,i32*%ch,align 4
%cj=getelementptr inbounds i8,i8*%cc,i64 52
%ck=bitcast i8*%cj to i32*
%cl=load i32,i32*%ck,align 4
%cm=getelementptr inbounds i8,i8*%cc,i64 48
%cn=bitcast i8*%cm to i32*
%co=load i32,i32*%cn,align 4
%cp=call i8*@sml_alloc(i32 inreg%ai)#0
%cq=or i32%U,1342177280
%cr=getelementptr inbounds i8,i8*%cp,i64 -4
%cs=bitcast i8*%cr to i32*
store i32%cq,i32*%cs,align 4
call void@llvm.memset.p0i8.i32(i8*%cp,i8 0,i32%ai,i1 false)
%ct=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cu=bitcast i8*%cp to i8**
store i8*%ct,i8**%cu,align 8
%cv=icmp eq i32%ci,0
%cw=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%cx=sext i32%O to i64
%cy=getelementptr inbounds i8,i8*%cp,i64%cx
br i1%cv,label%cB,label%cz
cz:
%cA=bitcast i8*%cy to i8**
store i8*%cw,i8**%cA,align 8
br label%cC
cB:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cy,i8*%cw,i32%cf,i1 false)
br label%cC
cC:
%cD=icmp eq i32%co,0
%cE=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%cF=sext i32%R to i64
%cG=getelementptr inbounds i8,i8*%cp,i64%cF
br i1%cD,label%cJ,label%cH
cH:
%cI=bitcast i8*%cG to i8**
store i8*%cE,i8**%cI,align 8
br label%cK
cJ:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cG,i8*%cE,i32%cl,i1 false)
br label%cK
cK:
%cL=sext i32%U to i64
%cM=getelementptr inbounds i8,i8*%cp,i64%cL
%cN=bitcast i8*%cM to i32*
store i32%ah,i32*%cN,align 4
%cO=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%cP=call fastcc i8*%b9(i8*inreg%cO,i8*inreg%cp)
store i8*%cP,i8**%c,align 8
%cQ=call i8*@sml_alloc(i32 inreg 28)#0
%cR=getelementptr inbounds i8,i8*%cQ,i64 -4
%cS=bitcast i8*%cR to i32*
store i32 1342177304,i32*%cS,align 4
%cT=load i8*,i8**%g,align 8
%cU=bitcast i8*%cQ to i8**
store i8*%cT,i8**%cU,align 8
%cV=load i8*,i8**%h,align 8
%cW=getelementptr inbounds i8,i8*%cQ,i64 8
%cX=bitcast i8*%cW to i8**
store i8*%cV,i8**%cX,align 8
%cY=load i8*,i8**%c,align 8
%cZ=getelementptr inbounds i8,i8*%cQ,i64 16
%c0=bitcast i8*%cZ to i8**
store i8*%cY,i8**%c0,align 8
%c1=getelementptr inbounds i8,i8*%cQ,i64 24
%c2=bitcast i8*%c1 to i32*
store i32 7,i32*%c2,align 4
%c3=load i8*,i8**%j,align 8
%c4=tail call fastcc i8*@_SMLL5merge_479(i8*inreg%c3,i8*inreg%cQ)
ret i8*%c4
}
define internal fastcc i8*@_SMLL9mergeWith_482(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%k,label%m
k:
%l=bitcast i8*%a to i8**
br label%q
m:
call void@sml_check(i32 inreg%i)
%n=bitcast i8**%e to i8***
%o=load i8**,i8***%n,align 8
%p=bitcast i8**%o to i8*
br label%q
q:
%r=phi i8*[%p,%m],[%a,%k]
%s=phi i8**[%o,%m],[%l,%k]
%t=load i8*,i8**%s,align 8
store i8*%t,i8**%d,align 8
%u=getelementptr inbounds i8*,i8**%s,i64 1
%v=load i8*,i8**%u,align 8
store i8*%v,i8**%f,align 8
%w=getelementptr inbounds i8*,i8**%s,i64 2
%x=load i8*,i8**%w,align 8
store i8*%x,i8**%g,align 8
%y=getelementptr inbounds i8,i8*%r,i64 32
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=getelementptr inbounds i8,i8*%r,i64 36
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=getelementptr inbounds i8,i8*%r,i64 40
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
%H=getelementptr inbounds i8,i8*%r,i64 44
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
%K=getelementptr inbounds i8,i8*%r,i64 48
%L=bitcast i8*%K to i32*
%M=load i32,i32*%L,align 4
%N=getelementptr inbounds i8,i8*%r,i64 52
%O=bitcast i8*%N to i32*
%P=load i32,i32*%O,align 4
%Q=getelementptr inbounds i8,i8*%r,i64 56
%R=bitcast i8*%Q to i32*
%S=load i32,i32*%R,align 4
%T=getelementptr inbounds i8,i8*%r,i64 60
%U=bitcast i8*%T to i32*
%V=load i32,i32*%U,align 4
%W=call i8*@sml_alloc(i32 inreg 60)#0
%X=getelementptr inbounds i8,i8*%W,i64 -4
%Y=bitcast i8*%X to i32*
store i32 1342177336,i32*%Y,align 4
store i8*%W,i8**%h,align 8
%Z=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aa=bitcast i8*%W to i8**
store i8*%Z,i8**%aa,align 8
%ab=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%ac=getelementptr inbounds i8,i8*%W,i64 8
%ad=bitcast i8*%ac to i8**
store i8*%ab,i8**%ad,align 8
%ae=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%af=getelementptr inbounds i8,i8*%W,i64 16
%ag=bitcast i8*%af to i8**
store i8*%ae,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%W,i64 24
%ai=bitcast i8*%ah to i32*
store i32%A,i32*%ai,align 4
%aj=getelementptr inbounds i8,i8*%W,i64 28
%ak=bitcast i8*%aj to i32*
store i32%D,i32*%ak,align 4
%al=getelementptr inbounds i8,i8*%W,i64 32
%am=bitcast i8*%al to i32*
store i32%G,i32*%am,align 4
%an=getelementptr inbounds i8,i8*%W,i64 36
%ao=bitcast i8*%an to i32*
store i32%J,i32*%ao,align 4
%ap=getelementptr inbounds i8,i8*%W,i64 40
%aq=bitcast i8*%ap to i32*
store i32%M,i32*%aq,align 4
%ar=getelementptr inbounds i8,i8*%W,i64 44
%as=bitcast i8*%ar to i32*
store i32%P,i32*%as,align 4
%at=getelementptr inbounds i8,i8*%W,i64 48
%au=bitcast i8*%at to i32*
store i32%S,i32*%au,align 4
%av=getelementptr inbounds i8,i8*%W,i64 52
%aw=bitcast i8*%av to i32*
store i32%V,i32*%aw,align 4
%ax=getelementptr inbounds i8,i8*%W,i64 56
%ay=bitcast i8*%ax to i32*
store i32 7,i32*%ay,align 4
%az=call i8*@sml_alloc(i32 inreg 28)#0
%aA=getelementptr inbounds i8,i8*%az,i64 -4
%aB=bitcast i8*%aA to i32*
store i32 1342177304,i32*%aB,align 4
%aC=load i8*,i8**%h,align 8
%aD=bitcast i8*%az to i8**
store i8*%aC,i8**%aD,align 8
%aE=getelementptr inbounds i8,i8*%az,i64 8
%aF=bitcast i8*%aE to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL5merge_479 to void(...)*),void(...)**%aF,align 8
%aG=getelementptr inbounds i8,i8*%az,i64 16
%aH=bitcast i8*%aG to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL5merge_479 to void(...)*),void(...)**%aH,align 8
%aI=getelementptr inbounds i8,i8*%az,i64 24
%aJ=bitcast i8*%aI to i32*
store i32 -2147483647,i32*%aJ,align 4
%aK=call i8*@sml_alloc(i32 inreg 28)#0
%aL=getelementptr inbounds i8,i8*%aK,i64 -4
%aM=bitcast i8*%aL to i32*
store i32 1342177304,i32*%aM,align 4
%aN=load i8*,i8**%h,align 8
%aO=bitcast i8*%aK to i8**
store i8*%aN,i8**%aO,align 8
%aP=getelementptr inbounds i8,i8*%aK,i64 8
%aQ=bitcast i8*%aP to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6mergef_480 to void(...)*),void(...)**%aQ,align 8
%aR=getelementptr inbounds i8,i8*%aK,i64 16
%aS=bitcast i8*%aR to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6mergef_480 to void(...)*),void(...)**%aS,align 8
%aT=getelementptr inbounds i8,i8*%aK,i64 24
%aU=bitcast i8*%aT to i32*
store i32 -2147483647,i32*%aU,align 4
%aV=load i8*,i8**%e,align 8
%aW=getelementptr inbounds i8,i8*%aV,i64 24
%aX=bitcast i8*%aW to i8**
%aY=load i8*,i8**%aX,align 8
%aZ=getelementptr inbounds i8,i8*%aV,i64 40
%a0=bitcast i8*%aZ to i32*
%a1=load i32,i32*%a0,align 4
%a2=getelementptr inbounds i8,i8*%aV,i64 44
%a3=bitcast i8*%a2 to i32*
%a4=load i32,i32*%a3,align 4
%a5=call fastcc i8*@_SMLL10listItemsi_377(i8*inreg%aY,i32 inreg%a1,i32 inreg%a4)
%a6=getelementptr inbounds i8,i8*%a5,i64 16
%a7=bitcast i8*%a6 to i8*(i8*,i8*)**
%a8=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a7,align 8
%a9=bitcast i8*%a5 to i8**
%ba=load i8*,i8**%a9,align 8
%bb=bitcast i8**%c to i8***
%bc=load i8**,i8***%bb,align 8
%bd=load i8*,i8**%bc,align 8
%be=call fastcc i8*%a8(i8*inreg%ba,i8*inreg%bd)
store i8*%be,i8**%d,align 8
%bf=load i8*,i8**%e,align 8
%bg=getelementptr inbounds i8,i8*%bf,i64 24
%bh=bitcast i8*%bg to i8**
%bi=load i8*,i8**%bh,align 8
%bj=getelementptr inbounds i8,i8*%bf,i64 48
%bk=bitcast i8*%bj to i32*
%bl=load i32,i32*%bk,align 4
%bm=getelementptr inbounds i8,i8*%bf,i64 52
%bn=bitcast i8*%bm to i32*
%bo=load i32,i32*%bn,align 4
%bp=call fastcc i8*@_SMLL10listItemsi_377(i8*inreg%bi,i32 inreg%bl,i32 inreg%bo)
%bq=getelementptr inbounds i8,i8*%bp,i64 16
%br=bitcast i8*%bq to i8*(i8*,i8*)**
%bs=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%br,align 8
%bt=bitcast i8*%bp to i8**
%bu=load i8*,i8**%bt,align 8
%bv=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bw=getelementptr inbounds i8,i8*%bv,i64 8
%bx=bitcast i8*%bw to i8**
%by=load i8*,i8**%bx,align 8
%bz=call fastcc i8*%bs(i8*inreg%bu,i8*inreg%by)
store i8*%bz,i8**%c,align 8
%bA=call i8*@sml_alloc(i32 inreg 28)#0
%bB=getelementptr inbounds i8,i8*%bA,i64 -4
%bC=bitcast i8*%bB to i32*
store i32 1342177304,i32*%bC,align 4
%bD=load i8*,i8**%d,align 8
%bE=bitcast i8*%bA to i8**
store i8*%bD,i8**%bE,align 8
%bF=load i8*,i8**%c,align 8
%bG=getelementptr inbounds i8,i8*%bA,i64 8
%bH=bitcast i8*%bG to i8**
store i8*%bF,i8**%bH,align 8
%bI=getelementptr inbounds i8,i8*%bA,i64 16
%bJ=bitcast i8*%bI to i8**
store i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@a,i64 0,i32 2)to i8*),i8**%bJ,align 8
%bK=getelementptr inbounds i8,i8*%bA,i64 24
%bL=bitcast i8*%bK to i32*
store i32 7,i32*%bL,align 4
store i8*%bD,i8**%c,align 8
store i8*%bF,i8**%d,align 8
store i8*null,i8**%f,align 8
%bM=load i8*,i8**%e,align 8
%bN=getelementptr inbounds i8,i8*%bM,i64 56
%bO=bitcast i8*%bN to i32*
%bP=load i32,i32*%bO,align 4
store i8*null,i8**%e,align 8
%bQ=getelementptr inbounds i8,i8*%bM,i64 60
%bR=bitcast i8*%bQ to i32*
%bS=load i32,i32*%bR,align 4
%bT=call i8*@sml_alloc(i32 inreg 4)#0
%bU=bitcast i8*%bT to i32*
%bV=getelementptr inbounds i8,i8*%bT,i64 -4
%bW=bitcast i8*%bV to i32*
store i32 4,i32*%bW,align 4
store i8*%bT,i8**%e,align 8
store i32%bP,i32*%bU,align 4
%bX=call i8*@sml_alloc(i32 inreg 4)#0
%bY=bitcast i8*%bX to i32*
%bZ=getelementptr inbounds i8,i8*%bX,i64 -4
%b0=bitcast i8*%bZ to i32*
store i32 4,i32*%b0,align 4
store i32%bS,i32*%bY,align 4
store i8*null,i8**%f,align 8
store i8*null,i8**%e,align 8
%b1=call i8*@sml_alloc(i32 inreg 28)#0
%b2=getelementptr inbounds i8,i8*%b1,i64 -4
%b3=bitcast i8*%b2 to i32*
store i32 1342177304,i32*%b3,align 4
%b4=load i8*,i8**%c,align 8
%b5=bitcast i8*%b1 to i8**
store i8*%b4,i8**%b5,align 8
%b6=load i8*,i8**%d,align 8
%b7=getelementptr inbounds i8,i8*%b1,i64 8
%b8=bitcast i8*%b7 to i8**
store i8*%b6,i8**%b8,align 8
%b9=load i8*,i8**%e,align 8
%ca=getelementptr inbounds i8,i8*%b1,i64 16
%cb=bitcast i8*%ca to i8**
store i8*%b9,i8**%cb,align 8
%cc=getelementptr inbounds i8,i8*%b1,i64 24
%cd=bitcast i8*%cc to i32*
store i32 7,i32*%cd,align 4
%ce=load i8*,i8**%h,align 8
%cf=tail call fastcc i8*@_SMLL5merge_479(i8*inreg%ce,i8*inreg%b1)
ret i8*%cf
}
define internal fastcc i8*@_SMLL9mergeWith_483(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%b,i8**%c,align 8
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%d,align 8
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
store i8*%l,i8**%e,align 8
%m=getelementptr inbounds i8,i8*%a,i64 16
%n=bitcast i8*%m to i8**
%o=load i8*,i8**%n,align 8
store i8*%o,i8**%f,align 8
%p=getelementptr inbounds i8,i8*%a,i64 24
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=getelementptr inbounds i8,i8*%a,i64 28
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=getelementptr inbounds i8,i8*%a,i64 32
%w=bitcast i8*%v to i32*
%x=load i32,i32*%w,align 4
%y=getelementptr inbounds i8,i8*%a,i64 36
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=getelementptr inbounds i8,i8*%a,i64 40
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=getelementptr inbounds i8,i8*%a,i64 44
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
%H=getelementptr inbounds i8,i8*%a,i64 48
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
%K=getelementptr inbounds i8,i8*%a,i64 52
%L=bitcast i8*%K to i32*
%M=load i32,i32*%L,align 4
%N=call i8*@sml_alloc(i32 inreg 68)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32 1342177344,i32*%P,align 4
store i8*%N,i8**%g,align 8
%Q=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%R=bitcast i8*%N to i8**
store i8*%Q,i8**%R,align 8
%S=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%T=getelementptr inbounds i8,i8*%N,i64 8
%U=bitcast i8*%T to i8**
store i8*%S,i8**%U,align 8
%V=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%W=getelementptr inbounds i8,i8*%N,i64 16
%X=bitcast i8*%W to i8**
store i8*%V,i8**%X,align 8
%Y=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%Z=getelementptr inbounds i8,i8*%N,i64 24
%aa=bitcast i8*%Z to i8**
store i8*%Y,i8**%aa,align 8
%ab=getelementptr inbounds i8,i8*%N,i64 32
%ac=bitcast i8*%ab to i32*
store i32%r,i32*%ac,align 4
%ad=getelementptr inbounds i8,i8*%N,i64 36
%ae=bitcast i8*%ad to i32*
store i32%u,i32*%ae,align 4
%af=getelementptr inbounds i8,i8*%N,i64 40
%ag=bitcast i8*%af to i32*
store i32%x,i32*%ag,align 4
%ah=getelementptr inbounds i8,i8*%N,i64 44
%ai=bitcast i8*%ah to i32*
store i32%A,i32*%ai,align 4
%aj=getelementptr inbounds i8,i8*%N,i64 48
%ak=bitcast i8*%aj to i32*
store i32%D,i32*%ak,align 4
%al=getelementptr inbounds i8,i8*%N,i64 52
%am=bitcast i8*%al to i32*
store i32%G,i32*%am,align 4
%an=getelementptr inbounds i8,i8*%N,i64 56
%ao=bitcast i8*%an to i32*
store i32%J,i32*%ao,align 4
%ap=getelementptr inbounds i8,i8*%N,i64 60
%aq=bitcast i8*%ap to i32*
store i32%M,i32*%aq,align 4
%ar=getelementptr inbounds i8,i8*%N,i64 64
%as=bitcast i8*%ar to i32*
store i32 15,i32*%as,align 4
%at=call i8*@sml_alloc(i32 inreg 28)#0
%au=getelementptr inbounds i8,i8*%at,i64 -4
%av=bitcast i8*%au to i32*
store i32 1342177304,i32*%av,align 4
%aw=load i8*,i8**%g,align 8
%ax=bitcast i8*%at to i8**
store i8*%aw,i8**%ax,align 8
%ay=getelementptr inbounds i8,i8*%at,i64 8
%az=bitcast i8*%ay to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL9mergeWith_482 to void(...)*),void(...)**%az,align 8
%aA=getelementptr inbounds i8,i8*%at,i64 16
%aB=bitcast i8*%aA to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL9mergeWith_482 to void(...)*),void(...)**%aB,align 8
%aC=getelementptr inbounds i8,i8*%at,i64 24
%aD=bitcast i8*%aC to i32*
store i32 -2147483647,i32*%aD,align 4
ret i8*%at
}
define internal fastcc i8*@_SMLL9mergeWith_484(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e,i32 inreg%f,i32 inreg%g)#4 gc"smlsharp"{
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
%k=alloca i8*,align 8
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
call void@llvm.gcroot(i8**%k,i8*null)#0
%l=bitcast i8*%a to i8**
%m=load i8*,i8**%l,align 8
store i8*%m,i8**%h,align 8
%n=getelementptr inbounds i8,i8*%a,i64 8
%o=bitcast i8*%n to i8**
%p=load i8*,i8**%o,align 8
store i8*%p,i8**%i,align 8
%q=getelementptr inbounds i8,i8*%a,i64 16
%r=bitcast i8*%q to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%j,align 8
%t=getelementptr inbounds i8,i8*%a,i64 24
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=getelementptr inbounds i8,i8*%a,i64 28
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=call i8*@sml_alloc(i32 inreg 60)#0
%A=getelementptr inbounds i8,i8*%z,i64 -4
%B=bitcast i8*%A to i32*
store i32 1342177336,i32*%B,align 4
store i8*%z,i8**%k,align 8
%C=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%D=bitcast i8*%z to i8**
store i8*%C,i8**%D,align 8
%E=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%F=getelementptr inbounds i8,i8*%z,i64 8
%G=bitcast i8*%F to i8**
store i8*%E,i8**%G,align 8
%H=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%I=getelementptr inbounds i8,i8*%z,i64 16
%J=bitcast i8*%I to i8**
store i8*%H,i8**%J,align 8
%K=getelementptr inbounds i8,i8*%z,i64 24
%L=bitcast i8*%K to i32*
store i32%v,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%z,i64 28
%N=bitcast i8*%M to i32*
store i32%y,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%z,i64 32
%P=bitcast i8*%O to i32*
store i32%b,i32*%P,align 4
%Q=getelementptr inbounds i8,i8*%z,i64 36
%R=bitcast i8*%Q to i32*
store i32%c,i32*%R,align 4
%S=getelementptr inbounds i8,i8*%z,i64 40
%T=bitcast i8*%S to i32*
store i32%d,i32*%T,align 4
%U=getelementptr inbounds i8,i8*%z,i64 44
%V=bitcast i8*%U to i32*
store i32%e,i32*%V,align 4
%W=getelementptr inbounds i8,i8*%z,i64 48
%X=bitcast i8*%W to i32*
store i32%f,i32*%X,align 4
%Y=getelementptr inbounds i8,i8*%z,i64 52
%Z=bitcast i8*%Y to i32*
store i32%g,i32*%Z,align 4
%aa=getelementptr inbounds i8,i8*%z,i64 56
%ab=bitcast i8*%aa to i32*
store i32 7,i32*%ab,align 4
%ac=call i8*@sml_alloc(i32 inreg 28)#0
%ad=getelementptr inbounds i8,i8*%ac,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 1342177304,i32*%ae,align 4
%af=load i8*,i8**%k,align 8
%ag=bitcast i8*%ac to i8**
store i8*%af,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%ac,i64 8
%ai=bitcast i8*%ah to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL9mergeWith_483 to void(...)*),void(...)**%ai,align 8
%aj=getelementptr inbounds i8,i8*%ac,i64 16
%ak=bitcast i8*%aj to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL9mergeWith_483 to void(...)*),void(...)**%ak,align 8
%al=getelementptr inbounds i8,i8*%ac,i64 24
%am=bitcast i8*%al to i32*
store i32 -2147483647,i32*%am,align 4
ret i8*%ac
}
define internal fastcc i8*@_SMLL5merge_485(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
%k=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
call void@llvm.gcroot(i8**%k,i8*null)#0
store i8*%a,i8**%j,align 8
store i8*%b,i8**%c,align 8
%l=load atomic i32,i32*@sml_check_flag unordered,align 4
%m=icmp eq i32%l,0
br i1%m,label%n,label%p
n:
%o=bitcast i8*%b to i8**
br label%u
p:
call void@sml_check(i32 inreg%l)
%q=bitcast i8**%c to i8***
%r=load i8**,i8***%q,align 8
%s=load i8*,i8**%j,align 8
%t=bitcast i8**%r to i8*
br label%u
u:
%v=phi i8*[%t,%p],[%b,%n]
%w=phi i8*[%s,%p],[%a,%n]
%x=phi i8**[%r,%p],[%o,%n]
%y=getelementptr inbounds i8,i8*%w,i64 28
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=add i32%A,-1
%C=sub i32 0,%A
%D=and i32%B,%C
%E=add i32%D,%A
%F=add i32%E,-1
%G=add i32%F,%A
%H=and i32%G,%C
%I=add i32%A,7
%J=add i32%I,%H
%K=and i32%J,-8
%L=lshr i32%H,3
%M=lshr i32%D,3
%N=sub nsw i32%L,%M
%O=getelementptr inbounds i8,i8*%w,i64 24
%P=bitcast i8*%O to i32*
%Q=load i32,i32*%P,align 4
%R=shl i32%Q,%N
%S=or i32%R,%Q
%T=or i32%K,4
%U=getelementptr inbounds i8,i8*%w,i64 36
%V=bitcast i8*%U to i32*
%W=load i32,i32*%V,align 4
%X=add i32%F,%W
%Y=sub i32 0,%W
%Z=and i32%X,%Y
%aa=add i32%W,-1
%ab=and i32%aa,%Y
%ac=add i32%W,7
%ad=add i32%ac,%ab
%ae=and i32%ad,-8
%af=getelementptr inbounds i8,i8*%w,i64 32
%ag=bitcast i8*%af to i32*
%ah=load i32,i32*%ag,align 4
%ai=or i32%ae,4
%aj=getelementptr inbounds i8,i8*%w,i64 44
%ak=bitcast i8*%aj to i32*
%al=load i32,i32*%ak,align 4
%am=add i32%F,%al
%an=sub i32 0,%al
%ao=and i32%am,%an
%ap=add i32%al,-1
%aq=and i32%ap,%an
%ar=add i32%al,7
%as=add i32%ar,%aq
%at=and i32%as,-8
%au=getelementptr inbounds i8,i8*%w,i64 40
%av=bitcast i8*%au to i32*
%aw=load i32,i32*%av,align 4
%ax=or i32%at,4
%ay=add i32%E,7
%az=and i32%ay,-8
%aA=add i32%az,15
%aB=and i32%aA,-8
%aC=add i32%aB,15
%aD=and i32%aC,-8
%aE=add i32%aD,15
%aF=and i32%aE,-8
%aG=add i32%aF,15
%aH=and i32%aG,-8
%aI=add i32%aH,15
%aJ=and i32%aI,-8
%aK=lshr i32%aG,3
%aL=lshr i32%aE,3
%aM=sub nsw i32%aK,%aL
%aN=lshr i32%aC,3
%aO=sub nsw i32%aL,%aN
%aP=lshr i32%aA,3
%aQ=sub nsw i32%aN,%aP
%aR=lshr i32%ay,3
%aS=sub nsw i32%aP,%aR
%aT=sub nsw i32%aR,%M
%aU=shl i32 1,%aM
%aV=or i32%aU,1
%aW=shl i32%aV,%aO
%aX=or i32%aW,1
%aY=shl i32%aX,%aQ
%aZ=or i32%aY,1
%a0=shl i32%aZ,%aS
%a1=or i32%a0,1
%a2=shl i32%a1,%aT
%a3=or i32%a2,%Q
%a4=or i32%aJ,4
%a5=load i8*,i8**%x,align 8
store i8*%a5,i8**%d,align 8
%a6=icmp eq i8*%a5,null
%a7=bitcast i8*%a5 to i8**
br i1%a6,label%a8,label%de
a8:
%a9=getelementptr inbounds i8,i8*%v,i64 8
%ba=bitcast i8*%a9 to i8**
%bb=load i8*,i8**%ba,align 8
%bc=icmp eq i8*%bb,null
br i1%bc,label%bd,label%bh
bd:
%be=getelementptr inbounds i8,i8*%v,i64 16
%bf=bitcast i8*%be to i8**
%bg=load i8*,i8**%bf,align 8
ret i8*%bg
bh:
store i8*%bb,i8**%f,align 8
%bi=bitcast i8*%bb to i8**
%bj=load i8*,i8**%bi,align 8
store i8*%bj,i8**%d,align 8
%bk=icmp eq i32%Q,0
br i1%bk,label%bq,label%bl
bl:
store i8*null,i8**%d,align 8
%bm=sext i32%D to i64
%bn=getelementptr inbounds i8,i8*%bj,i64%bm
%bo=bitcast i8*%bn to i8**
%bp=load i8*,i8**%bo,align 8
br label%bE
bq:
%br=call i8*@sml_alloc(i32 inreg%A)#0
%bs=getelementptr inbounds i8,i8*%br,i64 -4
%bt=bitcast i8*%bs to i32*
store i32%A,i32*%bt,align 4
%bu=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bv=sext i32%D to i64
%bw=getelementptr inbounds i8,i8*%bu,i64%bv
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%br,i8*%bw,i32%A,i1 false)
%bx=load i8*,i8**%f,align 8
%by=load i8*,i8**%c,align 8
%bz=bitcast i8*%bx to i8**
%bA=load i8*,i8**%j,align 8
%bB=getelementptr inbounds i8,i8*%bA,i64 40
%bC=bitcast i8*%bB to i32*
%bD=load i32,i32*%bC,align 4
br label%bE
bE:
%bF=phi i32[%bD,%bq],[%aw,%bl]
%bG=phi i8*[%bA,%bq],[%w,%bl]
%bH=phi i8**[%bz,%bq],[%bi,%bl]
%bI=phi i8*[%by,%bq],[%v,%bl]
%bJ=phi i8*[%bx,%bq],[%bb,%bl]
%bK=phi i8*[%br,%bq],[%bp,%bl]
store i8*%bK,i8**%d,align 8
%bL=getelementptr inbounds i8,i8*%bJ,i64 8
%bM=bitcast i8*%bL to i8**
%bN=load i8*,i8**%bM,align 8
store i8*%bN,i8**%e,align 8
%bO=getelementptr inbounds i8,i8*%bI,i64 16
%bP=bitcast i8*%bO to i8**
%bQ=load i8*,i8**%bP,align 8
store i8*%bQ,i8**%c,align 8
%bR=load i8*,i8**%bH,align 8
store i8*%bR,i8**%f,align 8
%bS=icmp eq i32%bF,0
br i1%bS,label%bY,label%bT
bT:
store i8*null,i8**%f,align 8
%bU=sext i32%ao to i64
%bV=getelementptr inbounds i8,i8*%bR,i64%bU
%bW=bitcast i8*%bV to i8**
%bX=load i8*,i8**%bW,align 8
br label%cc
bY:
%bZ=getelementptr inbounds i8,i8*%bG,i64 44
%b0=bitcast i8*%bZ to i32*
%b1=load i32,i32*%b0,align 4
%b2=call i8*@sml_alloc(i32 inreg%b1)#0
%b3=getelementptr inbounds i8,i8*%b2,i64 -4
%b4=bitcast i8*%b3 to i32*
store i32%b1,i32*%b4,align 4
%b5=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%b6=sext i32%ao to i64
%b7=getelementptr inbounds i8,i8*%b5,i64%b6
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%b2,i8*%b7,i32%b1,i1 false)
%b8=load i8*,i8**%j,align 8
%b9=getelementptr inbounds i8,i8*%b8,i64 40
%ca=bitcast i8*%b9 to i32*
%cb=load i32,i32*%ca,align 4
br label%cc
cc:
%cd=phi i32[%cb,%bY],[%bF,%bT]
%ce=phi i8*[%b8,%bY],[%bG,%bT]
%cf=phi i8*[%b2,%bY],[%bX,%bT]
store i8*%cf,i8**%f,align 8
%cg=getelementptr inbounds i8,i8*%ce,i64 44
%ch=bitcast i8*%cg to i32*
%ci=load i32,i32*%ch,align 4
%cj=call i8*@sml_alloc(i32 inreg%ax)#0
%ck=or i32%at,1342177280
%cl=getelementptr inbounds i8,i8*%cj,i64 -4
%cm=bitcast i8*%cl to i32*
store i32%ck,i32*%cm,align 4
store i8*%cj,i8**%g,align 8
call void@llvm.memset.p0i8.i32(i8*%cj,i8 0,i32%ax,i1 false)
%cn=icmp eq i32%cd,0
%co=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%cp=sext i32%aq to i64
%cq=getelementptr inbounds i8,i8*%cj,i64%cp
br i1%cn,label%ct,label%cr
cr:
%cs=bitcast i8*%cq to i8**
store i8*%co,i8**%cs,align 8
br label%cu
ct:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cq,i8*%co,i32%ci,i1 false)
br label%cu
cu:
%cv=sext i32%at to i64
%cw=getelementptr inbounds i8,i8*%cj,i64%cv
%cx=bitcast i8*%cw to i32*
store i32%aw,i32*%cx,align 4
%cy=load i8*,i8**%j,align 8
%cz=getelementptr inbounds i8,i8*%cy,i64 28
%cA=bitcast i8*%cz to i32*
%cB=load i32,i32*%cA,align 4
%cC=getelementptr inbounds i8,i8*%cy,i64 24
%cD=bitcast i8*%cC to i32*
%cE=load i32,i32*%cD,align 4
%cF=call i8*@sml_alloc(i32 inreg%a4)#0
%cG=or i32%aJ,1342177280
%cH=getelementptr inbounds i8,i8*%cF,i64 -4
%cI=bitcast i8*%cH to i32*
store i32%cG,i32*%cI,align 4
call void@llvm.memset.p0i8.i32(i8*%cF,i8 0,i32%a4,i1 false)
%cJ=icmp eq i32%cE,0
%cK=load i8*,i8**%d,align 8
%cL=sext i32%D to i64
%cM=getelementptr inbounds i8,i8*%cF,i64%cL
br i1%cJ,label%cP,label%cN
cN:
%cO=bitcast i8*%cM to i8**
store i8*%cK,i8**%cO,align 8
br label%cQ
cP:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cM,i8*%cK,i32%cB,i1 false)
br label%cQ
cQ:
%cR=sext i32%az to i64
%cS=getelementptr inbounds i8,i8*%cF,i64%cR
%cT=bitcast i8*%cS to i8**
store i8*null,i8**%cT,align 8
%cU=load i8*,i8**%g,align 8
%cV=sext i32%aB to i64
%cW=getelementptr inbounds i8,i8*%cF,i64%cV
%cX=bitcast i8*%cW to i8**
store i8*%cU,i8**%cX,align 8
%cY=sext i32%aD to i64
%cZ=getelementptr inbounds i8,i8*%cF,i64%cY
%c0=bitcast i8*%cZ to i8**
store i8*null,i8**%c0,align 8
%c1=load i8*,i8**%e,align 8
%c2=sext i32%aF to i64
%c3=getelementptr inbounds i8,i8*%cF,i64%c2
%c4=bitcast i8*%c3 to i8**
store i8*%c1,i8**%c4,align 8
%c5=load i8*,i8**%c,align 8
%c6=sext i32%aH to i64
%c7=getelementptr inbounds i8,i8*%cF,i64%c6
%c8=bitcast i8*%c7 to i8**
store i8*%c5,i8**%c8,align 8
%c9=sext i32%aJ to i64
%da=getelementptr inbounds i8,i8*%cF,i64%c9
%db=bitcast i8*%da to i32*
store i32%a3,i32*%db,align 4
%dc=load i8*,i8**%j,align 8
%dd=tail call fastcc i8*@_SMLL6mergef_486(i8*inreg%dc,i8*inreg%cF)
ret i8*%dd
de:
%df=load i8*,i8**%a7,align 8
store i8*%df,i8**%e,align 8
%dg=icmp eq i32%Q,0
br i1%dg,label%dm,label%dh
dh:
store i8*null,i8**%e,align 8
%di=sext i32%D to i64
%dj=getelementptr inbounds i8,i8*%df,i64%di
%dk=bitcast i8*%dj to i8**
%dl=load i8*,i8**%dk,align 8
br label%dw
dm:
%dn=call i8*@sml_alloc(i32 inreg%A)#0
%do=getelementptr inbounds i8,i8*%dn,i64 -4
%dp=bitcast i8*%do to i32*
store i32%A,i32*%dp,align 4
%dq=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%dr=sext i32%D to i64
%ds=getelementptr inbounds i8,i8*%dq,i64%dr
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dn,i8*%ds,i32%A,i1 false)
%dt=load i8*,i8**%d,align 8
%du=load i8*,i8**%c,align 8
%dv=bitcast i8*%dt to i8**
br label%dw
dw:
%dx=phi i8**[%dv,%dm],[%a7,%dh]
%dy=phi i8*[%du,%dm],[%v,%dh]
%dz=phi i8*[%dt,%dm],[%a5,%dh]
%dA=phi i8*[%dn,%dm],[%dl,%dh]
store i8*%dA,i8**%e,align 8
%dB=getelementptr inbounds i8,i8*%dz,i64 8
%dC=bitcast i8*%dB to i8**
%dD=load i8*,i8**%dC,align 8
store i8*%dD,i8**%f,align 8
%dE=getelementptr inbounds i8,i8*%dy,i64 8
%dF=bitcast i8*%dE to i8**
%dG=load i8*,i8**%dF,align 8
store i8*%dG,i8**%g,align 8
%dH=icmp eq i8*%dG,null
br i1%dH,label%dI,label%fd
dI:
store i8*null,i8**%g,align 8
%dJ=getelementptr inbounds i8,i8*%dy,i64 16
%dK=bitcast i8*%dJ to i8**
%dL=load i8*,i8**%dK,align 8
store i8*%dL,i8**%c,align 8
%dM=load i8*,i8**%dx,align 8
store i8*%dM,i8**%d,align 8
%dN=load i8*,i8**%j,align 8
%dO=getelementptr inbounds i8,i8*%dN,i64 32
%dP=bitcast i8*%dO to i32*
%dQ=load i32,i32*%dP,align 4
%dR=icmp eq i32%dQ,0
br i1%dR,label%dX,label%dS
dS:
store i8*null,i8**%d,align 8
%dT=sext i32%Z to i64
%dU=getelementptr inbounds i8,i8*%dM,i64%dT
%dV=bitcast i8*%dU to i8**
%dW=load i8*,i8**%dV,align 8
br label%eb
dX:
%dY=getelementptr inbounds i8,i8*%dN,i64 36
%dZ=bitcast i8*%dY to i32*
%d0=load i32,i32*%dZ,align 4
%d1=call i8*@sml_alloc(i32 inreg%d0)#0
%d2=getelementptr inbounds i8,i8*%d1,i64 -4
%d3=bitcast i8*%d2 to i32*
store i32%d0,i32*%d3,align 4
%d4=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%d5=sext i32%Z to i64
%d6=getelementptr inbounds i8,i8*%d4,i64%d5
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%d1,i8*%d6,i32%d0,i1 false)
%d7=load i8*,i8**%j,align 8
%d8=getelementptr inbounds i8,i8*%d7,i64 32
%d9=bitcast i8*%d8 to i32*
%ea=load i32,i32*%d9,align 4
br label%eb
eb:
%ec=phi i32[%ea,%dX],[%dQ,%dS]
%ed=phi i8*[%d7,%dX],[%dN,%dS]
%ee=phi i8*[%d1,%dX],[%dW,%dS]
store i8*%ee,i8**%d,align 8
%ef=getelementptr inbounds i8,i8*%ed,i64 36
%eg=bitcast i8*%ef to i32*
%eh=load i32,i32*%eg,align 4
%ei=call i8*@sml_alloc(i32 inreg%ai)#0
%ej=or i32%ae,1342177280
%ek=getelementptr inbounds i8,i8*%ei,i64 -4
%el=bitcast i8*%ek to i32*
store i32%ej,i32*%el,align 4
store i8*%ei,i8**%g,align 8
call void@llvm.memset.p0i8.i32(i8*%ei,i8 0,i32%ai,i1 false)
%em=icmp eq i32%ec,0
%en=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%eo=sext i32%ab to i64
%ep=getelementptr inbounds i8,i8*%ei,i64%eo
br i1%em,label%es,label%eq
eq:
%er=bitcast i8*%ep to i8**
store i8*%en,i8**%er,align 8
br label%et
es:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ep,i8*%en,i32%eh,i1 false)
br label%et
et:
%eu=sext i32%ae to i64
%ev=getelementptr inbounds i8,i8*%ei,i64%eu
%ew=bitcast i8*%ev to i32*
store i32%ah,i32*%ew,align 4
%ex=load i8*,i8**%j,align 8
%ey=getelementptr inbounds i8,i8*%ex,i64 28
%ez=bitcast i8*%ey to i32*
%eA=load i32,i32*%ez,align 4
%eB=getelementptr inbounds i8,i8*%ex,i64 24
%eC=bitcast i8*%eB to i32*
%eD=load i32,i32*%eC,align 4
%eE=call i8*@sml_alloc(i32 inreg%a4)#0
%eF=or i32%aJ,1342177280
%eG=getelementptr inbounds i8,i8*%eE,i64 -4
%eH=bitcast i8*%eG to i32*
store i32%eF,i32*%eH,align 4
call void@llvm.memset.p0i8.i32(i8*%eE,i8 0,i32%a4,i1 false)
%eI=icmp eq i32%eD,0
%eJ=load i8*,i8**%e,align 8
%eK=sext i32%D to i64
%eL=getelementptr inbounds i8,i8*%eE,i64%eK
br i1%eI,label%eO,label%eM
eM:
%eN=bitcast i8*%eL to i8**
store i8*%eJ,i8**%eN,align 8
br label%eP
eO:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%eL,i8*%eJ,i32%eA,i1 false)
br label%eP
eP:
%eQ=load i8*,i8**%g,align 8
%eR=sext i32%az to i64
%eS=getelementptr inbounds i8,i8*%eE,i64%eR
%eT=bitcast i8*%eS to i8**
store i8*%eQ,i8**%eT,align 8
%eU=sext i32%aB to i64
%eV=getelementptr inbounds i8,i8*%eE,i64%eU
%eW=bitcast i8*%eV to i8**
store i8*null,i8**%eW,align 8
%eX=load i8*,i8**%f,align 8
%eY=sext i32%aD to i64
%eZ=getelementptr inbounds i8,i8*%eE,i64%eY
%e0=bitcast i8*%eZ to i8**
store i8*%eX,i8**%e0,align 8
%e1=sext i32%aF to i64
%e2=getelementptr inbounds i8,i8*%eE,i64%e1
%e3=bitcast i8*%e2 to i8**
store i8*null,i8**%e3,align 8
%e4=load i8*,i8**%c,align 8
%e5=sext i32%aH to i64
%e6=getelementptr inbounds i8,i8*%eE,i64%e5
%e7=bitcast i8*%e6 to i8**
store i8*%e4,i8**%e7,align 8
%e8=sext i32%aJ to i64
%e9=getelementptr inbounds i8,i8*%eE,i64%e8
%fa=bitcast i8*%e9 to i32*
store i32%a3,i32*%fa,align 4
%fb=load i8*,i8**%j,align 8
%fc=tail call fastcc i8*@_SMLL6mergef_486(i8*inreg%fb,i8*inreg%eE)
ret i8*%fc
fd:
%fe=bitcast i8*%dG to i8**
%ff=load i8*,i8**%fe,align 8
store i8*%ff,i8**%h,align 8
%fg=load i8*,i8**%j,align 8
%fh=getelementptr inbounds i8,i8*%fg,i64 24
%fi=bitcast i8*%fh to i32*
%fj=load i32,i32*%fi,align 4
%fk=icmp eq i32%fj,0
br i1%fk,label%fr,label%fl
fl:
%fm=bitcast i8*%fg to i8**
store i8*null,i8**%h,align 8
%fn=sext i32%D to i64
%fo=getelementptr inbounds i8,i8*%ff,i64%fn
%fp=bitcast i8*%fo to i8**
%fq=load i8*,i8**%fp,align 8
br label%fJ
fr:
%fs=getelementptr inbounds i8,i8*%fg,i64 28
%ft=bitcast i8*%fs to i32*
%fu=load i32,i32*%ft,align 4
%fv=call i8*@sml_alloc(i32 inreg%fu)#0
%fw=getelementptr inbounds i8,i8*%fv,i64 -4
%fx=bitcast i8*%fw to i32*
store i32%fu,i32*%fx,align 4
%fy=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%fz=sext i32%D to i64
%fA=getelementptr inbounds i8,i8*%fy,i64%fz
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%fv,i8*%fA,i32%fu,i1 false)
%fB=load i8*,i8**%g,align 8
%fC=load i8*,i8**%c,align 8
%fD=bitcast i8**%j to i8***
%fE=load i8**,i8***%fD,align 8
%fF=bitcast i8**%fE to i8*
%fG=getelementptr inbounds i8*,i8**%fE,i64 3
%fH=bitcast i8**%fG to i32*
%fI=load i32,i32*%fH,align 4
br label%fJ
fJ:
%fK=phi i64[%fz,%fr],[%fn,%fl]
%fL=phi i32[%fI,%fr],[%fj,%fl]
%fM=phi i8*[%fF,%fr],[%fg,%fl]
%fN=phi i8**[%fE,%fr],[%fm,%fl]
%fO=phi i8*[%fC,%fr],[%dy,%fl]
%fP=phi i8*[%fB,%fr],[%dG,%fl]
%fQ=phi i8*[%fv,%fr],[%fq,%fl]
store i8*%fQ,i8**%h,align 8
%fR=getelementptr inbounds i8,i8*%fP,i64 8
%fS=bitcast i8*%fR to i8**
%fT=load i8*,i8**%fS,align 8
store i8*%fT,i8**%i,align 8
%fU=getelementptr inbounds i8,i8*%fO,i64 16
%fV=bitcast i8*%fU to i8**
%fW=load i8*,i8**%fV,align 8
store i8*%fW,i8**%c,align 8
%fX=load i8*,i8**%fN,align 8
%fY=getelementptr inbounds i8,i8*%fX,i64 16
%fZ=bitcast i8*%fY to i8*(i8*,i8*)**
%f0=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%fZ,align 8
%f1=bitcast i8*%fX to i8**
%f2=load i8*,i8**%f1,align 8
store i8*%f2,i8**%k,align 8
%f3=getelementptr inbounds i8,i8*%fM,i64 28
%f4=bitcast i8*%f3 to i32*
%f5=load i32,i32*%f4,align 4
%f6=call i8*@sml_alloc(i32 inreg%T)#0
%f7=or i32%K,1342177280
%f8=getelementptr inbounds i8,i8*%f6,i64 -4
%f9=bitcast i8*%f8 to i32*
store i32%f7,i32*%f9,align 4
call void@llvm.memset.p0i8.i32(i8*%f6,i8 0,i32%T,i1 false)
%ga=icmp eq i32%fL,0
%gb=load i8*,i8**%e,align 8
%gc=getelementptr inbounds i8,i8*%f6,i64%fK
br i1%ga,label%gj,label%gd
gd:
%ge=bitcast i8*%gc to i8**
store i8*%gb,i8**%ge,align 8
%gf=load i8*,i8**%h,align 8
%gg=sext i32%H to i64
%gh=getelementptr inbounds i8,i8*%f6,i64%gg
%gi=bitcast i8*%gh to i8**
store i8*%gf,i8**%gi,align 8
br label%gn
gj:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%gc,i8*%gb,i32%f5,i1 false)
%gk=load i8*,i8**%h,align 8
%gl=sext i32%H to i64
%gm=getelementptr inbounds i8,i8*%f6,i64%gl
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%gm,i8*%gk,i32%f5,i1 false)
br label%gn
gn:
%go=sext i32%K to i64
%gp=getelementptr inbounds i8,i8*%f6,i64%go
%gq=bitcast i8*%gp to i32*
store i32%S,i32*%gq,align 4
%gr=load i8*,i8**%k,align 8
store i8*null,i8**%k,align 8
%gs=call fastcc i8*%f0(i8*inreg%gr,i8*inreg%f6)
%gt=bitcast i8*%gs to i32*
%gu=load i32,i32*%gt,align 4
switch i32%gu,label%gv[
i32 0,label%jL
i32 1,label%ih
i32 2,label%gN
]
gv:
store i8*null,i8**%d,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%f,align 8
store i8*null,i8**%g,align 8
store i8*null,i8**%h,align 8
store i8*null,i8**%i,align 8
store i8*null,i8**%j,align 8
call void@sml_matchcomp_bug()
%gw=load i8*,i8**@_SMLZ5Match,align 8
store i8*%gw,i8**%c,align 8
%gx=call i8*@sml_alloc(i32 inreg 20)#0
%gy=getelementptr inbounds i8,i8*%gx,i64 -4
%gz=bitcast i8*%gy to i32*
store i32 1342177296,i32*%gz,align 4
store i8*%gx,i8**%d,align 8
%gA=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%gB=bitcast i8*%gx to i8**
store i8*%gA,i8**%gB,align 8
%gC=getelementptr inbounds i8,i8*%gx,i64 8
%gD=bitcast i8*%gC to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[52x i8]}>,<{[4x i8],i32,[52x i8]}>*@s,i64 0,i32 2,i64 0),i8**%gD,align 8
%gE=getelementptr inbounds i8,i8*%gx,i64 16
%gF=bitcast i8*%gE to i32*
store i32 3,i32*%gF,align 4
%gG=call i8*@sml_alloc(i32 inreg 60)#0
%gH=getelementptr inbounds i8,i8*%gG,i64 -4
%gI=bitcast i8*%gH to i32*
store i32 1342177336,i32*%gI,align 4
%gJ=getelementptr inbounds i8,i8*%gG,i64 56
%gK=bitcast i8*%gJ to i32*
store i32 1,i32*%gK,align 4
%gL=load i8*,i8**%d,align 8
%gM=bitcast i8*%gG to i8**
store i8*%gL,i8**%gM,align 8
call void@sml_raise(i8*inreg%gG)#1
unreachable
gN:
store i8*null,i8**%h,align 8
store i8*null,i8**%i,align 8
%gO=bitcast i8**%d to i8***
%gP=load i8**,i8***%gO,align 8
%gQ=load i8*,i8**%gP,align 8
store i8*%gQ,i8**%d,align 8
%gR=load i8*,i8**%j,align 8
%gS=getelementptr inbounds i8,i8*%gR,i64 32
%gT=bitcast i8*%gS to i32*
%gU=load i32,i32*%gT,align 4
%gV=icmp eq i32%gU,0
br i1%gV,label%g1,label%gW
gW:
store i8*null,i8**%d,align 8
%gX=sext i32%Z to i64
%gY=getelementptr inbounds i8,i8*%gQ,i64%gX
%gZ=bitcast i8*%gY to i8**
%g0=load i8*,i8**%gZ,align 8
br label%hf
g1:
%g2=getelementptr inbounds i8,i8*%gR,i64 36
%g3=bitcast i8*%g2 to i32*
%g4=load i32,i32*%g3,align 4
%g5=call i8*@sml_alloc(i32 inreg%g4)#0
%g6=getelementptr inbounds i8,i8*%g5,i64 -4
%g7=bitcast i8*%g6 to i32*
store i32%g4,i32*%g7,align 4
%g8=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%g9=sext i32%Z to i64
%ha=getelementptr inbounds i8,i8*%g8,i64%g9
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%g5,i8*%ha,i32%g4,i1 false)
%hb=load i8*,i8**%j,align 8
%hc=getelementptr inbounds i8,i8*%hb,i64 32
%hd=bitcast i8*%hc to i32*
%he=load i32,i32*%hd,align 4
br label%hf
hf:
%hg=phi i32[%he,%g1],[%gU,%gW]
%hh=phi i8*[%hb,%g1],[%gR,%gW]
%hi=phi i8*[%g5,%g1],[%g0,%gW]
store i8*%hi,i8**%d,align 8
%hj=getelementptr inbounds i8,i8*%hh,i64 36
%hk=bitcast i8*%hj to i32*
%hl=load i32,i32*%hk,align 4
%hm=call i8*@sml_alloc(i32 inreg%ai)#0
%hn=or i32%ae,1342177280
%ho=getelementptr inbounds i8,i8*%hm,i64 -4
%hp=bitcast i8*%ho to i32*
store i32%hn,i32*%hp,align 4
store i8*%hm,i8**%h,align 8
call void@llvm.memset.p0i8.i32(i8*%hm,i8 0,i32%ai,i1 false)
%hq=icmp eq i32%hg,0
%hr=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%hs=sext i32%ab to i64
%ht=getelementptr inbounds i8,i8*%hm,i64%hs
br i1%hq,label%hw,label%hu
hu:
%hv=bitcast i8*%ht to i8**
store i8*%hr,i8**%hv,align 8
br label%hx
hw:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ht,i8*%hr,i32%hl,i1 false)
br label%hx
hx:
%hy=sext i32%ae to i64
%hz=getelementptr inbounds i8,i8*%hm,i64%hy
%hA=bitcast i8*%hz to i32*
store i32%ah,i32*%hA,align 4
%hB=load i8*,i8**%j,align 8
%hC=getelementptr inbounds i8,i8*%hB,i64 28
%hD=bitcast i8*%hC to i32*
%hE=load i32,i32*%hD,align 4
%hF=getelementptr inbounds i8,i8*%hB,i64 24
%hG=bitcast i8*%hF to i32*
%hH=load i32,i32*%hG,align 4
%hI=call i8*@sml_alloc(i32 inreg%a4)#0
%hJ=or i32%aJ,1342177280
%hK=getelementptr inbounds i8,i8*%hI,i64 -4
%hL=bitcast i8*%hK to i32*
store i32%hJ,i32*%hL,align 4
call void@llvm.memset.p0i8.i32(i8*%hI,i8 0,i32%a4,i1 false)
%hM=icmp eq i32%hH,0
%hN=load i8*,i8**%e,align 8
%hO=getelementptr inbounds i8,i8*%hI,i64%fK
br i1%hM,label%hR,label%hP
hP:
%hQ=bitcast i8*%hO to i8**
store i8*%hN,i8**%hQ,align 8
br label%hS
hR:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%hO,i8*%hN,i32%hE,i1 false)
br label%hS
hS:
%hT=load i8*,i8**%h,align 8
%hU=sext i32%az to i64
%hV=getelementptr inbounds i8,i8*%hI,i64%hU
%hW=bitcast i8*%hV to i8**
store i8*%hT,i8**%hW,align 8
%hX=sext i32%aB to i64
%hY=getelementptr inbounds i8,i8*%hI,i64%hX
%hZ=bitcast i8*%hY to i8**
store i8*null,i8**%hZ,align 8
%h0=load i8*,i8**%f,align 8
%h1=sext i32%aD to i64
%h2=getelementptr inbounds i8,i8*%hI,i64%h1
%h3=bitcast i8*%h2 to i8**
store i8*%h0,i8**%h3,align 8
%h4=load i8*,i8**%g,align 8
%h5=sext i32%aF to i64
%h6=getelementptr inbounds i8,i8*%hI,i64%h5
%h7=bitcast i8*%h6 to i8**
store i8*%h4,i8**%h7,align 8
%h8=load i8*,i8**%c,align 8
%h9=sext i32%aH to i64
%ia=getelementptr inbounds i8,i8*%hI,i64%h9
%ib=bitcast i8*%ia to i8**
store i8*%h8,i8**%ib,align 8
%ic=sext i32%aJ to i64
%id=getelementptr inbounds i8,i8*%hI,i64%ic
%ie=bitcast i8*%id to i32*
store i32%a3,i32*%ie,align 4
%if=load i8*,i8**%j,align 8
%ig=tail call fastcc i8*@_SMLL6mergef_486(i8*inreg%if,i8*inreg%hI)
ret i8*%ig
ih:
store i8*null,i8**%f,align 8
%ii=bitcast i8**%g to i8***
%ij=load i8**,i8***%ii,align 8
store i8*null,i8**%g,align 8
%ik=load i8*,i8**%ij,align 8
store i8*%ik,i8**%e,align 8
%il=load i8*,i8**%j,align 8
%im=getelementptr inbounds i8,i8*%il,i64 40
%in=bitcast i8*%im to i32*
%io=load i32,i32*%in,align 4
%ip=icmp eq i32%io,0
br i1%ip,label%iv,label%iq
iq:
store i8*null,i8**%e,align 8
%ir=sext i32%ao to i64
%is=getelementptr inbounds i8,i8*%ik,i64%ir
%it=bitcast i8*%is to i8**
%iu=load i8*,i8**%it,align 8
br label%iJ
iv:
%iw=getelementptr inbounds i8,i8*%il,i64 44
%ix=bitcast i8*%iw to i32*
%iy=load i32,i32*%ix,align 4
%iz=call i8*@sml_alloc(i32 inreg%iy)#0
%iA=getelementptr inbounds i8,i8*%iz,i64 -4
%iB=bitcast i8*%iA to i32*
store i32%iy,i32*%iB,align 4
%iC=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%iD=sext i32%ao to i64
%iE=getelementptr inbounds i8,i8*%iC,i64%iD
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%iz,i8*%iE,i32%iy,i1 false)
%iF=load i8*,i8**%j,align 8
%iG=getelementptr inbounds i8,i8*%iF,i64 40
%iH=bitcast i8*%iG to i32*
%iI=load i32,i32*%iH,align 4
br label%iJ
iJ:
%iK=phi i32[%iI,%iv],[%io,%iq]
%iL=phi i8*[%iF,%iv],[%il,%iq]
%iM=phi i8*[%iz,%iv],[%iu,%iq]
store i8*%iM,i8**%e,align 8
%iN=getelementptr inbounds i8,i8*%iL,i64 44
%iO=bitcast i8*%iN to i32*
%iP=load i32,i32*%iO,align 4
%iQ=call i8*@sml_alloc(i32 inreg%ax)#0
%iR=or i32%at,1342177280
%iS=getelementptr inbounds i8,i8*%iQ,i64 -4
%iT=bitcast i8*%iS to i32*
store i32%iR,i32*%iT,align 4
store i8*%iQ,i8**%f,align 8
call void@llvm.memset.p0i8.i32(i8*%iQ,i8 0,i32%ax,i1 false)
%iU=icmp eq i32%iK,0
%iV=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%iW=sext i32%aq to i64
%iX=getelementptr inbounds i8,i8*%iQ,i64%iW
br i1%iU,label%i0,label%iY
iY:
%iZ=bitcast i8*%iX to i8**
store i8*%iV,i8**%iZ,align 8
br label%i1
i0:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%iX,i8*%iV,i32%iP,i1 false)
br label%i1
i1:
%i2=sext i32%at to i64
%i3=getelementptr inbounds i8,i8*%iQ,i64%i2
%i4=bitcast i8*%i3 to i32*
store i32%aw,i32*%i4,align 4
%i5=load i8*,i8**%j,align 8
%i6=getelementptr inbounds i8,i8*%i5,i64 28
%i7=bitcast i8*%i6 to i32*
%i8=load i32,i32*%i7,align 4
%i9=getelementptr inbounds i8,i8*%i5,i64 24
%ja=bitcast i8*%i9 to i32*
%jb=load i32,i32*%ja,align 4
%jc=call i8*@sml_alloc(i32 inreg%a4)#0
%jd=or i32%aJ,1342177280
%je=getelementptr inbounds i8,i8*%jc,i64 -4
%jf=bitcast i8*%je to i32*
store i32%jd,i32*%jf,align 4
call void@llvm.memset.p0i8.i32(i8*%jc,i8 0,i32%a4,i1 false)
%jg=icmp eq i32%jb,0
%jh=load i8*,i8**%h,align 8
%ji=getelementptr inbounds i8,i8*%jc,i64%fK
br i1%jg,label%jl,label%jj
jj:
%jk=bitcast i8*%ji to i8**
store i8*%jh,i8**%jk,align 8
br label%jm
jl:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ji,i8*%jh,i32%i8,i1 false)
br label%jm
jm:
%jn=sext i32%az to i64
%jo=getelementptr inbounds i8,i8*%jc,i64%jn
%jp=bitcast i8*%jo to i8**
store i8*null,i8**%jp,align 8
%jq=load i8*,i8**%f,align 8
%jr=sext i32%aB to i64
%js=getelementptr inbounds i8,i8*%jc,i64%jr
%jt=bitcast i8*%js to i8**
store i8*%jq,i8**%jt,align 8
%ju=load i8*,i8**%d,align 8
%jv=sext i32%aD to i64
%jw=getelementptr inbounds i8,i8*%jc,i64%jv
%jx=bitcast i8*%jw to i8**
store i8*%ju,i8**%jx,align 8
%jy=load i8*,i8**%i,align 8
%jz=sext i32%aF to i64
%jA=getelementptr inbounds i8,i8*%jc,i64%jz
%jB=bitcast i8*%jA to i8**
store i8*%jy,i8**%jB,align 8
%jC=load i8*,i8**%c,align 8
%jD=sext i32%aH to i64
%jE=getelementptr inbounds i8,i8*%jc,i64%jD
%jF=bitcast i8*%jE to i8**
store i8*%jC,i8**%jF,align 8
%jG=sext i32%aJ to i64
%jH=getelementptr inbounds i8,i8*%jc,i64%jG
%jI=bitcast i8*%jH to i32*
store i32%a3,i32*%jI,align 4
%jJ=load i8*,i8**%j,align 8
%jK=tail call fastcc i8*@_SMLL6mergef_486(i8*inreg%jJ,i8*inreg%jc)
ret i8*%jK
jL:
store i8*null,i8**%h,align 8
%jM=load i8*,i8**%j,align 8
%jN=getelementptr inbounds i8,i8*%jM,i64 28
%jO=bitcast i8*%jN to i32*
%jP=load i32,i32*%jO,align 4
%jQ=getelementptr inbounds i8,i8*%jM,i64 24
%jR=bitcast i8*%jQ to i32*
%jS=load i32,i32*%jR,align 4
%jT=bitcast i8**%d to i8***
%jU=load i8**,i8***%jT,align 8
%jV=load i8*,i8**%jU,align 8
store i8*%jV,i8**%d,align 8
%jW=getelementptr inbounds i8,i8*%jM,i64 32
%jX=bitcast i8*%jW to i32*
%jY=load i32,i32*%jX,align 4
%jZ=icmp eq i32%jY,0
br i1%jZ,label%j5,label%j0
j0:
store i8*null,i8**%d,align 8
%j1=sext i32%Z to i64
%j2=getelementptr inbounds i8,i8*%jV,i64%j1
%j3=bitcast i8*%j2 to i8**
%j4=load i8*,i8**%j3,align 8
br label%kj
j5:
%j6=getelementptr inbounds i8,i8*%jM,i64 36
%j7=bitcast i8*%j6 to i32*
%j8=load i32,i32*%j7,align 4
%j9=call i8*@sml_alloc(i32 inreg%j8)#0
%ka=getelementptr inbounds i8,i8*%j9,i64 -4
%kb=bitcast i8*%ka to i32*
store i32%j8,i32*%kb,align 4
%kc=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%kd=sext i32%Z to i64
%ke=getelementptr inbounds i8,i8*%kc,i64%kd
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%j9,i8*%ke,i32%j8,i1 false)
%kf=load i8*,i8**%j,align 8
%kg=getelementptr inbounds i8,i8*%kf,i64 32
%kh=bitcast i8*%kg to i32*
%ki=load i32,i32*%kh,align 4
br label%kj
kj:
%kk=phi i32[%ki,%j5],[%jY,%j0]
%kl=phi i8*[%kf,%j5],[%jM,%j0]
%km=phi i8*[%j9,%j5],[%j4,%j0]
store i8*%km,i8**%d,align 8
%kn=getelementptr inbounds i8,i8*%kl,i64 36
%ko=bitcast i8*%kn to i32*
%kp=load i32,i32*%ko,align 4
%kq=call i8*@sml_alloc(i32 inreg%ai)#0
%kr=or i32%ae,1342177280
%ks=getelementptr inbounds i8,i8*%kq,i64 -4
%kt=bitcast i8*%ks to i32*
store i32%kr,i32*%kt,align 4
store i8*%kq,i8**%h,align 8
call void@llvm.memset.p0i8.i32(i8*%kq,i8 0,i32%ai,i1 false)
%ku=icmp eq i32%kk,0
%kv=load i8*,i8**%d,align 8
%kw=sext i32%ab to i64
%kx=getelementptr inbounds i8,i8*%kq,i64%kw
br i1%ku,label%kA,label%ky
ky:
%kz=bitcast i8*%kx to i8**
store i8*%kv,i8**%kz,align 8
br label%kB
kA:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%kx,i8*%kv,i32%kp,i1 false)
br label%kB
kB:
%kC=sext i32%ae to i64
%kD=getelementptr inbounds i8,i8*%kq,i64%kC
%kE=bitcast i8*%kD to i32*
store i32%ah,i32*%kE,align 4
%kF=bitcast i8**%g to i8***
%kG=load i8**,i8***%kF,align 8
store i8*null,i8**%g,align 8
%kH=load i8*,i8**%kG,align 8
store i8*%kH,i8**%d,align 8
%kI=load i8*,i8**%j,align 8
%kJ=getelementptr inbounds i8,i8*%kI,i64 40
%kK=bitcast i8*%kJ to i32*
%kL=load i32,i32*%kK,align 4
%kM=icmp eq i32%kL,0
br i1%kM,label%kS,label%kN
kN:
store i8*null,i8**%d,align 8
%kO=sext i32%ao to i64
%kP=getelementptr inbounds i8,i8*%kH,i64%kO
%kQ=bitcast i8*%kP to i8**
%kR=load i8*,i8**%kQ,align 8
br label%k6
kS:
%kT=getelementptr inbounds i8,i8*%kI,i64 44
%kU=bitcast i8*%kT to i32*
%kV=load i32,i32*%kU,align 4
%kW=call i8*@sml_alloc(i32 inreg%kV)#0
%kX=getelementptr inbounds i8,i8*%kW,i64 -4
%kY=bitcast i8*%kX to i32*
store i32%kV,i32*%kY,align 4
%kZ=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%k0=sext i32%ao to i64
%k1=getelementptr inbounds i8,i8*%kZ,i64%k0
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%kW,i8*%k1,i32%kV,i1 false)
%k2=load i8*,i8**%j,align 8
%k3=getelementptr inbounds i8,i8*%k2,i64 40
%k4=bitcast i8*%k3 to i32*
%k5=load i32,i32*%k4,align 4
br label%k6
k6:
%k7=phi i32[%k5,%kS],[%kL,%kN]
%k8=phi i8*[%k2,%kS],[%kI,%kN]
%k9=phi i8*[%kW,%kS],[%kR,%kN]
store i8*%k9,i8**%d,align 8
%la=getelementptr inbounds i8,i8*%k8,i64 44
%lb=bitcast i8*%la to i32*
%lc=load i32,i32*%lb,align 4
%ld=call i8*@sml_alloc(i32 inreg%ax)#0
%le=or i32%at,1342177280
%lf=getelementptr inbounds i8,i8*%ld,i64 -4
%lg=bitcast i8*%lf to i32*
store i32%le,i32*%lg,align 4
store i8*%ld,i8**%g,align 8
call void@llvm.memset.p0i8.i32(i8*%ld,i8 0,i32%ax,i1 false)
%lh=icmp eq i32%k7,0
%li=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%lj=sext i32%aq to i64
%lk=getelementptr inbounds i8,i8*%ld,i64%lj
br i1%lh,label%ln,label%ll
ll:
%lm=bitcast i8*%lk to i8**
store i8*%li,i8**%lm,align 8
br label%lo
ln:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%lk,i8*%li,i32%lc,i1 false)
br label%lo
lo:
%lp=sext i32%at to i64
%lq=getelementptr inbounds i8,i8*%ld,i64%lp
%lr=bitcast i8*%lq to i32*
store i32%aw,i32*%lr,align 4
%ls=call i8*@sml_alloc(i32 inreg%a4)#0
%lt=or i32%aJ,1342177280
%lu=getelementptr inbounds i8,i8*%ls,i64 -4
%lv=bitcast i8*%lu to i32*
store i32%lt,i32*%lv,align 4
call void@llvm.memset.p0i8.i32(i8*%ls,i8 0,i32%a4,i1 false)
%lw=icmp eq i32%jS,0
%lx=load i8*,i8**%e,align 8
%ly=getelementptr inbounds i8,i8*%ls,i64%fK
br i1%lw,label%lB,label%lz
lz:
%lA=bitcast i8*%ly to i8**
store i8*%lx,i8**%lA,align 8
br label%lC
lB:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ly,i8*%lx,i32%jP,i1 false)
br label%lC
lC:
%lD=load i8*,i8**%h,align 8
%lE=sext i32%az to i64
%lF=getelementptr inbounds i8,i8*%ls,i64%lE
%lG=bitcast i8*%lF to i8**
store i8*%lD,i8**%lG,align 8
%lH=load i8*,i8**%g,align 8
%lI=sext i32%aB to i64
%lJ=getelementptr inbounds i8,i8*%ls,i64%lI
%lK=bitcast i8*%lJ to i8**
store i8*%lH,i8**%lK,align 8
%lL=load i8*,i8**%f,align 8
%lM=sext i32%aD to i64
%lN=getelementptr inbounds i8,i8*%ls,i64%lM
%lO=bitcast i8*%lN to i8**
store i8*%lL,i8**%lO,align 8
%lP=load i8*,i8**%i,align 8
%lQ=sext i32%aF to i64
%lR=getelementptr inbounds i8,i8*%ls,i64%lQ
%lS=bitcast i8*%lR to i8**
store i8*%lP,i8**%lS,align 8
%lT=load i8*,i8**%c,align 8
%lU=sext i32%aH to i64
%lV=getelementptr inbounds i8,i8*%ls,i64%lU
%lW=bitcast i8*%lV to i8**
store i8*%lT,i8**%lW,align 8
%lX=sext i32%aJ to i64
%lY=getelementptr inbounds i8,i8*%ls,i64%lX
%lZ=bitcast i8*%lY to i32*
store i32%a3,i32*%lZ,align 4
%l0=load i8*,i8**%j,align 8
%l1=tail call fastcc i8*@_SMLL6mergef_486(i8*inreg%l0,i8*inreg%ls)
ret i8*%l1
}
define internal fastcc i8*@_SMLL6mergef_486(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
q:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
store i8*%b,i8**%c,align 8
store i8*%a,i8**%j,align 8
%k=load atomic i32,i32*@sml_check_flag unordered,align 4
%l=icmp eq i32%k,0
br i1%l,label%o,label%m
m:
call void@sml_check(i32 inreg%k)
%n=load i8*,i8**%j,align 8
br label%o
o:
%p=phi i8*[%n,%m],[%a,%q]
%r=getelementptr inbounds i8,i8*%p,i64 28
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=add i32%t,-1
%v=sub i32 0,%t
%w=and i32%u,%v
%x=add i32%t,7
%y=add i32%x,%w
%z=and i32%y,-8
%A=add i32%z,15
%B=and i32%A,-8
%C=add i32%B,15
%D=and i32%C,-8
%E=add i32%D,15
%F=and i32%E,-8
%G=add i32%F,15
%H=and i32%G,-8
%I=lshr i32%A,3
%J=lshr i32%y,3
%K=sub nsw i32%I,%J
%L=lshr i32%w,3
%M=sub nsw i32%J,%L
%N=shl i32 1,%K
%O=or i32%N,1
%P=shl i32%O,%M
%Q=getelementptr inbounds i8,i8*%p,i64 24
%R=bitcast i8*%Q to i32*
%S=load i32,i32*%R,align 4
%T=or i32%P,%S
%U=or i32%D,4
%V=getelementptr inbounds i8,i8*%p,i64 52
%W=bitcast i8*%V to i32*
%X=load i32,i32*%W,align 4
%Y=add i32%X,-1
%Z=sub i32 0,%X
%aa=and i32%Y,%Z
%ab=and i32%x,%v
%ac=add i32%u,%ab
%ad=add i32%ac,%X
%ae=and i32%ad,%Z
%af=add i32%X,7
%ag=add i32%af,%ae
%ah=and i32%ag,-8
%ai=lshr i32%ae,3
%aj=lshr i32%ab,3
%ak=sub nsw i32%ai,%aj
%al=getelementptr inbounds i8,i8*%p,i64 48
%am=bitcast i8*%al to i32*
%an=load i32,i32*%am,align 4
%ao=shl i32%an,%ak
%ap=or i32%ao,%S
%aq=shl i32%ap,%aj
%ar=or i32%aq,1
%as=or i32%ah,4
%at=icmp eq i32%S,0
br i1%at,label%aA,label%au
au:
%av=load i8*,i8**%c,align 8
%aw=sext i32%w to i64
%ax=getelementptr inbounds i8,i8*%av,i64%aw
%ay=bitcast i8*%ax to i8**
%az=load i8*,i8**%ay,align 8
br label%aO
aA:
%aB=call i8*@sml_alloc(i32 inreg%t)#0
%aC=getelementptr inbounds i8,i8*%aB,i64 -4
%aD=bitcast i8*%aC to i32*
store i32%t,i32*%aD,align 4
%aE=load i8*,i8**%c,align 8
%aF=sext i32%w to i64
%aG=getelementptr inbounds i8,i8*%aE,i64%aF
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aB,i8*%aG,i32%t,i1 false)
%aH=load i8*,i8**%j,align 8
%aI=getelementptr inbounds i8,i8*%aH,i64 28
%aJ=bitcast i8*%aI to i32*
%aK=load i32,i32*%aJ,align 4
%aL=getelementptr inbounds i8,i8*%aH,i64 24
%aM=bitcast i8*%aL to i32*
%aN=load i32,i32*%aM,align 4
br label%aO
aO:
%aP=phi i64[%aF,%aA],[%aw,%au]
%aQ=phi i32[%aN,%aA],[%S,%au]
%aR=phi i32[%aK,%aA],[%t,%au]
%aS=phi i8*[%aH,%aA],[%p,%au]
%aT=phi i8*[%aE,%aA],[%av,%au]
%aU=phi i8*[%aB,%aA],[%az,%au]
store i8*%aU,i8**%d,align 8
%aV=sext i32%z to i64
%aW=getelementptr inbounds i8,i8*%aT,i64%aV
%aX=bitcast i8*%aW to i8**
%aY=load i8*,i8**%aX,align 8
store i8*%aY,i8**%e,align 8
%aZ=sext i32%B to i64
%a0=getelementptr inbounds i8,i8*%aT,i64%aZ
%a1=bitcast i8*%a0 to i8**
%a2=load i8*,i8**%a1,align 8
store i8*%a2,i8**%f,align 8
%a3=sext i32%D to i64
%a4=getelementptr inbounds i8,i8*%aT,i64%a3
%a5=bitcast i8*%a4 to i8**
%a6=load i8*,i8**%a5,align 8
store i8*%a6,i8**%g,align 8
%a7=sext i32%F to i64
%a8=getelementptr inbounds i8,i8*%aT,i64%a7
%a9=bitcast i8*%a8 to i8**
%ba=load i8*,i8**%a9,align 8
store i8*%ba,i8**%h,align 8
%bb=sext i32%H to i64
%bc=getelementptr inbounds i8,i8*%aT,i64%bb
%bd=bitcast i8*%bc to i8**
%be=load i8*,i8**%bd,align 8
store i8*%be,i8**%c,align 8
%bf=getelementptr inbounds i8,i8*%aS,i64 8
%bg=bitcast i8*%bf to i8**
%bh=load i8*,i8**%bg,align 8
%bi=getelementptr inbounds i8,i8*%bh,i64 16
%bj=bitcast i8*%bi to i8*(i8*,i8*)**
%bk=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bj,align 8
%bl=bitcast i8*%bh to i8**
%bm=load i8*,i8**%bl,align 8
store i8*%bm,i8**%i,align 8
%bn=call i8*@sml_alloc(i32 inreg%U)#0
%bo=or i32%D,1342177280
%bp=getelementptr inbounds i8,i8*%bn,i64 -4
%bq=bitcast i8*%bp to i32*
store i32%bo,i32*%bq,align 4
call void@llvm.memset.p0i8.i32(i8*%bn,i8 0,i32%U,i1 false)
%br=icmp eq i32%aQ,0
%bs=load i8*,i8**%d,align 8
%bt=getelementptr inbounds i8,i8*%bn,i64%aP
br i1%br,label%bw,label%bu
bu:
%bv=bitcast i8*%bt to i8**
store i8*%bs,i8**%bv,align 8
br label%bx
bw:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bt,i8*%bs,i32%aR,i1 false)
br label%bx
bx:
%by=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bz=getelementptr inbounds i8,i8*%bn,i64%aV
%bA=bitcast i8*%bz to i8**
store i8*%by,i8**%bA,align 8
%bB=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%bC=getelementptr inbounds i8,i8*%bn,i64%aZ
%bD=bitcast i8*%bC to i8**
store i8*%bB,i8**%bD,align 8
%bE=getelementptr inbounds i8,i8*%bn,i64%a3
%bF=bitcast i8*%bE to i32*
store i32%T,i32*%bF,align 4
%bG=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%bH=call fastcc i8*%bk(i8*inreg%bG,i8*inreg%bn)
store i8*%bH,i8**%e,align 8
%bI=icmp eq i8*%bH,null
br i1%bI,label%bJ,label%bZ
bJ:
store i8*null,i8**%d,align 8
store i8*null,i8**%e,align 8
%bK=call i8*@sml_alloc(i32 inreg 28)#0
%bL=getelementptr inbounds i8,i8*%bK,i64 -4
%bM=bitcast i8*%bL to i32*
store i32 1342177304,i32*%bM,align 4
%bN=load i8*,i8**%g,align 8
%bO=bitcast i8*%bK to i8**
store i8*%bN,i8**%bO,align 8
%bP=load i8*,i8**%h,align 8
%bQ=getelementptr inbounds i8,i8*%bK,i64 8
%bR=bitcast i8*%bQ to i8**
store i8*%bP,i8**%bR,align 8
%bS=load i8*,i8**%c,align 8
%bT=getelementptr inbounds i8,i8*%bK,i64 16
%bU=bitcast i8*%bT to i8**
store i8*%bS,i8**%bU,align 8
%bV=getelementptr inbounds i8,i8*%bK,i64 24
%bW=bitcast i8*%bV to i32*
store i32 7,i32*%bW,align 4
%bX=load i8*,i8**%j,align 8
%bY=tail call fastcc i8*@_SMLL5merge_485(i8*inreg%bX,i8*inreg%bK)
ret i8*%bY
bZ:
%b0=load i8*,i8**%j,align 8
%b1=getelementptr inbounds i8,i8*%b0,i64 48
%b2=bitcast i8*%b1 to i32*
%b3=load i32,i32*%b2,align 4
%b4=icmp eq i32%b3,0
br i1%b4,label%ca,label%b5
b5:
store i8*null,i8**%e,align 8
%b6=sext i32%aa to i64
%b7=getelementptr inbounds i8,i8*%bH,i64%b6
%b8=bitcast i8*%b7 to i8**
%b9=load i8*,i8**%b8,align 8
br label%co
ca:
%cb=getelementptr inbounds i8,i8*%b0,i64 52
%cc=bitcast i8*%cb to i32*
%cd=load i32,i32*%cc,align 4
%ce=call i8*@sml_alloc(i32 inreg%cd)#0
%cf=getelementptr inbounds i8,i8*%ce,i64 -4
%cg=bitcast i8*%cf to i32*
store i32%cd,i32*%cg,align 4
%ch=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%ci=sext i32%aa to i64
%cj=getelementptr inbounds i8,i8*%ch,i64%ci
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ce,i8*%cj,i32%cd,i1 false)
%ck=load i8*,i8**%j,align 8
%cl=getelementptr inbounds i8,i8*%ck,i64 48
%cm=bitcast i8*%cl to i32*
%cn=load i32,i32*%cm,align 4
br label%co
co:
%cp=phi i32[%cn,%ca],[%b3,%b5]
%cq=phi i8*[%ck,%ca],[%b0,%b5]
%cr=phi i8*[%ce,%ca],[%b9,%b5]
store i8*%cr,i8**%e,align 8
%cs=getelementptr inbounds i8,i8*%cq,i64 16
%ct=bitcast i8*%cs to i8**
%cu=load i8*,i8**%ct,align 8
%cv=getelementptr inbounds i8,i8*%cq,i64 52
%cw=bitcast i8*%cv to i32*
%cx=load i32,i32*%cw,align 4
%cy=call fastcc i8*@_SMLL6insert_334(i8*inreg%cu,i32 inreg%cp,i32 inreg%cx)
%cz=getelementptr inbounds i8,i8*%cy,i64 16
%cA=bitcast i8*%cz to i8*(i8*,i8*)**
%cB=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%cA,align 8
%cC=bitcast i8*%cy to i8**
%cD=load i8*,i8**%cC,align 8
store i8*%cD,i8**%f,align 8
%cE=load i8*,i8**%j,align 8
%cF=getelementptr inbounds i8,i8*%cE,i64 28
%cG=bitcast i8*%cF to i32*
%cH=load i32,i32*%cG,align 4
%cI=getelementptr inbounds i8,i8*%cE,i64 24
%cJ=bitcast i8*%cI to i32*
%cK=load i32,i32*%cJ,align 4
%cL=getelementptr inbounds i8,i8*%cE,i64 52
%cM=bitcast i8*%cL to i32*
%cN=load i32,i32*%cM,align 4
%cO=getelementptr inbounds i8,i8*%cE,i64 48
%cP=bitcast i8*%cO to i32*
%cQ=load i32,i32*%cP,align 4
%cR=call i8*@sml_alloc(i32 inreg%as)#0
%cS=or i32%ah,1342177280
%cT=getelementptr inbounds i8,i8*%cR,i64 -4
%cU=bitcast i8*%cT to i32*
store i32%cS,i32*%cU,align 4
call void@llvm.memset.p0i8.i32(i8*%cR,i8 0,i32%as,i1 false)
%cV=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cW=bitcast i8*%cR to i8**
store i8*%cV,i8**%cW,align 8
%cX=icmp eq i32%cK,0
%cY=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%cZ=sext i32%ab to i64
%c0=getelementptr inbounds i8,i8*%cR,i64%cZ
br i1%cX,label%c3,label%c1
c1:
%c2=bitcast i8*%c0 to i8**
store i8*%cY,i8**%c2,align 8
br label%c4
c3:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%c0,i8*%cY,i32%cH,i1 false)
br label%c4
c4:
%c5=icmp eq i32%cQ,0
%c6=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%c7=sext i32%ae to i64
%c8=getelementptr inbounds i8,i8*%cR,i64%c7
br i1%c5,label%db,label%c9
c9:
%da=bitcast i8*%c8 to i8**
store i8*%c6,i8**%da,align 8
br label%dc
db:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%c8,i8*%c6,i32%cN,i1 false)
br label%dc
dc:
%dd=sext i32%ah to i64
%de=getelementptr inbounds i8,i8*%cR,i64%dd
%df=bitcast i8*%de to i32*
store i32%ar,i32*%df,align 4
%dg=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%dh=call fastcc i8*%cB(i8*inreg%dg,i8*inreg%cR)
store i8*%dh,i8**%c,align 8
%di=call i8*@sml_alloc(i32 inreg 28)#0
%dj=getelementptr inbounds i8,i8*%di,i64 -4
%dk=bitcast i8*%dj to i32*
store i32 1342177304,i32*%dk,align 4
%dl=load i8*,i8**%g,align 8
%dm=bitcast i8*%di to i8**
store i8*%dl,i8**%dm,align 8
%dn=load i8*,i8**%h,align 8
%do=getelementptr inbounds i8,i8*%di,i64 8
%dp=bitcast i8*%do to i8**
store i8*%dn,i8**%dp,align 8
%dq=load i8*,i8**%c,align 8
%dr=getelementptr inbounds i8,i8*%di,i64 16
%ds=bitcast i8*%dr to i8**
store i8*%dq,i8**%ds,align 8
%dt=getelementptr inbounds i8,i8*%di,i64 24
%du=bitcast i8*%dt to i32*
store i32 7,i32*%du,align 4
%dv=load i8*,i8**%j,align 8
%dw=tail call fastcc i8*@_SMLL5merge_485(i8*inreg%dv,i8*inreg%di)
ret i8*%dw
}
define internal fastcc i8*@_SMLL10mergeWithi_488(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%k,label%m
k:
%l=bitcast i8*%a to i8**
br label%q
m:
call void@sml_check(i32 inreg%i)
%n=bitcast i8**%e to i8***
%o=load i8**,i8***%n,align 8
%p=bitcast i8**%o to i8*
br label%q
q:
%r=phi i8*[%p,%m],[%a,%k]
%s=phi i8**[%o,%m],[%l,%k]
%t=load i8*,i8**%s,align 8
store i8*%t,i8**%d,align 8
%u=getelementptr inbounds i8*,i8**%s,i64 1
%v=load i8*,i8**%u,align 8
store i8*%v,i8**%f,align 8
%w=getelementptr inbounds i8*,i8**%s,i64 2
%x=load i8*,i8**%w,align 8
store i8*%x,i8**%g,align 8
%y=getelementptr inbounds i8,i8*%r,i64 32
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=getelementptr inbounds i8,i8*%r,i64 36
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=getelementptr inbounds i8,i8*%r,i64 40
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
%H=getelementptr inbounds i8,i8*%r,i64 44
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
%K=getelementptr inbounds i8,i8*%r,i64 48
%L=bitcast i8*%K to i32*
%M=load i32,i32*%L,align 4
%N=getelementptr inbounds i8,i8*%r,i64 52
%O=bitcast i8*%N to i32*
%P=load i32,i32*%O,align 4
%Q=getelementptr inbounds i8,i8*%r,i64 56
%R=bitcast i8*%Q to i32*
%S=load i32,i32*%R,align 4
%T=getelementptr inbounds i8,i8*%r,i64 60
%U=bitcast i8*%T to i32*
%V=load i32,i32*%U,align 4
%W=call i8*@sml_alloc(i32 inreg 60)#0
%X=getelementptr inbounds i8,i8*%W,i64 -4
%Y=bitcast i8*%X to i32*
store i32 1342177336,i32*%Y,align 4
store i8*%W,i8**%h,align 8
%Z=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aa=bitcast i8*%W to i8**
store i8*%Z,i8**%aa,align 8
%ab=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%ac=getelementptr inbounds i8,i8*%W,i64 8
%ad=bitcast i8*%ac to i8**
store i8*%ab,i8**%ad,align 8
%ae=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%af=getelementptr inbounds i8,i8*%W,i64 16
%ag=bitcast i8*%af to i8**
store i8*%ae,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%W,i64 24
%ai=bitcast i8*%ah to i32*
store i32%A,i32*%ai,align 4
%aj=getelementptr inbounds i8,i8*%W,i64 28
%ak=bitcast i8*%aj to i32*
store i32%D,i32*%ak,align 4
%al=getelementptr inbounds i8,i8*%W,i64 32
%am=bitcast i8*%al to i32*
store i32%G,i32*%am,align 4
%an=getelementptr inbounds i8,i8*%W,i64 36
%ao=bitcast i8*%an to i32*
store i32%J,i32*%ao,align 4
%ap=getelementptr inbounds i8,i8*%W,i64 40
%aq=bitcast i8*%ap to i32*
store i32%M,i32*%aq,align 4
%ar=getelementptr inbounds i8,i8*%W,i64 44
%as=bitcast i8*%ar to i32*
store i32%P,i32*%as,align 4
%at=getelementptr inbounds i8,i8*%W,i64 48
%au=bitcast i8*%at to i32*
store i32%S,i32*%au,align 4
%av=getelementptr inbounds i8,i8*%W,i64 52
%aw=bitcast i8*%av to i32*
store i32%V,i32*%aw,align 4
%ax=getelementptr inbounds i8,i8*%W,i64 56
%ay=bitcast i8*%ax to i32*
store i32 7,i32*%ay,align 4
%az=call i8*@sml_alloc(i32 inreg 28)#0
%aA=getelementptr inbounds i8,i8*%az,i64 -4
%aB=bitcast i8*%aA to i32*
store i32 1342177304,i32*%aB,align 4
%aC=load i8*,i8**%h,align 8
%aD=bitcast i8*%az to i8**
store i8*%aC,i8**%aD,align 8
%aE=getelementptr inbounds i8,i8*%az,i64 8
%aF=bitcast i8*%aE to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL5merge_485 to void(...)*),void(...)**%aF,align 8
%aG=getelementptr inbounds i8,i8*%az,i64 16
%aH=bitcast i8*%aG to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL5merge_485 to void(...)*),void(...)**%aH,align 8
%aI=getelementptr inbounds i8,i8*%az,i64 24
%aJ=bitcast i8*%aI to i32*
store i32 -2147483647,i32*%aJ,align 4
%aK=call i8*@sml_alloc(i32 inreg 28)#0
%aL=getelementptr inbounds i8,i8*%aK,i64 -4
%aM=bitcast i8*%aL to i32*
store i32 1342177304,i32*%aM,align 4
%aN=load i8*,i8**%h,align 8
%aO=bitcast i8*%aK to i8**
store i8*%aN,i8**%aO,align 8
%aP=getelementptr inbounds i8,i8*%aK,i64 8
%aQ=bitcast i8*%aP to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6mergef_486 to void(...)*),void(...)**%aQ,align 8
%aR=getelementptr inbounds i8,i8*%aK,i64 16
%aS=bitcast i8*%aR to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6mergef_486 to void(...)*),void(...)**%aS,align 8
%aT=getelementptr inbounds i8,i8*%aK,i64 24
%aU=bitcast i8*%aT to i32*
store i32 -2147483647,i32*%aU,align 4
%aV=load i8*,i8**%e,align 8
%aW=getelementptr inbounds i8,i8*%aV,i64 24
%aX=bitcast i8*%aW to i8**
%aY=load i8*,i8**%aX,align 8
%aZ=getelementptr inbounds i8,i8*%aV,i64 40
%a0=bitcast i8*%aZ to i32*
%a1=load i32,i32*%a0,align 4
%a2=getelementptr inbounds i8,i8*%aV,i64 44
%a3=bitcast i8*%a2 to i32*
%a4=load i32,i32*%a3,align 4
%a5=call fastcc i8*@_SMLL10listItemsi_377(i8*inreg%aY,i32 inreg%a1,i32 inreg%a4)
%a6=getelementptr inbounds i8,i8*%a5,i64 16
%a7=bitcast i8*%a6 to i8*(i8*,i8*)**
%a8=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a7,align 8
%a9=bitcast i8*%a5 to i8**
%ba=load i8*,i8**%a9,align 8
%bb=bitcast i8**%c to i8***
%bc=load i8**,i8***%bb,align 8
%bd=load i8*,i8**%bc,align 8
%be=call fastcc i8*%a8(i8*inreg%ba,i8*inreg%bd)
store i8*%be,i8**%d,align 8
%bf=load i8*,i8**%e,align 8
%bg=getelementptr inbounds i8,i8*%bf,i64 24
%bh=bitcast i8*%bg to i8**
%bi=load i8*,i8**%bh,align 8
%bj=getelementptr inbounds i8,i8*%bf,i64 48
%bk=bitcast i8*%bj to i32*
%bl=load i32,i32*%bk,align 4
%bm=getelementptr inbounds i8,i8*%bf,i64 52
%bn=bitcast i8*%bm to i32*
%bo=load i32,i32*%bn,align 4
%bp=call fastcc i8*@_SMLL10listItemsi_377(i8*inreg%bi,i32 inreg%bl,i32 inreg%bo)
%bq=getelementptr inbounds i8,i8*%bp,i64 16
%br=bitcast i8*%bq to i8*(i8*,i8*)**
%bs=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%br,align 8
%bt=bitcast i8*%bp to i8**
%bu=load i8*,i8**%bt,align 8
%bv=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bw=getelementptr inbounds i8,i8*%bv,i64 8
%bx=bitcast i8*%bw to i8**
%by=load i8*,i8**%bx,align 8
%bz=call fastcc i8*%bs(i8*inreg%bu,i8*inreg%by)
store i8*%bz,i8**%c,align 8
%bA=call i8*@sml_alloc(i32 inreg 28)#0
%bB=getelementptr inbounds i8,i8*%bA,i64 -4
%bC=bitcast i8*%bB to i32*
store i32 1342177304,i32*%bC,align 4
%bD=load i8*,i8**%d,align 8
%bE=bitcast i8*%bA to i8**
store i8*%bD,i8**%bE,align 8
%bF=load i8*,i8**%c,align 8
%bG=getelementptr inbounds i8,i8*%bA,i64 8
%bH=bitcast i8*%bG to i8**
store i8*%bF,i8**%bH,align 8
%bI=getelementptr inbounds i8,i8*%bA,i64 16
%bJ=bitcast i8*%bI to i8**
store i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@a,i64 0,i32 2)to i8*),i8**%bJ,align 8
%bK=getelementptr inbounds i8,i8*%bA,i64 24
%bL=bitcast i8*%bK to i32*
store i32 7,i32*%bL,align 4
store i8*%bD,i8**%c,align 8
store i8*%bF,i8**%d,align 8
store i8*null,i8**%f,align 8
%bM=load i8*,i8**%e,align 8
%bN=getelementptr inbounds i8,i8*%bM,i64 56
%bO=bitcast i8*%bN to i32*
%bP=load i32,i32*%bO,align 4
store i8*null,i8**%e,align 8
%bQ=getelementptr inbounds i8,i8*%bM,i64 60
%bR=bitcast i8*%bQ to i32*
%bS=load i32,i32*%bR,align 4
%bT=call i8*@sml_alloc(i32 inreg 4)#0
%bU=bitcast i8*%bT to i32*
%bV=getelementptr inbounds i8,i8*%bT,i64 -4
%bW=bitcast i8*%bV to i32*
store i32 4,i32*%bW,align 4
store i8*%bT,i8**%e,align 8
store i32%bP,i32*%bU,align 4
%bX=call i8*@sml_alloc(i32 inreg 4)#0
%bY=bitcast i8*%bX to i32*
%bZ=getelementptr inbounds i8,i8*%bX,i64 -4
%b0=bitcast i8*%bZ to i32*
store i32 4,i32*%b0,align 4
store i32%bS,i32*%bY,align 4
store i8*null,i8**%f,align 8
store i8*null,i8**%e,align 8
%b1=call i8*@sml_alloc(i32 inreg 28)#0
%b2=getelementptr inbounds i8,i8*%b1,i64 -4
%b3=bitcast i8*%b2 to i32*
store i32 1342177304,i32*%b3,align 4
%b4=load i8*,i8**%c,align 8
%b5=bitcast i8*%b1 to i8**
store i8*%b4,i8**%b5,align 8
%b6=load i8*,i8**%d,align 8
%b7=getelementptr inbounds i8,i8*%b1,i64 8
%b8=bitcast i8*%b7 to i8**
store i8*%b6,i8**%b8,align 8
%b9=load i8*,i8**%e,align 8
%ca=getelementptr inbounds i8,i8*%b1,i64 16
%cb=bitcast i8*%ca to i8**
store i8*%b9,i8**%cb,align 8
%cc=getelementptr inbounds i8,i8*%b1,i64 24
%cd=bitcast i8*%cc to i32*
store i32 7,i32*%cd,align 4
%ce=load i8*,i8**%h,align 8
%cf=tail call fastcc i8*@_SMLL5merge_485(i8*inreg%ce,i8*inreg%b1)
ret i8*%cf
}
define internal fastcc i8*@_SMLL10mergeWithi_489(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%b,i8**%c,align 8
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%d,align 8
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
store i8*%l,i8**%e,align 8
%m=getelementptr inbounds i8,i8*%a,i64 16
%n=bitcast i8*%m to i8**
%o=load i8*,i8**%n,align 8
store i8*%o,i8**%f,align 8
%p=getelementptr inbounds i8,i8*%a,i64 24
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=getelementptr inbounds i8,i8*%a,i64 28
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=getelementptr inbounds i8,i8*%a,i64 32
%w=bitcast i8*%v to i32*
%x=load i32,i32*%w,align 4
%y=getelementptr inbounds i8,i8*%a,i64 36
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=getelementptr inbounds i8,i8*%a,i64 40
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=getelementptr inbounds i8,i8*%a,i64 44
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
%H=getelementptr inbounds i8,i8*%a,i64 48
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
%K=getelementptr inbounds i8,i8*%a,i64 52
%L=bitcast i8*%K to i32*
%M=load i32,i32*%L,align 4
%N=call i8*@sml_alloc(i32 inreg 68)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32 1342177344,i32*%P,align 4
store i8*%N,i8**%g,align 8
%Q=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%R=bitcast i8*%N to i8**
store i8*%Q,i8**%R,align 8
%S=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%T=getelementptr inbounds i8,i8*%N,i64 8
%U=bitcast i8*%T to i8**
store i8*%S,i8**%U,align 8
%V=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%W=getelementptr inbounds i8,i8*%N,i64 16
%X=bitcast i8*%W to i8**
store i8*%V,i8**%X,align 8
%Y=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%Z=getelementptr inbounds i8,i8*%N,i64 24
%aa=bitcast i8*%Z to i8**
store i8*%Y,i8**%aa,align 8
%ab=getelementptr inbounds i8,i8*%N,i64 32
%ac=bitcast i8*%ab to i32*
store i32%r,i32*%ac,align 4
%ad=getelementptr inbounds i8,i8*%N,i64 36
%ae=bitcast i8*%ad to i32*
store i32%u,i32*%ae,align 4
%af=getelementptr inbounds i8,i8*%N,i64 40
%ag=bitcast i8*%af to i32*
store i32%x,i32*%ag,align 4
%ah=getelementptr inbounds i8,i8*%N,i64 44
%ai=bitcast i8*%ah to i32*
store i32%A,i32*%ai,align 4
%aj=getelementptr inbounds i8,i8*%N,i64 48
%ak=bitcast i8*%aj to i32*
store i32%D,i32*%ak,align 4
%al=getelementptr inbounds i8,i8*%N,i64 52
%am=bitcast i8*%al to i32*
store i32%G,i32*%am,align 4
%an=getelementptr inbounds i8,i8*%N,i64 56
%ao=bitcast i8*%an to i32*
store i32%J,i32*%ao,align 4
%ap=getelementptr inbounds i8,i8*%N,i64 60
%aq=bitcast i8*%ap to i32*
store i32%M,i32*%aq,align 4
%ar=getelementptr inbounds i8,i8*%N,i64 64
%as=bitcast i8*%ar to i32*
store i32 15,i32*%as,align 4
%at=call i8*@sml_alloc(i32 inreg 28)#0
%au=getelementptr inbounds i8,i8*%at,i64 -4
%av=bitcast i8*%au to i32*
store i32 1342177304,i32*%av,align 4
%aw=load i8*,i8**%g,align 8
%ax=bitcast i8*%at to i8**
store i8*%aw,i8**%ax,align 8
%ay=getelementptr inbounds i8,i8*%at,i64 8
%az=bitcast i8*%ay to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL10mergeWithi_488 to void(...)*),void(...)**%az,align 8
%aA=getelementptr inbounds i8,i8*%at,i64 16
%aB=bitcast i8*%aA to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL10mergeWithi_488 to void(...)*),void(...)**%aB,align 8
%aC=getelementptr inbounds i8,i8*%at,i64 24
%aD=bitcast i8*%aC to i32*
store i32 -2147483647,i32*%aD,align 4
ret i8*%at
}
define internal fastcc i8*@_SMLL10mergeWithi_490(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e,i32 inreg%f,i32 inreg%g)#4 gc"smlsharp"{
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
%k=alloca i8*,align 8
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
call void@llvm.gcroot(i8**%k,i8*null)#0
%l=bitcast i8*%a to i8**
%m=load i8*,i8**%l,align 8
store i8*%m,i8**%h,align 8
%n=getelementptr inbounds i8,i8*%a,i64 8
%o=bitcast i8*%n to i8**
%p=load i8*,i8**%o,align 8
store i8*%p,i8**%i,align 8
%q=getelementptr inbounds i8,i8*%a,i64 16
%r=bitcast i8*%q to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%j,align 8
%t=getelementptr inbounds i8,i8*%a,i64 24
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=getelementptr inbounds i8,i8*%a,i64 28
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=call i8*@sml_alloc(i32 inreg 60)#0
%A=getelementptr inbounds i8,i8*%z,i64 -4
%B=bitcast i8*%A to i32*
store i32 1342177336,i32*%B,align 4
store i8*%z,i8**%k,align 8
%C=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%D=bitcast i8*%z to i8**
store i8*%C,i8**%D,align 8
%E=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%F=getelementptr inbounds i8,i8*%z,i64 8
%G=bitcast i8*%F to i8**
store i8*%E,i8**%G,align 8
%H=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%I=getelementptr inbounds i8,i8*%z,i64 16
%J=bitcast i8*%I to i8**
store i8*%H,i8**%J,align 8
%K=getelementptr inbounds i8,i8*%z,i64 24
%L=bitcast i8*%K to i32*
store i32%v,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%z,i64 28
%N=bitcast i8*%M to i32*
store i32%y,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%z,i64 32
%P=bitcast i8*%O to i32*
store i32%b,i32*%P,align 4
%Q=getelementptr inbounds i8,i8*%z,i64 36
%R=bitcast i8*%Q to i32*
store i32%c,i32*%R,align 4
%S=getelementptr inbounds i8,i8*%z,i64 40
%T=bitcast i8*%S to i32*
store i32%d,i32*%T,align 4
%U=getelementptr inbounds i8,i8*%z,i64 44
%V=bitcast i8*%U to i32*
store i32%e,i32*%V,align 4
%W=getelementptr inbounds i8,i8*%z,i64 48
%X=bitcast i8*%W to i32*
store i32%f,i32*%X,align 4
%Y=getelementptr inbounds i8,i8*%z,i64 52
%Z=bitcast i8*%Y to i32*
store i32%g,i32*%Z,align 4
%aa=getelementptr inbounds i8,i8*%z,i64 56
%ab=bitcast i8*%aa to i32*
store i32 7,i32*%ab,align 4
%ac=call i8*@sml_alloc(i32 inreg 28)#0
%ad=getelementptr inbounds i8,i8*%ac,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 1342177304,i32*%ae,align 4
%af=load i8*,i8**%k,align 8
%ag=bitcast i8*%ac to i8**
store i8*%af,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%ac,i64 8
%ai=bitcast i8*%ah to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL10mergeWithi_489 to void(...)*),void(...)**%ai,align 8
%aj=getelementptr inbounds i8,i8*%ac,i64 16
%ak=bitcast i8*%aj to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL10mergeWithi_489 to void(...)*),void(...)**%ak,align 8
%al=getelementptr inbounds i8,i8*%ac,i64 24
%am=bitcast i8*%al to i32*
store i32 -2147483647,i32*%am,align 4
ret i8*%ac
}
define internal fastcc i8*@_SMLL5merge_491(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
%k=alloca i8*,align 8
%l=alloca i8*,align 8
%m=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
call void@llvm.gcroot(i8**%k,i8*null)#0
call void@llvm.gcroot(i8**%l,i8*null)#0
call void@llvm.gcroot(i8**%m,i8*null)#0
store i8*%a,i8**%l,align 8
store i8*%b,i8**%c,align 8
%n=load atomic i32,i32*@sml_check_flag unordered,align 4
%o=icmp eq i32%n,0
br i1%o,label%p,label%r
p:
%q=bitcast i8*%b to i8**
br label%w
r:
call void@sml_check(i32 inreg%n)
%s=bitcast i8**%c to i8***
%t=load i8**,i8***%s,align 8
%u=load i8*,i8**%l,align 8
%v=bitcast i8**%t to i8*
br label%w
w:
%x=phi i8*[%v,%r],[%b,%p]
%y=phi i8*[%u,%r],[%a,%p]
%z=phi i8**[%t,%r],[%q,%p]
%A=getelementptr inbounds i8,i8*%y,i64 28
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=add i32%C,-1
%E=sub i32 0,%C
%F=and i32%D,%E
%G=add i32%F,%C
%H=getelementptr inbounds i8,i8*%y,i64 36
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
%K=add i32%G,-1
%L=add i32%K,%J
%M=sub i32 0,%J
%N=and i32%L,%M
%O=getelementptr inbounds i8,i8*%y,i64 44
%P=bitcast i8*%O to i32*
%Q=load i32,i32*%P,align 4
%R=add i32%K,%Q
%S=sub i32 0,%Q
%T=and i32%R,%S
%U=add i32%K,%C
%V=and i32%U,%E
%W=add i32%C,7
%X=add i32%W,%V
%Y=and i32%X,-8
%Z=lshr i32%V,3
%aa=lshr i32%F,3
%ab=sub nsw i32%Z,%aa
%ac=getelementptr inbounds i8,i8*%y,i64 24
%ad=bitcast i8*%ac to i32*
%ae=load i32,i32*%ad,align 4
%af=shl i32%ae,%ab
%ag=or i32%af,%ae
%ah=or i32%Y,4
%ai=add i32%J,7
%aj=add i32%ai,%N
%ak=and i32%aj,-8
%al=lshr i32%N,3
%am=sub nsw i32%al,%aa
%an=getelementptr inbounds i8,i8*%y,i64 32
%ao=bitcast i8*%an to i32*
%ap=load i32,i32*%ao,align 4
%aq=shl i32%ap,%am
%ar=or i32%aq,%ae
%as=or i32%ak,4
%at=add i32%Q,7
%au=add i32%at,%T
%av=and i32%au,-8
%aw=lshr i32%T,3
%ax=sub nsw i32%aw,%aa
%ay=getelementptr inbounds i8,i8*%y,i64 40
%az=bitcast i8*%ay to i32*
%aA=load i32,i32*%az,align 4
%aB=shl i32%aA,%ax
%aC=or i32%aB,%ae
%aD=or i32%av,4
%aE=load i8*,i8**%z,align 8
store i8*%aE,i8**%d,align 8
%aF=icmp eq i8*%aE,null
%aG=bitcast i8*%aE to i8**
br i1%aF,label%aH,label%cN
aH:
%aI=getelementptr inbounds i8,i8*%x,i64 8
%aJ=bitcast i8*%aI to i8**
%aK=load i8*,i8**%aJ,align 8
%aL=icmp eq i8*%aK,null
br i1%aL,label%aM,label%aQ
aM:
%aN=getelementptr inbounds i8,i8*%x,i64 16
%aO=bitcast i8*%aN to i8**
%aP=load i8*,i8**%aO,align 8
ret i8*%aP
aQ:
store i8*%aK,i8**%f,align 8
%aR=bitcast i8*%aK to i8**
%aS=load i8*,i8**%aR,align 8
store i8*%aS,i8**%d,align 8
%aT=icmp eq i32%ae,0
br i1%aT,label%aZ,label%aU
aU:
store i8*null,i8**%d,align 8
%aV=sext i32%F to i64
%aW=getelementptr inbounds i8,i8*%aS,i64%aV
%aX=bitcast i8*%aW to i8**
%aY=load i8*,i8**%aX,align 8
br label%bd
aZ:
%a0=call i8*@sml_alloc(i32 inreg%C)#0
%a1=getelementptr inbounds i8,i8*%a0,i64 -4
%a2=bitcast i8*%a1 to i32*
store i32%C,i32*%a2,align 4
%a3=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%a4=sext i32%F to i64
%a5=getelementptr inbounds i8,i8*%a3,i64%a4
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%a0,i8*%a5,i32%C,i1 false)
%a6=bitcast i8**%f to i8***
%a7=load i8**,i8***%a6,align 8
%a8=load i8*,i8**%l,align 8
%a9=getelementptr inbounds i8,i8*%a8,i64 40
%ba=bitcast i8*%a9 to i32*
%bb=load i32,i32*%ba,align 4
%bc=bitcast i8**%a7 to i8*
br label%bd
bd:
%be=phi i8*[%bc,%aZ],[%aK,%aU]
%bf=phi i32[%bb,%aZ],[%aA,%aU]
%bg=phi i8*[%a8,%aZ],[%y,%aU]
%bh=phi i8**[%a7,%aZ],[%aR,%aU]
%bi=phi i8*[%a0,%aZ],[%aY,%aU]
store i8*%bi,i8**%d,align 8
%bj=load i8*,i8**%bh,align 8
store i8*%bj,i8**%e,align 8
%bk=icmp eq i32%bf,0
br i1%bk,label%bq,label%bl
bl:
store i8*null,i8**%e,align 8
%bm=sext i32%T to i64
%bn=getelementptr inbounds i8,i8*%bj,i64%bm
%bo=bitcast i8*%bn to i8**
%bp=load i8*,i8**%bo,align 8
br label%bF
bq:
%br=getelementptr inbounds i8,i8*%bg,i64 44
%bs=bitcast i8*%br to i32*
%bt=load i32,i32*%bs,align 4
%bu=call i8*@sml_alloc(i32 inreg%bt)#0
%bv=getelementptr inbounds i8,i8*%bu,i64 -4
%bw=bitcast i8*%bv to i32*
store i32%bt,i32*%bw,align 4
%bx=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%by=sext i32%T to i64
%bz=getelementptr inbounds i8,i8*%bx,i64%by
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bu,i8*%bz,i32%bt,i1 false)
%bA=load i8*,i8**%f,align 8
%bB=load i8*,i8**%l,align 8
%bC=getelementptr inbounds i8,i8*%bB,i64 40
%bD=bitcast i8*%bC to i32*
%bE=load i32,i32*%bD,align 4
br label%bF
bF:
%bG=phi i32[%bE,%bq],[%bf,%bl]
%bH=phi i8*[%bB,%bq],[%bg,%bl]
%bI=phi i8*[%bA,%bq],[%be,%bl]
%bJ=phi i8*[%bu,%bq],[%bp,%bl]
store i8*%bJ,i8**%e,align 8
%bK=getelementptr inbounds i8,i8*%bI,i64 8
%bL=bitcast i8*%bK to i8**
%bM=load i8*,i8**%bL,align 8
store i8*%bM,i8**%f,align 8
%bN=load i8*,i8**%c,align 8
%bO=getelementptr inbounds i8,i8*%bN,i64 16
%bP=bitcast i8*%bO to i8**
%bQ=load i8*,i8**%bP,align 8
store i8*%bQ,i8**%c,align 8
%bR=getelementptr inbounds i8,i8*%bH,i64 28
%bS=bitcast i8*%bR to i32*
%bT=load i32,i32*%bS,align 4
%bU=getelementptr inbounds i8,i8*%bH,i64 24
%bV=bitcast i8*%bU to i32*
%bW=load i32,i32*%bV,align 4
%bX=getelementptr inbounds i8,i8*%bH,i64 44
%bY=bitcast i8*%bX to i32*
%bZ=load i32,i32*%bY,align 4
%b0=call i8*@sml_alloc(i32 inreg%aD)#0
%b1=or i32%av,1342177280
%b2=getelementptr inbounds i8,i8*%b0,i64 -4
%b3=bitcast i8*%b2 to i32*
store i32%b1,i32*%b3,align 4
store i8*%b0,i8**%g,align 8
call void@llvm.memset.p0i8.i32(i8*%b0,i8 0,i32%aD,i1 false)
%b4=icmp eq i32%bW,0
%b5=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%b6=sext i32%F to i64
%b7=getelementptr inbounds i8,i8*%b0,i64%b6
br i1%b4,label%ca,label%b8
b8:
%b9=bitcast i8*%b7 to i8**
store i8*%b5,i8**%b9,align 8
br label%cb
ca:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%b7,i8*%b5,i32%bT,i1 false)
br label%cb
cb:
%cc=icmp eq i32%bG,0
%cd=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%ce=sext i32%T to i64
%cf=getelementptr inbounds i8,i8*%b0,i64%ce
br i1%cc,label%ci,label%cg
cg:
%ch=bitcast i8*%cf to i8**
store i8*%cd,i8**%ch,align 8
br label%cj
ci:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cf,i8*%cd,i32%bZ,i1 false)
br label%cj
cj:
%ck=sext i32%av to i64
%cl=getelementptr inbounds i8,i8*%b0,i64%ck
%cm=bitcast i8*%cl to i32*
store i32%aC,i32*%cm,align 4
%cn=call i8*@sml_alloc(i32 inreg 12)#0
%co=getelementptr inbounds i8,i8*%cn,i64 -4
%cp=bitcast i8*%co to i32*
store i32 1342177288,i32*%cp,align 4
store i8*%cn,i8**%d,align 8
%cq=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%cr=bitcast i8*%cn to i8**
store i8*%cq,i8**%cr,align 8
%cs=getelementptr inbounds i8,i8*%cn,i64 8
%ct=bitcast i8*%cs to i32*
store i32 1,i32*%ct,align 4
%cu=call i8*@sml_alloc(i32 inreg 44)#0
%cv=getelementptr inbounds i8,i8*%cu,i64 -4
%cw=bitcast i8*%cv to i32*
store i32 1342177320,i32*%cw,align 4
%cx=bitcast i8*%cu to i8**
store i8*null,i8**%cx,align 8
%cy=load i8*,i8**%d,align 8
%cz=getelementptr inbounds i8,i8*%cu,i64 8
%cA=bitcast i8*%cz to i8**
store i8*%cy,i8**%cA,align 8
%cB=getelementptr inbounds i8,i8*%cu,i64 16
%cC=bitcast i8*%cB to i8**
store i8*null,i8**%cC,align 8
%cD=load i8*,i8**%f,align 8
%cE=getelementptr inbounds i8,i8*%cu,i64 24
%cF=bitcast i8*%cE to i8**
store i8*%cD,i8**%cF,align 8
%cG=load i8*,i8**%c,align 8
%cH=getelementptr inbounds i8,i8*%cu,i64 32
%cI=bitcast i8*%cH to i8**
store i8*%cG,i8**%cI,align 8
%cJ=getelementptr inbounds i8,i8*%cu,i64 40
%cK=bitcast i8*%cJ to i32*
store i32 31,i32*%cK,align 4
%cL=load i8*,i8**%l,align 8
%cM=tail call fastcc i8*@_SMLL6mergef_492(i8*inreg%cL,i8*inreg%cu)
ret i8*%cM
cN:
%cO=load i8*,i8**%aG,align 8
store i8*%cO,i8**%e,align 8
%cP=icmp eq i32%ae,0
br i1%cP,label%cV,label%cQ
cQ:
store i8*null,i8**%e,align 8
%cR=sext i32%F to i64
%cS=getelementptr inbounds i8,i8*%cO,i64%cR
%cT=bitcast i8*%cS to i8**
%cU=load i8*,i8**%cT,align 8
br label%c9
cV:
%cW=call i8*@sml_alloc(i32 inreg%C)#0
%cX=getelementptr inbounds i8,i8*%cW,i64 -4
%cY=bitcast i8*%cX to i32*
store i32%C,i32*%cY,align 4
%cZ=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%c0=sext i32%F to i64
%c1=getelementptr inbounds i8,i8*%cZ,i64%c0
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cW,i8*%c1,i32%C,i1 false)
%c2=bitcast i8**%d to i8***
%c3=load i8**,i8***%c2,align 8
%c4=load i8*,i8**%l,align 8
%c5=getelementptr inbounds i8,i8*%c4,i64 32
%c6=bitcast i8*%c5 to i32*
%c7=load i32,i32*%c6,align 4
%c8=bitcast i8**%c3 to i8*
br label%c9
c9:
%da=phi i8*[%c8,%cV],[%aE,%cQ]
%db=phi i32[%c7,%cV],[%ap,%cQ]
%dc=phi i8*[%c4,%cV],[%y,%cQ]
%dd=phi i8**[%c3,%cV],[%aG,%cQ]
%de=phi i8*[%cW,%cV],[%cU,%cQ]
store i8*%de,i8**%e,align 8
%df=load i8*,i8**%dd,align 8
store i8*%df,i8**%f,align 8
%dg=icmp eq i32%db,0
br i1%dg,label%dm,label%dh
dh:
store i8*null,i8**%f,align 8
%di=sext i32%N to i64
%dj=getelementptr inbounds i8,i8*%df,i64%di
%dk=bitcast i8*%dj to i8**
%dl=load i8*,i8**%dk,align 8
br label%dx
dm:
%dn=getelementptr inbounds i8,i8*%dc,i64 36
%do=bitcast i8*%dn to i32*
%dp=load i32,i32*%do,align 4
%dq=call i8*@sml_alloc(i32 inreg%dp)#0
%dr=getelementptr inbounds i8,i8*%dq,i64 -4
%ds=bitcast i8*%dr to i32*
store i32%dp,i32*%ds,align 4
%dt=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%du=sext i32%N to i64
%dv=getelementptr inbounds i8,i8*%dt,i64%du
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dq,i8*%dv,i32%dp,i1 false)
%dw=load i8*,i8**%d,align 8
br label%dx
dx:
%dy=phi i8*[%dw,%dm],[%da,%dh]
%dz=phi i8*[%dq,%dm],[%dl,%dh]
store i8*%dz,i8**%f,align 8
%dA=getelementptr inbounds i8,i8*%dy,i64 8
%dB=bitcast i8*%dA to i8**
%dC=load i8*,i8**%dB,align 8
store i8*%dC,i8**%g,align 8
%dD=load i8*,i8**%c,align 8
%dE=getelementptr inbounds i8,i8*%dD,i64 8
%dF=bitcast i8*%dE to i8**
%dG=load i8*,i8**%dF,align 8
store i8*%dG,i8**%h,align 8
%dH=icmp eq i8*%dG,null
%dI=bitcast i8*%dG to i8**
br i1%dH,label%dJ,label%eN
dJ:
store i8*null,i8**%d,align 8
store i8*null,i8**%h,align 8
%dK=getelementptr inbounds i8,i8*%dD,i64 16
%dL=bitcast i8*%dK to i8**
%dM=load i8*,i8**%dL,align 8
store i8*%dM,i8**%c,align 8
%dN=load i8*,i8**%l,align 8
%dO=getelementptr inbounds i8,i8*%dN,i64 28
%dP=bitcast i8*%dO to i32*
%dQ=load i32,i32*%dP,align 4
%dR=getelementptr inbounds i8,i8*%dN,i64 24
%dS=bitcast i8*%dR to i32*
%dT=load i32,i32*%dS,align 4
%dU=getelementptr inbounds i8,i8*%dN,i64 36
%dV=bitcast i8*%dU to i32*
%dW=load i32,i32*%dV,align 4
%dX=getelementptr inbounds i8,i8*%dN,i64 32
%dY=bitcast i8*%dX to i32*
%dZ=load i32,i32*%dY,align 4
%d0=call i8*@sml_alloc(i32 inreg%as)#0
%d1=or i32%ak,1342177280
%d2=getelementptr inbounds i8,i8*%d0,i64 -4
%d3=bitcast i8*%d2 to i32*
store i32%d1,i32*%d3,align 4
store i8*%d0,i8**%d,align 8
call void@llvm.memset.p0i8.i32(i8*%d0,i8 0,i32%as,i1 false)
%d4=icmp eq i32%dT,0
%d5=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%d6=sext i32%F to i64
%d7=getelementptr inbounds i8,i8*%d0,i64%d6
br i1%d4,label%ea,label%d8
d8:
%d9=bitcast i8*%d7 to i8**
store i8*%d5,i8**%d9,align 8
br label%eb
ea:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%d7,i8*%d5,i32%dQ,i1 false)
br label%eb
eb:
%ec=icmp eq i32%dZ,0
%ed=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%ee=sext i32%N to i64
%ef=getelementptr inbounds i8,i8*%d0,i64%ee
br i1%ec,label%ei,label%eg
eg:
%eh=bitcast i8*%ef to i8**
store i8*%ed,i8**%eh,align 8
br label%ej
ei:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ef,i8*%ed,i32%dW,i1 false)
br label%ej
ej:
%ek=sext i32%ak to i64
%el=getelementptr inbounds i8,i8*%d0,i64%ek
%em=bitcast i8*%el to i32*
store i32%ar,i32*%em,align 4
%en=call i8*@sml_alloc(i32 inreg 12)#0
%eo=getelementptr inbounds i8,i8*%en,i64 -4
%ep=bitcast i8*%eo to i32*
store i32 1342177288,i32*%ep,align 4
store i8*%en,i8**%e,align 8
%eq=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%er=bitcast i8*%en to i8**
store i8*%eq,i8**%er,align 8
%es=getelementptr inbounds i8,i8*%en,i64 8
%et=bitcast i8*%es to i32*
store i32 1,i32*%et,align 4
%eu=call i8*@sml_alloc(i32 inreg 44)#0
%ev=getelementptr inbounds i8,i8*%eu,i64 -4
%ew=bitcast i8*%ev to i32*
store i32 1342177320,i32*%ew,align 4
%ex=load i8*,i8**%e,align 8
%ey=bitcast i8*%eu to i8**
store i8*%ex,i8**%ey,align 8
%ez=getelementptr inbounds i8,i8*%eu,i64 8
%eA=bitcast i8*%ez to i8**
store i8*null,i8**%eA,align 8
%eB=load i8*,i8**%g,align 8
%eC=getelementptr inbounds i8,i8*%eu,i64 16
%eD=bitcast i8*%eC to i8**
store i8*%eB,i8**%eD,align 8
%eE=getelementptr inbounds i8,i8*%eu,i64 24
%eF=bitcast i8*%eE to i8**
store i8*null,i8**%eF,align 8
%eG=load i8*,i8**%c,align 8
%eH=getelementptr inbounds i8,i8*%eu,i64 32
%eI=bitcast i8*%eH to i8**
store i8*%eG,i8**%eI,align 8
%eJ=getelementptr inbounds i8,i8*%eu,i64 40
%eK=bitcast i8*%eJ to i32*
store i32 31,i32*%eK,align 4
%eL=load i8*,i8**%l,align 8
%eM=tail call fastcc i8*@_SMLL6mergef_492(i8*inreg%eL,i8*inreg%eu)
ret i8*%eM
eN:
%eO=load i8*,i8**%dI,align 8
store i8*%eO,i8**%i,align 8
%eP=load i8*,i8**%l,align 8
%eQ=getelementptr inbounds i8,i8*%eP,i64 24
%eR=bitcast i8*%eQ to i32*
%eS=load i32,i32*%eR,align 4
%eT=icmp eq i32%eS,0
br i1%eT,label%eZ,label%eU
eU:
store i8*null,i8**%i,align 8
%eV=sext i32%F to i64
%eW=getelementptr inbounds i8,i8*%eO,i64%eV
%eX=bitcast i8*%eW to i8**
%eY=load i8*,i8**%eX,align 8
br label%fd
eZ:
%e0=getelementptr inbounds i8,i8*%eP,i64 28
%e1=bitcast i8*%e0 to i32*
%e2=load i32,i32*%e1,align 4
%e3=call i8*@sml_alloc(i32 inreg%e2)#0
%e4=getelementptr inbounds i8,i8*%e3,i64 -4
%e5=bitcast i8*%e4 to i32*
store i32%e2,i32*%e5,align 4
%e6=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%e7=sext i32%F to i64
%e8=getelementptr inbounds i8,i8*%e6,i64%e7
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%e3,i8*%e8,i32%e2,i1 false)
%e9=bitcast i8**%h to i8***
%fa=load i8**,i8***%e9,align 8
%fb=load i8*,i8**%l,align 8
%fc=bitcast i8**%fa to i8*
br label%fd
fd:
%fe=phi i8*[%fb,%eZ],[%eP,%eU]
%ff=phi i8*[%fc,%eZ],[%dG,%eU]
%fg=phi i8**[%fa,%eZ],[%dI,%eU]
%fh=phi i8*[%e3,%eZ],[%eY,%eU]
store i8*%fh,i8**%i,align 8
%fi=load i8*,i8**%fg,align 8
store i8*%fi,i8**%j,align 8
%fj=getelementptr inbounds i8,i8*%fe,i64 40
%fk=bitcast i8*%fj to i32*
%fl=load i32,i32*%fk,align 4
%fm=icmp eq i32%fl,0
br i1%fm,label%ft,label%fn
fn:
%fo=bitcast i8*%fe to i8**
store i8*null,i8**%j,align 8
%fp=sext i32%T to i64
%fq=getelementptr inbounds i8,i8*%fi,i64%fp
%fr=bitcast i8*%fq to i8**
%fs=load i8*,i8**%fr,align 8
br label%fH
ft:
%fu=getelementptr inbounds i8,i8*%fe,i64 44
%fv=bitcast i8*%fu to i32*
%fw=load i32,i32*%fv,align 4
%fx=call i8*@sml_alloc(i32 inreg%fw)#0
%fy=getelementptr inbounds i8,i8*%fx,i64 -4
%fz=bitcast i8*%fy to i32*
store i32%fw,i32*%fz,align 4
%fA=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%fB=sext i32%T to i64
%fC=getelementptr inbounds i8,i8*%fA,i64%fB
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%fx,i8*%fC,i32%fw,i1 false)
%fD=load i8*,i8**%h,align 8
%fE=bitcast i8**%l to i8***
%fF=load i8**,i8***%fE,align 8
%fG=bitcast i8**%fF to i8*
br label%fH
fH:
%fI=phi i8*[%fG,%ft],[%fe,%fn]
%fJ=phi i8**[%fF,%ft],[%fo,%fn]
%fK=phi i8*[%fD,%ft],[%ff,%fn]
%fL=phi i8*[%fx,%ft],[%fs,%fn]
store i8*%fL,i8**%j,align 8
%fM=getelementptr inbounds i8,i8*%fK,i64 8
%fN=bitcast i8*%fM to i8**
%fO=load i8*,i8**%fN,align 8
store i8*%fO,i8**%k,align 8
%fP=load i8*,i8**%c,align 8
%fQ=getelementptr inbounds i8,i8*%fP,i64 16
%fR=bitcast i8*%fQ to i8**
%fS=load i8*,i8**%fR,align 8
store i8*%fS,i8**%c,align 8
%fT=load i8*,i8**%fJ,align 8
%fU=getelementptr inbounds i8,i8*%fT,i64 16
%fV=bitcast i8*%fU to i8*(i8*,i8*)**
%fW=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%fV,align 8
%fX=bitcast i8*%fT to i8**
%fY=load i8*,i8**%fX,align 8
store i8*%fY,i8**%m,align 8
%fZ=getelementptr inbounds i8,i8*%fI,i64 28
%f0=bitcast i8*%fZ to i32*
%f1=load i32,i32*%f0,align 4
%f2=getelementptr inbounds i8,i8*%fI,i64 24
%f3=bitcast i8*%f2 to i32*
%f4=load i32,i32*%f3,align 4
%f5=call i8*@sml_alloc(i32 inreg%ah)#0
%f6=or i32%Y,1342177280
%f7=getelementptr inbounds i8,i8*%f5,i64 -4
%f8=bitcast i8*%f7 to i32*
store i32%f6,i32*%f8,align 4
call void@llvm.memset.p0i8.i32(i8*%f5,i8 0,i32%ah,i1 false)
%f9=icmp eq i32%f4,0
%ga=load i8*,i8**%e,align 8
%gb=sext i32%F to i64
%gc=getelementptr inbounds i8,i8*%f5,i64%gb
br i1%f9,label%gj,label%gd
gd:
%ge=bitcast i8*%gc to i8**
store i8*%ga,i8**%ge,align 8
%gf=load i8*,i8**%i,align 8
%gg=sext i32%V to i64
%gh=getelementptr inbounds i8,i8*%f5,i64%gg
%gi=bitcast i8*%gh to i8**
store i8*%gf,i8**%gi,align 8
br label%gn
gj:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%gc,i8*%ga,i32%f1,i1 false)
%gk=load i8*,i8**%i,align 8
%gl=sext i32%V to i64
%gm=getelementptr inbounds i8,i8*%f5,i64%gl
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%gm,i8*%gk,i32%f1,i1 false)
br label%gn
gn:
%go=sext i32%Y to i64
%gp=getelementptr inbounds i8,i8*%f5,i64%go
%gq=bitcast i8*%gp to i32*
store i32%ag,i32*%gq,align 4
%gr=load i8*,i8**%m,align 8
store i8*null,i8**%m,align 8
%gs=call fastcc i8*%fW(i8*inreg%gr,i8*inreg%f5)
%gt=bitcast i8*%gs to i32*
%gu=load i32,i32*%gt,align 4
switch i32%gu,label%gv[
i32 0,label%iP
i32 1,label%hO
i32 2,label%gN
]
gv:
store i8*null,i8**%d,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%f,align 8
store i8*null,i8**%g,align 8
store i8*null,i8**%h,align 8
store i8*null,i8**%i,align 8
store i8*null,i8**%j,align 8
store i8*null,i8**%k,align 8
store i8*null,i8**%l,align 8
call void@sml_matchcomp_bug()
%gw=load i8*,i8**@_SMLZ5Match,align 8
store i8*%gw,i8**%c,align 8
%gx=call i8*@sml_alloc(i32 inreg 20)#0
%gy=getelementptr inbounds i8,i8*%gx,i64 -4
%gz=bitcast i8*%gy to i32*
store i32 1342177296,i32*%gz,align 4
store i8*%gx,i8**%d,align 8
%gA=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%gB=bitcast i8*%gx to i8**
store i8*%gA,i8**%gB,align 8
%gC=getelementptr inbounds i8,i8*%gx,i64 8
%gD=bitcast i8*%gC to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[52x i8]}>,<{[4x i8],i32,[52x i8]}>*@t,i64 0,i32 2,i64 0),i8**%gD,align 8
%gE=getelementptr inbounds i8,i8*%gx,i64 16
%gF=bitcast i8*%gE to i32*
store i32 3,i32*%gF,align 4
%gG=call i8*@sml_alloc(i32 inreg 60)#0
%gH=getelementptr inbounds i8,i8*%gG,i64 -4
%gI=bitcast i8*%gH to i32*
store i32 1342177336,i32*%gI,align 4
%gJ=getelementptr inbounds i8,i8*%gG,i64 56
%gK=bitcast i8*%gJ to i32*
store i32 1,i32*%gK,align 4
%gL=load i8*,i8**%d,align 8
%gM=bitcast i8*%gG to i8**
store i8*%gL,i8**%gM,align 8
call void@sml_raise(i8*inreg%gG)#1
unreachable
gN:
store i8*null,i8**%d,align 8
store i8*null,i8**%i,align 8
store i8*null,i8**%j,align 8
store i8*null,i8**%k,align 8
%gO=load i8*,i8**%l,align 8
%gP=getelementptr inbounds i8,i8*%gO,i64 28
%gQ=bitcast i8*%gP to i32*
%gR=load i32,i32*%gQ,align 4
%gS=getelementptr inbounds i8,i8*%gO,i64 24
%gT=bitcast i8*%gS to i32*
%gU=load i32,i32*%gT,align 4
%gV=getelementptr inbounds i8,i8*%gO,i64 36
%gW=bitcast i8*%gV to i32*
%gX=load i32,i32*%gW,align 4
%gY=getelementptr inbounds i8,i8*%gO,i64 32
%gZ=bitcast i8*%gY to i32*
%g0=load i32,i32*%gZ,align 4
%g1=call i8*@sml_alloc(i32 inreg%as)#0
%g2=or i32%ak,1342177280
%g3=getelementptr inbounds i8,i8*%g1,i64 -4
%g4=bitcast i8*%g3 to i32*
store i32%g2,i32*%g4,align 4
store i8*%g1,i8**%d,align 8
call void@llvm.memset.p0i8.i32(i8*%g1,i8 0,i32%as,i1 false)
%g5=icmp eq i32%gU,0
%g6=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%g7=getelementptr inbounds i8,i8*%g1,i64%gb
br i1%g5,label%ha,label%g8
g8:
%g9=bitcast i8*%g7 to i8**
store i8*%g6,i8**%g9,align 8
br label%hb
ha:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%g7,i8*%g6,i32%gR,i1 false)
br label%hb
hb:
%hc=icmp eq i32%g0,0
%hd=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%he=sext i32%N to i64
%hf=getelementptr inbounds i8,i8*%g1,i64%he
br i1%hc,label%hi,label%hg
hg:
%hh=bitcast i8*%hf to i8**
store i8*%hd,i8**%hh,align 8
br label%hj
hi:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%hf,i8*%hd,i32%gX,i1 false)
br label%hj
hj:
%hk=sext i32%ak to i64
%hl=getelementptr inbounds i8,i8*%g1,i64%hk
%hm=bitcast i8*%hl to i32*
store i32%ar,i32*%hm,align 4
%hn=call i8*@sml_alloc(i32 inreg 12)#0
%ho=getelementptr inbounds i8,i8*%hn,i64 -4
%hp=bitcast i8*%ho to i32*
store i32 1342177288,i32*%hp,align 4
store i8*%hn,i8**%e,align 8
%hq=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%hr=bitcast i8*%hn to i8**
store i8*%hq,i8**%hr,align 8
%hs=getelementptr inbounds i8,i8*%hn,i64 8
%ht=bitcast i8*%hs to i32*
store i32 1,i32*%ht,align 4
%hu=call i8*@sml_alloc(i32 inreg 44)#0
%hv=getelementptr inbounds i8,i8*%hu,i64 -4
%hw=bitcast i8*%hv to i32*
store i32 1342177320,i32*%hw,align 4
%hx=load i8*,i8**%e,align 8
%hy=bitcast i8*%hu to i8**
store i8*%hx,i8**%hy,align 8
%hz=getelementptr inbounds i8,i8*%hu,i64 8
%hA=bitcast i8*%hz to i8**
store i8*null,i8**%hA,align 8
%hB=load i8*,i8**%g,align 8
%hC=getelementptr inbounds i8,i8*%hu,i64 16
%hD=bitcast i8*%hC to i8**
store i8*%hB,i8**%hD,align 8
%hE=load i8*,i8**%h,align 8
%hF=getelementptr inbounds i8,i8*%hu,i64 24
%hG=bitcast i8*%hF to i8**
store i8*%hE,i8**%hG,align 8
%hH=load i8*,i8**%c,align 8
%hI=getelementptr inbounds i8,i8*%hu,i64 32
%hJ=bitcast i8*%hI to i8**
store i8*%hH,i8**%hJ,align 8
%hK=getelementptr inbounds i8,i8*%hu,i64 40
%hL=bitcast i8*%hK to i32*
store i32 31,i32*%hL,align 4
%hM=load i8*,i8**%l,align 8
%hN=tail call fastcc i8*@_SMLL6mergef_492(i8*inreg%hM,i8*inreg%hu)
ret i8*%hN
hO:
store i8*null,i8**%e,align 8
store i8*null,i8**%f,align 8
store i8*null,i8**%g,align 8
store i8*null,i8**%h,align 8
%hP=load i8*,i8**%l,align 8
%hQ=getelementptr inbounds i8,i8*%hP,i64 28
%hR=bitcast i8*%hQ to i32*
%hS=load i32,i32*%hR,align 4
%hT=getelementptr inbounds i8,i8*%hP,i64 24
%hU=bitcast i8*%hT to i32*
%hV=load i32,i32*%hU,align 4
%hW=getelementptr inbounds i8,i8*%hP,i64 44
%hX=bitcast i8*%hW to i32*
%hY=load i32,i32*%hX,align 4
%hZ=getelementptr inbounds i8,i8*%hP,i64 40
%h0=bitcast i8*%hZ to i32*
%h1=load i32,i32*%h0,align 4
%h2=call i8*@sml_alloc(i32 inreg%aD)#0
%h3=or i32%av,1342177280
%h4=getelementptr inbounds i8,i8*%h2,i64 -4
%h5=bitcast i8*%h4 to i32*
store i32%h3,i32*%h5,align 4
store i8*%h2,i8**%e,align 8
call void@llvm.memset.p0i8.i32(i8*%h2,i8 0,i32%aD,i1 false)
%h6=icmp eq i32%hV,0
%h7=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%h8=getelementptr inbounds i8,i8*%h2,i64%gb
br i1%h6,label%ib,label%h9
h9:
%ia=bitcast i8*%h8 to i8**
store i8*%h7,i8**%ia,align 8
br label%ic
ib:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%h8,i8*%h7,i32%hS,i1 false)
br label%ic
ic:
%id=icmp eq i32%h1,0
%ie=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%if=sext i32%T to i64
%ig=getelementptr inbounds i8,i8*%h2,i64%if
br i1%id,label%ij,label%ih
ih:
%ii=bitcast i8*%ig to i8**
store i8*%ie,i8**%ii,align 8
br label%ik
ij:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ig,i8*%ie,i32%hY,i1 false)
br label%ik
ik:
%il=sext i32%av to i64
%im=getelementptr inbounds i8,i8*%h2,i64%il
%in=bitcast i8*%im to i32*
store i32%aC,i32*%in,align 4
%io=call i8*@sml_alloc(i32 inreg 12)#0
%ip=getelementptr inbounds i8,i8*%io,i64 -4
%iq=bitcast i8*%ip to i32*
store i32 1342177288,i32*%iq,align 4
store i8*%io,i8**%f,align 8
%ir=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%is=bitcast i8*%io to i8**
store i8*%ir,i8**%is,align 8
%it=getelementptr inbounds i8,i8*%io,i64 8
%iu=bitcast i8*%it to i32*
store i32 1,i32*%iu,align 4
%iv=call i8*@sml_alloc(i32 inreg 44)#0
%iw=getelementptr inbounds i8,i8*%iv,i64 -4
%ix=bitcast i8*%iw to i32*
store i32 1342177320,i32*%ix,align 4
%iy=bitcast i8*%iv to i8**
store i8*null,i8**%iy,align 8
%iz=load i8*,i8**%f,align 8
%iA=getelementptr inbounds i8,i8*%iv,i64 8
%iB=bitcast i8*%iA to i8**
store i8*%iz,i8**%iB,align 8
%iC=load i8*,i8**%d,align 8
%iD=getelementptr inbounds i8,i8*%iv,i64 16
%iE=bitcast i8*%iD to i8**
store i8*%iC,i8**%iE,align 8
%iF=load i8*,i8**%k,align 8
%iG=getelementptr inbounds i8,i8*%iv,i64 24
%iH=bitcast i8*%iG to i8**
store i8*%iF,i8**%iH,align 8
%iI=load i8*,i8**%c,align 8
%iJ=getelementptr inbounds i8,i8*%iv,i64 32
%iK=bitcast i8*%iJ to i8**
store i8*%iI,i8**%iK,align 8
%iL=getelementptr inbounds i8,i8*%iv,i64 40
%iM=bitcast i8*%iL to i32*
store i32 31,i32*%iM,align 4
%iN=load i8*,i8**%l,align 8
%iO=tail call fastcc i8*@_SMLL6mergef_492(i8*inreg%iN,i8*inreg%iv)
ret i8*%iO
iP:
store i8*null,i8**%d,align 8
store i8*null,i8**%h,align 8
%iQ=load i8*,i8**%l,align 8
%iR=getelementptr inbounds i8,i8*%iQ,i64 28
%iS=bitcast i8*%iR to i32*
%iT=load i32,i32*%iS,align 4
%iU=getelementptr inbounds i8,i8*%iQ,i64 24
%iV=bitcast i8*%iU to i32*
%iW=load i32,i32*%iV,align 4
%iX=getelementptr inbounds i8,i8*%iQ,i64 36
%iY=bitcast i8*%iX to i32*
%iZ=load i32,i32*%iY,align 4
%i0=getelementptr inbounds i8,i8*%iQ,i64 32
%i1=bitcast i8*%i0 to i32*
%i2=load i32,i32*%i1,align 4
%i3=call i8*@sml_alloc(i32 inreg%as)#0
%i4=or i32%ak,1342177280
%i5=getelementptr inbounds i8,i8*%i3,i64 -4
%i6=bitcast i8*%i5 to i32*
store i32%i4,i32*%i6,align 4
store i8*%i3,i8**%d,align 8
call void@llvm.memset.p0i8.i32(i8*%i3,i8 0,i32%as,i1 false)
%i7=icmp eq i32%iW,0
%i8=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%i9=getelementptr inbounds i8,i8*%i3,i64%gb
br i1%i7,label%jc,label%ja
ja:
%jb=bitcast i8*%i9 to i8**
store i8*%i8,i8**%jb,align 8
br label%jd
jc:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%i9,i8*%i8,i32%iT,i1 false)
br label%jd
jd:
%je=icmp eq i32%i2,0
%jf=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%jg=sext i32%N to i64
%jh=getelementptr inbounds i8,i8*%i3,i64%jg
br i1%je,label%jk,label%ji
ji:
%jj=bitcast i8*%jh to i8**
store i8*%jf,i8**%jj,align 8
br label%jl
jk:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%jh,i8*%jf,i32%iZ,i1 false)
br label%jl
jl:
%jm=sext i32%ak to i64
%jn=getelementptr inbounds i8,i8*%i3,i64%jm
%jo=bitcast i8*%jn to i32*
store i32%ar,i32*%jo,align 4
%jp=call i8*@sml_alloc(i32 inreg 12)#0
%jq=getelementptr inbounds i8,i8*%jp,i64 -4
%jr=bitcast i8*%jq to i32*
store i32 1342177288,i32*%jr,align 4
store i8*%jp,i8**%e,align 8
%js=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%jt=bitcast i8*%jp to i8**
store i8*%js,i8**%jt,align 8
%ju=getelementptr inbounds i8,i8*%jp,i64 8
%jv=bitcast i8*%ju to i32*
store i32 1,i32*%jv,align 4
%jw=load i8*,i8**%l,align 8
%jx=getelementptr inbounds i8,i8*%jw,i64 28
%jy=bitcast i8*%jx to i32*
%jz=load i32,i32*%jy,align 4
%jA=getelementptr inbounds i8,i8*%jw,i64 24
%jB=bitcast i8*%jA to i32*
%jC=load i32,i32*%jB,align 4
%jD=getelementptr inbounds i8,i8*%jw,i64 44
%jE=bitcast i8*%jD to i32*
%jF=load i32,i32*%jE,align 4
%jG=getelementptr inbounds i8,i8*%jw,i64 40
%jH=bitcast i8*%jG to i32*
%jI=load i32,i32*%jH,align 4
%jJ=call i8*@sml_alloc(i32 inreg%aD)#0
%jK=or i32%av,1342177280
%jL=getelementptr inbounds i8,i8*%jJ,i64 -4
%jM=bitcast i8*%jL to i32*
store i32%jK,i32*%jM,align 4
store i8*%jJ,i8**%d,align 8
call void@llvm.memset.p0i8.i32(i8*%jJ,i8 0,i32%aD,i1 false)
%jN=icmp eq i32%jC,0
%jO=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%jP=getelementptr inbounds i8,i8*%jJ,i64%gb
br i1%jN,label%jS,label%jQ
jQ:
%jR=bitcast i8*%jP to i8**
store i8*%jO,i8**%jR,align 8
br label%jT
jS:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%jP,i8*%jO,i32%jz,i1 false)
br label%jT
jT:
%jU=icmp eq i32%jI,0
%jV=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%jW=sext i32%T to i64
%jX=getelementptr inbounds i8,i8*%jJ,i64%jW
br i1%jU,label%j0,label%jY
jY:
%jZ=bitcast i8*%jX to i8**
store i8*%jV,i8**%jZ,align 8
br label%j1
j0:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%jX,i8*%jV,i32%jF,i1 false)
br label%j1
j1:
%j2=sext i32%av to i64
%j3=getelementptr inbounds i8,i8*%jJ,i64%j2
%j4=bitcast i8*%j3 to i32*
store i32%aC,i32*%j4,align 4
%j5=call i8*@sml_alloc(i32 inreg 12)#0
%j6=getelementptr inbounds i8,i8*%j5,i64 -4
%j7=bitcast i8*%j6 to i32*
store i32 1342177288,i32*%j7,align 4
store i8*%j5,i8**%f,align 8
%j8=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%j9=bitcast i8*%j5 to i8**
store i8*%j8,i8**%j9,align 8
%ka=getelementptr inbounds i8,i8*%j5,i64 8
%kb=bitcast i8*%ka to i32*
store i32 1,i32*%kb,align 4
%kc=call i8*@sml_alloc(i32 inreg 44)#0
%kd=getelementptr inbounds i8,i8*%kc,i64 -4
%ke=bitcast i8*%kd to i32*
store i32 1342177320,i32*%ke,align 4
%kf=load i8*,i8**%e,align 8
%kg=bitcast i8*%kc to i8**
store i8*%kf,i8**%kg,align 8
%kh=load i8*,i8**%f,align 8
%ki=getelementptr inbounds i8,i8*%kc,i64 8
%kj=bitcast i8*%ki to i8**
store i8*%kh,i8**%kj,align 8
%kk=load i8*,i8**%g,align 8
%kl=getelementptr inbounds i8,i8*%kc,i64 16
%km=bitcast i8*%kl to i8**
store i8*%kk,i8**%km,align 8
%kn=load i8*,i8**%k,align 8
%ko=getelementptr inbounds i8,i8*%kc,i64 24
%kp=bitcast i8*%ko to i8**
store i8*%kn,i8**%kp,align 8
%kq=load i8*,i8**%c,align 8
%kr=getelementptr inbounds i8,i8*%kc,i64 32
%ks=bitcast i8*%kr to i8**
store i8*%kq,i8**%ks,align 8
%kt=getelementptr inbounds i8,i8*%kc,i64 40
%ku=bitcast i8*%kt to i32*
store i32 31,i32*%ku,align 4
%kv=load i8*,i8**%l,align 8
%kw=tail call fastcc i8*@_SMLL6mergef_492(i8*inreg%kv,i8*inreg%kc)
ret i8*%kw
}
define internal fastcc i8*@_SMLL6mergef_492(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
q:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
store i8*%b,i8**%c,align 8
store i8*%a,i8**%i,align 8
%j=load atomic i32,i32*@sml_check_flag unordered,align 4
%k=icmp eq i32%j,0
br i1%k,label%o,label%l
l:
call void@sml_check(i32 inreg%j)
%m=load i8*,i8**%c,align 8
%n=load i8*,i8**%i,align 8
br label%o
o:
%p=phi i8*[%n,%l],[%a,%q]
%r=phi i8*[%m,%l],[%b,%q]
%s=getelementptr inbounds i8,i8*%p,i64 28
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=add i32%u,-1
%w=sub i32 0,%u
%x=and i32%v,%w
%y=getelementptr inbounds i8,i8*%p,i64 52
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=add i32%v,%A
%C=add i32%B,%x
%D=sub i32 0,%A
%E=and i32%C,%D
%F=add i32%u,7
%G=and i32%F,%w
%H=add i32%B,%G
%I=and i32%H,%D
%J=add i32%A,7
%K=add i32%J,%I
%L=and i32%K,-8
%M=lshr i32%I,3
%N=lshr i32%G,3
%O=sub nsw i32%M,%N
%P=getelementptr inbounds i8,i8*%p,i64 48
%Q=bitcast i8*%P to i32*
%R=load i32,i32*%Q,align 4
%S=shl i32%R,%O
%T=getelementptr inbounds i8,i8*%p,i64 24
%U=bitcast i8*%T to i32*
%V=load i32,i32*%U,align 4
%W=or i32%S,%V
%X=shl i32%W,%N
%Y=or i32%X,1
%Z=or i32%L,4
%aa=bitcast i8*%r to i8**
%ab=load i8*,i8**%aa,align 8
store i8*%ab,i8**%c,align 8
%ac=getelementptr inbounds i8,i8*%r,i64 8
%ad=bitcast i8*%ac to i8**
%ae=load i8*,i8**%ad,align 8
store i8*%ae,i8**%d,align 8
%af=getelementptr inbounds i8,i8*%r,i64 16
%ag=bitcast i8*%af to i8**
%ah=load i8*,i8**%ag,align 8
store i8*%ah,i8**%e,align 8
%ai=getelementptr inbounds i8,i8*%r,i64 24
%aj=bitcast i8*%ai to i8**
%ak=load i8*,i8**%aj,align 8
store i8*%ak,i8**%f,align 8
%al=getelementptr inbounds i8,i8*%r,i64 32
%am=bitcast i8*%al to i8**
%an=load i8*,i8**%am,align 8
store i8*%an,i8**%g,align 8
%ao=getelementptr inbounds i8,i8*%p,i64 8
%ap=bitcast i8*%ao to i8**
%aq=load i8*,i8**%ap,align 8
%ar=getelementptr inbounds i8,i8*%aq,i64 16
%as=bitcast i8*%ar to i8*(i8*,i8*)**
%at=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%as,align 8
%au=bitcast i8*%aq to i8**
%av=load i8*,i8**%au,align 8
store i8*%av,i8**%h,align 8
%aw=call i8*@sml_alloc(i32 inreg 20)#0
%ax=getelementptr inbounds i8,i8*%aw,i64 -4
%ay=bitcast i8*%ax to i32*
store i32 1342177296,i32*%ay,align 4
%az=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aA=bitcast i8*%aw to i8**
store i8*%az,i8**%aA,align 8
%aB=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aC=getelementptr inbounds i8,i8*%aw,i64 8
%aD=bitcast i8*%aC to i8**
store i8*%aB,i8**%aD,align 8
%aE=getelementptr inbounds i8,i8*%aw,i64 16
%aF=bitcast i8*%aE to i32*
store i32 3,i32*%aF,align 4
%aG=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%aH=call fastcc i8*%at(i8*inreg%aG,i8*inreg%aw)
%aI=icmp eq i8*%aH,null
br i1%aI,label%aJ,label%aZ
aJ:
%aK=call i8*@sml_alloc(i32 inreg 28)#0
%aL=getelementptr inbounds i8,i8*%aK,i64 -4
%aM=bitcast i8*%aL to i32*
store i32 1342177304,i32*%aM,align 4
%aN=load i8*,i8**%e,align 8
%aO=bitcast i8*%aK to i8**
store i8*%aN,i8**%aO,align 8
%aP=load i8*,i8**%f,align 8
%aQ=getelementptr inbounds i8,i8*%aK,i64 8
%aR=bitcast i8*%aQ to i8**
store i8*%aP,i8**%aR,align 8
%aS=load i8*,i8**%g,align 8
%aT=getelementptr inbounds i8,i8*%aK,i64 16
%aU=bitcast i8*%aT to i8**
store i8*%aS,i8**%aU,align 8
%aV=getelementptr inbounds i8,i8*%aK,i64 24
%aW=bitcast i8*%aV to i32*
store i32 7,i32*%aW,align 4
%aX=load i8*,i8**%i,align 8
%aY=tail call fastcc i8*@_SMLL5merge_491(i8*inreg%aX,i8*inreg%aK)
ret i8*%aY
aZ:
%a0=bitcast i8*%aH to i8**
%a1=load i8*,i8**%a0,align 8
store i8*%a1,i8**%c,align 8
%a2=load i8*,i8**%i,align 8
%a3=getelementptr inbounds i8,i8*%a2,i64 24
%a4=bitcast i8*%a3 to i32*
%a5=load i32,i32*%a4,align 4
%a6=icmp eq i32%a5,0
br i1%a6,label%bc,label%a7
a7:
%a8=sext i32%x to i64
%a9=getelementptr inbounds i8,i8*%a1,i64%a8
%ba=bitcast i8*%a9 to i8**
%bb=load i8*,i8**%ba,align 8
br label%bn
bc:
%bd=getelementptr inbounds i8,i8*%a2,i64 28
%be=bitcast i8*%bd to i32*
%bf=load i32,i32*%be,align 4
%bg=call i8*@sml_alloc(i32 inreg%bf)#0
%bh=getelementptr inbounds i8,i8*%bg,i64 -4
%bi=bitcast i8*%bh to i32*
store i32%bf,i32*%bi,align 4
%bj=load i8*,i8**%c,align 8
%bk=sext i32%x to i64
%bl=getelementptr inbounds i8,i8*%bj,i64%bk
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bg,i8*%bl,i32%bf,i1 false)
%bm=load i8*,i8**%i,align 8
br label%bn
bn:
%bo=phi i8*[%bj,%bc],[%a1,%a7]
%bp=phi i8*[%bm,%bc],[%a2,%a7]
%bq=phi i8*[%bg,%bc],[%bb,%a7]
store i8*%bq,i8**%d,align 8
%br=getelementptr inbounds i8,i8*%bp,i64 48
%bs=bitcast i8*%br to i32*
%bt=load i32,i32*%bs,align 4
%bu=icmp eq i32%bt,0
br i1%bu,label%bA,label%bv
bv:
store i8*null,i8**%c,align 8
%bw=sext i32%E to i64
%bx=getelementptr inbounds i8,i8*%bo,i64%bw
%by=bitcast i8*%bx to i8**
%bz=load i8*,i8**%by,align 8
br label%bO
bA:
%bB=getelementptr inbounds i8,i8*%bp,i64 52
%bC=bitcast i8*%bB to i32*
%bD=load i32,i32*%bC,align 4
%bE=call i8*@sml_alloc(i32 inreg%bD)#0
%bF=getelementptr inbounds i8,i8*%bE,i64 -4
%bG=bitcast i8*%bF to i32*
store i32%bD,i32*%bG,align 4
%bH=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bI=sext i32%E to i64
%bJ=getelementptr inbounds i8,i8*%bH,i64%bI
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bE,i8*%bJ,i32%bD,i1 false)
%bK=load i8*,i8**%i,align 8
%bL=getelementptr inbounds i8,i8*%bK,i64 48
%bM=bitcast i8*%bL to i32*
%bN=load i32,i32*%bM,align 4
br label%bO
bO:
%bP=phi i32[%bN,%bA],[%bt,%bv]
%bQ=phi i8*[%bK,%bA],[%bp,%bv]
%bR=phi i8*[%bE,%bA],[%bz,%bv]
store i8*%bR,i8**%c,align 8
%bS=getelementptr inbounds i8,i8*%bQ,i64 16
%bT=bitcast i8*%bS to i8**
%bU=load i8*,i8**%bT,align 8
%bV=getelementptr inbounds i8,i8*%bQ,i64 52
%bW=bitcast i8*%bV to i32*
%bX=load i32,i32*%bW,align 4
%bY=call fastcc i8*@_SMLL6insert_334(i8*inreg%bU,i32 inreg%bP,i32 inreg%bX)
%bZ=getelementptr inbounds i8,i8*%bY,i64 16
%b0=bitcast i8*%bZ to i8*(i8*,i8*)**
%b1=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%b0,align 8
%b2=bitcast i8*%bY to i8**
%b3=load i8*,i8**%b2,align 8
store i8*%b3,i8**%h,align 8
%b4=load i8*,i8**%i,align 8
%b5=getelementptr inbounds i8,i8*%b4,i64 28
%b6=bitcast i8*%b5 to i32*
%b7=load i32,i32*%b6,align 4
%b8=getelementptr inbounds i8,i8*%b4,i64 24
%b9=bitcast i8*%b8 to i32*
%ca=load i32,i32*%b9,align 4
%cb=getelementptr inbounds i8,i8*%b4,i64 52
%cc=bitcast i8*%cb to i32*
%cd=load i32,i32*%cc,align 4
%ce=getelementptr inbounds i8,i8*%b4,i64 48
%cf=bitcast i8*%ce to i32*
%cg=load i32,i32*%cf,align 4
%ch=call i8*@sml_alloc(i32 inreg%Z)#0
%ci=or i32%L,1342177280
%cj=getelementptr inbounds i8,i8*%ch,i64 -4
%ck=bitcast i8*%cj to i32*
store i32%ci,i32*%ck,align 4
call void@llvm.memset.p0i8.i32(i8*%ch,i8 0,i32%Z,i1 false)
%cl=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%cm=bitcast i8*%ch to i8**
store i8*%cl,i8**%cm,align 8
%cn=icmp eq i32%ca,0
%co=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%cp=sext i32%G to i64
%cq=getelementptr inbounds i8,i8*%ch,i64%cp
br i1%cn,label%ct,label%cr
cr:
%cs=bitcast i8*%cq to i8**
store i8*%co,i8**%cs,align 8
br label%cu
ct:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cq,i8*%co,i32%b7,i1 false)
br label%cu
cu:
%cv=icmp eq i32%cg,0
%cw=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cx=sext i32%I to i64
%cy=getelementptr inbounds i8,i8*%ch,i64%cx
br i1%cv,label%cB,label%cz
cz:
%cA=bitcast i8*%cy to i8**
store i8*%cw,i8**%cA,align 8
br label%cC
cB:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cy,i8*%cw,i32%cd,i1 false)
br label%cC
cC:
%cD=sext i32%L to i64
%cE=getelementptr inbounds i8,i8*%ch,i64%cD
%cF=bitcast i8*%cE to i32*
store i32%Y,i32*%cF,align 4
%cG=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%cH=call fastcc i8*%b1(i8*inreg%cG,i8*inreg%ch)
store i8*%cH,i8**%c,align 8
%cI=call i8*@sml_alloc(i32 inreg 28)#0
%cJ=getelementptr inbounds i8,i8*%cI,i64 -4
%cK=bitcast i8*%cJ to i32*
store i32 1342177304,i32*%cK,align 4
%cL=load i8*,i8**%e,align 8
%cM=bitcast i8*%cI to i8**
store i8*%cL,i8**%cM,align 8
%cN=load i8*,i8**%f,align 8
%cO=getelementptr inbounds i8,i8*%cI,i64 8
%cP=bitcast i8*%cO to i8**
store i8*%cN,i8**%cP,align 8
%cQ=load i8*,i8**%c,align 8
%cR=getelementptr inbounds i8,i8*%cI,i64 16
%cS=bitcast i8*%cR to i8**
store i8*%cQ,i8**%cS,align 8
%cT=getelementptr inbounds i8,i8*%cI,i64 24
%cU=bitcast i8*%cT to i32*
store i32 7,i32*%cU,align 4
%cV=load i8*,i8**%i,align 8
%cW=tail call fastcc i8*@_SMLL5merge_491(i8*inreg%cV,i8*inreg%cI)
ret i8*%cW
}
define internal fastcc i8*@_SMLL11mergeWithi2_494(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%k,label%m
k:
%l=bitcast i8*%a to i8**
br label%q
m:
call void@sml_check(i32 inreg%i)
%n=bitcast i8**%e to i8***
%o=load i8**,i8***%n,align 8
%p=bitcast i8**%o to i8*
br label%q
q:
%r=phi i8*[%p,%m],[%a,%k]
%s=phi i8**[%o,%m],[%l,%k]
%t=load i8*,i8**%s,align 8
store i8*%t,i8**%d,align 8
%u=getelementptr inbounds i8*,i8**%s,i64 1
%v=load i8*,i8**%u,align 8
store i8*%v,i8**%f,align 8
%w=getelementptr inbounds i8*,i8**%s,i64 2
%x=load i8*,i8**%w,align 8
store i8*%x,i8**%g,align 8
%y=getelementptr inbounds i8,i8*%r,i64 32
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=getelementptr inbounds i8,i8*%r,i64 36
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=getelementptr inbounds i8,i8*%r,i64 40
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
%H=getelementptr inbounds i8,i8*%r,i64 44
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
%K=getelementptr inbounds i8,i8*%r,i64 48
%L=bitcast i8*%K to i32*
%M=load i32,i32*%L,align 4
%N=getelementptr inbounds i8,i8*%r,i64 52
%O=bitcast i8*%N to i32*
%P=load i32,i32*%O,align 4
%Q=getelementptr inbounds i8,i8*%r,i64 56
%R=bitcast i8*%Q to i32*
%S=load i32,i32*%R,align 4
%T=getelementptr inbounds i8,i8*%r,i64 60
%U=bitcast i8*%T to i32*
%V=load i32,i32*%U,align 4
%W=call i8*@sml_alloc(i32 inreg 60)#0
%X=getelementptr inbounds i8,i8*%W,i64 -4
%Y=bitcast i8*%X to i32*
store i32 1342177336,i32*%Y,align 4
store i8*%W,i8**%h,align 8
%Z=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aa=bitcast i8*%W to i8**
store i8*%Z,i8**%aa,align 8
%ab=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%ac=getelementptr inbounds i8,i8*%W,i64 8
%ad=bitcast i8*%ac to i8**
store i8*%ab,i8**%ad,align 8
%ae=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%af=getelementptr inbounds i8,i8*%W,i64 16
%ag=bitcast i8*%af to i8**
store i8*%ae,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%W,i64 24
%ai=bitcast i8*%ah to i32*
store i32%A,i32*%ai,align 4
%aj=getelementptr inbounds i8,i8*%W,i64 28
%ak=bitcast i8*%aj to i32*
store i32%D,i32*%ak,align 4
%al=getelementptr inbounds i8,i8*%W,i64 32
%am=bitcast i8*%al to i32*
store i32%G,i32*%am,align 4
%an=getelementptr inbounds i8,i8*%W,i64 36
%ao=bitcast i8*%an to i32*
store i32%J,i32*%ao,align 4
%ap=getelementptr inbounds i8,i8*%W,i64 40
%aq=bitcast i8*%ap to i32*
store i32%M,i32*%aq,align 4
%ar=getelementptr inbounds i8,i8*%W,i64 44
%as=bitcast i8*%ar to i32*
store i32%P,i32*%as,align 4
%at=getelementptr inbounds i8,i8*%W,i64 48
%au=bitcast i8*%at to i32*
store i32%S,i32*%au,align 4
%av=getelementptr inbounds i8,i8*%W,i64 52
%aw=bitcast i8*%av to i32*
store i32%V,i32*%aw,align 4
%ax=getelementptr inbounds i8,i8*%W,i64 56
%ay=bitcast i8*%ax to i32*
store i32 7,i32*%ay,align 4
%az=call i8*@sml_alloc(i32 inreg 28)#0
%aA=getelementptr inbounds i8,i8*%az,i64 -4
%aB=bitcast i8*%aA to i32*
store i32 1342177304,i32*%aB,align 4
%aC=load i8*,i8**%h,align 8
%aD=bitcast i8*%az to i8**
store i8*%aC,i8**%aD,align 8
%aE=getelementptr inbounds i8,i8*%az,i64 8
%aF=bitcast i8*%aE to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL5merge_491 to void(...)*),void(...)**%aF,align 8
%aG=getelementptr inbounds i8,i8*%az,i64 16
%aH=bitcast i8*%aG to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL5merge_491 to void(...)*),void(...)**%aH,align 8
%aI=getelementptr inbounds i8,i8*%az,i64 24
%aJ=bitcast i8*%aI to i32*
store i32 -2147483647,i32*%aJ,align 4
%aK=call i8*@sml_alloc(i32 inreg 28)#0
%aL=getelementptr inbounds i8,i8*%aK,i64 -4
%aM=bitcast i8*%aL to i32*
store i32 1342177304,i32*%aM,align 4
%aN=load i8*,i8**%h,align 8
%aO=bitcast i8*%aK to i8**
store i8*%aN,i8**%aO,align 8
%aP=getelementptr inbounds i8,i8*%aK,i64 8
%aQ=bitcast i8*%aP to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6mergef_492 to void(...)*),void(...)**%aQ,align 8
%aR=getelementptr inbounds i8,i8*%aK,i64 16
%aS=bitcast i8*%aR to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6mergef_492 to void(...)*),void(...)**%aS,align 8
%aT=getelementptr inbounds i8,i8*%aK,i64 24
%aU=bitcast i8*%aT to i32*
store i32 -2147483647,i32*%aU,align 4
%aV=load i8*,i8**%e,align 8
%aW=getelementptr inbounds i8,i8*%aV,i64 24
%aX=bitcast i8*%aW to i8**
%aY=load i8*,i8**%aX,align 8
%aZ=getelementptr inbounds i8,i8*%aV,i64 40
%a0=bitcast i8*%aZ to i32*
%a1=load i32,i32*%a0,align 4
%a2=getelementptr inbounds i8,i8*%aV,i64 44
%a3=bitcast i8*%a2 to i32*
%a4=load i32,i32*%a3,align 4
%a5=call fastcc i8*@_SMLL10listItemsi_377(i8*inreg%aY,i32 inreg%a1,i32 inreg%a4)
%a6=getelementptr inbounds i8,i8*%a5,i64 16
%a7=bitcast i8*%a6 to i8*(i8*,i8*)**
%a8=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a7,align 8
%a9=bitcast i8*%a5 to i8**
%ba=load i8*,i8**%a9,align 8
%bb=bitcast i8**%c to i8***
%bc=load i8**,i8***%bb,align 8
%bd=load i8*,i8**%bc,align 8
%be=call fastcc i8*%a8(i8*inreg%ba,i8*inreg%bd)
store i8*%be,i8**%d,align 8
%bf=load i8*,i8**%e,align 8
%bg=getelementptr inbounds i8,i8*%bf,i64 24
%bh=bitcast i8*%bg to i8**
%bi=load i8*,i8**%bh,align 8
%bj=getelementptr inbounds i8,i8*%bf,i64 48
%bk=bitcast i8*%bj to i32*
%bl=load i32,i32*%bk,align 4
%bm=getelementptr inbounds i8,i8*%bf,i64 52
%bn=bitcast i8*%bm to i32*
%bo=load i32,i32*%bn,align 4
%bp=call fastcc i8*@_SMLL10listItemsi_377(i8*inreg%bi,i32 inreg%bl,i32 inreg%bo)
%bq=getelementptr inbounds i8,i8*%bp,i64 16
%br=bitcast i8*%bq to i8*(i8*,i8*)**
%bs=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%br,align 8
%bt=bitcast i8*%bp to i8**
%bu=load i8*,i8**%bt,align 8
%bv=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bw=getelementptr inbounds i8,i8*%bv,i64 8
%bx=bitcast i8*%bw to i8**
%by=load i8*,i8**%bx,align 8
%bz=call fastcc i8*%bs(i8*inreg%bu,i8*inreg%by)
store i8*%bz,i8**%c,align 8
%bA=call i8*@sml_alloc(i32 inreg 28)#0
%bB=getelementptr inbounds i8,i8*%bA,i64 -4
%bC=bitcast i8*%bB to i32*
store i32 1342177304,i32*%bC,align 4
%bD=load i8*,i8**%d,align 8
%bE=bitcast i8*%bA to i8**
store i8*%bD,i8**%bE,align 8
%bF=load i8*,i8**%c,align 8
%bG=getelementptr inbounds i8,i8*%bA,i64 8
%bH=bitcast i8*%bG to i8**
store i8*%bF,i8**%bH,align 8
%bI=getelementptr inbounds i8,i8*%bA,i64 16
%bJ=bitcast i8*%bI to i8**
store i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@a,i64 0,i32 2)to i8*),i8**%bJ,align 8
%bK=getelementptr inbounds i8,i8*%bA,i64 24
%bL=bitcast i8*%bK to i32*
store i32 7,i32*%bL,align 4
store i8*%bD,i8**%c,align 8
store i8*%bF,i8**%d,align 8
store i8*null,i8**%f,align 8
%bM=load i8*,i8**%e,align 8
%bN=getelementptr inbounds i8,i8*%bM,i64 56
%bO=bitcast i8*%bN to i32*
%bP=load i32,i32*%bO,align 4
store i8*null,i8**%e,align 8
%bQ=getelementptr inbounds i8,i8*%bM,i64 60
%bR=bitcast i8*%bQ to i32*
%bS=load i32,i32*%bR,align 4
%bT=call i8*@sml_alloc(i32 inreg 4)#0
%bU=bitcast i8*%bT to i32*
%bV=getelementptr inbounds i8,i8*%bT,i64 -4
%bW=bitcast i8*%bV to i32*
store i32 4,i32*%bW,align 4
store i8*%bT,i8**%e,align 8
store i32%bP,i32*%bU,align 4
%bX=call i8*@sml_alloc(i32 inreg 4)#0
%bY=bitcast i8*%bX to i32*
%bZ=getelementptr inbounds i8,i8*%bX,i64 -4
%b0=bitcast i8*%bZ to i32*
store i32 4,i32*%b0,align 4
store i32%bS,i32*%bY,align 4
store i8*null,i8**%f,align 8
store i8*null,i8**%e,align 8
%b1=call i8*@sml_alloc(i32 inreg 28)#0
%b2=getelementptr inbounds i8,i8*%b1,i64 -4
%b3=bitcast i8*%b2 to i32*
store i32 1342177304,i32*%b3,align 4
%b4=load i8*,i8**%c,align 8
%b5=bitcast i8*%b1 to i8**
store i8*%b4,i8**%b5,align 8
%b6=load i8*,i8**%d,align 8
%b7=getelementptr inbounds i8,i8*%b1,i64 8
%b8=bitcast i8*%b7 to i8**
store i8*%b6,i8**%b8,align 8
%b9=load i8*,i8**%e,align 8
%ca=getelementptr inbounds i8,i8*%b1,i64 16
%cb=bitcast i8*%ca to i8**
store i8*%b9,i8**%cb,align 8
%cc=getelementptr inbounds i8,i8*%b1,i64 24
%cd=bitcast i8*%cc to i32*
store i32 7,i32*%cd,align 4
%ce=load i8*,i8**%h,align 8
%cf=tail call fastcc i8*@_SMLL5merge_491(i8*inreg%ce,i8*inreg%b1)
ret i8*%cf
}
define internal fastcc i8*@_SMLL11mergeWithi2_495(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%b,i8**%c,align 8
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%d,align 8
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
store i8*%l,i8**%e,align 8
%m=getelementptr inbounds i8,i8*%a,i64 16
%n=bitcast i8*%m to i8**
%o=load i8*,i8**%n,align 8
store i8*%o,i8**%f,align 8
%p=getelementptr inbounds i8,i8*%a,i64 24
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=getelementptr inbounds i8,i8*%a,i64 28
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=getelementptr inbounds i8,i8*%a,i64 32
%w=bitcast i8*%v to i32*
%x=load i32,i32*%w,align 4
%y=getelementptr inbounds i8,i8*%a,i64 36
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=getelementptr inbounds i8,i8*%a,i64 40
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=getelementptr inbounds i8,i8*%a,i64 44
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
%H=getelementptr inbounds i8,i8*%a,i64 48
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
%K=getelementptr inbounds i8,i8*%a,i64 52
%L=bitcast i8*%K to i32*
%M=load i32,i32*%L,align 4
%N=call i8*@sml_alloc(i32 inreg 68)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32 1342177344,i32*%P,align 4
store i8*%N,i8**%g,align 8
%Q=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%R=bitcast i8*%N to i8**
store i8*%Q,i8**%R,align 8
%S=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%T=getelementptr inbounds i8,i8*%N,i64 8
%U=bitcast i8*%T to i8**
store i8*%S,i8**%U,align 8
%V=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%W=getelementptr inbounds i8,i8*%N,i64 16
%X=bitcast i8*%W to i8**
store i8*%V,i8**%X,align 8
%Y=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%Z=getelementptr inbounds i8,i8*%N,i64 24
%aa=bitcast i8*%Z to i8**
store i8*%Y,i8**%aa,align 8
%ab=getelementptr inbounds i8,i8*%N,i64 32
%ac=bitcast i8*%ab to i32*
store i32%r,i32*%ac,align 4
%ad=getelementptr inbounds i8,i8*%N,i64 36
%ae=bitcast i8*%ad to i32*
store i32%u,i32*%ae,align 4
%af=getelementptr inbounds i8,i8*%N,i64 40
%ag=bitcast i8*%af to i32*
store i32%x,i32*%ag,align 4
%ah=getelementptr inbounds i8,i8*%N,i64 44
%ai=bitcast i8*%ah to i32*
store i32%A,i32*%ai,align 4
%aj=getelementptr inbounds i8,i8*%N,i64 48
%ak=bitcast i8*%aj to i32*
store i32%D,i32*%ak,align 4
%al=getelementptr inbounds i8,i8*%N,i64 52
%am=bitcast i8*%al to i32*
store i32%G,i32*%am,align 4
%an=getelementptr inbounds i8,i8*%N,i64 56
%ao=bitcast i8*%an to i32*
store i32%J,i32*%ao,align 4
%ap=getelementptr inbounds i8,i8*%N,i64 60
%aq=bitcast i8*%ap to i32*
store i32%M,i32*%aq,align 4
%ar=getelementptr inbounds i8,i8*%N,i64 64
%as=bitcast i8*%ar to i32*
store i32 15,i32*%as,align 4
%at=call i8*@sml_alloc(i32 inreg 28)#0
%au=getelementptr inbounds i8,i8*%at,i64 -4
%av=bitcast i8*%au to i32*
store i32 1342177304,i32*%av,align 4
%aw=load i8*,i8**%g,align 8
%ax=bitcast i8*%at to i8**
store i8*%aw,i8**%ax,align 8
%ay=getelementptr inbounds i8,i8*%at,i64 8
%az=bitcast i8*%ay to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL11mergeWithi2_494 to void(...)*),void(...)**%az,align 8
%aA=getelementptr inbounds i8,i8*%at,i64 16
%aB=bitcast i8*%aA to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL11mergeWithi2_494 to void(...)*),void(...)**%aB,align 8
%aC=getelementptr inbounds i8,i8*%at,i64 24
%aD=bitcast i8*%aC to i32*
store i32 -2147483647,i32*%aD,align 4
ret i8*%at
}
define internal fastcc i8*@_SMLL11mergeWithi2_496(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e,i32 inreg%f,i32 inreg%g)#4 gc"smlsharp"{
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
%k=alloca i8*,align 8
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
call void@llvm.gcroot(i8**%k,i8*null)#0
%l=bitcast i8*%a to i8**
%m=load i8*,i8**%l,align 8
store i8*%m,i8**%h,align 8
%n=getelementptr inbounds i8,i8*%a,i64 8
%o=bitcast i8*%n to i8**
%p=load i8*,i8**%o,align 8
store i8*%p,i8**%i,align 8
%q=getelementptr inbounds i8,i8*%a,i64 16
%r=bitcast i8*%q to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%j,align 8
%t=getelementptr inbounds i8,i8*%a,i64 24
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=getelementptr inbounds i8,i8*%a,i64 28
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=call i8*@sml_alloc(i32 inreg 60)#0
%A=getelementptr inbounds i8,i8*%z,i64 -4
%B=bitcast i8*%A to i32*
store i32 1342177336,i32*%B,align 4
store i8*%z,i8**%k,align 8
%C=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%D=bitcast i8*%z to i8**
store i8*%C,i8**%D,align 8
%E=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%F=getelementptr inbounds i8,i8*%z,i64 8
%G=bitcast i8*%F to i8**
store i8*%E,i8**%G,align 8
%H=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%I=getelementptr inbounds i8,i8*%z,i64 16
%J=bitcast i8*%I to i8**
store i8*%H,i8**%J,align 8
%K=getelementptr inbounds i8,i8*%z,i64 24
%L=bitcast i8*%K to i32*
store i32%v,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%z,i64 28
%N=bitcast i8*%M to i32*
store i32%y,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%z,i64 32
%P=bitcast i8*%O to i32*
store i32%b,i32*%P,align 4
%Q=getelementptr inbounds i8,i8*%z,i64 36
%R=bitcast i8*%Q to i32*
store i32%c,i32*%R,align 4
%S=getelementptr inbounds i8,i8*%z,i64 40
%T=bitcast i8*%S to i32*
store i32%d,i32*%T,align 4
%U=getelementptr inbounds i8,i8*%z,i64 44
%V=bitcast i8*%U to i32*
store i32%e,i32*%V,align 4
%W=getelementptr inbounds i8,i8*%z,i64 48
%X=bitcast i8*%W to i32*
store i32%f,i32*%X,align 4
%Y=getelementptr inbounds i8,i8*%z,i64 52
%Z=bitcast i8*%Y to i32*
store i32%g,i32*%Z,align 4
%aa=getelementptr inbounds i8,i8*%z,i64 56
%ab=bitcast i8*%aa to i32*
store i32 7,i32*%ab,align 4
%ac=call i8*@sml_alloc(i32 inreg 28)#0
%ad=getelementptr inbounds i8,i8*%ac,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 1342177304,i32*%ae,align 4
%af=load i8*,i8**%k,align 8
%ag=bitcast i8*%ac to i8**
store i8*%af,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%ac,i64 8
%ai=bitcast i8*%ah to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL11mergeWithi2_495 to void(...)*),void(...)**%ai,align 8
%aj=getelementptr inbounds i8,i8*%ac,i64 16
%ak=bitcast i8*%aj to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL11mergeWithi2_495 to void(...)*),void(...)**%ak,align 8
%al=getelementptr inbounds i8,i8*%ac,i64 24
%am=bitcast i8*%al to i32*
store i32 -2147483647,i32*%am,align 4
ret i8*%ac
}
define internal fastcc i8*@_SMLL1f_497(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
n:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%f,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%l,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%f,align 8
br label%l
l:
%m=phi i8*[%k,%j],[%a,%n]
%o=getelementptr inbounds i8,i8*%m,i64 20
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=add i32%q,-1
%s=sub i32 0,%q
%t=and i32%r,%s
%u=getelementptr inbounds i8,i8*%m,i64 28
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=add i32%r,%w
%y=add i32%x,%t
%z=sub i32 0,%w
%A=and i32%y,%z
%B=add i32%w,7
%C=add i32%B,%A
%D=and i32%C,-8
%E=add i32%q,7
%F=and i32%E,%s
%G=add i32%x,%F
%H=and i32%G,%z
%I=add i32%B,%H
%J=and i32%I,-8
%K=lshr i32%H,3
%L=lshr i32%F,3
%M=sub nsw i32%K,%L
%N=getelementptr inbounds i8,i8*%m,i64 24
%O=bitcast i8*%N to i32*
%P=load i32,i32*%O,align 4
%Q=shl i32%P,%M
%R=getelementptr inbounds i8,i8*%m,i64 16
%S=bitcast i8*%R to i32*
%T=load i32,i32*%S,align 4
%U=or i32%Q,%T
%V=shl i32%U,%L
%W=or i32%V,1
%X=or i32%J,4
%Y=icmp eq i32%T,0
br i1%Y,label%af,label%Z
Z:
%aa=load i8*,i8**%c,align 8
%ab=sext i32%t to i64
%ac=getelementptr inbounds i8,i8*%aa,i64%ab
%ad=bitcast i8*%ac to i8**
%ae=load i8*,i8**%ad,align 8
br label%aq
af:
%ag=call i8*@sml_alloc(i32 inreg%q)#0
%ah=getelementptr inbounds i8,i8*%ag,i64 -4
%ai=bitcast i8*%ah to i32*
store i32%q,i32*%ai,align 4
%aj=load i8*,i8**%c,align 8
%ak=sext i32%t to i64
%al=getelementptr inbounds i8,i8*%aj,i64%ak
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ag,i8*%al,i32%q,i1 false)
%am=load i8*,i8**%f,align 8
%an=getelementptr inbounds i8,i8*%am,i64 24
%ao=bitcast i8*%an to i32*
%ap=load i32,i32*%ao,align 4
br label%aq
aq:
%ar=phi i8*[%am,%af],[%m,%Z]
%as=phi i8*[%aj,%af],[%aa,%Z]
%at=phi i32[%ap,%af],[%P,%Z]
%au=phi i8*[%ag,%af],[%ae,%Z]
store i8*%au,i8**%d,align 8
%av=icmp eq i32%at,0
br i1%av,label%aC,label%aw
aw:
%ax=bitcast i8*%ar to i8**
%ay=sext i32%A to i64
%az=getelementptr inbounds i8,i8*%as,i64%ay
%aA=bitcast i8*%az to i8**
%aB=load i8*,i8**%aA,align 8
br label%aO
aC:
%aD=getelementptr inbounds i8,i8*%ar,i64 28
%aE=bitcast i8*%aD to i32*
%aF=load i32,i32*%aE,align 4
%aG=call i8*@sml_alloc(i32 inreg%aF)#0
%aH=getelementptr inbounds i8,i8*%aG,i64 -4
%aI=bitcast i8*%aH to i32*
store i32%aF,i32*%aI,align 4
%aJ=load i8*,i8**%c,align 8
%aK=sext i32%A to i64
%aL=getelementptr inbounds i8,i8*%aJ,i64%aK
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aG,i8*%aL,i32%aF,i1 false)
%aM=bitcast i8**%f to i8***
%aN=load i8**,i8***%aM,align 8
br label%aO
aO:
%aP=phi i8**[%aN,%aC],[%ax,%aw]
%aQ=phi i8*[%aJ,%aC],[%as,%aw]
%aR=phi i8*[%aG,%aC],[%aB,%aw]
store i8*%aR,i8**%e,align 8
%aS=sext i32%D to i64
%aT=getelementptr inbounds i8,i8*%aQ,i64%aS
%aU=bitcast i8*%aT to i8**
%aV=load i8*,i8**%aU,align 8
store i8*%aV,i8**%c,align 8
%aW=load i8*,i8**%aP,align 8
%aX=getelementptr inbounds i8,i8*%aW,i64 16
%aY=bitcast i8*%aX to i8*(i8*,i8*)**
%aZ=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aY,align 8
%a0=bitcast i8*%aW to i8**
%a1=load i8*,i8**%a0,align 8
%a2=call fastcc i8*%aZ(i8*inreg%a1,i8*inreg%aR)
%a3=bitcast i8*%a2 to i32*
%a4=load i32,i32*%a3,align 4
%a5=icmp eq i32%a4,0
br i1%a5,label%b1,label%a6
a6:
%a7=load i8*,i8**%f,align 8
%a8=getelementptr inbounds i8,i8*%a7,i64 8
%a9=bitcast i8*%a8 to i8**
%ba=load i8*,i8**%a9,align 8
%bb=getelementptr inbounds i8,i8*%a7,i64 24
%bc=bitcast i8*%bb to i32*
%bd=load i32,i32*%bc,align 4
%be=getelementptr inbounds i8,i8*%a7,i64 28
%bf=bitcast i8*%be to i32*
%bg=load i32,i32*%bf,align 4
%bh=call fastcc i8*@_SMLL6insert_334(i8*inreg%ba,i32 inreg%bd,i32 inreg%bg)
%bi=getelementptr inbounds i8,i8*%bh,i64 16
%bj=bitcast i8*%bi to i8*(i8*,i8*)**
%bk=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bj,align 8
%bl=bitcast i8*%bh to i8**
%bm=load i8*,i8**%bl,align 8
store i8*%bm,i8**%g,align 8
%bn=load i8*,i8**%f,align 8
%bo=getelementptr inbounds i8,i8*%bn,i64 20
%bp=bitcast i8*%bo to i32*
%bq=load i32,i32*%bp,align 4
%br=getelementptr inbounds i8,i8*%bn,i64 16
%bs=bitcast i8*%br to i32*
%bt=load i32,i32*%bs,align 4
%bu=getelementptr inbounds i8,i8*%bn,i64 28
%bv=bitcast i8*%bu to i32*
%bw=load i32,i32*%bv,align 4
store i8*null,i8**%f,align 8
%bx=getelementptr inbounds i8,i8*%bn,i64 24
%by=bitcast i8*%bx to i32*
%bz=load i32,i32*%by,align 4
%bA=call i8*@sml_alloc(i32 inreg%X)#0
%bB=or i32%J,1342177280
%bC=getelementptr inbounds i8,i8*%bA,i64 -4
%bD=bitcast i8*%bC to i32*
store i32%bB,i32*%bD,align 4
call void@llvm.memset.p0i8.i32(i8*%bA,i8 0,i32%X,i1 false)
%bE=load i8*,i8**%c,align 8
%bF=bitcast i8*%bA to i8**
store i8*%bE,i8**%bF,align 8
%bG=icmp eq i32%bt,0
%bH=load i8*,i8**%d,align 8
%bI=sext i32%F to i64
%bJ=getelementptr inbounds i8,i8*%bA,i64%bI
br i1%bG,label%bM,label%bK
bK:
%bL=bitcast i8*%bJ to i8**
store i8*%bH,i8**%bL,align 8
br label%bN
bM:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bJ,i8*%bH,i32%bq,i1 false)
br label%bN
bN:
%bO=icmp eq i32%bz,0
%bP=load i8*,i8**%e,align 8
%bQ=sext i32%H to i64
%bR=getelementptr inbounds i8,i8*%bA,i64%bQ
br i1%bO,label%bU,label%bS
bS:
%bT=bitcast i8*%bR to i8**
store i8*%bP,i8**%bT,align 8
br label%bV
bU:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bR,i8*%bP,i32%bw,i1 false)
br label%bV
bV:
%bW=sext i32%J to i64
%bX=getelementptr inbounds i8,i8*%bA,i64%bW
%bY=bitcast i8*%bX to i32*
store i32%W,i32*%bY,align 4
%bZ=load i8*,i8**%g,align 8
%b0=tail call fastcc i8*%bk(i8*inreg%bZ,i8*inreg%bA)
ret i8*%b0
b1:
%b2=load i8*,i8**%c,align 8
ret i8*%b2
}
define internal fastcc i8*@_SMLL6filter_498(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8**
br label%p
l:
call void@sml_check(i32 inreg%h)
%m=bitcast i8**%d to i8***
%n=load i8**,i8***%m,align 8
%o=bitcast i8**%n to i8*
br label%p
p:
%q=phi i8*[%o,%l],[%a,%j]
%r=phi i8**[%n,%l],[%k,%j]
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%e,align 8
%t=getelementptr inbounds i8*,i8**%r,i64 1
%u=load i8*,i8**%t,align 8
store i8*%u,i8**%f,align 8
%v=getelementptr inbounds i8*,i8**%r,i64 3
%w=bitcast i8**%v to i32*
%x=load i32,i32*%w,align 4
%y=getelementptr inbounds i8,i8*%q,i64 28
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=getelementptr inbounds i8*,i8**%r,i64 4
%C=bitcast i8**%B to i32*
%D=load i32,i32*%C,align 4
%E=getelementptr inbounds i8,i8*%q,i64 36
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
%H=call i8*@sml_alloc(i32 inreg 36)#0
%I=getelementptr inbounds i8,i8*%H,i64 -4
%J=bitcast i8*%I to i32*
store i32 1342177312,i32*%J,align 4
store i8*%H,i8**%g,align 8
%K=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%L=bitcast i8*%H to i8**
store i8*%K,i8**%L,align 8
%M=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%N=getelementptr inbounds i8,i8*%H,i64 8
%O=bitcast i8*%N to i8**
store i8*%M,i8**%O,align 8
%P=getelementptr inbounds i8,i8*%H,i64 16
%Q=bitcast i8*%P to i32*
store i32%x,i32*%Q,align 4
%R=getelementptr inbounds i8,i8*%H,i64 20
%S=bitcast i8*%R to i32*
store i32%A,i32*%S,align 4
%T=getelementptr inbounds i8,i8*%H,i64 24
%U=bitcast i8*%T to i32*
store i32%D,i32*%U,align 4
%V=getelementptr inbounds i8,i8*%H,i64 28
%W=bitcast i8*%V to i32*
store i32%G,i32*%W,align 4
%X=getelementptr inbounds i8,i8*%H,i64 32
%Y=bitcast i8*%X to i32*
store i32 3,i32*%Y,align 4
%Z=call i8*@sml_alloc(i32 inreg 28)#0
%aa=getelementptr inbounds i8,i8*%Z,i64 -4
%ab=bitcast i8*%aa to i32*
store i32 1342177304,i32*%ab,align 4
store i8*%Z,i8**%e,align 8
%ac=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%ad=bitcast i8*%Z to i8**
store i8*%ac,i8**%ad,align 8
%ae=getelementptr inbounds i8,i8*%Z,i64 8
%af=bitcast i8*%ae to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL1f_497 to void(...)*),void(...)**%af,align 8
%ag=getelementptr inbounds i8,i8*%Z,i64 16
%ah=bitcast i8*%ag to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL1f_497 to void(...)*),void(...)**%ah,align 8
%ai=getelementptr inbounds i8,i8*%Z,i64 24
%aj=bitcast i8*%ai to i32*
store i32 -2147483647,i32*%aj,align 4
%ak=load i8*,i8**%d,align 8
%al=getelementptr inbounds i8,i8*%ak,i64 16
%am=bitcast i8*%al to i8**
%an=load i8*,i8**%am,align 8
%ao=getelementptr inbounds i8,i8*%ak,i64 32
%ap=bitcast i8*%ao to i32*
%aq=load i32,i32*%ap,align 4
%ar=getelementptr inbounds i8,i8*%ak,i64 36
%as=bitcast i8*%ar to i32*
%at=load i32,i32*%as,align 4
%au=call fastcc i8*@_SMLL6foldli_411(i8*inreg%an,i32 inreg%aq,i32 inreg%at,i32 inreg 1,i32 inreg 8)
%av=getelementptr inbounds i8,i8*%au,i64 16
%aw=bitcast i8*%av to i8*(i8*,i8*)**
%ax=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aw,align 8
%ay=bitcast i8*%au to i8**
%az=load i8*,i8**%ay,align 8
%aA=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aB=call fastcc i8*%ax(i8*inreg%az,i8*inreg%aA)
%aC=getelementptr inbounds i8,i8*%aB,i64 16
%aD=bitcast i8*%aC to i8*(i8*,i8*)**
%aE=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aD,align 8
%aF=bitcast i8*%aB to i8**
%aG=load i8*,i8**%aF,align 8
store i8*null,i8**%d,align 8
store i8*null,i8**%e,align 8
%aH=call fastcc i8*%aE(i8*inreg%aG,i8*inreg null)
%aI=getelementptr inbounds i8,i8*%aH,i64 16
%aJ=bitcast i8*%aI to i8*(i8*,i8*)**
%aK=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aJ,align 8
%aL=bitcast i8*%aH to i8**
%aM=load i8*,i8**%aL,align 8
%aN=load i8*,i8**%c,align 8
%aO=tail call fastcc i8*%aK(i8*inreg%aM,i8*inreg%aN)
ret i8*%aO
}
define internal fastcc i8*@_SMLL6filter_499(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=getelementptr inbounds i8,i8*%a,i64 16
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%a,i64 20
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=getelementptr inbounds i8,i8*%a,i64 24
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=getelementptr inbounds i8,i8*%a,i64 28
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=call i8*@sml_alloc(i32 inreg 44)#0
%y=getelementptr inbounds i8,i8*%x,i64 -4
%z=bitcast i8*%y to i32*
store i32 1342177320,i32*%z,align 4
store i8*%x,i8**%f,align 8
%A=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%B=bitcast i8*%x to i8**
store i8*%A,i8**%B,align 8
%C=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%D=getelementptr inbounds i8,i8*%x,i64 8
%E=bitcast i8*%D to i8**
store i8*%C,i8**%E,align 8
%F=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%G=getelementptr inbounds i8,i8*%x,i64 16
%H=bitcast i8*%G to i8**
store i8*%F,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%x,i64 24
%J=bitcast i8*%I to i32*
store i32%n,i32*%J,align 4
%K=getelementptr inbounds i8,i8*%x,i64 28
%L=bitcast i8*%K to i32*
store i32%q,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%x,i64 32
%N=bitcast i8*%M to i32*
store i32%t,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%x,i64 36
%P=bitcast i8*%O to i32*
store i32%w,i32*%P,align 4
%Q=getelementptr inbounds i8,i8*%x,i64 40
%R=bitcast i8*%Q to i32*
store i32 7,i32*%R,align 4
%S=call i8*@sml_alloc(i32 inreg 28)#0
%T=getelementptr inbounds i8,i8*%S,i64 -4
%U=bitcast i8*%T to i32*
store i32 1342177304,i32*%U,align 4
%V=load i8*,i8**%f,align 8
%W=bitcast i8*%S to i8**
store i8*%V,i8**%W,align 8
%X=getelementptr inbounds i8,i8*%S,i64 8
%Y=bitcast i8*%X to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6filter_498 to void(...)*),void(...)**%Y,align 8
%Z=getelementptr inbounds i8,i8*%S,i64 16
%aa=bitcast i8*%Z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6filter_498 to void(...)*),void(...)**%aa,align 8
%ab=getelementptr inbounds i8,i8*%S,i64 24
%ac=bitcast i8*%ab to i32*
store i32 -2147483647,i32*%ac,align 4
ret i8*%S
}
define internal fastcc i8*@_SMLL6filter_500(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=getelementptr inbounds i8,i8*%a,i64 16
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%a,i64 20
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=call i8*@sml_alloc(i32 inreg 36)#0
%s=getelementptr inbounds i8,i8*%r,i64 -4
%t=bitcast i8*%s to i32*
store i32 1342177312,i32*%t,align 4
store i8*%r,i8**%f,align 8
%u=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%v=bitcast i8*%r to i8**
store i8*%u,i8**%v,align 8
%w=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%x=getelementptr inbounds i8,i8*%r,i64 8
%y=bitcast i8*%x to i8**
store i8*%w,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%r,i64 16
%A=bitcast i8*%z to i32*
store i32%n,i32*%A,align 4
%B=getelementptr inbounds i8,i8*%r,i64 20
%C=bitcast i8*%B to i32*
store i32%q,i32*%C,align 4
%D=getelementptr inbounds i8,i8*%r,i64 24
%E=bitcast i8*%D to i32*
store i32%b,i32*%E,align 4
%F=getelementptr inbounds i8,i8*%r,i64 28
%G=bitcast i8*%F to i32*
store i32%c,i32*%G,align 4
%H=getelementptr inbounds i8,i8*%r,i64 32
%I=bitcast i8*%H to i32*
store i32 3,i32*%I,align 4
%J=call i8*@sml_alloc(i32 inreg 28)#0
%K=getelementptr inbounds i8,i8*%J,i64 -4
%L=bitcast i8*%K to i32*
store i32 1342177304,i32*%L,align 4
%M=load i8*,i8**%f,align 8
%N=bitcast i8*%J to i8**
store i8*%M,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%J,i64 8
%P=bitcast i8*%O to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6filter_499 to void(...)*),void(...)**%P,align 8
%Q=getelementptr inbounds i8,i8*%J,i64 16
%R=bitcast i8*%Q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6filter_499 to void(...)*),void(...)**%R,align 8
%S=getelementptr inbounds i8,i8*%J,i64 24
%T=bitcast i8*%S to i32*
store i32 -2147483647,i32*%T,align 4
ret i8*%J
}
define internal fastcc i8*@_SMLL1f_501(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
n:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%f,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%l,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%f,align 8
br label%l
l:
%m=phi i8*[%k,%j],[%a,%n]
%o=getelementptr inbounds i8,i8*%m,i64 20
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=add i32%q,-1
%s=sub i32 0,%q
%t=and i32%r,%s
%u=getelementptr inbounds i8,i8*%m,i64 28
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=add i32%r,%w
%y=add i32%x,%t
%z=sub i32 0,%w
%A=and i32%y,%z
%B=add i32%w,7
%C=add i32%B,%A
%D=and i32%C,-8
%E=lshr i32%A,3
%F=lshr i32%t,3
%G=sub nsw i32%E,%F
%H=getelementptr inbounds i8,i8*%m,i64 24
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
%K=shl i32%J,%G
%L=getelementptr inbounds i8,i8*%m,i64 16
%M=bitcast i8*%L to i32*
%N=load i32,i32*%M,align 4
%O=or i32%K,%N
%P=or i32%D,4
%Q=add i32%q,7
%R=and i32%Q,%s
%S=add i32%x,%R
%T=and i32%S,%z
%U=add i32%B,%T
%V=and i32%U,-8
%W=lshr i32%T,3
%X=lshr i32%R,3
%Y=sub nsw i32%W,%X
%Z=shl i32%J,%Y
%aa=or i32%Z,%N
%ab=shl i32%aa,%X
%ac=or i32%ab,1
%ad=or i32%V,4
%ae=icmp eq i32%N,0
br i1%ae,label%al,label%af
af:
%ag=load i8*,i8**%c,align 8
%ah=sext i32%t to i64
%ai=getelementptr inbounds i8,i8*%ag,i64%ah
%aj=bitcast i8*%ai to i8**
%ak=load i8*,i8**%aj,align 8
br label%aw
al:
%am=call i8*@sml_alloc(i32 inreg%q)#0
%an=getelementptr inbounds i8,i8*%am,i64 -4
%ao=bitcast i8*%an to i32*
store i32%q,i32*%ao,align 4
%ap=load i8*,i8**%c,align 8
%aq=sext i32%t to i64
%ar=getelementptr inbounds i8,i8*%ap,i64%aq
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%am,i8*%ar,i32%q,i1 false)
%as=load i8*,i8**%f,align 8
%at=getelementptr inbounds i8,i8*%as,i64 24
%au=bitcast i8*%at to i32*
%av=load i32,i32*%au,align 4
br label%aw
aw:
%ax=phi i8*[%as,%al],[%m,%af]
%ay=phi i8*[%ap,%al],[%ag,%af]
%az=phi i32[%av,%al],[%J,%af]
%aA=phi i8*[%am,%al],[%ak,%af]
store i8*%aA,i8**%d,align 8
%aB=icmp eq i32%az,0
br i1%aB,label%aI,label%aC
aC:
%aD=bitcast i8*%ax to i8**
%aE=sext i32%A to i64
%aF=getelementptr inbounds i8,i8*%ay,i64%aE
%aG=bitcast i8*%aF to i8**
%aH=load i8*,i8**%aG,align 8
br label%aY
aI:
%aJ=getelementptr inbounds i8,i8*%ax,i64 28
%aK=bitcast i8*%aJ to i32*
%aL=load i32,i32*%aK,align 4
%aM=call i8*@sml_alloc(i32 inreg%aL)#0
%aN=getelementptr inbounds i8,i8*%aM,i64 -4
%aO=bitcast i8*%aN to i32*
store i32%aL,i32*%aO,align 4
%aP=load i8*,i8**%c,align 8
%aQ=sext i32%A to i64
%aR=getelementptr inbounds i8,i8*%aP,i64%aQ
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aM,i8*%aR,i32%aL,i1 false)
%aS=bitcast i8**%f to i8***
%aT=load i8**,i8***%aS,align 8
%aU=bitcast i8**%aT to i8*
%aV=getelementptr inbounds i8*,i8**%aT,i64 3
%aW=bitcast i8**%aV to i32*
%aX=load i32,i32*%aW,align 4
br label%aY
aY:
%aZ=phi i32[%aX,%aI],[%az,%aC]
%a0=phi i8*[%aU,%aI],[%ax,%aC]
%a1=phi i8**[%aT,%aI],[%aD,%aC]
%a2=phi i8*[%aP,%aI],[%ay,%aC]
%a3=phi i8*[%aM,%aI],[%aH,%aC]
store i8*%a3,i8**%e,align 8
%a4=sext i32%D to i64
%a5=getelementptr inbounds i8,i8*%a2,i64%a4
%a6=bitcast i8*%a5 to i8**
%a7=load i8*,i8**%a6,align 8
store i8*%a7,i8**%c,align 8
%a8=load i8*,i8**%a1,align 8
%a9=getelementptr inbounds i8,i8*%a8,i64 16
%ba=bitcast i8*%a9 to i8*(i8*,i8*)**
%bb=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ba,align 8
%bc=bitcast i8*%a8 to i8**
%bd=load i8*,i8**%bc,align 8
store i8*%bd,i8**%g,align 8
%be=getelementptr inbounds i8,i8*%a0,i64 20
%bf=bitcast i8*%be to i32*
%bg=load i32,i32*%bf,align 4
%bh=getelementptr inbounds i8,i8*%a0,i64 16
%bi=bitcast i8*%bh to i32*
%bj=load i32,i32*%bi,align 4
%bk=getelementptr inbounds i8,i8*%a0,i64 28
%bl=bitcast i8*%bk to i32*
%bm=load i32,i32*%bl,align 4
%bn=call i8*@sml_alloc(i32 inreg%P)#0
%bo=or i32%D,1342177280
%bp=getelementptr inbounds i8,i8*%bn,i64 -4
%bq=bitcast i8*%bp to i32*
store i32%bo,i32*%bq,align 4
call void@llvm.memset.p0i8.i32(i8*%bn,i8 0,i32%P,i1 false)
%br=icmp eq i32%bj,0
%bs=load i8*,i8**%d,align 8
%bt=sext i32%t to i64
%bu=getelementptr inbounds i8,i8*%bn,i64%bt
br i1%br,label%bx,label%bv
bv:
%bw=bitcast i8*%bu to i8**
store i8*%bs,i8**%bw,align 8
br label%by
bx:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bu,i8*%bs,i32%bg,i1 false)
br label%by
by:
%bz=icmp eq i32%aZ,0
%bA=load i8*,i8**%e,align 8
%bB=sext i32%A to i64
%bC=getelementptr inbounds i8,i8*%bn,i64%bB
br i1%bz,label%bF,label%bD
bD:
%bE=bitcast i8*%bC to i8**
store i8*%bA,i8**%bE,align 8
br label%bG
bF:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bC,i8*%bA,i32%bm,i1 false)
br label%bG
bG:
%bH=getelementptr inbounds i8,i8*%bn,i64%a4
%bI=bitcast i8*%bH to i32*
store i32%O,i32*%bI,align 4
%bJ=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%bK=call fastcc i8*%bb(i8*inreg%bJ,i8*inreg%bn)
%bL=bitcast i8*%bK to i32*
%bM=load i32,i32*%bL,align 4
%bN=icmp eq i32%bM,0
br i1%bN,label%cJ,label%bO
bO:
%bP=load i8*,i8**%f,align 8
%bQ=getelementptr inbounds i8,i8*%bP,i64 8
%bR=bitcast i8*%bQ to i8**
%bS=load i8*,i8**%bR,align 8
%bT=getelementptr inbounds i8,i8*%bP,i64 24
%bU=bitcast i8*%bT to i32*
%bV=load i32,i32*%bU,align 4
%bW=getelementptr inbounds i8,i8*%bP,i64 28
%bX=bitcast i8*%bW to i32*
%bY=load i32,i32*%bX,align 4
%bZ=call fastcc i8*@_SMLL6insert_334(i8*inreg%bS,i32 inreg%bV,i32 inreg%bY)
%b0=getelementptr inbounds i8,i8*%bZ,i64 16
%b1=bitcast i8*%b0 to i8*(i8*,i8*)**
%b2=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%b1,align 8
%b3=bitcast i8*%bZ to i8**
%b4=load i8*,i8**%b3,align 8
store i8*%b4,i8**%g,align 8
%b5=load i8*,i8**%f,align 8
%b6=getelementptr inbounds i8,i8*%b5,i64 20
%b7=bitcast i8*%b6 to i32*
%b8=load i32,i32*%b7,align 4
%b9=getelementptr inbounds i8,i8*%b5,i64 16
%ca=bitcast i8*%b9 to i32*
%cb=load i32,i32*%ca,align 4
%cc=getelementptr inbounds i8,i8*%b5,i64 28
%cd=bitcast i8*%cc to i32*
%ce=load i32,i32*%cd,align 4
store i8*null,i8**%f,align 8
%cf=getelementptr inbounds i8,i8*%b5,i64 24
%cg=bitcast i8*%cf to i32*
%ch=load i32,i32*%cg,align 4
%ci=call i8*@sml_alloc(i32 inreg%ad)#0
%cj=or i32%V,1342177280
%ck=getelementptr inbounds i8,i8*%ci,i64 -4
%cl=bitcast i8*%ck to i32*
store i32%cj,i32*%cl,align 4
call void@llvm.memset.p0i8.i32(i8*%ci,i8 0,i32%ad,i1 false)
%cm=load i8*,i8**%c,align 8
%cn=bitcast i8*%ci to i8**
store i8*%cm,i8**%cn,align 8
%co=icmp eq i32%cb,0
%cp=load i8*,i8**%d,align 8
%cq=sext i32%R to i64
%cr=getelementptr inbounds i8,i8*%ci,i64%cq
br i1%co,label%cu,label%cs
cs:
%ct=bitcast i8*%cr to i8**
store i8*%cp,i8**%ct,align 8
br label%cv
cu:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cr,i8*%cp,i32%b8,i1 false)
br label%cv
cv:
%cw=icmp eq i32%ch,0
%cx=load i8*,i8**%e,align 8
%cy=sext i32%T to i64
%cz=getelementptr inbounds i8,i8*%ci,i64%cy
br i1%cw,label%cC,label%cA
cA:
%cB=bitcast i8*%cz to i8**
store i8*%cx,i8**%cB,align 8
br label%cD
cC:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cz,i8*%cx,i32%ce,i1 false)
br label%cD
cD:
%cE=sext i32%V to i64
%cF=getelementptr inbounds i8,i8*%ci,i64%cE
%cG=bitcast i8*%cF to i32*
store i32%ac,i32*%cG,align 4
%cH=load i8*,i8**%g,align 8
%cI=tail call fastcc i8*%b2(i8*inreg%cH,i8*inreg%ci)
ret i8*%cI
cJ:
%cK=load i8*,i8**%c,align 8
ret i8*%cK
}
define internal fastcc i8*@_SMLL7filteri_502(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8**
br label%p
l:
call void@sml_check(i32 inreg%h)
%m=bitcast i8**%d to i8***
%n=load i8**,i8***%m,align 8
%o=bitcast i8**%n to i8*
br label%p
p:
%q=phi i8*[%o,%l],[%a,%j]
%r=phi i8**[%n,%l],[%k,%j]
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%e,align 8
%t=getelementptr inbounds i8*,i8**%r,i64 1
%u=load i8*,i8**%t,align 8
store i8*%u,i8**%f,align 8
%v=getelementptr inbounds i8*,i8**%r,i64 3
%w=bitcast i8**%v to i32*
%x=load i32,i32*%w,align 4
%y=getelementptr inbounds i8,i8*%q,i64 28
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=getelementptr inbounds i8*,i8**%r,i64 4
%C=bitcast i8**%B to i32*
%D=load i32,i32*%C,align 4
%E=getelementptr inbounds i8,i8*%q,i64 36
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
%H=call i8*@sml_alloc(i32 inreg 36)#0
%I=getelementptr inbounds i8,i8*%H,i64 -4
%J=bitcast i8*%I to i32*
store i32 1342177312,i32*%J,align 4
store i8*%H,i8**%g,align 8
%K=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%L=bitcast i8*%H to i8**
store i8*%K,i8**%L,align 8
%M=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%N=getelementptr inbounds i8,i8*%H,i64 8
%O=bitcast i8*%N to i8**
store i8*%M,i8**%O,align 8
%P=getelementptr inbounds i8,i8*%H,i64 16
%Q=bitcast i8*%P to i32*
store i32%x,i32*%Q,align 4
%R=getelementptr inbounds i8,i8*%H,i64 20
%S=bitcast i8*%R to i32*
store i32%A,i32*%S,align 4
%T=getelementptr inbounds i8,i8*%H,i64 24
%U=bitcast i8*%T to i32*
store i32%D,i32*%U,align 4
%V=getelementptr inbounds i8,i8*%H,i64 28
%W=bitcast i8*%V to i32*
store i32%G,i32*%W,align 4
%X=getelementptr inbounds i8,i8*%H,i64 32
%Y=bitcast i8*%X to i32*
store i32 3,i32*%Y,align 4
%Z=call i8*@sml_alloc(i32 inreg 28)#0
%aa=getelementptr inbounds i8,i8*%Z,i64 -4
%ab=bitcast i8*%aa to i32*
store i32 1342177304,i32*%ab,align 4
store i8*%Z,i8**%e,align 8
%ac=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%ad=bitcast i8*%Z to i8**
store i8*%ac,i8**%ad,align 8
%ae=getelementptr inbounds i8,i8*%Z,i64 8
%af=bitcast i8*%ae to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL1f_501 to void(...)*),void(...)**%af,align 8
%ag=getelementptr inbounds i8,i8*%Z,i64 16
%ah=bitcast i8*%ag to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL1f_501 to void(...)*),void(...)**%ah,align 8
%ai=getelementptr inbounds i8,i8*%Z,i64 24
%aj=bitcast i8*%ai to i32*
store i32 -2147483647,i32*%aj,align 4
%ak=load i8*,i8**%d,align 8
%al=getelementptr inbounds i8,i8*%ak,i64 16
%am=bitcast i8*%al to i8**
%an=load i8*,i8**%am,align 8
%ao=getelementptr inbounds i8,i8*%ak,i64 32
%ap=bitcast i8*%ao to i32*
%aq=load i32,i32*%ap,align 4
%ar=getelementptr inbounds i8,i8*%ak,i64 36
%as=bitcast i8*%ar to i32*
%at=load i32,i32*%as,align 4
%au=call fastcc i8*@_SMLL6foldli_411(i8*inreg%an,i32 inreg%aq,i32 inreg%at,i32 inreg 1,i32 inreg 8)
%av=getelementptr inbounds i8,i8*%au,i64 16
%aw=bitcast i8*%av to i8*(i8*,i8*)**
%ax=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aw,align 8
%ay=bitcast i8*%au to i8**
%az=load i8*,i8**%ay,align 8
%aA=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aB=call fastcc i8*%ax(i8*inreg%az,i8*inreg%aA)
%aC=getelementptr inbounds i8,i8*%aB,i64 16
%aD=bitcast i8*%aC to i8*(i8*,i8*)**
%aE=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aD,align 8
%aF=bitcast i8*%aB to i8**
%aG=load i8*,i8**%aF,align 8
store i8*null,i8**%d,align 8
store i8*null,i8**%e,align 8
%aH=call fastcc i8*%aE(i8*inreg%aG,i8*inreg null)
%aI=getelementptr inbounds i8,i8*%aH,i64 16
%aJ=bitcast i8*%aI to i8*(i8*,i8*)**
%aK=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aJ,align 8
%aL=bitcast i8*%aH to i8**
%aM=load i8*,i8**%aL,align 8
%aN=load i8*,i8**%c,align 8
%aO=tail call fastcc i8*%aK(i8*inreg%aM,i8*inreg%aN)
ret i8*%aO
}
define internal fastcc i8*@_SMLL7filteri_503(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=getelementptr inbounds i8,i8*%a,i64 16
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%a,i64 20
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=getelementptr inbounds i8,i8*%a,i64 24
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=getelementptr inbounds i8,i8*%a,i64 28
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=call i8*@sml_alloc(i32 inreg 44)#0
%y=getelementptr inbounds i8,i8*%x,i64 -4
%z=bitcast i8*%y to i32*
store i32 1342177320,i32*%z,align 4
store i8*%x,i8**%f,align 8
%A=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%B=bitcast i8*%x to i8**
store i8*%A,i8**%B,align 8
%C=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%D=getelementptr inbounds i8,i8*%x,i64 8
%E=bitcast i8*%D to i8**
store i8*%C,i8**%E,align 8
%F=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%G=getelementptr inbounds i8,i8*%x,i64 16
%H=bitcast i8*%G to i8**
store i8*%F,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%x,i64 24
%J=bitcast i8*%I to i32*
store i32%n,i32*%J,align 4
%K=getelementptr inbounds i8,i8*%x,i64 28
%L=bitcast i8*%K to i32*
store i32%q,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%x,i64 32
%N=bitcast i8*%M to i32*
store i32%t,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%x,i64 36
%P=bitcast i8*%O to i32*
store i32%w,i32*%P,align 4
%Q=getelementptr inbounds i8,i8*%x,i64 40
%R=bitcast i8*%Q to i32*
store i32 7,i32*%R,align 4
%S=call i8*@sml_alloc(i32 inreg 28)#0
%T=getelementptr inbounds i8,i8*%S,i64 -4
%U=bitcast i8*%T to i32*
store i32 1342177304,i32*%U,align 4
%V=load i8*,i8**%f,align 8
%W=bitcast i8*%S to i8**
store i8*%V,i8**%W,align 8
%X=getelementptr inbounds i8,i8*%S,i64 8
%Y=bitcast i8*%X to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL7filteri_502 to void(...)*),void(...)**%Y,align 8
%Z=getelementptr inbounds i8,i8*%S,i64 16
%aa=bitcast i8*%Z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL7filteri_502 to void(...)*),void(...)**%aa,align 8
%ab=getelementptr inbounds i8,i8*%S,i64 24
%ac=bitcast i8*%ab to i32*
store i32 -2147483647,i32*%ac,align 4
ret i8*%S
}
define internal fastcc i8*@_SMLL7filteri_504(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=getelementptr inbounds i8,i8*%a,i64 16
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%a,i64 20
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=call i8*@sml_alloc(i32 inreg 36)#0
%s=getelementptr inbounds i8,i8*%r,i64 -4
%t=bitcast i8*%s to i32*
store i32 1342177312,i32*%t,align 4
store i8*%r,i8**%f,align 8
%u=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%v=bitcast i8*%r to i8**
store i8*%u,i8**%v,align 8
%w=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%x=getelementptr inbounds i8,i8*%r,i64 8
%y=bitcast i8*%x to i8**
store i8*%w,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%r,i64 16
%A=bitcast i8*%z to i32*
store i32%n,i32*%A,align 4
%B=getelementptr inbounds i8,i8*%r,i64 20
%C=bitcast i8*%B to i32*
store i32%q,i32*%C,align 4
%D=getelementptr inbounds i8,i8*%r,i64 24
%E=bitcast i8*%D to i32*
store i32%b,i32*%E,align 4
%F=getelementptr inbounds i8,i8*%r,i64 28
%G=bitcast i8*%F to i32*
store i32%c,i32*%G,align 4
%H=getelementptr inbounds i8,i8*%r,i64 32
%I=bitcast i8*%H to i32*
store i32 3,i32*%I,align 4
%J=call i8*@sml_alloc(i32 inreg 28)#0
%K=getelementptr inbounds i8,i8*%J,i64 -4
%L=bitcast i8*%K to i32*
store i32 1342177304,i32*%L,align 4
%M=load i8*,i8**%f,align 8
%N=bitcast i8*%J to i8**
store i8*%M,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%J,i64 8
%P=bitcast i8*%O to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL7filteri_503 to void(...)*),void(...)**%P,align 8
%Q=getelementptr inbounds i8,i8*%J,i64 16
%R=bitcast i8*%Q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL7filteri_503 to void(...)*),void(...)**%R,align 8
%S=getelementptr inbounds i8,i8*%J,i64 24
%T=bitcast i8*%S to i32*
store i32 -2147483647,i32*%T,align 4
ret i8*%J
}
define internal fastcc i8*@_SMLL1g_505(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
n:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%f,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%l,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%f,align 8
br label%l
l:
%m=phi i8*[%k,%j],[%a,%n]
%o=getelementptr inbounds i8,i8*%m,i64 20
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=add i32%q,-1
%s=sub i32 0,%q
%t=and i32%r,%s
%u=getelementptr inbounds i8,i8*%m,i64 28
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=add i32%r,%w
%y=add i32%x,%t
%z=sub i32 0,%w
%A=and i32%y,%z
%B=add i32%w,7
%C=add i32%B,%A
%D=and i32%C,-8
%E=getelementptr inbounds i8,i8*%m,i64 36
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
%H=add i32%G,-1
%I=sub i32 0,%G
%J=and i32%H,%I
%K=add i32%q,7
%L=and i32%K,%s
%M=add i32%r,%L
%N=add i32%M,%G
%O=and i32%N,%I
%P=add i32%G,7
%Q=add i32%P,%O
%R=and i32%Q,-8
%S=lshr i32%O,3
%T=lshr i32%L,3
%U=sub nsw i32%S,%T
%V=getelementptr inbounds i8,i8*%m,i64 32
%W=bitcast i8*%V to i32*
%X=load i32,i32*%W,align 4
%Y=shl i32%X,%U
%Z=getelementptr inbounds i8,i8*%m,i64 16
%aa=bitcast i8*%Z to i32*
%ab=load i32,i32*%aa,align 4
%ac=or i32%Y,%ab
%ad=shl i32%ac,%T
%ae=or i32%ad,1
%af=or i32%R,4
%ag=icmp eq i32%ab,0
br i1%ag,label%ao,label%ah
ah:
%ai=bitcast i8*%m to i8**
%aj=load i8*,i8**%c,align 8
%ak=sext i32%t to i64
%al=getelementptr inbounds i8,i8*%aj,i64%ak
%am=bitcast i8*%al to i8**
%an=load i8*,i8**%am,align 8
br label%ay
ao:
%ap=call i8*@sml_alloc(i32 inreg%q)#0
%aq=getelementptr inbounds i8,i8*%ap,i64 -4
%ar=bitcast i8*%aq to i32*
store i32%q,i32*%ar,align 4
%as=load i8*,i8**%c,align 8
%at=sext i32%t to i64
%au=getelementptr inbounds i8,i8*%as,i64%at
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ap,i8*%au,i32%q,i1 false)
%av=bitcast i8**%f to i8***
%aw=load i8**,i8***%av,align 8
%ax=bitcast i8**%aw to i8*
br label%ay
ay:
%az=phi i8*[%ax,%ao],[%m,%ah]
%aA=phi i8**[%aw,%ao],[%ai,%ah]
%aB=phi i8*[%as,%ao],[%aj,%ah]
%aC=phi i8*[%ap,%ao],[%an,%ah]
store i8*%aC,i8**%d,align 8
%aD=sext i32%D to i64
%aE=getelementptr inbounds i8,i8*%aB,i64%aD
%aF=bitcast i8*%aE to i8**
%aG=load i8*,i8**%aF,align 8
store i8*%aG,i8**%e,align 8
%aH=load i8*,i8**%aA,align 8
%aI=getelementptr inbounds i8,i8*%aH,i64 16
%aJ=bitcast i8*%aI to i8*(i8*,i8*)**
%aK=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aJ,align 8
%aL=bitcast i8*%aH to i8**
%aM=load i8*,i8**%aL,align 8
store i8*%aM,i8**%g,align 8
%aN=getelementptr inbounds i8,i8*%az,i64 24
%aO=bitcast i8*%aN to i32*
%aP=load i32,i32*%aO,align 4
%aQ=icmp eq i32%aP,0
br i1%aQ,label%aW,label%aR
aR:
store i8*null,i8**%c,align 8
%aS=sext i32%A to i64
%aT=getelementptr inbounds i8,i8*%aB,i64%aS
%aU=bitcast i8*%aT to i8**
%aV=load i8*,i8**%aU,align 8
br label%a7
aW:
%aX=getelementptr inbounds i8,i8*%az,i64 28
%aY=bitcast i8*%aX to i32*
%aZ=load i32,i32*%aY,align 4
%a0=call i8*@sml_alloc(i32 inreg%aZ)#0
%a1=getelementptr inbounds i8,i8*%a0,i64 -4
%a2=bitcast i8*%a1 to i32*
store i32%aZ,i32*%a2,align 4
%a3=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%a4=sext i32%A to i64
%a5=getelementptr inbounds i8,i8*%a3,i64%a4
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%a0,i8*%a5,i32%aZ,i1 false)
%a6=load i8*,i8**%g,align 8
br label%a7
a7:
%a8=phi i8*[%aM,%aR],[%a6,%aW]
%a9=phi i8*[%aV,%aR],[%a0,%aW]
store i8*null,i8**%g,align 8
%ba=call fastcc i8*%aK(i8*inreg%a8,i8*inreg%a9)
store i8*%ba,i8**%c,align 8
%bb=icmp eq i8*%ba,null
br i1%bb,label%bc,label%be
bc:
%bd=load i8*,i8**%e,align 8
ret i8*%bd
be:
%bf=load i8*,i8**%f,align 8
%bg=getelementptr inbounds i8,i8*%bf,i64 32
%bh=bitcast i8*%bg to i32*
%bi=load i32,i32*%bh,align 4
%bj=icmp eq i32%bi,0
br i1%bj,label%bp,label%bk
bk:
store i8*null,i8**%c,align 8
%bl=sext i32%J to i64
%bm=getelementptr inbounds i8,i8*%ba,i64%bl
%bn=bitcast i8*%bm to i8**
%bo=load i8*,i8**%bn,align 8
br label%bD
bp:
%bq=getelementptr inbounds i8,i8*%bf,i64 36
%br=bitcast i8*%bq to i32*
%bs=load i32,i32*%br,align 4
%bt=call i8*@sml_alloc(i32 inreg%bs)#0
%bu=getelementptr inbounds i8,i8*%bt,i64 -4
%bv=bitcast i8*%bu to i32*
store i32%bs,i32*%bv,align 4
%bw=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bx=sext i32%J to i64
%by=getelementptr inbounds i8,i8*%bw,i64%bx
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bt,i8*%by,i32%bs,i1 false)
%bz=load i8*,i8**%f,align 8
%bA=getelementptr inbounds i8,i8*%bz,i64 32
%bB=bitcast i8*%bA to i32*
%bC=load i32,i32*%bB,align 4
br label%bD
bD:
%bE=phi i32[%bC,%bp],[%bi,%bk]
%bF=phi i8*[%bz,%bp],[%bf,%bk]
%bG=phi i8*[%bt,%bp],[%bo,%bk]
store i8*%bG,i8**%c,align 8
%bH=getelementptr inbounds i8,i8*%bF,i64 8
%bI=bitcast i8*%bH to i8**
%bJ=load i8*,i8**%bI,align 8
%bK=getelementptr inbounds i8,i8*%bF,i64 36
%bL=bitcast i8*%bK to i32*
%bM=load i32,i32*%bL,align 4
%bN=call fastcc i8*@_SMLL6insert_334(i8*inreg%bJ,i32 inreg%bE,i32 inreg%bM)
%bO=getelementptr inbounds i8,i8*%bN,i64 16
%bP=bitcast i8*%bO to i8*(i8*,i8*)**
%bQ=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bP,align 8
%bR=bitcast i8*%bN to i8**
%bS=load i8*,i8**%bR,align 8
store i8*%bS,i8**%g,align 8
%bT=load i8*,i8**%f,align 8
%bU=getelementptr inbounds i8,i8*%bT,i64 20
%bV=bitcast i8*%bU to i32*
%bW=load i32,i32*%bV,align 4
%bX=getelementptr inbounds i8,i8*%bT,i64 16
%bY=bitcast i8*%bX to i32*
%bZ=load i32,i32*%bY,align 4
%b0=getelementptr inbounds i8,i8*%bT,i64 36
%b1=bitcast i8*%b0 to i32*
%b2=load i32,i32*%b1,align 4
store i8*null,i8**%f,align 8
%b3=getelementptr inbounds i8,i8*%bT,i64 32
%b4=bitcast i8*%b3 to i32*
%b5=load i32,i32*%b4,align 4
%b6=call i8*@sml_alloc(i32 inreg%af)#0
%b7=or i32%R,1342177280
%b8=getelementptr inbounds i8,i8*%b6,i64 -4
%b9=bitcast i8*%b8 to i32*
store i32%b7,i32*%b9,align 4
call void@llvm.memset.p0i8.i32(i8*%b6,i8 0,i32%af,i1 false)
%ca=load i8*,i8**%e,align 8
%cb=bitcast i8*%b6 to i8**
store i8*%ca,i8**%cb,align 8
%cc=icmp eq i32%bZ,0
%cd=load i8*,i8**%d,align 8
%ce=sext i32%L to i64
%cf=getelementptr inbounds i8,i8*%b6,i64%ce
br i1%cc,label%ci,label%cg
cg:
%ch=bitcast i8*%cf to i8**
store i8*%cd,i8**%ch,align 8
br label%cj
ci:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cf,i8*%cd,i32%bW,i1 false)
br label%cj
cj:
%ck=icmp eq i32%b5,0
%cl=load i8*,i8**%c,align 8
%cm=sext i32%O to i64
%cn=getelementptr inbounds i8,i8*%b6,i64%cm
br i1%ck,label%cq,label%co
co:
%cp=bitcast i8*%cn to i8**
store i8*%cl,i8**%cp,align 8
br label%cr
cq:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cn,i8*%cl,i32%b2,i1 false)
br label%cr
cr:
%cs=sext i32%R to i64
%ct=getelementptr inbounds i8,i8*%b6,i64%cs
%cu=bitcast i8*%ct to i32*
store i32%ae,i32*%cu,align 4
%cv=load i8*,i8**%g,align 8
%cw=tail call fastcc i8*%bQ(i8*inreg%cv,i8*inreg%b6)
ret i8*%cw
}
define internal fastcc i8*@_SMLL10mapPartial_506(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8**
br label%p
l:
call void@sml_check(i32 inreg%h)
%m=bitcast i8**%d to i8***
%n=load i8**,i8***%m,align 8
%o=bitcast i8**%n to i8*
br label%p
p:
%q=phi i8*[%o,%l],[%a,%j]
%r=phi i8**[%n,%l],[%k,%j]
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%e,align 8
%t=getelementptr inbounds i8*,i8**%r,i64 1
%u=load i8*,i8**%t,align 8
store i8*%u,i8**%f,align 8
%v=getelementptr inbounds i8*,i8**%r,i64 3
%w=bitcast i8**%v to i32*
%x=load i32,i32*%w,align 4
%y=getelementptr inbounds i8,i8*%q,i64 28
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=getelementptr inbounds i8*,i8**%r,i64 4
%C=bitcast i8**%B to i32*
%D=load i32,i32*%C,align 4
%E=getelementptr inbounds i8,i8*%q,i64 36
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
%H=getelementptr inbounds i8*,i8**%r,i64 5
%I=bitcast i8**%H to i32*
%J=load i32,i32*%I,align 4
%K=getelementptr inbounds i8,i8*%q,i64 44
%L=bitcast i8*%K to i32*
%M=load i32,i32*%L,align 4
%N=call i8*@sml_alloc(i32 inreg 44)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32 1342177320,i32*%P,align 4
store i8*%N,i8**%g,align 8
%Q=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%R=bitcast i8*%N to i8**
store i8*%Q,i8**%R,align 8
%S=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%T=getelementptr inbounds i8,i8*%N,i64 8
%U=bitcast i8*%T to i8**
store i8*%S,i8**%U,align 8
%V=getelementptr inbounds i8,i8*%N,i64 16
%W=bitcast i8*%V to i32*
store i32%x,i32*%W,align 4
%X=getelementptr inbounds i8,i8*%N,i64 20
%Y=bitcast i8*%X to i32*
store i32%A,i32*%Y,align 4
%Z=getelementptr inbounds i8,i8*%N,i64 24
%aa=bitcast i8*%Z to i32*
store i32%D,i32*%aa,align 4
%ab=getelementptr inbounds i8,i8*%N,i64 28
%ac=bitcast i8*%ab to i32*
store i32%G,i32*%ac,align 4
%ad=getelementptr inbounds i8,i8*%N,i64 32
%ae=bitcast i8*%ad to i32*
store i32%J,i32*%ae,align 4
%af=getelementptr inbounds i8,i8*%N,i64 36
%ag=bitcast i8*%af to i32*
store i32%M,i32*%ag,align 4
%ah=getelementptr inbounds i8,i8*%N,i64 40
%ai=bitcast i8*%ah to i32*
store i32 3,i32*%ai,align 4
%aj=call i8*@sml_alloc(i32 inreg 28)#0
%ak=getelementptr inbounds i8,i8*%aj,i64 -4
%al=bitcast i8*%ak to i32*
store i32 1342177304,i32*%al,align 4
store i8*%aj,i8**%e,align 8
%am=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%an=bitcast i8*%aj to i8**
store i8*%am,i8**%an,align 8
%ao=getelementptr inbounds i8,i8*%aj,i64 8
%ap=bitcast i8*%ao to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL1g_505 to void(...)*),void(...)**%ap,align 8
%aq=getelementptr inbounds i8,i8*%aj,i64 16
%ar=bitcast i8*%aq to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL1g_505 to void(...)*),void(...)**%ar,align 8
%as=getelementptr inbounds i8,i8*%aj,i64 24
%at=bitcast i8*%as to i32*
store i32 -2147483647,i32*%at,align 4
%au=load i8*,i8**%d,align 8
%av=getelementptr inbounds i8,i8*%au,i64 16
%aw=bitcast i8*%av to i8**
%ax=load i8*,i8**%aw,align 8
%ay=getelementptr inbounds i8,i8*%au,i64 32
%az=bitcast i8*%ay to i32*
%aA=load i32,i32*%az,align 4
%aB=getelementptr inbounds i8,i8*%au,i64 36
%aC=bitcast i8*%aB to i32*
%aD=load i32,i32*%aC,align 4
%aE=call fastcc i8*@_SMLL6foldli_411(i8*inreg%ax,i32 inreg%aA,i32 inreg%aD,i32 inreg 1,i32 inreg 8)
%aF=getelementptr inbounds i8,i8*%aE,i64 16
%aG=bitcast i8*%aF to i8*(i8*,i8*)**
%aH=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aG,align 8
%aI=bitcast i8*%aE to i8**
%aJ=load i8*,i8**%aI,align 8
%aK=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aL=call fastcc i8*%aH(i8*inreg%aJ,i8*inreg%aK)
%aM=getelementptr inbounds i8,i8*%aL,i64 16
%aN=bitcast i8*%aM to i8*(i8*,i8*)**
%aO=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aN,align 8
%aP=bitcast i8*%aL to i8**
%aQ=load i8*,i8**%aP,align 8
store i8*null,i8**%d,align 8
store i8*null,i8**%e,align 8
%aR=call fastcc i8*%aO(i8*inreg%aQ,i8*inreg null)
%aS=getelementptr inbounds i8,i8*%aR,i64 16
%aT=bitcast i8*%aS to i8*(i8*,i8*)**
%aU=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aT,align 8
%aV=bitcast i8*%aR to i8**
%aW=load i8*,i8**%aV,align 8
%aX=load i8*,i8**%c,align 8
%aY=tail call fastcc i8*%aU(i8*inreg%aW,i8*inreg%aX)
ret i8*%aY
}
define internal fastcc i8*@_SMLL10mapPartial_507(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=getelementptr inbounds i8,i8*%a,i64 16
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%a,i64 20
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=getelementptr inbounds i8,i8*%a,i64 24
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=getelementptr inbounds i8,i8*%a,i64 28
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=getelementptr inbounds i8,i8*%a,i64 32
%y=bitcast i8*%x to i32*
%z=load i32,i32*%y,align 4
%A=getelementptr inbounds i8,i8*%a,i64 36
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=call i8*@sml_alloc(i32 inreg 52)#0
%E=getelementptr inbounds i8,i8*%D,i64 -4
%F=bitcast i8*%E to i32*
store i32 1342177328,i32*%F,align 4
store i8*%D,i8**%f,align 8
%G=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%H=bitcast i8*%D to i8**
store i8*%G,i8**%H,align 8
%I=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%J=getelementptr inbounds i8,i8*%D,i64 8
%K=bitcast i8*%J to i8**
store i8*%I,i8**%K,align 8
%L=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%M=getelementptr inbounds i8,i8*%D,i64 16
%N=bitcast i8*%M to i8**
store i8*%L,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%D,i64 24
%P=bitcast i8*%O to i32*
store i32%n,i32*%P,align 4
%Q=getelementptr inbounds i8,i8*%D,i64 28
%R=bitcast i8*%Q to i32*
store i32%q,i32*%R,align 4
%S=getelementptr inbounds i8,i8*%D,i64 32
%T=bitcast i8*%S to i32*
store i32%t,i32*%T,align 4
%U=getelementptr inbounds i8,i8*%D,i64 36
%V=bitcast i8*%U to i32*
store i32%w,i32*%V,align 4
%W=getelementptr inbounds i8,i8*%D,i64 40
%X=bitcast i8*%W to i32*
store i32%z,i32*%X,align 4
%Y=getelementptr inbounds i8,i8*%D,i64 44
%Z=bitcast i8*%Y to i32*
store i32%C,i32*%Z,align 4
%aa=getelementptr inbounds i8,i8*%D,i64 48
%ab=bitcast i8*%aa to i32*
store i32 7,i32*%ab,align 4
%ac=call i8*@sml_alloc(i32 inreg 28)#0
%ad=getelementptr inbounds i8,i8*%ac,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 1342177304,i32*%ae,align 4
%af=load i8*,i8**%f,align 8
%ag=bitcast i8*%ac to i8**
store i8*%af,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%ac,i64 8
%ai=bitcast i8*%ah to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL10mapPartial_506 to void(...)*),void(...)**%ai,align 8
%aj=getelementptr inbounds i8,i8*%ac,i64 16
%ak=bitcast i8*%aj to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL10mapPartial_506 to void(...)*),void(...)**%ak,align 8
%al=getelementptr inbounds i8,i8*%ac,i64 24
%am=bitcast i8*%al to i32*
store i32 -2147483647,i32*%am,align 4
ret i8*%ac
}
define internal fastcc i8*@_SMLL10mapPartial_508(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e)#4 gc"smlsharp"{
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
%i=bitcast i8*%a to i8**
%j=load i8*,i8**%i,align 8
store i8*%j,i8**%f,align 8
%k=getelementptr inbounds i8,i8*%a,i64 8
%l=bitcast i8*%k to i8**
%m=load i8*,i8**%l,align 8
store i8*%m,i8**%g,align 8
%n=getelementptr inbounds i8,i8*%a,i64 16
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%a,i64 20
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call i8*@sml_alloc(i32 inreg 44)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177320,i32*%v,align 4
store i8*%t,i8**%h,align 8
%w=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%z=getelementptr inbounds i8,i8*%t,i64 8
%A=bitcast i8*%z to i8**
store i8*%y,i8**%A,align 8
%B=getelementptr inbounds i8,i8*%t,i64 16
%C=bitcast i8*%B to i32*
store i32%p,i32*%C,align 4
%D=getelementptr inbounds i8,i8*%t,i64 20
%E=bitcast i8*%D to i32*
store i32%s,i32*%E,align 4
%F=getelementptr inbounds i8,i8*%t,i64 24
%G=bitcast i8*%F to i32*
store i32%b,i32*%G,align 4
%H=getelementptr inbounds i8,i8*%t,i64 28
%I=bitcast i8*%H to i32*
store i32%c,i32*%I,align 4
%J=getelementptr inbounds i8,i8*%t,i64 32
%K=bitcast i8*%J to i32*
store i32%d,i32*%K,align 4
%L=getelementptr inbounds i8,i8*%t,i64 36
%M=bitcast i8*%L to i32*
store i32%e,i32*%M,align 4
%N=getelementptr inbounds i8,i8*%t,i64 40
%O=bitcast i8*%N to i32*
store i32 3,i32*%O,align 4
%P=call i8*@sml_alloc(i32 inreg 28)#0
%Q=getelementptr inbounds i8,i8*%P,i64 -4
%R=bitcast i8*%Q to i32*
store i32 1342177304,i32*%R,align 4
%S=load i8*,i8**%h,align 8
%T=bitcast i8*%P to i8**
store i8*%S,i8**%T,align 8
%U=getelementptr inbounds i8,i8*%P,i64 8
%V=bitcast i8*%U to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL10mapPartial_507 to void(...)*),void(...)**%V,align 8
%W=getelementptr inbounds i8,i8*%P,i64 16
%X=bitcast i8*%W to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL10mapPartial_507 to void(...)*),void(...)**%X,align 8
%Y=getelementptr inbounds i8,i8*%P,i64 24
%Z=bitcast i8*%Y to i32*
store i32 -2147483647,i32*%Z,align 4
ret i8*%P
}
define internal fastcc i8*@_SMLL1g_509(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
n:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%f,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%l,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%f,align 8
br label%l
l:
%m=phi i8*[%k,%j],[%a,%n]
%o=getelementptr inbounds i8,i8*%m,i64 20
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=add i32%q,-1
%s=sub i32 0,%q
%t=and i32%r,%s
%u=getelementptr inbounds i8,i8*%m,i64 28
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=add i32%r,%w
%y=add i32%x,%t
%z=sub i32 0,%w
%A=and i32%y,%z
%B=add i32%w,7
%C=add i32%B,%A
%D=and i32%C,-8
%E=lshr i32%A,3
%F=lshr i32%t,3
%G=sub nsw i32%E,%F
%H=getelementptr inbounds i8,i8*%m,i64 24
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
%K=shl i32%J,%G
%L=getelementptr inbounds i8,i8*%m,i64 16
%M=bitcast i8*%L to i32*
%N=load i32,i32*%M,align 4
%O=or i32%K,%N
%P=or i32%D,4
%Q=getelementptr inbounds i8,i8*%m,i64 36
%R=bitcast i8*%Q to i32*
%S=load i32,i32*%R,align 4
%T=add i32%S,-1
%U=sub i32 0,%S
%V=and i32%T,%U
%W=add i32%q,7
%X=and i32%W,%s
%Y=add i32%r,%X
%Z=add i32%Y,%S
%aa=and i32%Z,%U
%ab=add i32%S,7
%ac=add i32%ab,%aa
%ad=and i32%ac,-8
%ae=lshr i32%aa,3
%af=lshr i32%X,3
%ag=sub nsw i32%ae,%af
%ah=getelementptr inbounds i8,i8*%m,i64 32
%ai=bitcast i8*%ah to i32*
%aj=load i32,i32*%ai,align 4
%ak=shl i32%aj,%ag
%al=or i32%ak,%N
%am=shl i32%al,%af
%an=or i32%am,1
%ao=or i32%ad,4
%ap=icmp eq i32%N,0
br i1%ap,label%aw,label%aq
aq:
%ar=load i8*,i8**%c,align 8
%as=sext i32%t to i64
%at=getelementptr inbounds i8,i8*%ar,i64%as
%au=bitcast i8*%at to i8**
%av=load i8*,i8**%au,align 8
br label%aH
aw:
%ax=call i8*@sml_alloc(i32 inreg%q)#0
%ay=getelementptr inbounds i8,i8*%ax,i64 -4
%az=bitcast i8*%ay to i32*
store i32%q,i32*%az,align 4
%aA=load i8*,i8**%c,align 8
%aB=sext i32%t to i64
%aC=getelementptr inbounds i8,i8*%aA,i64%aB
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ax,i8*%aC,i32%q,i1 false)
%aD=load i8*,i8**%f,align 8
%aE=getelementptr inbounds i8,i8*%aD,i64 24
%aF=bitcast i8*%aE to i32*
%aG=load i32,i32*%aF,align 4
br label%aH
aH:
%aI=phi i8*[%aD,%aw],[%m,%aq]
%aJ=phi i8*[%aA,%aw],[%ar,%aq]
%aK=phi i32[%aG,%aw],[%J,%aq]
%aL=phi i8*[%ax,%aw],[%av,%aq]
store i8*%aL,i8**%d,align 8
%aM=icmp eq i32%aK,0
br i1%aM,label%aT,label%aN
aN:
%aO=bitcast i8*%aI to i8**
%aP=sext i32%A to i64
%aQ=getelementptr inbounds i8,i8*%aJ,i64%aP
%aR=bitcast i8*%aQ to i8**
%aS=load i8*,i8**%aR,align 8
br label%a9
aT:
%aU=getelementptr inbounds i8,i8*%aI,i64 28
%aV=bitcast i8*%aU to i32*
%aW=load i32,i32*%aV,align 4
%aX=call i8*@sml_alloc(i32 inreg%aW)#0
%aY=getelementptr inbounds i8,i8*%aX,i64 -4
%aZ=bitcast i8*%aY to i32*
store i32%aW,i32*%aZ,align 4
%a0=load i8*,i8**%c,align 8
%a1=sext i32%A to i64
%a2=getelementptr inbounds i8,i8*%a0,i64%a1
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aX,i8*%a2,i32%aW,i1 false)
%a3=bitcast i8**%f to i8***
%a4=load i8**,i8***%a3,align 8
%a5=bitcast i8**%a4 to i8*
%a6=getelementptr inbounds i8*,i8**%a4,i64 3
%a7=bitcast i8**%a6 to i32*
%a8=load i32,i32*%a7,align 4
br label%a9
a9:
%ba=phi i32[%a8,%aT],[%aK,%aN]
%bb=phi i8*[%a5,%aT],[%aI,%aN]
%bc=phi i8**[%a4,%aT],[%aO,%aN]
%bd=phi i8*[%a0,%aT],[%aJ,%aN]
%be=phi i8*[%aX,%aT],[%aS,%aN]
store i8*%be,i8**%e,align 8
%bf=sext i32%D to i64
%bg=getelementptr inbounds i8,i8*%bd,i64%bf
%bh=bitcast i8*%bg to i8**
%bi=load i8*,i8**%bh,align 8
store i8*%bi,i8**%c,align 8
%bj=load i8*,i8**%bc,align 8
%bk=getelementptr inbounds i8,i8*%bj,i64 16
%bl=bitcast i8*%bk to i8*(i8*,i8*)**
%bm=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bl,align 8
%bn=bitcast i8*%bj to i8**
%bo=load i8*,i8**%bn,align 8
store i8*%bo,i8**%g,align 8
%bp=getelementptr inbounds i8,i8*%bb,i64 20
%bq=bitcast i8*%bp to i32*
%br=load i32,i32*%bq,align 4
%bs=getelementptr inbounds i8,i8*%bb,i64 16
%bt=bitcast i8*%bs to i32*
%bu=load i32,i32*%bt,align 4
%bv=getelementptr inbounds i8,i8*%bb,i64 28
%bw=bitcast i8*%bv to i32*
%bx=load i32,i32*%bw,align 4
%by=call i8*@sml_alloc(i32 inreg%P)#0
%bz=or i32%D,1342177280
%bA=getelementptr inbounds i8,i8*%by,i64 -4
%bB=bitcast i8*%bA to i32*
store i32%bz,i32*%bB,align 4
call void@llvm.memset.p0i8.i32(i8*%by,i8 0,i32%P,i1 false)
%bC=icmp eq i32%bu,0
%bD=load i8*,i8**%d,align 8
%bE=sext i32%t to i64
%bF=getelementptr inbounds i8,i8*%by,i64%bE
br i1%bC,label%bI,label%bG
bG:
%bH=bitcast i8*%bF to i8**
store i8*%bD,i8**%bH,align 8
br label%bJ
bI:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bF,i8*%bD,i32%br,i1 false)
br label%bJ
bJ:
%bK=icmp eq i32%ba,0
%bL=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bM=sext i32%A to i64
%bN=getelementptr inbounds i8,i8*%by,i64%bM
br i1%bK,label%bQ,label%bO
bO:
%bP=bitcast i8*%bN to i8**
store i8*%bL,i8**%bP,align 8
br label%bR
bQ:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bN,i8*%bL,i32%bx,i1 false)
br label%bR
bR:
%bS=getelementptr inbounds i8,i8*%by,i64%bf
%bT=bitcast i8*%bS to i32*
store i32%O,i32*%bT,align 4
%bU=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%bV=call fastcc i8*%bm(i8*inreg%bU,i8*inreg%by)
store i8*%bV,i8**%e,align 8
%bW=icmp eq i8*%bV,null
br i1%bW,label%bX,label%bZ
bX:
%bY=load i8*,i8**%c,align 8
ret i8*%bY
bZ:
%b0=load i8*,i8**%f,align 8
%b1=getelementptr inbounds i8,i8*%b0,i64 32
%b2=bitcast i8*%b1 to i32*
%b3=load i32,i32*%b2,align 4
%b4=icmp eq i32%b3,0
br i1%b4,label%ca,label%b5
b5:
store i8*null,i8**%e,align 8
%b6=sext i32%V to i64
%b7=getelementptr inbounds i8,i8*%bV,i64%b6
%b8=bitcast i8*%b7 to i8**
%b9=load i8*,i8**%b8,align 8
br label%co
ca:
%cb=getelementptr inbounds i8,i8*%b0,i64 36
%cc=bitcast i8*%cb to i32*
%cd=load i32,i32*%cc,align 4
%ce=call i8*@sml_alloc(i32 inreg%cd)#0
%cf=getelementptr inbounds i8,i8*%ce,i64 -4
%cg=bitcast i8*%cf to i32*
store i32%cd,i32*%cg,align 4
%ch=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%ci=sext i32%V to i64
%cj=getelementptr inbounds i8,i8*%ch,i64%ci
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ce,i8*%cj,i32%cd,i1 false)
%ck=load i8*,i8**%f,align 8
%cl=getelementptr inbounds i8,i8*%ck,i64 32
%cm=bitcast i8*%cl to i32*
%cn=load i32,i32*%cm,align 4
br label%co
co:
%cp=phi i32[%cn,%ca],[%b3,%b5]
%cq=phi i8*[%ck,%ca],[%b0,%b5]
%cr=phi i8*[%ce,%ca],[%b9,%b5]
store i8*%cr,i8**%e,align 8
%cs=getelementptr inbounds i8,i8*%cq,i64 8
%ct=bitcast i8*%cs to i8**
%cu=load i8*,i8**%ct,align 8
%cv=getelementptr inbounds i8,i8*%cq,i64 36
%cw=bitcast i8*%cv to i32*
%cx=load i32,i32*%cw,align 4
%cy=call fastcc i8*@_SMLL6insert_334(i8*inreg%cu,i32 inreg%cp,i32 inreg%cx)
%cz=getelementptr inbounds i8,i8*%cy,i64 16
%cA=bitcast i8*%cz to i8*(i8*,i8*)**
%cB=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%cA,align 8
%cC=bitcast i8*%cy to i8**
%cD=load i8*,i8**%cC,align 8
store i8*%cD,i8**%g,align 8
%cE=load i8*,i8**%f,align 8
%cF=getelementptr inbounds i8,i8*%cE,i64 20
%cG=bitcast i8*%cF to i32*
%cH=load i32,i32*%cG,align 4
%cI=getelementptr inbounds i8,i8*%cE,i64 16
%cJ=bitcast i8*%cI to i32*
%cK=load i32,i32*%cJ,align 4
%cL=getelementptr inbounds i8,i8*%cE,i64 36
%cM=bitcast i8*%cL to i32*
%cN=load i32,i32*%cM,align 4
store i8*null,i8**%f,align 8
%cO=getelementptr inbounds i8,i8*%cE,i64 32
%cP=bitcast i8*%cO to i32*
%cQ=load i32,i32*%cP,align 4
%cR=call i8*@sml_alloc(i32 inreg%ao)#0
%cS=or i32%ad,1342177280
%cT=getelementptr inbounds i8,i8*%cR,i64 -4
%cU=bitcast i8*%cT to i32*
store i32%cS,i32*%cU,align 4
call void@llvm.memset.p0i8.i32(i8*%cR,i8 0,i32%ao,i1 false)
%cV=load i8*,i8**%c,align 8
%cW=bitcast i8*%cR to i8**
store i8*%cV,i8**%cW,align 8
%cX=icmp eq i32%cK,0
%cY=load i8*,i8**%d,align 8
%cZ=sext i32%X to i64
%c0=getelementptr inbounds i8,i8*%cR,i64%cZ
br i1%cX,label%c3,label%c1
c1:
%c2=bitcast i8*%c0 to i8**
store i8*%cY,i8**%c2,align 8
br label%c4
c3:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%c0,i8*%cY,i32%cH,i1 false)
br label%c4
c4:
%c5=icmp eq i32%cQ,0
%c6=load i8*,i8**%e,align 8
%c7=sext i32%aa to i64
%c8=getelementptr inbounds i8,i8*%cR,i64%c7
br i1%c5,label%db,label%c9
c9:
%da=bitcast i8*%c8 to i8**
store i8*%c6,i8**%da,align 8
br label%dc
db:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%c8,i8*%c6,i32%cN,i1 false)
br label%dc
dc:
%dd=sext i32%ad to i64
%de=getelementptr inbounds i8,i8*%cR,i64%dd
%df=bitcast i8*%de to i32*
store i32%an,i32*%df,align 4
%dg=load i8*,i8**%g,align 8
%dh=tail call fastcc i8*%cB(i8*inreg%dg,i8*inreg%cR)
ret i8*%dh
}
define internal fastcc i8*@_SMLL11mapPartiali_510(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8**
br label%p
l:
call void@sml_check(i32 inreg%h)
%m=bitcast i8**%d to i8***
%n=load i8**,i8***%m,align 8
%o=bitcast i8**%n to i8*
br label%p
p:
%q=phi i8*[%o,%l],[%a,%j]
%r=phi i8**[%n,%l],[%k,%j]
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%e,align 8
%t=getelementptr inbounds i8*,i8**%r,i64 1
%u=load i8*,i8**%t,align 8
store i8*%u,i8**%f,align 8
%v=getelementptr inbounds i8*,i8**%r,i64 3
%w=bitcast i8**%v to i32*
%x=load i32,i32*%w,align 4
%y=getelementptr inbounds i8,i8*%q,i64 28
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=getelementptr inbounds i8*,i8**%r,i64 4
%C=bitcast i8**%B to i32*
%D=load i32,i32*%C,align 4
%E=getelementptr inbounds i8,i8*%q,i64 36
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
%H=getelementptr inbounds i8*,i8**%r,i64 5
%I=bitcast i8**%H to i32*
%J=load i32,i32*%I,align 4
%K=getelementptr inbounds i8,i8*%q,i64 44
%L=bitcast i8*%K to i32*
%M=load i32,i32*%L,align 4
%N=call i8*@sml_alloc(i32 inreg 44)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32 1342177320,i32*%P,align 4
store i8*%N,i8**%g,align 8
%Q=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%R=bitcast i8*%N to i8**
store i8*%Q,i8**%R,align 8
%S=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%T=getelementptr inbounds i8,i8*%N,i64 8
%U=bitcast i8*%T to i8**
store i8*%S,i8**%U,align 8
%V=getelementptr inbounds i8,i8*%N,i64 16
%W=bitcast i8*%V to i32*
store i32%x,i32*%W,align 4
%X=getelementptr inbounds i8,i8*%N,i64 20
%Y=bitcast i8*%X to i32*
store i32%A,i32*%Y,align 4
%Z=getelementptr inbounds i8,i8*%N,i64 24
%aa=bitcast i8*%Z to i32*
store i32%D,i32*%aa,align 4
%ab=getelementptr inbounds i8,i8*%N,i64 28
%ac=bitcast i8*%ab to i32*
store i32%G,i32*%ac,align 4
%ad=getelementptr inbounds i8,i8*%N,i64 32
%ae=bitcast i8*%ad to i32*
store i32%J,i32*%ae,align 4
%af=getelementptr inbounds i8,i8*%N,i64 36
%ag=bitcast i8*%af to i32*
store i32%M,i32*%ag,align 4
%ah=getelementptr inbounds i8,i8*%N,i64 40
%ai=bitcast i8*%ah to i32*
store i32 3,i32*%ai,align 4
%aj=call i8*@sml_alloc(i32 inreg 28)#0
%ak=getelementptr inbounds i8,i8*%aj,i64 -4
%al=bitcast i8*%ak to i32*
store i32 1342177304,i32*%al,align 4
store i8*%aj,i8**%e,align 8
%am=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%an=bitcast i8*%aj to i8**
store i8*%am,i8**%an,align 8
%ao=getelementptr inbounds i8,i8*%aj,i64 8
%ap=bitcast i8*%ao to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL1g_509 to void(...)*),void(...)**%ap,align 8
%aq=getelementptr inbounds i8,i8*%aj,i64 16
%ar=bitcast i8*%aq to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL1g_509 to void(...)*),void(...)**%ar,align 8
%as=getelementptr inbounds i8,i8*%aj,i64 24
%at=bitcast i8*%as to i32*
store i32 -2147483647,i32*%at,align 4
%au=load i8*,i8**%d,align 8
%av=getelementptr inbounds i8,i8*%au,i64 16
%aw=bitcast i8*%av to i8**
%ax=load i8*,i8**%aw,align 8
%ay=getelementptr inbounds i8,i8*%au,i64 32
%az=bitcast i8*%ay to i32*
%aA=load i32,i32*%az,align 4
%aB=getelementptr inbounds i8,i8*%au,i64 36
%aC=bitcast i8*%aB to i32*
%aD=load i32,i32*%aC,align 4
%aE=call fastcc i8*@_SMLL6foldli_411(i8*inreg%ax,i32 inreg%aA,i32 inreg%aD,i32 inreg 1,i32 inreg 8)
%aF=getelementptr inbounds i8,i8*%aE,i64 16
%aG=bitcast i8*%aF to i8*(i8*,i8*)**
%aH=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aG,align 8
%aI=bitcast i8*%aE to i8**
%aJ=load i8*,i8**%aI,align 8
%aK=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aL=call fastcc i8*%aH(i8*inreg%aJ,i8*inreg%aK)
%aM=getelementptr inbounds i8,i8*%aL,i64 16
%aN=bitcast i8*%aM to i8*(i8*,i8*)**
%aO=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aN,align 8
%aP=bitcast i8*%aL to i8**
%aQ=load i8*,i8**%aP,align 8
store i8*null,i8**%d,align 8
store i8*null,i8**%e,align 8
%aR=call fastcc i8*%aO(i8*inreg%aQ,i8*inreg null)
%aS=getelementptr inbounds i8,i8*%aR,i64 16
%aT=bitcast i8*%aS to i8*(i8*,i8*)**
%aU=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aT,align 8
%aV=bitcast i8*%aR to i8**
%aW=load i8*,i8**%aV,align 8
%aX=load i8*,i8**%c,align 8
%aY=tail call fastcc i8*%aU(i8*inreg%aW,i8*inreg%aX)
ret i8*%aY
}
define internal fastcc i8*@_SMLL11mapPartiali_511(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=getelementptr inbounds i8,i8*%a,i64 16
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%a,i64 20
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=getelementptr inbounds i8,i8*%a,i64 24
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=getelementptr inbounds i8,i8*%a,i64 28
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=getelementptr inbounds i8,i8*%a,i64 32
%y=bitcast i8*%x to i32*
%z=load i32,i32*%y,align 4
%A=getelementptr inbounds i8,i8*%a,i64 36
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=call i8*@sml_alloc(i32 inreg 52)#0
%E=getelementptr inbounds i8,i8*%D,i64 -4
%F=bitcast i8*%E to i32*
store i32 1342177328,i32*%F,align 4
store i8*%D,i8**%f,align 8
%G=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%H=bitcast i8*%D to i8**
store i8*%G,i8**%H,align 8
%I=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%J=getelementptr inbounds i8,i8*%D,i64 8
%K=bitcast i8*%J to i8**
store i8*%I,i8**%K,align 8
%L=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%M=getelementptr inbounds i8,i8*%D,i64 16
%N=bitcast i8*%M to i8**
store i8*%L,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%D,i64 24
%P=bitcast i8*%O to i32*
store i32%n,i32*%P,align 4
%Q=getelementptr inbounds i8,i8*%D,i64 28
%R=bitcast i8*%Q to i32*
store i32%q,i32*%R,align 4
%S=getelementptr inbounds i8,i8*%D,i64 32
%T=bitcast i8*%S to i32*
store i32%t,i32*%T,align 4
%U=getelementptr inbounds i8,i8*%D,i64 36
%V=bitcast i8*%U to i32*
store i32%w,i32*%V,align 4
%W=getelementptr inbounds i8,i8*%D,i64 40
%X=bitcast i8*%W to i32*
store i32%z,i32*%X,align 4
%Y=getelementptr inbounds i8,i8*%D,i64 44
%Z=bitcast i8*%Y to i32*
store i32%C,i32*%Z,align 4
%aa=getelementptr inbounds i8,i8*%D,i64 48
%ab=bitcast i8*%aa to i32*
store i32 7,i32*%ab,align 4
%ac=call i8*@sml_alloc(i32 inreg 28)#0
%ad=getelementptr inbounds i8,i8*%ac,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 1342177304,i32*%ae,align 4
%af=load i8*,i8**%f,align 8
%ag=bitcast i8*%ac to i8**
store i8*%af,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%ac,i64 8
%ai=bitcast i8*%ah to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL11mapPartiali_510 to void(...)*),void(...)**%ai,align 8
%aj=getelementptr inbounds i8,i8*%ac,i64 16
%ak=bitcast i8*%aj to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL11mapPartiali_510 to void(...)*),void(...)**%ak,align 8
%al=getelementptr inbounds i8,i8*%ac,i64 24
%am=bitcast i8*%al to i32*
store i32 -2147483647,i32*%am,align 4
ret i8*%ac
}
define internal fastcc i8*@_SMLL11mapPartiali_512(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e)#4 gc"smlsharp"{
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
%i=bitcast i8*%a to i8**
%j=load i8*,i8**%i,align 8
store i8*%j,i8**%f,align 8
%k=getelementptr inbounds i8,i8*%a,i64 8
%l=bitcast i8*%k to i8**
%m=load i8*,i8**%l,align 8
store i8*%m,i8**%g,align 8
%n=getelementptr inbounds i8,i8*%a,i64 16
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%a,i64 20
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call i8*@sml_alloc(i32 inreg 44)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177320,i32*%v,align 4
store i8*%t,i8**%h,align 8
%w=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%z=getelementptr inbounds i8,i8*%t,i64 8
%A=bitcast i8*%z to i8**
store i8*%y,i8**%A,align 8
%B=getelementptr inbounds i8,i8*%t,i64 16
%C=bitcast i8*%B to i32*
store i32%p,i32*%C,align 4
%D=getelementptr inbounds i8,i8*%t,i64 20
%E=bitcast i8*%D to i32*
store i32%s,i32*%E,align 4
%F=getelementptr inbounds i8,i8*%t,i64 24
%G=bitcast i8*%F to i32*
store i32%b,i32*%G,align 4
%H=getelementptr inbounds i8,i8*%t,i64 28
%I=bitcast i8*%H to i32*
store i32%c,i32*%I,align 4
%J=getelementptr inbounds i8,i8*%t,i64 32
%K=bitcast i8*%J to i32*
store i32%d,i32*%K,align 4
%L=getelementptr inbounds i8,i8*%t,i64 36
%M=bitcast i8*%L to i32*
store i32%e,i32*%M,align 4
%N=getelementptr inbounds i8,i8*%t,i64 40
%O=bitcast i8*%N to i32*
store i32 3,i32*%O,align 4
%P=call i8*@sml_alloc(i32 inreg 28)#0
%Q=getelementptr inbounds i8,i8*%P,i64 -4
%R=bitcast i8*%Q to i32*
store i32 1342177304,i32*%R,align 4
%S=load i8*,i8**%h,align 8
%T=bitcast i8*%P to i8**
store i8*%S,i8**%T,align 8
%U=getelementptr inbounds i8,i8*%P,i64 8
%V=bitcast i8*%U to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL11mapPartiali_511 to void(...)*),void(...)**%V,align 8
%W=getelementptr inbounds i8,i8*%P,i64 16
%X=bitcast i8*%W to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL11mapPartiali_511 to void(...)*),void(...)**%X,align 8
%Y=getelementptr inbounds i8,i8*%P,i64 24
%Z=bitcast i8*%Y to i32*
store i32 -2147483647,i32*%Z,align 4
ret i8*%P
}
define internal fastcc i8*@_SMLL10difference_513(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
n:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%l,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%c,align 8
%k=load i8*,i8**%e,align 8
br label%l
l:
%m=phi i8*[%k,%i],[%a,%n]
%o=phi i8*[%j,%i],[%b,%n]
%p=getelementptr inbounds i8,i8*%m,i64 12
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=add i32%r,-1
%t=sub i32 0,%r
%u=and i32%s,%t
%v=add i32%u,%r
%w=add i32%s,%v
%x=and i32%w,%t
%y=add i32%r,7
%z=add i32%y,%x
%A=and i32%z,-8
%B=lshr i32%x,3
%C=lshr i32%u,3
%D=sub nsw i32%B,%C
%E=getelementptr inbounds i8,i8*%m,i64 8
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
%H=shl i32%G,%D
%I=or i32%H,%G
%J=or i32%A,4
%K=add i32%v,7
%L=and i32%K,-8
%M=or i32%L,4
%N=bitcast i8*%o to i8**
%O=load i8*,i8**%N,align 8
%P=icmp eq i8*%O,null
br i1%P,label%Q,label%a0
Q:
%R=getelementptr inbounds i8,i8*%o,i64 8
%S=bitcast i8*%R to i8**
%T=load i8*,i8**%S,align 8
%U=icmp eq i8*%T,null
br i1%U,label%V,label%W
V:
ret i8*null
W:
store i8*%T,i8**%c,align 8
%X=icmp eq i32%G,0
br i1%X,label%ad,label%Y
Y:
store i8*null,i8**%c,align 8
%Z=sext i32%u to i64
%aa=getelementptr inbounds i8,i8*%T,i64%Z
%ab=bitcast i8*%aa to i8**
%ac=load i8*,i8**%ab,align 8
br label%ar
ad:
%ae=call i8*@sml_alloc(i32 inreg%r)#0
%af=getelementptr inbounds i8,i8*%ae,i64 -4
%ag=bitcast i8*%af to i32*
store i32%r,i32*%ag,align 4
%ah=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ai=sext i32%u to i64
%aj=getelementptr inbounds i8,i8*%ah,i64%ai
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ae,i8*%aj,i32%r,i1 false)
%ak=load i8*,i8**%e,align 8
%al=getelementptr inbounds i8,i8*%ak,i64 12
%am=bitcast i8*%al to i32*
%an=load i32,i32*%am,align 4
%ao=getelementptr inbounds i8,i8*%ak,i64 8
%ap=bitcast i8*%ao to i32*
%aq=load i32,i32*%ap,align 4
br label%ar
ar:
%as=phi i64[%ai,%ad],[%Z,%Y]
%at=phi i32[%aq,%ad],[%G,%Y]
%au=phi i32[%an,%ad],[%r,%Y]
%av=phi i8*[%ae,%ad],[%ac,%Y]
store i8*%av,i8**%c,align 8
store i8*null,i8**%e,align 8
%aw=call i8*@sml_alloc(i32 inreg%M)#0
%ax=or i32%L,1342177280
%ay=getelementptr inbounds i8,i8*%aw,i64 -4
%az=bitcast i8*%ay to i32*
store i32%ax,i32*%az,align 4
store i8*%aw,i8**%d,align 8
call void@llvm.memset.p0i8.i32(i8*%aw,i8 0,i32%M,i1 false)
%aA=icmp eq i32%at,0
%aB=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aC=getelementptr inbounds i8,i8*%aw,i64%as
br i1%aA,label%aF,label%aD
aD:
%aE=bitcast i8*%aC to i8**
store i8*%aB,i8**%aE,align 8
br label%aG
aF:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aC,i8*%aB,i32%au,i1 false)
br label%aG
aG:
%aH=sext i32%L to i64
%aI=getelementptr inbounds i8,i8*%aw,i64%aH
%aJ=bitcast i8*%aI to i32*
store i32%G,i32*%aJ,align 4
%aK=call i8*@sml_alloc(i32 inreg 20)#0
%aL=getelementptr inbounds i8,i8*%aK,i64 -4
%aM=bitcast i8*%aL to i32*
store i32 1342177296,i32*%aM,align 4
store i8*%aK,i8**%c,align 8
%aN=bitcast i8*%aK to i8**
store i8*null,i8**%aN,align 8
%aO=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aP=getelementptr inbounds i8,i8*%aK,i64 8
%aQ=bitcast i8*%aP to i8**
store i8*%aO,i8**%aQ,align 8
%aR=getelementptr inbounds i8,i8*%aK,i64 16
%aS=bitcast i8*%aR to i32*
store i32 3,i32*%aS,align 4
%aT=call i8*@sml_alloc(i32 inreg 12)#0
%aU=getelementptr inbounds i8,i8*%aT,i64 -4
%aV=bitcast i8*%aU to i32*
store i32 1342177288,i32*%aV,align 4
%aW=load i8*,i8**%c,align 8
%aX=bitcast i8*%aT to i8**
store i8*%aW,i8**%aX,align 8
%aY=getelementptr inbounds i8,i8*%aT,i64 8
%aZ=bitcast i8*%aY to i32*
store i32 1,i32*%aZ,align 4
ret i8*%aT
a0:
store i8*%O,i8**%d,align 8
%a1=icmp eq i32%G,0
br i1%a1,label%a7,label%a2
a2:
store i8*null,i8**%d,align 8
%a3=sext i32%u to i64
%a4=getelementptr inbounds i8,i8*%O,i64%a3
%a5=bitcast i8*%a4 to i8**
%a6=load i8*,i8**%a5,align 8
br label%bf
a7:
%a8=call i8*@sml_alloc(i32 inreg%r)#0
%a9=getelementptr inbounds i8,i8*%a8,i64 -4
%ba=bitcast i8*%a9 to i32*
store i32%r,i32*%ba,align 4
%bb=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bc=sext i32%u to i64
%bd=getelementptr inbounds i8,i8*%bb,i64%bc
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%a8,i8*%bd,i32%r,i1 false)
%be=load i8*,i8**%c,align 8
br label%bf
bf:
%bg=phi i8*[%be,%a7],[%o,%a2]
%bh=phi i8*[%a8,%a7],[%a6,%a2]
store i8*%bh,i8**%d,align 8
%bi=getelementptr inbounds i8,i8*%bg,i64 8
%bj=bitcast i8*%bi to i8**
%bk=load i8*,i8**%bj,align 8
%bl=icmp eq i8*%bk,null
br i1%bl,label%bm,label%bZ
bm:
store i8*null,i8**%c,align 8
%bn=load i8*,i8**%e,align 8
%bo=getelementptr inbounds i8,i8*%bn,i64 12
%bp=bitcast i8*%bo to i32*
%bq=load i32,i32*%bp,align 4
store i8*null,i8**%e,align 8
%br=getelementptr inbounds i8,i8*%bn,i64 8
%bs=bitcast i8*%br to i32*
%bt=load i32,i32*%bs,align 4
%bu=call i8*@sml_alloc(i32 inreg%M)#0
%bv=or i32%L,1342177280
%bw=getelementptr inbounds i8,i8*%bu,i64 -4
%bx=bitcast i8*%bw to i32*
store i32%bv,i32*%bx,align 4
store i8*%bu,i8**%e,align 8
call void@llvm.memset.p0i8.i32(i8*%bu,i8 0,i32%M,i1 false)
%by=icmp eq i32%bt,0
%bz=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bA=sext i32%u to i64
%bB=getelementptr inbounds i8,i8*%bu,i64%bA
br i1%by,label%bE,label%bC
bC:
%bD=bitcast i8*%bB to i8**
store i8*%bz,i8**%bD,align 8
br label%bF
bE:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bB,i8*%bz,i32%bq,i1 false)
br label%bF
bF:
%bG=sext i32%L to i64
%bH=getelementptr inbounds i8,i8*%bu,i64%bG
%bI=bitcast i8*%bH to i32*
store i32%G,i32*%bI,align 4
%bJ=call i8*@sml_alloc(i32 inreg 20)#0
%bK=getelementptr inbounds i8,i8*%bJ,i64 -4
%bL=bitcast i8*%bK to i32*
store i32 1342177296,i32*%bL,align 4
store i8*%bJ,i8**%c,align 8
%bM=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bN=bitcast i8*%bJ to i8**
store i8*%bM,i8**%bN,align 8
%bO=getelementptr inbounds i8,i8*%bJ,i64 8
%bP=bitcast i8*%bO to i8**
store i8*null,i8**%bP,align 8
%bQ=getelementptr inbounds i8,i8*%bJ,i64 16
%bR=bitcast i8*%bQ to i32*
store i32 3,i32*%bR,align 4
%bS=call i8*@sml_alloc(i32 inreg 12)#0
%bT=getelementptr inbounds i8,i8*%bS,i64 -4
%bU=bitcast i8*%bT to i32*
store i32 1342177288,i32*%bU,align 4
%bV=load i8*,i8**%c,align 8
%bW=bitcast i8*%bS to i8**
store i8*%bV,i8**%bW,align 8
%bX=getelementptr inbounds i8,i8*%bS,i64 8
%bY=bitcast i8*%bX to i32*
store i32 1,i32*%bY,align 4
ret i8*%bS
bZ:
store i8*%bk,i8**%c,align 8
%b0=load i8*,i8**%e,align 8
%b1=getelementptr inbounds i8,i8*%b0,i64 8
%b2=bitcast i8*%b1 to i32*
%b3=load i32,i32*%b2,align 4
%b4=icmp eq i32%b3,0
br i1%b4,label%cb,label%b5
b5:
%b6=bitcast i8*%b0 to i8**
store i8*null,i8**%c,align 8
%b7=sext i32%u to i64
%b8=getelementptr inbounds i8,i8*%bk,i64%b7
%b9=bitcast i8*%b8 to i8**
%ca=load i8*,i8**%b9,align 8
br label%cr
cb:
%cc=getelementptr inbounds i8,i8*%b0,i64 12
%cd=bitcast i8*%cc to i32*
%ce=load i32,i32*%cd,align 4
%cf=call i8*@sml_alloc(i32 inreg%ce)#0
%cg=getelementptr inbounds i8,i8*%cf,i64 -4
%ch=bitcast i8*%cg to i32*
store i32%ce,i32*%ch,align 4
%ci=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cj=sext i32%u to i64
%ck=getelementptr inbounds i8,i8*%ci,i64%cj
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cf,i8*%ck,i32%ce,i1 false)
%cl=bitcast i8**%e to i8***
%cm=load i8**,i8***%cl,align 8
%cn=bitcast i8**%cm to i8*
%co=getelementptr inbounds i8*,i8**%cm,i64 1
%cp=bitcast i8**%co to i32*
%cq=load i32,i32*%cp,align 4
br label%cr
cr:
%cs=phi i64[%cj,%cb],[%b7,%b5]
%ct=phi i32[%cq,%cb],[%b3,%b5]
%cu=phi i8*[%cn,%cb],[%b0,%b5]
%cv=phi i8**[%cm,%cb],[%b6,%b5]
%cw=phi i8*[%cf,%cb],[%ca,%b5]
store i8*%cw,i8**%c,align 8
%cx=load i8*,i8**%cv,align 8
%cy=getelementptr inbounds i8,i8*%cx,i64 16
%cz=bitcast i8*%cy to i8*(i8*,i8*)**
%cA=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%cz,align 8
%cB=bitcast i8*%cx to i8**
%cC=load i8*,i8**%cB,align 8
store i8*%cC,i8**%f,align 8
%cD=getelementptr inbounds i8,i8*%cu,i64 12
%cE=bitcast i8*%cD to i32*
%cF=load i32,i32*%cE,align 4
%cG=call i8*@sml_alloc(i32 inreg%J)#0
%cH=or i32%A,1342177280
%cI=getelementptr inbounds i8,i8*%cG,i64 -4
%cJ=bitcast i8*%cI to i32*
store i32%cH,i32*%cJ,align 4
call void@llvm.memset.p0i8.i32(i8*%cG,i8 0,i32%J,i1 false)
%cK=icmp eq i32%ct,0
%cL=load i8*,i8**%d,align 8
%cM=getelementptr inbounds i8,i8*%cG,i64%cs
br i1%cK,label%cT,label%cN
cN:
%cO=bitcast i8*%cM to i8**
store i8*%cL,i8**%cO,align 8
%cP=load i8*,i8**%c,align 8
%cQ=sext i32%x to i64
%cR=getelementptr inbounds i8,i8*%cG,i64%cQ
%cS=bitcast i8*%cR to i8**
store i8*%cP,i8**%cS,align 8
br label%cX
cT:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cM,i8*%cL,i32%cF,i1 false)
%cU=load i8*,i8**%c,align 8
%cV=sext i32%x to i64
%cW=getelementptr inbounds i8,i8*%cG,i64%cV
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cW,i8*%cU,i32%cF,i1 false)
br label%cX
cX:
%cY=sext i32%A to i64
%cZ=getelementptr inbounds i8,i8*%cG,i64%cY
%c0=bitcast i8*%cZ to i32*
store i32%I,i32*%c0,align 4
%c1=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%c2=call fastcc i8*%cA(i8*inreg%c1,i8*inreg%cG)
%c3=bitcast i8*%c2 to i32*
%c4=load i32,i32*%c3,align 4
%c5=icmp eq i32%c4,0
br i1%c5,label%c6,label%V
c6:
%c7=load i8*,i8**%e,align 8
%c8=getelementptr inbounds i8,i8*%c7,i64 12
%c9=bitcast i8*%c8 to i32*
%da=load i32,i32*%c9,align 4
%db=getelementptr inbounds i8,i8*%c7,i64 8
%dc=bitcast i8*%db to i32*
%dd=load i32,i32*%dc,align 4
%de=call i8*@sml_alloc(i32 inreg%M)#0
%df=or i32%L,1342177280
%dg=getelementptr inbounds i8,i8*%de,i64 -4
%dh=bitcast i8*%dg to i32*
store i32%df,i32*%dh,align 4
store i8*%de,i8**%f,align 8
call void@llvm.memset.p0i8.i32(i8*%de,i8 0,i32%M,i1 false)
%di=icmp eq i32%dd,0
%dj=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%dk=getelementptr inbounds i8,i8*%de,i64%cs
br i1%di,label%dn,label%dl
dl:
%dm=bitcast i8*%dk to i8**
store i8*%dj,i8**%dm,align 8
br label%do
dn:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dk,i8*%dj,i32%da,i1 false)
br label%do
do:
%dp=sext i32%L to i64
%dq=getelementptr inbounds i8,i8*%de,i64%dp
%dr=bitcast i8*%dq to i32*
store i32%G,i32*%dr,align 4
%ds=load i8*,i8**%e,align 8
%dt=getelementptr inbounds i8,i8*%ds,i64 12
%du=bitcast i8*%dt to i32*
%dv=load i32,i32*%du,align 4
store i8*null,i8**%e,align 8
%dw=getelementptr inbounds i8,i8*%ds,i64 8
%dx=bitcast i8*%dw to i32*
%dy=load i32,i32*%dx,align 4
%dz=call i8*@sml_alloc(i32 inreg%M)#0
%dA=getelementptr inbounds i8,i8*%dz,i64 -4
%dB=bitcast i8*%dA to i32*
store i32%df,i32*%dB,align 4
store i8*%dz,i8**%d,align 8
call void@llvm.memset.p0i8.i32(i8*%dz,i8 0,i32%M,i1 false)
%dC=icmp eq i32%dy,0
%dD=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%dE=getelementptr inbounds i8,i8*%dz,i64%cs
br i1%dC,label%dH,label%dF
dF:
%dG=bitcast i8*%dE to i8**
store i8*%dD,i8**%dG,align 8
br label%dI
dH:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%dE,i8*%dD,i32%dv,i1 false)
br label%dI
dI:
%dJ=getelementptr inbounds i8,i8*%dz,i64%dp
%dK=bitcast i8*%dJ to i32*
store i32%G,i32*%dK,align 4
%dL=call i8*@sml_alloc(i32 inreg 20)#0
%dM=getelementptr inbounds i8,i8*%dL,i64 -4
%dN=bitcast i8*%dM to i32*
store i32 1342177296,i32*%dN,align 4
store i8*%dL,i8**%c,align 8
%dO=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%dP=bitcast i8*%dL to i8**
store i8*%dO,i8**%dP,align 8
%dQ=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%dR=getelementptr inbounds i8,i8*%dL,i64 8
%dS=bitcast i8*%dR to i8**
store i8*%dQ,i8**%dS,align 8
%dT=getelementptr inbounds i8,i8*%dL,i64 16
%dU=bitcast i8*%dT to i32*
store i32 3,i32*%dU,align 4
%dV=call i8*@sml_alloc(i32 inreg 12)#0
%dW=getelementptr inbounds i8,i8*%dV,i64 -4
%dX=bitcast i8*%dW to i32*
store i32 1342177288,i32*%dX,align 4
%dY=load i8*,i8**%c,align 8
%dZ=bitcast i8*%dV to i8**
store i8*%dY,i8**%dZ,align 8
%d0=getelementptr inbounds i8,i8*%dV,i64 8
%d1=bitcast i8*%d0 to i32*
store i32 1,i32*%d1,align 4
ret i8*%dV
}
define internal fastcc i8*@_SMLL10difference_514(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
o:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%m,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%c,align 8
%l=load i8*,i8**%e,align 8
br label%m
m:
%n=phi i8*[%l,%j],[%a,%o]
%p=phi i8*[%k,%j],[%b,%o]
%q=bitcast i8*%p to i8**
%r=load i8*,i8**%q,align 8
store i8*%r,i8**%c,align 8
%s=getelementptr inbounds i8,i8*%p,i64 8
%t=bitcast i8*%s to i8**
%u=load i8*,i8**%t,align 8
store i8*%u,i8**%d,align 8
%v=getelementptr inbounds i8,i8*%n,i64 8
%w=bitcast i8*%v to i8**
%x=load i8*,i8**%w,align 8
%y=getelementptr inbounds i8,i8*%n,i64 16
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=getelementptr inbounds i8,i8*%n,i64 20
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=call fastcc i8*@_SMLL9mergeWith_484(i8*inreg%x,i32 inreg%A,i32 inreg%D,i32 inreg%A,i32 inreg%D,i32 inreg 1,i32 inreg 8)
%F=getelementptr inbounds i8,i8*%E,i64 16
%G=bitcast i8*%F to i8*(i8*,i8*)**
%H=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%G,align 8
%I=bitcast i8*%E to i8**
%J=load i8*,i8**%I,align 8
store i8*%J,i8**%g,align 8
%K=bitcast i8**%e to i8***
%L=load i8**,i8***%K,align 8
%M=load i8*,i8**%L,align 8
store i8*%M,i8**%f,align 8
%N=bitcast i8**%L to i8*
%O=getelementptr inbounds i8*,i8**%L,i64 2
%P=bitcast i8**%O to i32*
%Q=load i32,i32*%P,align 4
store i8*null,i8**%e,align 8
%R=getelementptr inbounds i8,i8*%N,i64 20
%S=bitcast i8*%R to i32*
%T=load i32,i32*%S,align 4
%U=call i8*@sml_alloc(i32 inreg 20)#0
%V=getelementptr inbounds i8,i8*%U,i64 -4
%W=bitcast i8*%V to i32*
store i32 1342177296,i32*%W,align 4
store i8*%U,i8**%e,align 8
%X=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%Y=bitcast i8*%U to i8**
store i8*%X,i8**%Y,align 8
%Z=getelementptr inbounds i8,i8*%U,i64 8
%aa=bitcast i8*%Z to i32*
store i32%Q,i32*%aa,align 4
%ab=getelementptr inbounds i8,i8*%U,i64 12
%ac=bitcast i8*%ab to i32*
store i32%T,i32*%ac,align 4
%ad=getelementptr inbounds i8,i8*%U,i64 16
%ae=bitcast i8*%ad to i32*
store i32 1,i32*%ae,align 4
%af=call i8*@sml_alloc(i32 inreg 28)#0
%ag=getelementptr inbounds i8,i8*%af,i64 -4
%ah=bitcast i8*%ag to i32*
store i32 1342177304,i32*%ah,align 4
%ai=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aj=bitcast i8*%af to i8**
store i8*%ai,i8**%aj,align 8
%ak=getelementptr inbounds i8,i8*%af,i64 8
%al=bitcast i8*%ak to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL10difference_513 to void(...)*),void(...)**%al,align 8
%am=getelementptr inbounds i8,i8*%af,i64 16
%an=bitcast i8*%am to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL10difference_513 to void(...)*),void(...)**%an,align 8
%ao=getelementptr inbounds i8,i8*%af,i64 24
%ap=bitcast i8*%ao to i32*
store i32 -2147483647,i32*%ap,align 4
%aq=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%ar=call fastcc i8*%H(i8*inreg%aq,i8*inreg%af)
%as=getelementptr inbounds i8,i8*%ar,i64 16
%at=bitcast i8*%as to i8*(i8*,i8*)**
%au=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%at,align 8
%av=bitcast i8*%ar to i8**
%aw=load i8*,i8**%av,align 8
store i8*%aw,i8**%e,align 8
%ax=call i8*@sml_alloc(i32 inreg 20)#0
%ay=getelementptr inbounds i8,i8*%ax,i64 -4
%az=bitcast i8*%ay to i32*
store i32 1342177296,i32*%az,align 4
%aA=load i8*,i8**%c,align 8
%aB=bitcast i8*%ax to i8**
store i8*%aA,i8**%aB,align 8
%aC=load i8*,i8**%d,align 8
%aD=getelementptr inbounds i8,i8*%ax,i64 8
%aE=bitcast i8*%aD to i8**
store i8*%aC,i8**%aE,align 8
%aF=getelementptr inbounds i8,i8*%ax,i64 16
%aG=bitcast i8*%aF to i32*
store i32 3,i32*%aG,align 4
%aH=load i8*,i8**%e,align 8
%aI=tail call fastcc i8*%au(i8*inreg%aH,i8*inreg%ax)
ret i8*%aI
}
define internal fastcc i8*@_SMLL10difference_515(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%b,i8**%c,align 8
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=getelementptr inbounds i8,i8*%a,i64 8
%i=bitcast i8*%h to i32*
%j=load i32,i32*%i,align 4
%k=getelementptr inbounds i8,i8*%a,i64 12
%l=bitcast i8*%k to i32*
%m=load i32,i32*%l,align 4
%n=call i8*@sml_alloc(i32 inreg 28)#0
%o=getelementptr inbounds i8,i8*%n,i64 -4
%p=bitcast i8*%o to i32*
store i32 1342177304,i32*%p,align 4
store i8*%n,i8**%e,align 8
%q=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%r=bitcast i8*%n to i8**
store i8*%q,i8**%r,align 8
%s=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%t=getelementptr inbounds i8,i8*%n,i64 8
%u=bitcast i8*%t to i8**
store i8*%s,i8**%u,align 8
%v=getelementptr inbounds i8,i8*%n,i64 16
%w=bitcast i8*%v to i32*
store i32%j,i32*%w,align 4
%x=getelementptr inbounds i8,i8*%n,i64 20
%y=bitcast i8*%x to i32*
store i32%m,i32*%y,align 4
%z=getelementptr inbounds i8,i8*%n,i64 24
%A=bitcast i8*%z to i32*
store i32 3,i32*%A,align 4
%B=call i8*@sml_alloc(i32 inreg 28)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177304,i32*%D,align 4
%E=load i8*,i8**%e,align 8
%F=bitcast i8*%B to i8**
store i8*%E,i8**%F,align 8
%G=getelementptr inbounds i8,i8*%B,i64 8
%H=bitcast i8*%G to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL10difference_514 to void(...)*),void(...)**%H,align 8
%I=getelementptr inbounds i8,i8*%B,i64 16
%J=bitcast i8*%I to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL10difference_514 to void(...)*),void(...)**%J,align 8
%K=getelementptr inbounds i8,i8*%B,i64 24
%L=bitcast i8*%K to i32*
store i32 -2147483647,i32*%L,align 4
ret i8*%B
}
define internal fastcc i8*@_SMLL10difference_516(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL10difference_515 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL10difference_515 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLL18subtractByKeyEquiv_517(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%f=getelementptr inbounds i8,i8*%a,i64 4
%g=bitcast i8*%f to i32*
%h=load i32,i32*%g,align 4
%i=add i32%h,-1
%j=sub i32 0,%h
%k=and i32%i,%j
%l=add i32%h,7
%m=add i32%l,%k
%n=and i32%m,-8
%o=bitcast i8*%a to i32*
%p=load i32,i32*%o,align 4
%q=or i32%n,4
%r=bitcast i8*%b to i8**
%s=load i8*,i8**%r,align 8
%t=icmp eq i8*%s,null
br i1%t,label%u,label%v
u:
ret i8*null
v:
store i8*%s,i8**%d,align 8
%w=icmp eq i32%p,0
br i1%w,label%C,label%x
x:
store i8*null,i8**%d,align 8
%y=sext i32%k to i64
%z=getelementptr inbounds i8,i8*%s,i64%y
%A=bitcast i8*%z to i8**
%B=load i8*,i8**%A,align 8
br label%K
C:
%D=call i8*@sml_alloc(i32 inreg%h)#0
%E=getelementptr inbounds i8,i8*%D,i64 -4
%F=bitcast i8*%E to i32*
store i32%h,i32*%F,align 4
%G=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%H=sext i32%k to i64
%I=getelementptr inbounds i8,i8*%G,i64%H
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%D,i8*%I,i32%h,i1 false)
%J=load i8*,i8**%c,align 8
br label%K
K:
%L=phi i8*[%J,%C],[%b,%x]
%M=phi i8*[%D,%C],[%B,%x]
store i8*%M,i8**%d,align 8
%N=getelementptr inbounds i8,i8*%L,i64 8
%O=bitcast i8*%N to i8**
%P=load i8*,i8**%O,align 8
%Q=icmp eq i8*%P,null
br i1%Q,label%R,label%an
R:
store i8*null,i8**%c,align 8
%S=load i8*,i8**%e,align 8
%T=getelementptr inbounds i8,i8*%S,i64 4
%U=bitcast i8*%T to i32*
%V=load i32,i32*%U,align 4
store i8*null,i8**%e,align 8
%W=bitcast i8*%S to i32*
%X=load i32,i32*%W,align 4
%Y=call i8*@sml_alloc(i32 inreg%q)#0
%Z=or i32%n,1342177280
%aa=getelementptr inbounds i8,i8*%Y,i64 -4
%ab=bitcast i8*%aa to i32*
store i32%Z,i32*%ab,align 4
call void@llvm.memset.p0i8.i32(i8*%Y,i8 0,i32%q,i1 false)
%ac=icmp eq i32%X,0
%ad=load i8*,i8**%d,align 8
%ae=sext i32%k to i64
%af=getelementptr inbounds i8,i8*%Y,i64%ae
br i1%ac,label%ai,label%ag
ag:
%ah=bitcast i8*%af to i8**
store i8*%ad,i8**%ah,align 8
br label%aj
ai:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%af,i8*%ad,i32%V,i1 false)
br label%aj
aj:
%ak=sext i32%n to i64
%al=getelementptr inbounds i8,i8*%Y,i64%ak
%am=bitcast i8*%al to i32*
store i32%p,i32*%am,align 4
ret i8*%Y
an:
store i8*null,i8**%d,align 8
store i8*%P,i8**%c,align 8
%ao=load i8*,i8**%e,align 8
%ap=bitcast i8*%ao to i32*
%aq=load i32,i32*%ap,align 4
%ar=icmp eq i32%aq,0
br i1%ar,label%as,label%u
as:
store i8*null,i8**%e,align 8
%at=getelementptr inbounds i8,i8*%ao,i64 4
%au=bitcast i8*%at to i32*
%av=load i32,i32*%au,align 4
%aw=call i8*@sml_alloc(i32 inreg%av)#0
%ax=getelementptr inbounds i8,i8*%aw,i64 -4
%ay=bitcast i8*%ax to i32*
store i32%av,i32*%ay,align 4
%az=load i8*,i8**%c,align 8
%aA=sext i32%k to i64
%aB=getelementptr inbounds i8,i8*%az,i64%aA
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aw,i8*%aB,i32%av,i1 false)
br label%u
}
define internal fastcc i8*@_SMLL18subtractByKeyEquiv_518(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
o:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%m,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%c,align 8
%l=load i8*,i8**%e,align 8
br label%m
m:
%n=phi i8*[%l,%j],[%a,%o]
%p=phi i8*[%k,%j],[%b,%o]
%q=bitcast i8*%p to i8**
%r=load i8*,i8**%q,align 8
store i8*%r,i8**%c,align 8
%s=getelementptr inbounds i8,i8*%p,i64 8
%t=bitcast i8*%s to i8**
%u=load i8*,i8**%t,align 8
store i8*%u,i8**%d,align 8
%v=getelementptr inbounds i8,i8*%n,i64 8
%w=bitcast i8*%v to i8**
%x=load i8*,i8**%w,align 8
%y=getelementptr inbounds i8,i8*%n,i64 24
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=getelementptr inbounds i8,i8*%n,i64 28
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=call fastcc i8*@_SMLL10mapPartial_508(i8*inreg%x,i32 inreg 1,i32 inreg 8,i32 inreg%A,i32 inreg%D)
%F=getelementptr inbounds i8,i8*%E,i64 16
%G=bitcast i8*%F to i8*(i8*,i8*)**
%H=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%G,align 8
%I=bitcast i8*%E to i8**
%J=load i8*,i8**%I,align 8
store i8*%J,i8**%f,align 8
%K=load i8*,i8**%e,align 8
%L=getelementptr inbounds i8,i8*%K,i64 24
%M=bitcast i8*%L to i32*
%N=load i32,i32*%M,align 4
%O=getelementptr inbounds i8,i8*%K,i64 28
%P=bitcast i8*%O to i32*
%Q=load i32,i32*%P,align 4
%R=call i8*@sml_alloc(i32 inreg 12)#0
%S=bitcast i8*%R to i32*
%T=getelementptr inbounds i8,i8*%R,i64 -4
%U=bitcast i8*%T to i32*
store i32 1342177288,i32*%U,align 4
store i8*%R,i8**%g,align 8
store i32%N,i32*%S,align 4
%V=getelementptr inbounds i8,i8*%R,i64 4
%W=bitcast i8*%V to i32*
store i32%Q,i32*%W,align 4
%X=getelementptr inbounds i8,i8*%R,i64 8
%Y=bitcast i8*%X to i32*
store i32 0,i32*%Y,align 4
%Z=call i8*@sml_alloc(i32 inreg 28)#0
%aa=getelementptr inbounds i8,i8*%Z,i64 -4
%ab=bitcast i8*%aa to i32*
store i32 1342177304,i32*%ab,align 4
%ac=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%ad=bitcast i8*%Z to i8**
store i8*%ac,i8**%ad,align 8
%ae=getelementptr inbounds i8,i8*%Z,i64 8
%af=bitcast i8*%ae to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL18subtractByKeyEquiv_517 to void(...)*),void(...)**%af,align 8
%ag=getelementptr inbounds i8,i8*%Z,i64 16
%ah=bitcast i8*%ag to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL18subtractByKeyEquiv_517 to void(...)*),void(...)**%ah,align 8
%ai=getelementptr inbounds i8,i8*%Z,i64 24
%aj=bitcast i8*%ai to i32*
store i32 -2147483647,i32*%aj,align 4
%ak=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%al=call fastcc i8*%H(i8*inreg%ak,i8*inreg%Z)
%am=getelementptr inbounds i8,i8*%al,i64 16
%an=bitcast i8*%am to i8*(i8*,i8*)**
%ao=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%an,align 8
%ap=bitcast i8*%al to i8**
%aq=load i8*,i8**%ap,align 8
store i8*%aq,i8**%f,align 8
%ar=load i8*,i8**%e,align 8
%as=getelementptr inbounds i8,i8*%ar,i64 16
%at=bitcast i8*%as to i8**
%au=load i8*,i8**%at,align 8
%av=getelementptr inbounds i8,i8*%ar,i64 24
%aw=bitcast i8*%av to i32*
%ax=load i32,i32*%aw,align 4
%ay=getelementptr inbounds i8,i8*%ar,i64 28
%az=bitcast i8*%ay to i32*
%aA=load i32,i32*%az,align 4
%aB=call fastcc i8*@_SMLL10difference_516(i8*inreg%au,i32 inreg%ax,i32 inreg%aA)
%aC=getelementptr inbounds i8,i8*%aB,i64 16
%aD=bitcast i8*%aC to i8*(i8*,i8*)**
%aE=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aD,align 8
%aF=bitcast i8*%aB to i8**
%aG=load i8*,i8**%aF,align 8
%aH=bitcast i8**%e to i8***
%aI=load i8**,i8***%aH,align 8
store i8*null,i8**%e,align 8
%aJ=load i8*,i8**%aI,align 8
%aK=call fastcc i8*%aE(i8*inreg%aG,i8*inreg%aJ)
%aL=getelementptr inbounds i8,i8*%aK,i64 16
%aM=bitcast i8*%aL to i8*(i8*,i8*)**
%aN=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aM,align 8
%aO=bitcast i8*%aK to i8**
%aP=load i8*,i8**%aO,align 8
store i8*%aP,i8**%e,align 8
%aQ=call i8*@sml_alloc(i32 inreg 20)#0
%aR=getelementptr inbounds i8,i8*%aQ,i64 -4
%aS=bitcast i8*%aR to i32*
store i32 1342177296,i32*%aS,align 4
%aT=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aU=bitcast i8*%aQ to i8**
store i8*%aT,i8**%aU,align 8
%aV=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aW=getelementptr inbounds i8,i8*%aQ,i64 8
%aX=bitcast i8*%aW to i8**
store i8*%aV,i8**%aX,align 8
%aY=getelementptr inbounds i8,i8*%aQ,i64 16
%aZ=bitcast i8*%aY to i32*
store i32 3,i32*%aZ,align 4
%a0=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%a1=call fastcc i8*%aN(i8*inreg%a0,i8*inreg%aQ)
%a2=load i8*,i8**%f,align 8
%a3=tail call fastcc i8*%ao(i8*inreg%a2,i8*inreg%a1)
ret i8*%a3
}
define internal fastcc i8*@_SMLL18subtractByKeyEquiv_519(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=getelementptr inbounds i8,i8*%a,i64 16
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%a,i64 20
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=call i8*@sml_alloc(i32 inreg 36)#0
%s=getelementptr inbounds i8,i8*%r,i64 -4
%t=bitcast i8*%s to i32*
store i32 1342177312,i32*%t,align 4
store i8*%r,i8**%f,align 8
%u=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%v=bitcast i8*%r to i8**
store i8*%u,i8**%v,align 8
%w=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%x=getelementptr inbounds i8,i8*%r,i64 8
%y=bitcast i8*%x to i8**
store i8*%w,i8**%y,align 8
%z=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%A=getelementptr inbounds i8,i8*%r,i64 16
%B=bitcast i8*%A to i8**
store i8*%z,i8**%B,align 8
%C=getelementptr inbounds i8,i8*%r,i64 24
%D=bitcast i8*%C to i32*
store i32%n,i32*%D,align 4
%E=getelementptr inbounds i8,i8*%r,i64 28
%F=bitcast i8*%E to i32*
store i32%q,i32*%F,align 4
%G=getelementptr inbounds i8,i8*%r,i64 32
%H=bitcast i8*%G to i32*
store i32 7,i32*%H,align 4
%I=call i8*@sml_alloc(i32 inreg 28)#0
%J=getelementptr inbounds i8,i8*%I,i64 -4
%K=bitcast i8*%J to i32*
store i32 1342177304,i32*%K,align 4
%L=load i8*,i8**%f,align 8
%M=bitcast i8*%I to i8**
store i8*%L,i8**%M,align 8
%N=getelementptr inbounds i8,i8*%I,i64 8
%O=bitcast i8*%N to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL18subtractByKeyEquiv_518 to void(...)*),void(...)**%O,align 8
%P=getelementptr inbounds i8,i8*%I,i64 16
%Q=bitcast i8*%P to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL18subtractByKeyEquiv_518 to void(...)*),void(...)**%Q,align 8
%R=getelementptr inbounds i8,i8*%I,i64 24
%S=bitcast i8*%R to i32*
store i32 -2147483647,i32*%S,align 4
ret i8*%I
}
define internal fastcc i8*@_SMLL18subtractByKeyEquiv_520(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
store i8*%l,i8**%f,align 8
%o=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%r=getelementptr inbounds i8,i8*%l,i64 8
%s=bitcast i8*%r to i8**
store i8*%q,i8**%s,align 8
%t=getelementptr inbounds i8,i8*%l,i64 16
%u=bitcast i8*%t to i32*
store i32%b,i32*%u,align 4
%v=getelementptr inbounds i8,i8*%l,i64 20
%w=bitcast i8*%v to i32*
store i32%c,i32*%w,align 4
%x=getelementptr inbounds i8,i8*%l,i64 24
%y=bitcast i8*%x to i32*
store i32 3,i32*%y,align 4
%z=call i8*@sml_alloc(i32 inreg 28)#0
%A=getelementptr inbounds i8,i8*%z,i64 -4
%B=bitcast i8*%A to i32*
store i32 1342177304,i32*%B,align 4
%C=load i8*,i8**%f,align 8
%D=bitcast i8*%z to i8**
store i8*%C,i8**%D,align 8
%E=getelementptr inbounds i8,i8*%z,i64 8
%F=bitcast i8*%E to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL18subtractByKeyEquiv_519 to void(...)*),void(...)**%F,align 8
%G=getelementptr inbounds i8,i8*%z,i64 16
%H=bitcast i8*%G to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL18subtractByKeyEquiv_519 to void(...)*),void(...)**%H,align 8
%I=getelementptr inbounds i8,i8*%z,i64 24
%J=bitcast i8*%I to i32*
store i32 -2147483647,i32*%J,align 4
ret i8*%z
}
define internal fastcc i8*@_SMLL22subtractByKeyElemEquiv_521(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
%e=getelementptr inbounds i8,i8*%a,i64 4
%f=bitcast i8*%e to i32*
%g=load i32,i32*%f,align 4
%h=add i32%g,-1
%i=sub i32 0,%g
%j=and i32%h,%i
%k=add i32%g,7
%l=add i32%k,%j
%m=and i32%l,-8
%n=bitcast i8*%a to i32*
%o=load i32,i32*%n,align 4
%p=or i32%m,4
%q=bitcast i8*%b to i8**
%r=load i8*,i8**%q,align 8
%s=icmp eq i8*%r,null
br i1%s,label%t,label%u
t:
ret i8*null
u:
store i8*%r,i8**%c,align 8
%v=icmp eq i32%o,0
br i1%v,label%B,label%w
w:
store i8*null,i8**%c,align 8
%x=sext i32%j to i64
%y=getelementptr inbounds i8,i8*%r,i64%x
%z=bitcast i8*%y to i8**
%A=load i8*,i8**%z,align 8
br label%M
B:
%C=call i8*@sml_alloc(i32 inreg%g)#0
%D=getelementptr inbounds i8,i8*%C,i64 -4
%E=bitcast i8*%D to i32*
store i32%g,i32*%E,align 4
%F=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%G=sext i32%j to i64
%H=getelementptr inbounds i8,i8*%F,i64%G
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%C,i8*%H,i32%g,i1 false)
%I=load i8*,i8**%d,align 8
%J=getelementptr inbounds i8,i8*%I,i64 4
%K=bitcast i8*%J to i32*
%L=bitcast i8*%I to i32*
br label%M
M:
%N=phi i64[%G,%B],[%x,%w]
%O=phi i32*[%L,%B],[%n,%w]
%P=phi i32*[%K,%B],[%f,%w]
%Q=phi i8*[%C,%B],[%A,%w]
store i8*%Q,i8**%c,align 8
%R=load i32,i32*%P,align 4
store i8*null,i8**%d,align 8
%S=load i32,i32*%O,align 4
%T=call i8*@sml_alloc(i32 inreg%p)#0
%U=or i32%m,1342177280
%V=getelementptr inbounds i8,i8*%T,i64 -4
%W=bitcast i8*%V to i32*
store i32%U,i32*%W,align 4
call void@llvm.memset.p0i8.i32(i8*%T,i8 0,i32%p,i1 false)
%X=icmp eq i32%S,0
%Y=load i8*,i8**%c,align 8
%Z=getelementptr inbounds i8,i8*%T,i64%N
br i1%X,label%ac,label%aa
aa:
%ab=bitcast i8*%Z to i8**
store i8*%Y,i8**%ab,align 8
br label%ad
ac:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%Z,i8*%Y,i32%R,i1 false)
br label%ad
ad:
%ae=sext i32%m to i64
%af=getelementptr inbounds i8,i8*%T,i64%ae
%ag=bitcast i8*%af to i32*
store i32%o,i32*%ag,align 4
ret i8*%T
}
define internal fastcc i8*@_SMLL22subtractByKeyElemEquiv_522(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
o:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%m,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%c,align 8
%l=load i8*,i8**%e,align 8
br label%m
m:
%n=phi i8*[%l,%j],[%a,%o]
%p=phi i8*[%k,%j],[%b,%o]
%q=bitcast i8*%p to i8**
%r=load i8*,i8**%q,align 8
store i8*%r,i8**%c,align 8
%s=getelementptr inbounds i8,i8*%p,i64 8
%t=bitcast i8*%s to i8**
%u=load i8*,i8**%t,align 8
store i8*%u,i8**%d,align 8
%v=getelementptr inbounds i8,i8*%n,i64 8
%w=bitcast i8*%v to i8**
%x=load i8*,i8**%w,align 8
%y=getelementptr inbounds i8,i8*%n,i64 24
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=getelementptr inbounds i8,i8*%n,i64 28
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=call fastcc i8*@_SMLL10mapPartial_508(i8*inreg%x,i32 inreg 1,i32 inreg 8,i32 inreg%A,i32 inreg%D)
%F=getelementptr inbounds i8,i8*%E,i64 16
%G=bitcast i8*%F to i8*(i8*,i8*)**
%H=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%G,align 8
%I=bitcast i8*%E to i8**
%J=load i8*,i8**%I,align 8
store i8*%J,i8**%f,align 8
%K=load i8*,i8**%e,align 8
%L=getelementptr inbounds i8,i8*%K,i64 24
%M=bitcast i8*%L to i32*
%N=load i32,i32*%M,align 4
%O=getelementptr inbounds i8,i8*%K,i64 28
%P=bitcast i8*%O to i32*
%Q=load i32,i32*%P,align 4
%R=call i8*@sml_alloc(i32 inreg 12)#0
%S=bitcast i8*%R to i32*
%T=getelementptr inbounds i8,i8*%R,i64 -4
%U=bitcast i8*%T to i32*
store i32 1342177288,i32*%U,align 4
store i8*%R,i8**%g,align 8
store i32%N,i32*%S,align 4
%V=getelementptr inbounds i8,i8*%R,i64 4
%W=bitcast i8*%V to i32*
store i32%Q,i32*%W,align 4
%X=getelementptr inbounds i8,i8*%R,i64 8
%Y=bitcast i8*%X to i32*
store i32 0,i32*%Y,align 4
%Z=call i8*@sml_alloc(i32 inreg 28)#0
%aa=getelementptr inbounds i8,i8*%Z,i64 -4
%ab=bitcast i8*%aa to i32*
store i32 1342177304,i32*%ab,align 4
%ac=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%ad=bitcast i8*%Z to i8**
store i8*%ac,i8**%ad,align 8
%ae=getelementptr inbounds i8,i8*%Z,i64 8
%af=bitcast i8*%ae to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL22subtractByKeyElemEquiv_521 to void(...)*),void(...)**%af,align 8
%ag=getelementptr inbounds i8,i8*%Z,i64 16
%ah=bitcast i8*%ag to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL22subtractByKeyElemEquiv_521 to void(...)*),void(...)**%ah,align 8
%ai=getelementptr inbounds i8,i8*%Z,i64 24
%aj=bitcast i8*%ai to i32*
store i32 -2147483647,i32*%aj,align 4
%ak=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%al=call fastcc i8*%H(i8*inreg%ak,i8*inreg%Z)
%am=getelementptr inbounds i8,i8*%al,i64 16
%an=bitcast i8*%am to i8*(i8*,i8*)**
%ao=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%an,align 8
%ap=bitcast i8*%al to i8**
%aq=load i8*,i8**%ap,align 8
store i8*%aq,i8**%f,align 8
%ar=load i8*,i8**%e,align 8
%as=getelementptr inbounds i8,i8*%ar,i64 16
%at=bitcast i8*%as to i8**
%au=load i8*,i8**%at,align 8
%av=getelementptr inbounds i8,i8*%ar,i64 24
%aw=bitcast i8*%av to i32*
%ax=load i32,i32*%aw,align 4
%ay=getelementptr inbounds i8,i8*%ar,i64 28
%az=bitcast i8*%ay to i32*
%aA=load i32,i32*%az,align 4
%aB=call fastcc i8*@_SMLL10difference_516(i8*inreg%au,i32 inreg%ax,i32 inreg%aA)
%aC=getelementptr inbounds i8,i8*%aB,i64 16
%aD=bitcast i8*%aC to i8*(i8*,i8*)**
%aE=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aD,align 8
%aF=bitcast i8*%aB to i8**
%aG=load i8*,i8**%aF,align 8
%aH=bitcast i8**%e to i8***
%aI=load i8**,i8***%aH,align 8
store i8*null,i8**%e,align 8
%aJ=load i8*,i8**%aI,align 8
%aK=call fastcc i8*%aE(i8*inreg%aG,i8*inreg%aJ)
%aL=getelementptr inbounds i8,i8*%aK,i64 16
%aM=bitcast i8*%aL to i8*(i8*,i8*)**
%aN=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aM,align 8
%aO=bitcast i8*%aK to i8**
%aP=load i8*,i8**%aO,align 8
store i8*%aP,i8**%e,align 8
%aQ=call i8*@sml_alloc(i32 inreg 20)#0
%aR=getelementptr inbounds i8,i8*%aQ,i64 -4
%aS=bitcast i8*%aR to i32*
store i32 1342177296,i32*%aS,align 4
%aT=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aU=bitcast i8*%aQ to i8**
store i8*%aT,i8**%aU,align 8
%aV=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aW=getelementptr inbounds i8,i8*%aQ,i64 8
%aX=bitcast i8*%aW to i8**
store i8*%aV,i8**%aX,align 8
%aY=getelementptr inbounds i8,i8*%aQ,i64 16
%aZ=bitcast i8*%aY to i32*
store i32 3,i32*%aZ,align 4
%a0=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%a1=call fastcc i8*%aN(i8*inreg%a0,i8*inreg%aQ)
%a2=load i8*,i8**%f,align 8
%a3=tail call fastcc i8*%ao(i8*inreg%a2,i8*inreg%a1)
ret i8*%a3
}
define internal fastcc i8*@_SMLL22subtractByKeyElemEquiv_523(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=getelementptr inbounds i8,i8*%a,i64 16
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%a,i64 20
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=call i8*@sml_alloc(i32 inreg 36)#0
%s=getelementptr inbounds i8,i8*%r,i64 -4
%t=bitcast i8*%s to i32*
store i32 1342177312,i32*%t,align 4
store i8*%r,i8**%f,align 8
%u=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%v=bitcast i8*%r to i8**
store i8*%u,i8**%v,align 8
%w=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%x=getelementptr inbounds i8,i8*%r,i64 8
%y=bitcast i8*%x to i8**
store i8*%w,i8**%y,align 8
%z=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%A=getelementptr inbounds i8,i8*%r,i64 16
%B=bitcast i8*%A to i8**
store i8*%z,i8**%B,align 8
%C=getelementptr inbounds i8,i8*%r,i64 24
%D=bitcast i8*%C to i32*
store i32%n,i32*%D,align 4
%E=getelementptr inbounds i8,i8*%r,i64 28
%F=bitcast i8*%E to i32*
store i32%q,i32*%F,align 4
%G=getelementptr inbounds i8,i8*%r,i64 32
%H=bitcast i8*%G to i32*
store i32 7,i32*%H,align 4
%I=call i8*@sml_alloc(i32 inreg 28)#0
%J=getelementptr inbounds i8,i8*%I,i64 -4
%K=bitcast i8*%J to i32*
store i32 1342177304,i32*%K,align 4
%L=load i8*,i8**%f,align 8
%M=bitcast i8*%I to i8**
store i8*%L,i8**%M,align 8
%N=getelementptr inbounds i8,i8*%I,i64 8
%O=bitcast i8*%N to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL22subtractByKeyElemEquiv_522 to void(...)*),void(...)**%O,align 8
%P=getelementptr inbounds i8,i8*%I,i64 16
%Q=bitcast i8*%P to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL22subtractByKeyElemEquiv_522 to void(...)*),void(...)**%Q,align 8
%R=getelementptr inbounds i8,i8*%I,i64 24
%S=bitcast i8*%R to i32*
store i32 -2147483647,i32*%S,align 4
ret i8*%I
}
define internal fastcc i8*@_SMLL22subtractByKeyElemEquiv_524(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
store i8*%l,i8**%f,align 8
%o=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%r=getelementptr inbounds i8,i8*%l,i64 8
%s=bitcast i8*%r to i8**
store i8*%q,i8**%s,align 8
%t=getelementptr inbounds i8,i8*%l,i64 16
%u=bitcast i8*%t to i32*
store i32%b,i32*%u,align 4
%v=getelementptr inbounds i8,i8*%l,i64 20
%w=bitcast i8*%v to i32*
store i32%c,i32*%w,align 4
%x=getelementptr inbounds i8,i8*%l,i64 24
%y=bitcast i8*%x to i32*
store i32 3,i32*%y,align 4
%z=call i8*@sml_alloc(i32 inreg 28)#0
%A=getelementptr inbounds i8,i8*%z,i64 -4
%B=bitcast i8*%A to i32*
store i32 1342177304,i32*%B,align 4
%C=load i8*,i8**%f,align 8
%D=bitcast i8*%z to i8**
store i8*%C,i8**%D,align 8
%E=getelementptr inbounds i8,i8*%z,i64 8
%F=bitcast i8*%E to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL22subtractByKeyElemEquiv_523 to void(...)*),void(...)**%F,align 8
%G=getelementptr inbounds i8,i8*%z,i64 16
%H=bitcast i8*%G to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL22subtractByKeyElemEquiv_523 to void(...)*),void(...)**%H,align 8
%I=getelementptr inbounds i8,i8*%z,i64 24
%J=bitcast i8*%I to i32*
store i32 -2147483647,i32*%J,align 4
ret i8*%z
}
define internal fastcc i32@_SMLL2eq_525(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
m:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%k,label%h
h:
call void@sml_check(i32 inreg%f)
%i=load i8*,i8**%c,align 8
%j=load i8*,i8**%e,align 8
br label%k
k:
%l=phi i8*[%j,%h],[%a,%m]
%n=phi i8*[%i,%h],[%b,%m]
%o=bitcast i8*%n to i8**
%p=load i8*,i8**%o,align 8
store i8*%p,i8**%c,align 8
%q=getelementptr inbounds i8,i8*%n,i64 8
%r=bitcast i8*%q to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%d,align 8
%t=getelementptr inbounds i8,i8*%l,i64 8
%u=bitcast i8*%t to i8**
%v=load i8*,i8**%u,align 8
%w=getelementptr inbounds i8,i8*%l,i64 16
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=getelementptr inbounds i8,i8*%l,i64 20
%A=bitcast i8*%z to i32*
%B=load i32,i32*%A,align 4
%C=call fastcc i8*@_SMLL10difference_516(i8*inreg%v,i32 inreg%y,i32 inreg%B)
%D=getelementptr inbounds i8,i8*%C,i64 16
%E=bitcast i8*%D to i8*(i8*,i8*)**
%F=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%E,align 8
%G=bitcast i8*%C to i8**
%H=load i8*,i8**%G,align 8
%I=bitcast i8**%e to i8***
%J=load i8**,i8***%I,align 8
store i8*null,i8**%e,align 8
%K=load i8*,i8**%J,align 8
%L=call fastcc i8*%F(i8*inreg%H,i8*inreg%K)
%M=getelementptr inbounds i8,i8*%L,i64 16
%N=bitcast i8*%M to i8*(i8*,i8*)**
%O=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%N,align 8
%P=bitcast i8*%L to i8**
%Q=load i8*,i8**%P,align 8
store i8*%Q,i8**%e,align 8
%R=call i8*@sml_alloc(i32 inreg 20)#0
%S=getelementptr inbounds i8,i8*%R,i64 -4
%T=bitcast i8*%S to i32*
store i32 1342177296,i32*%T,align 4
%U=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%V=bitcast i8*%R to i8**
store i8*%U,i8**%V,align 8
%W=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%X=getelementptr inbounds i8,i8*%R,i64 8
%Y=bitcast i8*%X to i8**
store i8*%W,i8**%Y,align 8
%Z=getelementptr inbounds i8,i8*%R,i64 16
%aa=bitcast i8*%Z to i32*
store i32 3,i32*%aa,align 4
%ab=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%ac=call fastcc i8*%O(i8*inreg%ab,i8*inreg%R)
%ad=icmp eq i8*%ac,null
%ae=zext i1%ad to i32
ret i32%ae
}
define internal fastcc i8*@_SMLL2eq_526(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%b,i8**%c,align 8
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=getelementptr inbounds i8,i8*%a,i64 8
%i=bitcast i8*%h to i32*
%j=load i32,i32*%i,align 4
%k=getelementptr inbounds i8,i8*%a,i64 12
%l=bitcast i8*%k to i32*
%m=load i32,i32*%l,align 4
%n=call i8*@sml_alloc(i32 inreg 28)#0
%o=getelementptr inbounds i8,i8*%n,i64 -4
%p=bitcast i8*%o to i32*
store i32 1342177304,i32*%p,align 4
store i8*%n,i8**%e,align 8
%q=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%r=bitcast i8*%n to i8**
store i8*%q,i8**%r,align 8
%s=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%t=getelementptr inbounds i8,i8*%n,i64 8
%u=bitcast i8*%t to i8**
store i8*%s,i8**%u,align 8
%v=getelementptr inbounds i8,i8*%n,i64 16
%w=bitcast i8*%v to i32*
store i32%j,i32*%w,align 4
%x=getelementptr inbounds i8,i8*%n,i64 20
%y=bitcast i8*%x to i32*
store i32%m,i32*%y,align 4
%z=getelementptr inbounds i8,i8*%n,i64 24
%A=bitcast i8*%z to i32*
store i32 3,i32*%A,align 4
%B=call i8*@sml_alloc(i32 inreg 28)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177304,i32*%D,align 4
%E=load i8*,i8**%e,align 8
%F=bitcast i8*%B to i8**
store i8*%E,i8**%F,align 8
%G=getelementptr inbounds i8,i8*%B,i64 8
%H=bitcast i8*%G to void(...)**
store void(...)*bitcast(i32(i8*,i8*)*@_SMLL2eq_525 to void(...)*),void(...)**%H,align 8
%I=getelementptr inbounds i8,i8*%B,i64 16
%J=bitcast i8*%I to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL2eq_716 to void(...)*),void(...)**%J,align 8
%K=getelementptr inbounds i8,i8*%B,i64 24
%L=bitcast i8*%K to i32*
store i32 -2147483647,i32*%L,align 4
ret i8*%B
}
define internal fastcc i8*@_SMLL2eq_527(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL2eq_526 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL2eq_526 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN12BinaryMapFn25emptyE_528(i32 inreg%a,i32 inreg%b)#2 gc"smlsharp"{
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%f,label%e
e:
tail call void@sml_check(i32 inreg%c)
br label%f
f:
ret i8*null
}
define internal fastcc i32@_SMLLN12BinaryMapFn27isEmptyE_530(i8*inreg%a)#4 gc"smlsharp"{
%b=icmp eq i8*%a,null
%c=zext i1%b to i32
ret i32%c
}
define internal fastcc i8*@_SMLLN12BinaryMapFn27isEmptyE_532(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
ret i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@v,i64 0,i32 2)to i8*)
}
define internal fastcc i8*@_SMLLN12BinaryMapFn29singletonE_534(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLL9singleton_332(i8*inreg%m,i32 inreg%p,i32 inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
ret i8*%A
}
define internal fastcc i8*@_SMLLN12BinaryMapFn29singletonE_535(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn29singletonE_534 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn29singletonE_534 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN12BinaryMapFn26insertE_536(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLL6insert_334(i8*inreg%m,i32 inreg%p,i32 inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
ret i8*%A
}
define internal fastcc i8*@_SMLLN12BinaryMapFn26insertE_537(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn26insertE_536 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn26insertE_536 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN12BinaryMapFn27insert_GE_538(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLL7insert_G_336(i8*inreg%m,i32 inreg%p,i32 inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
ret i8*%A
}
define internal fastcc i8*@_SMLLN12BinaryMapFn27insert_GE_539(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn27insert_GE_538 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn27insert_GE_538 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN12BinaryMapFn210insertWithE_540(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=getelementptr inbounds i8,i8*%j,i64 8
%m=bitcast i8*%l to i8**
%n=load i8*,i8**%m,align 8
%o=getelementptr inbounds i8,i8*%j,i64 16
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=getelementptr inbounds i8,i8*%j,i64 20
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=call fastcc i8*@_SMLL10insertWith_338(i8*inreg%n,i32 inreg%q,i32 inreg%t)
%v=getelementptr inbounds i8,i8*%u,i64 16
%w=bitcast i8*%v to i8*(i8*,i8*,i8*)**
%x=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%w,align 8
%y=bitcast i8*%u to i8**
%z=load i8*,i8**%y,align 8
%A=bitcast i8**%d to i8***
%B=load i8**,i8***%A,align 8
%C=load i8*,i8**%B,align 8
%D=load i8*,i8**%c,align 8
%E=tail call fastcc i8*%x(i8*inreg%z,i8*inreg%C,i8*inreg%D)
ret i8*%E
}
define internal fastcc i8*@_SMLLN12BinaryMapFn210insertWithE_541(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%b,i8**%c,align 8
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=getelementptr inbounds i8,i8*%a,i64 8
%i=bitcast i8*%h to i32*
%j=load i32,i32*%i,align 4
%k=getelementptr inbounds i8,i8*%a,i64 12
%l=bitcast i8*%k to i32*
%m=load i32,i32*%l,align 4
%n=call i8*@sml_alloc(i32 inreg 28)#0
%o=getelementptr inbounds i8,i8*%n,i64 -4
%p=bitcast i8*%o to i32*
store i32 1342177304,i32*%p,align 4
store i8*%n,i8**%e,align 8
%q=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%r=bitcast i8*%n to i8**
store i8*%q,i8**%r,align 8
%s=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%t=getelementptr inbounds i8,i8*%n,i64 8
%u=bitcast i8*%t to i8**
store i8*%s,i8**%u,align 8
%v=getelementptr inbounds i8,i8*%n,i64 16
%w=bitcast i8*%v to i32*
store i32%j,i32*%w,align 4
%x=getelementptr inbounds i8,i8*%n,i64 20
%y=bitcast i8*%x to i32*
store i32%m,i32*%y,align 4
%z=getelementptr inbounds i8,i8*%n,i64 24
%A=bitcast i8*%z to i32*
store i32 3,i32*%A,align 4
%B=call i8*@sml_alloc(i32 inreg 28)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177304,i32*%D,align 4
%E=load i8*,i8**%e,align 8
%F=bitcast i8*%B to i8**
store i8*%E,i8**%F,align 8
%G=getelementptr inbounds i8,i8*%B,i64 8
%H=bitcast i8*%G to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn210insertWithE_540 to void(...)*),void(...)**%H,align 8
%I=getelementptr inbounds i8,i8*%B,i64 16
%J=bitcast i8*%I to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn210insertWithE_540 to void(...)*),void(...)**%J,align 8
%K=getelementptr inbounds i8,i8*%B,i64 24
%L=bitcast i8*%K to i32*
store i32 -2147483647,i32*%L,align 4
ret i8*%B
}
define internal fastcc i8*@_SMLLN12BinaryMapFn210insertWithE_542(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn210insertWithE_541 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn210insertWithE_541 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN12BinaryMapFn211insertWithiE_543(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=getelementptr inbounds i8,i8*%j,i64 8
%m=bitcast i8*%l to i8**
%n=load i8*,i8**%m,align 8
%o=getelementptr inbounds i8,i8*%j,i64 16
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=getelementptr inbounds i8,i8*%j,i64 20
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=call fastcc i8*@_SMLL11insertWithi_340(i8*inreg%n,i32 inreg%q,i32 inreg%t)
%v=getelementptr inbounds i8,i8*%u,i64 16
%w=bitcast i8*%v to i8*(i8*,i8*,i8*)**
%x=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%w,align 8
%y=bitcast i8*%u to i8**
%z=load i8*,i8**%y,align 8
%A=bitcast i8**%d to i8***
%B=load i8**,i8***%A,align 8
%C=load i8*,i8**%B,align 8
%D=load i8*,i8**%c,align 8
%E=tail call fastcc i8*%x(i8*inreg%z,i8*inreg%C,i8*inreg%D)
ret i8*%E
}
define internal fastcc i8*@_SMLLN12BinaryMapFn211insertWithiE_544(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%b,i8**%c,align 8
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=getelementptr inbounds i8,i8*%a,i64 8
%i=bitcast i8*%h to i32*
%j=load i32,i32*%i,align 4
%k=getelementptr inbounds i8,i8*%a,i64 12
%l=bitcast i8*%k to i32*
%m=load i32,i32*%l,align 4
%n=call i8*@sml_alloc(i32 inreg 28)#0
%o=getelementptr inbounds i8,i8*%n,i64 -4
%p=bitcast i8*%o to i32*
store i32 1342177304,i32*%p,align 4
store i8*%n,i8**%e,align 8
%q=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%r=bitcast i8*%n to i8**
store i8*%q,i8**%r,align 8
%s=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%t=getelementptr inbounds i8,i8*%n,i64 8
%u=bitcast i8*%t to i8**
store i8*%s,i8**%u,align 8
%v=getelementptr inbounds i8,i8*%n,i64 16
%w=bitcast i8*%v to i32*
store i32%j,i32*%w,align 4
%x=getelementptr inbounds i8,i8*%n,i64 20
%y=bitcast i8*%x to i32*
store i32%m,i32*%y,align 4
%z=getelementptr inbounds i8,i8*%n,i64 24
%A=bitcast i8*%z to i32*
store i32 3,i32*%A,align 4
%B=call i8*@sml_alloc(i32 inreg 28)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177304,i32*%D,align 4
%E=load i8*,i8**%e,align 8
%F=bitcast i8*%B to i8**
store i8*%E,i8**%F,align 8
%G=getelementptr inbounds i8,i8*%B,i64 8
%H=bitcast i8*%G to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn211insertWithiE_543 to void(...)*),void(...)**%H,align 8
%I=getelementptr inbounds i8,i8*%B,i64 16
%J=bitcast i8*%I to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn211insertWithiE_543 to void(...)*),void(...)**%J,align 8
%K=getelementptr inbounds i8,i8*%B,i64 24
%L=bitcast i8*%K to i32*
store i32 -2147483647,i32*%L,align 4
ret i8*%B
}
define internal fastcc i8*@_SMLLN12BinaryMapFn211insertWithiE_545(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn211insertWithiE_544 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn211insertWithiE_544 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN12BinaryMapFn212insertWithi2E_546(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=getelementptr inbounds i8,i8*%j,i64 8
%m=bitcast i8*%l to i8**
%n=load i8*,i8**%m,align 8
%o=getelementptr inbounds i8,i8*%j,i64 16
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=getelementptr inbounds i8,i8*%j,i64 20
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=call fastcc i8*@_SMLL12insertWithi2_342(i8*inreg%n,i32 inreg%q,i32 inreg%t)
%v=getelementptr inbounds i8,i8*%u,i64 16
%w=bitcast i8*%v to i8*(i8*,i8*,i8*)**
%x=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%w,align 8
%y=bitcast i8*%u to i8**
%z=load i8*,i8**%y,align 8
%A=bitcast i8**%d to i8***
%B=load i8**,i8***%A,align 8
%C=load i8*,i8**%B,align 8
%D=load i8*,i8**%c,align 8
%E=tail call fastcc i8*%x(i8*inreg%z,i8*inreg%C,i8*inreg%D)
ret i8*%E
}
define internal fastcc i8*@_SMLLN12BinaryMapFn212insertWithi2E_547(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%b,i8**%c,align 8
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=getelementptr inbounds i8,i8*%a,i64 8
%i=bitcast i8*%h to i32*
%j=load i32,i32*%i,align 4
%k=getelementptr inbounds i8,i8*%a,i64 12
%l=bitcast i8*%k to i32*
%m=load i32,i32*%l,align 4
%n=call i8*@sml_alloc(i32 inreg 28)#0
%o=getelementptr inbounds i8,i8*%n,i64 -4
%p=bitcast i8*%o to i32*
store i32 1342177304,i32*%p,align 4
store i8*%n,i8**%e,align 8
%q=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%r=bitcast i8*%n to i8**
store i8*%q,i8**%r,align 8
%s=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%t=getelementptr inbounds i8,i8*%n,i64 8
%u=bitcast i8*%t to i8**
store i8*%s,i8**%u,align 8
%v=getelementptr inbounds i8,i8*%n,i64 16
%w=bitcast i8*%v to i32*
store i32%j,i32*%w,align 4
%x=getelementptr inbounds i8,i8*%n,i64 20
%y=bitcast i8*%x to i32*
store i32%m,i32*%y,align 4
%z=getelementptr inbounds i8,i8*%n,i64 24
%A=bitcast i8*%z to i32*
store i32 3,i32*%A,align 4
%B=call i8*@sml_alloc(i32 inreg 28)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177304,i32*%D,align 4
%E=load i8*,i8**%e,align 8
%F=bitcast i8*%B to i8**
store i8*%E,i8**%F,align 8
%G=getelementptr inbounds i8,i8*%B,i64 8
%H=bitcast i8*%G to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn212insertWithi2E_546 to void(...)*),void(...)**%H,align 8
%I=getelementptr inbounds i8,i8*%B,i64 16
%J=bitcast i8*%I to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn212insertWithi2E_546 to void(...)*),void(...)**%J,align 8
%K=getelementptr inbounds i8,i8*%B,i64 24
%L=bitcast i8*%K to i32*
store i32 -2147483647,i32*%L,align 4
ret i8*%B
}
define internal fastcc i8*@_SMLLN12BinaryMapFn212insertWithi2E_548(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn212insertWithi2E_547 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn212insertWithi2E_547 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN12BinaryMapFn24findE_549(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLL4find_352(i8*inreg%m,i32 inreg%p,i32 inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
ret i8*%A
}
define internal fastcc i8*@_SMLLN12BinaryMapFn24findE_550(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn24findE_549 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn24findE_549 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN12BinaryMapFn25findiE_551(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLL5findi_357(i8*inreg%m,i32 inreg%p,i32 inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
ret i8*%A
}
define internal fastcc i8*@_SMLLN12BinaryMapFn25findiE_552(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn25findiE_551 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn25findiE_551 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN12BinaryMapFn26lookupE_553(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLL6lookup_363(i8*inreg%m,i32 inreg%p,i32 inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
ret i8*%A
}
define internal fastcc i8*@_SMLLN12BinaryMapFn26lookupE_554(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn26lookupE_553 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn26lookupE_553 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 1,i32*%C,align 4
ret i8*%s
}
define internal fastcc i32@_SMLLN12BinaryMapFn28inDomainE_555(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLL8inDomain_347(i8*inreg%m,i32 inreg%p,i32 inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
ret i32%C
}
define internal fastcc i8*@_SMLLN12BinaryMapFn28inDomainE_556(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i32(i8*,i8*)*@_SMLLN12BinaryMapFn28inDomainE_555 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn28inDomainE_730 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN12BinaryMapFn26removeE_557(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLL6remove_366(i8*inreg%m,i32 inreg%p,i32 inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
ret i8*%A
}
define internal fastcc i8*@_SMLLN12BinaryMapFn26removeE_558(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn26removeE_557 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn26removeE_557 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN12BinaryMapFn27removeiE_559(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLL7removei_369(i8*inreg%m,i32 inreg%p,i32 inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
ret i8*%A
}
define internal fastcc i8*@_SMLLN12BinaryMapFn27removeiE_560(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn27removeiE_559 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn27removeiE_559 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN12BinaryMapFn25firstE_561(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLL5first_300(i8*inreg%m,i32 inreg%p,i32 inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
ret i8*%A
}
define internal fastcc i8*@_SMLLN12BinaryMapFn25firstE_562(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn25firstE_561 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn25firstE_561 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN12BinaryMapFn26firstiE_563(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLL6firsti_302(i8*inreg%m,i32 inreg%p,i32 inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
ret i8*%A
}
define internal fastcc i8*@_SMLLN12BinaryMapFn26firstiE_564(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn26firstiE_563 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn26firstiE_563 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i32@_SMLLN12BinaryMapFn28numItemsE_565(i8*inreg%a)#4 gc"smlsharp"{
h:
%b=icmp eq i8*%a,null
br i1%b,label%f,label%c
c:
%d=bitcast i8*%a to i32*
%e=load i32,i32*%d,align 4
br label%f
f:
%g=phi i32[%e,%c],[0,%h]
ret i32%g
}
define internal fastcc i8*@_SMLLN12BinaryMapFn28numItemsE_567(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
ret i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@x,i64 0,i32 2)to i8*)
}
define internal fastcc i8*@_SMLLN12BinaryMapFn29listItemsE_569(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLL9listItems_373(i8*inreg%m,i32 inreg%p,i32 inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
ret i8*%A
}
define internal fastcc i8*@_SMLLN12BinaryMapFn29listItemsE_570(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn29listItemsE_569 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn29listItemsE_569 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN12BinaryMapFn210listItemsiE_571(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLL10listItemsi_377(i8*inreg%m,i32 inreg%p,i32 inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
ret i8*%A
}
define internal fastcc i8*@_SMLLN12BinaryMapFn210listItemsiE_572(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn210listItemsiE_571 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn210listItemsiE_571 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN12BinaryMapFn28listKeysE_573(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLL8listKeys_381(i8*inreg%m,i32 inreg%p,i32 inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
ret i8*%A
}
define internal fastcc i8*@_SMLLN12BinaryMapFn28listKeysE_574(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn28listKeysE_573 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn28listKeysE_573 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN12BinaryMapFn27collateE_575(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLL7collate_390(i8*inreg%m,i32 inreg%p,i32 inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
ret i8*%A
}
define internal fastcc i8*@_SMLLN12BinaryMapFn27collateE_576(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn27collateE_575 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn27collateE_575 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN12BinaryMapFn29unionWithE_577(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLL9unionWith_433(i8*inreg%m,i32 inreg%p,i32 inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
ret i8*%A
}
define internal fastcc i8*@_SMLLN12BinaryMapFn29unionWithE_578(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn29unionWithE_577 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn29unionWithE_577 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN12BinaryMapFn210unionWithiE_579(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLL10unionWithi_440(i8*inreg%m,i32 inreg%p,i32 inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
ret i8*%A
}
define internal fastcc i8*@_SMLLN12BinaryMapFn210unionWithiE_580(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn210unionWithiE_579 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn210unionWithiE_579 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN12BinaryMapFn211unionWithi2E_581(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLL11unionWithi2_447(i8*inreg%m,i32 inreg%p,i32 inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
ret i8*%A
}
define internal fastcc i8*@_SMLLN12BinaryMapFn211unionWithi2E_582(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn211unionWithi2E_581 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn211unionWithi2E_581 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN12BinaryMapFn211unionWithi3E_583(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLL11unionWithi3_454(i8*inreg%m,i32 inreg%p,i32 inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
ret i8*%A
}
define internal fastcc i8*@_SMLLN12BinaryMapFn211unionWithi3E_584(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn211unionWithi3E_583 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn211unionWithi3E_583 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN12BinaryMapFn213intersectWithE_585(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=getelementptr inbounds i8,i8*%j,i64 16
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=getelementptr inbounds i8,i8*%j,i64 20
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=getelementptr inbounds i8,i8*%j,i64 24
%A=bitcast i8*%z to i32*
%B=load i32,i32*%A,align 4
store i8*null,i8**%d,align 8
%C=getelementptr inbounds i8,i8*%j,i64 28
%D=bitcast i8*%C to i32*
%E=load i32,i32*%D,align 4
%F=call fastcc i8*@_SMLL13intersectWith_462(i8*inreg%m,i32 inreg%p,i32 inreg%s,i32 inreg%v,i32 inreg%y,i32 inreg%B,i32 inreg%E)
%G=getelementptr inbounds i8,i8*%F,i64 16
%H=bitcast i8*%G to i8*(i8*,i8*)**
%I=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%H,align 8
%J=bitcast i8*%F to i8**
%K=load i8*,i8**%J,align 8
%L=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%M=call fastcc i8*%I(i8*inreg%K,i8*inreg%L)
ret i8*%M
}
define internal fastcc i8*@_SMLLN12BinaryMapFn213intersectWithE_586(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e,i32 inreg%f,i32 inreg%g)#4 gc"smlsharp"{
%h=alloca i8*,align 8
%i=alloca i8*,align 8
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
%j=bitcast i8*%a to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%h,align 8
%l=call i8*@sml_alloc(i32 inreg 36)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177312,i32*%n,align 4
store i8*%l,i8**%i,align 8
%o=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to i32*
store i32%b,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%l,i64 12
%t=bitcast i8*%s to i32*
store i32%c,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%l,i64 16
%v=bitcast i8*%u to i32*
store i32%d,i32*%v,align 4
%w=getelementptr inbounds i8,i8*%l,i64 20
%x=bitcast i8*%w to i32*
store i32%e,i32*%x,align 4
%y=getelementptr inbounds i8,i8*%l,i64 24
%z=bitcast i8*%y to i32*
store i32%f,i32*%z,align 4
%A=getelementptr inbounds i8,i8*%l,i64 28
%B=bitcast i8*%A to i32*
store i32%g,i32*%B,align 4
%C=getelementptr inbounds i8,i8*%l,i64 32
%D=bitcast i8*%C to i32*
store i32 1,i32*%D,align 4
%E=call i8*@sml_alloc(i32 inreg 28)#0
%F=getelementptr inbounds i8,i8*%E,i64 -4
%G=bitcast i8*%F to i32*
store i32 1342177304,i32*%G,align 4
%H=load i8*,i8**%i,align 8
%I=bitcast i8*%E to i8**
store i8*%H,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%E,i64 8
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn213intersectWithE_585 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%E,i64 16
%M=bitcast i8*%L to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn213intersectWithE_585 to void(...)*),void(...)**%M,align 8
%N=getelementptr inbounds i8,i8*%E,i64 24
%O=bitcast i8*%N to i32*
store i32 -2147483647,i32*%O,align 4
ret i8*%E
}
define internal fastcc i8*@_SMLLN12BinaryMapFn214intersectWithiE_587(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=getelementptr inbounds i8,i8*%j,i64 16
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=getelementptr inbounds i8,i8*%j,i64 20
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=getelementptr inbounds i8,i8*%j,i64 24
%A=bitcast i8*%z to i32*
%B=load i32,i32*%A,align 4
store i8*null,i8**%d,align 8
%C=getelementptr inbounds i8,i8*%j,i64 28
%D=bitcast i8*%C to i32*
%E=load i32,i32*%D,align 4
%F=call fastcc i8*@_SMLL14intersectWithi_470(i8*inreg%m,i32 inreg%p,i32 inreg%s,i32 inreg%v,i32 inreg%y,i32 inreg%B,i32 inreg%E)
%G=getelementptr inbounds i8,i8*%F,i64 16
%H=bitcast i8*%G to i8*(i8*,i8*)**
%I=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%H,align 8
%J=bitcast i8*%F to i8**
%K=load i8*,i8**%J,align 8
%L=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%M=call fastcc i8*%I(i8*inreg%K,i8*inreg%L)
ret i8*%M
}
define internal fastcc i8*@_SMLLN12BinaryMapFn214intersectWithiE_588(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e,i32 inreg%f,i32 inreg%g)#4 gc"smlsharp"{
%h=alloca i8*,align 8
%i=alloca i8*,align 8
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
%j=bitcast i8*%a to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%h,align 8
%l=call i8*@sml_alloc(i32 inreg 36)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177312,i32*%n,align 4
store i8*%l,i8**%i,align 8
%o=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to i32*
store i32%b,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%l,i64 12
%t=bitcast i8*%s to i32*
store i32%c,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%l,i64 16
%v=bitcast i8*%u to i32*
store i32%d,i32*%v,align 4
%w=getelementptr inbounds i8,i8*%l,i64 20
%x=bitcast i8*%w to i32*
store i32%e,i32*%x,align 4
%y=getelementptr inbounds i8,i8*%l,i64 24
%z=bitcast i8*%y to i32*
store i32%f,i32*%z,align 4
%A=getelementptr inbounds i8,i8*%l,i64 28
%B=bitcast i8*%A to i32*
store i32%g,i32*%B,align 4
%C=getelementptr inbounds i8,i8*%l,i64 32
%D=bitcast i8*%C to i32*
store i32 1,i32*%D,align 4
%E=call i8*@sml_alloc(i32 inreg 28)#0
%F=getelementptr inbounds i8,i8*%E,i64 -4
%G=bitcast i8*%F to i32*
store i32 1342177304,i32*%G,align 4
%H=load i8*,i8**%i,align 8
%I=bitcast i8*%E to i8**
store i8*%H,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%E,i64 8
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn214intersectWithiE_587 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%E,i64 16
%M=bitcast i8*%L to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn214intersectWithiE_587 to void(...)*),void(...)**%M,align 8
%N=getelementptr inbounds i8,i8*%E,i64 24
%O=bitcast i8*%N to i32*
store i32 -2147483647,i32*%O,align 4
ret i8*%E
}
define internal fastcc i8*@_SMLLN12BinaryMapFn215intersectWithi2E_589(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=getelementptr inbounds i8,i8*%j,i64 16
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=getelementptr inbounds i8,i8*%j,i64 20
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=getelementptr inbounds i8,i8*%j,i64 24
%A=bitcast i8*%z to i32*
%B=load i32,i32*%A,align 4
store i8*null,i8**%d,align 8
%C=getelementptr inbounds i8,i8*%j,i64 28
%D=bitcast i8*%C to i32*
%E=load i32,i32*%D,align 4
%F=call fastcc i8*@_SMLL15intersectWithi2_478(i8*inreg%m,i32 inreg%p,i32 inreg%s,i32 inreg%v,i32 inreg%y,i32 inreg%B,i32 inreg%E)
%G=getelementptr inbounds i8,i8*%F,i64 16
%H=bitcast i8*%G to i8*(i8*,i8*)**
%I=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%H,align 8
%J=bitcast i8*%F to i8**
%K=load i8*,i8**%J,align 8
%L=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%M=call fastcc i8*%I(i8*inreg%K,i8*inreg%L)
ret i8*%M
}
define internal fastcc i8*@_SMLLN12BinaryMapFn215intersectWithi2E_590(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e,i32 inreg%f,i32 inreg%g)#4 gc"smlsharp"{
%h=alloca i8*,align 8
%i=alloca i8*,align 8
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
%j=bitcast i8*%a to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%h,align 8
%l=call i8*@sml_alloc(i32 inreg 36)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177312,i32*%n,align 4
store i8*%l,i8**%i,align 8
%o=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to i32*
store i32%b,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%l,i64 12
%t=bitcast i8*%s to i32*
store i32%c,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%l,i64 16
%v=bitcast i8*%u to i32*
store i32%d,i32*%v,align 4
%w=getelementptr inbounds i8,i8*%l,i64 20
%x=bitcast i8*%w to i32*
store i32%e,i32*%x,align 4
%y=getelementptr inbounds i8,i8*%l,i64 24
%z=bitcast i8*%y to i32*
store i32%f,i32*%z,align 4
%A=getelementptr inbounds i8,i8*%l,i64 28
%B=bitcast i8*%A to i32*
store i32%g,i32*%B,align 4
%C=getelementptr inbounds i8,i8*%l,i64 32
%D=bitcast i8*%C to i32*
store i32 1,i32*%D,align 4
%E=call i8*@sml_alloc(i32 inreg 28)#0
%F=getelementptr inbounds i8,i8*%E,i64 -4
%G=bitcast i8*%F to i32*
store i32 1342177304,i32*%G,align 4
%H=load i8*,i8**%i,align 8
%I=bitcast i8*%E to i8**
store i8*%H,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%E,i64 8
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn215intersectWithi2E_589 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%E,i64 16
%M=bitcast i8*%L to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn215intersectWithi2E_589 to void(...)*),void(...)**%M,align 8
%N=getelementptr inbounds i8,i8*%E,i64 24
%O=bitcast i8*%N to i32*
store i32 -2147483647,i32*%O,align 4
ret i8*%E
}
define internal fastcc i8*@_SMLLN12BinaryMapFn29mergeWithE_591(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=getelementptr inbounds i8,i8*%j,i64 16
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=getelementptr inbounds i8,i8*%j,i64 20
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=getelementptr inbounds i8,i8*%j,i64 24
%A=bitcast i8*%z to i32*
%B=load i32,i32*%A,align 4
store i8*null,i8**%d,align 8
%C=getelementptr inbounds i8,i8*%j,i64 28
%D=bitcast i8*%C to i32*
%E=load i32,i32*%D,align 4
%F=call fastcc i8*@_SMLL9mergeWith_484(i8*inreg%m,i32 inreg%p,i32 inreg%s,i32 inreg%v,i32 inreg%y,i32 inreg%B,i32 inreg%E)
%G=getelementptr inbounds i8,i8*%F,i64 16
%H=bitcast i8*%G to i8*(i8*,i8*)**
%I=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%H,align 8
%J=bitcast i8*%F to i8**
%K=load i8*,i8**%J,align 8
%L=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%M=call fastcc i8*%I(i8*inreg%K,i8*inreg%L)
ret i8*%M
}
define internal fastcc i8*@_SMLLN12BinaryMapFn29mergeWithE_592(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e,i32 inreg%f,i32 inreg%g)#4 gc"smlsharp"{
%h=alloca i8*,align 8
%i=alloca i8*,align 8
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
%j=bitcast i8*%a to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%h,align 8
%l=call i8*@sml_alloc(i32 inreg 36)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177312,i32*%n,align 4
store i8*%l,i8**%i,align 8
%o=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to i32*
store i32%b,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%l,i64 12
%t=bitcast i8*%s to i32*
store i32%c,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%l,i64 16
%v=bitcast i8*%u to i32*
store i32%d,i32*%v,align 4
%w=getelementptr inbounds i8,i8*%l,i64 20
%x=bitcast i8*%w to i32*
store i32%e,i32*%x,align 4
%y=getelementptr inbounds i8,i8*%l,i64 24
%z=bitcast i8*%y to i32*
store i32%f,i32*%z,align 4
%A=getelementptr inbounds i8,i8*%l,i64 28
%B=bitcast i8*%A to i32*
store i32%g,i32*%B,align 4
%C=getelementptr inbounds i8,i8*%l,i64 32
%D=bitcast i8*%C to i32*
store i32 1,i32*%D,align 4
%E=call i8*@sml_alloc(i32 inreg 28)#0
%F=getelementptr inbounds i8,i8*%E,i64 -4
%G=bitcast i8*%F to i32*
store i32 1342177304,i32*%G,align 4
%H=load i8*,i8**%i,align 8
%I=bitcast i8*%E to i8**
store i8*%H,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%E,i64 8
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn29mergeWithE_591 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%E,i64 16
%M=bitcast i8*%L to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn29mergeWithE_591 to void(...)*),void(...)**%M,align 8
%N=getelementptr inbounds i8,i8*%E,i64 24
%O=bitcast i8*%N to i32*
store i32 -2147483647,i32*%O,align 4
ret i8*%E
}
define internal fastcc i8*@_SMLLN12BinaryMapFn210mergeWithiE_593(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=getelementptr inbounds i8,i8*%j,i64 16
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=getelementptr inbounds i8,i8*%j,i64 20
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=getelementptr inbounds i8,i8*%j,i64 24
%A=bitcast i8*%z to i32*
%B=load i32,i32*%A,align 4
store i8*null,i8**%d,align 8
%C=getelementptr inbounds i8,i8*%j,i64 28
%D=bitcast i8*%C to i32*
%E=load i32,i32*%D,align 4
%F=call fastcc i8*@_SMLL10mergeWithi_490(i8*inreg%m,i32 inreg%p,i32 inreg%s,i32 inreg%v,i32 inreg%y,i32 inreg%B,i32 inreg%E)
%G=getelementptr inbounds i8,i8*%F,i64 16
%H=bitcast i8*%G to i8*(i8*,i8*)**
%I=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%H,align 8
%J=bitcast i8*%F to i8**
%K=load i8*,i8**%J,align 8
%L=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%M=call fastcc i8*%I(i8*inreg%K,i8*inreg%L)
ret i8*%M
}
define internal fastcc i8*@_SMLLN12BinaryMapFn210mergeWithiE_594(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e,i32 inreg%f,i32 inreg%g)#4 gc"smlsharp"{
%h=alloca i8*,align 8
%i=alloca i8*,align 8
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
%j=bitcast i8*%a to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%h,align 8
%l=call i8*@sml_alloc(i32 inreg 36)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177312,i32*%n,align 4
store i8*%l,i8**%i,align 8
%o=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to i32*
store i32%b,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%l,i64 12
%t=bitcast i8*%s to i32*
store i32%c,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%l,i64 16
%v=bitcast i8*%u to i32*
store i32%d,i32*%v,align 4
%w=getelementptr inbounds i8,i8*%l,i64 20
%x=bitcast i8*%w to i32*
store i32%e,i32*%x,align 4
%y=getelementptr inbounds i8,i8*%l,i64 24
%z=bitcast i8*%y to i32*
store i32%f,i32*%z,align 4
%A=getelementptr inbounds i8,i8*%l,i64 28
%B=bitcast i8*%A to i32*
store i32%g,i32*%B,align 4
%C=getelementptr inbounds i8,i8*%l,i64 32
%D=bitcast i8*%C to i32*
store i32 1,i32*%D,align 4
%E=call i8*@sml_alloc(i32 inreg 28)#0
%F=getelementptr inbounds i8,i8*%E,i64 -4
%G=bitcast i8*%F to i32*
store i32 1342177304,i32*%G,align 4
%H=load i8*,i8**%i,align 8
%I=bitcast i8*%E to i8**
store i8*%H,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%E,i64 8
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn210mergeWithiE_593 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%E,i64 16
%M=bitcast i8*%L to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn210mergeWithiE_593 to void(...)*),void(...)**%M,align 8
%N=getelementptr inbounds i8,i8*%E,i64 24
%O=bitcast i8*%N to i32*
store i32 -2147483647,i32*%O,align 4
ret i8*%E
}
define internal fastcc i8*@_SMLLN12BinaryMapFn211mergeWithi2E_595(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=getelementptr inbounds i8,i8*%j,i64 16
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=getelementptr inbounds i8,i8*%j,i64 20
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=getelementptr inbounds i8,i8*%j,i64 24
%A=bitcast i8*%z to i32*
%B=load i32,i32*%A,align 4
store i8*null,i8**%d,align 8
%C=getelementptr inbounds i8,i8*%j,i64 28
%D=bitcast i8*%C to i32*
%E=load i32,i32*%D,align 4
%F=call fastcc i8*@_SMLL11mergeWithi2_496(i8*inreg%m,i32 inreg%p,i32 inreg%s,i32 inreg%v,i32 inreg%y,i32 inreg%B,i32 inreg%E)
%G=getelementptr inbounds i8,i8*%F,i64 16
%H=bitcast i8*%G to i8*(i8*,i8*)**
%I=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%H,align 8
%J=bitcast i8*%F to i8**
%K=load i8*,i8**%J,align 8
%L=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%M=call fastcc i8*%I(i8*inreg%K,i8*inreg%L)
ret i8*%M
}
define internal fastcc i8*@_SMLLN12BinaryMapFn211mergeWithi2E_596(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e,i32 inreg%f,i32 inreg%g)#4 gc"smlsharp"{
%h=alloca i8*,align 8
%i=alloca i8*,align 8
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
%j=bitcast i8*%a to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%h,align 8
%l=call i8*@sml_alloc(i32 inreg 36)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177312,i32*%n,align 4
store i8*%l,i8**%i,align 8
%o=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to i32*
store i32%b,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%l,i64 12
%t=bitcast i8*%s to i32*
store i32%c,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%l,i64 16
%v=bitcast i8*%u to i32*
store i32%d,i32*%v,align 4
%w=getelementptr inbounds i8,i8*%l,i64 20
%x=bitcast i8*%w to i32*
store i32%e,i32*%x,align 4
%y=getelementptr inbounds i8,i8*%l,i64 24
%z=bitcast i8*%y to i32*
store i32%f,i32*%z,align 4
%A=getelementptr inbounds i8,i8*%l,i64 28
%B=bitcast i8*%A to i32*
store i32%g,i32*%B,align 4
%C=getelementptr inbounds i8,i8*%l,i64 32
%D=bitcast i8*%C to i32*
store i32 1,i32*%D,align 4
%E=call i8*@sml_alloc(i32 inreg 28)#0
%F=getelementptr inbounds i8,i8*%E,i64 -4
%G=bitcast i8*%F to i32*
store i32 1342177304,i32*%G,align 4
%H=load i8*,i8**%i,align 8
%I=bitcast i8*%E to i8**
store i8*%H,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%E,i64 8
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn211mergeWithi2E_595 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%E,i64 16
%M=bitcast i8*%L to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn211mergeWithi2E_595 to void(...)*),void(...)**%M,align 8
%N=getelementptr inbounds i8,i8*%E,i64 24
%O=bitcast i8*%N to i32*
store i32 -2147483647,i32*%O,align 4
ret i8*%E
}
define internal fastcc i8*@_SMLLN12BinaryMapFn23appE_597(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLL3app_398(i8*inreg%m,i32 inreg%p,i32 inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
ret i8*%A
}
define internal fastcc i8*@_SMLLN12BinaryMapFn23appE_598(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn23appE_597 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn23appE_597 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN12BinaryMapFn24appiE_599(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLL4appi_394(i8*inreg%m,i32 inreg%p,i32 inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
ret i8*%A
}
define internal fastcc i8*@_SMLLN12BinaryMapFn24appiE_600(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn24appiE_599 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn24appiE_599 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN12BinaryMapFn23mapE_601(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
l:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%j,label%h
h:
call void@sml_check(i32 inreg%f)
%i=load i8*,i8**%d,align 8
br label%j
j:
%k=phi i8*[%i,%h],[%a,%l]
%m=getelementptr inbounds i8,i8*%k,i64 8
%n=bitcast i8*%m to i32*
%o=load i32,i32*%n,align 4
%p=add i32%o,-1
%q=sub i32 0,%o
%r=and i32%p,%q
%s=getelementptr inbounds i8,i8*%k,i64 16
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=add i32%p,%u
%w=add i32%v,%r
%x=sub i32 0,%u
%y=and i32%w,%x
%z=bitcast i8*%k to i8**
%A=load i8*,i8**%z,align 8
%B=getelementptr inbounds i8,i8*%A,i64 16
%C=bitcast i8*%B to i8*(i8*,i8*)**
%D=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%C,align 8
%E=bitcast i8*%A to i8**
%F=load i8*,i8**%E,align 8
store i8*%F,i8**%e,align 8
%G=getelementptr inbounds i8,i8*%k,i64 12
%H=bitcast i8*%G to i32*
%I=load i32,i32*%H,align 4
%J=icmp eq i32%I,0
br i1%J,label%Q,label%K
K:
%L=load i8*,i8**%c,align 8
%M=sext i32%y to i64
%N=getelementptr inbounds i8,i8*%L,i64%M
%O=bitcast i8*%N to i8**
%P=load i8*,i8**%O,align 8
br label%Y
Q:
store i8*null,i8**%d,align 8
%R=call i8*@sml_alloc(i32 inreg%u)#0
%S=getelementptr inbounds i8,i8*%R,i64 -4
%T=bitcast i8*%S to i32*
store i32%u,i32*%T,align 4
%U=load i8*,i8**%c,align 8
%V=sext i32%y to i64
%W=getelementptr inbounds i8,i8*%U,i64%V
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%R,i8*%W,i32%u,i1 false)
%X=load i8*,i8**%e,align 8
br label%Y
Y:
%Z=phi i8*[%F,%K],[%X,%Q]
%aa=phi i8*[%P,%K],[%R,%Q]
%ab=tail call fastcc i8*%D(i8*inreg%Z,i8*inreg%aa)
ret i8*%ab
}
define internal fastcc i8*@_SMLLN12BinaryMapFn23mapE_602(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
m:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%k,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%d,align 8
br label%k
k:
%l=phi i8*[%j,%i],[%a,%m]
%n=getelementptr inbounds i8,i8*%l,i64 8
%o=bitcast i8*%n to i8**
%p=load i8*,i8**%o,align 8
%q=getelementptr inbounds i8,i8*%l,i64 20
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=getelementptr inbounds i8,i8*%l,i64 24
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=getelementptr inbounds i8,i8*%l,i64 28
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=getelementptr inbounds i8,i8*%l,i64 32
%A=bitcast i8*%z to i32*
%B=load i32,i32*%A,align 4
%C=call fastcc i8*@_SMLL4mapi_402(i8*inreg%p,i32 inreg%s,i32 inreg%v,i32 inreg%y,i32 inreg%B)
%D=getelementptr inbounds i8,i8*%C,i64 16
%E=bitcast i8*%D to i8*(i8*,i8*)**
%F=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%E,align 8
%G=bitcast i8*%C to i8**
%H=load i8*,i8**%G,align 8
store i8*%H,i8**%f,align 8
%I=bitcast i8**%d to i8***
%J=load i8**,i8***%I,align 8
%K=load i8*,i8**%J,align 8
store i8*%K,i8**%e,align 8
%L=bitcast i8**%J to i8*
%M=getelementptr inbounds i8*,i8**%J,i64 2
%N=bitcast i8**%M to i32*
%O=load i32,i32*%N,align 4
%P=getelementptr inbounds i8,i8*%L,i64 20
%Q=bitcast i8*%P to i32*
%R=load i32,i32*%Q,align 4
store i8*null,i8**%d,align 8
%S=getelementptr inbounds i8*,i8**%J,i64 3
%T=bitcast i8**%S to i32*
%U=load i32,i32*%T,align 4
%V=call i8*@sml_alloc(i32 inreg 28)#0
%W=getelementptr inbounds i8,i8*%V,i64 -4
%X=bitcast i8*%W to i32*
store i32 1342177304,i32*%X,align 4
store i8*%V,i8**%d,align 8
%Y=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%Z=bitcast i8*%V to i8**
store i8*%Y,i8**%Z,align 8
%aa=getelementptr inbounds i8,i8*%V,i64 8
%ab=bitcast i8*%aa to i32*
store i32%O,i32*%ab,align 4
%ac=getelementptr inbounds i8,i8*%V,i64 12
%ad=bitcast i8*%ac to i32*
store i32%R,i32*%ad,align 4
%ae=getelementptr inbounds i8,i8*%V,i64 16
%af=bitcast i8*%ae to i32*
store i32%U,i32*%af,align 4
%ag=getelementptr inbounds i8,i8*%V,i64 24
%ah=bitcast i8*%ag to i32*
store i32 1,i32*%ah,align 4
%ai=call i8*@sml_alloc(i32 inreg 28)#0
%aj=getelementptr inbounds i8,i8*%ai,i64 -4
%ak=bitcast i8*%aj to i32*
store i32 1342177304,i32*%ak,align 4
%al=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%am=bitcast i8*%ai to i8**
store i8*%al,i8**%am,align 8
%an=getelementptr inbounds i8,i8*%ai,i64 8
%ao=bitcast i8*%an to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn23mapE_601 to void(...)*),void(...)**%ao,align 8
%ap=getelementptr inbounds i8,i8*%ai,i64 16
%aq=bitcast i8*%ap to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn23mapE_601 to void(...)*),void(...)**%aq,align 8
%ar=getelementptr inbounds i8,i8*%ai,i64 24
%as=bitcast i8*%ar to i32*
store i32 1,i32*%as,align 4
%at=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%au=call fastcc i8*%F(i8*inreg%at,i8*inreg%ai)
%av=getelementptr inbounds i8,i8*%au,i64 16
%aw=bitcast i8*%av to i8*(i8*,i8*)**
%ax=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aw,align 8
%ay=bitcast i8*%au to i8**
%az=load i8*,i8**%ay,align 8
%aA=load i8*,i8**%c,align 8
%aB=tail call fastcc i8*%ax(i8*inreg%az,i8*inreg%aA)
ret i8*%aB
}
define internal fastcc i8*@_SMLLN12BinaryMapFn23mapE_603(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%b,i8**%c,align 8
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=getelementptr inbounds i8,i8*%a,i64 8
%i=bitcast i8*%h to i32*
%j=load i32,i32*%i,align 4
%k=getelementptr inbounds i8,i8*%a,i64 12
%l=bitcast i8*%k to i32*
%m=load i32,i32*%l,align 4
%n=getelementptr inbounds i8,i8*%a,i64 16
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%a,i64 20
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=getelementptr inbounds i8,i8*%a,i64 24
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=call i8*@sml_alloc(i32 inreg 44)#0
%x=getelementptr inbounds i8,i8*%w,i64 -4
%y=bitcast i8*%x to i32*
store i32 1342177320,i32*%y,align 4
store i8*%w,i8**%e,align 8
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=bitcast i8*%w to i8**
store i8*%z,i8**%A,align 8
%B=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%C=getelementptr inbounds i8,i8*%w,i64 8
%D=bitcast i8*%C to i8**
store i8*%B,i8**%D,align 8
%E=getelementptr inbounds i8,i8*%w,i64 16
%F=bitcast i8*%E to i32*
store i32%j,i32*%F,align 4
%G=getelementptr inbounds i8,i8*%w,i64 20
%H=bitcast i8*%G to i32*
store i32%m,i32*%H,align 4
%I=getelementptr inbounds i8,i8*%w,i64 24
%J=bitcast i8*%I to i32*
store i32%p,i32*%J,align 4
%K=getelementptr inbounds i8,i8*%w,i64 28
%L=bitcast i8*%K to i32*
store i32%s,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%w,i64 32
%N=bitcast i8*%M to i32*
store i32%v,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%w,i64 40
%P=bitcast i8*%O to i32*
store i32 3,i32*%P,align 4
%Q=call i8*@sml_alloc(i32 inreg 28)#0
%R=getelementptr inbounds i8,i8*%Q,i64 -4
%S=bitcast i8*%R to i32*
store i32 1342177304,i32*%S,align 4
%T=load i8*,i8**%e,align 8
%U=bitcast i8*%Q to i8**
store i8*%T,i8**%U,align 8
%V=getelementptr inbounds i8,i8*%Q,i64 8
%W=bitcast i8*%V to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn23mapE_602 to void(...)*),void(...)**%W,align 8
%X=getelementptr inbounds i8,i8*%Q,i64 16
%Y=bitcast i8*%X to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn23mapE_602 to void(...)*),void(...)**%Y,align 8
%Z=getelementptr inbounds i8,i8*%Q,i64 24
%aa=bitcast i8*%Z to i32*
store i32 -2147483647,i32*%aa,align 4
ret i8*%Q
}
define internal fastcc i8*@_SMLLN12BinaryMapFn23mapE_604(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e)#4 gc"smlsharp"{
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%f,align 8
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i32*
%l=load i32,i32*%k,align 4
%m=call i8*@sml_alloc(i32 inreg 36)#0
%n=getelementptr inbounds i8,i8*%m,i64 -4
%o=bitcast i8*%n to i32*
store i32 1342177312,i32*%o,align 4
store i8*%m,i8**%g,align 8
%p=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%q=bitcast i8*%m to i8**
store i8*%p,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%m,i64 8
%s=bitcast i8*%r to i32*
store i32%l,i32*%s,align 4
%t=getelementptr inbounds i8,i8*%m,i64 12
%u=bitcast i8*%t to i32*
store i32%b,i32*%u,align 4
%v=getelementptr inbounds i8,i8*%m,i64 16
%w=bitcast i8*%v to i32*
store i32%c,i32*%w,align 4
%x=getelementptr inbounds i8,i8*%m,i64 20
%y=bitcast i8*%x to i32*
store i32%d,i32*%y,align 4
%z=getelementptr inbounds i8,i8*%m,i64 24
%A=bitcast i8*%z to i32*
store i32%e,i32*%A,align 4
%B=getelementptr inbounds i8,i8*%m,i64 32
%C=bitcast i8*%B to i32*
store i32 1,i32*%C,align 4
%D=call i8*@sml_alloc(i32 inreg 28)#0
%E=getelementptr inbounds i8,i8*%D,i64 -4
%F=bitcast i8*%E to i32*
store i32 1342177304,i32*%F,align 4
%G=load i8*,i8**%g,align 8
%H=bitcast i8*%D to i8**
store i8*%G,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%D,i64 8
%J=bitcast i8*%I to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn23mapE_603 to void(...)*),void(...)**%J,align 8
%K=getelementptr inbounds i8,i8*%D,i64 16
%L=bitcast i8*%K to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn23mapE_603 to void(...)*),void(...)**%L,align 8
%M=getelementptr inbounds i8,i8*%D,i64 24
%N=bitcast i8*%M to i32*
store i32 -2147483647,i32*%N,align 4
ret i8*%D
}
define internal fastcc i8*@_SMLLN12BinaryMapFn24mapiE_605(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=getelementptr inbounds i8,i8*%j,i64 16
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
store i8*null,i8**%d,align 8
%w=getelementptr inbounds i8,i8*%j,i64 20
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=call fastcc i8*@_SMLL4mapi_402(i8*inreg%m,i32 inreg%p,i32 inreg%s,i32 inreg%v,i32 inreg%y)
%A=getelementptr inbounds i8,i8*%z,i64 16
%B=bitcast i8*%A to i8*(i8*,i8*)**
%C=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%B,align 8
%D=bitcast i8*%z to i8**
%E=load i8*,i8**%D,align 8
%F=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%G=call fastcc i8*%C(i8*inreg%E,i8*inreg%F)
ret i8*%G
}
define internal fastcc i8*@_SMLLN12BinaryMapFn24mapiE_606(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e)#4 gc"smlsharp"{
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%f,align 8
%j=call i8*@sml_alloc(i32 inreg 28)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177304,i32*%l,align 4
store i8*%j,i8**%g,align 8
%m=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%b,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%c,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32%d,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%j,i64 20
%v=bitcast i8*%u to i32*
store i32%e,i32*%v,align 4
%w=getelementptr inbounds i8,i8*%j,i64 24
%x=bitcast i8*%w to i32*
store i32 1,i32*%x,align 4
%y=call i8*@sml_alloc(i32 inreg 28)#0
%z=getelementptr inbounds i8,i8*%y,i64 -4
%A=bitcast i8*%z to i32*
store i32 1342177304,i32*%A,align 4
%B=load i8*,i8**%g,align 8
%C=bitcast i8*%y to i8**
store i8*%B,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%y,i64 8
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn24mapiE_605 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%y,i64 16
%G=bitcast i8*%F to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn24mapiE_605 to void(...)*),void(...)**%G,align 8
%H=getelementptr inbounds i8,i8*%y,i64 24
%I=bitcast i8*%H to i32*
store i32 -2147483647,i32*%I,align 4
ret i8*%y
}
define internal fastcc i8*@_SMLLN12BinaryMapFn25mapi2E_607(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=getelementptr inbounds i8,i8*%j,i64 16
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
store i8*null,i8**%d,align 8
%w=getelementptr inbounds i8,i8*%j,i64 20
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=call fastcc i8*@_SMLL5mapi2_406(i8*inreg%m,i32 inreg%p,i32 inreg%s,i32 inreg%v,i32 inreg%y)
%A=getelementptr inbounds i8,i8*%z,i64 16
%B=bitcast i8*%A to i8*(i8*,i8*)**
%C=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%B,align 8
%D=bitcast i8*%z to i8**
%E=load i8*,i8**%D,align 8
%F=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%G=call fastcc i8*%C(i8*inreg%E,i8*inreg%F)
ret i8*%G
}
define internal fastcc i8*@_SMLLN12BinaryMapFn25mapi2E_608(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e)#4 gc"smlsharp"{
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%f,align 8
%j=call i8*@sml_alloc(i32 inreg 28)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177304,i32*%l,align 4
store i8*%j,i8**%g,align 8
%m=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%b,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%c,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32%d,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%j,i64 20
%v=bitcast i8*%u to i32*
store i32%e,i32*%v,align 4
%w=getelementptr inbounds i8,i8*%j,i64 24
%x=bitcast i8*%w to i32*
store i32 1,i32*%x,align 4
%y=call i8*@sml_alloc(i32 inreg 28)#0
%z=getelementptr inbounds i8,i8*%y,i64 -4
%A=bitcast i8*%z to i32*
store i32 1342177304,i32*%A,align 4
%B=load i8*,i8**%g,align 8
%C=bitcast i8*%y to i8**
store i8*%B,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%y,i64 8
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn25mapi2E_607 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%y,i64 16
%G=bitcast i8*%F to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn25mapi2E_607 to void(...)*),void(...)**%G,align 8
%H=getelementptr inbounds i8,i8*%y,i64 24
%I=bitcast i8*%H to i32*
store i32 -2147483647,i32*%I,align 4
ret i8*%y
}
define internal fastcc i8*@_SMLLN12BinaryMapFn25foldlE_609(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=getelementptr inbounds i8,i8*%j,i64 16
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
store i8*null,i8**%d,align 8
%w=getelementptr inbounds i8,i8*%j,i64 20
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=call fastcc i8*@_SMLL5foldl_416(i8*inreg%m,i32 inreg%p,i32 inreg%s,i32 inreg%v,i32 inreg%y)
%A=getelementptr inbounds i8,i8*%z,i64 16
%B=bitcast i8*%A to i8*(i8*,i8*)**
%C=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%B,align 8
%D=bitcast i8*%z to i8**
%E=load i8*,i8**%D,align 8
%F=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%G=call fastcc i8*%C(i8*inreg%E,i8*inreg%F)
ret i8*%G
}
define internal fastcc i8*@_SMLLN12BinaryMapFn25foldlE_610(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e)#4 gc"smlsharp"{
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%f,align 8
%j=call i8*@sml_alloc(i32 inreg 28)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177304,i32*%l,align 4
store i8*%j,i8**%g,align 8
%m=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%b,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%c,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32%d,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%j,i64 20
%v=bitcast i8*%u to i32*
store i32%e,i32*%v,align 4
%w=getelementptr inbounds i8,i8*%j,i64 24
%x=bitcast i8*%w to i32*
store i32 1,i32*%x,align 4
%y=call i8*@sml_alloc(i32 inreg 28)#0
%z=getelementptr inbounds i8,i8*%y,i64 -4
%A=bitcast i8*%z to i32*
store i32 1342177304,i32*%A,align 4
%B=load i8*,i8**%g,align 8
%C=bitcast i8*%y to i8**
store i8*%B,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%y,i64 8
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn25foldlE_609 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%y,i64 16
%G=bitcast i8*%F to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn25foldlE_609 to void(...)*),void(...)**%G,align 8
%H=getelementptr inbounds i8,i8*%y,i64 24
%I=bitcast i8*%H to i32*
store i32 -2147483647,i32*%I,align 4
ret i8*%y
}
define internal fastcc i8*@_SMLLN12BinaryMapFn26foldliE_611(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=getelementptr inbounds i8,i8*%j,i64 16
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
store i8*null,i8**%d,align 8
%w=getelementptr inbounds i8,i8*%j,i64 20
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=call fastcc i8*@_SMLL6foldli_411(i8*inreg%m,i32 inreg%p,i32 inreg%s,i32 inreg%v,i32 inreg%y)
%A=getelementptr inbounds i8,i8*%z,i64 16
%B=bitcast i8*%A to i8*(i8*,i8*)**
%C=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%B,align 8
%D=bitcast i8*%z to i8**
%E=load i8*,i8**%D,align 8
%F=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%G=call fastcc i8*%C(i8*inreg%E,i8*inreg%F)
ret i8*%G
}
define internal fastcc i8*@_SMLLN12BinaryMapFn26foldliE_612(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e)#4 gc"smlsharp"{
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%f,align 8
%j=call i8*@sml_alloc(i32 inreg 28)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177304,i32*%l,align 4
store i8*%j,i8**%g,align 8
%m=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%b,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%c,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32%d,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%j,i64 20
%v=bitcast i8*%u to i32*
store i32%e,i32*%v,align 4
%w=getelementptr inbounds i8,i8*%j,i64 24
%x=bitcast i8*%w to i32*
store i32 1,i32*%x,align 4
%y=call i8*@sml_alloc(i32 inreg 28)#0
%z=getelementptr inbounds i8,i8*%y,i64 -4
%A=bitcast i8*%z to i32*
store i32 1342177304,i32*%A,align 4
%B=load i8*,i8**%g,align 8
%C=bitcast i8*%y to i8**
store i8*%B,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%y,i64 8
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn26foldliE_611 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%y,i64 16
%G=bitcast i8*%F to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn26foldliE_611 to void(...)*),void(...)**%G,align 8
%H=getelementptr inbounds i8,i8*%y,i64 24
%I=bitcast i8*%H to i32*
store i32 -2147483647,i32*%I,align 4
ret i8*%y
}
define internal fastcc i8*@_SMLLN12BinaryMapFn25foldrE_613(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=getelementptr inbounds i8,i8*%j,i64 16
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
store i8*null,i8**%d,align 8
%w=getelementptr inbounds i8,i8*%j,i64 20
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=call fastcc i8*@_SMLL5foldr_426(i8*inreg%m,i32 inreg%p,i32 inreg%s,i32 inreg%v,i32 inreg%y)
%A=getelementptr inbounds i8,i8*%z,i64 16
%B=bitcast i8*%A to i8*(i8*,i8*)**
%C=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%B,align 8
%D=bitcast i8*%z to i8**
%E=load i8*,i8**%D,align 8
%F=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%G=call fastcc i8*%C(i8*inreg%E,i8*inreg%F)
ret i8*%G
}
define internal fastcc i8*@_SMLLN12BinaryMapFn25foldrE_614(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e)#4 gc"smlsharp"{
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%f,align 8
%j=call i8*@sml_alloc(i32 inreg 28)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177304,i32*%l,align 4
store i8*%j,i8**%g,align 8
%m=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%b,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%c,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32%d,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%j,i64 20
%v=bitcast i8*%u to i32*
store i32%e,i32*%v,align 4
%w=getelementptr inbounds i8,i8*%j,i64 24
%x=bitcast i8*%w to i32*
store i32 1,i32*%x,align 4
%y=call i8*@sml_alloc(i32 inreg 28)#0
%z=getelementptr inbounds i8,i8*%y,i64 -4
%A=bitcast i8*%z to i32*
store i32 1342177304,i32*%A,align 4
%B=load i8*,i8**%g,align 8
%C=bitcast i8*%y to i8**
store i8*%B,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%y,i64 8
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn25foldrE_613 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%y,i64 16
%G=bitcast i8*%F to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn25foldrE_613 to void(...)*),void(...)**%G,align 8
%H=getelementptr inbounds i8,i8*%y,i64 24
%I=bitcast i8*%H to i32*
store i32 -2147483647,i32*%I,align 4
ret i8*%y
}
define internal fastcc i8*@_SMLLN12BinaryMapFn26foldriE_615(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=getelementptr inbounds i8,i8*%j,i64 16
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
store i8*null,i8**%d,align 8
%w=getelementptr inbounds i8,i8*%j,i64 20
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=call fastcc i8*@_SMLL6foldri_421(i8*inreg%m,i32 inreg%p,i32 inreg%s,i32 inreg%v,i32 inreg%y)
%A=getelementptr inbounds i8,i8*%z,i64 16
%B=bitcast i8*%A to i8*(i8*,i8*)**
%C=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%B,align 8
%D=bitcast i8*%z to i8**
%E=load i8*,i8**%D,align 8
%F=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%G=call fastcc i8*%C(i8*inreg%E,i8*inreg%F)
ret i8*%G
}
define internal fastcc i8*@_SMLLN12BinaryMapFn26foldriE_616(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e)#4 gc"smlsharp"{
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%f,align 8
%j=call i8*@sml_alloc(i32 inreg 28)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177304,i32*%l,align 4
store i8*%j,i8**%g,align 8
%m=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%b,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%c,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32%d,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%j,i64 20
%v=bitcast i8*%u to i32*
store i32%e,i32*%v,align 4
%w=getelementptr inbounds i8,i8*%j,i64 24
%x=bitcast i8*%w to i32*
store i32 1,i32*%x,align 4
%y=call i8*@sml_alloc(i32 inreg 28)#0
%z=getelementptr inbounds i8,i8*%y,i64 -4
%A=bitcast i8*%z to i32*
store i32 1342177304,i32*%A,align 4
%B=load i8*,i8**%g,align 8
%C=bitcast i8*%y to i8**
store i8*%B,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%y,i64 8
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn26foldriE_615 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%y,i64 16
%G=bitcast i8*%F to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn26foldriE_615 to void(...)*),void(...)**%G,align 8
%H=getelementptr inbounds i8,i8*%y,i64 24
%I=bitcast i8*%H to i32*
store i32 -2147483647,i32*%I,align 4
ret i8*%y
}
define internal fastcc i8*@_SMLLN12BinaryMapFn26filterE_617(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLL6filter_500(i8*inreg%m,i32 inreg%p,i32 inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
ret i8*%A
}
define internal fastcc i8*@_SMLLN12BinaryMapFn26filterE_618(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn26filterE_617 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn26filterE_617 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN12BinaryMapFn27filteriE_619(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLL7filteri_504(i8*inreg%m,i32 inreg%p,i32 inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
ret i8*%A
}
define internal fastcc i8*@_SMLLN12BinaryMapFn27filteriE_620(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn27filteriE_619 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn27filteriE_619 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN12BinaryMapFn210mapPartialE_621(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=getelementptr inbounds i8,i8*%j,i64 16
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
store i8*null,i8**%d,align 8
%w=getelementptr inbounds i8,i8*%j,i64 20
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=call fastcc i8*@_SMLL10mapPartial_508(i8*inreg%m,i32 inreg%p,i32 inreg%s,i32 inreg%v,i32 inreg%y)
%A=getelementptr inbounds i8,i8*%z,i64 16
%B=bitcast i8*%A to i8*(i8*,i8*)**
%C=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%B,align 8
%D=bitcast i8*%z to i8**
%E=load i8*,i8**%D,align 8
%F=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%G=call fastcc i8*%C(i8*inreg%E,i8*inreg%F)
ret i8*%G
}
define internal fastcc i8*@_SMLLN12BinaryMapFn210mapPartialE_622(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e)#4 gc"smlsharp"{
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%f,align 8
%j=call i8*@sml_alloc(i32 inreg 28)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177304,i32*%l,align 4
store i8*%j,i8**%g,align 8
%m=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%b,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%c,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32%d,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%j,i64 20
%v=bitcast i8*%u to i32*
store i32%e,i32*%v,align 4
%w=getelementptr inbounds i8,i8*%j,i64 24
%x=bitcast i8*%w to i32*
store i32 1,i32*%x,align 4
%y=call i8*@sml_alloc(i32 inreg 28)#0
%z=getelementptr inbounds i8,i8*%y,i64 -4
%A=bitcast i8*%z to i32*
store i32 1342177304,i32*%A,align 4
%B=load i8*,i8**%g,align 8
%C=bitcast i8*%y to i8**
store i8*%B,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%y,i64 8
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn210mapPartialE_621 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%y,i64 16
%G=bitcast i8*%F to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn210mapPartialE_621 to void(...)*),void(...)**%G,align 8
%H=getelementptr inbounds i8,i8*%y,i64 24
%I=bitcast i8*%H to i32*
store i32 -2147483647,i32*%I,align 4
ret i8*%y
}
define internal fastcc i8*@_SMLLN12BinaryMapFn211mapPartialiE_623(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=getelementptr inbounds i8,i8*%j,i64 16
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
store i8*null,i8**%d,align 8
%w=getelementptr inbounds i8,i8*%j,i64 20
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=call fastcc i8*@_SMLL11mapPartiali_512(i8*inreg%m,i32 inreg%p,i32 inreg%s,i32 inreg%v,i32 inreg%y)
%A=getelementptr inbounds i8,i8*%z,i64 16
%B=bitcast i8*%A to i8*(i8*,i8*)**
%C=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%B,align 8
%D=bitcast i8*%z to i8**
%E=load i8*,i8**%D,align 8
%F=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%G=call fastcc i8*%C(i8*inreg%E,i8*inreg%F)
ret i8*%G
}
define internal fastcc i8*@_SMLLN12BinaryMapFn211mapPartialiE_624(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e)#4 gc"smlsharp"{
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%f,align 8
%j=call i8*@sml_alloc(i32 inreg 28)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177304,i32*%l,align 4
store i8*%j,i8**%g,align 8
%m=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%b,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%c,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32%d,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%j,i64 20
%v=bitcast i8*%u to i32*
store i32%e,i32*%v,align 4
%w=getelementptr inbounds i8,i8*%j,i64 24
%x=bitcast i8*%w to i32*
store i32 1,i32*%x,align 4
%y=call i8*@sml_alloc(i32 inreg 28)#0
%z=getelementptr inbounds i8,i8*%y,i64 -4
%A=bitcast i8*%z to i32*
store i32 1342177304,i32*%A,align 4
%B=load i8*,i8**%g,align 8
%C=bitcast i8*%y to i8**
store i8*%B,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%y,i64 8
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn211mapPartialiE_623 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%y,i64 16
%G=bitcast i8*%F to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn211mapPartialiE_623 to void(...)*),void(...)**%G,align 8
%H=getelementptr inbounds i8,i8*%y,i64 24
%I=bitcast i8*%H to i32*
store i32 -2147483647,i32*%I,align 4
ret i8*%y
}
define internal fastcc i8*@_SMLLN12BinaryMapFn210differenceE_625(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLL10difference_516(i8*inreg%m,i32 inreg%p,i32 inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
ret i8*%A
}
define internal fastcc i8*@_SMLLN12BinaryMapFn210differenceE_626(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn210differenceE_625 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn210differenceE_625 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN12BinaryMapFn218subtractByKeyEquivE_627(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLL18subtractByKeyEquiv_520(i8*inreg%m,i32 inreg%p,i32 inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
ret i8*%A
}
define internal fastcc i8*@_SMLLN12BinaryMapFn218subtractByKeyEquivE_628(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn218subtractByKeyEquivE_627 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn218subtractByKeyEquivE_627 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN12BinaryMapFn222subtractByKeyElemEquivE_629(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLL22subtractByKeyElemEquiv_524(i8*inreg%m,i32 inreg%p,i32 inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
ret i8*%A
}
define internal fastcc i8*@_SMLLN12BinaryMapFn222subtractByKeyElemEquivE_630(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn222subtractByKeyElemEquivE_629 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn222subtractByKeyElemEquivE_629 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN12BinaryMapFn22eqE_631(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLL2eq_527(i8*inreg%m,i32 inreg%p,i32 inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
ret i8*%A
}
define internal fastcc i8*@_SMLLN12BinaryMapFn22eqE_632(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn22eqE_631 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN12BinaryMapFn22eqE_631 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN1__12BinaryMapFn2E_633(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
%k=alloca i8*,align 8
%l=alloca i8*,align 8
%m=alloca i8*,align 8
%n=alloca i8*,align 8
%o=alloca i8*,align 8
%p=alloca i8*,align 8
%q=alloca i8*,align 8
%r=alloca i8*,align 8
%s=alloca i8*,align 8
%t=alloca i8*,align 8
%u=alloca i8*,align 8
%v=alloca i8*,align 8
%w=alloca i8*,align 8
%x=alloca i8*,align 8
%y=alloca i8*,align 8
%z=alloca i8*,align 8
%A=alloca i8*,align 8
%B=alloca i8*,align 8
%C=alloca i8*,align 8
%D=alloca i8*,align 8
%E=alloca i8*,align 8
%F=alloca i8*,align 8
%G=alloca i8*,align 8
%H=alloca i8*,align 8
%I=alloca i8*,align 8
%J=alloca i8*,align 8
%K=alloca i8*,align 8
%L=alloca i8*,align 8
%M=alloca i8*,align 8
%N=alloca i8*,align 8
%O=alloca i8*,align 8
%P=alloca i8*,align 8
%Q=alloca i8*,align 8
%R=alloca i8*,align 8
%S=alloca i8*,align 8
%T=alloca i8*,align 8
%U=alloca i8*,align 8
%V=alloca i8*,align 8
%W=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
call void@llvm.gcroot(i8**%k,i8*null)#0
call void@llvm.gcroot(i8**%l,i8*null)#0
call void@llvm.gcroot(i8**%m,i8*null)#0
call void@llvm.gcroot(i8**%n,i8*null)#0
call void@llvm.gcroot(i8**%o,i8*null)#0
call void@llvm.gcroot(i8**%p,i8*null)#0
call void@llvm.gcroot(i8**%q,i8*null)#0
call void@llvm.gcroot(i8**%r,i8*null)#0
call void@llvm.gcroot(i8**%s,i8*null)#0
call void@llvm.gcroot(i8**%t,i8*null)#0
call void@llvm.gcroot(i8**%u,i8*null)#0
call void@llvm.gcroot(i8**%v,i8*null)#0
call void@llvm.gcroot(i8**%w,i8*null)#0
call void@llvm.gcroot(i8**%x,i8*null)#0
call void@llvm.gcroot(i8**%y,i8*null)#0
call void@llvm.gcroot(i8**%z,i8*null)#0
call void@llvm.gcroot(i8**%A,i8*null)#0
call void@llvm.gcroot(i8**%B,i8*null)#0
call void@llvm.gcroot(i8**%C,i8*null)#0
call void@llvm.gcroot(i8**%D,i8*null)#0
call void@llvm.gcroot(i8**%E,i8*null)#0
call void@llvm.gcroot(i8**%F,i8*null)#0
call void@llvm.gcroot(i8**%G,i8*null)#0
call void@llvm.gcroot(i8**%H,i8*null)#0
call void@llvm.gcroot(i8**%I,i8*null)#0
call void@llvm.gcroot(i8**%J,i8*null)#0
call void@llvm.gcroot(i8**%K,i8*null)#0
call void@llvm.gcroot(i8**%L,i8*null)#0
call void@llvm.gcroot(i8**%M,i8*null)#0
call void@llvm.gcroot(i8**%N,i8*null)#0
call void@llvm.gcroot(i8**%O,i8*null)#0
call void@llvm.gcroot(i8**%P,i8*null)#0
call void@llvm.gcroot(i8**%Q,i8*null)#0
call void@llvm.gcroot(i8**%R,i8*null)#0
call void@llvm.gcroot(i8**%S,i8*null)#0
call void@llvm.gcroot(i8**%T,i8*null)#0
call void@llvm.gcroot(i8**%U,i8*null)#0
call void@llvm.gcroot(i8**%V,i8*null)#0
call void@llvm.gcroot(i8**%W,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%X=getelementptr inbounds i8,i8*%a,i64 4
%Y=bitcast i8*%X to i32*
%Z=load i32,i32*%Y,align 4
%aa=call i8*@sml_alloc(i32 inreg 12)#0
%ab=bitcast i8*%aa to i32*
%ac=getelementptr inbounds i8,i8*%aa,i64 -4
%ad=bitcast i8*%ac to i32*
store i32 1342177288,i32*%ad,align 4
store i8*%aa,i8**%e,align 8
store i32%Z,i32*%ab,align 4
%ae=getelementptr inbounds i8,i8*%aa,i64 8
%af=bitcast i8*%ae to i32*
store i32 0,i32*%af,align 4
%ag=call i8*@sml_alloc(i32 inreg 28)#0
%ah=getelementptr inbounds i8,i8*%ag,i64 -4
%ai=bitcast i8*%ah to i32*
store i32 1342177304,i32*%ai,align 4
%aj=load i8*,i8**%e,align 8
%ak=bitcast i8*%ag to i8**
store i8*%aj,i8**%ak,align 8
%al=getelementptr inbounds i8,i8*%ag,i64 8
%am=bitcast i8*%al to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL5first_300 to void(...)*),void(...)**%am,align 8
%an=getelementptr inbounds i8,i8*%ag,i64 16
%ao=bitcast i8*%an to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL5first_638 to void(...)*),void(...)**%ao,align 8
%ap=getelementptr inbounds i8,i8*%ag,i64 24
%aq=bitcast i8*%ap to i32*
store i32 -2147483647,i32*%aq,align 4
%ar=load i8*,i8**%d,align 8
%as=bitcast i8*%ar to i32*
%at=load i32,i32*%as,align 4
%au=getelementptr inbounds i8,i8*%ar,i64 4
%av=bitcast i8*%au to i32*
%aw=load i32,i32*%av,align 4
%ax=call i8*@sml_alloc(i32 inreg 12)#0
%ay=bitcast i8*%ax to i32*
%az=getelementptr inbounds i8,i8*%ax,i64 -4
%aA=bitcast i8*%az to i32*
store i32 1342177288,i32*%aA,align 4
store i8*%ax,i8**%f,align 8
store i32%at,i32*%ay,align 4
%aB=getelementptr inbounds i8,i8*%ax,i64 4
%aC=bitcast i8*%aB to i32*
store i32%aw,i32*%aC,align 4
%aD=getelementptr inbounds i8,i8*%ax,i64 8
%aE=bitcast i8*%aD to i32*
store i32 0,i32*%aE,align 4
%aF=call i8*@sml_alloc(i32 inreg 28)#0
%aG=getelementptr inbounds i8,i8*%aF,i64 -4
%aH=bitcast i8*%aG to i32*
store i32 1342177304,i32*%aH,align 4
%aI=load i8*,i8**%f,align 8
%aJ=bitcast i8*%aF to i8**
store i8*%aI,i8**%aJ,align 8
%aK=getelementptr inbounds i8,i8*%aF,i64 8
%aL=bitcast i8*%aK to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL6firsti_302 to void(...)*),void(...)**%aL,align 8
%aM=getelementptr inbounds i8,i8*%aF,i64 16
%aN=bitcast i8*%aM to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL6firsti_639 to void(...)*),void(...)**%aN,align 8
%aO=getelementptr inbounds i8,i8*%aF,i64 24
%aP=bitcast i8*%aO to i32*
store i32 -2147483647,i32*%aP,align 4
%aQ=load i8*,i8**%d,align 8
%aR=bitcast i8*%aQ to i32*
%aS=load i32,i32*%aR,align 4
%aT=getelementptr inbounds i8,i8*%aQ,i64 4
%aU=bitcast i8*%aT to i32*
%aV=load i32,i32*%aU,align 4
%aW=call i8*@sml_alloc(i32 inreg 12)#0
%aX=bitcast i8*%aW to i32*
%aY=getelementptr inbounds i8,i8*%aW,i64 -4
%aZ=bitcast i8*%aY to i32*
store i32 1342177288,i32*%aZ,align 4
store i8*%aW,i8**%g,align 8
store i32%aS,i32*%aX,align 4
%a0=getelementptr inbounds i8,i8*%aW,i64 4
%a1=bitcast i8*%a0 to i32*
store i32%aV,i32*%a1,align 4
%a2=getelementptr inbounds i8,i8*%aW,i64 8
%a3=bitcast i8*%a2 to i32*
store i32 0,i32*%a3,align 4
%a4=call i8*@sml_alloc(i32 inreg 28)#0
%a5=getelementptr inbounds i8,i8*%a4,i64 -4
%a6=bitcast i8*%a5 to i32*
store i32 1342177304,i32*%a6,align 4
%a7=load i8*,i8**%g,align 8
%a8=bitcast i8*%a4 to i8**
store i8*%a7,i8**%a8,align 8
%a9=getelementptr inbounds i8,i8*%a4,i64 8
%ba=bitcast i8*%a9 to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL1N_308 to void(...)*),void(...)**%ba,align 8
%bb=getelementptr inbounds i8,i8*%a4,i64 16
%bc=bitcast i8*%bb to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL1N_642 to void(...)*),void(...)**%bc,align 8
%bd=getelementptr inbounds i8,i8*%a4,i64 24
%be=bitcast i8*%bd to i32*
store i32 -2147483647,i32*%be,align 4
%bf=load i8*,i8**%d,align 8
%bg=bitcast i8*%bf to i32*
%bh=load i32,i32*%bg,align 4
%bi=getelementptr inbounds i8,i8*%bf,i64 4
%bj=bitcast i8*%bi to i32*
%bk=load i32,i32*%bj,align 4
%bl=call i8*@sml_alloc(i32 inreg 20)#0
%bm=getelementptr inbounds i8,i8*%bl,i64 -4
%bn=bitcast i8*%bm to i32*
store i32 1342177296,i32*%bn,align 4
store i8*%bl,i8**%h,align 8
%bo=load i8*,i8**%g,align 8
%bp=bitcast i8*%bl to i8**
store i8*%bo,i8**%bp,align 8
%bq=getelementptr inbounds i8,i8*%bl,i64 8
%br=bitcast i8*%bq to i32*
store i32%bh,i32*%br,align 4
%bs=getelementptr inbounds i8,i8*%bl,i64 12
%bt=bitcast i8*%bs to i32*
store i32%bk,i32*%bt,align 4
%bu=getelementptr inbounds i8,i8*%bl,i64 16
%bv=bitcast i8*%bu to i32*
store i32 1,i32*%bv,align 4
%bw=call i8*@sml_alloc(i32 inreg 28)#0
%bx=getelementptr inbounds i8,i8*%bw,i64 -4
%by=bitcast i8*%bx to i32*
store i32 1342177304,i32*%by,align 4
%bz=load i8*,i8**%h,align 8
%bA=bitcast i8*%bw to i8**
store i8*%bz,i8**%bA,align 8
%bB=getelementptr inbounds i8,i8*%bw,i64 8
%bC=bitcast i8*%bB to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL8single__L_311 to void(...)*),void(...)**%bC,align 8
%bD=getelementptr inbounds i8,i8*%bw,i64 16
%bE=bitcast i8*%bD to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL8single__L_643 to void(...)*),void(...)**%bE,align 8
%bF=getelementptr inbounds i8,i8*%bw,i64 24
%bG=bitcast i8*%bF to i32*
store i32 -2147483647,i32*%bG,align 4
%bH=load i8*,i8**%d,align 8
%bI=bitcast i8*%bH to i32*
%bJ=load i32,i32*%bI,align 4
%bK=getelementptr inbounds i8,i8*%bH,i64 4
%bL=bitcast i8*%bK to i32*
%bM=load i32,i32*%bL,align 4
%bN=call i8*@sml_alloc(i32 inreg 20)#0
%bO=getelementptr inbounds i8,i8*%bN,i64 -4
%bP=bitcast i8*%bO to i32*
store i32 1342177296,i32*%bP,align 4
store i8*%bN,i8**%i,align 8
%bQ=load i8*,i8**%g,align 8
%bR=bitcast i8*%bN to i8**
store i8*%bQ,i8**%bR,align 8
%bS=getelementptr inbounds i8,i8*%bN,i64 8
%bT=bitcast i8*%bS to i32*
store i32%bJ,i32*%bT,align 4
%bU=getelementptr inbounds i8,i8*%bN,i64 12
%bV=bitcast i8*%bU to i32*
store i32%bM,i32*%bV,align 4
%bW=getelementptr inbounds i8,i8*%bN,i64 16
%bX=bitcast i8*%bW to i32*
store i32 1,i32*%bX,align 4
%bY=call i8*@sml_alloc(i32 inreg 28)#0
%bZ=getelementptr inbounds i8,i8*%bY,i64 -4
%b0=bitcast i8*%bZ to i32*
store i32 1342177304,i32*%b0,align 4
%b1=load i8*,i8**%i,align 8
%b2=bitcast i8*%bY to i8**
store i8*%b1,i8**%b2,align 8
%b3=getelementptr inbounds i8,i8*%bY,i64 8
%b4=bitcast i8*%b3 to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL8single__R_314 to void(...)*),void(...)**%b4,align 8
%b5=getelementptr inbounds i8,i8*%bY,i64 16
%b6=bitcast i8*%b5 to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL8single__R_644 to void(...)*),void(...)**%b6,align 8
%b7=getelementptr inbounds i8,i8*%bY,i64 24
%b8=bitcast i8*%b7 to i32*
store i32 -2147483647,i32*%b8,align 4
%b9=load i8*,i8**%d,align 8
%ca=bitcast i8*%b9 to i32*
%cb=load i32,i32*%ca,align 4
%cc=getelementptr inbounds i8,i8*%b9,i64 4
%cd=bitcast i8*%cc to i32*
%ce=load i32,i32*%cd,align 4
%cf=call i8*@sml_alloc(i32 inreg 20)#0
%cg=getelementptr inbounds i8,i8*%cf,i64 -4
%ch=bitcast i8*%cg to i32*
store i32 1342177296,i32*%ch,align 4
store i8*%cf,i8**%j,align 8
%ci=load i8*,i8**%g,align 8
%cj=bitcast i8*%cf to i8**
store i8*%ci,i8**%cj,align 8
%ck=getelementptr inbounds i8,i8*%cf,i64 8
%cl=bitcast i8*%ck to i32*
store i32%cb,i32*%cl,align 4
%cm=getelementptr inbounds i8,i8*%cf,i64 12
%cn=bitcast i8*%cm to i32*
store i32%ce,i32*%cn,align 4
%co=getelementptr inbounds i8,i8*%cf,i64 16
%cp=bitcast i8*%co to i32*
store i32 1,i32*%cp,align 4
%cq=call i8*@sml_alloc(i32 inreg 28)#0
%cr=getelementptr inbounds i8,i8*%cq,i64 -4
%cs=bitcast i8*%cr to i32*
store i32 1342177304,i32*%cs,align 4
%ct=load i8*,i8**%j,align 8
%cu=bitcast i8*%cq to i8**
store i8*%ct,i8**%cu,align 8
%cv=getelementptr inbounds i8,i8*%cq,i64 8
%cw=bitcast i8*%cv to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL8double__L_317 to void(...)*),void(...)**%cw,align 8
%cx=getelementptr inbounds i8,i8*%cq,i64 16
%cy=bitcast i8*%cx to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL8double__L_645 to void(...)*),void(...)**%cy,align 8
%cz=getelementptr inbounds i8,i8*%cq,i64 24
%cA=bitcast i8*%cz to i32*
store i32 -2147483647,i32*%cA,align 4
%cB=load i8*,i8**%d,align 8
%cC=bitcast i8*%cB to i32*
%cD=load i32,i32*%cC,align 4
%cE=getelementptr inbounds i8,i8*%cB,i64 4
%cF=bitcast i8*%cE to i32*
%cG=load i32,i32*%cF,align 4
%cH=call i8*@sml_alloc(i32 inreg 20)#0
%cI=getelementptr inbounds i8,i8*%cH,i64 -4
%cJ=bitcast i8*%cI to i32*
store i32 1342177296,i32*%cJ,align 4
store i8*%cH,i8**%k,align 8
%cK=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%cL=bitcast i8*%cH to i8**
store i8*%cK,i8**%cL,align 8
%cM=getelementptr inbounds i8,i8*%cH,i64 8
%cN=bitcast i8*%cM to i32*
store i32%cD,i32*%cN,align 4
%cO=getelementptr inbounds i8,i8*%cH,i64 12
%cP=bitcast i8*%cO to i32*
store i32%cG,i32*%cP,align 4
%cQ=getelementptr inbounds i8,i8*%cH,i64 16
%cR=bitcast i8*%cQ to i32*
store i32 1,i32*%cR,align 4
%cS=call i8*@sml_alloc(i32 inreg 28)#0
%cT=getelementptr inbounds i8,i8*%cS,i64 -4
%cU=bitcast i8*%cT to i32*
store i32 1342177304,i32*%cU,align 4
%cV=load i8*,i8**%k,align 8
%cW=bitcast i8*%cS to i8**
store i8*%cV,i8**%cW,align 8
%cX=getelementptr inbounds i8,i8*%cS,i64 8
%cY=bitcast i8*%cX to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL8double__R_320 to void(...)*),void(...)**%cY,align 8
%cZ=getelementptr inbounds i8,i8*%cS,i64 16
%c0=bitcast i8*%cZ to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL8double__R_646 to void(...)*),void(...)**%c0,align 8
%c1=getelementptr inbounds i8,i8*%cS,i64 24
%c2=bitcast i8*%c1 to i32*
store i32 -2147483647,i32*%c2,align 4
%c3=load i8*,i8**%d,align 8
%c4=bitcast i8*%c3 to i32*
%c5=load i32,i32*%c4,align 4
%c6=getelementptr inbounds i8,i8*%c3,i64 4
%c7=bitcast i8*%c6 to i32*
%c8=load i32,i32*%c7,align 4
%c9=call i8*@sml_alloc(i32 inreg 44)#0
%da=getelementptr inbounds i8,i8*%c9,i64 -4
%db=bitcast i8*%da to i32*
store i32 1342177320,i32*%db,align 4
store i8*%c9,i8**%g,align 8
%dc=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%dd=bitcast i8*%c9 to i8**
store i8*%dc,i8**%dd,align 8
%de=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%df=getelementptr inbounds i8,i8*%c9,i64 8
%dg=bitcast i8*%df to i8**
store i8*%de,i8**%dg,align 8
%dh=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%di=getelementptr inbounds i8,i8*%c9,i64 16
%dj=bitcast i8*%di to i8**
store i8*%dh,i8**%dj,align 8
%dk=load i8*,i8**%k,align 8
store i8*null,i8**%k,align 8
%dl=getelementptr inbounds i8,i8*%c9,i64 24
%dm=bitcast i8*%dl to i8**
store i8*%dk,i8**%dm,align 8
%dn=getelementptr inbounds i8,i8*%c9,i64 32
%do=bitcast i8*%dn to i32*
store i32%c5,i32*%do,align 4
%dp=getelementptr inbounds i8,i8*%c9,i64 36
%dq=bitcast i8*%dp to i32*
store i32%c8,i32*%dq,align 4
%dr=getelementptr inbounds i8,i8*%c9,i64 40
%ds=bitcast i8*%dr to i32*
store i32 15,i32*%ds,align 4
%dt=call i8*@sml_alloc(i32 inreg 28)#0
%du=getelementptr inbounds i8,i8*%dt,i64 -4
%dv=bitcast i8*%du to i32*
store i32 1342177304,i32*%dv,align 4
%dw=load i8*,i8**%g,align 8
%dx=bitcast i8*%dt to i8**
store i8*%dw,i8**%dx,align 8
%dy=getelementptr inbounds i8,i8*%dt,i64 8
%dz=bitcast i8*%dy to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL2T_G_322 to void(...)*),void(...)**%dz,align 8
%dA=getelementptr inbounds i8,i8*%dt,i64 16
%dB=bitcast i8*%dA to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL2T_G_647 to void(...)*),void(...)**%dB,align 8
%dC=getelementptr inbounds i8,i8*%dt,i64 24
%dD=bitcast i8*%dC to i32*
store i32 -2147483647,i32*%dD,align 4
%dE=load i8*,i8**%d,align 8
%dF=bitcast i8*%dE to i32*
%dG=load i32,i32*%dF,align 4
%dH=getelementptr inbounds i8,i8*%dE,i64 4
%dI=bitcast i8*%dH to i32*
%dJ=load i32,i32*%dI,align 4
%dK=call i8*@sml_alloc(i32 inreg 12)#0
%dL=bitcast i8*%dK to i32*
%dM=getelementptr inbounds i8,i8*%dK,i64 -4
%dN=bitcast i8*%dM to i32*
store i32 1342177288,i32*%dN,align 4
store i8*%dK,i8**%h,align 8
store i32%dG,i32*%dL,align 4
%dO=getelementptr inbounds i8,i8*%dK,i64 4
%dP=bitcast i8*%dO to i32*
store i32%dJ,i32*%dP,align 4
%dQ=getelementptr inbounds i8,i8*%dK,i64 8
%dR=bitcast i8*%dQ to i32*
store i32 0,i32*%dR,align 4
%dS=call i8*@sml_alloc(i32 inreg 28)#0
%dT=getelementptr inbounds i8,i8*%dS,i64 -4
%dU=bitcast i8*%dT to i32*
store i32 1342177304,i32*%dU,align 4
%dV=load i8*,i8**%h,align 8
%dW=bitcast i8*%dS to i8**
store i8*%dV,i8**%dW,align 8
%dX=getelementptr inbounds i8,i8*%dS,i64 8
%dY=bitcast i8*%dX to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL3min_325 to void(...)*),void(...)**%dY,align 8
%dZ=getelementptr inbounds i8,i8*%dS,i64 16
%d0=bitcast i8*%dZ to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL3min_648 to void(...)*),void(...)**%d0,align 8
%d1=getelementptr inbounds i8,i8*%dS,i64 24
%d2=bitcast i8*%d1 to i32*
store i32 -2147483647,i32*%d2,align 4
%d3=load i8*,i8**%d,align 8
%d4=bitcast i8*%d3 to i32*
%d5=load i32,i32*%d4,align 4
%d6=getelementptr inbounds i8,i8*%d3,i64 4
%d7=bitcast i8*%d6 to i32*
%d8=load i32,i32*%d7,align 4
%d9=call i8*@sml_alloc(i32 inreg 20)#0
%ea=getelementptr inbounds i8,i8*%d9,i64 -4
%eb=bitcast i8*%ea to i32*
store i32 1342177296,i32*%eb,align 4
store i8*%d9,i8**%i,align 8
%ec=load i8*,i8**%g,align 8
%ed=bitcast i8*%d9 to i8**
store i8*%ec,i8**%ed,align 8
%ee=getelementptr inbounds i8,i8*%d9,i64 8
%ef=bitcast i8*%ee to i32*
store i32%d5,i32*%ef,align 4
%eg=getelementptr inbounds i8,i8*%d9,i64 12
%eh=bitcast i8*%eg to i32*
store i32%d8,i32*%eh,align 4
%ei=getelementptr inbounds i8,i8*%d9,i64 16
%ej=bitcast i8*%ei to i32*
store i32 1,i32*%ej,align 4
%ek=call i8*@sml_alloc(i32 inreg 28)#0
%el=getelementptr inbounds i8,i8*%ek,i64 -4
%em=bitcast i8*%el to i32*
store i32 1342177304,i32*%em,align 4
%en=load i8*,i8**%i,align 8
%eo=bitcast i8*%ek to i8**
store i8*%en,i8**%eo,align 8
%ep=getelementptr inbounds i8,i8*%ek,i64 8
%eq=bitcast i8*%ep to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL6delmin_328 to void(...)*),void(...)**%eq,align 8
%er=getelementptr inbounds i8,i8*%ek,i64 16
%es=bitcast i8*%er to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL6delmin_649 to void(...)*),void(...)**%es,align 8
%et=getelementptr inbounds i8,i8*%ek,i64 24
%eu=bitcast i8*%et to i32*
store i32 -2147483647,i32*%eu,align 4
%ev=load i8*,i8**%d,align 8
%ew=bitcast i8*%ev to i32*
%ex=load i32,i32*%ew,align 4
%ey=getelementptr inbounds i8,i8*%ev,i64 4
%ez=bitcast i8*%ey to i32*
%eA=load i32,i32*%ez,align 4
%eB=call i8*@sml_alloc(i32 inreg 36)#0
%eC=getelementptr inbounds i8,i8*%eB,i64 -4
%eD=bitcast i8*%eC to i32*
store i32 1342177312,i32*%eD,align 4
store i8*%eB,i8**%j,align 8
%eE=load i8*,i8**%g,align 8
%eF=bitcast i8*%eB to i8**
store i8*%eE,i8**%eF,align 8
%eG=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%eH=getelementptr inbounds i8,i8*%eB,i64 8
%eI=bitcast i8*%eH to i8**
store i8*%eG,i8**%eI,align 8
%eJ=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%eK=getelementptr inbounds i8,i8*%eB,i64 16
%eL=bitcast i8*%eK to i8**
store i8*%eJ,i8**%eL,align 8
%eM=getelementptr inbounds i8,i8*%eB,i64 24
%eN=bitcast i8*%eM to i32*
store i32%ex,i32*%eN,align 4
%eO=getelementptr inbounds i8,i8*%eB,i64 28
%eP=bitcast i8*%eO to i32*
store i32%eA,i32*%eP,align 4
%eQ=getelementptr inbounds i8,i8*%eB,i64 32
%eR=bitcast i8*%eQ to i32*
store i32 7,i32*%eR,align 4
%eS=call i8*@sml_alloc(i32 inreg 28)#0
%eT=getelementptr inbounds i8,i8*%eS,i64 -4
%eU=bitcast i8*%eT to i32*
store i32 1342177304,i32*%eU,align 4
%eV=load i8*,i8**%j,align 8
%eW=bitcast i8*%eS to i8**
store i8*%eV,i8**%eW,align 8
%eX=getelementptr inbounds i8,i8*%eS,i64 8
%eY=bitcast i8*%eX to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL7delete_G_330 to void(...)*),void(...)**%eY,align 8
%eZ=getelementptr inbounds i8,i8*%eS,i64 16
%e0=bitcast i8*%eZ to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL7delete_G_650 to void(...)*),void(...)**%e0,align 8
%e1=getelementptr inbounds i8,i8*%eS,i64 24
%e2=bitcast i8*%e1 to i32*
store i32 -2147483647,i32*%e2,align 4
%e3=load i8*,i8**%d,align 8
%e4=bitcast i8*%e3 to i32*
%e5=load i32,i32*%e4,align 4
%e6=getelementptr inbounds i8,i8*%e3,i64 4
%e7=bitcast i8*%e6 to i32*
%e8=load i32,i32*%e7,align 4
%e9=call i8*@sml_alloc(i32 inreg 12)#0
%fa=bitcast i8*%e9 to i32*
%fb=getelementptr inbounds i8,i8*%e9,i64 -4
%fc=bitcast i8*%fb to i32*
store i32 1342177288,i32*%fc,align 4
store i8*%e9,i8**%h,align 8
store i32%e5,i32*%fa,align 4
%fd=getelementptr inbounds i8,i8*%e9,i64 4
%fe=bitcast i8*%fd to i32*
store i32%e8,i32*%fe,align 4
%ff=getelementptr inbounds i8,i8*%e9,i64 8
%fg=bitcast i8*%ff to i32*
store i32 0,i32*%fg,align 4
%fh=call i8*@sml_alloc(i32 inreg 28)#0
%fi=getelementptr inbounds i8,i8*%fh,i64 -4
%fj=bitcast i8*%fi to i32*
store i32 1342177304,i32*%fj,align 4
%fk=load i8*,i8**%h,align 8
%fl=bitcast i8*%fh to i8**
store i8*%fk,i8**%fl,align 8
%fm=getelementptr inbounds i8,i8*%fh,i64 8
%fn=bitcast i8*%fm to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL9singleton_332 to void(...)*),void(...)**%fn,align 8
%fo=getelementptr inbounds i8,i8*%fh,i64 16
%fp=bitcast i8*%fo to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL9singleton_651 to void(...)*),void(...)**%fp,align 8
%fq=getelementptr inbounds i8,i8*%fh,i64 24
%fr=bitcast i8*%fq to i32*
store i32 -2147483647,i32*%fr,align 4
%fs=load i8*,i8**%d,align 8
%ft=bitcast i8*%fs to i32*
%fu=load i32,i32*%ft,align 4
%fv=getelementptr inbounds i8,i8*%fs,i64 4
%fw=bitcast i8*%fv to i32*
%fx=load i32,i32*%fw,align 4
%fy=call i8*@sml_alloc(i32 inreg 28)#0
%fz=getelementptr inbounds i8,i8*%fy,i64 -4
%fA=bitcast i8*%fz to i32*
store i32 1342177304,i32*%fA,align 4
store i8*%fy,i8**%i,align 8
%fB=load i8*,i8**%c,align 8
%fC=bitcast i8*%fy to i8**
store i8*%fB,i8**%fC,align 8
%fD=load i8*,i8**%g,align 8
%fE=getelementptr inbounds i8,i8*%fy,i64 8
%fF=bitcast i8*%fE to i8**
store i8*%fD,i8**%fF,align 8
%fG=getelementptr inbounds i8,i8*%fy,i64 16
%fH=bitcast i8*%fG to i32*
store i32%fu,i32*%fH,align 4
%fI=getelementptr inbounds i8,i8*%fy,i64 20
%fJ=bitcast i8*%fI to i32*
store i32%fx,i32*%fJ,align 4
%fK=getelementptr inbounds i8,i8*%fy,i64 24
%fL=bitcast i8*%fK to i32*
store i32 3,i32*%fL,align 4
%fM=call i8*@sml_alloc(i32 inreg 28)#0
%fN=getelementptr inbounds i8,i8*%fM,i64 -4
%fO=bitcast i8*%fN to i32*
store i32 1342177304,i32*%fO,align 4
%fP=load i8*,i8**%i,align 8
%fQ=bitcast i8*%fM to i8**
store i8*%fP,i8**%fQ,align 8
%fR=getelementptr inbounds i8,i8*%fM,i64 8
%fS=bitcast i8*%fR to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL6insert_334 to void(...)*),void(...)**%fS,align 8
%fT=getelementptr inbounds i8,i8*%fM,i64 16
%fU=bitcast i8*%fT to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL6insert_652 to void(...)*),void(...)**%fU,align 8
%fV=getelementptr inbounds i8,i8*%fM,i64 24
%fW=bitcast i8*%fV to i32*
store i32 -2147483647,i32*%fW,align 4
%fX=load i8*,i8**%d,align 8
%fY=bitcast i8*%fX to i32*
%fZ=load i32,i32*%fY,align 4
%f0=getelementptr inbounds i8,i8*%fX,i64 4
%f1=bitcast i8*%f0 to i32*
%f2=load i32,i32*%f1,align 4
%f3=call i8*@sml_alloc(i32 inreg 20)#0
%f4=getelementptr inbounds i8,i8*%f3,i64 -4
%f5=bitcast i8*%f4 to i32*
store i32 1342177296,i32*%f5,align 4
store i8*%f3,i8**%k,align 8
%f6=load i8*,i8**%i,align 8
%f7=bitcast i8*%f3 to i8**
store i8*%f6,i8**%f7,align 8
%f8=getelementptr inbounds i8,i8*%f3,i64 8
%f9=bitcast i8*%f8 to i32*
store i32%fZ,i32*%f9,align 4
%ga=getelementptr inbounds i8,i8*%f3,i64 12
%gb=bitcast i8*%ga to i32*
store i32%f2,i32*%gb,align 4
%gc=getelementptr inbounds i8,i8*%f3,i64 16
%gd=bitcast i8*%gc to i32*
store i32 1,i32*%gd,align 4
%ge=call i8*@sml_alloc(i32 inreg 28)#0
%gf=getelementptr inbounds i8,i8*%ge,i64 -4
%gg=bitcast i8*%gf to i32*
store i32 1342177304,i32*%gg,align 4
%gh=load i8*,i8**%k,align 8
%gi=bitcast i8*%ge to i8**
store i8*%gh,i8**%gi,align 8
%gj=getelementptr inbounds i8,i8*%ge,i64 8
%gk=bitcast i8*%gj to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL7insert_G_336 to void(...)*),void(...)**%gk,align 8
%gl=getelementptr inbounds i8,i8*%ge,i64 16
%gm=bitcast i8*%gl to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL7insert_G_653 to void(...)*),void(...)**%gm,align 8
%gn=getelementptr inbounds i8,i8*%ge,i64 24
%go=bitcast i8*%gn to i32*
store i32 -2147483647,i32*%go,align 4
%gp=load i8*,i8**%d,align 8
%gq=bitcast i8*%gp to i32*
%gr=load i32,i32*%gq,align 4
%gs=getelementptr inbounds i8,i8*%gp,i64 4
%gt=bitcast i8*%gs to i32*
%gu=load i32,i32*%gt,align 4
%gv=call i8*@sml_alloc(i32 inreg 28)#0
%gw=getelementptr inbounds i8,i8*%gv,i64 -4
%gx=bitcast i8*%gw to i32*
store i32 1342177304,i32*%gx,align 4
store i8*%gv,i8**%l,align 8
%gy=load i8*,i8**%c,align 8
%gz=bitcast i8*%gv to i8**
store i8*%gy,i8**%gz,align 8
%gA=load i8*,i8**%g,align 8
%gB=getelementptr inbounds i8,i8*%gv,i64 8
%gC=bitcast i8*%gB to i8**
store i8*%gA,i8**%gC,align 8
%gD=getelementptr inbounds i8,i8*%gv,i64 16
%gE=bitcast i8*%gD to i32*
store i32%gr,i32*%gE,align 4
%gF=getelementptr inbounds i8,i8*%gv,i64 20
%gG=bitcast i8*%gF to i32*
store i32%gu,i32*%gG,align 4
%gH=getelementptr inbounds i8,i8*%gv,i64 24
%gI=bitcast i8*%gH to i32*
store i32 3,i32*%gI,align 4
%gJ=call i8*@sml_alloc(i32 inreg 28)#0
%gK=getelementptr inbounds i8,i8*%gJ,i64 -4
%gL=bitcast i8*%gK to i32*
store i32 1342177304,i32*%gL,align 4
%gM=load i8*,i8**%l,align 8
%gN=bitcast i8*%gJ to i8**
store i8*%gM,i8**%gN,align 8
%gO=getelementptr inbounds i8,i8*%gJ,i64 8
%gP=bitcast i8*%gO to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL10insertWith_338 to void(...)*),void(...)**%gP,align 8
%gQ=getelementptr inbounds i8,i8*%gJ,i64 16
%gR=bitcast i8*%gQ to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL10insertWith_654 to void(...)*),void(...)**%gR,align 8
%gS=getelementptr inbounds i8,i8*%gJ,i64 24
%gT=bitcast i8*%gS to i32*
store i32 -2147483647,i32*%gT,align 4
%gU=load i8*,i8**%d,align 8
%gV=bitcast i8*%gU to i32*
%gW=load i32,i32*%gV,align 4
%gX=getelementptr inbounds i8,i8*%gU,i64 4
%gY=bitcast i8*%gX to i32*
%gZ=load i32,i32*%gY,align 4
%g0=call i8*@sml_alloc(i32 inreg 28)#0
%g1=getelementptr inbounds i8,i8*%g0,i64 -4
%g2=bitcast i8*%g1 to i32*
store i32 1342177304,i32*%g2,align 4
store i8*%g0,i8**%m,align 8
%g3=load i8*,i8**%c,align 8
%g4=bitcast i8*%g0 to i8**
store i8*%g3,i8**%g4,align 8
%g5=load i8*,i8**%g,align 8
%g6=getelementptr inbounds i8,i8*%g0,i64 8
%g7=bitcast i8*%g6 to i8**
store i8*%g5,i8**%g7,align 8
%g8=getelementptr inbounds i8,i8*%g0,i64 16
%g9=bitcast i8*%g8 to i32*
store i32%gW,i32*%g9,align 4
%ha=getelementptr inbounds i8,i8*%g0,i64 20
%hb=bitcast i8*%ha to i32*
store i32%gZ,i32*%hb,align 4
%hc=getelementptr inbounds i8,i8*%g0,i64 24
%hd=bitcast i8*%hc to i32*
store i32 3,i32*%hd,align 4
%he=call i8*@sml_alloc(i32 inreg 28)#0
%hf=getelementptr inbounds i8,i8*%he,i64 -4
%hg=bitcast i8*%hf to i32*
store i32 1342177304,i32*%hg,align 4
%hh=load i8*,i8**%m,align 8
%hi=bitcast i8*%he to i8**
store i8*%hh,i8**%hi,align 8
%hj=getelementptr inbounds i8,i8*%he,i64 8
%hk=bitcast i8*%hj to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL11insertWithi_340 to void(...)*),void(...)**%hk,align 8
%hl=getelementptr inbounds i8,i8*%he,i64 16
%hm=bitcast i8*%hl to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL11insertWithi_655 to void(...)*),void(...)**%hm,align 8
%hn=getelementptr inbounds i8,i8*%he,i64 24
%ho=bitcast i8*%hn to i32*
store i32 -2147483647,i32*%ho,align 4
%hp=load i8*,i8**%d,align 8
%hq=bitcast i8*%hp to i32*
%hr=load i32,i32*%hq,align 4
%hs=getelementptr inbounds i8,i8*%hp,i64 4
%ht=bitcast i8*%hs to i32*
%hu=load i32,i32*%ht,align 4
%hv=call i8*@sml_alloc(i32 inreg 28)#0
%hw=getelementptr inbounds i8,i8*%hv,i64 -4
%hx=bitcast i8*%hw to i32*
store i32 1342177304,i32*%hx,align 4
store i8*%hv,i8**%n,align 8
%hy=load i8*,i8**%c,align 8
%hz=bitcast i8*%hv to i8**
store i8*%hy,i8**%hz,align 8
%hA=load i8*,i8**%g,align 8
%hB=getelementptr inbounds i8,i8*%hv,i64 8
%hC=bitcast i8*%hB to i8**
store i8*%hA,i8**%hC,align 8
%hD=getelementptr inbounds i8,i8*%hv,i64 16
%hE=bitcast i8*%hD to i32*
store i32%hr,i32*%hE,align 4
%hF=getelementptr inbounds i8,i8*%hv,i64 20
%hG=bitcast i8*%hF to i32*
store i32%hu,i32*%hG,align 4
%hH=getelementptr inbounds i8,i8*%hv,i64 24
%hI=bitcast i8*%hH to i32*
store i32 3,i32*%hI,align 4
%hJ=call i8*@sml_alloc(i32 inreg 28)#0
%hK=getelementptr inbounds i8,i8*%hJ,i64 -4
%hL=bitcast i8*%hK to i32*
store i32 1342177304,i32*%hL,align 4
%hM=load i8*,i8**%n,align 8
%hN=bitcast i8*%hJ to i8**
store i8*%hM,i8**%hN,align 8
%hO=getelementptr inbounds i8,i8*%hJ,i64 8
%hP=bitcast i8*%hO to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL12insertWithi2_342 to void(...)*),void(...)**%hP,align 8
%hQ=getelementptr inbounds i8,i8*%hJ,i64 16
%hR=bitcast i8*%hQ to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL12insertWithi2_656 to void(...)*),void(...)**%hR,align 8
%hS=getelementptr inbounds i8,i8*%hJ,i64 24
%hT=bitcast i8*%hS to i32*
store i32 -2147483647,i32*%hT,align 4
%hU=load i8*,i8**%d,align 8
%hV=bitcast i8*%hU to i32*
%hW=load i32,i32*%hV,align 4
%hX=getelementptr inbounds i8,i8*%hU,i64 4
%hY=bitcast i8*%hX to i32*
%hZ=load i32,i32*%hY,align 4
%h0=call i8*@sml_alloc(i32 inreg 20)#0
%h1=getelementptr inbounds i8,i8*%h0,i64 -4
%h2=bitcast i8*%h1 to i32*
store i32 1342177296,i32*%h2,align 4
store i8*%h0,i8**%o,align 8
%h3=load i8*,i8**%c,align 8
%h4=bitcast i8*%h0 to i8**
store i8*%h3,i8**%h4,align 8
%h5=getelementptr inbounds i8,i8*%h0,i64 8
%h6=bitcast i8*%h5 to i32*
store i32%hW,i32*%h6,align 4
%h7=getelementptr inbounds i8,i8*%h0,i64 12
%h8=bitcast i8*%h7 to i32*
store i32%hZ,i32*%h8,align 4
%h9=getelementptr inbounds i8,i8*%h0,i64 16
%ia=bitcast i8*%h9 to i32*
store i32 1,i32*%ia,align 4
%ib=call i8*@sml_alloc(i32 inreg 28)#0
%ic=getelementptr inbounds i8,i8*%ib,i64 -4
%id=bitcast i8*%ic to i32*
store i32 1342177304,i32*%id,align 4
%ie=load i8*,i8**%o,align 8
%if=bitcast i8*%ib to i8**
store i8*%ie,i8**%if,align 8
%ig=getelementptr inbounds i8,i8*%ib,i64 8
%ih=bitcast i8*%ig to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL8inDomain_347 to void(...)*),void(...)**%ih,align 8
%ii=getelementptr inbounds i8,i8*%ib,i64 16
%ij=bitcast i8*%ii to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL8inDomain_660 to void(...)*),void(...)**%ij,align 8
%ik=getelementptr inbounds i8,i8*%ib,i64 24
%il=bitcast i8*%ik to i32*
store i32 -2147483647,i32*%il,align 4
%im=load i8*,i8**%d,align 8
%in=bitcast i8*%im to i32*
%io=load i32,i32*%in,align 4
%ip=getelementptr inbounds i8,i8*%im,i64 4
%iq=bitcast i8*%ip to i32*
%ir=load i32,i32*%iq,align 4
%is=call i8*@sml_alloc(i32 inreg 20)#0
%it=getelementptr inbounds i8,i8*%is,i64 -4
%iu=bitcast i8*%it to i32*
store i32 1342177296,i32*%iu,align 4
store i8*%is,i8**%p,align 8
%iv=load i8*,i8**%c,align 8
%iw=bitcast i8*%is to i8**
store i8*%iv,i8**%iw,align 8
%ix=getelementptr inbounds i8,i8*%is,i64 8
%iy=bitcast i8*%ix to i32*
store i32%io,i32*%iy,align 4
%iz=getelementptr inbounds i8,i8*%is,i64 12
%iA=bitcast i8*%iz to i32*
store i32%ir,i32*%iA,align 4
%iB=getelementptr inbounds i8,i8*%is,i64 16
%iC=bitcast i8*%iB to i32*
store i32 1,i32*%iC,align 4
%iD=call i8*@sml_alloc(i32 inreg 28)#0
%iE=getelementptr inbounds i8,i8*%iD,i64 -4
%iF=bitcast i8*%iE to i32*
store i32 1342177304,i32*%iF,align 4
%iG=load i8*,i8**%p,align 8
%iH=bitcast i8*%iD to i8**
store i8*%iG,i8**%iH,align 8
%iI=getelementptr inbounds i8,i8*%iD,i64 8
%iJ=bitcast i8*%iI to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL4find_352 to void(...)*),void(...)**%iJ,align 8
%iK=getelementptr inbounds i8,i8*%iD,i64 16
%iL=bitcast i8*%iK to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL4find_662 to void(...)*),void(...)**%iL,align 8
%iM=getelementptr inbounds i8,i8*%iD,i64 24
%iN=bitcast i8*%iM to i32*
store i32 -2147483647,i32*%iN,align 4
%iO=load i8*,i8**%d,align 8
%iP=bitcast i8*%iO to i32*
%iQ=load i32,i32*%iP,align 4
%iR=getelementptr inbounds i8,i8*%iO,i64 4
%iS=bitcast i8*%iR to i32*
%iT=load i32,i32*%iS,align 4
%iU=call i8*@sml_alloc(i32 inreg 20)#0
%iV=getelementptr inbounds i8,i8*%iU,i64 -4
%iW=bitcast i8*%iV to i32*
store i32 1342177296,i32*%iW,align 4
store i8*%iU,i8**%q,align 8
%iX=load i8*,i8**%c,align 8
%iY=bitcast i8*%iU to i8**
store i8*%iX,i8**%iY,align 8
%iZ=getelementptr inbounds i8,i8*%iU,i64 8
%i0=bitcast i8*%iZ to i32*
store i32%iQ,i32*%i0,align 4
%i1=getelementptr inbounds i8,i8*%iU,i64 12
%i2=bitcast i8*%i1 to i32*
store i32%iT,i32*%i2,align 4
%i3=getelementptr inbounds i8,i8*%iU,i64 16
%i4=bitcast i8*%i3 to i32*
store i32 1,i32*%i4,align 4
%i5=call i8*@sml_alloc(i32 inreg 28)#0
%i6=getelementptr inbounds i8,i8*%i5,i64 -4
%i7=bitcast i8*%i6 to i32*
store i32 1342177304,i32*%i7,align 4
%i8=load i8*,i8**%q,align 8
%i9=bitcast i8*%i5 to i8**
store i8*%i8,i8**%i9,align 8
%ja=getelementptr inbounds i8,i8*%i5,i64 8
%jb=bitcast i8*%ja to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL5findi_357 to void(...)*),void(...)**%jb,align 8
%jc=getelementptr inbounds i8,i8*%i5,i64 16
%jd=bitcast i8*%jc to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL5findi_664 to void(...)*),void(...)**%jd,align 8
%je=getelementptr inbounds i8,i8*%i5,i64 24
%jf=bitcast i8*%je to i32*
store i32 -2147483647,i32*%jf,align 4
%jg=load i8*,i8**%d,align 8
%jh=bitcast i8*%jg to i32*
%ji=load i32,i32*%jh,align 4
%jj=getelementptr inbounds i8,i8*%jg,i64 4
%jk=bitcast i8*%jj to i32*
%jl=load i32,i32*%jk,align 4
%jm=call i8*@sml_alloc(i32 inreg 20)#0
%jn=getelementptr inbounds i8,i8*%jm,i64 -4
%jo=bitcast i8*%jn to i32*
store i32 1342177296,i32*%jo,align 4
store i8*%jm,i8**%r,align 8
%jp=load i8*,i8**%c,align 8
%jq=bitcast i8*%jm to i8**
store i8*%jp,i8**%jq,align 8
%jr=getelementptr inbounds i8,i8*%jm,i64 8
%js=bitcast i8*%jr to i32*
store i32%ji,i32*%js,align 4
%jt=getelementptr inbounds i8,i8*%jm,i64 12
%ju=bitcast i8*%jt to i32*
store i32%jl,i32*%ju,align 4
%jv=getelementptr inbounds i8,i8*%jm,i64 16
%jw=bitcast i8*%jv to i32*
store i32 1,i32*%jw,align 4
%jx=call i8*@sml_alloc(i32 inreg 28)#0
%jy=getelementptr inbounds i8,i8*%jx,i64 -4
%jz=bitcast i8*%jy to i32*
store i32 1342177304,i32*%jz,align 4
%jA=load i8*,i8**%r,align 8
%jB=bitcast i8*%jx to i8**
store i8*%jA,i8**%jB,align 8
%jC=getelementptr inbounds i8,i8*%jx,i64 8
%jD=bitcast i8*%jC to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL6lookup_363 to void(...)*),void(...)**%jD,align 8
%jE=getelementptr inbounds i8,i8*%jx,i64 16
%jF=bitcast i8*%jE to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL6lookup_666 to void(...)*),void(...)**%jF,align 8
%jG=getelementptr inbounds i8,i8*%jx,i64 24
%jH=bitcast i8*%jG to i32*
store i32 -2147483647,i32*%jH,align 4
%jI=load i8*,i8**%d,align 8
%jJ=bitcast i8*%jI to i32*
%jK=load i32,i32*%jJ,align 4
%jL=getelementptr inbounds i8,i8*%jI,i64 4
%jM=bitcast i8*%jL to i32*
%jN=load i32,i32*%jM,align 4
%jO=call i8*@sml_alloc(i32 inreg 36)#0
%jP=getelementptr inbounds i8,i8*%jO,i64 -4
%jQ=bitcast i8*%jP to i32*
store i32 1342177312,i32*%jQ,align 4
store i8*%jO,i8**%s,align 8
%jR=load i8*,i8**%c,align 8
%jS=bitcast i8*%jO to i8**
store i8*%jR,i8**%jS,align 8
%jT=load i8*,i8**%g,align 8
%jU=getelementptr inbounds i8,i8*%jO,i64 8
%jV=bitcast i8*%jU to i8**
store i8*%jT,i8**%jV,align 8
%jW=load i8*,i8**%j,align 8
%jX=getelementptr inbounds i8,i8*%jO,i64 16
%jY=bitcast i8*%jX to i8**
store i8*%jW,i8**%jY,align 8
%jZ=getelementptr inbounds i8,i8*%jO,i64 24
%j0=bitcast i8*%jZ to i32*
store i32%jK,i32*%j0,align 4
%j1=getelementptr inbounds i8,i8*%jO,i64 28
%j2=bitcast i8*%j1 to i32*
store i32%jN,i32*%j2,align 4
%j3=getelementptr inbounds i8,i8*%jO,i64 32
%j4=bitcast i8*%j3 to i32*
store i32 7,i32*%j4,align 4
%j5=call i8*@sml_alloc(i32 inreg 28)#0
%j6=getelementptr inbounds i8,i8*%j5,i64 -4
%j7=bitcast i8*%j6 to i32*
store i32 1342177304,i32*%j7,align 4
%j8=load i8*,i8**%s,align 8
%j9=bitcast i8*%j5 to i8**
store i8*%j8,i8**%j9,align 8
%ka=getelementptr inbounds i8,i8*%j5,i64 8
%kb=bitcast i8*%ka to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL6remove_366 to void(...)*),void(...)**%kb,align 8
%kc=getelementptr inbounds i8,i8*%j5,i64 16
%kd=bitcast i8*%kc to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL6remove_667 to void(...)*),void(...)**%kd,align 8
%ke=getelementptr inbounds i8,i8*%j5,i64 24
%kf=bitcast i8*%ke to i32*
store i32 -2147483647,i32*%kf,align 4
%kg=load i8*,i8**%d,align 8
%kh=bitcast i8*%kg to i32*
%ki=load i32,i32*%kh,align 4
%kj=getelementptr inbounds i8,i8*%kg,i64 4
%kk=bitcast i8*%kj to i32*
%kl=load i32,i32*%kk,align 4
%km=call i8*@sml_alloc(i32 inreg 36)#0
%kn=getelementptr inbounds i8,i8*%km,i64 -4
%ko=bitcast i8*%kn to i32*
store i32 1342177312,i32*%ko,align 4
store i8*%km,i8**%t,align 8
%kp=load i8*,i8**%c,align 8
%kq=bitcast i8*%km to i8**
store i8*%kp,i8**%kq,align 8
%kr=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%ks=getelementptr inbounds i8,i8*%km,i64 8
%kt=bitcast i8*%ks to i8**
store i8*%kr,i8**%kt,align 8
%ku=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%kv=getelementptr inbounds i8,i8*%km,i64 16
%kw=bitcast i8*%kv to i8**
store i8*%ku,i8**%kw,align 8
%kx=getelementptr inbounds i8,i8*%km,i64 24
%ky=bitcast i8*%kx to i32*
store i32%ki,i32*%ky,align 4
%kz=getelementptr inbounds i8,i8*%km,i64 28
%kA=bitcast i8*%kz to i32*
store i32%kl,i32*%kA,align 4
%kB=getelementptr inbounds i8,i8*%km,i64 32
%kC=bitcast i8*%kB to i32*
store i32 7,i32*%kC,align 4
%kD=call i8*@sml_alloc(i32 inreg 28)#0
%kE=getelementptr inbounds i8,i8*%kD,i64 -4
%kF=bitcast i8*%kE to i32*
store i32 1342177304,i32*%kF,align 4
%kG=load i8*,i8**%t,align 8
%kH=bitcast i8*%kD to i8**
store i8*%kG,i8**%kH,align 8
%kI=getelementptr inbounds i8,i8*%kD,i64 8
%kJ=bitcast i8*%kI to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL7removei_369 to void(...)*),void(...)**%kJ,align 8
%kK=getelementptr inbounds i8,i8*%kD,i64 16
%kL=bitcast i8*%kK to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL7removei_668 to void(...)*),void(...)**%kL,align 8
%kM=getelementptr inbounds i8,i8*%kD,i64 24
%kN=bitcast i8*%kM to i32*
store i32 -2147483647,i32*%kN,align 4
%kO=load i8*,i8**%d,align 8
%kP=getelementptr inbounds i8,i8*%kO,i64 4
%kQ=bitcast i8*%kP to i32*
%kR=load i32,i32*%kQ,align 4
%kS=call i8*@sml_alloc(i32 inreg 12)#0
%kT=bitcast i8*%kS to i32*
%kU=getelementptr inbounds i8,i8*%kS,i64 -4
%kV=bitcast i8*%kU to i32*
store i32 1342177288,i32*%kV,align 4
store i8*%kS,i8**%g,align 8
store i32%kR,i32*%kT,align 4
%kW=getelementptr inbounds i8,i8*%kS,i64 8
%kX=bitcast i8*%kW to i32*
store i32 0,i32*%kX,align 4
%kY=call i8*@sml_alloc(i32 inreg 28)#0
%kZ=getelementptr inbounds i8,i8*%kY,i64 -4
%k0=bitcast i8*%kZ to i32*
store i32 1342177304,i32*%k0,align 4
%k1=load i8*,i8**%g,align 8
%k2=bitcast i8*%kY to i8**
store i8*%k1,i8**%k2,align 8
%k3=getelementptr inbounds i8,i8*%kY,i64 8
%k4=bitcast i8*%k3 to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL9listItems_373 to void(...)*),void(...)**%k4,align 8
%k5=getelementptr inbounds i8,i8*%kY,i64 16
%k6=bitcast i8*%k5 to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL9listItems_670 to void(...)*),void(...)**%k6,align 8
%k7=getelementptr inbounds i8,i8*%kY,i64 24
%k8=bitcast i8*%k7 to i32*
store i32 -2147483647,i32*%k8,align 4
%k9=load i8*,i8**%d,align 8
%la=bitcast i8*%k9 to i32*
%lb=load i32,i32*%la,align 4
%lc=getelementptr inbounds i8,i8*%k9,i64 4
%ld=bitcast i8*%lc to i32*
%le=load i32,i32*%ld,align 4
%lf=call i8*@sml_alloc(i32 inreg 12)#0
%lg=bitcast i8*%lf to i32*
%lh=getelementptr inbounds i8,i8*%lf,i64 -4
%li=bitcast i8*%lh to i32*
store i32 1342177288,i32*%li,align 4
store i8*%lf,i8**%j,align 8
store i32%lb,i32*%lg,align 4
%lj=getelementptr inbounds i8,i8*%lf,i64 4
%lk=bitcast i8*%lj to i32*
store i32%le,i32*%lk,align 4
%ll=getelementptr inbounds i8,i8*%lf,i64 8
%lm=bitcast i8*%ll to i32*
store i32 0,i32*%lm,align 4
%ln=call i8*@sml_alloc(i32 inreg 28)#0
%lo=getelementptr inbounds i8,i8*%ln,i64 -4
%lp=bitcast i8*%lo to i32*
store i32 1342177304,i32*%lp,align 4
%lq=load i8*,i8**%j,align 8
%lr=bitcast i8*%ln to i8**
store i8*%lq,i8**%lr,align 8
%ls=getelementptr inbounds i8,i8*%ln,i64 8
%lt=bitcast i8*%ls to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL10listItemsi_377 to void(...)*),void(...)**%lt,align 8
%lu=getelementptr inbounds i8,i8*%ln,i64 16
%lv=bitcast i8*%lu to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL10listItemsi_672 to void(...)*),void(...)**%lv,align 8
%lw=getelementptr inbounds i8,i8*%ln,i64 24
%lx=bitcast i8*%lw to i32*
store i32 -2147483647,i32*%lx,align 4
%ly=load i8*,i8**%d,align 8
%lz=bitcast i8*%ly to i32*
%lA=load i32,i32*%lz,align 4
%lB=getelementptr inbounds i8,i8*%ly,i64 4
%lC=bitcast i8*%lB to i32*
%lD=load i32,i32*%lC,align 4
%lE=call i8*@sml_alloc(i32 inreg 12)#0
%lF=bitcast i8*%lE to i32*
%lG=getelementptr inbounds i8,i8*%lE,i64 -4
%lH=bitcast i8*%lG to i32*
store i32 1342177288,i32*%lH,align 4
store i8*%lE,i8**%u,align 8
store i32%lA,i32*%lF,align 4
%lI=getelementptr inbounds i8,i8*%lE,i64 4
%lJ=bitcast i8*%lI to i32*
store i32%lD,i32*%lJ,align 4
%lK=getelementptr inbounds i8,i8*%lE,i64 8
%lL=bitcast i8*%lK to i32*
store i32 0,i32*%lL,align 4
%lM=call i8*@sml_alloc(i32 inreg 28)#0
%lN=getelementptr inbounds i8,i8*%lM,i64 -4
%lO=bitcast i8*%lN to i32*
store i32 1342177304,i32*%lO,align 4
%lP=load i8*,i8**%u,align 8
%lQ=bitcast i8*%lM to i8**
store i8*%lP,i8**%lQ,align 8
%lR=getelementptr inbounds i8,i8*%lM,i64 8
%lS=bitcast i8*%lR to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL8listKeys_381 to void(...)*),void(...)**%lS,align 8
%lT=getelementptr inbounds i8,i8*%lM,i64 16
%lU=bitcast i8*%lT to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL8listKeys_674 to void(...)*),void(...)**%lU,align 8
%lV=getelementptr inbounds i8,i8*%lM,i64 24
%lW=bitcast i8*%lV to i32*
store i32 -2147483647,i32*%lW,align 4
%lX=load i8*,i8**%d,align 8
%lY=getelementptr inbounds i8,i8*%lX,i64 4
%lZ=bitcast i8*%lY to i32*
%l0=load i32,i32*%lZ,align 4
%l1=call i8*@sml_alloc(i32 inreg 12)#0
%l2=bitcast i8*%l1 to i32*
%l3=getelementptr inbounds i8,i8*%l1,i64 -4
%l4=bitcast i8*%l3 to i32*
store i32 1342177288,i32*%l4,align 4
store i8*%l1,i8**%v,align 8
store i32%l0,i32*%l2,align 4
%l5=getelementptr inbounds i8,i8*%l1,i64 8
%l6=bitcast i8*%l5 to i32*
store i32 0,i32*%l6,align 4
%l7=call i8*@sml_alloc(i32 inreg 28)#0
%l8=getelementptr inbounds i8,i8*%l7,i64 -4
%l9=bitcast i8*%l8 to i32*
store i32 1342177304,i32*%l9,align 4
%ma=load i8*,i8**%v,align 8
%mb=bitcast i8*%l7 to i8**
store i8*%ma,i8**%mb,align 8
%mc=getelementptr inbounds i8,i8*%l7,i64 8
%md=bitcast i8*%mc to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL4left_383 to void(...)*),void(...)**%md,align 8
%me=getelementptr inbounds i8,i8*%l7,i64 16
%mf=bitcast i8*%me to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL4left_675 to void(...)*),void(...)**%mf,align 8
%mg=getelementptr inbounds i8,i8*%l7,i64 24
%mh=bitcast i8*%mg to i32*
store i32 -2147483647,i32*%mh,align 4
%mi=load i8*,i8**%d,align 8
%mj=getelementptr inbounds i8,i8*%mi,i64 4
%mk=bitcast i8*%mj to i32*
%ml=load i32,i32*%mk,align 4
%mm=call i8*@sml_alloc(i32 inreg 20)#0
%mn=getelementptr inbounds i8,i8*%mm,i64 -4
%mo=bitcast i8*%mn to i32*
store i32 1342177296,i32*%mo,align 4
store i8*%mm,i8**%w,align 8
%mp=load i8*,i8**%v,align 8
%mq=bitcast i8*%mm to i8**
store i8*%mp,i8**%mq,align 8
%mr=getelementptr inbounds i8,i8*%mm,i64 8
%ms=bitcast i8*%mr to i32*
store i32%ml,i32*%ms,align 4
%mt=getelementptr inbounds i8,i8*%mm,i64 16
%mu=bitcast i8*%mt to i32*
store i32 1,i32*%mu,align 4
%mv=call i8*@sml_alloc(i32 inreg 28)#0
%mw=getelementptr inbounds i8,i8*%mv,i64 -4
%mx=bitcast i8*%mw to i32*
store i32 1342177304,i32*%mx,align 4
%my=load i8*,i8**%w,align 8
%mz=bitcast i8*%mv to i8**
store i8*%my,i8**%mz,align 8
%mA=getelementptr inbounds i8,i8*%mv,i64 8
%mB=bitcast i8*%mA to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL4next_386 to void(...)*),void(...)**%mB,align 8
%mC=getelementptr inbounds i8,i8*%mv,i64 16
%mD=bitcast i8*%mC to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL4next_676 to void(...)*),void(...)**%mD,align 8
%mE=getelementptr inbounds i8,i8*%mv,i64 24
%mF=bitcast i8*%mE to i32*
store i32 -2147483647,i32*%mF,align 4
%mG=load i8*,i8**%d,align 8
%mH=bitcast i8*%mG to i32*
%mI=load i32,i32*%mH,align 4
%mJ=getelementptr inbounds i8,i8*%mG,i64 4
%mK=bitcast i8*%mJ to i32*
%mL=load i32,i32*%mK,align 4
%mM=call i8*@sml_alloc(i32 inreg 36)#0
%mN=getelementptr inbounds i8,i8*%mM,i64 -4
%mO=bitcast i8*%mN to i32*
store i32 1342177312,i32*%mO,align 4
store i8*%mM,i8**%x,align 8
%mP=load i8*,i8**%c,align 8
%mQ=bitcast i8*%mM to i8**
store i8*%mP,i8**%mQ,align 8
%mR=load i8*,i8**%v,align 8
store i8*null,i8**%v,align 8
%mS=getelementptr inbounds i8,i8*%mM,i64 8
%mT=bitcast i8*%mS to i8**
store i8*%mR,i8**%mT,align 8
%mU=load i8*,i8**%w,align 8
store i8*null,i8**%w,align 8
%mV=getelementptr inbounds i8,i8*%mM,i64 16
%mW=bitcast i8*%mV to i8**
store i8*%mU,i8**%mW,align 8
%mX=getelementptr inbounds i8,i8*%mM,i64 24
%mY=bitcast i8*%mX to i32*
store i32%mI,i32*%mY,align 4
%mZ=getelementptr inbounds i8,i8*%mM,i64 28
%m0=bitcast i8*%mZ to i32*
store i32%mL,i32*%m0,align 4
%m1=getelementptr inbounds i8,i8*%mM,i64 32
%m2=bitcast i8*%m1 to i32*
store i32 7,i32*%m2,align 4
%m3=call i8*@sml_alloc(i32 inreg 28)#0
%m4=getelementptr inbounds i8,i8*%m3,i64 -4
%m5=bitcast i8*%m4 to i32*
store i32 1342177304,i32*%m5,align 4
%m6=load i8*,i8**%x,align 8
%m7=bitcast i8*%m3 to i8**
store i8*%m6,i8**%m7,align 8
%m8=getelementptr inbounds i8,i8*%m3,i64 8
%m9=bitcast i8*%m8 to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL7collate_390 to void(...)*),void(...)**%m9,align 8
%na=getelementptr inbounds i8,i8*%m3,i64 16
%nb=bitcast i8*%na to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL7collate_679 to void(...)*),void(...)**%nb,align 8
%nc=getelementptr inbounds i8,i8*%m3,i64 24
%nd=bitcast i8*%nc to i32*
store i32 -2147483647,i32*%nd,align 4
%ne=load i8*,i8**%d,align 8
%nf=bitcast i8*%ne to i32*
%ng=load i32,i32*%nf,align 4
%nh=getelementptr inbounds i8,i8*%ne,i64 4
%ni=bitcast i8*%nh to i32*
%nj=load i32,i32*%ni,align 4
%nk=call i8*@sml_alloc(i32 inreg 12)#0
%nl=bitcast i8*%nk to i32*
%nm=getelementptr inbounds i8,i8*%nk,i64 -4
%nn=bitcast i8*%nm to i32*
store i32 1342177288,i32*%nn,align 4
store i8*%nk,i8**%v,align 8
store i32%ng,i32*%nl,align 4
%no=getelementptr inbounds i8,i8*%nk,i64 4
%np=bitcast i8*%no to i32*
store i32%nj,i32*%np,align 4
%nq=getelementptr inbounds i8,i8*%nk,i64 8
%nr=bitcast i8*%nq to i32*
store i32 0,i32*%nr,align 4
%ns=call i8*@sml_alloc(i32 inreg 28)#0
%nt=getelementptr inbounds i8,i8*%ns,i64 -4
%nu=bitcast i8*%nt to i32*
store i32 1342177304,i32*%nu,align 4
%nv=load i8*,i8**%v,align 8
%nw=bitcast i8*%ns to i8**
store i8*%nv,i8**%nw,align 8
%nx=getelementptr inbounds i8,i8*%ns,i64 8
%ny=bitcast i8*%nx to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL4appi_394 to void(...)*),void(...)**%ny,align 8
%nz=getelementptr inbounds i8,i8*%ns,i64 16
%nA=bitcast i8*%nz to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL4appi_682 to void(...)*),void(...)**%nA,align 8
%nB=getelementptr inbounds i8,i8*%ns,i64 24
%nC=bitcast i8*%nB to i32*
store i32 -2147483647,i32*%nC,align 4
%nD=load i8*,i8**%d,align 8
%nE=getelementptr inbounds i8,i8*%nD,i64 4
%nF=bitcast i8*%nE to i32*
%nG=load i32,i32*%nF,align 4
%nH=call i8*@sml_alloc(i32 inreg 12)#0
%nI=bitcast i8*%nH to i32*
%nJ=getelementptr inbounds i8,i8*%nH,i64 -4
%nK=bitcast i8*%nJ to i32*
store i32 1342177288,i32*%nK,align 4
store i8*%nH,i8**%w,align 8
store i32%nG,i32*%nI,align 4
%nL=getelementptr inbounds i8,i8*%nH,i64 8
%nM=bitcast i8*%nL to i32*
store i32 0,i32*%nM,align 4
%nN=call i8*@sml_alloc(i32 inreg 28)#0
%nO=getelementptr inbounds i8,i8*%nN,i64 -4
%nP=bitcast i8*%nO to i32*
store i32 1342177304,i32*%nP,align 4
%nQ=load i8*,i8**%w,align 8
%nR=bitcast i8*%nN to i8**
store i8*%nQ,i8**%nR,align 8
%nS=getelementptr inbounds i8,i8*%nN,i64 8
%nT=bitcast i8*%nS to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL3app_398 to void(...)*),void(...)**%nT,align 8
%nU=getelementptr inbounds i8,i8*%nN,i64 16
%nV=bitcast i8*%nU to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL3app_685 to void(...)*),void(...)**%nV,align 8
%nW=getelementptr inbounds i8,i8*%nN,i64 24
%nX=bitcast i8*%nW to i32*
store i32 -2147483647,i32*%nX,align 4
%nY=load i8*,i8**%d,align 8
%nZ=bitcast i8*%nY to i32*
%n0=load i32,i32*%nZ,align 4
%n1=getelementptr inbounds i8,i8*%nY,i64 4
%n2=bitcast i8*%n1 to i32*
%n3=load i32,i32*%n2,align 4
%n4=call i8*@sml_alloc(i32 inreg 12)#0
%n5=bitcast i8*%n4 to i32*
%n6=getelementptr inbounds i8,i8*%n4,i64 -4
%n7=bitcast i8*%n6 to i32*
store i32 1342177288,i32*%n7,align 4
store i8*%n4,i8**%y,align 8
store i32%n0,i32*%n5,align 4
%n8=getelementptr inbounds i8,i8*%n4,i64 4
%n9=bitcast i8*%n8 to i32*
store i32%n3,i32*%n9,align 4
%oa=getelementptr inbounds i8,i8*%n4,i64 8
%ob=bitcast i8*%oa to i32*
store i32 0,i32*%ob,align 4
%oc=call i8*@sml_alloc(i32 inreg 28)#0
%od=getelementptr inbounds i8,i8*%oc,i64 -4
%oe=bitcast i8*%od to i32*
store i32 1342177304,i32*%oe,align 4
%of=load i8*,i8**%y,align 8
%og=bitcast i8*%oc to i8**
store i8*%of,i8**%og,align 8
%oh=getelementptr inbounds i8,i8*%oc,i64 8
%oi=bitcast i8*%oh to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32)*@_SMLL4mapi_402 to void(...)*),void(...)**%oi,align 8
%oj=getelementptr inbounds i8,i8*%oc,i64 16
%ok=bitcast i8*%oj to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLL4mapi_686 to void(...)*),void(...)**%ok,align 8
%ol=getelementptr inbounds i8,i8*%oc,i64 24
%om=bitcast i8*%ol to i32*
store i32 -2147483647,i32*%om,align 4
%on=load i8*,i8**%d,align 8
%oo=bitcast i8*%on to i32*
%op=load i32,i32*%oo,align 4
%oq=getelementptr inbounds i8,i8*%on,i64 4
%or=bitcast i8*%oq to i32*
%os=load i32,i32*%or,align 4
%ot=call i8*@sml_alloc(i32 inreg 12)#0
%ou=bitcast i8*%ot to i32*
%ov=getelementptr inbounds i8,i8*%ot,i64 -4
%ow=bitcast i8*%ov to i32*
store i32 1342177288,i32*%ow,align 4
store i8*%ot,i8**%z,align 8
store i32%op,i32*%ou,align 4
%ox=getelementptr inbounds i8,i8*%ot,i64 4
%oy=bitcast i8*%ox to i32*
store i32%os,i32*%oy,align 4
%oz=getelementptr inbounds i8,i8*%ot,i64 8
%oA=bitcast i8*%oz to i32*
store i32 0,i32*%oA,align 4
%oB=call i8*@sml_alloc(i32 inreg 28)#0
%oC=getelementptr inbounds i8,i8*%oB,i64 -4
%oD=bitcast i8*%oC to i32*
store i32 1342177304,i32*%oD,align 4
%oE=load i8*,i8**%z,align 8
%oF=bitcast i8*%oB to i8**
store i8*%oE,i8**%oF,align 8
%oG=getelementptr inbounds i8,i8*%oB,i64 8
%oH=bitcast i8*%oG to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32)*@_SMLL5mapi2_406 to void(...)*),void(...)**%oH,align 8
%oI=getelementptr inbounds i8,i8*%oB,i64 16
%oJ=bitcast i8*%oI to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLL5mapi2_687 to void(...)*),void(...)**%oJ,align 8
%oK=getelementptr inbounds i8,i8*%oB,i64 24
%oL=bitcast i8*%oK to i32*
store i32 -2147483647,i32*%oL,align 4
%oM=load i8*,i8**%d,align 8
%oN=bitcast i8*%oM to i32*
%oO=load i32,i32*%oN,align 4
%oP=getelementptr inbounds i8,i8*%oM,i64 4
%oQ=bitcast i8*%oP to i32*
%oR=load i32,i32*%oQ,align 4
%oS=call i8*@sml_alloc(i32 inreg 12)#0
%oT=bitcast i8*%oS to i32*
%oU=getelementptr inbounds i8,i8*%oS,i64 -4
%oV=bitcast i8*%oU to i32*
store i32 1342177288,i32*%oV,align 4
store i8*%oS,i8**%A,align 8
store i32%oO,i32*%oT,align 4
%oW=getelementptr inbounds i8,i8*%oS,i64 4
%oX=bitcast i8*%oW to i32*
store i32%oR,i32*%oX,align 4
%oY=getelementptr inbounds i8,i8*%oS,i64 8
%oZ=bitcast i8*%oY to i32*
store i32 0,i32*%oZ,align 4
%o0=call i8*@sml_alloc(i32 inreg 28)#0
%o1=getelementptr inbounds i8,i8*%o0,i64 -4
%o2=bitcast i8*%o1 to i32*
store i32 1342177304,i32*%o2,align 4
%o3=load i8*,i8**%A,align 8
%o4=bitcast i8*%o0 to i8**
store i8*%o3,i8**%o4,align 8
%o5=getelementptr inbounds i8,i8*%o0,i64 8
%o6=bitcast i8*%o5 to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32)*@_SMLL6foldli_411 to void(...)*),void(...)**%o6,align 8
%o7=getelementptr inbounds i8,i8*%o0,i64 16
%o8=bitcast i8*%o7 to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLL6foldli_688 to void(...)*),void(...)**%o8,align 8
%o9=getelementptr inbounds i8,i8*%o0,i64 24
%pa=bitcast i8*%o9 to i32*
store i32 -2147483647,i32*%pa,align 4
%pb=load i8*,i8**%d,align 8
%pc=getelementptr inbounds i8,i8*%pb,i64 4
%pd=bitcast i8*%pc to i32*
%pe=load i32,i32*%pd,align 4
%pf=call i8*@sml_alloc(i32 inreg 20)#0
%pg=getelementptr inbounds i8,i8*%pf,i64 -4
%ph=bitcast i8*%pg to i32*
store i32 1342177296,i32*%ph,align 4
store i8*%pf,i8**%B,align 8
%pi=load i8*,i8**%A,align 8
%pj=bitcast i8*%pf to i8**
store i8*%pi,i8**%pj,align 8
%pk=getelementptr inbounds i8,i8*%pf,i64 8
%pl=bitcast i8*%pk to i32*
store i32%pe,i32*%pl,align 4
%pm=getelementptr inbounds i8,i8*%pf,i64 16
%pn=bitcast i8*%pm to i32*
store i32 1,i32*%pn,align 4
%po=call i8*@sml_alloc(i32 inreg 28)#0
%pp=getelementptr inbounds i8,i8*%po,i64 -4
%pq=bitcast i8*%pp to i32*
store i32 1342177304,i32*%pq,align 4
%pr=load i8*,i8**%B,align 8
%ps=bitcast i8*%po to i8**
store i8*%pr,i8**%ps,align 8
%pt=getelementptr inbounds i8,i8*%po,i64 8
%pu=bitcast i8*%pt to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32)*@_SMLL5foldl_416 to void(...)*),void(...)**%pu,align 8
%pv=getelementptr inbounds i8,i8*%po,i64 16
%pw=bitcast i8*%pv to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLL5foldl_689 to void(...)*),void(...)**%pw,align 8
%px=getelementptr inbounds i8,i8*%po,i64 24
%py=bitcast i8*%px to i32*
store i32 -2147483647,i32*%py,align 4
%pz=load i8*,i8**%d,align 8
%pA=bitcast i8*%pz to i32*
%pB=load i32,i32*%pA,align 4
%pC=getelementptr inbounds i8,i8*%pz,i64 4
%pD=bitcast i8*%pC to i32*
%pE=load i32,i32*%pD,align 4
%pF=call i8*@sml_alloc(i32 inreg 12)#0
%pG=bitcast i8*%pF to i32*
%pH=getelementptr inbounds i8,i8*%pF,i64 -4
%pI=bitcast i8*%pH to i32*
store i32 1342177288,i32*%pI,align 4
store i8*%pF,i8**%C,align 8
store i32%pB,i32*%pG,align 4
%pJ=getelementptr inbounds i8,i8*%pF,i64 4
%pK=bitcast i8*%pJ to i32*
store i32%pE,i32*%pK,align 4
%pL=getelementptr inbounds i8,i8*%pF,i64 8
%pM=bitcast i8*%pL to i32*
store i32 0,i32*%pM,align 4
%pN=call i8*@sml_alloc(i32 inreg 28)#0
%pO=getelementptr inbounds i8,i8*%pN,i64 -4
%pP=bitcast i8*%pO to i32*
store i32 1342177304,i32*%pP,align 4
%pQ=load i8*,i8**%C,align 8
%pR=bitcast i8*%pN to i8**
store i8*%pQ,i8**%pR,align 8
%pS=getelementptr inbounds i8,i8*%pN,i64 8
%pT=bitcast i8*%pS to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32)*@_SMLL6foldri_421 to void(...)*),void(...)**%pT,align 8
%pU=getelementptr inbounds i8,i8*%pN,i64 16
%pV=bitcast i8*%pU to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLL6foldri_690 to void(...)*),void(...)**%pV,align 8
%pW=getelementptr inbounds i8,i8*%pN,i64 24
%pX=bitcast i8*%pW to i32*
store i32 -2147483647,i32*%pX,align 4
%pY=load i8*,i8**%d,align 8
%pZ=getelementptr inbounds i8,i8*%pY,i64 4
%p0=bitcast i8*%pZ to i32*
%p1=load i32,i32*%p0,align 4
%p2=call i8*@sml_alloc(i32 inreg 20)#0
%p3=getelementptr inbounds i8,i8*%p2,i64 -4
%p4=bitcast i8*%p3 to i32*
store i32 1342177296,i32*%p4,align 4
store i8*%p2,i8**%D,align 8
%p5=load i8*,i8**%C,align 8
%p6=bitcast i8*%p2 to i8**
store i8*%p5,i8**%p6,align 8
%p7=getelementptr inbounds i8,i8*%p2,i64 8
%p8=bitcast i8*%p7 to i32*
store i32%p1,i32*%p8,align 4
%p9=getelementptr inbounds i8,i8*%p2,i64 16
%qa=bitcast i8*%p9 to i32*
store i32 1,i32*%qa,align 4
%qb=call i8*@sml_alloc(i32 inreg 28)#0
%qc=getelementptr inbounds i8,i8*%qb,i64 -4
%qd=bitcast i8*%qc to i32*
store i32 1342177304,i32*%qd,align 4
%qe=load i8*,i8**%D,align 8
%qf=bitcast i8*%qb to i8**
store i8*%qe,i8**%qf,align 8
%qg=getelementptr inbounds i8,i8*%qb,i64 8
%qh=bitcast i8*%qg to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32)*@_SMLL5foldr_426 to void(...)*),void(...)**%qh,align 8
%qi=getelementptr inbounds i8,i8*%qb,i64 16
%qj=bitcast i8*%qi to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLL5foldr_691 to void(...)*),void(...)**%qj,align 8
%qk=getelementptr inbounds i8,i8*%qb,i64 24
%ql=bitcast i8*%qk to i32*
store i32 -2147483647,i32*%ql,align 4
%qm=load i8*,i8**%d,align 8
%qn=bitcast i8*%qm to i32*
%qo=load i32,i32*%qn,align 4
%qp=getelementptr inbounds i8,i8*%qm,i64 4
%qq=bitcast i8*%qp to i32*
%qr=load i32,i32*%qq,align 4
%qs=call i8*@sml_alloc(i32 inreg 36)#0
%qt=getelementptr inbounds i8,i8*%qs,i64 -4
%qu=bitcast i8*%qt to i32*
store i32 1342177312,i32*%qu,align 4
store i8*%qs,i8**%E,align 8
%qv=load i8*,i8**%i,align 8
%qw=bitcast i8*%qs to i8**
store i8*%qv,i8**%qw,align 8
%qx=load i8*,i8**%p,align 8
%qy=getelementptr inbounds i8,i8*%qs,i64 8
%qz=bitcast i8*%qy to i8**
store i8*%qx,i8**%qz,align 8
%qA=load i8*,i8**%A,align 8
%qB=getelementptr inbounds i8,i8*%qs,i64 16
%qC=bitcast i8*%qB to i8**
store i8*%qA,i8**%qC,align 8
%qD=getelementptr inbounds i8,i8*%qs,i64 24
%qE=bitcast i8*%qD to i32*
store i32%qo,i32*%qE,align 4
%qF=getelementptr inbounds i8,i8*%qs,i64 28
%qG=bitcast i8*%qF to i32*
store i32%qr,i32*%qG,align 4
%qH=getelementptr inbounds i8,i8*%qs,i64 32
%qI=bitcast i8*%qH to i32*
store i32 7,i32*%qI,align 4
%qJ=call i8*@sml_alloc(i32 inreg 28)#0
%qK=getelementptr inbounds i8,i8*%qJ,i64 -4
%qL=bitcast i8*%qK to i32*
store i32 1342177304,i32*%qL,align 4
%qM=load i8*,i8**%E,align 8
%qN=bitcast i8*%qJ to i8**
store i8*%qM,i8**%qN,align 8
%qO=getelementptr inbounds i8,i8*%qJ,i64 8
%qP=bitcast i8*%qO to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL9unionWith_433 to void(...)*),void(...)**%qP,align 8
%qQ=getelementptr inbounds i8,i8*%qJ,i64 16
%qR=bitcast i8*%qQ to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL9unionWith_693 to void(...)*),void(...)**%qR,align 8
%qS=getelementptr inbounds i8,i8*%qJ,i64 24
%qT=bitcast i8*%qS to i32*
store i32 -2147483647,i32*%qT,align 4
%qU=load i8*,i8**%d,align 8
%qV=bitcast i8*%qU to i32*
%qW=load i32,i32*%qV,align 4
%qX=getelementptr inbounds i8,i8*%qU,i64 4
%qY=bitcast i8*%qX to i32*
%qZ=load i32,i32*%qY,align 4
%q0=call i8*@sml_alloc(i32 inreg 36)#0
%q1=getelementptr inbounds i8,i8*%q0,i64 -4
%q2=bitcast i8*%q1 to i32*
store i32 1342177312,i32*%q2,align 4
store i8*%q0,i8**%F,align 8
%q3=load i8*,i8**%i,align 8
%q4=bitcast i8*%q0 to i8**
store i8*%q3,i8**%q4,align 8
%q5=load i8*,i8**%p,align 8
%q6=getelementptr inbounds i8,i8*%q0,i64 8
%q7=bitcast i8*%q6 to i8**
store i8*%q5,i8**%q7,align 8
%q8=load i8*,i8**%A,align 8
%q9=getelementptr inbounds i8,i8*%q0,i64 16
%ra=bitcast i8*%q9 to i8**
store i8*%q8,i8**%ra,align 8
%rb=getelementptr inbounds i8,i8*%q0,i64 24
%rc=bitcast i8*%rb to i32*
store i32%qW,i32*%rc,align 4
%rd=getelementptr inbounds i8,i8*%q0,i64 28
%re=bitcast i8*%rd to i32*
store i32%qZ,i32*%re,align 4
%rf=getelementptr inbounds i8,i8*%q0,i64 32
%rg=bitcast i8*%rf to i32*
store i32 7,i32*%rg,align 4
%rh=call i8*@sml_alloc(i32 inreg 28)#0
%ri=getelementptr inbounds i8,i8*%rh,i64 -4
%rj=bitcast i8*%ri to i32*
store i32 1342177304,i32*%rj,align 4
%rk=load i8*,i8**%F,align 8
%rl=bitcast i8*%rh to i8**
store i8*%rk,i8**%rl,align 8
%rm=getelementptr inbounds i8,i8*%rh,i64 8
%rn=bitcast i8*%rm to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL10unionWithi_440 to void(...)*),void(...)**%rn,align 8
%ro=getelementptr inbounds i8,i8*%rh,i64 16
%rp=bitcast i8*%ro to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL10unionWithi_695 to void(...)*),void(...)**%rp,align 8
%rq=getelementptr inbounds i8,i8*%rh,i64 24
%rr=bitcast i8*%rq to i32*
store i32 -2147483647,i32*%rr,align 4
%rs=load i8*,i8**%d,align 8
%rt=bitcast i8*%rs to i32*
%ru=load i32,i32*%rt,align 4
%rv=getelementptr inbounds i8,i8*%rs,i64 4
%rw=bitcast i8*%rv to i32*
%rx=load i32,i32*%rw,align 4
%ry=call i8*@sml_alloc(i32 inreg 36)#0
%rz=getelementptr inbounds i8,i8*%ry,i64 -4
%rA=bitcast i8*%rz to i32*
store i32 1342177312,i32*%rA,align 4
store i8*%ry,i8**%G,align 8
%rB=load i8*,i8**%i,align 8
%rC=bitcast i8*%ry to i8**
store i8*%rB,i8**%rC,align 8
%rD=load i8*,i8**%q,align 8
%rE=getelementptr inbounds i8,i8*%ry,i64 8
%rF=bitcast i8*%rE to i8**
store i8*%rD,i8**%rF,align 8
%rG=load i8*,i8**%A,align 8
%rH=getelementptr inbounds i8,i8*%ry,i64 16
%rI=bitcast i8*%rH to i8**
store i8*%rG,i8**%rI,align 8
%rJ=getelementptr inbounds i8,i8*%ry,i64 24
%rK=bitcast i8*%rJ to i32*
store i32%ru,i32*%rK,align 4
%rL=getelementptr inbounds i8,i8*%ry,i64 28
%rM=bitcast i8*%rL to i32*
store i32%rx,i32*%rM,align 4
%rN=getelementptr inbounds i8,i8*%ry,i64 32
%rO=bitcast i8*%rN to i32*
store i32 7,i32*%rO,align 4
%rP=call i8*@sml_alloc(i32 inreg 28)#0
%rQ=getelementptr inbounds i8,i8*%rP,i64 -4
%rR=bitcast i8*%rQ to i32*
store i32 1342177304,i32*%rR,align 4
%rS=load i8*,i8**%G,align 8
%rT=bitcast i8*%rP to i8**
store i8*%rS,i8**%rT,align 8
%rU=getelementptr inbounds i8,i8*%rP,i64 8
%rV=bitcast i8*%rU to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL11unionWithi2_447 to void(...)*),void(...)**%rV,align 8
%rW=getelementptr inbounds i8,i8*%rP,i64 16
%rX=bitcast i8*%rW to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL11unionWithi2_697 to void(...)*),void(...)**%rX,align 8
%rY=getelementptr inbounds i8,i8*%rP,i64 24
%rZ=bitcast i8*%rY to i32*
store i32 -2147483647,i32*%rZ,align 4
%r0=load i8*,i8**%d,align 8
%r1=bitcast i8*%r0 to i32*
%r2=load i32,i32*%r1,align 4
%r3=getelementptr inbounds i8,i8*%r0,i64 4
%r4=bitcast i8*%r3 to i32*
%r5=load i32,i32*%r4,align 4
%r6=call i8*@sml_alloc(i32 inreg 36)#0
%r7=getelementptr inbounds i8,i8*%r6,i64 -4
%r8=bitcast i8*%r7 to i32*
store i32 1342177312,i32*%r8,align 4
store i8*%r6,i8**%H,align 8
%r9=load i8*,i8**%i,align 8
%sa=bitcast i8*%r6 to i8**
store i8*%r9,i8**%sa,align 8
%sb=load i8*,i8**%q,align 8
%sc=getelementptr inbounds i8,i8*%r6,i64 8
%sd=bitcast i8*%sc to i8**
store i8*%sb,i8**%sd,align 8
%se=load i8*,i8**%A,align 8
%sf=getelementptr inbounds i8,i8*%r6,i64 16
%sg=bitcast i8*%sf to i8**
store i8*%se,i8**%sg,align 8
%sh=getelementptr inbounds i8,i8*%r6,i64 24
%si=bitcast i8*%sh to i32*
store i32%r2,i32*%si,align 4
%sj=getelementptr inbounds i8,i8*%r6,i64 28
%sk=bitcast i8*%sj to i32*
store i32%r5,i32*%sk,align 4
%sl=getelementptr inbounds i8,i8*%r6,i64 32
%sm=bitcast i8*%sl to i32*
store i32 7,i32*%sm,align 4
%sn=call i8*@sml_alloc(i32 inreg 28)#0
%so=getelementptr inbounds i8,i8*%sn,i64 -4
%sp=bitcast i8*%so to i32*
store i32 1342177304,i32*%sp,align 4
%sq=load i8*,i8**%H,align 8
%sr=bitcast i8*%sn to i8**
store i8*%sq,i8**%sr,align 8
%ss=getelementptr inbounds i8,i8*%sn,i64 8
%st=bitcast i8*%ss to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL11unionWithi3_454 to void(...)*),void(...)**%st,align 8
%su=getelementptr inbounds i8,i8*%sn,i64 16
%sv=bitcast i8*%su to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL11unionWithi3_699 to void(...)*),void(...)**%sv,align 8
%sw=getelementptr inbounds i8,i8*%sn,i64 24
%sx=bitcast i8*%sw to i32*
store i32 -2147483647,i32*%sx,align 4
%sy=load i8*,i8**%d,align 8
%sz=bitcast i8*%sy to i32*
%sA=load i32,i32*%sz,align 4
%sB=getelementptr inbounds i8,i8*%sy,i64 4
%sC=bitcast i8*%sB to i32*
%sD=load i32,i32*%sC,align 4
%sE=call i8*@sml_alloc(i32 inreg 36)#0
%sF=getelementptr inbounds i8,i8*%sE,i64 -4
%sG=bitcast i8*%sF to i32*
store i32 1342177312,i32*%sG,align 4
store i8*%sE,i8**%I,align 8
%sH=load i8*,i8**%i,align 8
%sI=bitcast i8*%sE to i8**
store i8*%sH,i8**%sI,align 8
%sJ=load i8*,i8**%p,align 8
%sK=getelementptr inbounds i8,i8*%sE,i64 8
%sL=bitcast i8*%sK to i8**
store i8*%sJ,i8**%sL,align 8
%sM=load i8*,i8**%A,align 8
%sN=getelementptr inbounds i8,i8*%sE,i64 16
%sO=bitcast i8*%sN to i8**
store i8*%sM,i8**%sO,align 8
%sP=getelementptr inbounds i8,i8*%sE,i64 24
%sQ=bitcast i8*%sP to i32*
store i32%sA,i32*%sQ,align 4
%sR=getelementptr inbounds i8,i8*%sE,i64 28
%sS=bitcast i8*%sR to i32*
store i32%sD,i32*%sS,align 4
%sT=getelementptr inbounds i8,i8*%sE,i64 32
%sU=bitcast i8*%sT to i32*
store i32 7,i32*%sU,align 4
%sV=call i8*@sml_alloc(i32 inreg 28)#0
%sW=getelementptr inbounds i8,i8*%sV,i64 -4
%sX=bitcast i8*%sW to i32*
store i32 1342177304,i32*%sX,align 4
%sY=load i8*,i8**%I,align 8
%sZ=bitcast i8*%sV to i8**
store i8*%sY,i8**%sZ,align 8
%s0=getelementptr inbounds i8,i8*%sV,i64 8
%s1=bitcast i8*%s0 to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32,i32,i32)*@_SMLL13intersectWith_462 to void(...)*),void(...)**%s1,align 8
%s2=getelementptr inbounds i8,i8*%sV,i64 16
%s3=bitcast i8*%s2 to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*,i8*,i8*)*@_SMLL13intersectWith_701 to void(...)*),void(...)**%s3,align 8
%s4=getelementptr inbounds i8,i8*%sV,i64 24
%s5=bitcast i8*%s4 to i32*
store i32 -2147483647,i32*%s5,align 4
%s6=load i8*,i8**%d,align 8
%s7=bitcast i8*%s6 to i32*
%s8=load i32,i32*%s7,align 4
%s9=getelementptr inbounds i8,i8*%s6,i64 4
%ta=bitcast i8*%s9 to i32*
%tb=load i32,i32*%ta,align 4
%tc=call i8*@sml_alloc(i32 inreg 36)#0
%td=getelementptr inbounds i8,i8*%tc,i64 -4
%te=bitcast i8*%td to i32*
store i32 1342177312,i32*%te,align 4
store i8*%tc,i8**%J,align 8
%tf=load i8*,i8**%i,align 8
%tg=bitcast i8*%tc to i8**
store i8*%tf,i8**%tg,align 8
%th=load i8*,i8**%p,align 8
%ti=getelementptr inbounds i8,i8*%tc,i64 8
%tj=bitcast i8*%ti to i8**
store i8*%th,i8**%tj,align 8
%tk=load i8*,i8**%A,align 8
%tl=getelementptr inbounds i8,i8*%tc,i64 16
%tm=bitcast i8*%tl to i8**
store i8*%tk,i8**%tm,align 8
%tn=getelementptr inbounds i8,i8*%tc,i64 24
%to=bitcast i8*%tn to i32*
store i32%s8,i32*%to,align 4
%tp=getelementptr inbounds i8,i8*%tc,i64 28
%tq=bitcast i8*%tp to i32*
store i32%tb,i32*%tq,align 4
%tr=getelementptr inbounds i8,i8*%tc,i64 32
%ts=bitcast i8*%tr to i32*
store i32 7,i32*%ts,align 4
%tt=call i8*@sml_alloc(i32 inreg 28)#0
%tu=getelementptr inbounds i8,i8*%tt,i64 -4
%tv=bitcast i8*%tu to i32*
store i32 1342177304,i32*%tv,align 4
%tw=load i8*,i8**%J,align 8
%tx=bitcast i8*%tt to i8**
store i8*%tw,i8**%tx,align 8
%ty=getelementptr inbounds i8,i8*%tt,i64 8
%tz=bitcast i8*%ty to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32,i32,i32)*@_SMLL14intersectWithi_470 to void(...)*),void(...)**%tz,align 8
%tA=getelementptr inbounds i8,i8*%tt,i64 16
%tB=bitcast i8*%tA to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*,i8*,i8*)*@_SMLL14intersectWithi_703 to void(...)*),void(...)**%tB,align 8
%tC=getelementptr inbounds i8,i8*%tt,i64 24
%tD=bitcast i8*%tC to i32*
store i32 -2147483647,i32*%tD,align 4
%tE=load i8*,i8**%d,align 8
%tF=bitcast i8*%tE to i32*
%tG=load i32,i32*%tF,align 4
%tH=getelementptr inbounds i8,i8*%tE,i64 4
%tI=bitcast i8*%tH to i32*
%tJ=load i32,i32*%tI,align 4
%tK=call i8*@sml_alloc(i32 inreg 36)#0
%tL=getelementptr inbounds i8,i8*%tK,i64 -4
%tM=bitcast i8*%tL to i32*
store i32 1342177312,i32*%tM,align 4
store i8*%tK,i8**%K,align 8
%tN=load i8*,i8**%i,align 8
%tO=bitcast i8*%tK to i8**
store i8*%tN,i8**%tO,align 8
%tP=load i8*,i8**%q,align 8
%tQ=getelementptr inbounds i8,i8*%tK,i64 8
%tR=bitcast i8*%tQ to i8**
store i8*%tP,i8**%tR,align 8
%tS=load i8*,i8**%A,align 8
%tT=getelementptr inbounds i8,i8*%tK,i64 16
%tU=bitcast i8*%tT to i8**
store i8*%tS,i8**%tU,align 8
%tV=getelementptr inbounds i8,i8*%tK,i64 24
%tW=bitcast i8*%tV to i32*
store i32%tG,i32*%tW,align 4
%tX=getelementptr inbounds i8,i8*%tK,i64 28
%tY=bitcast i8*%tX to i32*
store i32%tJ,i32*%tY,align 4
%tZ=getelementptr inbounds i8,i8*%tK,i64 32
%t0=bitcast i8*%tZ to i32*
store i32 7,i32*%t0,align 4
%t1=call i8*@sml_alloc(i32 inreg 28)#0
%t2=getelementptr inbounds i8,i8*%t1,i64 -4
%t3=bitcast i8*%t2 to i32*
store i32 1342177304,i32*%t3,align 4
%t4=load i8*,i8**%K,align 8
%t5=bitcast i8*%t1 to i8**
store i8*%t4,i8**%t5,align 8
%t6=getelementptr inbounds i8,i8*%t1,i64 8
%t7=bitcast i8*%t6 to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32,i32,i32)*@_SMLL15intersectWithi2_478 to void(...)*),void(...)**%t7,align 8
%t8=getelementptr inbounds i8,i8*%t1,i64 16
%t9=bitcast i8*%t8 to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*,i8*,i8*)*@_SMLL15intersectWithi2_705 to void(...)*),void(...)**%t9,align 8
%ua=getelementptr inbounds i8,i8*%t1,i64 24
%ub=bitcast i8*%ua to i32*
store i32 -2147483647,i32*%ub,align 4
%uc=load i8*,i8**%d,align 8
%ud=bitcast i8*%uc to i32*
%ue=load i32,i32*%ud,align 4
%uf=getelementptr inbounds i8,i8*%uc,i64 4
%ug=bitcast i8*%uf to i32*
%uh=load i32,i32*%ug,align 4
%ui=call i8*@sml_alloc(i32 inreg 36)#0
%uj=getelementptr inbounds i8,i8*%ui,i64 -4
%uk=bitcast i8*%uj to i32*
store i32 1342177312,i32*%uk,align 4
store i8*%ui,i8**%L,align 8
%ul=load i8*,i8**%c,align 8
%um=bitcast i8*%ui to i8**
store i8*%ul,i8**%um,align 8
%un=load i8*,i8**%i,align 8
%uo=getelementptr inbounds i8,i8*%ui,i64 8
%up=bitcast i8*%uo to i8**
store i8*%un,i8**%up,align 8
%uq=load i8*,i8**%j,align 8
%ur=getelementptr inbounds i8,i8*%ui,i64 16
%us=bitcast i8*%ur to i8**
store i8*%uq,i8**%us,align 8
%ut=getelementptr inbounds i8,i8*%ui,i64 24
%uu=bitcast i8*%ut to i32*
store i32%ue,i32*%uu,align 4
%uv=getelementptr inbounds i8,i8*%ui,i64 28
%uw=bitcast i8*%uv to i32*
store i32%uh,i32*%uw,align 4
%ux=getelementptr inbounds i8,i8*%ui,i64 32
%uy=bitcast i8*%ux to i32*
store i32 7,i32*%uy,align 4
%uz=call i8*@sml_alloc(i32 inreg 28)#0
%uA=getelementptr inbounds i8,i8*%uz,i64 -4
%uB=bitcast i8*%uA to i32*
store i32 1342177304,i32*%uB,align 4
%uC=load i8*,i8**%L,align 8
%uD=bitcast i8*%uz to i8**
store i8*%uC,i8**%uD,align 8
%uE=getelementptr inbounds i8,i8*%uz,i64 8
%uF=bitcast i8*%uE to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32,i32,i32)*@_SMLL9mergeWith_484 to void(...)*),void(...)**%uF,align 8
%uG=getelementptr inbounds i8,i8*%uz,i64 16
%uH=bitcast i8*%uG to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*,i8*,i8*)*@_SMLL9mergeWith_706 to void(...)*),void(...)**%uH,align 8
%uI=getelementptr inbounds i8,i8*%uz,i64 24
%uJ=bitcast i8*%uI to i32*
store i32 -2147483647,i32*%uJ,align 4
%uK=load i8*,i8**%d,align 8
%uL=bitcast i8*%uK to i32*
%uM=load i32,i32*%uL,align 4
%uN=getelementptr inbounds i8,i8*%uK,i64 4
%uO=bitcast i8*%uN to i32*
%uP=load i32,i32*%uO,align 4
%uQ=call i8*@sml_alloc(i32 inreg 36)#0
%uR=getelementptr inbounds i8,i8*%uQ,i64 -4
%uS=bitcast i8*%uR to i32*
store i32 1342177312,i32*%uS,align 4
store i8*%uQ,i8**%M,align 8
%uT=load i8*,i8**%c,align 8
%uU=bitcast i8*%uQ to i8**
store i8*%uT,i8**%uU,align 8
%uV=load i8*,i8**%i,align 8
%uW=getelementptr inbounds i8,i8*%uQ,i64 8
%uX=bitcast i8*%uW to i8**
store i8*%uV,i8**%uX,align 8
%uY=load i8*,i8**%j,align 8
%uZ=getelementptr inbounds i8,i8*%uQ,i64 16
%u0=bitcast i8*%uZ to i8**
store i8*%uY,i8**%u0,align 8
%u1=getelementptr inbounds i8,i8*%uQ,i64 24
%u2=bitcast i8*%u1 to i32*
store i32%uM,i32*%u2,align 4
%u3=getelementptr inbounds i8,i8*%uQ,i64 28
%u4=bitcast i8*%u3 to i32*
store i32%uP,i32*%u4,align 4
%u5=getelementptr inbounds i8,i8*%uQ,i64 32
%u6=bitcast i8*%u5 to i32*
store i32 7,i32*%u6,align 4
%u7=call i8*@sml_alloc(i32 inreg 28)#0
%u8=getelementptr inbounds i8,i8*%u7,i64 -4
%u9=bitcast i8*%u8 to i32*
store i32 1342177304,i32*%u9,align 4
%va=load i8*,i8**%M,align 8
%vb=bitcast i8*%u7 to i8**
store i8*%va,i8**%vb,align 8
%vc=getelementptr inbounds i8,i8*%u7,i64 8
%vd=bitcast i8*%vc to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32,i32,i32)*@_SMLL10mergeWithi_490 to void(...)*),void(...)**%vd,align 8
%ve=getelementptr inbounds i8,i8*%u7,i64 16
%vf=bitcast i8*%ve to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*,i8*,i8*)*@_SMLL10mergeWithi_707 to void(...)*),void(...)**%vf,align 8
%vg=getelementptr inbounds i8,i8*%u7,i64 24
%vh=bitcast i8*%vg to i32*
store i32 -2147483647,i32*%vh,align 4
%vi=load i8*,i8**%d,align 8
%vj=bitcast i8*%vi to i32*
%vk=load i32,i32*%vj,align 4
%vl=getelementptr inbounds i8,i8*%vi,i64 4
%vm=bitcast i8*%vl to i32*
%vn=load i32,i32*%vm,align 4
%vo=call i8*@sml_alloc(i32 inreg 36)#0
%vp=getelementptr inbounds i8,i8*%vo,i64 -4
%vq=bitcast i8*%vp to i32*
store i32 1342177312,i32*%vq,align 4
store i8*%vo,i8**%N,align 8
%vr=load i8*,i8**%c,align 8
%vs=bitcast i8*%vo to i8**
store i8*%vr,i8**%vs,align 8
%vt=load i8*,i8**%i,align 8
%vu=getelementptr inbounds i8,i8*%vo,i64 8
%vv=bitcast i8*%vu to i8**
store i8*%vt,i8**%vv,align 8
%vw=load i8*,i8**%j,align 8
%vx=getelementptr inbounds i8,i8*%vo,i64 16
%vy=bitcast i8*%vx to i8**
store i8*%vw,i8**%vy,align 8
%vz=getelementptr inbounds i8,i8*%vo,i64 24
%vA=bitcast i8*%vz to i32*
store i32%vk,i32*%vA,align 4
%vB=getelementptr inbounds i8,i8*%vo,i64 28
%vC=bitcast i8*%vB to i32*
store i32%vn,i32*%vC,align 4
%vD=getelementptr inbounds i8,i8*%vo,i64 32
%vE=bitcast i8*%vD to i32*
store i32 7,i32*%vE,align 4
%vF=call i8*@sml_alloc(i32 inreg 28)#0
%vG=getelementptr inbounds i8,i8*%vF,i64 -4
%vH=bitcast i8*%vG to i32*
store i32 1342177304,i32*%vH,align 4
%vI=load i8*,i8**%N,align 8
%vJ=bitcast i8*%vF to i8**
store i8*%vI,i8**%vJ,align 8
%vK=getelementptr inbounds i8,i8*%vF,i64 8
%vL=bitcast i8*%vK to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32,i32,i32)*@_SMLL11mergeWithi2_496 to void(...)*),void(...)**%vL,align 8
%vM=getelementptr inbounds i8,i8*%vF,i64 16
%vN=bitcast i8*%vM to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*,i8*,i8*)*@_SMLL11mergeWithi2_708 to void(...)*),void(...)**%vN,align 8
%vO=getelementptr inbounds i8,i8*%vF,i64 24
%vP=bitcast i8*%vO to i32*
store i32 -2147483647,i32*%vP,align 4
%vQ=load i8*,i8**%d,align 8
%vR=bitcast i8*%vQ to i32*
%vS=load i32,i32*%vR,align 4
%vT=getelementptr inbounds i8,i8*%vQ,i64 4
%vU=bitcast i8*%vT to i32*
%vV=load i32,i32*%vU,align 4
%vW=call i8*@sml_alloc(i32 inreg 28)#0
%vX=getelementptr inbounds i8,i8*%vW,i64 -4
%vY=bitcast i8*%vX to i32*
store i32 1342177304,i32*%vY,align 4
store i8*%vW,i8**%O,align 8
%vZ=load i8*,i8**%i,align 8
%v0=bitcast i8*%vW to i8**
store i8*%vZ,i8**%v0,align 8
%v1=load i8*,i8**%A,align 8
%v2=getelementptr inbounds i8,i8*%vW,i64 8
%v3=bitcast i8*%v2 to i8**
store i8*%v1,i8**%v3,align 8
%v4=getelementptr inbounds i8,i8*%vW,i64 16
%v5=bitcast i8*%v4 to i32*
store i32%vS,i32*%v5,align 4
%v6=getelementptr inbounds i8,i8*%vW,i64 20
%v7=bitcast i8*%v6 to i32*
store i32%vV,i32*%v7,align 4
%v8=getelementptr inbounds i8,i8*%vW,i64 24
%v9=bitcast i8*%v8 to i32*
store i32 3,i32*%v9,align 4
%wa=call i8*@sml_alloc(i32 inreg 28)#0
%wb=getelementptr inbounds i8,i8*%wa,i64 -4
%wc=bitcast i8*%wb to i32*
store i32 1342177304,i32*%wc,align 4
%wd=load i8*,i8**%O,align 8
%we=bitcast i8*%wa to i8**
store i8*%wd,i8**%we,align 8
%wf=getelementptr inbounds i8,i8*%wa,i64 8
%wg=bitcast i8*%wf to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL6filter_500 to void(...)*),void(...)**%wg,align 8
%wh=getelementptr inbounds i8,i8*%wa,i64 16
%wi=bitcast i8*%wh to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL6filter_709 to void(...)*),void(...)**%wi,align 8
%wj=getelementptr inbounds i8,i8*%wa,i64 24
%wk=bitcast i8*%wj to i32*
store i32 -2147483647,i32*%wk,align 4
%wl=load i8*,i8**%d,align 8
%wm=bitcast i8*%wl to i32*
%wn=load i32,i32*%wm,align 4
%wo=getelementptr inbounds i8,i8*%wl,i64 4
%wp=bitcast i8*%wo to i32*
%wq=load i32,i32*%wp,align 4
%wr=call i8*@sml_alloc(i32 inreg 28)#0
%ws=getelementptr inbounds i8,i8*%wr,i64 -4
%wt=bitcast i8*%ws to i32*
store i32 1342177304,i32*%wt,align 4
store i8*%wr,i8**%P,align 8
%wu=load i8*,i8**%i,align 8
%wv=bitcast i8*%wr to i8**
store i8*%wu,i8**%wv,align 8
%ww=load i8*,i8**%A,align 8
%wx=getelementptr inbounds i8,i8*%wr,i64 8
%wy=bitcast i8*%wx to i8**
store i8*%ww,i8**%wy,align 8
%wz=getelementptr inbounds i8,i8*%wr,i64 16
%wA=bitcast i8*%wz to i32*
store i32%wn,i32*%wA,align 4
%wB=getelementptr inbounds i8,i8*%wr,i64 20
%wC=bitcast i8*%wB to i32*
store i32%wq,i32*%wC,align 4
%wD=getelementptr inbounds i8,i8*%wr,i64 24
%wE=bitcast i8*%wD to i32*
store i32 3,i32*%wE,align 4
%wF=call i8*@sml_alloc(i32 inreg 28)#0
%wG=getelementptr inbounds i8,i8*%wF,i64 -4
%wH=bitcast i8*%wG to i32*
store i32 1342177304,i32*%wH,align 4
%wI=load i8*,i8**%P,align 8
%wJ=bitcast i8*%wF to i8**
store i8*%wI,i8**%wJ,align 8
%wK=getelementptr inbounds i8,i8*%wF,i64 8
%wL=bitcast i8*%wK to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL7filteri_504 to void(...)*),void(...)**%wL,align 8
%wM=getelementptr inbounds i8,i8*%wF,i64 16
%wN=bitcast i8*%wM to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL7filteri_710 to void(...)*),void(...)**%wN,align 8
%wO=getelementptr inbounds i8,i8*%wF,i64 24
%wP=bitcast i8*%wO to i32*
store i32 -2147483647,i32*%wP,align 4
%wQ=load i8*,i8**%d,align 8
%wR=bitcast i8*%wQ to i32*
%wS=load i32,i32*%wR,align 4
%wT=getelementptr inbounds i8,i8*%wQ,i64 4
%wU=bitcast i8*%wT to i32*
%wV=load i32,i32*%wU,align 4
%wW=call i8*@sml_alloc(i32 inreg 28)#0
%wX=getelementptr inbounds i8,i8*%wW,i64 -4
%wY=bitcast i8*%wX to i32*
store i32 1342177304,i32*%wY,align 4
store i8*%wW,i8**%Q,align 8
%wZ=load i8*,i8**%i,align 8
%w0=bitcast i8*%wW to i8**
store i8*%wZ,i8**%w0,align 8
%w1=load i8*,i8**%A,align 8
%w2=getelementptr inbounds i8,i8*%wW,i64 8
%w3=bitcast i8*%w2 to i8**
store i8*%w1,i8**%w3,align 8
%w4=getelementptr inbounds i8,i8*%wW,i64 16
%w5=bitcast i8*%w4 to i32*
store i32%wS,i32*%w5,align 4
%w6=getelementptr inbounds i8,i8*%wW,i64 20
%w7=bitcast i8*%w6 to i32*
store i32%wV,i32*%w7,align 4
%w8=getelementptr inbounds i8,i8*%wW,i64 24
%w9=bitcast i8*%w8 to i32*
store i32 3,i32*%w9,align 4
%xa=call i8*@sml_alloc(i32 inreg 28)#0
%xb=getelementptr inbounds i8,i8*%xa,i64 -4
%xc=bitcast i8*%xb to i32*
store i32 1342177304,i32*%xc,align 4
%xd=load i8*,i8**%Q,align 8
%xe=bitcast i8*%xa to i8**
store i8*%xd,i8**%xe,align 8
%xf=getelementptr inbounds i8,i8*%xa,i64 8
%xg=bitcast i8*%xf to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32)*@_SMLL10mapPartial_508 to void(...)*),void(...)**%xg,align 8
%xh=getelementptr inbounds i8,i8*%xa,i64 16
%xi=bitcast i8*%xh to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLL10mapPartial_711 to void(...)*),void(...)**%xi,align 8
%xj=getelementptr inbounds i8,i8*%xa,i64 24
%xk=bitcast i8*%xj to i32*
store i32 -2147483647,i32*%xk,align 4
%xl=load i8*,i8**%d,align 8
%xm=bitcast i8*%xl to i32*
%xn=load i32,i32*%xm,align 4
%xo=getelementptr inbounds i8,i8*%xl,i64 4
%xp=bitcast i8*%xo to i32*
%xq=load i32,i32*%xp,align 4
%xr=call i8*@sml_alloc(i32 inreg 28)#0
%xs=getelementptr inbounds i8,i8*%xr,i64 -4
%xt=bitcast i8*%xs to i32*
store i32 1342177304,i32*%xt,align 4
store i8*%xr,i8**%R,align 8
%xu=load i8*,i8**%i,align 8
%xv=bitcast i8*%xr to i8**
store i8*%xu,i8**%xv,align 8
%xw=load i8*,i8**%A,align 8
%xx=getelementptr inbounds i8,i8*%xr,i64 8
%xy=bitcast i8*%xx to i8**
store i8*%xw,i8**%xy,align 8
%xz=getelementptr inbounds i8,i8*%xr,i64 16
%xA=bitcast i8*%xz to i32*
store i32%xn,i32*%xA,align 4
%xB=getelementptr inbounds i8,i8*%xr,i64 20
%xC=bitcast i8*%xB to i32*
store i32%xq,i32*%xC,align 4
%xD=getelementptr inbounds i8,i8*%xr,i64 24
%xE=bitcast i8*%xD to i32*
store i32 3,i32*%xE,align 4
%xF=call i8*@sml_alloc(i32 inreg 28)#0
%xG=getelementptr inbounds i8,i8*%xF,i64 -4
%xH=bitcast i8*%xG to i32*
store i32 1342177304,i32*%xH,align 4
%xI=load i8*,i8**%R,align 8
%xJ=bitcast i8*%xF to i8**
store i8*%xI,i8**%xJ,align 8
%xK=getelementptr inbounds i8,i8*%xF,i64 8
%xL=bitcast i8*%xK to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32)*@_SMLL11mapPartiali_512 to void(...)*),void(...)**%xL,align 8
%xM=getelementptr inbounds i8,i8*%xF,i64 16
%xN=bitcast i8*%xM to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLL11mapPartiali_712 to void(...)*),void(...)**%xN,align 8
%xO=getelementptr inbounds i8,i8*%xF,i64 24
%xP=bitcast i8*%xO to i32*
store i32 -2147483647,i32*%xP,align 4
%xQ=call i8*@sml_alloc(i32 inreg 12)#0
%xR=getelementptr inbounds i8,i8*%xQ,i64 -4
%xS=bitcast i8*%xR to i32*
store i32 1342177288,i32*%xS,align 4
store i8*%xQ,i8**%S,align 8
%xT=load i8*,i8**%L,align 8
%xU=bitcast i8*%xQ to i8**
store i8*%xT,i8**%xU,align 8
%xV=getelementptr inbounds i8,i8*%xQ,i64 8
%xW=bitcast i8*%xV to i32*
store i32 1,i32*%xW,align 4
%xX=call i8*@sml_alloc(i32 inreg 28)#0
%xY=getelementptr inbounds i8,i8*%xX,i64 -4
%xZ=bitcast i8*%xY to i32*
store i32 1342177304,i32*%xZ,align 4
%x0=load i8*,i8**%S,align 8
%x1=bitcast i8*%xX to i8**
store i8*%x0,i8**%x1,align 8
%x2=getelementptr inbounds i8,i8*%xX,i64 8
%x3=bitcast i8*%x2 to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL10difference_516 to void(...)*),void(...)**%x3,align 8
%x4=getelementptr inbounds i8,i8*%xX,i64 16
%x5=bitcast i8*%x4 to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL10difference_713 to void(...)*),void(...)**%x5,align 8
%x6=getelementptr inbounds i8,i8*%xX,i64 24
%x7=bitcast i8*%x6 to i32*
store i32 -2147483647,i32*%x7,align 4
%x8=call i8*@sml_alloc(i32 inreg 20)#0
%x9=getelementptr inbounds i8,i8*%x8,i64 -4
%ya=bitcast i8*%x9 to i32*
store i32 1342177296,i32*%ya,align 4
store i8*%x8,i8**%T,align 8
%yb=load i8*,i8**%Q,align 8
%yc=bitcast i8*%x8 to i8**
store i8*%yb,i8**%yc,align 8
%yd=load i8*,i8**%S,align 8
%ye=getelementptr inbounds i8,i8*%x8,i64 8
%yf=bitcast i8*%ye to i8**
store i8*%yd,i8**%yf,align 8
%yg=getelementptr inbounds i8,i8*%x8,i64 16
%yh=bitcast i8*%yg to i32*
store i32 3,i32*%yh,align 4
%yi=call i8*@sml_alloc(i32 inreg 28)#0
%yj=getelementptr inbounds i8,i8*%yi,i64 -4
%yk=bitcast i8*%yj to i32*
store i32 1342177304,i32*%yk,align 4
%yl=load i8*,i8**%T,align 8
%ym=bitcast i8*%yi to i8**
store i8*%yl,i8**%ym,align 8
%yn=getelementptr inbounds i8,i8*%yi,i64 8
%yo=bitcast i8*%yn to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL18subtractByKeyEquiv_520 to void(...)*),void(...)**%yo,align 8
%yp=getelementptr inbounds i8,i8*%yi,i64 16
%yq=bitcast i8*%yp to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL18subtractByKeyEquiv_714 to void(...)*),void(...)**%yq,align 8
%yr=getelementptr inbounds i8,i8*%yi,i64 24
%ys=bitcast i8*%yr to i32*
store i32 -2147483647,i32*%ys,align 4
%yt=call i8*@sml_alloc(i32 inreg 20)#0
%yu=getelementptr inbounds i8,i8*%yt,i64 -4
%yv=bitcast i8*%yu to i32*
store i32 1342177296,i32*%yv,align 4
store i8*%yt,i8**%U,align 8
%yw=load i8*,i8**%Q,align 8
%yx=bitcast i8*%yt to i8**
store i8*%yw,i8**%yx,align 8
%yy=load i8*,i8**%S,align 8
%yz=getelementptr inbounds i8,i8*%yt,i64 8
%yA=bitcast i8*%yz to i8**
store i8*%yy,i8**%yA,align 8
%yB=getelementptr inbounds i8,i8*%yt,i64 16
%yC=bitcast i8*%yB to i32*
store i32 3,i32*%yC,align 4
%yD=call i8*@sml_alloc(i32 inreg 28)#0
%yE=getelementptr inbounds i8,i8*%yD,i64 -4
%yF=bitcast i8*%yE to i32*
store i32 1342177304,i32*%yF,align 4
%yG=load i8*,i8**%U,align 8
%yH=bitcast i8*%yD to i8**
store i8*%yG,i8**%yH,align 8
%yI=getelementptr inbounds i8,i8*%yD,i64 8
%yJ=bitcast i8*%yI to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL22subtractByKeyElemEquiv_524 to void(...)*),void(...)**%yJ,align 8
%yK=getelementptr inbounds i8,i8*%yD,i64 16
%yL=bitcast i8*%yK to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL22subtractByKeyElemEquiv_715 to void(...)*),void(...)**%yL,align 8
%yM=getelementptr inbounds i8,i8*%yD,i64 24
%yN=bitcast i8*%yM to i32*
store i32 -2147483647,i32*%yN,align 4
%yO=call i8*@sml_alloc(i32 inreg 12)#0
%yP=getelementptr inbounds i8,i8*%yO,i64 -4
%yQ=bitcast i8*%yP to i32*
store i32 1342177288,i32*%yQ,align 4
store i8*%yO,i8**%V,align 8
%yR=load i8*,i8**%S,align 8
%yS=bitcast i8*%yO to i8**
store i8*%yR,i8**%yS,align 8
%yT=getelementptr inbounds i8,i8*%yO,i64 8
%yU=bitcast i8*%yT to i32*
store i32 1,i32*%yU,align 4
%yV=call i8*@sml_alloc(i32 inreg 28)#0
%yW=getelementptr inbounds i8,i8*%yV,i64 -4
%yX=bitcast i8*%yW to i32*
store i32 1342177304,i32*%yX,align 4
%yY=load i8*,i8**%V,align 8
%yZ=bitcast i8*%yV to i8**
store i8*%yY,i8**%yZ,align 8
%y0=getelementptr inbounds i8,i8*%yV,i64 8
%y1=bitcast i8*%y0 to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLL2eq_527 to void(...)*),void(...)**%y1,align 8
%y2=getelementptr inbounds i8,i8*%yV,i64 16
%y3=bitcast i8*%y2 to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLL2eq_717 to void(...)*),void(...)**%y3,align 8
%y4=getelementptr inbounds i8,i8*%yV,i64 24
%y5=bitcast i8*%y4 to i32*
store i32 -2147483647,i32*%y5,align 4
%y6=call i8*@sml_alloc(i32 inreg 12)#0
%y7=getelementptr inbounds i8,i8*%y6,i64 -4
%y8=bitcast i8*%y7 to i32*
store i32 1342177288,i32*%y8,align 4
store i8*%y6,i8**%W,align 8
%y9=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%za=bitcast i8*%y6 to i8**
store i8*%y9,i8**%za,align 8
%zb=getelementptr inbounds i8,i8*%y6,i64 8
%zc=bitcast i8*%zb to i32*
store i32 1,i32*%zc,align 4
%zd=call i8*@sml_alloc(i32 inreg 28)#0
%ze=getelementptr inbounds i8,i8*%zd,i64 -4
%zf=bitcast i8*%ze to i32*
store i32 1342177304,i32*%zf,align 4
store i8*%zd,i8**%h,align 8
%zg=load i8*,i8**%W,align 8
store i8*null,i8**%W,align 8
%zh=bitcast i8*%zd to i8**
store i8*%zg,i8**%zh,align 8
%zi=getelementptr inbounds i8,i8*%zd,i64 8
%zj=bitcast i8*%zi to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN12BinaryMapFn29singletonE_535 to void(...)*),void(...)**%zj,align 8
%zk=getelementptr inbounds i8,i8*%zd,i64 16
%zl=bitcast i8*%zk to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN12BinaryMapFn29singletonE_721 to void(...)*),void(...)**%zl,align 8
%zm=getelementptr inbounds i8,i8*%zd,i64 24
%zn=bitcast i8*%zm to i32*
store i32 -2147483647,i32*%zn,align 4
%zo=call i8*@sml_alloc(i32 inreg 12)#0
%zp=getelementptr inbounds i8,i8*%zo,i64 -4
%zq=bitcast i8*%zp to i32*
store i32 1342177288,i32*%zq,align 4
store i8*%zo,i8**%W,align 8
%zr=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%zs=bitcast i8*%zo to i8**
store i8*%zr,i8**%zs,align 8
%zt=getelementptr inbounds i8,i8*%zo,i64 8
%zu=bitcast i8*%zt to i32*
store i32 1,i32*%zu,align 4
%zv=call i8*@sml_alloc(i32 inreg 28)#0
%zw=getelementptr inbounds i8,i8*%zv,i64 -4
%zx=bitcast i8*%zw to i32*
store i32 1342177304,i32*%zx,align 4
store i8*%zv,i8**%i,align 8
%zy=load i8*,i8**%W,align 8
store i8*null,i8**%W,align 8
%zz=bitcast i8*%zv to i8**
store i8*%zy,i8**%zz,align 8
%zA=getelementptr inbounds i8,i8*%zv,i64 8
%zB=bitcast i8*%zA to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN12BinaryMapFn26insertE_537 to void(...)*),void(...)**%zB,align 8
%zC=getelementptr inbounds i8,i8*%zv,i64 16
%zD=bitcast i8*%zC to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN12BinaryMapFn26insertE_722 to void(...)*),void(...)**%zD,align 8
%zE=getelementptr inbounds i8,i8*%zv,i64 24
%zF=bitcast i8*%zE to i32*
store i32 -2147483647,i32*%zF,align 4
%zG=call i8*@sml_alloc(i32 inreg 12)#0
%zH=getelementptr inbounds i8,i8*%zG,i64 -4
%zI=bitcast i8*%zH to i32*
store i32 1342177288,i32*%zI,align 4
store i8*%zG,i8**%W,align 8
%zJ=load i8*,i8**%k,align 8
store i8*null,i8**%k,align 8
%zK=bitcast i8*%zG to i8**
store i8*%zJ,i8**%zK,align 8
%zL=getelementptr inbounds i8,i8*%zG,i64 8
%zM=bitcast i8*%zL to i32*
store i32 1,i32*%zM,align 4
%zN=call i8*@sml_alloc(i32 inreg 28)#0
%zO=getelementptr inbounds i8,i8*%zN,i64 -4
%zP=bitcast i8*%zO to i32*
store i32 1342177304,i32*%zP,align 4
store i8*%zN,i8**%k,align 8
%zQ=load i8*,i8**%W,align 8
store i8*null,i8**%W,align 8
%zR=bitcast i8*%zN to i8**
store i8*%zQ,i8**%zR,align 8
%zS=getelementptr inbounds i8,i8*%zN,i64 8
%zT=bitcast i8*%zS to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN12BinaryMapFn27insert_GE_539 to void(...)*),void(...)**%zT,align 8
%zU=getelementptr inbounds i8,i8*%zN,i64 16
%zV=bitcast i8*%zU to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN12BinaryMapFn27insert_GE_723 to void(...)*),void(...)**%zV,align 8
%zW=getelementptr inbounds i8,i8*%zN,i64 24
%zX=bitcast i8*%zW to i32*
store i32 -2147483647,i32*%zX,align 4
%zY=call i8*@sml_alloc(i32 inreg 12)#0
%zZ=getelementptr inbounds i8,i8*%zY,i64 -4
%z0=bitcast i8*%zZ to i32*
store i32 1342177288,i32*%z0,align 4
store i8*%zY,i8**%W,align 8
%z1=load i8*,i8**%l,align 8
store i8*null,i8**%l,align 8
%z2=bitcast i8*%zY to i8**
store i8*%z1,i8**%z2,align 8
%z3=getelementptr inbounds i8,i8*%zY,i64 8
%z4=bitcast i8*%z3 to i32*
store i32 1,i32*%z4,align 4
%z5=call i8*@sml_alloc(i32 inreg 28)#0
%z6=getelementptr inbounds i8,i8*%z5,i64 -4
%z7=bitcast i8*%z6 to i32*
store i32 1342177304,i32*%z7,align 4
store i8*%z5,i8**%l,align 8
%z8=load i8*,i8**%W,align 8
store i8*null,i8**%W,align 8
%z9=bitcast i8*%z5 to i8**
store i8*%z8,i8**%z9,align 8
%Aa=getelementptr inbounds i8,i8*%z5,i64 8
%Ab=bitcast i8*%Aa to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN12BinaryMapFn210insertWithE_542 to void(...)*),void(...)**%Ab,align 8
%Ac=getelementptr inbounds i8,i8*%z5,i64 16
%Ad=bitcast i8*%Ac to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN12BinaryMapFn210insertWithE_724 to void(...)*),void(...)**%Ad,align 8
%Ae=getelementptr inbounds i8,i8*%z5,i64 24
%Af=bitcast i8*%Ae to i32*
store i32 -2147483647,i32*%Af,align 4
%Ag=call i8*@sml_alloc(i32 inreg 12)#0
%Ah=getelementptr inbounds i8,i8*%Ag,i64 -4
%Ai=bitcast i8*%Ah to i32*
store i32 1342177288,i32*%Ai,align 4
store i8*%Ag,i8**%W,align 8
%Aj=load i8*,i8**%m,align 8
store i8*null,i8**%m,align 8
%Ak=bitcast i8*%Ag to i8**
store i8*%Aj,i8**%Ak,align 8
%Al=getelementptr inbounds i8,i8*%Ag,i64 8
%Am=bitcast i8*%Al to i32*
store i32 1,i32*%Am,align 4
%An=call i8*@sml_alloc(i32 inreg 28)#0
%Ao=getelementptr inbounds i8,i8*%An,i64 -4
%Ap=bitcast i8*%Ao to i32*
store i32 1342177304,i32*%Ap,align 4
store i8*%An,i8**%m,align 8
%Aq=load i8*,i8**%W,align 8
store i8*null,i8**%W,align 8
%Ar=bitcast i8*%An to i8**
store i8*%Aq,i8**%Ar,align 8
%As=getelementptr inbounds i8,i8*%An,i64 8
%At=bitcast i8*%As to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN12BinaryMapFn211insertWithiE_545 to void(...)*),void(...)**%At,align 8
%Au=getelementptr inbounds i8,i8*%An,i64 16
%Av=bitcast i8*%Au to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN12BinaryMapFn211insertWithiE_725 to void(...)*),void(...)**%Av,align 8
%Aw=getelementptr inbounds i8,i8*%An,i64 24
%Ax=bitcast i8*%Aw to i32*
store i32 -2147483647,i32*%Ax,align 4
%Ay=call i8*@sml_alloc(i32 inreg 12)#0
%Az=getelementptr inbounds i8,i8*%Ay,i64 -4
%AA=bitcast i8*%Az to i32*
store i32 1342177288,i32*%AA,align 4
store i8*%Ay,i8**%W,align 8
%AB=load i8*,i8**%n,align 8
store i8*null,i8**%n,align 8
%AC=bitcast i8*%Ay to i8**
store i8*%AB,i8**%AC,align 8
%AD=getelementptr inbounds i8,i8*%Ay,i64 8
%AE=bitcast i8*%AD to i32*
store i32 1,i32*%AE,align 4
%AF=call i8*@sml_alloc(i32 inreg 28)#0
%AG=getelementptr inbounds i8,i8*%AF,i64 -4
%AH=bitcast i8*%AG to i32*
store i32 1342177304,i32*%AH,align 4
store i8*%AF,i8**%n,align 8
%AI=load i8*,i8**%W,align 8
store i8*null,i8**%W,align 8
%AJ=bitcast i8*%AF to i8**
store i8*%AI,i8**%AJ,align 8
%AK=getelementptr inbounds i8,i8*%AF,i64 8
%AL=bitcast i8*%AK to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN12BinaryMapFn212insertWithi2E_548 to void(...)*),void(...)**%AL,align 8
%AM=getelementptr inbounds i8,i8*%AF,i64 16
%AN=bitcast i8*%AM to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN12BinaryMapFn212insertWithi2E_726 to void(...)*),void(...)**%AN,align 8
%AO=getelementptr inbounds i8,i8*%AF,i64 24
%AP=bitcast i8*%AO to i32*
store i32 -2147483647,i32*%AP,align 4
%AQ=call i8*@sml_alloc(i32 inreg 12)#0
%AR=getelementptr inbounds i8,i8*%AQ,i64 -4
%AS=bitcast i8*%AR to i32*
store i32 1342177288,i32*%AS,align 4
store i8*%AQ,i8**%W,align 8
%AT=load i8*,i8**%p,align 8
store i8*null,i8**%p,align 8
%AU=bitcast i8*%AQ to i8**
store i8*%AT,i8**%AU,align 8
%AV=getelementptr inbounds i8,i8*%AQ,i64 8
%AW=bitcast i8*%AV to i32*
store i32 1,i32*%AW,align 4
%AX=call i8*@sml_alloc(i32 inreg 28)#0
%AY=getelementptr inbounds i8,i8*%AX,i64 -4
%AZ=bitcast i8*%AY to i32*
store i32 1342177304,i32*%AZ,align 4
store i8*%AX,i8**%p,align 8
%A0=load i8*,i8**%W,align 8
store i8*null,i8**%W,align 8
%A1=bitcast i8*%AX to i8**
store i8*%A0,i8**%A1,align 8
%A2=getelementptr inbounds i8,i8*%AX,i64 8
%A3=bitcast i8*%A2 to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN12BinaryMapFn24findE_550 to void(...)*),void(...)**%A3,align 8
%A4=getelementptr inbounds i8,i8*%AX,i64 16
%A5=bitcast i8*%A4 to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN12BinaryMapFn24findE_727 to void(...)*),void(...)**%A5,align 8
%A6=getelementptr inbounds i8,i8*%AX,i64 24
%A7=bitcast i8*%A6 to i32*
store i32 -2147483647,i32*%A7,align 4
%A8=call i8*@sml_alloc(i32 inreg 12)#0
%A9=getelementptr inbounds i8,i8*%A8,i64 -4
%Ba=bitcast i8*%A9 to i32*
store i32 1342177288,i32*%Ba,align 4
store i8*%A8,i8**%W,align 8
%Bb=load i8*,i8**%q,align 8
store i8*null,i8**%q,align 8
%Bc=bitcast i8*%A8 to i8**
store i8*%Bb,i8**%Bc,align 8
%Bd=getelementptr inbounds i8,i8*%A8,i64 8
%Be=bitcast i8*%Bd to i32*
store i32 1,i32*%Be,align 4
%Bf=call i8*@sml_alloc(i32 inreg 28)#0
%Bg=getelementptr inbounds i8,i8*%Bf,i64 -4
%Bh=bitcast i8*%Bg to i32*
store i32 1342177304,i32*%Bh,align 4
store i8*%Bf,i8**%q,align 8
%Bi=load i8*,i8**%W,align 8
store i8*null,i8**%W,align 8
%Bj=bitcast i8*%Bf to i8**
store i8*%Bi,i8**%Bj,align 8
%Bk=getelementptr inbounds i8,i8*%Bf,i64 8
%Bl=bitcast i8*%Bk to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN12BinaryMapFn25findiE_552 to void(...)*),void(...)**%Bl,align 8
%Bm=getelementptr inbounds i8,i8*%Bf,i64 16
%Bn=bitcast i8*%Bm to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN12BinaryMapFn25findiE_728 to void(...)*),void(...)**%Bn,align 8
%Bo=getelementptr inbounds i8,i8*%Bf,i64 24
%Bp=bitcast i8*%Bo to i32*
store i32 -2147483647,i32*%Bp,align 4
%Bq=call i8*@sml_alloc(i32 inreg 12)#0
%Br=getelementptr inbounds i8,i8*%Bq,i64 -4
%Bs=bitcast i8*%Br to i32*
store i32 1342177288,i32*%Bs,align 4
store i8*%Bq,i8**%W,align 8
%Bt=load i8*,i8**%r,align 8
store i8*null,i8**%r,align 8
%Bu=bitcast i8*%Bq to i8**
store i8*%Bt,i8**%Bu,align 8
%Bv=getelementptr inbounds i8,i8*%Bq,i64 8
%Bw=bitcast i8*%Bv to i32*
store i32 1,i32*%Bw,align 4
%Bx=call i8*@sml_alloc(i32 inreg 28)#0
%By=getelementptr inbounds i8,i8*%Bx,i64 -4
%Bz=bitcast i8*%By to i32*
store i32 1342177304,i32*%Bz,align 4
store i8*%Bx,i8**%r,align 8
%BA=load i8*,i8**%W,align 8
store i8*null,i8**%W,align 8
%BB=bitcast i8*%Bx to i8**
store i8*%BA,i8**%BB,align 8
%BC=getelementptr inbounds i8,i8*%Bx,i64 8
%BD=bitcast i8*%BC to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN12BinaryMapFn26lookupE_554 to void(...)*),void(...)**%BD,align 8
%BE=getelementptr inbounds i8,i8*%Bx,i64 16
%BF=bitcast i8*%BE to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN12BinaryMapFn26lookupE_729 to void(...)*),void(...)**%BF,align 8
%BG=getelementptr inbounds i8,i8*%Bx,i64 24
%BH=bitcast i8*%BG to i32*
store i32 -2147483647,i32*%BH,align 4
%BI=call i8*@sml_alloc(i32 inreg 12)#0
%BJ=getelementptr inbounds i8,i8*%BI,i64 -4
%BK=bitcast i8*%BJ to i32*
store i32 1342177288,i32*%BK,align 4
store i8*%BI,i8**%W,align 8
%BL=load i8*,i8**%o,align 8
store i8*null,i8**%o,align 8
%BM=bitcast i8*%BI to i8**
store i8*%BL,i8**%BM,align 8
%BN=getelementptr inbounds i8,i8*%BI,i64 8
%BO=bitcast i8*%BN to i32*
store i32 1,i32*%BO,align 4
%BP=call i8*@sml_alloc(i32 inreg 28)#0
%BQ=getelementptr inbounds i8,i8*%BP,i64 -4
%BR=bitcast i8*%BQ to i32*
store i32 1342177304,i32*%BR,align 4
store i8*%BP,i8**%o,align 8
%BS=load i8*,i8**%W,align 8
store i8*null,i8**%W,align 8
%BT=bitcast i8*%BP to i8**
store i8*%BS,i8**%BT,align 8
%BU=getelementptr inbounds i8,i8*%BP,i64 8
%BV=bitcast i8*%BU to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN12BinaryMapFn28inDomainE_556 to void(...)*),void(...)**%BV,align 8
%BW=getelementptr inbounds i8,i8*%BP,i64 16
%BX=bitcast i8*%BW to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN12BinaryMapFn28inDomainE_731 to void(...)*),void(...)**%BX,align 8
%BY=getelementptr inbounds i8,i8*%BP,i64 24
%BZ=bitcast i8*%BY to i32*
store i32 -2147483647,i32*%BZ,align 4
%B0=call i8*@sml_alloc(i32 inreg 12)#0
%B1=getelementptr inbounds i8,i8*%B0,i64 -4
%B2=bitcast i8*%B1 to i32*
store i32 1342177288,i32*%B2,align 4
store i8*%B0,i8**%W,align 8
%B3=load i8*,i8**%s,align 8
store i8*null,i8**%s,align 8
%B4=bitcast i8*%B0 to i8**
store i8*%B3,i8**%B4,align 8
%B5=getelementptr inbounds i8,i8*%B0,i64 8
%B6=bitcast i8*%B5 to i32*
store i32 1,i32*%B6,align 4
%B7=call i8*@sml_alloc(i32 inreg 28)#0
%B8=getelementptr inbounds i8,i8*%B7,i64 -4
%B9=bitcast i8*%B8 to i32*
store i32 1342177304,i32*%B9,align 4
store i8*%B7,i8**%s,align 8
%Ca=load i8*,i8**%W,align 8
store i8*null,i8**%W,align 8
%Cb=bitcast i8*%B7 to i8**
store i8*%Ca,i8**%Cb,align 8
%Cc=getelementptr inbounds i8,i8*%B7,i64 8
%Cd=bitcast i8*%Cc to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN12BinaryMapFn26removeE_558 to void(...)*),void(...)**%Cd,align 8
%Ce=getelementptr inbounds i8,i8*%B7,i64 16
%Cf=bitcast i8*%Ce to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN12BinaryMapFn26removeE_732 to void(...)*),void(...)**%Cf,align 8
%Cg=getelementptr inbounds i8,i8*%B7,i64 24
%Ch=bitcast i8*%Cg to i32*
store i32 -2147483647,i32*%Ch,align 4
%Ci=call i8*@sml_alloc(i32 inreg 12)#0
%Cj=getelementptr inbounds i8,i8*%Ci,i64 -4
%Ck=bitcast i8*%Cj to i32*
store i32 1342177288,i32*%Ck,align 4
store i8*%Ci,i8**%W,align 8
%Cl=load i8*,i8**%t,align 8
store i8*null,i8**%t,align 8
%Cm=bitcast i8*%Ci to i8**
store i8*%Cl,i8**%Cm,align 8
%Cn=getelementptr inbounds i8,i8*%Ci,i64 8
%Co=bitcast i8*%Cn to i32*
store i32 1,i32*%Co,align 4
%Cp=call i8*@sml_alloc(i32 inreg 28)#0
%Cq=getelementptr inbounds i8,i8*%Cp,i64 -4
%Cr=bitcast i8*%Cq to i32*
store i32 1342177304,i32*%Cr,align 4
store i8*%Cp,i8**%t,align 8
%Cs=load i8*,i8**%W,align 8
store i8*null,i8**%W,align 8
%Ct=bitcast i8*%Cp to i8**
store i8*%Cs,i8**%Ct,align 8
%Cu=getelementptr inbounds i8,i8*%Cp,i64 8
%Cv=bitcast i8*%Cu to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN12BinaryMapFn27removeiE_560 to void(...)*),void(...)**%Cv,align 8
%Cw=getelementptr inbounds i8,i8*%Cp,i64 16
%Cx=bitcast i8*%Cw to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN12BinaryMapFn27removeiE_733 to void(...)*),void(...)**%Cx,align 8
%Cy=getelementptr inbounds i8,i8*%Cp,i64 24
%Cz=bitcast i8*%Cy to i32*
store i32 -2147483647,i32*%Cz,align 4
%CA=call i8*@sml_alloc(i32 inreg 12)#0
%CB=getelementptr inbounds i8,i8*%CA,i64 -4
%CC=bitcast i8*%CB to i32*
store i32 1342177288,i32*%CC,align 4
store i8*%CA,i8**%W,align 8
%CD=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%CE=bitcast i8*%CA to i8**
store i8*%CD,i8**%CE,align 8
%CF=getelementptr inbounds i8,i8*%CA,i64 8
%CG=bitcast i8*%CF to i32*
store i32 1,i32*%CG,align 4
%CH=call i8*@sml_alloc(i32 inreg 28)#0
%CI=getelementptr inbounds i8,i8*%CH,i64 -4
%CJ=bitcast i8*%CI to i32*
store i32 1342177304,i32*%CJ,align 4
store i8*%CH,i8**%e,align 8
%CK=load i8*,i8**%W,align 8
store i8*null,i8**%W,align 8
%CL=bitcast i8*%CH to i8**
store i8*%CK,i8**%CL,align 8
%CM=getelementptr inbounds i8,i8*%CH,i64 8
%CN=bitcast i8*%CM to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN12BinaryMapFn25firstE_562 to void(...)*),void(...)**%CN,align 8
%CO=getelementptr inbounds i8,i8*%CH,i64 16
%CP=bitcast i8*%CO to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN12BinaryMapFn25firstE_734 to void(...)*),void(...)**%CP,align 8
%CQ=getelementptr inbounds i8,i8*%CH,i64 24
%CR=bitcast i8*%CQ to i32*
store i32 -2147483647,i32*%CR,align 4
%CS=call i8*@sml_alloc(i32 inreg 12)#0
%CT=getelementptr inbounds i8,i8*%CS,i64 -4
%CU=bitcast i8*%CT to i32*
store i32 1342177288,i32*%CU,align 4
store i8*%CS,i8**%W,align 8
%CV=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%CW=bitcast i8*%CS to i8**
store i8*%CV,i8**%CW,align 8
%CX=getelementptr inbounds i8,i8*%CS,i64 8
%CY=bitcast i8*%CX to i32*
store i32 1,i32*%CY,align 4
%CZ=call i8*@sml_alloc(i32 inreg 28)#0
%C0=getelementptr inbounds i8,i8*%CZ,i64 -4
%C1=bitcast i8*%C0 to i32*
store i32 1342177304,i32*%C1,align 4
store i8*%CZ,i8**%f,align 8
%C2=load i8*,i8**%W,align 8
store i8*null,i8**%W,align 8
%C3=bitcast i8*%CZ to i8**
store i8*%C2,i8**%C3,align 8
%C4=getelementptr inbounds i8,i8*%CZ,i64 8
%C5=bitcast i8*%C4 to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN12BinaryMapFn26firstiE_564 to void(...)*),void(...)**%C5,align 8
%C6=getelementptr inbounds i8,i8*%CZ,i64 16
%C7=bitcast i8*%C6 to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN12BinaryMapFn26firstiE_735 to void(...)*),void(...)**%C7,align 8
%C8=getelementptr inbounds i8,i8*%CZ,i64 24
%C9=bitcast i8*%C8 to i32*
store i32 -2147483647,i32*%C9,align 4
%Da=call i8*@sml_alloc(i32 inreg 12)#0
%Db=getelementptr inbounds i8,i8*%Da,i64 -4
%Dc=bitcast i8*%Db to i32*
store i32 1342177288,i32*%Dc,align 4
store i8*%Da,i8**%W,align 8
%Dd=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%De=bitcast i8*%Da to i8**
store i8*%Dd,i8**%De,align 8
%Df=getelementptr inbounds i8,i8*%Da,i64 8
%Dg=bitcast i8*%Df to i32*
store i32 1,i32*%Dg,align 4
%Dh=call i8*@sml_alloc(i32 inreg 28)#0
%Di=getelementptr inbounds i8,i8*%Dh,i64 -4
%Dj=bitcast i8*%Di to i32*
store i32 1342177304,i32*%Dj,align 4
store i8*%Dh,i8**%g,align 8
%Dk=load i8*,i8**%W,align 8
store i8*null,i8**%W,align 8
%Dl=bitcast i8*%Dh to i8**
store i8*%Dk,i8**%Dl,align 8
%Dm=getelementptr inbounds i8,i8*%Dh,i64 8
%Dn=bitcast i8*%Dm to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN12BinaryMapFn29listItemsE_570 to void(...)*),void(...)**%Dn,align 8
%Do=getelementptr inbounds i8,i8*%Dh,i64 16
%Dp=bitcast i8*%Do to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN12BinaryMapFn29listItemsE_738 to void(...)*),void(...)**%Dp,align 8
%Dq=getelementptr inbounds i8,i8*%Dh,i64 24
%Dr=bitcast i8*%Dq to i32*
store i32 -2147483647,i32*%Dr,align 4
%Ds=call i8*@sml_alloc(i32 inreg 12)#0
%Dt=getelementptr inbounds i8,i8*%Ds,i64 -4
%Du=bitcast i8*%Dt to i32*
store i32 1342177288,i32*%Du,align 4
store i8*%Ds,i8**%W,align 8
%Dv=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%Dw=bitcast i8*%Ds to i8**
store i8*%Dv,i8**%Dw,align 8
%Dx=getelementptr inbounds i8,i8*%Ds,i64 8
%Dy=bitcast i8*%Dx to i32*
store i32 1,i32*%Dy,align 4
%Dz=call i8*@sml_alloc(i32 inreg 28)#0
%DA=getelementptr inbounds i8,i8*%Dz,i64 -4
%DB=bitcast i8*%DA to i32*
store i32 1342177304,i32*%DB,align 4
store i8*%Dz,i8**%j,align 8
%DC=load i8*,i8**%W,align 8
store i8*null,i8**%W,align 8
%DD=bitcast i8*%Dz to i8**
store i8*%DC,i8**%DD,align 8
%DE=getelementptr inbounds i8,i8*%Dz,i64 8
%DF=bitcast i8*%DE to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN12BinaryMapFn210listItemsiE_572 to void(...)*),void(...)**%DF,align 8
%DG=getelementptr inbounds i8,i8*%Dz,i64 16
%DH=bitcast i8*%DG to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN12BinaryMapFn210listItemsiE_739 to void(...)*),void(...)**%DH,align 8
%DI=getelementptr inbounds i8,i8*%Dz,i64 24
%DJ=bitcast i8*%DI to i32*
store i32 -2147483647,i32*%DJ,align 4
%DK=call i8*@sml_alloc(i32 inreg 12)#0
%DL=getelementptr inbounds i8,i8*%DK,i64 -4
%DM=bitcast i8*%DL to i32*
store i32 1342177288,i32*%DM,align 4
store i8*%DK,i8**%W,align 8
%DN=load i8*,i8**%u,align 8
store i8*null,i8**%u,align 8
%DO=bitcast i8*%DK to i8**
store i8*%DN,i8**%DO,align 8
%DP=getelementptr inbounds i8,i8*%DK,i64 8
%DQ=bitcast i8*%DP to i32*
store i32 1,i32*%DQ,align 4
%DR=call i8*@sml_alloc(i32 inreg 28)#0
%DS=getelementptr inbounds i8,i8*%DR,i64 -4
%DT=bitcast i8*%DS to i32*
store i32 1342177304,i32*%DT,align 4
store i8*%DR,i8**%u,align 8
%DU=load i8*,i8**%W,align 8
store i8*null,i8**%W,align 8
%DV=bitcast i8*%DR to i8**
store i8*%DU,i8**%DV,align 8
%DW=getelementptr inbounds i8,i8*%DR,i64 8
%DX=bitcast i8*%DW to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN12BinaryMapFn28listKeysE_574 to void(...)*),void(...)**%DX,align 8
%DY=getelementptr inbounds i8,i8*%DR,i64 16
%DZ=bitcast i8*%DY to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN12BinaryMapFn28listKeysE_740 to void(...)*),void(...)**%DZ,align 8
%D0=getelementptr inbounds i8,i8*%DR,i64 24
%D1=bitcast i8*%D0 to i32*
store i32 -2147483647,i32*%D1,align 4
%D2=call i8*@sml_alloc(i32 inreg 12)#0
%D3=getelementptr inbounds i8,i8*%D2,i64 -4
%D4=bitcast i8*%D3 to i32*
store i32 1342177288,i32*%D4,align 4
store i8*%D2,i8**%W,align 8
%D5=load i8*,i8**%x,align 8
store i8*null,i8**%x,align 8
%D6=bitcast i8*%D2 to i8**
store i8*%D5,i8**%D6,align 8
%D7=getelementptr inbounds i8,i8*%D2,i64 8
%D8=bitcast i8*%D7 to i32*
store i32 1,i32*%D8,align 4
%D9=call i8*@sml_alloc(i32 inreg 28)#0
%Ea=getelementptr inbounds i8,i8*%D9,i64 -4
%Eb=bitcast i8*%Ea to i32*
store i32 1342177304,i32*%Eb,align 4
store i8*%D9,i8**%x,align 8
%Ec=load i8*,i8**%W,align 8
store i8*null,i8**%W,align 8
%Ed=bitcast i8*%D9 to i8**
store i8*%Ec,i8**%Ed,align 8
%Ee=getelementptr inbounds i8,i8*%D9,i64 8
%Ef=bitcast i8*%Ee to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN12BinaryMapFn27collateE_576 to void(...)*),void(...)**%Ef,align 8
%Eg=getelementptr inbounds i8,i8*%D9,i64 16
%Eh=bitcast i8*%Eg to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN12BinaryMapFn27collateE_741 to void(...)*),void(...)**%Eh,align 8
%Ei=getelementptr inbounds i8,i8*%D9,i64 24
%Ej=bitcast i8*%Ei to i32*
store i32 -2147483647,i32*%Ej,align 4
%Ek=call i8*@sml_alloc(i32 inreg 12)#0
%El=getelementptr inbounds i8,i8*%Ek,i64 -4
%Em=bitcast i8*%El to i32*
store i32 1342177288,i32*%Em,align 4
store i8*%Ek,i8**%W,align 8
%En=load i8*,i8**%E,align 8
store i8*null,i8**%E,align 8
%Eo=bitcast i8*%Ek to i8**
store i8*%En,i8**%Eo,align 8
%Ep=getelementptr inbounds i8,i8*%Ek,i64 8
%Eq=bitcast i8*%Ep to i32*
store i32 1,i32*%Eq,align 4
%Er=call i8*@sml_alloc(i32 inreg 28)#0
%Es=getelementptr inbounds i8,i8*%Er,i64 -4
%Et=bitcast i8*%Es to i32*
store i32 1342177304,i32*%Et,align 4
store i8*%Er,i8**%E,align 8
%Eu=load i8*,i8**%W,align 8
store i8*null,i8**%W,align 8
%Ev=bitcast i8*%Er to i8**
store i8*%Eu,i8**%Ev,align 8
%Ew=getelementptr inbounds i8,i8*%Er,i64 8
%Ex=bitcast i8*%Ew to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN12BinaryMapFn29unionWithE_578 to void(...)*),void(...)**%Ex,align 8
%Ey=getelementptr inbounds i8,i8*%Er,i64 16
%Ez=bitcast i8*%Ey to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN12BinaryMapFn29unionWithE_742 to void(...)*),void(...)**%Ez,align 8
%EA=getelementptr inbounds i8,i8*%Er,i64 24
%EB=bitcast i8*%EA to i32*
store i32 -2147483647,i32*%EB,align 4
%EC=call i8*@sml_alloc(i32 inreg 12)#0
%ED=getelementptr inbounds i8,i8*%EC,i64 -4
%EE=bitcast i8*%ED to i32*
store i32 1342177288,i32*%EE,align 4
store i8*%EC,i8**%W,align 8
%EF=load i8*,i8**%F,align 8
store i8*null,i8**%F,align 8
%EG=bitcast i8*%EC to i8**
store i8*%EF,i8**%EG,align 8
%EH=getelementptr inbounds i8,i8*%EC,i64 8
%EI=bitcast i8*%EH to i32*
store i32 1,i32*%EI,align 4
%EJ=call i8*@sml_alloc(i32 inreg 28)#0
%EK=getelementptr inbounds i8,i8*%EJ,i64 -4
%EL=bitcast i8*%EK to i32*
store i32 1342177304,i32*%EL,align 4
store i8*%EJ,i8**%F,align 8
%EM=load i8*,i8**%W,align 8
store i8*null,i8**%W,align 8
%EN=bitcast i8*%EJ to i8**
store i8*%EM,i8**%EN,align 8
%EO=getelementptr inbounds i8,i8*%EJ,i64 8
%EP=bitcast i8*%EO to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN12BinaryMapFn210unionWithiE_580 to void(...)*),void(...)**%EP,align 8
%EQ=getelementptr inbounds i8,i8*%EJ,i64 16
%ER=bitcast i8*%EQ to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN12BinaryMapFn210unionWithiE_743 to void(...)*),void(...)**%ER,align 8
%ES=getelementptr inbounds i8,i8*%EJ,i64 24
%ET=bitcast i8*%ES to i32*
store i32 -2147483647,i32*%ET,align 4
%EU=call i8*@sml_alloc(i32 inreg 12)#0
%EV=getelementptr inbounds i8,i8*%EU,i64 -4
%EW=bitcast i8*%EV to i32*
store i32 1342177288,i32*%EW,align 4
store i8*%EU,i8**%W,align 8
%EX=load i8*,i8**%G,align 8
store i8*null,i8**%G,align 8
%EY=bitcast i8*%EU to i8**
store i8*%EX,i8**%EY,align 8
%EZ=getelementptr inbounds i8,i8*%EU,i64 8
%E0=bitcast i8*%EZ to i32*
store i32 1,i32*%E0,align 4
%E1=call i8*@sml_alloc(i32 inreg 28)#0
%E2=getelementptr inbounds i8,i8*%E1,i64 -4
%E3=bitcast i8*%E2 to i32*
store i32 1342177304,i32*%E3,align 4
store i8*%E1,i8**%G,align 8
%E4=load i8*,i8**%W,align 8
store i8*null,i8**%W,align 8
%E5=bitcast i8*%E1 to i8**
store i8*%E4,i8**%E5,align 8
%E6=getelementptr inbounds i8,i8*%E1,i64 8
%E7=bitcast i8*%E6 to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN12BinaryMapFn211unionWithi2E_582 to void(...)*),void(...)**%E7,align 8
%E8=getelementptr inbounds i8,i8*%E1,i64 16
%E9=bitcast i8*%E8 to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN12BinaryMapFn211unionWithi2E_744 to void(...)*),void(...)**%E9,align 8
%Fa=getelementptr inbounds i8,i8*%E1,i64 24
%Fb=bitcast i8*%Fa to i32*
store i32 -2147483647,i32*%Fb,align 4
%Fc=call i8*@sml_alloc(i32 inreg 12)#0
%Fd=getelementptr inbounds i8,i8*%Fc,i64 -4
%Fe=bitcast i8*%Fd to i32*
store i32 1342177288,i32*%Fe,align 4
store i8*%Fc,i8**%W,align 8
%Ff=load i8*,i8**%H,align 8
store i8*null,i8**%H,align 8
%Fg=bitcast i8*%Fc to i8**
store i8*%Ff,i8**%Fg,align 8
%Fh=getelementptr inbounds i8,i8*%Fc,i64 8
%Fi=bitcast i8*%Fh to i32*
store i32 1,i32*%Fi,align 4
%Fj=call i8*@sml_alloc(i32 inreg 28)#0
%Fk=getelementptr inbounds i8,i8*%Fj,i64 -4
%Fl=bitcast i8*%Fk to i32*
store i32 1342177304,i32*%Fl,align 4
store i8*%Fj,i8**%H,align 8
%Fm=load i8*,i8**%W,align 8
store i8*null,i8**%W,align 8
%Fn=bitcast i8*%Fj to i8**
store i8*%Fm,i8**%Fn,align 8
%Fo=getelementptr inbounds i8,i8*%Fj,i64 8
%Fp=bitcast i8*%Fo to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN12BinaryMapFn211unionWithi3E_584 to void(...)*),void(...)**%Fp,align 8
%Fq=getelementptr inbounds i8,i8*%Fj,i64 16
%Fr=bitcast i8*%Fq to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN12BinaryMapFn211unionWithi3E_745 to void(...)*),void(...)**%Fr,align 8
%Fs=getelementptr inbounds i8,i8*%Fj,i64 24
%Ft=bitcast i8*%Fs to i32*
store i32 -2147483647,i32*%Ft,align 4
%Fu=call i8*@sml_alloc(i32 inreg 12)#0
%Fv=getelementptr inbounds i8,i8*%Fu,i64 -4
%Fw=bitcast i8*%Fv to i32*
store i32 1342177288,i32*%Fw,align 4
store i8*%Fu,i8**%W,align 8
%Fx=load i8*,i8**%I,align 8
store i8*null,i8**%I,align 8
%Fy=bitcast i8*%Fu to i8**
store i8*%Fx,i8**%Fy,align 8
%Fz=getelementptr inbounds i8,i8*%Fu,i64 8
%FA=bitcast i8*%Fz to i32*
store i32 1,i32*%FA,align 4
%FB=call i8*@sml_alloc(i32 inreg 28)#0
%FC=getelementptr inbounds i8,i8*%FB,i64 -4
%FD=bitcast i8*%FC to i32*
store i32 1342177304,i32*%FD,align 4
store i8*%FB,i8**%I,align 8
%FE=load i8*,i8**%W,align 8
store i8*null,i8**%W,align 8
%FF=bitcast i8*%FB to i8**
store i8*%FE,i8**%FF,align 8
%FG=getelementptr inbounds i8,i8*%FB,i64 8
%FH=bitcast i8*%FG to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32,i32,i32)*@_SMLLN12BinaryMapFn213intersectWithE_586 to void(...)*),void(...)**%FH,align 8
%FI=getelementptr inbounds i8,i8*%FB,i64 16
%FJ=bitcast i8*%FI to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*,i8*,i8*)*@_SMLLN12BinaryMapFn213intersectWithE_746 to void(...)*),void(...)**%FJ,align 8
%FK=getelementptr inbounds i8,i8*%FB,i64 24
%FL=bitcast i8*%FK to i32*
store i32 -2147483647,i32*%FL,align 4
%FM=call i8*@sml_alloc(i32 inreg 12)#0
%FN=getelementptr inbounds i8,i8*%FM,i64 -4
%FO=bitcast i8*%FN to i32*
store i32 1342177288,i32*%FO,align 4
store i8*%FM,i8**%W,align 8
%FP=load i8*,i8**%J,align 8
store i8*null,i8**%J,align 8
%FQ=bitcast i8*%FM to i8**
store i8*%FP,i8**%FQ,align 8
%FR=getelementptr inbounds i8,i8*%FM,i64 8
%FS=bitcast i8*%FR to i32*
store i32 1,i32*%FS,align 4
%FT=call i8*@sml_alloc(i32 inreg 28)#0
%FU=getelementptr inbounds i8,i8*%FT,i64 -4
%FV=bitcast i8*%FU to i32*
store i32 1342177304,i32*%FV,align 4
store i8*%FT,i8**%J,align 8
%FW=load i8*,i8**%W,align 8
store i8*null,i8**%W,align 8
%FX=bitcast i8*%FT to i8**
store i8*%FW,i8**%FX,align 8
%FY=getelementptr inbounds i8,i8*%FT,i64 8
%FZ=bitcast i8*%FY to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32,i32,i32)*@_SMLLN12BinaryMapFn214intersectWithiE_588 to void(...)*),void(...)**%FZ,align 8
%F0=getelementptr inbounds i8,i8*%FT,i64 16
%F1=bitcast i8*%F0 to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*,i8*,i8*)*@_SMLLN12BinaryMapFn214intersectWithiE_747 to void(...)*),void(...)**%F1,align 8
%F2=getelementptr inbounds i8,i8*%FT,i64 24
%F3=bitcast i8*%F2 to i32*
store i32 -2147483647,i32*%F3,align 4
%F4=call i8*@sml_alloc(i32 inreg 12)#0
%F5=getelementptr inbounds i8,i8*%F4,i64 -4
%F6=bitcast i8*%F5 to i32*
store i32 1342177288,i32*%F6,align 4
store i8*%F4,i8**%W,align 8
%F7=load i8*,i8**%K,align 8
store i8*null,i8**%K,align 8
%F8=bitcast i8*%F4 to i8**
store i8*%F7,i8**%F8,align 8
%F9=getelementptr inbounds i8,i8*%F4,i64 8
%Ga=bitcast i8*%F9 to i32*
store i32 1,i32*%Ga,align 4
%Gb=call i8*@sml_alloc(i32 inreg 28)#0
%Gc=getelementptr inbounds i8,i8*%Gb,i64 -4
%Gd=bitcast i8*%Gc to i32*
store i32 1342177304,i32*%Gd,align 4
store i8*%Gb,i8**%K,align 8
%Ge=load i8*,i8**%W,align 8
store i8*null,i8**%W,align 8
%Gf=bitcast i8*%Gb to i8**
store i8*%Ge,i8**%Gf,align 8
%Gg=getelementptr inbounds i8,i8*%Gb,i64 8
%Gh=bitcast i8*%Gg to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32,i32,i32)*@_SMLLN12BinaryMapFn215intersectWithi2E_590 to void(...)*),void(...)**%Gh,align 8
%Gi=getelementptr inbounds i8,i8*%Gb,i64 16
%Gj=bitcast i8*%Gi to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*,i8*,i8*)*@_SMLLN12BinaryMapFn215intersectWithi2E_748 to void(...)*),void(...)**%Gj,align 8
%Gk=getelementptr inbounds i8,i8*%Gb,i64 24
%Gl=bitcast i8*%Gk to i32*
store i32 -2147483647,i32*%Gl,align 4
%Gm=call i8*@sml_alloc(i32 inreg 12)#0
%Gn=getelementptr inbounds i8,i8*%Gm,i64 -4
%Go=bitcast i8*%Gn to i32*
store i32 1342177288,i32*%Go,align 4
store i8*%Gm,i8**%W,align 8
%Gp=load i8*,i8**%L,align 8
store i8*null,i8**%L,align 8
%Gq=bitcast i8*%Gm to i8**
store i8*%Gp,i8**%Gq,align 8
%Gr=getelementptr inbounds i8,i8*%Gm,i64 8
%Gs=bitcast i8*%Gr to i32*
store i32 1,i32*%Gs,align 4
%Gt=call i8*@sml_alloc(i32 inreg 28)#0
%Gu=getelementptr inbounds i8,i8*%Gt,i64 -4
%Gv=bitcast i8*%Gu to i32*
store i32 1342177304,i32*%Gv,align 4
store i8*%Gt,i8**%L,align 8
%Gw=load i8*,i8**%W,align 8
store i8*null,i8**%W,align 8
%Gx=bitcast i8*%Gt to i8**
store i8*%Gw,i8**%Gx,align 8
%Gy=getelementptr inbounds i8,i8*%Gt,i64 8
%Gz=bitcast i8*%Gy to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32,i32,i32)*@_SMLLN12BinaryMapFn29mergeWithE_592 to void(...)*),void(...)**%Gz,align 8
%GA=getelementptr inbounds i8,i8*%Gt,i64 16
%GB=bitcast i8*%GA to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*,i8*,i8*)*@_SMLLN12BinaryMapFn29mergeWithE_749 to void(...)*),void(...)**%GB,align 8
%GC=getelementptr inbounds i8,i8*%Gt,i64 24
%GD=bitcast i8*%GC to i32*
store i32 -2147483647,i32*%GD,align 4
%GE=call i8*@sml_alloc(i32 inreg 12)#0
%GF=getelementptr inbounds i8,i8*%GE,i64 -4
%GG=bitcast i8*%GF to i32*
store i32 1342177288,i32*%GG,align 4
store i8*%GE,i8**%W,align 8
%GH=load i8*,i8**%M,align 8
store i8*null,i8**%M,align 8
%GI=bitcast i8*%GE to i8**
store i8*%GH,i8**%GI,align 8
%GJ=getelementptr inbounds i8,i8*%GE,i64 8
%GK=bitcast i8*%GJ to i32*
store i32 1,i32*%GK,align 4
%GL=call i8*@sml_alloc(i32 inreg 28)#0
%GM=getelementptr inbounds i8,i8*%GL,i64 -4
%GN=bitcast i8*%GM to i32*
store i32 1342177304,i32*%GN,align 4
store i8*%GL,i8**%M,align 8
%GO=load i8*,i8**%W,align 8
store i8*null,i8**%W,align 8
%GP=bitcast i8*%GL to i8**
store i8*%GO,i8**%GP,align 8
%GQ=getelementptr inbounds i8,i8*%GL,i64 8
%GR=bitcast i8*%GQ to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32,i32,i32)*@_SMLLN12BinaryMapFn210mergeWithiE_594 to void(...)*),void(...)**%GR,align 8
%GS=getelementptr inbounds i8,i8*%GL,i64 16
%GT=bitcast i8*%GS to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*,i8*,i8*)*@_SMLLN12BinaryMapFn210mergeWithiE_750 to void(...)*),void(...)**%GT,align 8
%GU=getelementptr inbounds i8,i8*%GL,i64 24
%GV=bitcast i8*%GU to i32*
store i32 -2147483647,i32*%GV,align 4
%GW=call i8*@sml_alloc(i32 inreg 12)#0
%GX=getelementptr inbounds i8,i8*%GW,i64 -4
%GY=bitcast i8*%GX to i32*
store i32 1342177288,i32*%GY,align 4
store i8*%GW,i8**%W,align 8
%GZ=load i8*,i8**%N,align 8
store i8*null,i8**%N,align 8
%G0=bitcast i8*%GW to i8**
store i8*%GZ,i8**%G0,align 8
%G1=getelementptr inbounds i8,i8*%GW,i64 8
%G2=bitcast i8*%G1 to i32*
store i32 1,i32*%G2,align 4
%G3=call i8*@sml_alloc(i32 inreg 28)#0
%G4=getelementptr inbounds i8,i8*%G3,i64 -4
%G5=bitcast i8*%G4 to i32*
store i32 1342177304,i32*%G5,align 4
store i8*%G3,i8**%N,align 8
%G6=load i8*,i8**%W,align 8
store i8*null,i8**%W,align 8
%G7=bitcast i8*%G3 to i8**
store i8*%G6,i8**%G7,align 8
%G8=getelementptr inbounds i8,i8*%G3,i64 8
%G9=bitcast i8*%G8 to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32,i32,i32)*@_SMLLN12BinaryMapFn211mergeWithi2E_596 to void(...)*),void(...)**%G9,align 8
%Ha=getelementptr inbounds i8,i8*%G3,i64 16
%Hb=bitcast i8*%Ha to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*,i8*,i8*)*@_SMLLN12BinaryMapFn211mergeWithi2E_751 to void(...)*),void(...)**%Hb,align 8
%Hc=getelementptr inbounds i8,i8*%G3,i64 24
%Hd=bitcast i8*%Hc to i32*
store i32 -2147483647,i32*%Hd,align 4
%He=call i8*@sml_alloc(i32 inreg 12)#0
%Hf=getelementptr inbounds i8,i8*%He,i64 -4
%Hg=bitcast i8*%Hf to i32*
store i32 1342177288,i32*%Hg,align 4
store i8*%He,i8**%W,align 8
%Hh=load i8*,i8**%w,align 8
store i8*null,i8**%w,align 8
%Hi=bitcast i8*%He to i8**
store i8*%Hh,i8**%Hi,align 8
%Hj=getelementptr inbounds i8,i8*%He,i64 8
%Hk=bitcast i8*%Hj to i32*
store i32 1,i32*%Hk,align 4
%Hl=call i8*@sml_alloc(i32 inreg 28)#0
%Hm=getelementptr inbounds i8,i8*%Hl,i64 -4
%Hn=bitcast i8*%Hm to i32*
store i32 1342177304,i32*%Hn,align 4
store i8*%Hl,i8**%w,align 8
%Ho=load i8*,i8**%W,align 8
store i8*null,i8**%W,align 8
%Hp=bitcast i8*%Hl to i8**
store i8*%Ho,i8**%Hp,align 8
%Hq=getelementptr inbounds i8,i8*%Hl,i64 8
%Hr=bitcast i8*%Hq to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN12BinaryMapFn23appE_598 to void(...)*),void(...)**%Hr,align 8
%Hs=getelementptr inbounds i8,i8*%Hl,i64 16
%Ht=bitcast i8*%Hs to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN12BinaryMapFn23appE_752 to void(...)*),void(...)**%Ht,align 8
%Hu=getelementptr inbounds i8,i8*%Hl,i64 24
%Hv=bitcast i8*%Hu to i32*
store i32 -2147483647,i32*%Hv,align 4
%Hw=call i8*@sml_alloc(i32 inreg 12)#0
%Hx=getelementptr inbounds i8,i8*%Hw,i64 -4
%Hy=bitcast i8*%Hx to i32*
store i32 1342177288,i32*%Hy,align 4
store i8*%Hw,i8**%W,align 8
%Hz=load i8*,i8**%v,align 8
store i8*null,i8**%v,align 8
%HA=bitcast i8*%Hw to i8**
store i8*%Hz,i8**%HA,align 8
%HB=getelementptr inbounds i8,i8*%Hw,i64 8
%HC=bitcast i8*%HB to i32*
store i32 1,i32*%HC,align 4
%HD=call i8*@sml_alloc(i32 inreg 28)#0
%HE=getelementptr inbounds i8,i8*%HD,i64 -4
%HF=bitcast i8*%HE to i32*
store i32 1342177304,i32*%HF,align 4
store i8*%HD,i8**%v,align 8
%HG=load i8*,i8**%W,align 8
store i8*null,i8**%W,align 8
%HH=bitcast i8*%HD to i8**
store i8*%HG,i8**%HH,align 8
%HI=getelementptr inbounds i8,i8*%HD,i64 8
%HJ=bitcast i8*%HI to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN12BinaryMapFn24appiE_600 to void(...)*),void(...)**%HJ,align 8
%HK=getelementptr inbounds i8,i8*%HD,i64 16
%HL=bitcast i8*%HK to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN12BinaryMapFn24appiE_753 to void(...)*),void(...)**%HL,align 8
%HM=getelementptr inbounds i8,i8*%HD,i64 24
%HN=bitcast i8*%HM to i32*
store i32 -2147483647,i32*%HN,align 4
%HO=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%HP=getelementptr inbounds i8,i8*%HO,i64 4
%HQ=bitcast i8*%HP to i32*
%HR=load i32,i32*%HQ,align 4
%HS=call i8*@sml_alloc(i32 inreg 20)#0
%HT=getelementptr inbounds i8,i8*%HS,i64 -4
%HU=bitcast i8*%HT to i32*
store i32 1342177296,i32*%HU,align 4
store i8*%HS,i8**%d,align 8
%HV=load i8*,i8**%y,align 8
%HW=bitcast i8*%HS to i8**
store i8*%HV,i8**%HW,align 8
%HX=getelementptr inbounds i8,i8*%HS,i64 8
%HY=bitcast i8*%HX to i32*
store i32%HR,i32*%HY,align 4
%HZ=getelementptr inbounds i8,i8*%HS,i64 16
%H0=bitcast i8*%HZ to i32*
store i32 1,i32*%H0,align 4
%H1=call i8*@sml_alloc(i32 inreg 28)#0
%H2=getelementptr inbounds i8,i8*%H1,i64 -4
%H3=bitcast i8*%H2 to i32*
store i32 1342177304,i32*%H3,align 4
store i8*%H1,i8**%W,align 8
%H4=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%H5=bitcast i8*%H1 to i8**
store i8*%H4,i8**%H5,align 8
%H6=getelementptr inbounds i8,i8*%H1,i64 8
%H7=bitcast i8*%H6 to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32)*@_SMLLN12BinaryMapFn23mapE_604 to void(...)*),void(...)**%H7,align 8
%H8=getelementptr inbounds i8,i8*%H1,i64 16
%H9=bitcast i8*%H8 to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLLN12BinaryMapFn23mapE_754 to void(...)*),void(...)**%H9,align 8
%Ia=getelementptr inbounds i8,i8*%H1,i64 24
%Ib=bitcast i8*%Ia to i32*
store i32 -2147483647,i32*%Ib,align 4
%Ic=call i8*@sml_alloc(i32 inreg 12)#0
%Id=getelementptr inbounds i8,i8*%Ic,i64 -4
%Ie=bitcast i8*%Id to i32*
store i32 1342177288,i32*%Ie,align 4
store i8*%Ic,i8**%d,align 8
%If=load i8*,i8**%y,align 8
store i8*null,i8**%y,align 8
%Ig=bitcast i8*%Ic to i8**
store i8*%If,i8**%Ig,align 8
%Ih=getelementptr inbounds i8,i8*%Ic,i64 8
%Ii=bitcast i8*%Ih to i32*
store i32 1,i32*%Ii,align 4
%Ij=call i8*@sml_alloc(i32 inreg 28)#0
%Ik=getelementptr inbounds i8,i8*%Ij,i64 -4
%Il=bitcast i8*%Ik to i32*
store i32 1342177304,i32*%Il,align 4
store i8*%Ij,i8**%y,align 8
%Im=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%In=bitcast i8*%Ij to i8**
store i8*%Im,i8**%In,align 8
%Io=getelementptr inbounds i8,i8*%Ij,i64 8
%Ip=bitcast i8*%Io to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32)*@_SMLLN12BinaryMapFn24mapiE_606 to void(...)*),void(...)**%Ip,align 8
%Iq=getelementptr inbounds i8,i8*%Ij,i64 16
%Ir=bitcast i8*%Iq to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLLN12BinaryMapFn24mapiE_755 to void(...)*),void(...)**%Ir,align 8
%Is=getelementptr inbounds i8,i8*%Ij,i64 24
%It=bitcast i8*%Is to i32*
store i32 -2147483647,i32*%It,align 4
%Iu=call i8*@sml_alloc(i32 inreg 12)#0
%Iv=getelementptr inbounds i8,i8*%Iu,i64 -4
%Iw=bitcast i8*%Iv to i32*
store i32 1342177288,i32*%Iw,align 4
store i8*%Iu,i8**%d,align 8
%Ix=load i8*,i8**%z,align 8
store i8*null,i8**%z,align 8
%Iy=bitcast i8*%Iu to i8**
store i8*%Ix,i8**%Iy,align 8
%Iz=getelementptr inbounds i8,i8*%Iu,i64 8
%IA=bitcast i8*%Iz to i32*
store i32 1,i32*%IA,align 4
%IB=call i8*@sml_alloc(i32 inreg 28)#0
%IC=getelementptr inbounds i8,i8*%IB,i64 -4
%ID=bitcast i8*%IC to i32*
store i32 1342177304,i32*%ID,align 4
store i8*%IB,i8**%z,align 8
%IE=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%IF=bitcast i8*%IB to i8**
store i8*%IE,i8**%IF,align 8
%IG=getelementptr inbounds i8,i8*%IB,i64 8
%IH=bitcast i8*%IG to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32)*@_SMLLN12BinaryMapFn25mapi2E_608 to void(...)*),void(...)**%IH,align 8
%II=getelementptr inbounds i8,i8*%IB,i64 16
%IJ=bitcast i8*%II to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLLN12BinaryMapFn25mapi2E_756 to void(...)*),void(...)**%IJ,align 8
%IK=getelementptr inbounds i8,i8*%IB,i64 24
%IL=bitcast i8*%IK to i32*
store i32 -2147483647,i32*%IL,align 4
%IM=call i8*@sml_alloc(i32 inreg 12)#0
%IN=getelementptr inbounds i8,i8*%IM,i64 -4
%IO=bitcast i8*%IN to i32*
store i32 1342177288,i32*%IO,align 4
store i8*%IM,i8**%d,align 8
%IP=load i8*,i8**%B,align 8
store i8*null,i8**%B,align 8
%IQ=bitcast i8*%IM to i8**
store i8*%IP,i8**%IQ,align 8
%IR=getelementptr inbounds i8,i8*%IM,i64 8
%IS=bitcast i8*%IR to i32*
store i32 1,i32*%IS,align 4
%IT=call i8*@sml_alloc(i32 inreg 28)#0
%IU=getelementptr inbounds i8,i8*%IT,i64 -4
%IV=bitcast i8*%IU to i32*
store i32 1342177304,i32*%IV,align 4
store i8*%IT,i8**%B,align 8
%IW=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%IX=bitcast i8*%IT to i8**
store i8*%IW,i8**%IX,align 8
%IY=getelementptr inbounds i8,i8*%IT,i64 8
%IZ=bitcast i8*%IY to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32)*@_SMLLN12BinaryMapFn25foldlE_610 to void(...)*),void(...)**%IZ,align 8
%I0=getelementptr inbounds i8,i8*%IT,i64 16
%I1=bitcast i8*%I0 to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLLN12BinaryMapFn25foldlE_757 to void(...)*),void(...)**%I1,align 8
%I2=getelementptr inbounds i8,i8*%IT,i64 24
%I3=bitcast i8*%I2 to i32*
store i32 -2147483647,i32*%I3,align 4
%I4=call i8*@sml_alloc(i32 inreg 12)#0
%I5=getelementptr inbounds i8,i8*%I4,i64 -4
%I6=bitcast i8*%I5 to i32*
store i32 1342177288,i32*%I6,align 4
store i8*%I4,i8**%d,align 8
%I7=load i8*,i8**%A,align 8
store i8*null,i8**%A,align 8
%I8=bitcast i8*%I4 to i8**
store i8*%I7,i8**%I8,align 8
%I9=getelementptr inbounds i8,i8*%I4,i64 8
%Ja=bitcast i8*%I9 to i32*
store i32 1,i32*%Ja,align 4
%Jb=call i8*@sml_alloc(i32 inreg 28)#0
%Jc=getelementptr inbounds i8,i8*%Jb,i64 -4
%Jd=bitcast i8*%Jc to i32*
store i32 1342177304,i32*%Jd,align 4
store i8*%Jb,i8**%A,align 8
%Je=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%Jf=bitcast i8*%Jb to i8**
store i8*%Je,i8**%Jf,align 8
%Jg=getelementptr inbounds i8,i8*%Jb,i64 8
%Jh=bitcast i8*%Jg to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32)*@_SMLLN12BinaryMapFn26foldliE_612 to void(...)*),void(...)**%Jh,align 8
%Ji=getelementptr inbounds i8,i8*%Jb,i64 16
%Jj=bitcast i8*%Ji to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLLN12BinaryMapFn26foldliE_758 to void(...)*),void(...)**%Jj,align 8
%Jk=getelementptr inbounds i8,i8*%Jb,i64 24
%Jl=bitcast i8*%Jk to i32*
store i32 -2147483647,i32*%Jl,align 4
%Jm=call i8*@sml_alloc(i32 inreg 12)#0
%Jn=getelementptr inbounds i8,i8*%Jm,i64 -4
%Jo=bitcast i8*%Jn to i32*
store i32 1342177288,i32*%Jo,align 4
store i8*%Jm,i8**%d,align 8
%Jp=load i8*,i8**%D,align 8
store i8*null,i8**%D,align 8
%Jq=bitcast i8*%Jm to i8**
store i8*%Jp,i8**%Jq,align 8
%Jr=getelementptr inbounds i8,i8*%Jm,i64 8
%Js=bitcast i8*%Jr to i32*
store i32 1,i32*%Js,align 4
%Jt=call i8*@sml_alloc(i32 inreg 28)#0
%Ju=getelementptr inbounds i8,i8*%Jt,i64 -4
%Jv=bitcast i8*%Ju to i32*
store i32 1342177304,i32*%Jv,align 4
store i8*%Jt,i8**%D,align 8
%Jw=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%Jx=bitcast i8*%Jt to i8**
store i8*%Jw,i8**%Jx,align 8
%Jy=getelementptr inbounds i8,i8*%Jt,i64 8
%Jz=bitcast i8*%Jy to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32)*@_SMLLN12BinaryMapFn25foldrE_614 to void(...)*),void(...)**%Jz,align 8
%JA=getelementptr inbounds i8,i8*%Jt,i64 16
%JB=bitcast i8*%JA to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLLN12BinaryMapFn25foldrE_759 to void(...)*),void(...)**%JB,align 8
%JC=getelementptr inbounds i8,i8*%Jt,i64 24
%JD=bitcast i8*%JC to i32*
store i32 -2147483647,i32*%JD,align 4
%JE=call i8*@sml_alloc(i32 inreg 12)#0
%JF=getelementptr inbounds i8,i8*%JE,i64 -4
%JG=bitcast i8*%JF to i32*
store i32 1342177288,i32*%JG,align 4
store i8*%JE,i8**%d,align 8
%JH=load i8*,i8**%C,align 8
store i8*null,i8**%C,align 8
%JI=bitcast i8*%JE to i8**
store i8*%JH,i8**%JI,align 8
%JJ=getelementptr inbounds i8,i8*%JE,i64 8
%JK=bitcast i8*%JJ to i32*
store i32 1,i32*%JK,align 4
%JL=call i8*@sml_alloc(i32 inreg 28)#0
%JM=getelementptr inbounds i8,i8*%JL,i64 -4
%JN=bitcast i8*%JM to i32*
store i32 1342177304,i32*%JN,align 4
store i8*%JL,i8**%C,align 8
%JO=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%JP=bitcast i8*%JL to i8**
store i8*%JO,i8**%JP,align 8
%JQ=getelementptr inbounds i8,i8*%JL,i64 8
%JR=bitcast i8*%JQ to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32)*@_SMLLN12BinaryMapFn26foldriE_616 to void(...)*),void(...)**%JR,align 8
%JS=getelementptr inbounds i8,i8*%JL,i64 16
%JT=bitcast i8*%JS to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLLN12BinaryMapFn26foldriE_760 to void(...)*),void(...)**%JT,align 8
%JU=getelementptr inbounds i8,i8*%JL,i64 24
%JV=bitcast i8*%JU to i32*
store i32 -2147483647,i32*%JV,align 4
%JW=call i8*@sml_alloc(i32 inreg 12)#0
%JX=getelementptr inbounds i8,i8*%JW,i64 -4
%JY=bitcast i8*%JX to i32*
store i32 1342177288,i32*%JY,align 4
store i8*%JW,i8**%d,align 8
%JZ=load i8*,i8**%O,align 8
store i8*null,i8**%O,align 8
%J0=bitcast i8*%JW to i8**
store i8*%JZ,i8**%J0,align 8
%J1=getelementptr inbounds i8,i8*%JW,i64 8
%J2=bitcast i8*%J1 to i32*
store i32 1,i32*%J2,align 4
%J3=call i8*@sml_alloc(i32 inreg 28)#0
%J4=getelementptr inbounds i8,i8*%J3,i64 -4
%J5=bitcast i8*%J4 to i32*
store i32 1342177304,i32*%J5,align 4
store i8*%J3,i8**%O,align 8
%J6=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%J7=bitcast i8*%J3 to i8**
store i8*%J6,i8**%J7,align 8
%J8=getelementptr inbounds i8,i8*%J3,i64 8
%J9=bitcast i8*%J8 to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN12BinaryMapFn26filterE_618 to void(...)*),void(...)**%J9,align 8
%Ka=getelementptr inbounds i8,i8*%J3,i64 16
%Kb=bitcast i8*%Ka to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN12BinaryMapFn26filterE_761 to void(...)*),void(...)**%Kb,align 8
%Kc=getelementptr inbounds i8,i8*%J3,i64 24
%Kd=bitcast i8*%Kc to i32*
store i32 -2147483647,i32*%Kd,align 4
%Ke=call i8*@sml_alloc(i32 inreg 12)#0
%Kf=getelementptr inbounds i8,i8*%Ke,i64 -4
%Kg=bitcast i8*%Kf to i32*
store i32 1342177288,i32*%Kg,align 4
store i8*%Ke,i8**%d,align 8
%Kh=load i8*,i8**%P,align 8
store i8*null,i8**%P,align 8
%Ki=bitcast i8*%Ke to i8**
store i8*%Kh,i8**%Ki,align 8
%Kj=getelementptr inbounds i8,i8*%Ke,i64 8
%Kk=bitcast i8*%Kj to i32*
store i32 1,i32*%Kk,align 4
%Kl=call i8*@sml_alloc(i32 inreg 28)#0
%Km=getelementptr inbounds i8,i8*%Kl,i64 -4
%Kn=bitcast i8*%Km to i32*
store i32 1342177304,i32*%Kn,align 4
store i8*%Kl,i8**%P,align 8
%Ko=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%Kp=bitcast i8*%Kl to i8**
store i8*%Ko,i8**%Kp,align 8
%Kq=getelementptr inbounds i8,i8*%Kl,i64 8
%Kr=bitcast i8*%Kq to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN12BinaryMapFn27filteriE_620 to void(...)*),void(...)**%Kr,align 8
%Ks=getelementptr inbounds i8,i8*%Kl,i64 16
%Kt=bitcast i8*%Ks to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN12BinaryMapFn27filteriE_762 to void(...)*),void(...)**%Kt,align 8
%Ku=getelementptr inbounds i8,i8*%Kl,i64 24
%Kv=bitcast i8*%Ku to i32*
store i32 -2147483647,i32*%Kv,align 4
%Kw=call i8*@sml_alloc(i32 inreg 12)#0
%Kx=getelementptr inbounds i8,i8*%Kw,i64 -4
%Ky=bitcast i8*%Kx to i32*
store i32 1342177288,i32*%Ky,align 4
store i8*%Kw,i8**%d,align 8
%Kz=load i8*,i8**%Q,align 8
store i8*null,i8**%Q,align 8
%KA=bitcast i8*%Kw to i8**
store i8*%Kz,i8**%KA,align 8
%KB=getelementptr inbounds i8,i8*%Kw,i64 8
%KC=bitcast i8*%KB to i32*
store i32 1,i32*%KC,align 4
%KD=call i8*@sml_alloc(i32 inreg 28)#0
%KE=getelementptr inbounds i8,i8*%KD,i64 -4
%KF=bitcast i8*%KE to i32*
store i32 1342177304,i32*%KF,align 4
store i8*%KD,i8**%Q,align 8
%KG=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%KH=bitcast i8*%KD to i8**
store i8*%KG,i8**%KH,align 8
%KI=getelementptr inbounds i8,i8*%KD,i64 8
%KJ=bitcast i8*%KI to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32)*@_SMLLN12BinaryMapFn210mapPartialE_622 to void(...)*),void(...)**%KJ,align 8
%KK=getelementptr inbounds i8,i8*%KD,i64 16
%KL=bitcast i8*%KK to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLLN12BinaryMapFn210mapPartialE_763 to void(...)*),void(...)**%KL,align 8
%KM=getelementptr inbounds i8,i8*%KD,i64 24
%KN=bitcast i8*%KM to i32*
store i32 -2147483647,i32*%KN,align 4
%KO=call i8*@sml_alloc(i32 inreg 12)#0
%KP=getelementptr inbounds i8,i8*%KO,i64 -4
%KQ=bitcast i8*%KP to i32*
store i32 1342177288,i32*%KQ,align 4
store i8*%KO,i8**%d,align 8
%KR=load i8*,i8**%R,align 8
store i8*null,i8**%R,align 8
%KS=bitcast i8*%KO to i8**
store i8*%KR,i8**%KS,align 8
%KT=getelementptr inbounds i8,i8*%KO,i64 8
%KU=bitcast i8*%KT to i32*
store i32 1,i32*%KU,align 4
%KV=call i8*@sml_alloc(i32 inreg 28)#0
%KW=getelementptr inbounds i8,i8*%KV,i64 -4
%KX=bitcast i8*%KW to i32*
store i32 1342177304,i32*%KX,align 4
store i8*%KV,i8**%R,align 8
%KY=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%KZ=bitcast i8*%KV to i8**
store i8*%KY,i8**%KZ,align 8
%K0=getelementptr inbounds i8,i8*%KV,i64 8
%K1=bitcast i8*%K0 to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32)*@_SMLLN12BinaryMapFn211mapPartialiE_624 to void(...)*),void(...)**%K1,align 8
%K2=getelementptr inbounds i8,i8*%KV,i64 16
%K3=bitcast i8*%K2 to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLLN12BinaryMapFn211mapPartialiE_764 to void(...)*),void(...)**%K3,align 8
%K4=getelementptr inbounds i8,i8*%KV,i64 24
%K5=bitcast i8*%K4 to i32*
store i32 -2147483647,i32*%K5,align 4
%K6=call i8*@sml_alloc(i32 inreg 12)#0
%K7=getelementptr inbounds i8,i8*%K6,i64 -4
%K8=bitcast i8*%K7 to i32*
store i32 1342177288,i32*%K8,align 4
store i8*%K6,i8**%d,align 8
%K9=load i8*,i8**%S,align 8
store i8*null,i8**%S,align 8
%La=bitcast i8*%K6 to i8**
store i8*%K9,i8**%La,align 8
%Lb=getelementptr inbounds i8,i8*%K6,i64 8
%Lc=bitcast i8*%Lb to i32*
store i32 1,i32*%Lc,align 4
%Ld=call i8*@sml_alloc(i32 inreg 28)#0
%Le=getelementptr inbounds i8,i8*%Ld,i64 -4
%Lf=bitcast i8*%Le to i32*
store i32 1342177304,i32*%Lf,align 4
store i8*%Ld,i8**%S,align 8
%Lg=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%Lh=bitcast i8*%Ld to i8**
store i8*%Lg,i8**%Lh,align 8
%Li=getelementptr inbounds i8,i8*%Ld,i64 8
%Lj=bitcast i8*%Li to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN12BinaryMapFn210differenceE_626 to void(...)*),void(...)**%Lj,align 8
%Lk=getelementptr inbounds i8,i8*%Ld,i64 16
%Ll=bitcast i8*%Lk to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN12BinaryMapFn210differenceE_765 to void(...)*),void(...)**%Ll,align 8
%Lm=getelementptr inbounds i8,i8*%Ld,i64 24
%Ln=bitcast i8*%Lm to i32*
store i32 -2147483647,i32*%Ln,align 4
%Lo=call i8*@sml_alloc(i32 inreg 12)#0
%Lp=getelementptr inbounds i8,i8*%Lo,i64 -4
%Lq=bitcast i8*%Lp to i32*
store i32 1342177288,i32*%Lq,align 4
store i8*%Lo,i8**%d,align 8
%Lr=load i8*,i8**%T,align 8
store i8*null,i8**%T,align 8
%Ls=bitcast i8*%Lo to i8**
store i8*%Lr,i8**%Ls,align 8
%Lt=getelementptr inbounds i8,i8*%Lo,i64 8
%Lu=bitcast i8*%Lt to i32*
store i32 1,i32*%Lu,align 4
%Lv=call i8*@sml_alloc(i32 inreg 28)#0
%Lw=getelementptr inbounds i8,i8*%Lv,i64 -4
%Lx=bitcast i8*%Lw to i32*
store i32 1342177304,i32*%Lx,align 4
store i8*%Lv,i8**%T,align 8
%Ly=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%Lz=bitcast i8*%Lv to i8**
store i8*%Ly,i8**%Lz,align 8
%LA=getelementptr inbounds i8,i8*%Lv,i64 8
%LB=bitcast i8*%LA to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN12BinaryMapFn218subtractByKeyEquivE_628 to void(...)*),void(...)**%LB,align 8
%LC=getelementptr inbounds i8,i8*%Lv,i64 16
%LD=bitcast i8*%LC to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN12BinaryMapFn218subtractByKeyEquivE_766 to void(...)*),void(...)**%LD,align 8
%LE=getelementptr inbounds i8,i8*%Lv,i64 24
%LF=bitcast i8*%LE to i32*
store i32 -2147483647,i32*%LF,align 4
%LG=call i8*@sml_alloc(i32 inreg 12)#0
%LH=getelementptr inbounds i8,i8*%LG,i64 -4
%LI=bitcast i8*%LH to i32*
store i32 1342177288,i32*%LI,align 4
store i8*%LG,i8**%d,align 8
%LJ=load i8*,i8**%U,align 8
store i8*null,i8**%U,align 8
%LK=bitcast i8*%LG to i8**
store i8*%LJ,i8**%LK,align 8
%LL=getelementptr inbounds i8,i8*%LG,i64 8
%LM=bitcast i8*%LL to i32*
store i32 1,i32*%LM,align 4
%LN=call i8*@sml_alloc(i32 inreg 28)#0
%LO=getelementptr inbounds i8,i8*%LN,i64 -4
%LP=bitcast i8*%LO to i32*
store i32 1342177304,i32*%LP,align 4
store i8*%LN,i8**%U,align 8
%LQ=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%LR=bitcast i8*%LN to i8**
store i8*%LQ,i8**%LR,align 8
%LS=getelementptr inbounds i8,i8*%LN,i64 8
%LT=bitcast i8*%LS to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN12BinaryMapFn222subtractByKeyElemEquivE_630 to void(...)*),void(...)**%LT,align 8
%LU=getelementptr inbounds i8,i8*%LN,i64 16
%LV=bitcast i8*%LU to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN12BinaryMapFn222subtractByKeyElemEquivE_767 to void(...)*),void(...)**%LV,align 8
%LW=getelementptr inbounds i8,i8*%LN,i64 24
%LX=bitcast i8*%LW to i32*
store i32 -2147483647,i32*%LX,align 4
%LY=call i8*@sml_alloc(i32 inreg 12)#0
%LZ=getelementptr inbounds i8,i8*%LY,i64 -4
%L0=bitcast i8*%LZ to i32*
store i32 1342177288,i32*%L0,align 4
store i8*%LY,i8**%d,align 8
%L1=load i8*,i8**%V,align 8
store i8*null,i8**%V,align 8
%L2=bitcast i8*%LY to i8**
store i8*%L1,i8**%L2,align 8
%L3=getelementptr inbounds i8,i8*%LY,i64 8
%L4=bitcast i8*%L3 to i32*
store i32 1,i32*%L4,align 4
%L5=call i8*@sml_alloc(i32 inreg 28)#0
%L6=getelementptr inbounds i8,i8*%L5,i64 -4
%L7=bitcast i8*%L6 to i32*
store i32 1342177304,i32*%L7,align 4
store i8*%L5,i8**%V,align 8
%L8=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%L9=bitcast i8*%L5 to i8**
store i8*%L8,i8**%L9,align 8
%Ma=getelementptr inbounds i8,i8*%L5,i64 8
%Mb=bitcast i8*%Ma to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN12BinaryMapFn22eqE_632 to void(...)*),void(...)**%Mb,align 8
%Mc=getelementptr inbounds i8,i8*%L5,i64 16
%Md=bitcast i8*%Mc to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN12BinaryMapFn22eqE_768 to void(...)*),void(...)**%Md,align 8
%Me=getelementptr inbounds i8,i8*%L5,i64 24
%Mf=bitcast i8*%Me to i32*
store i32 -2147483647,i32*%Mf,align 4
%Mg=call i8*@sml_alloc(i32 inreg 400)#0
%Mh=getelementptr inbounds i8,i8*%Mg,i64 -4
%Mi=bitcast i8*%Mh to i32*
store i32 1342177672,i32*%Mi,align 4
%Mj=load i8*,i8**%c,align 8
%Mk=bitcast i8*%Mg to i8**
store i8*%Mj,i8**%Mk,align 8
%Ml=load i8*,i8**%w,align 8
%Mm=getelementptr inbounds i8,i8*%Mg,i64 8
%Mn=bitcast i8*%Mm to i8**
store i8*%Ml,i8**%Mn,align 8
%Mo=load i8*,i8**%v,align 8
%Mp=getelementptr inbounds i8,i8*%Mg,i64 16
%Mq=bitcast i8*%Mp to i8**
store i8*%Mo,i8**%Mq,align 8
%Mr=load i8*,i8**%x,align 8
%Ms=getelementptr inbounds i8,i8*%Mg,i64 24
%Mt=bitcast i8*%Ms to i8**
store i8*%Mr,i8**%Mt,align 8
%Mu=load i8*,i8**%S,align 8
%Mv=getelementptr inbounds i8,i8*%Mg,i64 32
%Mw=bitcast i8*%Mv to i8**
store i8*%Mu,i8**%Mw,align 8
%Mx=getelementptr inbounds i8,i8*%Mg,i64 40
%My=bitcast i8*%Mx to i8**
store i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@u,i64 0,i32 2)to i8*),i8**%My,align 8
%Mz=load i8*,i8**%V,align 8
%MA=getelementptr inbounds i8,i8*%Mg,i64 48
%MB=bitcast i8*%MA to i8**
store i8*%Mz,i8**%MB,align 8
%MC=load i8*,i8**%O,align 8
%MD=getelementptr inbounds i8,i8*%Mg,i64 56
%ME=bitcast i8*%MD to i8**
store i8*%MC,i8**%ME,align 8
%MF=load i8*,i8**%P,align 8
%MG=getelementptr inbounds i8,i8*%Mg,i64 64
%MH=bitcast i8*%MG to i8**
store i8*%MF,i8**%MH,align 8
%MI=load i8*,i8**%p,align 8
%MJ=getelementptr inbounds i8,i8*%Mg,i64 72
%MK=bitcast i8*%MJ to i8**
store i8*%MI,i8**%MK,align 8
%ML=load i8*,i8**%q,align 8
%MM=getelementptr inbounds i8,i8*%Mg,i64 80
%MN=bitcast i8*%MM to i8**
store i8*%ML,i8**%MN,align 8
%MO=load i8*,i8**%e,align 8
%MP=getelementptr inbounds i8,i8*%Mg,i64 88
%MQ=bitcast i8*%MP to i8**
store i8*%MO,i8**%MQ,align 8
%MR=load i8*,i8**%f,align 8
%MS=getelementptr inbounds i8,i8*%Mg,i64 96
%MT=bitcast i8*%MS to i8**
store i8*%MR,i8**%MT,align 8
%MU=load i8*,i8**%B,align 8
%MV=getelementptr inbounds i8,i8*%Mg,i64 104
%MW=bitcast i8*%MV to i8**
store i8*%MU,i8**%MW,align 8
%MX=load i8*,i8**%A,align 8
%MY=getelementptr inbounds i8,i8*%Mg,i64 112
%MZ=bitcast i8*%MY to i8**
store i8*%MX,i8**%MZ,align 8
%M0=load i8*,i8**%D,align 8
%M1=getelementptr inbounds i8,i8*%Mg,i64 120
%M2=bitcast i8*%M1 to i8**
store i8*%M0,i8**%M2,align 8
%M3=load i8*,i8**%C,align 8
%M4=getelementptr inbounds i8,i8*%Mg,i64 128
%M5=bitcast i8*%M4 to i8**
store i8*%M3,i8**%M5,align 8
%M6=load i8*,i8**%o,align 8
%M7=getelementptr inbounds i8,i8*%Mg,i64 136
%M8=bitcast i8*%M7 to i8**
store i8*%M6,i8**%M8,align 8
%M9=load i8*,i8**%i,align 8
%Na=getelementptr inbounds i8,i8*%Mg,i64 144
%Nb=bitcast i8*%Na to i8**
store i8*%M9,i8**%Nb,align 8
%Nc=load i8*,i8**%k,align 8
%Nd=getelementptr inbounds i8,i8*%Mg,i64 152
%Ne=bitcast i8*%Nd to i8**
store i8*%Nc,i8**%Ne,align 8
%Nf=load i8*,i8**%l,align 8
%Ng=getelementptr inbounds i8,i8*%Mg,i64 160
%Nh=bitcast i8*%Ng to i8**
store i8*%Nf,i8**%Nh,align 8
%Ni=load i8*,i8**%m,align 8
%Nj=getelementptr inbounds i8,i8*%Mg,i64 168
%Nk=bitcast i8*%Nj to i8**
store i8*%Ni,i8**%Nk,align 8
%Nl=load i8*,i8**%n,align 8
%Nm=getelementptr inbounds i8,i8*%Mg,i64 176
%Nn=bitcast i8*%Nm to i8**
store i8*%Nl,i8**%Nn,align 8
%No=load i8*,i8**%I,align 8
%Np=getelementptr inbounds i8,i8*%Mg,i64 184
%Nq=bitcast i8*%Np to i8**
store i8*%No,i8**%Nq,align 8
%Nr=load i8*,i8**%J,align 8
%Ns=getelementptr inbounds i8,i8*%Mg,i64 192
%Nt=bitcast i8*%Ns to i8**
store i8*%Nr,i8**%Nt,align 8
%Nu=load i8*,i8**%K,align 8
%Nv=getelementptr inbounds i8,i8*%Mg,i64 200
%Nw=bitcast i8*%Nv to i8**
store i8*%Nu,i8**%Nw,align 8
%Nx=getelementptr inbounds i8,i8*%Mg,i64 208
%Ny=bitcast i8*%Nx to i8**
store i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@w,i64 0,i32 2)to i8*),i8**%Ny,align 8
%Nz=load i8*,i8**%g,align 8
%NA=getelementptr inbounds i8,i8*%Mg,i64 216
%NB=bitcast i8*%NA to i8**
store i8*%Nz,i8**%NB,align 8
%NC=load i8*,i8**%j,align 8
%ND=getelementptr inbounds i8,i8*%Mg,i64 224
%NE=bitcast i8*%ND to i8**
store i8*%NC,i8**%NE,align 8
%NF=load i8*,i8**%u,align 8
%NG=getelementptr inbounds i8,i8*%Mg,i64 232
%NH=bitcast i8*%NG to i8**
store i8*%NF,i8**%NH,align 8
%NI=load i8*,i8**%r,align 8
%NJ=getelementptr inbounds i8,i8*%Mg,i64 240
%NK=bitcast i8*%NJ to i8**
store i8*%NI,i8**%NK,align 8
%NL=load i8*,i8**%W,align 8
%NM=getelementptr inbounds i8,i8*%Mg,i64 248
%NN=bitcast i8*%NM to i8**
store i8*%NL,i8**%NN,align 8
%NO=load i8*,i8**%Q,align 8
%NP=getelementptr inbounds i8,i8*%Mg,i64 256
%NQ=bitcast i8*%NP to i8**
store i8*%NO,i8**%NQ,align 8
%NR=load i8*,i8**%R,align 8
%NS=getelementptr inbounds i8,i8*%Mg,i64 264
%NT=bitcast i8*%NS to i8**
store i8*%NR,i8**%NT,align 8
%NU=load i8*,i8**%y,align 8
%NV=getelementptr inbounds i8,i8*%Mg,i64 272
%NW=bitcast i8*%NV to i8**
store i8*%NU,i8**%NW,align 8
%NX=load i8*,i8**%z,align 8
%NY=getelementptr inbounds i8,i8*%Mg,i64 280
%NZ=bitcast i8*%NY to i8**
store i8*%NX,i8**%NZ,align 8
%N0=load i8*,i8**%L,align 8
%N1=getelementptr inbounds i8,i8*%Mg,i64 288
%N2=bitcast i8*%N1 to i8**
store i8*%N0,i8**%N2,align 8
%N3=load i8*,i8**%M,align 8
%N4=getelementptr inbounds i8,i8*%Mg,i64 296
%N5=bitcast i8*%N4 to i8**
store i8*%N3,i8**%N5,align 8
%N6=load i8*,i8**%N,align 8
%N7=getelementptr inbounds i8,i8*%Mg,i64 304
%N8=bitcast i8*%N7 to i8**
store i8*%N6,i8**%N8,align 8
%N9=getelementptr inbounds i8,i8*%Mg,i64 312
%Oa=bitcast i8*%N9 to i8**
store i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@y,i64 0,i32 2)to i8*),i8**%Oa,align 8
%Ob=load i8*,i8**%s,align 8
%Oc=getelementptr inbounds i8,i8*%Mg,i64 320
%Od=bitcast i8*%Oc to i8**
store i8*%Ob,i8**%Od,align 8
%Oe=load i8*,i8**%t,align 8
%Of=getelementptr inbounds i8,i8*%Mg,i64 328
%Og=bitcast i8*%Of to i8**
store i8*%Oe,i8**%Og,align 8
%Oh=load i8*,i8**%h,align 8
%Oi=getelementptr inbounds i8,i8*%Mg,i64 336
%Oj=bitcast i8*%Oi to i8**
store i8*%Oh,i8**%Oj,align 8
%Ok=load i8*,i8**%U,align 8
%Ol=getelementptr inbounds i8,i8*%Mg,i64 344
%Om=bitcast i8*%Ol to i8**
store i8*%Ok,i8**%Om,align 8
%On=load i8*,i8**%T,align 8
%Oo=getelementptr inbounds i8,i8*%Mg,i64 352
%Op=bitcast i8*%Oo to i8**
store i8*%On,i8**%Op,align 8
%Oq=load i8*,i8**%E,align 8
%Or=getelementptr inbounds i8,i8*%Mg,i64 360
%Os=bitcast i8*%Or to i8**
store i8*%Oq,i8**%Os,align 8
%Ot=load i8*,i8**%F,align 8
%Ou=getelementptr inbounds i8,i8*%Mg,i64 368
%Ov=bitcast i8*%Ou to i8**
store i8*%Ot,i8**%Ov,align 8
%Ow=load i8*,i8**%G,align 8
%Ox=getelementptr inbounds i8,i8*%Mg,i64 376
%Oy=bitcast i8*%Ox to i8**
store i8*%Ow,i8**%Oy,align 8
%Oz=load i8*,i8**%H,align 8
%OA=getelementptr inbounds i8,i8*%Mg,i64 384
%OB=bitcast i8*%OA to i8**
store i8*%Oz,i8**%OB,align 8
%OC=getelementptr inbounds i8,i8*%Mg,i64 392
%OD=bitcast i8*%OC to i32*
store i32 -1,i32*%OD,align 4
%OE=getelementptr inbounds i8,i8*%Mg,i64 396
%OF=bitcast i8*%OE to i32*
store i32 131071,i32*%OF,align 4
ret i8*%Mg
}
define internal fastcc i8*@_SMLLN1__12BinaryMapFn2E_634(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=bitcast i8*%a to i32*
%e=load i32,i32*%d,align 4
%f=getelementptr inbounds i8,i8*%a,i64 4
%g=bitcast i8*%f to i32*
%h=load i32,i32*%g,align 4
%i=call i8*@sml_alloc(i32 inreg 12)#0
%j=bitcast i8*%i to i32*
%k=getelementptr inbounds i8,i8*%i,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177288,i32*%l,align 4
store i8*%i,i8**%c,align 8
store i32%e,i32*%j,align 4
%m=getelementptr inbounds i8,i8*%i,i64 4
%n=bitcast i8*%m to i32*
store i32%h,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%i,i64 8
%p=bitcast i8*%o to i32*
store i32 0,i32*%p,align 4
%q=call i8*@sml_alloc(i32 inreg 28)#0
%r=getelementptr inbounds i8,i8*%q,i64 -4
%s=bitcast i8*%r to i32*
store i32 1342177304,i32*%s,align 4
%t=load i8*,i8**%c,align 8
%u=bitcast i8*%q to i8**
store i8*%t,i8**%u,align 8
%v=getelementptr inbounds i8,i8*%q,i64 8
%w=bitcast i8*%v to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN1__12BinaryMapFn2E_633 to void(...)*),void(...)**%w,align 8
%x=getelementptr inbounds i8,i8*%q,i64 16
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN1__12BinaryMapFn2E_633 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%q,i64 24
%A=bitcast i8*%z to i32*
store i32 -2147483647,i32*%A,align 4
ret i8*%q
}
define fastcc i8*@_SMLFN1__12BinaryMapFn2E(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN1__12BinaryMapFn2E_634 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN1__12BinaryMapFn2E_634 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLL5empty_637(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
ret i8*null
}
define internal fastcc i8*@_SMLL5first_638(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL5first_300(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL6firsti_639(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL6firsti_302(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL1N_640(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
ret i8*null
}
define internal fastcc i8*@_SMLL1N_641(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
ret i8*null
}
define internal fastcc i8*@_SMLL1N_642(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL1N_308(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL8single__L_643(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL8single__L_311(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL8single__R_644(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL8single__R_314(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL8double__L_645(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL8double__L_317(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL8double__R_646(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL8double__R_320(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL2T_G_647(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL2T_G_322(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL3min_648(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL3min_325(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL6delmin_649(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL6delmin_328(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL7delete_G_650(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL7delete_G_330(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL9singleton_651(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL9singleton_332(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL6insert_652(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL6insert_334(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL7insert_G_653(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL7insert_G_336(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL10insertWith_654(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL10insertWith_338(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL11insertWithi_655(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL11insertWithi_340(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL12insertWithi2_656(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL12insertWithi2_342(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL3mem_657(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i32@_SMLL3mem_343(i8*inreg%a,i8*inreg%b)
%d=tail call i8*@sml_alloc(i32 inreg 4)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 4,i32*%g,align 4
store i32%c,i32*%e,align 4
ret i8*%d
}
define internal fastcc i8*@_SMLL3mem_658(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL3mem_345(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL8inDomain_659(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i32@_SMLL8inDomain_346(i8*inreg%a,i8*inreg%b)
%d=tail call i8*@sml_alloc(i32 inreg 4)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 4,i32*%g,align 4
store i32%c,i32*%e,align 4
ret i8*%d
}
define internal fastcc i8*@_SMLL8inDomain_660(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL8inDomain_347(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL3mem_661(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL3mem_350(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL4find_662(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL4find_352(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL3mem_663(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL3mem_355(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL5findi_664(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL5findi_357(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL3mem_665(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL3mem_361(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL6lookup_666(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL6lookup_363(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL6remove_667(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL6remove_366(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL7removei_668(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL7removei_369(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL3d2l_669(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL3d2l_371(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL9listItems_670(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL9listItems_373(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL3d2l_671(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL3d2l_375(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL10listItemsi_672(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL10listItemsi_377(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL3d2l_673(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL3d2l_379(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL8listKeys_674(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL8listKeys_381(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL4left_675(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL4left_383(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL4next_676(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL4next_386(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL3cmp_677(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i32@_SMLL3cmp_387(i8*inreg%a,i8*inreg%b)
%d=tail call i8*@sml_alloc(i32 inreg 4)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 4,i32*%g,align 4
store i32%c,i32*%e,align 4
ret i8*%d
}
define internal fastcc i8*@_SMLL7collate_678(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i32@_SMLL7collate_388(i8*inreg%a,i8*inreg%b)
%d=tail call i8*@sml_alloc(i32 inreg 4)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 4,i32*%g,align 4
store i32%c,i32*%e,align 4
ret i8*%d
}
define internal fastcc i8*@_SMLL7collate_679(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL7collate_390(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL4app_G_680(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
tail call fastcc void@_SMLL4app_G_391(i8*inreg%a,i8*inreg%b)
%c=tail call i8*@sml_alloc(i32 inreg 4)#0
%d=bitcast i8*%c to i32*
%e=getelementptr inbounds i8,i8*%c,i64 -4
%f=bitcast i8*%e to i32*
store i32 4,i32*%f,align 4
store i32 0,i32*%d,align 4
ret i8*%c
}
define internal fastcc i8*@_SMLL4appi_681(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
tail call fastcc void@_SMLL4appi_392(i8*inreg%a,i8*inreg%b)
%c=tail call i8*@sml_alloc(i32 inreg 4)#0
%d=bitcast i8*%c to i32*
%e=getelementptr inbounds i8,i8*%c,i64 -4
%f=bitcast i8*%e to i32*
store i32 4,i32*%f,align 4
store i32 0,i32*%d,align 4
ret i8*%c
}
define internal fastcc i8*@_SMLL4appi_682(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL4appi_394(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL4app_G_683(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
tail call fastcc void@_SMLL4app_G_395(i8*inreg%a,i8*inreg%b)
%c=tail call i8*@sml_alloc(i32 inreg 4)#0
%d=bitcast i8*%c to i32*
%e=getelementptr inbounds i8,i8*%c,i64 -4
%f=bitcast i8*%e to i32*
store i32 4,i32*%f,align 4
store i32 0,i32*%d,align 4
ret i8*%c
}
define internal fastcc i8*@_SMLL3app_684(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
tail call fastcc void@_SMLL3app_396(i8*inreg%a,i8*inreg%b)
%c=tail call i8*@sml_alloc(i32 inreg 4)#0
%d=bitcast i8*%c to i32*
%e=getelementptr inbounds i8,i8*%c,i64 -4
%f=bitcast i8*%e to i32*
store i32 4,i32*%f,align 4
store i32 0,i32*%d,align 4
ret i8*%c
}
define internal fastcc i8*@_SMLL3app_685(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL3app_398(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL4mapi_686(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#4 gc"smlsharp"{
%f=bitcast i8*%b to i32*
%g=load i32,i32*%f,align 4
%h=bitcast i8*%c to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%d to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%e to i32*
%m=load i32,i32*%l,align 4
%n=tail call fastcc i8*@_SMLL4mapi_402(i8*inreg%a,i32 inreg%g,i32 inreg%i,i32 inreg%k,i32 inreg%m)
ret i8*%n
}
define internal fastcc i8*@_SMLL5mapi2_687(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#4 gc"smlsharp"{
%f=bitcast i8*%b to i32*
%g=load i32,i32*%f,align 4
%h=bitcast i8*%c to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%d to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%e to i32*
%m=load i32,i32*%l,align 4
%n=tail call fastcc i8*@_SMLL5mapi2_406(i8*inreg%a,i32 inreg%g,i32 inreg%i,i32 inreg%k,i32 inreg%m)
ret i8*%n
}
define internal fastcc i8*@_SMLL6foldli_688(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#4 gc"smlsharp"{
%f=bitcast i8*%b to i32*
%g=load i32,i32*%f,align 4
%h=bitcast i8*%c to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%d to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%e to i32*
%m=load i32,i32*%l,align 4
%n=tail call fastcc i8*@_SMLL6foldli_411(i8*inreg%a,i32 inreg%g,i32 inreg%i,i32 inreg%k,i32 inreg%m)
ret i8*%n
}
define internal fastcc i8*@_SMLL5foldl_689(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#4 gc"smlsharp"{
%f=bitcast i8*%b to i32*
%g=load i32,i32*%f,align 4
%h=bitcast i8*%c to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%d to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%e to i32*
%m=load i32,i32*%l,align 4
%n=tail call fastcc i8*@_SMLL5foldl_416(i8*inreg%a,i32 inreg%g,i32 inreg%i,i32 inreg%k,i32 inreg%m)
ret i8*%n
}
define internal fastcc i8*@_SMLL6foldri_690(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#4 gc"smlsharp"{
%f=bitcast i8*%b to i32*
%g=load i32,i32*%f,align 4
%h=bitcast i8*%c to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%d to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%e to i32*
%m=load i32,i32*%l,align 4
%n=tail call fastcc i8*@_SMLL6foldri_421(i8*inreg%a,i32 inreg%g,i32 inreg%i,i32 inreg%k,i32 inreg%m)
ret i8*%n
}
define internal fastcc i8*@_SMLL5foldr_691(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#4 gc"smlsharp"{
%f=bitcast i8*%b to i32*
%g=load i32,i32*%f,align 4
%h=bitcast i8*%c to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%d to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%e to i32*
%m=load i32,i32*%l,align 4
%n=tail call fastcc i8*@_SMLL5foldr_426(i8*inreg%a,i32 inreg%g,i32 inreg%i,i32 inreg%k,i32 inreg%m)
ret i8*%n
}
define internal fastcc i8*@_SMLL3ins_692(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL3ins_429(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL9unionWith_693(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL9unionWith_433(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL3ins_694(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL3ins_436(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL10unionWithi_695(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL10unionWithi_440(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL3ins_696(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL3ins_443(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL11unionWithi2_697(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL11unionWithi2_447(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL3ins_698(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#4 gc"smlsharp"{
%f=bitcast i8*%b to i32*
%g=load i32,i32*%f,align 4
%h=bitcast i8*%c to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%d to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%e to i32*
%m=load i32,i32*%l,align 4
%n=tail call fastcc i8*@_SMLL3ins_450(i8*inreg%a,i32 inreg%g,i32 inreg%i,i32 inreg%k,i32 inreg%m)
ret i8*%n
}
define internal fastcc i8*@_SMLL11unionWithi3_699(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL11unionWithi3_454(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL9intersect_700(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e,i8*inreg%f,i8*inreg%g)#4 gc"smlsharp"{
%h=bitcast i8*%b to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%c to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%d to i32*
%m=load i32,i32*%l,align 4
%n=bitcast i8*%e to i32*
%o=load i32,i32*%n,align 4
%p=bitcast i8*%f to i32*
%q=load i32,i32*%p,align 4
%r=bitcast i8*%g to i32*
%s=load i32,i32*%r,align 4
%t=tail call fastcc i8*@_SMLL9intersect_458(i8*inreg%a,i32 inreg%i,i32 inreg%k,i32 inreg%m,i32 inreg%o,i32 inreg%q,i32 inreg%s)
ret i8*%t
}
define internal fastcc i8*@_SMLL13intersectWith_701(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e,i8*inreg%f,i8*inreg%g)#4 gc"smlsharp"{
%h=bitcast i8*%b to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%c to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%d to i32*
%m=load i32,i32*%l,align 4
%n=bitcast i8*%e to i32*
%o=load i32,i32*%n,align 4
%p=bitcast i8*%f to i32*
%q=load i32,i32*%p,align 4
%r=bitcast i8*%g to i32*
%s=load i32,i32*%r,align 4
%t=tail call fastcc i8*@_SMLL13intersectWith_462(i8*inreg%a,i32 inreg%i,i32 inreg%k,i32 inreg%m,i32 inreg%o,i32 inreg%q,i32 inreg%s)
ret i8*%t
}
define internal fastcc i8*@_SMLL9intersect_702(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e,i8*inreg%f,i8*inreg%g)#4 gc"smlsharp"{
%h=bitcast i8*%b to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%c to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%d to i32*
%m=load i32,i32*%l,align 4
%n=bitcast i8*%e to i32*
%o=load i32,i32*%n,align 4
%p=bitcast i8*%f to i32*
%q=load i32,i32*%p,align 4
%r=bitcast i8*%g to i32*
%s=load i32,i32*%r,align 4
%t=tail call fastcc i8*@_SMLL9intersect_466(i8*inreg%a,i32 inreg%i,i32 inreg%k,i32 inreg%m,i32 inreg%o,i32 inreg%q,i32 inreg%s)
ret i8*%t
}
define internal fastcc i8*@_SMLL14intersectWithi_703(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e,i8*inreg%f,i8*inreg%g)#4 gc"smlsharp"{
%h=bitcast i8*%b to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%c to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%d to i32*
%m=load i32,i32*%l,align 4
%n=bitcast i8*%e to i32*
%o=load i32,i32*%n,align 4
%p=bitcast i8*%f to i32*
%q=load i32,i32*%p,align 4
%r=bitcast i8*%g to i32*
%s=load i32,i32*%r,align 4
%t=tail call fastcc i8*@_SMLL14intersectWithi_470(i8*inreg%a,i32 inreg%i,i32 inreg%k,i32 inreg%m,i32 inreg%o,i32 inreg%q,i32 inreg%s)
ret i8*%t
}
define internal fastcc i8*@_SMLL9intersect_704(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e,i8*inreg%f,i8*inreg%g)#4 gc"smlsharp"{
%h=bitcast i8*%b to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%c to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%d to i32*
%m=load i32,i32*%l,align 4
%n=bitcast i8*%e to i32*
%o=load i32,i32*%n,align 4
%p=bitcast i8*%f to i32*
%q=load i32,i32*%p,align 4
%r=bitcast i8*%g to i32*
%s=load i32,i32*%r,align 4
%t=tail call fastcc i8*@_SMLL9intersect_474(i8*inreg%a,i32 inreg%i,i32 inreg%k,i32 inreg%m,i32 inreg%o,i32 inreg%q,i32 inreg%s)
ret i8*%t
}
define internal fastcc i8*@_SMLL15intersectWithi2_705(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e,i8*inreg%f,i8*inreg%g)#4 gc"smlsharp"{
%h=bitcast i8*%b to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%c to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%d to i32*
%m=load i32,i32*%l,align 4
%n=bitcast i8*%e to i32*
%o=load i32,i32*%n,align 4
%p=bitcast i8*%f to i32*
%q=load i32,i32*%p,align 4
%r=bitcast i8*%g to i32*
%s=load i32,i32*%r,align 4
%t=tail call fastcc i8*@_SMLL15intersectWithi2_478(i8*inreg%a,i32 inreg%i,i32 inreg%k,i32 inreg%m,i32 inreg%o,i32 inreg%q,i32 inreg%s)
ret i8*%t
}
define internal fastcc i8*@_SMLL9mergeWith_706(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e,i8*inreg%f,i8*inreg%g)#4 gc"smlsharp"{
%h=bitcast i8*%b to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%c to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%d to i32*
%m=load i32,i32*%l,align 4
%n=bitcast i8*%e to i32*
%o=load i32,i32*%n,align 4
%p=bitcast i8*%f to i32*
%q=load i32,i32*%p,align 4
%r=bitcast i8*%g to i32*
%s=load i32,i32*%r,align 4
%t=tail call fastcc i8*@_SMLL9mergeWith_484(i8*inreg%a,i32 inreg%i,i32 inreg%k,i32 inreg%m,i32 inreg%o,i32 inreg%q,i32 inreg%s)
ret i8*%t
}
define internal fastcc i8*@_SMLL10mergeWithi_707(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e,i8*inreg%f,i8*inreg%g)#4 gc"smlsharp"{
%h=bitcast i8*%b to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%c to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%d to i32*
%m=load i32,i32*%l,align 4
%n=bitcast i8*%e to i32*
%o=load i32,i32*%n,align 4
%p=bitcast i8*%f to i32*
%q=load i32,i32*%p,align 4
%r=bitcast i8*%g to i32*
%s=load i32,i32*%r,align 4
%t=tail call fastcc i8*@_SMLL10mergeWithi_490(i8*inreg%a,i32 inreg%i,i32 inreg%k,i32 inreg%m,i32 inreg%o,i32 inreg%q,i32 inreg%s)
ret i8*%t
}
define internal fastcc i8*@_SMLL11mergeWithi2_708(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e,i8*inreg%f,i8*inreg%g)#4 gc"smlsharp"{
%h=bitcast i8*%b to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%c to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%d to i32*
%m=load i32,i32*%l,align 4
%n=bitcast i8*%e to i32*
%o=load i32,i32*%n,align 4
%p=bitcast i8*%f to i32*
%q=load i32,i32*%p,align 4
%r=bitcast i8*%g to i32*
%s=load i32,i32*%r,align 4
%t=tail call fastcc i8*@_SMLL11mergeWithi2_496(i8*inreg%a,i32 inreg%i,i32 inreg%k,i32 inreg%m,i32 inreg%o,i32 inreg%q,i32 inreg%s)
ret i8*%t
}
define internal fastcc i8*@_SMLL6filter_709(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL6filter_500(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL7filteri_710(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL7filteri_504(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL10mapPartial_711(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#4 gc"smlsharp"{
%f=bitcast i8*%b to i32*
%g=load i32,i32*%f,align 4
%h=bitcast i8*%c to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%d to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%e to i32*
%m=load i32,i32*%l,align 4
%n=tail call fastcc i8*@_SMLL10mapPartial_508(i8*inreg%a,i32 inreg%g,i32 inreg%i,i32 inreg%k,i32 inreg%m)
ret i8*%n
}
define internal fastcc i8*@_SMLL11mapPartiali_712(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#4 gc"smlsharp"{
%f=bitcast i8*%b to i32*
%g=load i32,i32*%f,align 4
%h=bitcast i8*%c to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%d to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%e to i32*
%m=load i32,i32*%l,align 4
%n=tail call fastcc i8*@_SMLL11mapPartiali_512(i8*inreg%a,i32 inreg%g,i32 inreg%i,i32 inreg%k,i32 inreg%m)
ret i8*%n
}
define internal fastcc i8*@_SMLL10difference_713(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL10difference_516(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL18subtractByKeyEquiv_714(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL18subtractByKeyEquiv_520(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL22subtractByKeyElemEquiv_715(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL22subtractByKeyElemEquiv_524(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL2eq_716(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i32@_SMLL2eq_525(i8*inreg%a,i8*inreg%b)
%d=tail call i8*@sml_alloc(i32 inreg 4)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 4,i32*%g,align 4
store i32%c,i32*%e,align 4
ret i8*%d
}
define internal fastcc i8*@_SMLL2eq_717(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLL2eq_527(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN12BinaryMapFn25emptyE_718(i8*inreg%a,i8*inreg%b,i8*inreg%c)#2 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN12BinaryMapFn25emptyE_528(i32 inreg%e,i32 inreg%g)
ret i8*null
}
define internal fastcc i8*@_SMLLN12BinaryMapFn27isEmptyE_719(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=icmp eq i8*%b,null
%d=zext i1%c to i32
%e=tail call i8*@sml_alloc(i32 inreg 4)#0
%f=bitcast i8*%e to i32*
%g=getelementptr inbounds i8,i8*%e,i64 -4
%h=bitcast i8*%g to i32*
store i32 4,i32*%h,align 4
store i32%d,i32*%f,align 4
ret i8*%e
}
define internal fastcc i8*@_SMLLN12BinaryMapFn27isEmptyE_720(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
ret i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@v,i64 0,i32 2)to i8*)
}
define internal fastcc i8*@_SMLLN12BinaryMapFn29singletonE_721(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN12BinaryMapFn29singletonE_535(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN12BinaryMapFn26insertE_722(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN12BinaryMapFn26insertE_537(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN12BinaryMapFn27insert_GE_723(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN12BinaryMapFn27insert_GE_539(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN12BinaryMapFn210insertWithE_724(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN12BinaryMapFn210insertWithE_542(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN12BinaryMapFn211insertWithiE_725(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN12BinaryMapFn211insertWithiE_545(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN12BinaryMapFn212insertWithi2E_726(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN12BinaryMapFn212insertWithi2E_548(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN12BinaryMapFn24findE_727(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN12BinaryMapFn24findE_550(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN12BinaryMapFn25findiE_728(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN12BinaryMapFn25findiE_552(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN12BinaryMapFn26lookupE_729(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN12BinaryMapFn26lookupE_554(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN12BinaryMapFn28inDomainE_730(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i32@_SMLLN12BinaryMapFn28inDomainE_555(i8*inreg%a,i8*inreg%b)
%d=tail call i8*@sml_alloc(i32 inreg 4)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 4,i32*%g,align 4
store i32%c,i32*%e,align 4
ret i8*%d
}
define internal fastcc i8*@_SMLLN12BinaryMapFn28inDomainE_731(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN12BinaryMapFn28inDomainE_556(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN12BinaryMapFn26removeE_732(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN12BinaryMapFn26removeE_558(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN12BinaryMapFn27removeiE_733(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN12BinaryMapFn27removeiE_560(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN12BinaryMapFn25firstE_734(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN12BinaryMapFn25firstE_562(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN12BinaryMapFn26firstiE_735(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN12BinaryMapFn26firstiE_564(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN12BinaryMapFn28numItemsE_736(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
i:
%c=icmp eq i8*%b,null
br i1%c,label%g,label%d
d:
%e=bitcast i8*%b to i32*
%f=load i32,i32*%e,align 4
br label%g
g:
%h=phi i32[%f,%d],[0,%i]
%j=tail call i8*@sml_alloc(i32 inreg 4)#0
%k=bitcast i8*%j to i32*
%l=getelementptr inbounds i8,i8*%j,i64 -4
%m=bitcast i8*%l to i32*
store i32 4,i32*%m,align 4
store i32%h,i32*%k,align 4
ret i8*%j
}
define internal fastcc i8*@_SMLLN12BinaryMapFn28numItemsE_737(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
ret i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@x,i64 0,i32 2)to i8*)
}
define internal fastcc i8*@_SMLLN12BinaryMapFn29listItemsE_738(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN12BinaryMapFn29listItemsE_570(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN12BinaryMapFn210listItemsiE_739(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN12BinaryMapFn210listItemsiE_572(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN12BinaryMapFn28listKeysE_740(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN12BinaryMapFn28listKeysE_574(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN12BinaryMapFn27collateE_741(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN12BinaryMapFn27collateE_576(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN12BinaryMapFn29unionWithE_742(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN12BinaryMapFn29unionWithE_578(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN12BinaryMapFn210unionWithiE_743(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN12BinaryMapFn210unionWithiE_580(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN12BinaryMapFn211unionWithi2E_744(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN12BinaryMapFn211unionWithi2E_582(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN12BinaryMapFn211unionWithi3E_745(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN12BinaryMapFn211unionWithi3E_584(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN12BinaryMapFn213intersectWithE_746(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e,i8*inreg%f,i8*inreg%g)#4 gc"smlsharp"{
%h=bitcast i8*%b to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%c to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%d to i32*
%m=load i32,i32*%l,align 4
%n=bitcast i8*%e to i32*
%o=load i32,i32*%n,align 4
%p=bitcast i8*%f to i32*
%q=load i32,i32*%p,align 4
%r=bitcast i8*%g to i32*
%s=load i32,i32*%r,align 4
%t=tail call fastcc i8*@_SMLLN12BinaryMapFn213intersectWithE_586(i8*inreg%a,i32 inreg%i,i32 inreg%k,i32 inreg%m,i32 inreg%o,i32 inreg%q,i32 inreg%s)
ret i8*%t
}
define internal fastcc i8*@_SMLLN12BinaryMapFn214intersectWithiE_747(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e,i8*inreg%f,i8*inreg%g)#4 gc"smlsharp"{
%h=bitcast i8*%b to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%c to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%d to i32*
%m=load i32,i32*%l,align 4
%n=bitcast i8*%e to i32*
%o=load i32,i32*%n,align 4
%p=bitcast i8*%f to i32*
%q=load i32,i32*%p,align 4
%r=bitcast i8*%g to i32*
%s=load i32,i32*%r,align 4
%t=tail call fastcc i8*@_SMLLN12BinaryMapFn214intersectWithiE_588(i8*inreg%a,i32 inreg%i,i32 inreg%k,i32 inreg%m,i32 inreg%o,i32 inreg%q,i32 inreg%s)
ret i8*%t
}
define internal fastcc i8*@_SMLLN12BinaryMapFn215intersectWithi2E_748(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e,i8*inreg%f,i8*inreg%g)#4 gc"smlsharp"{
%h=bitcast i8*%b to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%c to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%d to i32*
%m=load i32,i32*%l,align 4
%n=bitcast i8*%e to i32*
%o=load i32,i32*%n,align 4
%p=bitcast i8*%f to i32*
%q=load i32,i32*%p,align 4
%r=bitcast i8*%g to i32*
%s=load i32,i32*%r,align 4
%t=tail call fastcc i8*@_SMLLN12BinaryMapFn215intersectWithi2E_590(i8*inreg%a,i32 inreg%i,i32 inreg%k,i32 inreg%m,i32 inreg%o,i32 inreg%q,i32 inreg%s)
ret i8*%t
}
define internal fastcc i8*@_SMLLN12BinaryMapFn29mergeWithE_749(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e,i8*inreg%f,i8*inreg%g)#4 gc"smlsharp"{
%h=bitcast i8*%b to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%c to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%d to i32*
%m=load i32,i32*%l,align 4
%n=bitcast i8*%e to i32*
%o=load i32,i32*%n,align 4
%p=bitcast i8*%f to i32*
%q=load i32,i32*%p,align 4
%r=bitcast i8*%g to i32*
%s=load i32,i32*%r,align 4
%t=tail call fastcc i8*@_SMLLN12BinaryMapFn29mergeWithE_592(i8*inreg%a,i32 inreg%i,i32 inreg%k,i32 inreg%m,i32 inreg%o,i32 inreg%q,i32 inreg%s)
ret i8*%t
}
define internal fastcc i8*@_SMLLN12BinaryMapFn210mergeWithiE_750(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e,i8*inreg%f,i8*inreg%g)#4 gc"smlsharp"{
%h=bitcast i8*%b to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%c to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%d to i32*
%m=load i32,i32*%l,align 4
%n=bitcast i8*%e to i32*
%o=load i32,i32*%n,align 4
%p=bitcast i8*%f to i32*
%q=load i32,i32*%p,align 4
%r=bitcast i8*%g to i32*
%s=load i32,i32*%r,align 4
%t=tail call fastcc i8*@_SMLLN12BinaryMapFn210mergeWithiE_594(i8*inreg%a,i32 inreg%i,i32 inreg%k,i32 inreg%m,i32 inreg%o,i32 inreg%q,i32 inreg%s)
ret i8*%t
}
define internal fastcc i8*@_SMLLN12BinaryMapFn211mergeWithi2E_751(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e,i8*inreg%f,i8*inreg%g)#4 gc"smlsharp"{
%h=bitcast i8*%b to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%c to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%d to i32*
%m=load i32,i32*%l,align 4
%n=bitcast i8*%e to i32*
%o=load i32,i32*%n,align 4
%p=bitcast i8*%f to i32*
%q=load i32,i32*%p,align 4
%r=bitcast i8*%g to i32*
%s=load i32,i32*%r,align 4
%t=tail call fastcc i8*@_SMLLN12BinaryMapFn211mergeWithi2E_596(i8*inreg%a,i32 inreg%i,i32 inreg%k,i32 inreg%m,i32 inreg%o,i32 inreg%q,i32 inreg%s)
ret i8*%t
}
define internal fastcc i8*@_SMLLN12BinaryMapFn23appE_752(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN12BinaryMapFn23appE_598(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN12BinaryMapFn24appiE_753(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN12BinaryMapFn24appiE_600(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN12BinaryMapFn23mapE_754(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#4 gc"smlsharp"{
%f=bitcast i8*%b to i32*
%g=load i32,i32*%f,align 4
%h=bitcast i8*%c to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%d to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%e to i32*
%m=load i32,i32*%l,align 4
%n=tail call fastcc i8*@_SMLLN12BinaryMapFn23mapE_604(i8*inreg%a,i32 inreg%g,i32 inreg%i,i32 inreg%k,i32 inreg%m)
ret i8*%n
}
define internal fastcc i8*@_SMLLN12BinaryMapFn24mapiE_755(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#4 gc"smlsharp"{
%f=bitcast i8*%b to i32*
%g=load i32,i32*%f,align 4
%h=bitcast i8*%c to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%d to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%e to i32*
%m=load i32,i32*%l,align 4
%n=tail call fastcc i8*@_SMLLN12BinaryMapFn24mapiE_606(i8*inreg%a,i32 inreg%g,i32 inreg%i,i32 inreg%k,i32 inreg%m)
ret i8*%n
}
define internal fastcc i8*@_SMLLN12BinaryMapFn25mapi2E_756(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#4 gc"smlsharp"{
%f=bitcast i8*%b to i32*
%g=load i32,i32*%f,align 4
%h=bitcast i8*%c to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%d to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%e to i32*
%m=load i32,i32*%l,align 4
%n=tail call fastcc i8*@_SMLLN12BinaryMapFn25mapi2E_608(i8*inreg%a,i32 inreg%g,i32 inreg%i,i32 inreg%k,i32 inreg%m)
ret i8*%n
}
define internal fastcc i8*@_SMLLN12BinaryMapFn25foldlE_757(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#4 gc"smlsharp"{
%f=bitcast i8*%b to i32*
%g=load i32,i32*%f,align 4
%h=bitcast i8*%c to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%d to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%e to i32*
%m=load i32,i32*%l,align 4
%n=tail call fastcc i8*@_SMLLN12BinaryMapFn25foldlE_610(i8*inreg%a,i32 inreg%g,i32 inreg%i,i32 inreg%k,i32 inreg%m)
ret i8*%n
}
define internal fastcc i8*@_SMLLN12BinaryMapFn26foldliE_758(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#4 gc"smlsharp"{
%f=bitcast i8*%b to i32*
%g=load i32,i32*%f,align 4
%h=bitcast i8*%c to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%d to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%e to i32*
%m=load i32,i32*%l,align 4
%n=tail call fastcc i8*@_SMLLN12BinaryMapFn26foldliE_612(i8*inreg%a,i32 inreg%g,i32 inreg%i,i32 inreg%k,i32 inreg%m)
ret i8*%n
}
define internal fastcc i8*@_SMLLN12BinaryMapFn25foldrE_759(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#4 gc"smlsharp"{
%f=bitcast i8*%b to i32*
%g=load i32,i32*%f,align 4
%h=bitcast i8*%c to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%d to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%e to i32*
%m=load i32,i32*%l,align 4
%n=tail call fastcc i8*@_SMLLN12BinaryMapFn25foldrE_614(i8*inreg%a,i32 inreg%g,i32 inreg%i,i32 inreg%k,i32 inreg%m)
ret i8*%n
}
define internal fastcc i8*@_SMLLN12BinaryMapFn26foldriE_760(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#4 gc"smlsharp"{
%f=bitcast i8*%b to i32*
%g=load i32,i32*%f,align 4
%h=bitcast i8*%c to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%d to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%e to i32*
%m=load i32,i32*%l,align 4
%n=tail call fastcc i8*@_SMLLN12BinaryMapFn26foldriE_616(i8*inreg%a,i32 inreg%g,i32 inreg%i,i32 inreg%k,i32 inreg%m)
ret i8*%n
}
define internal fastcc i8*@_SMLLN12BinaryMapFn26filterE_761(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN12BinaryMapFn26filterE_618(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN12BinaryMapFn27filteriE_762(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN12BinaryMapFn27filteriE_620(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN12BinaryMapFn210mapPartialE_763(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#4 gc"smlsharp"{
%f=bitcast i8*%b to i32*
%g=load i32,i32*%f,align 4
%h=bitcast i8*%c to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%d to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%e to i32*
%m=load i32,i32*%l,align 4
%n=tail call fastcc i8*@_SMLLN12BinaryMapFn210mapPartialE_622(i8*inreg%a,i32 inreg%g,i32 inreg%i,i32 inreg%k,i32 inreg%m)
ret i8*%n
}
define internal fastcc i8*@_SMLLN12BinaryMapFn211mapPartialiE_764(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#4 gc"smlsharp"{
%f=bitcast i8*%b to i32*
%g=load i32,i32*%f,align 4
%h=bitcast i8*%c to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%d to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%e to i32*
%m=load i32,i32*%l,align 4
%n=tail call fastcc i8*@_SMLLN12BinaryMapFn211mapPartialiE_624(i8*inreg%a,i32 inreg%g,i32 inreg%i,i32 inreg%k,i32 inreg%m)
ret i8*%n
}
define internal fastcc i8*@_SMLLN12BinaryMapFn210differenceE_765(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN12BinaryMapFn210differenceE_626(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN12BinaryMapFn218subtractByKeyEquivE_766(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN12BinaryMapFn218subtractByKeyEquivE_628(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN12BinaryMapFn222subtractByKeyElemEquivE_767(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN12BinaryMapFn222subtractByKeyElemEquivE_630(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN12BinaryMapFn22eqE_768(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN12BinaryMapFn22eqE_632(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN1__12BinaryMapFn2E_769(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN1__12BinaryMapFn2E(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
declare void@llvm.memcpy.p0i8.p0i8.i32(i8*,i8*,i32,i1)#0
declare void@llvm.memset.p0i8.i32(i8*,i8,i32,i1)#0
attributes#0={nounwind}
attributes#1={noreturn}
attributes#2={uwtable}
attributes#3={noreturn nounwind}
attributes#4={nounwind uwtable}
