@sml_check_flag=external local_unnamed_addr global i32
@_SMLZ5Match=external unnamed_addr constant i8*
@_SMLZ3Chr=external unnamed_addr constant i8*
@a=private unnamed_addr constant<{[4x i8],i32,i32,[4x i8],i32}><{[4x i8]zeroinitializer,i32 -805306360,i32 1,[4x i8]zeroinitializer,i32 0}>,align 8
@b=private unnamed_addr constant<{[4x i8],i32,i8*,i32}><{[4x i8]zeroinitializer,i32 -805306360,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i32}>,<{[4x i8],i32,i32,[4x i8],i32}>*@a,i32 0,i32 0,i32 0),i32 8),i32 1}>,align 8
@c=private unnamed_addr constant<{[4x i8],i32,i8*,i32}><{[4x i8]zeroinitializer,i32 -805306360,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,i32}>,<{[4x i8],i32,i8*,i32}>*@b,i32 0,i32 0,i32 0),i32 8),i32 1}>,align 8
@d=private unnamed_addr constant<{[4x i8],i32,i8*,i32,[4x i8],i32}><{[4x i8]zeroinitializer,i32 -805306352,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,i32}>,<{[4x i8],i32,i8*,i32}>*@c,i32 0,i32 0,i32 0),i32 8),i32 1,[4x i8]zeroinitializer,i32 1}>,align 8
@e=private unnamed_addr constant<{[4x i8],i32,i32,[4x i8],i8*,i32}><{[4x i8]zeroinitializer,i32 -805306352,i32 2,[4x i8]zeroinitializer,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,i32,[4x i8],i32}>,<{[4x i8],i32,i8*,i32,[4x i8],i32}>*@d,i32 0,i32 0,i32 0),i32 8),i32 2}>,align 8
@f=private unnamed_addr constant<{[4x i8],i32,i8*,i32}><{[4x i8]zeroinitializer,i32 -805306360,i8*null,i32 1}>,align 8
@g=private unnamed_addr constant<{[4x i8],i32,i8*,i32}><{[4x i8]zeroinitializer,i32 -805306360,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,i32}>,<{[4x i8],i32,i8*,i32}>*@f,i32 0,i32 0,i32 0),i32 8),i32 1}>,align 8
@h=private unnamed_addr constant<{[4x i8],i32,i8*,i32,[4x i8],i32}><{[4x i8]zeroinitializer,i32 -805306352,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,i32}>,<{[4x i8],i32,i8*,i32}>*@g,i32 0,i32 0,i32 0),i32 8),i32 1,[4x i8]zeroinitializer,i32 1}>,align 8
@i=private unnamed_addr constant<{[4x i8],i32,i32,[4x i8],i8*,i32}><{[4x i8]zeroinitializer,i32 -805306352,i32 2,[4x i8]zeroinitializer,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,i32,[4x i8],i32}>,<{[4x i8],i32,i8*,i32,[4x i8],i32}>*@h,i32 0,i32 0,i32 0),i32 8),i32 2}>,align 8
@j=private unnamed_addr constant<{[4x i8],i32,i32,i32,i32,[4x i8],i32}><{[4x i8]zeroinitializer,i32 -805306352,i32 1,i32 1,i32 0,[4x i8]zeroinitializer,i32 0}>,align 8
@k=private unnamed_addr constant<{[4x i8],i32,i8*,i32}><{[4x i8]zeroinitializer,i32 -805306360,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i32,i32,i32,[4x i8],i32}>,<{[4x i8],i32,i32,i32,i32,[4x i8],i32}>*@j,i32 0,i32 0,i32 0),i32 8),i32 1}>,align 8
@l=private unnamed_addr constant<{[4x i8],i32,i32,i32,i32,[4x i8],i32}><{[4x i8]zeroinitializer,i32 -805306352,i32 0,i32 1,i32 5,[4x i8]zeroinitializer,i32 0}>,align 8
@m=private unnamed_addr constant<{[4x i8],i32,i8*,i32}><{[4x i8]zeroinitializer,i32 -805306360,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i32,i32,i32,[4x i8],i32}>,<{[4x i8],i32,i32,i32,i32,[4x i8],i32}>*@l,i32 0,i32 0,i32 0),i32 8),i32 1}>,align 8
@n=private unnamed_addr constant<{[4x i8],i32,i32,i32,i32,[4x i8],i32}><{[4x i8]zeroinitializer,i32 -805306352,i32 1,i32 1,i32 6,[4x i8]zeroinitializer,i32 0}>,align 8
@o=private unnamed_addr constant<{[4x i8],i32,i8*,i32}><{[4x i8]zeroinitializer,i32 -805306360,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i32,i32,i32,[4x i8],i32}>,<{[4x i8],i32,i32,i32,i32,[4x i8],i32}>*@n,i32 0,i32 0,i32 0),i32 8),i32 1}>,align 8
@p=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat10FormatComb6guard__E_178 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6guard__E_839 to void(...)*),i32 -2147483647}>,align 8
@q=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat10FormatComb5nest__E_194 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb5nest__E_843 to void(...)*),i32 -2147483647}>,align 8
@r=private unnamed_addr constant<{[4x i8],i32,i32,[4x i8],i32}><{[4x i8]zeroinitializer,i32 -805306360,i32 0,[4x i8]zeroinitializer,i32 0}>,align 8
@s=private unnamed_addr constant<{[4x i8],i32,i8*,i8*,i32}><{[4x i8]zeroinitializer,i32 -805306352,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i32}>,<{[4x i8],i32,i32,[4x i8],i32}>*@r,i32 0,i32 0,i32 0),i32 8),i8*null,i32 3}>,align 8
@t=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_210 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_849 to void(...)*),i32 -2147483647}>,align 8
@u=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_216 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_850 to void(...)*),i32 -2147483647}>,align 8
@v=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_222 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_851 to void(...)*),i32 -2147483647}>,align 8
@w=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_224 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_852 to void(...)*),i32 -2147483647}>,align 8
@x=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_226 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_853 to void(...)*),i32 -2147483647}>,align 8
@y=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat13formatAppListE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat13formatAppListE_855 to void(...)*),i32 -2147483647}>,align 8
@z=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat13formatSeqListE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat13formatSeqListE_856 to void(...)*),i32 -2147483647}>,align 8
@A=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat18formatOptionalListE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat18formatOptionalListE_857 to void(...)*),i32 -2147483647}>,align 8
@B=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat14formatDeclListE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat14formatDeclListE_858 to void(...)*),i32 -2147483647}>,align 8
@C=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat14formatCaseListE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat14formatCaseListE_859 to void(...)*),i32 -2147483647}>,align 8
@D=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat20formatEnclosedOptionE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat20formatEnclosedOptionE_860 to void(...)*),i32 -2147483647}>,align 8
@E=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat20formatOptionalOptionE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat20formatOptionalOptionE_861 to void(...)*),i32 -2147483647}>,align 8
@F=private unnamed_addr constant<{[4x i8],i32,[6x i8]}><{[4x i8]zeroinitializer,i32 -2147483642,[6x i8]c"SOME(\00"}>,align 8
@G=private unnamed_addr constant<{[4x i8],i32,[5x i8]}><{[4x i8]zeroinitializer,i32 -2147483643,[5x i8]c"NONE\00"}>,align 8
@H=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat12formatOptionE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat12formatOptionE_862 to void(...)*),i32 -2147483647}>,align 8
@I=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat12keyValuePairE_271 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12keyValuePairE_863 to void(...)*),i32 -2147483647}>,align 8
@J=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat12keyValuePairE_273 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12keyValuePairE_864 to void(...)*),i32 -2147483647}>,align 8
@K=private unnamed_addr constant<{[4x i8],i32,i8*,i8*,i32}><{[4x i8]zeroinitializer,i32 -805306352,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@I,i32 0,i32 0,i32 0),i32 8),i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@J,i32 0,i32 0,i32 0),i32 8),i32 3}>,align 8
@L=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat12keyValuePairE_279 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12keyValuePairE_865 to void(...)*),i32 -2147483647}>,align 8
@M=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat12keyValuePairE_284 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12keyValuePairE_866 to void(...)*),i32 -2147483647}>,align 8
@N=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat12keyValuePairE_287 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12keyValuePairE_868 to void(...)*),i32 -2147483647}>,align 8
@O=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat12keyValuePairE_291 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12keyValuePairE_869 to void(...)*),i32 -2147483647}>,align 8
@P=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat12keyValuePairE_296 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12keyValuePairE_870 to void(...)*),i32 -2147483647}>,align 8
@Q=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat12keyValuePairE_298 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12keyValuePairE_871 to void(...)*),i32 -2147483647}>,align 8
@R=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat12keyValuePairE_300 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12keyValuePairE_872 to void(...)*),i32 -2147483647}>,align 8
@S=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat12keyValuePairE_302 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12keyValuePairE_873 to void(...)*),i32 -2147483647}>,align 8
@T=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat18formatEnclosedSEnvE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedSEnvE_875 to void(...)*),i32 -2147483647}>,align 8
@U=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat22formatEnclosedLabelMapE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat22formatEnclosedLabelMapE_876 to void(...)*),i32 -2147483647}>,align 8
@V=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_318 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_878 to void(...)*),i32 -2147483647}>,align 8
@W=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_324 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_879 to void(...)*),i32 -2147483647}>,align 8
@X=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_330 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_880 to void(...)*),i32 -2147483647}>,align 8
@Y=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_332 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_881 to void(...)*),i32 -2147483647}>,align 8
@Z=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_334 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_882 to void(...)*),i32 -2147483647}>,align 8
@aa=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat18formatEnclosedListE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_884 to void(...)*),i32 -2147483647}>,align 8
@ab=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_342 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_885 to void(...)*),i32 -2147483647}>,align 8
@ac=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_344 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_886 to void(...)*),i32 -2147483647}>,align 8
@ad=private unnamed_addr constant<{[4x i8],i32,i8*,i8*,i32}><{[4x i8]zeroinitializer,i32 -805306352,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@ab,i32 0,i32 0,i32 0),i32 8),i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@ac,i32 0,i32 0,i32 0),i32 8),i32 3}>,align 8
@ae=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_350 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_887 to void(...)*),i32 -2147483647}>,align 8
@af=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_355 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_888 to void(...)*),i32 -2147483647}>,align 8
@ag=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_360 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_889 to void(...)*),i32 -2147483647}>,align 8
@ah=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_362 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_890 to void(...)*),i32 -2147483647}>,align 8
@ai=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_364 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_891 to void(...)*),i32 -2147483647}>,align 8
@aj=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat23formatEnclosedSEnvPlainE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_892 to void(...)*),i32 -2147483647}>,align 8
@ak=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_372 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_893 to void(...)*),i32 -2147483647}>,align 8
@al=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_374 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_894 to void(...)*),i32 -2147483647}>,align 8
@am=private unnamed_addr constant<{[4x i8],i32,i8*,i8*,i32}><{[4x i8]zeroinitializer,i32 -805306352,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@ak,i32 0,i32 0,i32 0),i32 8),i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@al,i32 0,i32 0,i32 0),i32 8),i32 3}>,align 8
@an=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_380 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_895 to void(...)*),i32 -2147483647}>,align 8
@ao=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_385 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_896 to void(...)*),i32 -2147483647}>,align 8
@ap=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_390 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_897 to void(...)*),i32 -2147483647}>,align 8
@aq=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_392 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_898 to void(...)*),i32 -2147483647}>,align 8
@ar=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_394 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_899 to void(...)*),i32 -2147483647}>,align 8
@as=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat28formatEnclosedSymbolEnvPlainE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_900 to void(...)*),i32 -2147483647}>,align 8
@at=private unnamed_addr constant<{[4x i8],i32,[3x i8]}><{[4x i8]zeroinitializer,i32 -2147483645,[3x i8]c"=>\00"}>,align 8
@au=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32,i32,i32)*@_SMLFN10TermFormat10FormatComb9assocListE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLLLN10TermFormat10FormatComb9assocListE_901 to void(...)*),i32 -2147483647}>,align 8
@av=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat10FormatComb6recordE_423 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6recordE_902 to void(...)*),i32 -2147483647}>,align 8
@aw=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLFN10TermFormat10FormatComb6recordE to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6recordE_903 to void(...)*),i32 -2147483647}>,align 8
@ax=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c"=\00"}>,align 8
@ay=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat15formatRecordExpE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat15formatRecordExpE_904 to void(...)*),i32 -2147483647}>,align 8
@az=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat21formatRecordExpToJsonE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat21formatRecordExpToJsonE_905 to void(...)*),i32 -2147483647}>,align 8
@aA=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat14formatRecordTyE_468 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatRecordTyE_906 to void(...)*),i32 -2147483647}>,align 8
@aB=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat14formatRecordTyE_470 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatRecordTyE_907 to void(...)*),i32 -2147483647}>,align 8
@aC=private unnamed_addr constant<{[4x i8],i32,i8*,i8*,i32}><{[4x i8]zeroinitializer,i32 -805306352,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aA,i32 0,i32 0,i32 0),i32 8),i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aB,i32 0,i32 0,i32 0),i32 8),i32 3}>,align 8
@aD=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat14formatRecordTyE_474 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatRecordTyE_908 to void(...)*),i32 -2147483647}>,align 8
@aE=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat14formatRecordTyE_479 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatRecordTyE_909 to void(...)*),i32 -2147483647}>,align 8
@aF=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c"*\00"}>,align 8
@aG=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat14formatRecordTyE_499 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatRecordTyE_912 to void(...)*),i32 -2147483647}>,align 8
@aH=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat14formatRecordTyE_501 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatRecordTyE_913 to void(...)*),i32 -2147483647}>,align 8
@aI=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat14formatRecordTyE_503 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatRecordTyE_914 to void(...)*),i32 -2147483647}>,align 8
@aJ=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat14formatRecordTyE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat14formatRecordTyE_915 to void(...)*),i32 -2147483647}>,align 8
@aK=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c":\00"}>,align 8
@aL=private unnamed_addr constant<{[4x i8],i32,[5x i8]}><{[4x i8]zeroinitializer,i32 -2147483643,[5x i8]c"...}\00"}>,align 8
@aM=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat19formatDummyRecordTyE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat19formatDummyRecordTyE_916 to void(...)*),i32 -2147483647}>,align 8
@aN=private unnamed_addr constant<{[4x i8],i32,[57x i8]}><{[4x i8]zeroinitializer,i32 -2147483591,[57x i8]c"src/compiler/libs/util/main/TermFormat.sml:487.46(17139)\00"}>,align 8
@aO=private unnamed_addr constant<{[4x i8],i32,[57x i8]}><{[4x i8]zeroinitializer,i32 -2147483591,[57x i8]c"src/compiler/libs/util/main/TermFormat.sml:486.31(17069)\00"}>,align 8
@aP=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32)*@_SMLFN10TermFormat7btvNameE to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat7btvNameE_918 to void(...)*),i32 -2147483647}>,align 8
@aQ=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32)*@_SMLFN10TermFormat7ftvNameE to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat7ftvNameE_919 to void(...)*),i32 -2147483647}>,align 8
@aR=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32)*@_SMLFN10TermFormat15formatFreeTyvarE to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat15formatFreeTyvarE_920 to void(...)*),i32 -2147483647}>,align 8
@aS=private unnamed_addr constant<{[4x i8],i32,[57x i8]}><{[4x i8]zeroinitializer,i32 -2147483591,[57x i8]c"src/compiler/libs/util/main/TermFormat.sml:504.12(17668)\00"}>,align 8
@aT=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat10FormatComb4listE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat10FormatComb4listE_922 to void(...)*),i32 -2147483647}>,align 8
@aU=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat10FormatComb6tuple2E_551 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6tuple2E_923 to void(...)*),i32 -2147483647}>,align 8
@aV=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32,i32,i32)*@_SMLFN10TermFormat10FormatComb6tuple2E to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6tuple2E_924 to void(...)*),i32 -2147483647}>,align 8
@aW=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat10FormatComb6tuple3E_563 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6tuple3E_925 to void(...)*),i32 -2147483647}>,align 8
@aX=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32,i32,i32,i32,i32)*@_SMLFN10TermFormat10FormatComb6tuple3E to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*,i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6tuple3E_926 to void(...)*),i32 -2147483647}>,align 8
@aY=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat10FormatComb6tuple4E_575 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6tuple4E_927 to void(...)*),i32 -2147483647}>,align 8
@aZ=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c",\00"}>,align 8
@a0=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32,i32,i32,i32,i32,i32,i32)*@_SMLFN10TermFormat10FormatComb6tuple4E to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*,i8*,i8*,i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6tuple4E_928 to void(...)*),i32 -2147483647}>,align 8
@a1=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLFN10TermFormat10FormatComb4termE to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb4termE_929 to void(...)*),i32 -2147483647}>,align 8
@a2=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat15formatFormatExpE_589 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat15formatFormatExpE_936 to void(...)*),i32 -2147483647}>,align 8
@a3=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c"\22\00"}>,align 8
@a4=private unnamed_addr constant<{[4x i8],i32,[3x i8]}><{[4x i8]zeroinitializer,i32 -2147483645,[3x i8]c"\5Cn\00"}>,align 8
@a5=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat15formatFormatExpE_642 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat15formatFormatExpE_930 to void(...)*),i32 -2147483647}>,align 8
@a6=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c"!\00"}>,align 8
@a7=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c"L\00"}>,align 8
@a8=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c"R\00"}>,align 8
@a9=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c"N\00"}>,align 8
@ba=private unnamed_addr constant<{[4x i8],i32,[57x i8]}><{[4x i8]zeroinitializer,i32 -2147483591,[57x i8]c"src/compiler/libs/util/main/TermFormat.sml:610.24(21318)\00"}>,align 8
@bb=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c"{\00"}>,align 8
@bc=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat15formatFormatExpE_656 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat15formatFormatExpE_931 to void(...)*),i32 -2147483647}>,align 8
@bd=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat15formatFormatExpE_660 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat15formatFormatExpE_932 to void(...)*),i32 -2147483647}>,align 8
@be=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat15formatFormatExpE_665 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat15formatFormatExpE_933 to void(...)*),i32 -2147483647}>,align 8
@bf=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c"}\00"}>,align 8
@bg=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat15formatFormatExpE_668 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat15formatFormatExpE_934 to void(...)*),i32 -2147483647}>,align 8
@bh=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat15formatFormatExpE_670 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat15formatFormatExpE_935 to void(...)*),i32 -2147483647}>,align 8
@bi=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c"+\00"}>,align 8
@bj=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c"d\00"}>,align 8
@bk=private unnamed_addr constant<{[4x i8],i32,[1x i8]}><{[4x i8]zeroinitializer,i32 -2147483647,[1x i8]zeroinitializer}>,align 8
@bl=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c"[\00"}>,align 8
@bm=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c"]\00"}>,align 8
@bn=private unnamed_addr constant<{[4x i8],i32,i8*,i8*,i32}><{[4x i8]zeroinitializer,i32 -805306352,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@e,i32 0,i32 0,i32 0),i32 8),i8*null,i32 3}>,align 8
@bo=private unnamed_addr constant<{[4x i8],i32,[56x i8]}><{[4x i8]zeroinitializer,i32 -2147483592,[56x i8]c"src/compiler/libs/util/main/TermFormat.sml:598.6(20870)\00"}>,align 8
@bp=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLFN10TermFormat12formatFormatE to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12formatFormatE_937 to void(...)*),i32 -2147483647}>,align 8
@bq=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32,i32,i32,i32,i32)*@_SMLFN10TermFormat17formatEnclosedMapE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*,i8*,i8*)*@_SMLLLN10TermFormat17formatEnclosedMapE_938 to void(...)*),i32 -2147483647}>,align 8
@br=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat12formatIfConsE_691 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12formatIfConsE_939 to void(...)*),i32 -2147483647}>,align 8
@bs=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat12formatIfConsE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat12formatIfConsE_940 to void(...)*),i32 -2147483647}>,align 8
@bt=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat13formatIfEmptyE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat13formatIfEmptyE_941 to void(...)*),i32 -2147483647}>,align 8
@bu=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLFN10TermFormat19formatIfEmptyFormatE to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat19formatIfEmptyFormatE_942 to void(...)*),i32 -2147483647}>,align 8
@bv=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat22formatIfEmptySymbolMapE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat22formatIfEmptySymbolMapE_943 to void(...)*),i32 -2147483647}>,align 8
@bw=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat12formatIfListE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat12formatIfListE_944 to void(...)*),i32 -2147483647}>,align 8
@bx=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat16formatIfNonEmptyE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat16formatIfNonEmptyE_945 to void(...)*),i32 -2147483647}>,align 8
@by=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat25formatIfNonEmptySymbolMapE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat25formatIfNonEmptySymbolMapE_946 to void(...)*),i32 -2147483647}>,align 8
@bz=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat11emptyBtvEnvE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat11emptyBtvEnvE_947 to void(...)*),i32 -2147483647}>,align 8
@bA=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat10makeBtvEnvE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat10makeBtvEnvE_948 to void(...)*),i32 -2147483647}>,align 8
@bB=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat12extendBtvEnvE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat12extendBtvEnvE_949 to void(...)*),i32 -2147483647}>,align 8
@bC=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat21extendBtvEnvWithOrderE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat21extendBtvEnvWithOrderE_951 to void(...)*),i32 -2147483647}>,align 8
@bD=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat16formatBoundTyvarE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat16formatBoundTyvarE_953 to void(...)*),i32 -2147483647}>,align 8
@bE=private unnamed_addr constant<{[4x i8],i32,[57x i8]}><{[4x i8]zeroinitializer,i32 -2147483591,[57x i8]c"src/compiler/libs/util/main/TermFormat.sml:540.15(18846)\00"}>,align 8
@bF=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i32(i8*)*@_SMLLL6tyvars_745 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLL6tyvars_954 to void(...)*),i32 -2147483647}>,align 8
@bG=private unnamed_addr constant<{[4x i8],i32,[57x i8]}><{[4x i8]zeroinitializer,i32 -2147483591,[57x i8]c"src/compiler/libs/util/main/TermFormat.sml:563.15(19646)\00"}>,align 8
@bH=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i32(i8*)*@_SMLLL6tyvars_758 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLL6tyvars_957 to void(...)*),i32 -2147483647}>,align 8
@bI=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c"(\00"}>,align 8
@bJ=private unnamed_addr constant<{[4x i8],i32,[9x i8]}><{[4x i8]zeroinitializer,i32 -2147483639,[9x i8]c"FREEBTV(\00"}>,align 8
@bK=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c")\00"}>,align 8
@bL=private unnamed_addr constant<{[4x i8],i32,[57x i8]}><{[4x i8]zeroinitializer,i32 -2147483591,[57x i8]c"src/compiler/libs/util/main/TermFormat.sml:517.12(18044)\00"}>,align 8
@bM=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat10FormatComb6begin__E_772 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6begin__E_960 to void(...)*),i32 -2147483647}>,align 8
@bN=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat10FormatComb6begin__E_774 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6begin__E_961 to void(...)*),i32 -2147483647}>,align 8
@bO=private unnamed_addr constant<{[4x i8],i32,i8*,i8*,i32}><{[4x i8]zeroinitializer,i32 -805306352,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bM,i32 0,i32 0,i32 0),i32 8),i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bN,i32 0,i32 0,i32 0),i32 8),i32 3}>,align 8
@bP=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat10FormatComb6begin__E_777 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6begin__E_962 to void(...)*),i32 1}>,align 8
@bQ=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat10FormatComb6begin__E to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6begin__E_963 to void(...)*),i32 -2147483647}>,align 8
@bR=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat10FormatComb4end__E_781 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb4end__E_964 to void(...)*),i32 1}>,align 8
@bS=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat10FormatComb4end__E to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat10FormatComb4end__E_965 to void(...)*),i32 -2147483647}>,align 8
@bT=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat10FormatComb4textE_788 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb4textE_966 to void(...)*),i32 -2147483647}>,align 8
@bU=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32,i32,i32)*@_SMLFN10TermFormat10FormatComb4textE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLLLN10TermFormat10FormatComb4textE_967 to void(...)*),i32 -2147483647}>,align 8
@bV=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat10FormatComb5spaceE_794 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb5spaceE_968 to void(...)*),i32 -2147483647}>,align 8
@bW=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32,i32,i32)*@_SMLFN10TermFormat10FormatComb5spaceE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLLLN10TermFormat10FormatComb5spaceE_969 to void(...)*),i32 -2147483647}>,align 8
@bX=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat10FormatComb6dspaceE_800 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6dspaceE_970 to void(...)*),i32 -2147483647}>,align 8
@bY=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32,i32,i32)*@_SMLFN10TermFormat10FormatComb6dspaceE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6dspaceE_971 to void(...)*),i32 -2147483647}>,align 8
@bZ=private unnamed_addr constant<{[4x i8],i32,i32,[4x i8],i32}><{[4x i8]zeroinitializer,i32 -805306360,i32 3,[4x i8]zeroinitializer,i32 0}>,align 8
@b0=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat10FormatComb7newlineE_807 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb7newlineE_972 to void(...)*),i32 -2147483647}>,align 8
@b1=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32,i32,i32)*@_SMLFN10TermFormat10FormatComb7newlineE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLLLN10TermFormat10FormatComb7newlineE_973 to void(...)*),i32 -2147483647}>,align 8
@b2=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat10FormatComb1_DE_814 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb1_DE_974 to void(...)*),i32 -2147483647}>,align 8
@b3=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32,i32,i32)*@_SMLFN10TermFormat10FormatComb1_DE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLLLN10TermFormat10FormatComb1_DE_975 to void(...)*),i32 -2147483647}>,align 8
@b4=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32,i32,i32,i32,i32)*@_SMLFN10TermFormat10FormatComb6guard__E to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*,i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6guard__E_976 to void(...)*),i32 -2147483647}>,align 8
@b5=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32,i32,i32,i32,i32)*@_SMLFN10TermFormat10FormatComb5nest__E to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*,i8*,i8*)*@_SMLLLN10TermFormat10FormatComb5nest__E_978 to void(...)*),i32 -2147483647}>,align 8
@b6=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c"\0A\00"}>,align 8
@b7=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(void(i8*)*@_SMLLLN10TermFormat10FormatComb4putsE_829 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb4putsE_979 to void(...)*),i32 -2147483647}>,align 8
@b8=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLLN10TermFormat10FormatComb4putsE_832 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb4putsE_980 to void(...)*),i32 -2147483647}>,align 8
@b9=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat10FormatComb4putsE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat10FormatComb4putsE_981 to void(...)*),i32 -2147483647}>,align 8
@_SMLZN10TermFormat18formatEnclosedListE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aa,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat13formatAppListE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@y,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat13formatSeqListE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@z,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat18formatOptionalListE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@A,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat14formatDeclListE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@B,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat14formatCaseListE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@C,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat20formatEnclosedOptionE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@D,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat20formatOptionalOptionE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@E,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat12formatOptionE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@H,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat17formatEnclosedMapE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bq,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat18formatEnclosedSEnvE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@T,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat22formatEnclosedLabelMapE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@U,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat23formatEnclosedSEnvPlainE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aj,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat28formatEnclosedSymbolEnvPlainE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@as,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat15formatRecordExpE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@ay,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat21formatRecordExpToJsonE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@az,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat14formatRecordTyE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aJ,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat19formatDummyRecordTyE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aM,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat12formatIfConsE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bs,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat12formatIfListE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bw,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat16formatIfNonEmptyE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bx,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat13formatIfEmptyE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bt,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat25formatIfNonEmptySymbolMapE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@by,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat22formatIfEmptySymbolMapE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bv,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat19formatIfEmptyFormatE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bu,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat11emptyBtvEnvE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bz,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat10makeBtvEnvE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bA,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat12extendBtvEnvE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bB,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat21extendBtvEnvWithOrderE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bC,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat16formatBoundTyvarE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bD,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat7btvNameE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aP,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat15formatFreeTyvarE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aR,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat7ftvNameE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aQ,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat10FormatComb6begin__E=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bQ,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat10FormatComb4end__E=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bS,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat10FormatComb4textE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bU,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat10FormatComb5spaceE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bW,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat10FormatComb6dspaceE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bY,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat10FormatComb7newlineE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@b1,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat10FormatComb1_DE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@b3,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat10FormatComb6guard__E=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@b4,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat10FormatComb5nest__E=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@b5,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat10FormatComb4putsE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@b9,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat10FormatComb4termE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@a1,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat10FormatComb4listE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aT,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat10FormatComb9assocListE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@au,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat10FormatComb6recordE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aw,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat10FormatComb6tuple2E=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aV,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat10FormatComb6tuple3E=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aX,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat10FormatComb6tuple4E=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@a0,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat12formatFormatE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bp,i64 0,i32 2)to i8*)
@_SML_gvar3a6a3f6785231de5_TermFormat=private global<{[4x i8],i32,[2x i8*]}><{[4x i8]zeroinitializer,i32 -1342177264,[2x i8*]zeroinitializer}>,align 8
@ca=private unnamed_addr global[2x i64][i64 1,i64 sub(i64 ptrtoint(i8**getelementptr inbounds(<{[4x i8],i32,[2x i8*]}>,<{[4x i8],i32,[2x i8*]}>*@_SML_gvar3a6a3f6785231de5_TermFormat,i32 0,i32 2,i32 0)to i64),i64 ptrtoint([2x i64]*@ca to i64))]
@_SML_ftab3a6a3f6785231de5_TermFormat=external global i8
@cb=private unnamed_addr global i8 0
@_SMLZN10TermFormat12formatBtvEnvE=alias i8*,getelementptr inbounds(<{[4x i8],i32,[2x i8*]}>,<{[4x i8],i32,[2x i8*]}>*@_SML_gvar3a6a3f6785231de5_TermFormat,i32 0,i32 2,i32 0)
@_SMLZN10TermFormat20formatBtvEnvWithTypeE=alias i8*,getelementptr inbounds(<{[4x i8],i32,[2x i8*]}>,<{[4x i8],i32,[2x i8*]}>*@_SML_gvar3a6a3f6785231de5_TermFormat,i32 0,i32 2,i32 1)
declare void@llvm.gcroot(i8**,i8*)#0
declare i8*@sml_alloc(i32 inreg)local_unnamed_addr#0
declare void@sml_check(i32 inreg)local_unnamed_addr
declare void@sml_end()local_unnamed_addr#0
declare void@sml_gcroot(i8*,void()*,i8*,i8*)local_unnamed_addr#0
declare void@sml_matchcomp_bug()local_unnamed_addr
declare void@sml_raise(i8*inreg)local_unnamed_addr#1
declare void@sml_start(i8*inreg)local_unnamed_addr#0
declare void@sml_write(i8*inreg,i8**inreg,i8*inreg)local_unnamed_addr#0
declare i8*@_SMLFN10ListSorter4sortE(i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN11RecordLabel10isTupleMapE(i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN11RecordLabel12format__labelE(i8*inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN11RecordLabel16format__jsonLabelE(i8*inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN11RecordLabel3Map10listItemsiE(i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN11RecordLabel3Map5foldrE(i32 inreg,i32 inreg,i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN11RecordLabel3Map9listItemsE(i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i32@_SMLFN13FreeTypeVarID5toIntE(i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN14BoundTypeVarID3Map10listItemsiE(i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN14BoundTypeVarID3Map4findE(i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN14BoundTypeVarID3Map5emptyE(i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN14BoundTypeVarID3Map6foldliE(i32 inreg,i32 inreg,i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN14BoundTypeVarID3Map6insertE(i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN14BoundTypeVarID3Map6removeE(i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN14BoundTypeVarID3Map8inDomainE(i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i32@_SMLFN14BoundTypeVarID7compareE(i8*inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN14BoundTypeVarID8toStringE(i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN15BasicFormatters11format__listE(i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN3Bug11prettyPrintE(i8*inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN4List3mapE(i32 inreg,i32 inreg,i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN4List4nullE(i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN4List5foldlE(i32 inreg,i32 inreg,i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN4List5foldrE(i32 inreg,i32 inreg,i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN4List6concatE(i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN4SEnv10listItemsiE(i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN4SEnv7isEmptyE(i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i32@_SMLFN5Int327compareE(i8*inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN5Int328toStringE(i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN6String1_ZE(i8*inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN6String3strE(i8 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN6String8toStringE(i8*inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN6Symbol13format__symbolE(i8*inreg)local_unnamed_addr#2 gc"smlsharp"
declare void@_SMLFN6TextIO5printE(i8*inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN9SymbolEnv10listItemsiE(i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN9SymbolEnv7isEmptyE(i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare void@_SML_main5148a836b3728be9_Int32()local_unnamed_addr#2 gc"smlsharp"
declare void@_SML_main03d87556ec7f64b2_List()local_unnamed_addr#2 gc"smlsharp"
declare void@_SML_main1ef93e13728790b1_String()local_unnamed_addr#2 gc"smlsharp"
declare void@_SML_main3446b7b079949ccf_text_io()local_unnamed_addr#2 gc"smlsharp"
declare void@_SML_main6ad4d8e473c26a9c_BasicFormatters()local_unnamed_addr#2 gc"smlsharp"
declare void@_SML_main89b8631430c545af_Symbol()local_unnamed_addr#2 gc"smlsharp"
declare void@_SML_maina142c315f12317c0_RecordLabel()local_unnamed_addr#2 gc"smlsharp"
declare void@_SML_maineaa0aca8fbe4101a_Bug()local_unnamed_addr#2 gc"smlsharp"
declare void@_SML_main22c101bff228a4a9_LocalID()local_unnamed_addr#2 gc"smlsharp"
declare void@_SML_maind12f270a309dc7dd_SEnv()local_unnamed_addr#2 gc"smlsharp"
declare void@_SML_main92a9fd50084b022c_ListSorter()local_unnamed_addr#2 gc"smlsharp"
declare void@_SML_load5148a836b3728be9_Int32(i8*)local_unnamed_addr
declare void@_SML_load03d87556ec7f64b2_List(i8*)local_unnamed_addr
declare void@_SML_load1ef93e13728790b1_String(i8*)local_unnamed_addr
declare void@_SML_load3446b7b079949ccf_text_io(i8*)local_unnamed_addr
declare void@_SML_load6ad4d8e473c26a9c_BasicFormatters(i8*)local_unnamed_addr
declare void@_SML_load89b8631430c545af_Symbol(i8*)local_unnamed_addr
declare void@_SML_loada142c315f12317c0_RecordLabel(i8*)local_unnamed_addr
declare void@_SML_loadeaa0aca8fbe4101a_Bug(i8*)local_unnamed_addr
declare void@_SML_load22c101bff228a4a9_LocalID(i8*)local_unnamed_addr
declare void@_SML_loadd12f270a309dc7dd_SEnv(i8*)local_unnamed_addr
declare void@_SML_load92a9fd50084b022c_ListSorter(i8*)local_unnamed_addr
define private void@_SML_tabb3a6a3f6785231de5_TermFormat()#3{
unreachable
}
define void@_SML_load3a6a3f6785231de5_TermFormat(i8*%a)local_unnamed_addr#0{
%b=load i8,i8*@cb,align 1
%c=icmp eq i8%b,0
br i1%c,label%e,label%d
d:
ret void
e:
store i8 1,i8*@cb,align 1
tail call void@_SML_load5148a836b3728be9_Int32(i8*%a)#0
tail call void@_SML_load03d87556ec7f64b2_List(i8*%a)#0
tail call void@_SML_load1ef93e13728790b1_String(i8*%a)#0
tail call void@_SML_load3446b7b079949ccf_text_io(i8*%a)#0
tail call void@_SML_load6ad4d8e473c26a9c_BasicFormatters(i8*%a)#0
tail call void@_SML_load89b8631430c545af_Symbol(i8*%a)#0
tail call void@_SML_loada142c315f12317c0_RecordLabel(i8*%a)#0
tail call void@_SML_loadeaa0aca8fbe4101a_Bug(i8*%a)#0
tail call void@_SML_load22c101bff228a4a9_LocalID(i8*%a)#0
tail call void@_SML_loadd12f270a309dc7dd_SEnv(i8*%a)#0
tail call void@_SML_load92a9fd50084b022c_ListSorter(i8*%a)#0
tail call void@sml_gcroot(i8*%a,void()*@_SML_tabb3a6a3f6785231de5_TermFormat,i8*@_SML_ftab3a6a3f6785231de5_TermFormat,i8*bitcast([2x i64]*@ca to i8*))#0
ret void
}
define void@_SML_main3a6a3f6785231de5_TermFormat()local_unnamed_addr#2 gc"smlsharp"{
%a=alloca[3x i8*],align 8
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=load i8,i8*@cb,align 1
%f=and i8%e,2
%g=icmp eq i8%f,0
br i1%g,label%i,label%h
h:
ret void
i:
store i8 3,i8*@cb,align 1
tail call void@_SML_main5148a836b3728be9_Int32()#2
tail call void@_SML_main03d87556ec7f64b2_List()#2
tail call void@_SML_main1ef93e13728790b1_String()#2
tail call void@_SML_main3446b7b079949ccf_text_io()#2
tail call void@_SML_main6ad4d8e473c26a9c_BasicFormatters()#2
tail call void@_SML_main89b8631430c545af_Symbol()#2
tail call void@_SML_maina142c315f12317c0_RecordLabel()#2
tail call void@_SML_maineaa0aca8fbe4101a_Bug()#2
tail call void@_SML_main22c101bff228a4a9_LocalID()#2
tail call void@_SML_maind12f270a309dc7dd_SEnv()#2
tail call void@_SML_main92a9fd50084b022c_ListSorter()#2
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
%j=bitcast[3x i8*]*%a to i8*
call void@sml_start(i8*inreg%j)#0
%k=call i8*@sml_alloc(i32 inreg 20)#0
%l=getelementptr inbounds i8,i8*%k,i64 -4
%m=bitcast i8*%l to i32*
store i32 1342177296,i32*%m,align 4
store i8*%k,i8**%b,align 8
%n=getelementptr inbounds i8,i8*%k,i64 4
%o=bitcast i8*%n to i32*
store i32 0,i32*%o,align 1
%p=bitcast i8*%k to i32*
store i32 1,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%k,i64 8
%r=bitcast i8*%q to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@aZ,i64 0,i32 2,i64 0),i8**%r,align 8
%s=getelementptr inbounds i8,i8*%k,i64 16
%t=bitcast i8*%s to i32*
store i32 2,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 20)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177296,i32*%w,align 4
store i8*%u,i8**%c,align 8
%x=getelementptr inbounds i8,i8*%u,i64 4
%y=bitcast i8*%x to i32*
store i32 0,i32*%y,align 1
%z=bitcast i8*%u to i32*
store i32 6,i32*%z,align 4
%A=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%B=getelementptr inbounds i8,i8*%u,i64 8
%C=bitcast i8*%B to i8**
store i8*%A,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 16
%E=bitcast i8*%D to i32*
store i32 2,i32*%E,align 4
%F=call i8*@sml_alloc(i32 inreg 20)#0
%G=getelementptr inbounds i8,i8*%F,i64 -4
%H=bitcast i8*%G to i32*
store i32 1342177296,i32*%H,align 4
store i8*%F,i8**%b,align 8
%I=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%J=bitcast i8*%F to i8**
store i8*%I,i8**%J,align 8
%K=getelementptr inbounds i8,i8*%F,i64 8
%L=bitcast i8*%K to i8**
store i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,i8*,i32}>,<{[4x i8],i32,i8*,i8*,i32}>*@bn,i64 0,i32 2)to i8*),i8**%L,align 8
%M=getelementptr inbounds i8,i8*%F,i64 16
%N=bitcast i8*%M to i32*
store i32 3,i32*%N,align 4
%O=call i8*@sml_alloc(i32 inreg 20)#0
%P=getelementptr inbounds i8,i8*%O,i64 -4
%Q=bitcast i8*%P to i32*
store i32 1342177296,i32*%Q,align 4
store i8*%O,i8**%c,align 8
%R=getelementptr inbounds i8,i8*%O,i64 4
%S=bitcast i8*%R to i32*
store i32 0,i32*%S,align 1
%T=bitcast i8*%O to i32*
store i32 1,i32*%T,align 4
%U=getelementptr inbounds i8,i8*%O,i64 8
%V=bitcast i8*%U to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@aZ,i64 0,i32 2,i64 0),i8**%V,align 8
%W=getelementptr inbounds i8,i8*%O,i64 16
%X=bitcast i8*%W to i32*
store i32 2,i32*%X,align 4
%Y=call i8*@sml_alloc(i32 inreg 20)#0
%Z=bitcast i8*%Y to i32*
%aa=getelementptr inbounds i8,i8*%Y,i64 -4
%ab=bitcast i8*%aa to i32*
store i32 1342177296,i32*%ab,align 4
%ac=getelementptr inbounds i8,i8*%Y,i64 4
%ad=bitcast i8*%ac to i32*
store i32 0,i32*%ad,align 1
store i32 6,i32*%Z,align 4
%ae=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%af=getelementptr inbounds i8,i8*%Y,i64 8
%ag=bitcast i8*%af to i8**
store i8*%ae,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%Y,i64 16
%ai=bitcast i8*%ah to i32*
store i32 2,i32*%ai,align 4
%aj=call i8*@sml_alloc(i32 inreg 12)#0
%ak=getelementptr inbounds i8,i8*%aj,i64 -4
%al=bitcast i8*%ak to i32*
store i32 1342177288,i32*%al,align 4
store i8*%aj,i8**%c,align 8
%am=load i8*,i8**%b,align 8
%an=bitcast i8*%aj to i8**
store i8*%am,i8**%an,align 8
%ao=getelementptr inbounds i8,i8*%aj,i64 8
%ap=bitcast i8*%ao to i32*
store i32 1,i32*%ap,align 4
%aq=call i8*@sml_alloc(i32 inreg 28)#0
%ar=getelementptr inbounds i8,i8*%aq,i64 -4
%as=bitcast i8*%ar to i32*
store i32 1342177304,i32*%as,align 4
store i8*%aq,i8**%d,align 8
%at=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%au=bitcast i8*%aq to i8**
store i8*%at,i8**%au,align 8
%av=getelementptr inbounds i8,i8*%aq,i64 8
%aw=bitcast i8*%av to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLLN10TermFormat12formatBtvEnvE_753 to void(...)*),void(...)**%aw,align 8
%ax=getelementptr inbounds i8,i8*%aq,i64 16
%ay=bitcast i8*%ax to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat12formatBtvEnvE_956 to void(...)*),void(...)**%ay,align 8
%az=getelementptr inbounds i8,i8*%aq,i64 24
%aA=bitcast i8*%az to i32*
store i32 -2147483647,i32*%aA,align 4
%aB=call i8*@sml_alloc(i32 inreg 12)#0
%aC=getelementptr inbounds i8,i8*%aB,i64 -4
%aD=bitcast i8*%aC to i32*
store i32 1342177288,i32*%aD,align 4
store i8*%aB,i8**%c,align 8
%aE=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%aF=bitcast i8*%aB to i8**
store i8*%aE,i8**%aF,align 8
%aG=getelementptr inbounds i8,i8*%aB,i64 8
%aH=bitcast i8*%aG to i32*
store i32 1,i32*%aH,align 4
%aI=call i8*@sml_alloc(i32 inreg 28)#0
%aJ=getelementptr inbounds i8,i8*%aI,i64 -4
%aK=bitcast i8*%aJ to i32*
store i32 1342177304,i32*%aK,align 4
%aL=load i8*,i8**%c,align 8
%aM=bitcast i8*%aI to i8**
store i8*%aL,i8**%aM,align 8
%aN=getelementptr inbounds i8,i8*%aI,i64 8
%aO=bitcast i8*%aN to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLLN10TermFormat20formatBtvEnvWithTypeE_771 to void(...)*),void(...)**%aO,align 8
%aP=getelementptr inbounds i8,i8*%aI,i64 16
%aQ=bitcast i8*%aP to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat20formatBtvEnvWithTypeE_959 to void(...)*),void(...)**%aQ,align 8
%aR=getelementptr inbounds i8,i8*%aI,i64 24
%aS=bitcast i8*%aR to i32*
store i32 -2147483647,i32*%aS,align 4
%aT=load i8*,i8**%d,align 8
call void@sml_write(i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,[2x i8*]}>,<{[4x i8],i32,[2x i8*]}>*@_SML_gvar3a6a3f6785231de5_TermFormat,i64 0,i32 2,i64 0)to i8*),i8**inreg getelementptr inbounds(<{[4x i8],i32,[2x i8*]}>,<{[4x i8],i32,[2x i8*]}>*@_SML_gvar3a6a3f6785231de5_TermFormat,i64 0,i32 2,i64 0),i8*inreg%aT)#0
call void@sml_write(i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,[2x i8*]}>,<{[4x i8],i32,[2x i8*]}>*@_SML_gvar3a6a3f6785231de5_TermFormat,i64 0,i32 2,i64 0)to i8*),i8**inreg getelementptr inbounds(<{[4x i8],i32,[2x i8*]}>,<{[4x i8],i32,[2x i8*]}>*@_SML_gvar3a6a3f6785231de5_TermFormat,i64 0,i32 2,i64 1),i8*inreg%aI)#0
call void@sml_end()#0
ret void
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6guard__E_174(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
n:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%l,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%d,align 8
br label%l
l:
%m=phi i8*[%k,%j],[%a,%n]
%o=bitcast i8*%m to i8**
%p=getelementptr inbounds i8,i8*%m,i64 8
%q=bitcast i8*%p to i8**
%r=load i8*,i8**%q,align 8
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%g,align 8
%x=load i8*,i8**%o,align 8
store i8*%x,i8**%e,align 8
%y=getelementptr inbounds i8,i8*%m,i64 16
%z=bitcast i8*%y to i8**
%A=load i8*,i8**%z,align 8
store i8*%A,i8**%d,align 8
%B=call i8*@sml_alloc(i32 inreg 20)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177296,i32*%D,align 4
store i8*%B,i8**%f,align 8
%E=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%F=bitcast i8*%B to i8**
store i8*%E,i8**%F,align 8
%G=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%H=getelementptr inbounds i8,i8*%B,i64 8
%I=bitcast i8*%H to i8**
store i8*%G,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%B,i64 16
%K=bitcast i8*%J to i32*
store i32 3,i32*%K,align 4
%L=call i8*@sml_alloc(i32 inreg 20)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32 1342177296,i32*%N,align 4
store i8*%L,i8**%d,align 8
%O=getelementptr inbounds i8,i8*%L,i64 4
%P=bitcast i8*%O to i32*
store i32 0,i32*%P,align 1
%Q=bitcast i8*%L to i32*
store i32 1,i32*%Q,align 4
%R=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%S=getelementptr inbounds i8,i8*%L,i64 8
%T=bitcast i8*%S to i8**
store i8*%R,i8**%T,align 8
%U=getelementptr inbounds i8,i8*%L,i64 16
%V=bitcast i8*%U to i32*
store i32 2,i32*%V,align 4
%W=call i8*@sml_alloc(i32 inreg 20)#0
%X=getelementptr inbounds i8,i8*%W,i64 -4
%Y=bitcast i8*%X to i32*
store i32 1342177296,i32*%Y,align 4
%Z=load i8*,i8**%d,align 8
%aa=bitcast i8*%W to i8**
store i8*%Z,i8**%aa,align 8
%ab=load i8*,i8**%c,align 8
%ac=getelementptr inbounds i8,i8*%W,i64 8
%ad=bitcast i8*%ac to i8**
store i8*%ab,i8**%ad,align 8
%ae=getelementptr inbounds i8,i8*%W,i64 16
%af=bitcast i8*%ae to i32*
store i32 3,i32*%af,align 4
%ag=load i8*,i8**%g,align 8
%ah=tail call fastcc i8*%u(i8*inreg%ag,i8*inreg%W)
ret i8*%ah
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6guard__E_175(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%k,label%m
k:
%l=bitcast i8*%a to i8**
br label%q
m:
call void@sml_check(i32 inreg%i)
%n=load i8*,i8**%d,align 8
%o=bitcast i8**%c to i8***
%p=load i8**,i8***%o,align 8
br label%q
q:
%r=phi i8**[%p,%m],[%l,%k]
%s=phi i8*[%n,%m],[%b,%k]
%t=getelementptr inbounds i8,i8*%s,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%s to i8**
%x=load i8*,i8**%w,align 8
store i8*%x,i8**%g,align 8
%y=load i8*,i8**%r,align 8
store i8*%y,i8**%d,align 8
%z=getelementptr inbounds i8*,i8**%r,i64 1
%A=load i8*,i8**%z,align 8
store i8*%A,i8**%e,align 8
%B=getelementptr inbounds i8*,i8**%r,i64 3
%C=load i8*,i8**%B,align 8
store i8*%C,i8**%f,align 8
%D=call i8*@sml_alloc(i32 inreg 28)#0
%E=getelementptr inbounds i8,i8*%D,i64 -4
%F=bitcast i8*%E to i32*
store i32 1342177304,i32*%F,align 4
store i8*%D,i8**%h,align 8
%G=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%H=bitcast i8*%D to i8**
store i8*%G,i8**%H,align 8
%I=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%J=getelementptr inbounds i8,i8*%D,i64 8
%K=bitcast i8*%J to i8**
store i8*%I,i8**%K,align 8
%L=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%M=getelementptr inbounds i8,i8*%D,i64 16
%N=bitcast i8*%M to i8**
store i8*%L,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%D,i64 24
%P=bitcast i8*%O to i32*
store i32 7,i32*%P,align 4
%Q=call i8*@sml_alloc(i32 inreg 28)#0
%R=getelementptr inbounds i8,i8*%Q,i64 -4
%S=bitcast i8*%R to i32*
store i32 1342177304,i32*%S,align 4
store i8*%Q,i8**%d,align 8
%T=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%U=bitcast i8*%Q to i8**
store i8*%T,i8**%U,align 8
%V=getelementptr inbounds i8,i8*%Q,i64 8
%W=bitcast i8*%V to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6guard__E_174 to void(...)*),void(...)**%W,align 8
%X=getelementptr inbounds i8,i8*%Q,i64 16
%Y=bitcast i8*%X to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6guard__E_174 to void(...)*),void(...)**%Y,align 8
%Z=getelementptr inbounds i8,i8*%Q,i64 24
%aa=bitcast i8*%Z to i32*
store i32 -2147483647,i32*%aa,align 4
%ab=load i8*,i8**%c,align 8
%ac=getelementptr inbounds i8,i8*%ab,i64 16
%ad=bitcast i8*%ac to i8**
%ae=load i8*,i8**%ad,align 8
store i8*%ae,i8**%c,align 8
%af=call i8*@sml_alloc(i32 inreg 20)#0
%ag=getelementptr inbounds i8,i8*%af,i64 -4
%ah=bitcast i8*%ag to i32*
store i32 1342177296,i32*%ah,align 4
%ai=load i8*,i8**%d,align 8
%aj=bitcast i8*%af to i8**
store i8*%ai,i8**%aj,align 8
%ak=load i8*,i8**%c,align 8
%al=getelementptr inbounds i8,i8*%af,i64 8
%am=bitcast i8*%al to i8**
store i8*%ak,i8**%am,align 8
%an=getelementptr inbounds i8,i8*%af,i64 16
%ao=bitcast i8*%an to i32*
store i32 3,i32*%ao,align 4
%ap=load i8*,i8**%g,align 8
%aq=tail call fastcc i8*%v(i8*inreg%ap,i8*inreg%af)
ret i8*%aq
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6guard__E_176(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
%i=bitcast i8*%a to i8**
%j=load i8*,i8**%i,align 8
store i8*%j,i8**%d,align 8
%k=getelementptr inbounds i8,i8*%a,i64 8
%l=bitcast i8*%k to i8**
%m=load i8*,i8**%l,align 8
store i8*%m,i8**%e,align 8
%n=getelementptr inbounds i8,i8*%a,i64 16
%o=bitcast i8*%n to i8**
%p=load i8*,i8**%o,align 8
store i8*%p,i8**%f,align 8
%q=getelementptr inbounds i8,i8*%a,i64 24
%r=bitcast i8*%q to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%g,align 8
%t=call i8*@sml_alloc(i32 inreg 36)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177312,i32*%v,align 4
store i8*%t,i8**%h,align 8
%w=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%z=getelementptr inbounds i8,i8*%t,i64 8
%A=bitcast i8*%z to i8**
store i8*%y,i8**%A,align 8
%B=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%C=getelementptr inbounds i8,i8*%t,i64 16
%D=bitcast i8*%C to i8**
store i8*%B,i8**%D,align 8
%E=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%F=getelementptr inbounds i8,i8*%t,i64 24
%G=bitcast i8*%F to i8**
store i8*%E,i8**%G,align 8
%H=getelementptr inbounds i8,i8*%t,i64 32
%I=bitcast i8*%H to i32*
store i32 15,i32*%I,align 4
%J=call i8*@sml_alloc(i32 inreg 28)#0
%K=getelementptr inbounds i8,i8*%J,i64 -4
%L=bitcast i8*%K to i32*
store i32 1342177304,i32*%L,align 4
%M=load i8*,i8**%h,align 8
%N=bitcast i8*%J to i8**
store i8*%M,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%J,i64 8
%P=bitcast i8*%O to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6guard__E_175 to void(...)*),void(...)**%P,align 8
%Q=getelementptr inbounds i8,i8*%J,i64 16
%R=bitcast i8*%Q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6guard__E_175 to void(...)*),void(...)**%R,align 8
%S=getelementptr inbounds i8,i8*%J,i64 24
%T=bitcast i8*%S to i32*
store i32 1,i32*%T,align 4
ret i8*%J
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6guard__E_177(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%b,i8**%c,align 8
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%d,align 8
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
store i8*%l,i8**%e,align 8
%m=getelementptr inbounds i8,i8*%a,i64 16
%n=bitcast i8*%m to i8**
%o=load i8*,i8**%n,align 8
store i8*%o,i8**%f,align 8
%p=call i8*@sml_alloc(i32 inreg 36)#0
%q=getelementptr inbounds i8,i8*%p,i64 -4
%r=bitcast i8*%q to i32*
store i32 1342177312,i32*%r,align 4
store i8*%p,i8**%g,align 8
%s=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%t=bitcast i8*%p to i8**
store i8*%s,i8**%t,align 8
%u=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%v=getelementptr inbounds i8,i8*%p,i64 8
%w=bitcast i8*%v to i8**
store i8*%u,i8**%w,align 8
%x=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%y=getelementptr inbounds i8,i8*%p,i64 16
%z=bitcast i8*%y to i8**
store i8*%x,i8**%z,align 8
%A=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%B=getelementptr inbounds i8,i8*%p,i64 24
%C=bitcast i8*%B to i8**
store i8*%A,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%p,i64 32
%E=bitcast i8*%D to i32*
store i32 15,i32*%E,align 4
%F=call i8*@sml_alloc(i32 inreg 28)#0
%G=getelementptr inbounds i8,i8*%F,i64 -4
%H=bitcast i8*%G to i32*
store i32 1342177304,i32*%H,align 4
%I=load i8*,i8**%g,align 8
%J=bitcast i8*%F to i8**
store i8*%I,i8**%J,align 8
%K=getelementptr inbounds i8,i8*%F,i64 8
%L=bitcast i8*%K to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLLN10TermFormat10FormatComb6guard__E_176 to void(...)*),void(...)**%L,align 8
%M=getelementptr inbounds i8,i8*%F,i64 16
%N=bitcast i8*%M to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6guard__E_838 to void(...)*),void(...)**%N,align 8
%O=getelementptr inbounds i8,i8*%F,i64 24
%P=bitcast i8*%O to i32*
store i32 -2147483647,i32*%P,align 4
ret i8*%F
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6guard__E_178(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6guard__E_180(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
n:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%l,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%d,align 8
br label%l
l:
%m=phi i8*[%k,%j],[%a,%n]
%o=bitcast i8*%m to i8**
%p=getelementptr inbounds i8,i8*%m,i64 8
%q=bitcast i8*%p to i8**
%r=load i8*,i8**%q,align 8
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%g,align 8
%x=load i8*,i8**%o,align 8
store i8*%x,i8**%e,align 8
%y=getelementptr inbounds i8,i8*%m,i64 16
%z=bitcast i8*%y to i8**
%A=load i8*,i8**%z,align 8
store i8*%A,i8**%d,align 8
%B=call i8*@sml_alloc(i32 inreg 20)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177296,i32*%D,align 4
store i8*%B,i8**%f,align 8
%E=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%F=bitcast i8*%B to i8**
store i8*%E,i8**%F,align 8
%G=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%H=getelementptr inbounds i8,i8*%B,i64 8
%I=bitcast i8*%H to i8**
store i8*%G,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%B,i64 16
%K=bitcast i8*%J to i32*
store i32 3,i32*%K,align 4
%L=call i8*@sml_alloc(i32 inreg 20)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32 1342177296,i32*%N,align 4
store i8*%L,i8**%d,align 8
%O=getelementptr inbounds i8,i8*%L,i64 4
%P=bitcast i8*%O to i32*
store i32 0,i32*%P,align 1
%Q=bitcast i8*%L to i32*
store i32 1,i32*%Q,align 4
%R=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%S=getelementptr inbounds i8,i8*%L,i64 8
%T=bitcast i8*%S to i8**
store i8*%R,i8**%T,align 8
%U=getelementptr inbounds i8,i8*%L,i64 16
%V=bitcast i8*%U to i32*
store i32 2,i32*%V,align 4
%W=call i8*@sml_alloc(i32 inreg 20)#0
%X=getelementptr inbounds i8,i8*%W,i64 -4
%Y=bitcast i8*%X to i32*
store i32 1342177296,i32*%Y,align 4
%Z=load i8*,i8**%d,align 8
%aa=bitcast i8*%W to i8**
store i8*%Z,i8**%aa,align 8
%ab=load i8*,i8**%c,align 8
%ac=getelementptr inbounds i8,i8*%W,i64 8
%ad=bitcast i8*%ac to i8**
store i8*%ab,i8**%ad,align 8
%ae=getelementptr inbounds i8,i8*%W,i64 16
%af=bitcast i8*%ae to i32*
store i32 3,i32*%af,align 4
%ag=load i8*,i8**%g,align 8
%ah=tail call fastcc i8*%u(i8*inreg%ag,i8*inreg%W)
ret i8*%ah
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6guard__E_181(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%k,label%m
k:
%l=bitcast i8*%a to i8**
br label%q
m:
call void@sml_check(i32 inreg%i)
%n=load i8*,i8**%d,align 8
%o=bitcast i8**%c to i8***
%p=load i8**,i8***%o,align 8
br label%q
q:
%r=phi i8**[%p,%m],[%l,%k]
%s=phi i8*[%n,%m],[%b,%k]
%t=getelementptr inbounds i8,i8*%s,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%s to i8**
%x=load i8*,i8**%w,align 8
store i8*%x,i8**%g,align 8
%y=load i8*,i8**%r,align 8
store i8*%y,i8**%d,align 8
%z=getelementptr inbounds i8*,i8**%r,i64 1
%A=load i8*,i8**%z,align 8
store i8*%A,i8**%e,align 8
%B=getelementptr inbounds i8*,i8**%r,i64 3
%C=load i8*,i8**%B,align 8
store i8*%C,i8**%f,align 8
%D=call i8*@sml_alloc(i32 inreg 28)#0
%E=getelementptr inbounds i8,i8*%D,i64 -4
%F=bitcast i8*%E to i32*
store i32 1342177304,i32*%F,align 4
store i8*%D,i8**%h,align 8
%G=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%H=bitcast i8*%D to i8**
store i8*%G,i8**%H,align 8
%I=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%J=getelementptr inbounds i8,i8*%D,i64 8
%K=bitcast i8*%J to i8**
store i8*%I,i8**%K,align 8
%L=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%M=getelementptr inbounds i8,i8*%D,i64 16
%N=bitcast i8*%M to i8**
store i8*%L,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%D,i64 24
%P=bitcast i8*%O to i32*
store i32 7,i32*%P,align 4
%Q=call i8*@sml_alloc(i32 inreg 28)#0
%R=getelementptr inbounds i8,i8*%Q,i64 -4
%S=bitcast i8*%R to i32*
store i32 1342177304,i32*%S,align 4
store i8*%Q,i8**%d,align 8
%T=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%U=bitcast i8*%Q to i8**
store i8*%T,i8**%U,align 8
%V=getelementptr inbounds i8,i8*%Q,i64 8
%W=bitcast i8*%V to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6guard__E_180 to void(...)*),void(...)**%W,align 8
%X=getelementptr inbounds i8,i8*%Q,i64 16
%Y=bitcast i8*%X to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6guard__E_180 to void(...)*),void(...)**%Y,align 8
%Z=getelementptr inbounds i8,i8*%Q,i64 24
%aa=bitcast i8*%Z to i32*
store i32 -2147483647,i32*%aa,align 4
%ab=load i8*,i8**%c,align 8
%ac=getelementptr inbounds i8,i8*%ab,i64 16
%ad=bitcast i8*%ac to i8**
%ae=load i8*,i8**%ad,align 8
store i8*%ae,i8**%c,align 8
%af=call i8*@sml_alloc(i32 inreg 20)#0
%ag=getelementptr inbounds i8,i8*%af,i64 -4
%ah=bitcast i8*%ag to i32*
store i32 1342177296,i32*%ah,align 4
%ai=load i8*,i8**%d,align 8
%aj=bitcast i8*%af to i8**
store i8*%ai,i8**%aj,align 8
%ak=load i8*,i8**%c,align 8
%al=getelementptr inbounds i8,i8*%af,i64 8
%am=bitcast i8*%al to i8**
store i8*%ak,i8**%am,align 8
%an=getelementptr inbounds i8,i8*%af,i64 16
%ao=bitcast i8*%an to i32*
store i32 3,i32*%ao,align 4
%ap=load i8*,i8**%g,align 8
%aq=tail call fastcc i8*%v(i8*inreg%ap,i8*inreg%af)
ret i8*%aq
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6guard__E_182(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%b,i8**%c,align 8
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%d,align 8
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
store i8*%l,i8**%e,align 8
%m=getelementptr inbounds i8,i8*%a,i64 16
%n=bitcast i8*%m to i8**
%o=load i8*,i8**%n,align 8
store i8*%o,i8**%f,align 8
%p=call i8*@sml_alloc(i32 inreg 36)#0
%q=getelementptr inbounds i8,i8*%p,i64 -4
%r=bitcast i8*%q to i32*
store i32 1342177312,i32*%r,align 4
store i8*%p,i8**%g,align 8
%s=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%t=bitcast i8*%p to i8**
store i8*%s,i8**%t,align 8
%u=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%v=getelementptr inbounds i8,i8*%p,i64 8
%w=bitcast i8*%v to i8**
store i8*%u,i8**%w,align 8
%x=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%y=getelementptr inbounds i8,i8*%p,i64 16
%z=bitcast i8*%y to i8**
store i8*%x,i8**%z,align 8
%A=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%B=getelementptr inbounds i8,i8*%p,i64 24
%C=bitcast i8*%B to i8**
store i8*%A,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%p,i64 32
%E=bitcast i8*%D to i32*
store i32 15,i32*%E,align 4
%F=call i8*@sml_alloc(i32 inreg 28)#0
%G=getelementptr inbounds i8,i8*%F,i64 -4
%H=bitcast i8*%G to i32*
store i32 1342177304,i32*%H,align 4
%I=load i8*,i8**%g,align 8
%J=bitcast i8*%F to i8**
store i8*%I,i8**%J,align 8
%K=getelementptr inbounds i8,i8*%F,i64 8
%L=bitcast i8*%K to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6guard__E_181 to void(...)*),void(...)**%L,align 8
%M=getelementptr inbounds i8,i8*%F,i64 16
%N=bitcast i8*%M to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6guard__E_181 to void(...)*),void(...)**%N,align 8
%O=getelementptr inbounds i8,i8*%F,i64 24
%P=bitcast i8*%O to i32*
store i32 1,i32*%P,align 4
ret i8*%F
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6guard__E_183(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%f,align 8
store i8*%b,i8**%c,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%k,label%m
k:
%l=bitcast i8*%a to i8***
br label%q
m:
call void@sml_check(i32 inreg%i)
%n=bitcast i8**%f to i8****
%o=load i8***,i8****%n,align 8
%p=bitcast i8***%o to i8*
br label%q
q:
%r=phi i8*[%p,%m],[%a,%k]
%s=phi i8***[%o,%m],[%l,%k]
%t=load i8**,i8***%s,align 8
%u=load i8*,i8**%t,align 8
store i8*%u,i8**%d,align 8
%v=bitcast i8***%s to i8**
%w=load i8*,i8**%v,align 8
%x=getelementptr inbounds i8,i8*%w,i64 8
%y=bitcast i8*%x to i8**
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%e,align 8
%A=getelementptr inbounds i8,i8*%r,i64 8
%B=bitcast i8*%A to i8**
%C=load i8*,i8**%B,align 8
store i8*%C,i8**%g,align 8
%D=call i8*@sml_alloc(i32 inreg 28)#0
%E=getelementptr inbounds i8,i8*%D,i64 -4
%F=bitcast i8*%E to i32*
store i32 1342177304,i32*%F,align 4
store i8*%D,i8**%h,align 8
%G=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%H=bitcast i8*%D to i8**
store i8*%G,i8**%H,align 8
%I=load i8*,i8**%d,align 8
%J=getelementptr inbounds i8,i8*%D,i64 8
%K=bitcast i8*%J to i8**
store i8*%I,i8**%K,align 8
%L=load i8*,i8**%e,align 8
%M=getelementptr inbounds i8,i8*%D,i64 16
%N=bitcast i8*%M to i8**
store i8*%L,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%D,i64 24
%P=bitcast i8*%O to i32*
store i32 7,i32*%P,align 4
%Q=call i8*@sml_alloc(i32 inreg 28)#0
%R=getelementptr inbounds i8,i8*%Q,i64 -4
%S=bitcast i8*%R to i32*
store i32 1342177304,i32*%S,align 4
%T=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%U=bitcast i8*%Q to i8**
store i8*%T,i8**%U,align 8
%V=getelementptr inbounds i8,i8*%Q,i64 8
%W=bitcast i8*%V to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6guard__E_177 to void(...)*),void(...)**%W,align 8
%X=getelementptr inbounds i8,i8*%Q,i64 16
%Y=bitcast i8*%X to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6guard__E_177 to void(...)*),void(...)**%Y,align 8
%Z=getelementptr inbounds i8,i8*%Q,i64 24
%aa=bitcast i8*%Z to i32*
store i32 -2147483647,i32*%aa,align 4
%ab=load i8*,i8**%c,align 8
%ac=getelementptr inbounds i8,i8*%ab,i64 16
%ad=bitcast i8*%ac to i8*(i8*,i8*)**
%ae=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ad,align 8
%af=bitcast i8*%ab to i8**
%ag=load i8*,i8**%af,align 8
store i8*%ag,i8**%g,align 8
%ah=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%ai=getelementptr inbounds i8,i8*%ah,i64 8
%aj=bitcast i8*%ai to i8**
%ak=load i8*,i8**%aj,align 8
store i8*%ak,i8**%c,align 8
%al=call i8*@sml_alloc(i32 inreg 28)#0
%am=getelementptr inbounds i8,i8*%al,i64 -4
%an=bitcast i8*%am to i32*
store i32 1342177304,i32*%an,align 4
store i8*%al,i8**%f,align 8
%ao=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ap=bitcast i8*%al to i8**
store i8*%ao,i8**%ap,align 8
%aq=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ar=getelementptr inbounds i8,i8*%al,i64 8
%as=bitcast i8*%ar to i8**
store i8*%aq,i8**%as,align 8
%at=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%au=getelementptr inbounds i8,i8*%al,i64 16
%av=bitcast i8*%au to i8**
store i8*%at,i8**%av,align 8
%aw=getelementptr inbounds i8,i8*%al,i64 24
%ax=bitcast i8*%aw to i32*
store i32 7,i32*%ax,align 4
%ay=call i8*@sml_alloc(i32 inreg 28)#0
%az=getelementptr inbounds i8,i8*%ay,i64 -4
%aA=bitcast i8*%az to i32*
store i32 1342177304,i32*%aA,align 4
store i8*%ay,i8**%c,align 8
%aB=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%aC=bitcast i8*%ay to i8**
store i8*%aB,i8**%aC,align 8
%aD=getelementptr inbounds i8,i8*%ay,i64 8
%aE=bitcast i8*%aD to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6guard__E_182 to void(...)*),void(...)**%aE,align 8
%aF=getelementptr inbounds i8,i8*%ay,i64 16
%aG=bitcast i8*%aF to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6guard__E_182 to void(...)*),void(...)**%aG,align 8
%aH=getelementptr inbounds i8,i8*%ay,i64 24
%aI=bitcast i8*%aH to i32*
store i32 -2147483647,i32*%aI,align 4
%aJ=call i8*@sml_alloc(i32 inreg 20)#0
%aK=getelementptr inbounds i8,i8*%aJ,i64 -4
%aL=bitcast i8*%aK to i32*
store i32 1342177296,i32*%aL,align 4
%aM=bitcast i8*%aJ to i8**
store i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@p,i64 0,i32 2)to i8*),i8**%aM,align 8
%aN=load i8*,i8**%c,align 8
%aO=getelementptr inbounds i8,i8*%aJ,i64 8
%aP=bitcast i8*%aO to i8**
store i8*%aN,i8**%aP,align 8
%aQ=getelementptr inbounds i8,i8*%aJ,i64 16
%aR=bitcast i8*%aQ to i32*
store i32 3,i32*%aR,align 4
%aS=load i8*,i8**%g,align 8
%aT=tail call fastcc i8*%ae(i8*inreg%aS,i8*inreg%aJ)
ret i8*%aT
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6guard__E_184(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e)#4 gc"smlsharp"{
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
%i=bitcast i8*%a to i8**
%j=load i8*,i8**%i,align 8
store i8*%j,i8**%f,align 8
%k=getelementptr inbounds i8,i8*%a,i64 8
%l=bitcast i8*%k to i8**
%m=load i8*,i8**%l,align 8
store i8*%m,i8**%g,align 8
%n=call i8*@sml_alloc(i32 inreg 20)#0
%o=getelementptr inbounds i8,i8*%n,i64 -4
%p=bitcast i8*%o to i32*
store i32 1342177296,i32*%p,align 4
store i8*%n,i8**%h,align 8
%q=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%r=bitcast i8*%n to i8**
store i8*%q,i8**%r,align 8
%s=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%t=getelementptr inbounds i8,i8*%n,i64 8
%u=bitcast i8*%t to i8**
store i8*%s,i8**%u,align 8
%v=getelementptr inbounds i8,i8*%n,i64 16
%w=bitcast i8*%v to i32*
store i32 3,i32*%w,align 4
%x=call i8*@sml_alloc(i32 inreg 28)#0
%y=getelementptr inbounds i8,i8*%x,i64 -4
%z=bitcast i8*%y to i32*
store i32 1342177304,i32*%z,align 4
%A=load i8*,i8**%h,align 8
%B=bitcast i8*%x to i8**
store i8*%A,i8**%B,align 8
%C=getelementptr inbounds i8,i8*%x,i64 8
%D=bitcast i8*%C to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6guard__E_183 to void(...)*),void(...)**%D,align 8
%E=getelementptr inbounds i8,i8*%x,i64 16
%F=bitcast i8*%E to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6guard__E_183 to void(...)*),void(...)**%F,align 8
%G=getelementptr inbounds i8,i8*%x,i64 24
%H=bitcast i8*%G to i32*
store i32 1,i32*%H,align 4
ret i8*%x
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6guard__E_185(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%b,i8**%c,align 8
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=getelementptr inbounds i8,i8*%h,i64 8
%o=bitcast i8*%n to i8**
store i8*%m,i8**%o,align 8
%p=getelementptr inbounds i8,i8*%h,i64 16
%q=bitcast i8*%p to i32*
store i32 3,i32*%q,align 4
%r=call i8*@sml_alloc(i32 inreg 28)#0
%s=getelementptr inbounds i8,i8*%r,i64 -4
%t=bitcast i8*%s to i32*
store i32 1342177304,i32*%t,align 4
%u=load i8*,i8**%e,align 8
%v=bitcast i8*%r to i8**
store i8*%u,i8**%v,align 8
%w=getelementptr inbounds i8,i8*%r,i64 8
%x=bitcast i8*%w to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32)*@_SMLLLN10TermFormat10FormatComb6guard__E_184 to void(...)*),void(...)**%x,align 8
%y=getelementptr inbounds i8,i8*%r,i64 16
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6guard__E_840 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%r,i64 24
%B=bitcast i8*%A to i32*
store i32 -2147483647,i32*%B,align 4
ret i8*%r
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6guard__E_186(i8*inreg%a)unnamed_addr#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=getelementptr inbounds i8,i8*%d,i64 -4
%f=bitcast i8*%e to i32*
store i32 1342177288,i32*%f,align 4
store i8*%d,i8**%c,align 8
%g=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%h=bitcast i8*%d to i8**
store i8*%g,i8**%h,align 8
%i=getelementptr inbounds i8,i8*%d,i64 8
%j=bitcast i8*%i to i32*
store i32 1,i32*%j,align 4
%k=call i8*@sml_alloc(i32 inreg 28)#0
%l=getelementptr inbounds i8,i8*%k,i64 -4
%m=bitcast i8*%l to i32*
store i32 1342177304,i32*%m,align 4
%n=load i8*,i8**%c,align 8
%o=bitcast i8*%k to i8**
store i8*%n,i8**%o,align 8
%p=getelementptr inbounds i8,i8*%k,i64 8
%q=bitcast i8*%p to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6guard__E_185 to void(...)*),void(...)**%q,align 8
%r=getelementptr inbounds i8,i8*%k,i64 16
%s=bitcast i8*%r to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6guard__E_185 to void(...)*),void(...)**%s,align 8
%t=getelementptr inbounds i8,i8*%k,i64 24
%u=bitcast i8*%t to i32*
store i32 -2147483647,i32*%u,align 4
ret i8*%k
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb5nest__E_190(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8**
br label%p
l:
call void@sml_check(i32 inreg%h)
%m=bitcast i8**%d to i8***
%n=load i8**,i8***%m,align 8
%o=bitcast i8**%n to i8*
br label%p
p:
%q=phi i8*[%o,%l],[%a,%j]
%r=phi i8**[%n,%l],[%k,%j]
%s=load i8*,i8**%r,align 8
%t=getelementptr inbounds i8,i8*%s,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%s to i8**
%x=load i8*,i8**%w,align 8
store i8*%x,i8**%e,align 8
%y=getelementptr inbounds i8,i8*%q,i64 16
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=call i8*@sml_alloc(i32 inreg 12)#0
%C=bitcast i8*%B to i32*
%D=getelementptr inbounds i8,i8*%B,i64 -4
%E=bitcast i8*%D to i32*
store i32 1342177288,i32*%E,align 4
store i8*%B,i8**%f,align 8
store i32 5,i32*%C,align 4
%F=getelementptr inbounds i8,i8*%B,i64 4
%G=bitcast i8*%F to i32*
store i32%A,i32*%G,align 4
%H=getelementptr inbounds i8,i8*%B,i64 8
%I=bitcast i8*%H to i32*
store i32 0,i32*%I,align 4
%J=load i8*,i8**%d,align 8
%K=getelementptr inbounds i8,i8*%J,i64 8
%L=bitcast i8*%K to i8**
%M=load i8*,i8**%L,align 8
store i8*%M,i8**%d,align 8
%N=call i8*@sml_alloc(i32 inreg 20)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32 1342177296,i32*%P,align 4
store i8*%N,i8**%g,align 8
%Q=getelementptr inbounds i8,i8*%N,i64 4
%R=bitcast i8*%Q to i32*
store i32 0,i32*%R,align 1
%S=bitcast i8*%N to i32*
store i32 4,i32*%S,align 4
%T=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%U=getelementptr inbounds i8,i8*%N,i64 8
%V=bitcast i8*%U to i8**
store i8*%T,i8**%V,align 8
%W=getelementptr inbounds i8,i8*%N,i64 16
%X=bitcast i8*%W to i32*
store i32 2,i32*%X,align 4
%Y=call i8*@sml_alloc(i32 inreg 20)#0
%Z=getelementptr inbounds i8,i8*%Y,i64 -4
%aa=bitcast i8*%Z to i32*
store i32 1342177296,i32*%aa,align 4
store i8*%Y,i8**%d,align 8
%ab=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%ac=bitcast i8*%Y to i8**
store i8*%ab,i8**%ac,align 8
%ad=getelementptr inbounds i8,i8*%Y,i64 8
%ae=bitcast i8*%ad to i8**
store i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,i8*,i32}>,<{[4x i8],i32,i8*,i8*,i32}>*@s,i64 0,i32 2)to i8*),i8**%ae,align 8
%af=getelementptr inbounds i8,i8*%Y,i64 16
%ag=bitcast i8*%af to i32*
store i32 3,i32*%ag,align 4
%ah=call i8*@sml_alloc(i32 inreg 20)#0
%ai=getelementptr inbounds i8,i8*%ah,i64 -4
%aj=bitcast i8*%ai to i32*
store i32 1342177296,i32*%aj,align 4
store i8*%ah,i8**%g,align 8
%ak=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%al=bitcast i8*%ah to i8**
store i8*%ak,i8**%al,align 8
%am=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%an=getelementptr inbounds i8,i8*%ah,i64 8
%ao=bitcast i8*%an to i8**
store i8*%am,i8**%ao,align 8
%ap=getelementptr inbounds i8,i8*%ah,i64 16
%aq=bitcast i8*%ap to i32*
store i32 3,i32*%aq,align 4
%ar=call i8*@sml_alloc(i32 inreg 20)#0
%as=getelementptr inbounds i8,i8*%ar,i64 -4
%at=bitcast i8*%as to i32*
store i32 1342177296,i32*%at,align 4
store i8*%ar,i8**%d,align 8
%au=getelementptr inbounds i8,i8*%ar,i64 4
%av=bitcast i8*%au to i32*
store i32 0,i32*%av,align 1
%aw=bitcast i8*%ar to i32*
store i32 4,i32*%aw,align 4
%ax=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%ay=getelementptr inbounds i8,i8*%ar,i64 8
%az=bitcast i8*%ay to i8**
store i8*%ax,i8**%az,align 8
%aA=getelementptr inbounds i8,i8*%ar,i64 16
%aB=bitcast i8*%aA to i32*
store i32 2,i32*%aB,align 4
%aC=call i8*@sml_alloc(i32 inreg 20)#0
%aD=getelementptr inbounds i8,i8*%aC,i64 -4
%aE=bitcast i8*%aD to i32*
store i32 1342177296,i32*%aE,align 4
%aF=load i8*,i8**%d,align 8
%aG=bitcast i8*%aC to i8**
store i8*%aF,i8**%aG,align 8
%aH=load i8*,i8**%c,align 8
%aI=getelementptr inbounds i8,i8*%aC,i64 8
%aJ=bitcast i8*%aI to i8**
store i8*%aH,i8**%aJ,align 8
%aK=getelementptr inbounds i8,i8*%aC,i64 16
%aL=bitcast i8*%aK to i32*
store i32 3,i32*%aL,align 4
%aM=load i8*,i8**%e,align 8
%aN=tail call fastcc i8*%v(i8*inreg%aM,i8*inreg%aC)
ret i8*%aN
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb5nest__E_191(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8**
br label%p
l:
call void@sml_check(i32 inreg%h)
%m=load i8*,i8**%d,align 8
%n=bitcast i8**%c to i8***
%o=load i8**,i8***%n,align 8
br label%p
p:
%q=phi i8**[%o,%l],[%k,%j]
%r=phi i8*[%m,%l],[%b,%j]
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%f,align 8
%x=load i8*,i8**%q,align 8
store i8*%x,i8**%d,align 8
%y=getelementptr inbounds i8*,i8**%q,i64 2
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%e,align 8
%A=getelementptr inbounds i8*,i8**%q,i64 3
%B=bitcast i8**%A to i32*
%C=load i32,i32*%B,align 4
%D=call i8*@sml_alloc(i32 inreg 28)#0
%E=getelementptr inbounds i8,i8*%D,i64 -4
%F=bitcast i8*%E to i32*
store i32 1342177304,i32*%F,align 4
store i8*%D,i8**%g,align 8
%G=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%H=bitcast i8*%D to i8**
store i8*%G,i8**%H,align 8
%I=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%J=getelementptr inbounds i8,i8*%D,i64 8
%K=bitcast i8*%J to i8**
store i8*%I,i8**%K,align 8
%L=getelementptr inbounds i8,i8*%D,i64 16
%M=bitcast i8*%L to i32*
store i32%C,i32*%M,align 4
%N=getelementptr inbounds i8,i8*%D,i64 24
%O=bitcast i8*%N to i32*
store i32 3,i32*%O,align 4
%P=call i8*@sml_alloc(i32 inreg 28)#0
%Q=getelementptr inbounds i8,i8*%P,i64 -4
%R=bitcast i8*%Q to i32*
store i32 1342177304,i32*%R,align 4
store i8*%P,i8**%d,align 8
%S=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%T=bitcast i8*%P to i8**
store i8*%S,i8**%T,align 8
%U=getelementptr inbounds i8,i8*%P,i64 8
%V=bitcast i8*%U to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb5nest__E_190 to void(...)*),void(...)**%V,align 8
%W=getelementptr inbounds i8,i8*%P,i64 16
%X=bitcast i8*%W to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb5nest__E_190 to void(...)*),void(...)**%X,align 8
%Y=getelementptr inbounds i8,i8*%P,i64 24
%Z=bitcast i8*%Y to i32*
store i32 -2147483647,i32*%Z,align 4
%aa=load i8*,i8**%c,align 8
%ab=getelementptr inbounds i8,i8*%aa,i64 8
%ac=bitcast i8*%ab to i8**
%ad=load i8*,i8**%ac,align 8
store i8*%ad,i8**%c,align 8
%ae=call i8*@sml_alloc(i32 inreg 20)#0
%af=getelementptr inbounds i8,i8*%ae,i64 -4
%ag=bitcast i8*%af to i32*
store i32 1342177296,i32*%ag,align 4
%ah=load i8*,i8**%d,align 8
%ai=bitcast i8*%ae to i8**
store i8*%ah,i8**%ai,align 8
%aj=load i8*,i8**%c,align 8
%ak=getelementptr inbounds i8,i8*%ae,i64 8
%al=bitcast i8*%ak to i8**
store i8*%aj,i8**%al,align 8
%am=getelementptr inbounds i8,i8*%ae,i64 16
%an=bitcast i8*%am to i32*
store i32 3,i32*%an,align 4
%ao=load i8*,i8**%f,align 8
%ap=tail call fastcc i8*%u(i8*inreg%ao,i8*inreg%ae)
ret i8*%ap
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb5nest__E_192(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%d,align 8
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
store i8*%l,i8**%e,align 8
%m=getelementptr inbounds i8,i8*%a,i64 16
%n=bitcast i8*%m to i8**
%o=load i8*,i8**%n,align 8
store i8*%o,i8**%f,align 8
%p=getelementptr inbounds i8,i8*%a,i64 24
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=call i8*@sml_alloc(i32 inreg 36)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177312,i32*%u,align 4
store i8*%s,i8**%g,align 8
%v=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%y=getelementptr inbounds i8,i8*%s,i64 8
%z=bitcast i8*%y to i8**
store i8*%x,i8**%z,align 8
%A=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%B=getelementptr inbounds i8,i8*%s,i64 16
%C=bitcast i8*%B to i8**
store i8*%A,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%s,i64 24
%E=bitcast i8*%D to i32*
store i32%r,i32*%E,align 4
%F=getelementptr inbounds i8,i8*%s,i64 32
%G=bitcast i8*%F to i32*
store i32 7,i32*%G,align 4
%H=call i8*@sml_alloc(i32 inreg 28)#0
%I=getelementptr inbounds i8,i8*%H,i64 -4
%J=bitcast i8*%I to i32*
store i32 1342177304,i32*%J,align 4
%K=load i8*,i8**%g,align 8
%L=bitcast i8*%H to i8**
store i8*%K,i8**%L,align 8
%M=getelementptr inbounds i8,i8*%H,i64 8
%N=bitcast i8*%M to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb5nest__E_191 to void(...)*),void(...)**%N,align 8
%O=getelementptr inbounds i8,i8*%H,i64 16
%P=bitcast i8*%O to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb5nest__E_191 to void(...)*),void(...)**%P,align 8
%Q=getelementptr inbounds i8,i8*%H,i64 24
%R=bitcast i8*%Q to i32*
store i32 1,i32*%R,align 4
ret i8*%H
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb5nest__E_193(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=getelementptr inbounds i8,i8*%a,i64 16
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=call i8*@sml_alloc(i32 inreg 36)#0
%p=getelementptr inbounds i8,i8*%o,i64 -4
%q=bitcast i8*%p to i32*
store i32 1342177312,i32*%q,align 4
store i8*%o,i8**%f,align 8
%r=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%s=bitcast i8*%o to i8**
store i8*%r,i8**%s,align 8
%t=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%u=getelementptr inbounds i8,i8*%o,i64 8
%v=bitcast i8*%u to i8**
store i8*%t,i8**%v,align 8
%w=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%x=getelementptr inbounds i8,i8*%o,i64 16
%y=bitcast i8*%x to i8**
store i8*%w,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%o,i64 24
%A=bitcast i8*%z to i32*
store i32%n,i32*%A,align 4
%B=getelementptr inbounds i8,i8*%o,i64 32
%C=bitcast i8*%B to i32*
store i32 7,i32*%C,align 4
%D=call i8*@sml_alloc(i32 inreg 28)#0
%E=getelementptr inbounds i8,i8*%D,i64 -4
%F=bitcast i8*%E to i32*
store i32 1342177304,i32*%F,align 4
%G=load i8*,i8**%f,align 8
%H=bitcast i8*%D to i8**
store i8*%G,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%D,i64 8
%J=bitcast i8*%I to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLLN10TermFormat10FormatComb5nest__E_192 to void(...)*),void(...)**%J,align 8
%K=getelementptr inbounds i8,i8*%D,i64 16
%L=bitcast i8*%K to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat10FormatComb5nest__E_842 to void(...)*),void(...)**%L,align 8
%M=getelementptr inbounds i8,i8*%D,i64 24
%N=bitcast i8*%M to i32*
store i32 -2147483647,i32*%N,align 4
ret i8*%D
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb5nest__E_194(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb5nest__E_198(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8**
br label%p
l:
call void@sml_check(i32 inreg%h)
%m=bitcast i8**%d to i8***
%n=load i8**,i8***%m,align 8
%o=bitcast i8**%n to i8*
br label%p
p:
%q=phi i8*[%o,%l],[%a,%j]
%r=phi i8**[%n,%l],[%k,%j]
%s=load i8*,i8**%r,align 8
%t=getelementptr inbounds i8,i8*%s,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%s to i8**
%x=load i8*,i8**%w,align 8
store i8*%x,i8**%e,align 8
%y=getelementptr inbounds i8,i8*%q,i64 16
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=call i8*@sml_alloc(i32 inreg 12)#0
%C=bitcast i8*%B to i32*
%D=getelementptr inbounds i8,i8*%B,i64 -4
%E=bitcast i8*%D to i32*
store i32 1342177288,i32*%E,align 4
store i8*%B,i8**%f,align 8
store i32 5,i32*%C,align 4
%F=getelementptr inbounds i8,i8*%B,i64 4
%G=bitcast i8*%F to i32*
store i32%A,i32*%G,align 4
%H=getelementptr inbounds i8,i8*%B,i64 8
%I=bitcast i8*%H to i32*
store i32 0,i32*%I,align 4
%J=load i8*,i8**%d,align 8
%K=getelementptr inbounds i8,i8*%J,i64 8
%L=bitcast i8*%K to i8**
%M=load i8*,i8**%L,align 8
store i8*%M,i8**%d,align 8
%N=call i8*@sml_alloc(i32 inreg 20)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32 1342177296,i32*%P,align 4
store i8*%N,i8**%g,align 8
%Q=getelementptr inbounds i8,i8*%N,i64 4
%R=bitcast i8*%Q to i32*
store i32 0,i32*%R,align 1
%S=bitcast i8*%N to i32*
store i32 4,i32*%S,align 4
%T=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%U=getelementptr inbounds i8,i8*%N,i64 8
%V=bitcast i8*%U to i8**
store i8*%T,i8**%V,align 8
%W=getelementptr inbounds i8,i8*%N,i64 16
%X=bitcast i8*%W to i32*
store i32 2,i32*%X,align 4
%Y=call i8*@sml_alloc(i32 inreg 20)#0
%Z=getelementptr inbounds i8,i8*%Y,i64 -4
%aa=bitcast i8*%Z to i32*
store i32 1342177296,i32*%aa,align 4
store i8*%Y,i8**%d,align 8
%ab=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%ac=bitcast i8*%Y to i8**
store i8*%ab,i8**%ac,align 8
%ad=getelementptr inbounds i8,i8*%Y,i64 8
%ae=bitcast i8*%ad to i8**
store i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,i8*,i32}>,<{[4x i8],i32,i8*,i8*,i32}>*@s,i64 0,i32 2)to i8*),i8**%ae,align 8
%af=getelementptr inbounds i8,i8*%Y,i64 16
%ag=bitcast i8*%af to i32*
store i32 3,i32*%ag,align 4
%ah=call i8*@sml_alloc(i32 inreg 20)#0
%ai=getelementptr inbounds i8,i8*%ah,i64 -4
%aj=bitcast i8*%ai to i32*
store i32 1342177296,i32*%aj,align 4
store i8*%ah,i8**%g,align 8
%ak=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%al=bitcast i8*%ah to i8**
store i8*%ak,i8**%al,align 8
%am=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%an=getelementptr inbounds i8,i8*%ah,i64 8
%ao=bitcast i8*%an to i8**
store i8*%am,i8**%ao,align 8
%ap=getelementptr inbounds i8,i8*%ah,i64 16
%aq=bitcast i8*%ap to i32*
store i32 3,i32*%aq,align 4
%ar=call i8*@sml_alloc(i32 inreg 20)#0
%as=getelementptr inbounds i8,i8*%ar,i64 -4
%at=bitcast i8*%as to i32*
store i32 1342177296,i32*%at,align 4
store i8*%ar,i8**%d,align 8
%au=getelementptr inbounds i8,i8*%ar,i64 4
%av=bitcast i8*%au to i32*
store i32 0,i32*%av,align 1
%aw=bitcast i8*%ar to i32*
store i32 4,i32*%aw,align 4
%ax=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%ay=getelementptr inbounds i8,i8*%ar,i64 8
%az=bitcast i8*%ay to i8**
store i8*%ax,i8**%az,align 8
%aA=getelementptr inbounds i8,i8*%ar,i64 16
%aB=bitcast i8*%aA to i32*
store i32 2,i32*%aB,align 4
%aC=call i8*@sml_alloc(i32 inreg 20)#0
%aD=getelementptr inbounds i8,i8*%aC,i64 -4
%aE=bitcast i8*%aD to i32*
store i32 1342177296,i32*%aE,align 4
%aF=load i8*,i8**%d,align 8
%aG=bitcast i8*%aC to i8**
store i8*%aF,i8**%aG,align 8
%aH=load i8*,i8**%c,align 8
%aI=getelementptr inbounds i8,i8*%aC,i64 8
%aJ=bitcast i8*%aI to i8**
store i8*%aH,i8**%aJ,align 8
%aK=getelementptr inbounds i8,i8*%aC,i64 16
%aL=bitcast i8*%aK to i32*
store i32 3,i32*%aL,align 4
%aM=load i8*,i8**%e,align 8
%aN=tail call fastcc i8*%v(i8*inreg%aM,i8*inreg%aC)
ret i8*%aN
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb5nest__E_199(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8**
br label%p
l:
call void@sml_check(i32 inreg%h)
%m=load i8*,i8**%d,align 8
%n=bitcast i8**%c to i8***
%o=load i8**,i8***%n,align 8
br label%p
p:
%q=phi i8**[%o,%l],[%k,%j]
%r=phi i8*[%m,%l],[%b,%j]
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%f,align 8
%x=load i8*,i8**%q,align 8
store i8*%x,i8**%d,align 8
%y=getelementptr inbounds i8*,i8**%q,i64 2
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%e,align 8
%A=getelementptr inbounds i8*,i8**%q,i64 3
%B=bitcast i8**%A to i32*
%C=load i32,i32*%B,align 4
%D=call i8*@sml_alloc(i32 inreg 28)#0
%E=getelementptr inbounds i8,i8*%D,i64 -4
%F=bitcast i8*%E to i32*
store i32 1342177304,i32*%F,align 4
store i8*%D,i8**%g,align 8
%G=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%H=bitcast i8*%D to i8**
store i8*%G,i8**%H,align 8
%I=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%J=getelementptr inbounds i8,i8*%D,i64 8
%K=bitcast i8*%J to i8**
store i8*%I,i8**%K,align 8
%L=getelementptr inbounds i8,i8*%D,i64 16
%M=bitcast i8*%L to i32*
store i32%C,i32*%M,align 4
%N=getelementptr inbounds i8,i8*%D,i64 24
%O=bitcast i8*%N to i32*
store i32 3,i32*%O,align 4
%P=call i8*@sml_alloc(i32 inreg 28)#0
%Q=getelementptr inbounds i8,i8*%P,i64 -4
%R=bitcast i8*%Q to i32*
store i32 1342177304,i32*%R,align 4
store i8*%P,i8**%d,align 8
%S=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%T=bitcast i8*%P to i8**
store i8*%S,i8**%T,align 8
%U=getelementptr inbounds i8,i8*%P,i64 8
%V=bitcast i8*%U to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb5nest__E_198 to void(...)*),void(...)**%V,align 8
%W=getelementptr inbounds i8,i8*%P,i64 16
%X=bitcast i8*%W to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb5nest__E_198 to void(...)*),void(...)**%X,align 8
%Y=getelementptr inbounds i8,i8*%P,i64 24
%Z=bitcast i8*%Y to i32*
store i32 -2147483647,i32*%Z,align 4
%aa=load i8*,i8**%c,align 8
%ab=getelementptr inbounds i8,i8*%aa,i64 8
%ac=bitcast i8*%ab to i8**
%ad=load i8*,i8**%ac,align 8
store i8*%ad,i8**%c,align 8
%ae=call i8*@sml_alloc(i32 inreg 20)#0
%af=getelementptr inbounds i8,i8*%ae,i64 -4
%ag=bitcast i8*%af to i32*
store i32 1342177296,i32*%ag,align 4
%ah=load i8*,i8**%d,align 8
%ai=bitcast i8*%ae to i8**
store i8*%ah,i8**%ai,align 8
%aj=load i8*,i8**%c,align 8
%ak=getelementptr inbounds i8,i8*%ae,i64 8
%al=bitcast i8*%ak to i8**
store i8*%aj,i8**%al,align 8
%am=getelementptr inbounds i8,i8*%ae,i64 16
%an=bitcast i8*%am to i32*
store i32 3,i32*%an,align 4
%ao=load i8*,i8**%f,align 8
%ap=tail call fastcc i8*%u(i8*inreg%ao,i8*inreg%ae)
ret i8*%ap
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb5nest__E_200(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=getelementptr inbounds i8,i8*%a,i64 16
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=call i8*@sml_alloc(i32 inreg 36)#0
%p=getelementptr inbounds i8,i8*%o,i64 -4
%q=bitcast i8*%p to i32*
store i32 1342177312,i32*%q,align 4
store i8*%o,i8**%f,align 8
%r=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%s=bitcast i8*%o to i8**
store i8*%r,i8**%s,align 8
%t=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%u=getelementptr inbounds i8,i8*%o,i64 8
%v=bitcast i8*%u to i8**
store i8*%t,i8**%v,align 8
%w=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%x=getelementptr inbounds i8,i8*%o,i64 16
%y=bitcast i8*%x to i8**
store i8*%w,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%o,i64 24
%A=bitcast i8*%z to i32*
store i32%n,i32*%A,align 4
%B=getelementptr inbounds i8,i8*%o,i64 32
%C=bitcast i8*%B to i32*
store i32 7,i32*%C,align 4
%D=call i8*@sml_alloc(i32 inreg 28)#0
%E=getelementptr inbounds i8,i8*%D,i64 -4
%F=bitcast i8*%E to i32*
store i32 1342177304,i32*%F,align 4
%G=load i8*,i8**%f,align 8
%H=bitcast i8*%D to i8**
store i8*%G,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%D,i64 8
%J=bitcast i8*%I to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb5nest__E_199 to void(...)*),void(...)**%J,align 8
%K=getelementptr inbounds i8,i8*%D,i64 16
%L=bitcast i8*%K to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb5nest__E_199 to void(...)*),void(...)**%L,align 8
%M=getelementptr inbounds i8,i8*%D,i64 24
%N=bitcast i8*%M to i32*
store i32 1,i32*%N,align 4
ret i8*%D
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb5nest__E_201(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%f,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8***
br label%p
l:
call void@sml_check(i32 inreg%h)
%m=bitcast i8**%f to i8****
%n=load i8***,i8****%m,align 8
%o=bitcast i8***%n to i8*
br label%p
p:
%q=phi i8*[%o,%l],[%a,%j]
%r=phi i8***[%n,%l],[%k,%j]
%s=load i8**,i8***%r,align 8
%t=load i8*,i8**%s,align 8
store i8*%t,i8**%d,align 8
%u=bitcast i8***%r to i8**
%v=load i8*,i8**%u,align 8
%w=getelementptr inbounds i8,i8*%v,i64 8
%x=bitcast i8*%w to i8**
%y=load i8*,i8**%x,align 8
store i8*%y,i8**%e,align 8
%z=getelementptr inbounds i8,i8*%q,i64 8
%A=bitcast i8*%z to i32*
%B=load i32,i32*%A,align 4
%C=call i8*@sml_alloc(i32 inreg 28)#0
%D=getelementptr inbounds i8,i8*%C,i64 -4
%E=bitcast i8*%D to i32*
store i32 1342177304,i32*%E,align 4
store i8*%C,i8**%g,align 8
%F=load i8*,i8**%d,align 8
%G=bitcast i8*%C to i8**
store i8*%F,i8**%G,align 8
%H=load i8*,i8**%e,align 8
%I=getelementptr inbounds i8,i8*%C,i64 8
%J=bitcast i8*%I to i8**
store i8*%H,i8**%J,align 8
%K=getelementptr inbounds i8,i8*%C,i64 16
%L=bitcast i8*%K to i32*
store i32%B,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%C,i64 24
%N=bitcast i8*%M to i32*
store i32 3,i32*%N,align 4
%O=call i8*@sml_alloc(i32 inreg 28)#0
%P=getelementptr inbounds i8,i8*%O,i64 -4
%Q=bitcast i8*%P to i32*
store i32 1342177304,i32*%Q,align 4
%R=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%S=bitcast i8*%O to i8**
store i8*%R,i8**%S,align 8
%T=getelementptr inbounds i8,i8*%O,i64 8
%U=bitcast i8*%T to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb5nest__E_193 to void(...)*),void(...)**%U,align 8
%V=getelementptr inbounds i8,i8*%O,i64 16
%W=bitcast i8*%V to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb5nest__E_193 to void(...)*),void(...)**%W,align 8
%X=getelementptr inbounds i8,i8*%O,i64 24
%Y=bitcast i8*%X to i32*
store i32 -2147483647,i32*%Y,align 4
%Z=load i8*,i8**%c,align 8
%aa=getelementptr inbounds i8,i8*%Z,i64 16
%ab=bitcast i8*%aa to i8*(i8*,i8*)**
%ac=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ab,align 8
%ad=bitcast i8*%Z to i8**
%ae=load i8*,i8**%ad,align 8
store i8*%ae,i8**%c,align 8
%af=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%ag=getelementptr inbounds i8,i8*%af,i64 8
%ah=bitcast i8*%ag to i32*
%ai=load i32,i32*%ah,align 4
%aj=call i8*@sml_alloc(i32 inreg 28)#0
%ak=getelementptr inbounds i8,i8*%aj,i64 -4
%al=bitcast i8*%ak to i32*
store i32 1342177304,i32*%al,align 4
store i8*%aj,i8**%f,align 8
%am=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%an=bitcast i8*%aj to i8**
store i8*%am,i8**%an,align 8
%ao=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%ap=getelementptr inbounds i8,i8*%aj,i64 8
%aq=bitcast i8*%ap to i8**
store i8*%ao,i8**%aq,align 8
%ar=getelementptr inbounds i8,i8*%aj,i64 16
%as=bitcast i8*%ar to i32*
store i32%ai,i32*%as,align 4
%at=getelementptr inbounds i8,i8*%aj,i64 24
%au=bitcast i8*%at to i32*
store i32 3,i32*%au,align 4
%av=call i8*@sml_alloc(i32 inreg 28)#0
%aw=getelementptr inbounds i8,i8*%av,i64 -4
%ax=bitcast i8*%aw to i32*
store i32 1342177304,i32*%ax,align 4
store i8*%av,i8**%d,align 8
%ay=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%az=bitcast i8*%av to i8**
store i8*%ay,i8**%az,align 8
%aA=getelementptr inbounds i8,i8*%av,i64 8
%aB=bitcast i8*%aA to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb5nest__E_200 to void(...)*),void(...)**%aB,align 8
%aC=getelementptr inbounds i8,i8*%av,i64 16
%aD=bitcast i8*%aC to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb5nest__E_200 to void(...)*),void(...)**%aD,align 8
%aE=getelementptr inbounds i8,i8*%av,i64 24
%aF=bitcast i8*%aE to i32*
store i32 -2147483647,i32*%aF,align 4
%aG=call i8*@sml_alloc(i32 inreg 20)#0
%aH=getelementptr inbounds i8,i8*%aG,i64 -4
%aI=bitcast i8*%aH to i32*
store i32 1342177296,i32*%aI,align 4
%aJ=bitcast i8*%aG to i8**
store i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@q,i64 0,i32 2)to i8*),i8**%aJ,align 8
%aK=load i8*,i8**%d,align 8
%aL=getelementptr inbounds i8,i8*%aG,i64 8
%aM=bitcast i8*%aL to i8**
store i8*%aK,i8**%aM,align 8
%aN=getelementptr inbounds i8,i8*%aG,i64 16
%aO=bitcast i8*%aN to i32*
store i32 3,i32*%aO,align 4
%aP=load i8*,i8**%c,align 8
%aQ=tail call fastcc i8*%ac(i8*inreg%aP,i8*inreg%aG)
ret i8*%aQ
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb5nest__E_202(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e)#4 gc"smlsharp"{
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%f,align 8
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i32*
%l=load i32,i32*%k,align 4
%m=call i8*@sml_alloc(i32 inreg 20)#0
%n=getelementptr inbounds i8,i8*%m,i64 -4
%o=bitcast i8*%n to i32*
store i32 1342177296,i32*%o,align 4
store i8*%m,i8**%g,align 8
%p=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%q=bitcast i8*%m to i8**
store i8*%p,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%m,i64 8
%s=bitcast i8*%r to i32*
store i32%l,i32*%s,align 4
%t=getelementptr inbounds i8,i8*%m,i64 16
%u=bitcast i8*%t to i32*
store i32 1,i32*%u,align 4
%v=call i8*@sml_alloc(i32 inreg 28)#0
%w=getelementptr inbounds i8,i8*%v,i64 -4
%x=bitcast i8*%w to i32*
store i32 1342177304,i32*%x,align 4
%y=load i8*,i8**%g,align 8
%z=bitcast i8*%v to i8**
store i8*%y,i8**%z,align 8
%A=getelementptr inbounds i8,i8*%v,i64 8
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb5nest__E_201 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%v,i64 16
%D=bitcast i8*%C to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb5nest__E_201 to void(...)*),void(...)**%D,align 8
%E=getelementptr inbounds i8,i8*%v,i64 24
%F=bitcast i8*%E to i32*
store i32 1,i32*%F,align 4
ret i8*%v
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb5nest__E_203(i8*inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i8**
%f=load i8*,i8**%e,align 8
store i8*%f,i8**%c,align 8
%g=call i8*@sml_alloc(i32 inreg 20)#0
%h=getelementptr inbounds i8,i8*%g,i64 -4
%i=bitcast i8*%h to i32*
store i32 1342177296,i32*%i,align 4
store i8*%g,i8**%d,align 8
%j=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%k=bitcast i8*%g to i8**
store i8*%j,i8**%k,align 8
%l=getelementptr inbounds i8,i8*%g,i64 8
%m=bitcast i8*%l to i32*
store i32%b,i32*%m,align 4
%n=getelementptr inbounds i8,i8*%g,i64 16
%o=bitcast i8*%n to i32*
store i32 1,i32*%o,align 4
%p=call i8*@sml_alloc(i32 inreg 28)#0
%q=getelementptr inbounds i8,i8*%p,i64 -4
%r=bitcast i8*%q to i32*
store i32 1342177304,i32*%r,align 4
%s=load i8*,i8**%d,align 8
%t=bitcast i8*%p to i8**
store i8*%s,i8**%t,align 8
%u=getelementptr inbounds i8,i8*%p,i64 8
%v=bitcast i8*%u to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32)*@_SMLLLN10TermFormat10FormatComb5nest__E_202 to void(...)*),void(...)**%v,align 8
%w=getelementptr inbounds i8,i8*%p,i64 16
%x=bitcast i8*%w to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLLLN10TermFormat10FormatComb5nest__E_844 to void(...)*),void(...)**%x,align 8
%y=getelementptr inbounds i8,i8*%p,i64 24
%z=bitcast i8*%y to i32*
store i32 -2147483647,i32*%z,align 4
ret i8*%p
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb5nest__E_204(i8*inreg%a)unnamed_addr#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=getelementptr inbounds i8,i8*%d,i64 -4
%f=bitcast i8*%e to i32*
store i32 1342177288,i32*%f,align 4
store i8*%d,i8**%c,align 8
%g=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%h=bitcast i8*%d to i8**
store i8*%g,i8**%h,align 8
%i=getelementptr inbounds i8,i8*%d,i64 8
%j=bitcast i8*%i to i32*
store i32 1,i32*%j,align 4
%k=call i8*@sml_alloc(i32 inreg 28)#0
%l=getelementptr inbounds i8,i8*%k,i64 -4
%m=bitcast i8*%l to i32*
store i32 1342177304,i32*%m,align 4
%n=load i8*,i8**%c,align 8
%o=bitcast i8*%k to i8**
store i8*%n,i8**%o,align 8
%p=getelementptr inbounds i8,i8*%k,i64 8
%q=bitcast i8*%p to void(...)**
store void(...)*bitcast(i8*(i8*,i32)*@_SMLLLN10TermFormat10FormatComb5nest__E_203 to void(...)*),void(...)**%q,align 8
%r=getelementptr inbounds i8,i8*%k,i64 16
%s=bitcast i8*%r to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb5nest__E_845 to void(...)*),void(...)**%s,align 8
%t=getelementptr inbounds i8,i8*%k,i64 24
%u=bitcast i8*%t to i32*
store i32 -2147483647,i32*%u,align 4
ret i8*%k
}
define internal fastcc i8*@_SMLLLN10TermFormat11intersperseE_206(i8*inreg%a,i8*inreg%b)unnamed_addr#2 gc"smlsharp"{
m:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%k,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%d,align 8
br label%k
k:
%l=phi i8*[%j,%i],[%b,%m]
%n=icmp eq i8*%l,null
br i1%n,label%o,label%q
o:
%p=phi i8*[null,%k],[%s,%q]
ret i8*%p
q:
%r=bitcast i8*%l to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%d,align 8
%t=getelementptr inbounds i8,i8*%l,i64 8
%u=bitcast i8*%t to i8**
%v=load i8*,i8**%u,align 8
%w=icmp eq i8*%v,null
br i1%w,label%o,label%x
x:
%y=load i8*,i8**%c,align 8
%z=call fastcc i8*@_SMLLLN10TermFormat11intersperseE_206(i8*inreg%y,i8*inreg%v)
store i8*%z,i8**%e,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%f,align 8
%D=getelementptr inbounds i8,i8*%A,i64 4
%E=bitcast i8*%D to i32*
store i32 0,i32*%E,align 1
%F=bitcast i8*%A to i32*
store i32 4,i32*%F,align 4
%G=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%H=getelementptr inbounds i8,i8*%A,i64 8
%I=bitcast i8*%H to i8**
store i8*%G,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%A,i64 16
%K=bitcast i8*%J to i32*
store i32 2,i32*%K,align 4
%L=call i8*@sml_alloc(i32 inreg 20)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32 1342177296,i32*%N,align 4
store i8*%L,i8**%c,align 8
%O=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%P=bitcast i8*%L to i8**
store i8*%O,i8**%P,align 8
%Q=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%R=getelementptr inbounds i8,i8*%L,i64 8
%S=bitcast i8*%R to i8**
store i8*%Q,i8**%S,align 8
%T=getelementptr inbounds i8,i8*%L,i64 16
%U=bitcast i8*%T to i32*
store i32 3,i32*%U,align 4
%V=call i8*@sml_alloc(i32 inreg 20)#0
%W=getelementptr inbounds i8,i8*%V,i64 -4
%X=bitcast i8*%W to i32*
store i32 1342177296,i32*%X,align 4
store i8*%V,i8**%e,align 8
%Y=getelementptr inbounds i8,i8*%V,i64 4
%Z=bitcast i8*%Y to i32*
store i32 0,i32*%Z,align 1
%aa=bitcast i8*%V to i32*
store i32 4,i32*%aa,align 4
%ab=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ac=getelementptr inbounds i8,i8*%V,i64 8
%ad=bitcast i8*%ac to i8**
store i8*%ab,i8**%ad,align 8
%ae=getelementptr inbounds i8,i8*%V,i64 16
%af=bitcast i8*%ae to i32*
store i32 2,i32*%af,align 4
%ag=call i8*@sml_alloc(i32 inreg 20)#0
%ah=getelementptr inbounds i8,i8*%ag,i64 -4
%ai=bitcast i8*%ah to i32*
store i32 1342177296,i32*%ai,align 4
%aj=load i8*,i8**%e,align 8
%ak=bitcast i8*%ag to i8**
store i8*%aj,i8**%ak,align 8
%al=load i8*,i8**%c,align 8
%am=getelementptr inbounds i8,i8*%ag,i64 8
%an=bitcast i8*%am to i8**
store i8*%al,i8**%an,align 8
%ao=getelementptr inbounds i8,i8*%ag,i64 16
%ap=bitcast i8*%ao to i32*
store i32 3,i32*%ap,align 4
ret i8*%ag
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_210(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_212(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%b,i8**%c,align 8
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=getelementptr inbounds i8,i8*%h,i64 4
%l=bitcast i8*%k to i32*
store i32 0,i32*%l,align 1
%m=bitcast i8*%h to i32*
store i32 4,i32*%m,align 4
%n=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%o=getelementptr inbounds i8,i8*%h,i64 8
%p=bitcast i8*%o to i8**
store i8*%n,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 2,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 20)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177296,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=load i8*,i8**%c,align 8
%y=getelementptr inbounds i8,i8*%s,i64 8
%z=bitcast i8*%y to i8**
store i8*%x,i8**%z,align 8
%A=getelementptr inbounds i8,i8*%s,i64 16
%B=bitcast i8*%A to i32*
store i32 3,i32*%B,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_213(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=bitcast i8**%d to i8***
%m=load i8**,i8***%l,align 8
%n=bitcast i8**%m to i8*
br label%o
o:
%p=phi i8*[%n,%k],[%a,%i]
%q=phi i8**[%m,%k],[%j,%i]
%r=load i8*,i8**%q,align 8
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%e,align 8
%x=getelementptr inbounds i8,i8*%p,i64 8
%y=bitcast i8*%x to i8**
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%d,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%f,align 8
%D=getelementptr inbounds i8,i8*%A,i64 4
%E=bitcast i8*%D to i32*
store i32 0,i32*%E,align 1
%F=bitcast i8*%A to i32*
store i32 4,i32*%F,align 4
%G=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%H=getelementptr inbounds i8,i8*%A,i64 8
%I=bitcast i8*%H to i8**
store i8*%G,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%A,i64 16
%K=bitcast i8*%J to i32*
store i32 2,i32*%K,align 4
%L=call i8*@sml_alloc(i32 inreg 20)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32 1342177296,i32*%N,align 4
%O=load i8*,i8**%f,align 8
%P=bitcast i8*%L to i8**
store i8*%O,i8**%P,align 8
%Q=load i8*,i8**%c,align 8
%R=getelementptr inbounds i8,i8*%L,i64 8
%S=bitcast i8*%R to i8**
store i8*%Q,i8**%S,align 8
%T=getelementptr inbounds i8,i8*%L,i64 16
%U=bitcast i8*%T to i32*
store i32 3,i32*%U,align 4
%V=load i8*,i8**%e,align 8
%W=tail call fastcc i8*%u(i8*inreg%V,i8*inreg%L)
ret i8*%W
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_214(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8**
br label%p
l:
call void@sml_check(i32 inreg%h)
%m=load i8*,i8**%d,align 8
%n=bitcast i8**%c to i8***
%o=load i8**,i8***%n,align 8
br label%p
p:
%q=phi i8**[%o,%l],[%k,%j]
%r=phi i8*[%m,%l],[%b,%j]
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%f,align 8
%x=load i8*,i8**%q,align 8
store i8*%x,i8**%d,align 8
%y=getelementptr inbounds i8*,i8**%q,i64 2
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%e,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%g,align 8
%D=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%E=bitcast i8*%A to i8**
store i8*%D,i8**%E,align 8
%F=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%G=getelementptr inbounds i8,i8*%A,i64 8
%H=bitcast i8*%G to i8**
store i8*%F,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%A,i64 16
%J=bitcast i8*%I to i32*
store i32 3,i32*%J,align 4
%K=call i8*@sml_alloc(i32 inreg 28)#0
%L=getelementptr inbounds i8,i8*%K,i64 -4
%M=bitcast i8*%L to i32*
store i32 1342177304,i32*%M,align 4
store i8*%K,i8**%d,align 8
%N=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%O=bitcast i8*%K to i8**
store i8*%N,i8**%O,align 8
%P=getelementptr inbounds i8,i8*%K,i64 8
%Q=bitcast i8*%P to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_213 to void(...)*),void(...)**%Q,align 8
%R=getelementptr inbounds i8,i8*%K,i64 16
%S=bitcast i8*%R to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_213 to void(...)*),void(...)**%S,align 8
%T=getelementptr inbounds i8,i8*%K,i64 24
%U=bitcast i8*%T to i32*
store i32 -2147483647,i32*%U,align 4
%V=load i8*,i8**%c,align 8
%W=getelementptr inbounds i8,i8*%V,i64 8
%X=bitcast i8*%W to i8**
%Y=load i8*,i8**%X,align 8
store i8*%Y,i8**%c,align 8
%Z=call i8*@sml_alloc(i32 inreg 20)#0
%aa=getelementptr inbounds i8,i8*%Z,i64 -4
%ab=bitcast i8*%aa to i32*
store i32 1342177296,i32*%ab,align 4
%ac=load i8*,i8**%d,align 8
%ad=bitcast i8*%Z to i8**
store i8*%ac,i8**%ad,align 8
%ae=load i8*,i8**%c,align 8
%af=getelementptr inbounds i8,i8*%Z,i64 8
%ag=bitcast i8*%af to i8**
store i8*%ae,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%Z,i64 16
%ai=bitcast i8*%ah to i32*
store i32 3,i32*%ai,align 4
%aj=load i8*,i8**%f,align 8
%ak=tail call fastcc i8*%u(i8*inreg%aj,i8*inreg%Z)
ret i8*%ak
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_215(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
store i8*%l,i8**%f,align 8
%o=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%r=getelementptr inbounds i8,i8*%l,i64 8
%s=bitcast i8*%r to i8**
store i8*%q,i8**%s,align 8
%t=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%u=getelementptr inbounds i8,i8*%l,i64 16
%v=bitcast i8*%u to i8**
store i8*%t,i8**%v,align 8
%w=getelementptr inbounds i8,i8*%l,i64 24
%x=bitcast i8*%w to i32*
store i32 7,i32*%x,align 4
%y=call i8*@sml_alloc(i32 inreg 28)#0
%z=getelementptr inbounds i8,i8*%y,i64 -4
%A=bitcast i8*%z to i32*
store i32 1342177304,i32*%A,align 4
%B=load i8*,i8**%f,align 8
%C=bitcast i8*%y to i8**
store i8*%B,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%y,i64 8
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_214 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%y,i64 16
%G=bitcast i8*%F to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_214 to void(...)*),void(...)**%G,align 8
%H=getelementptr inbounds i8,i8*%y,i64 24
%I=bitcast i8*%H to i32*
store i32 -2147483647,i32*%I,align 4
ret i8*%y
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_216(i8*inreg%a)#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i8**
%f=load i8*,i8**%e,align 8
store i8*%f,i8**%b,align 8
%g=getelementptr inbounds i8,i8*%a,i64 8
%h=bitcast i8*%g to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%c,align 8
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i8**
store i8*%o,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%j,i64 16
%s=bitcast i8*%r to i32*
store i32 3,i32*%s,align 4
%t=call i8*@sml_alloc(i32 inreg 28)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177304,i32*%v,align 4
%w=load i8*,i8**%d,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_215 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%t,i64 16
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_215 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%t,i64 24
%D=bitcast i8*%C to i32*
store i32 -2147483647,i32*%D,align 4
ret i8*%t
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_219(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=bitcast i8**%d to i8***
%m=load i8**,i8***%l,align 8
%n=bitcast i8**%m to i8*
br label%o
o:
%p=phi i8*[%n,%k],[%a,%i]
%q=phi i8**[%m,%k],[%j,%i]
%r=load i8*,i8**%q,align 8
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%e,align 8
%x=getelementptr inbounds i8,i8*%p,i64 8
%y=bitcast i8*%x to i8**
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%d,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%f,align 8
%D=getelementptr inbounds i8,i8*%A,i64 4
%E=bitcast i8*%D to i32*
store i32 0,i32*%E,align 1
%F=bitcast i8*%A to i32*
store i32 4,i32*%F,align 4
%G=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%H=getelementptr inbounds i8,i8*%A,i64 8
%I=bitcast i8*%H to i8**
store i8*%G,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%A,i64 16
%K=bitcast i8*%J to i32*
store i32 2,i32*%K,align 4
%L=call i8*@sml_alloc(i32 inreg 20)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32 1342177296,i32*%N,align 4
%O=load i8*,i8**%f,align 8
%P=bitcast i8*%L to i8**
store i8*%O,i8**%P,align 8
%Q=load i8*,i8**%c,align 8
%R=getelementptr inbounds i8,i8*%L,i64 8
%S=bitcast i8*%R to i8**
store i8*%Q,i8**%S,align 8
%T=getelementptr inbounds i8,i8*%L,i64 16
%U=bitcast i8*%T to i32*
store i32 3,i32*%U,align 4
%V=load i8*,i8**%e,align 8
%W=tail call fastcc i8*%u(i8*inreg%V,i8*inreg%L)
ret i8*%W
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_220(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8**
br label%p
l:
call void@sml_check(i32 inreg%h)
%m=load i8*,i8**%d,align 8
%n=bitcast i8**%c to i8***
%o=load i8**,i8***%n,align 8
br label%p
p:
%q=phi i8**[%o,%l],[%k,%j]
%r=phi i8*[%m,%l],[%b,%j]
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%f,align 8
%x=load i8*,i8**%q,align 8
store i8*%x,i8**%d,align 8
%y=getelementptr inbounds i8*,i8**%q,i64 2
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%e,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%g,align 8
%D=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%E=bitcast i8*%A to i8**
store i8*%D,i8**%E,align 8
%F=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%G=getelementptr inbounds i8,i8*%A,i64 8
%H=bitcast i8*%G to i8**
store i8*%F,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%A,i64 16
%J=bitcast i8*%I to i32*
store i32 3,i32*%J,align 4
%K=call i8*@sml_alloc(i32 inreg 28)#0
%L=getelementptr inbounds i8,i8*%K,i64 -4
%M=bitcast i8*%L to i32*
store i32 1342177304,i32*%M,align 4
store i8*%K,i8**%d,align 8
%N=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%O=bitcast i8*%K to i8**
store i8*%N,i8**%O,align 8
%P=getelementptr inbounds i8,i8*%K,i64 8
%Q=bitcast i8*%P to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_219 to void(...)*),void(...)**%Q,align 8
%R=getelementptr inbounds i8,i8*%K,i64 16
%S=bitcast i8*%R to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_219 to void(...)*),void(...)**%S,align 8
%T=getelementptr inbounds i8,i8*%K,i64 24
%U=bitcast i8*%T to i32*
store i32 -2147483647,i32*%U,align 4
%V=load i8*,i8**%c,align 8
%W=getelementptr inbounds i8,i8*%V,i64 8
%X=bitcast i8*%W to i8**
%Y=load i8*,i8**%X,align 8
store i8*%Y,i8**%c,align 8
%Z=call i8*@sml_alloc(i32 inreg 20)#0
%aa=getelementptr inbounds i8,i8*%Z,i64 -4
%ab=bitcast i8*%aa to i32*
store i32 1342177296,i32*%ab,align 4
%ac=load i8*,i8**%d,align 8
%ad=bitcast i8*%Z to i8**
store i8*%ac,i8**%ad,align 8
%ae=load i8*,i8**%c,align 8
%af=getelementptr inbounds i8,i8*%Z,i64 8
%ag=bitcast i8*%af to i8**
store i8*%ae,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%Z,i64 16
%ai=bitcast i8*%ah to i32*
store i32 3,i32*%ai,align 4
%aj=load i8*,i8**%f,align 8
%ak=tail call fastcc i8*%u(i8*inreg%aj,i8*inreg%Z)
ret i8*%ak
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_221(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
store i8*%l,i8**%f,align 8
%o=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%r=getelementptr inbounds i8,i8*%l,i64 8
%s=bitcast i8*%r to i8**
store i8*%q,i8**%s,align 8
%t=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%u=getelementptr inbounds i8,i8*%l,i64 16
%v=bitcast i8*%u to i8**
store i8*%t,i8**%v,align 8
%w=getelementptr inbounds i8,i8*%l,i64 24
%x=bitcast i8*%w to i32*
store i32 7,i32*%x,align 4
%y=call i8*@sml_alloc(i32 inreg 28)#0
%z=getelementptr inbounds i8,i8*%y,i64 -4
%A=bitcast i8*%z to i32*
store i32 1342177304,i32*%A,align 4
%B=load i8*,i8**%f,align 8
%C=bitcast i8*%y to i8**
store i8*%B,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%y,i64 8
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_220 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%y,i64 16
%G=bitcast i8*%F to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_220 to void(...)*),void(...)**%G,align 8
%H=getelementptr inbounds i8,i8*%y,i64 24
%I=bitcast i8*%H to i32*
store i32 -2147483647,i32*%I,align 4
ret i8*%y
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_222(i8*inreg%a)#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i8**
%f=load i8*,i8**%e,align 8
store i8*%f,i8**%b,align 8
%g=getelementptr inbounds i8,i8*%a,i64 8
%h=bitcast i8*%g to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%c,align 8
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i8**
store i8*%o,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%j,i64 16
%s=bitcast i8*%r to i32*
store i32 3,i32*%s,align 4
%t=call i8*@sml_alloc(i32 inreg 28)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177304,i32*%v,align 4
%w=load i8*,i8**%d,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_221 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%t,i64 16
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_221 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%t,i64 24
%D=bitcast i8*%C to i32*
store i32 -2147483647,i32*%D,align 4
ret i8*%t
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_224(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=bitcast i8*%h to i8**
%k=load i8*,i8**%j,align 8
%l=getelementptr inbounds i8,i8*%h,i64 8
%m=bitcast i8*%l to i8**
%n=load i8*,i8**%m,align 8
%o=getelementptr inbounds i8,i8*%n,i64 16
%p=bitcast i8*%o to i8*(i8*,i8*)**
%q=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%p,align 8
%r=bitcast i8*%n to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%b,align 8
%t=getelementptr inbounds i8,i8*%k,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%k to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
%A=tail call fastcc i8*%q(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_226(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=bitcast i8*%h to i8**
%k=load i8*,i8**%j,align 8
%l=getelementptr inbounds i8,i8*%h,i64 8
%m=bitcast i8*%l to i8**
%n=load i8*,i8**%m,align 8
%o=getelementptr inbounds i8,i8*%n,i64 16
%p=bitcast i8*%o to i8*(i8*,i8*)**
%q=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%p,align 8
%r=bitcast i8*%n to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%b,align 8
%t=getelementptr inbounds i8,i8*%k,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%k to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
%A=tail call fastcc i8*%q(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_228(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
o:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%m,label%k
k:
call void@sml_check(i32 inreg%i)
%l=load i8*,i8**%d,align 8
br label%m
m:
%n=phi i8*[%l,%k],[%a,%o]
%p=getelementptr inbounds i8,i8*%n,i64 8
%q=bitcast i8*%p to i8**
%r=load i8*,i8**%q,align 8
store i8*%r,i8**%e,align 8
%s=call i8*@sml_alloc(i32 inreg 12)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177288,i32*%u,align 4
store i8*%s,i8**%f,align 8
%v=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to i32*
store i32 1,i32*%y,align 4
%z=call i8*@sml_alloc(i32 inreg 28)#0
%A=getelementptr inbounds i8,i8*%z,i64 -4
%B=bitcast i8*%A to i32*
store i32 1342177304,i32*%B,align 4
store i8*%z,i8**%e,align 8
%C=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%D=bitcast i8*%z to i8**
store i8*%C,i8**%D,align 8
%E=getelementptr inbounds i8,i8*%z,i64 8
%F=bitcast i8*%E to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_212 to void(...)*),void(...)**%F,align 8
%G=getelementptr inbounds i8,i8*%z,i64 16
%H=bitcast i8*%G to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_212 to void(...)*),void(...)**%H,align 8
%I=getelementptr inbounds i8,i8*%z,i64 24
%J=bitcast i8*%I to i32*
store i32 -2147483647,i32*%J,align 4
%K=call i8*@sml_alloc(i32 inreg 20)#0
%L=getelementptr inbounds i8,i8*%K,i64 -4
%M=bitcast i8*%L to i32*
store i32 1342177296,i32*%M,align 4
%N=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%O=bitcast i8*%K to i8**
store i8*%N,i8**%O,align 8
%P=getelementptr inbounds i8,i8*%K,i64 8
%Q=bitcast i8*%P to i8**
store i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@t,i64 0,i32 2)to i8*),i8**%Q,align 8
%R=getelementptr inbounds i8,i8*%K,i64 16
%S=bitcast i8*%R to i32*
store i32 3,i32*%S,align 4
%T=call fastcc i8*@_SMLLLN10TermFormat10FormatComb6guard__E_186(i8*inreg%K)
%U=getelementptr inbounds i8,i8*%T,i64 16
%V=bitcast i8*%U to i8*(i8*,i8*)**
%W=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%V,align 8
%X=bitcast i8*%T to i8**
%Y=load i8*,i8**%X,align 8
%Z=call fastcc i8*%W(i8*inreg%Y,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,i32}>,<{[4x i8],i32,i8*,i32}>*@k,i64 0,i32 2)to i8*))
%aa=getelementptr inbounds i8,i8*%Z,i64 16
%ab=bitcast i8*%aa to i8*(i8*,i8*,i8*,i8*,i8*)**
%ac=load i8*(i8*,i8*,i8*,i8*,i8*)*,i8*(i8*,i8*,i8*,i8*,i8*)**%ab,align 8
%ad=bitcast i8*%Z to i8**
%ae=load i8*,i8**%ad,align 8
store i8*%ae,i8**%e,align 8
%af=call i8*@sml_alloc(i32 inreg 4)#0
%ag=bitcast i8*%af to i32*
%ah=getelementptr inbounds i8,i8*%af,i64 -4
%ai=bitcast i8*%ah to i32*
store i32 4,i32*%ai,align 4
store i8*%af,i8**%f,align 8
store i32 1,i32*%ag,align 4
%aj=call i8*@sml_alloc(i32 inreg 4)#0
%ak=bitcast i8*%aj to i32*
%al=getelementptr inbounds i8,i8*%aj,i64 -4
%am=bitcast i8*%al to i32*
store i32 4,i32*%am,align 4
store i8*%aj,i8**%g,align 8
store i32 8,i32*%ak,align 4
%an=call i8*@sml_alloc(i32 inreg 4)#0
%ao=bitcast i8*%an to i32*
%ap=getelementptr inbounds i8,i8*%an,i64 -4
%aq=bitcast i8*%ap to i32*
store i32 4,i32*%aq,align 4
store i8*%an,i8**%h,align 8
store i32 1,i32*%ao,align 4
%ar=call i8*@sml_alloc(i32 inreg 4)#0
%as=bitcast i8*%ar to i32*
%at=getelementptr inbounds i8,i8*%ar,i64 -4
%au=bitcast i8*%at to i32*
store i32 4,i32*%au,align 4
store i32 8,i32*%as,align 4
%av=load i8*,i8**%e,align 8
%aw=load i8*,i8**%f,align 8
%ax=load i8*,i8**%g,align 8
%ay=load i8*,i8**%h,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%f,align 8
store i8*null,i8**%g,align 8
store i8*null,i8**%h,align 8
%az=call fastcc i8*%ac(i8*inreg%av,i8*inreg%aw,i8*inreg%ax,i8*inreg%ay,i8*inreg%ar)
%aA=getelementptr inbounds i8,i8*%az,i64 16
%aB=bitcast i8*%aA to i8*(i8*,i8*)**
%aC=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aB,align 8
%aD=bitcast i8*%az to i8**
%aE=load i8*,i8**%aD,align 8
%aF=call fastcc i8*%aC(i8*inreg%aE,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@u,i64 0,i32 2)to i8*))
%aG=getelementptr inbounds i8,i8*%aF,i64 16
%aH=bitcast i8*%aG to i8*(i8*,i8*)**
%aI=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aH,align 8
%aJ=bitcast i8*%aF to i8**
%aK=load i8*,i8**%aJ,align 8
store i8*%aK,i8**%f,align 8
%aL=load i8*,i8**%d,align 8
%aM=getelementptr inbounds i8,i8*%aL,i64 16
%aN=bitcast i8*%aM to i8**
%aO=load i8*,i8**%aN,align 8
store i8*%aO,i8**%e,align 8
%aP=call i8*@sml_alloc(i32 inreg 20)#0
%aQ=getelementptr inbounds i8,i8*%aP,i64 -4
%aR=bitcast i8*%aQ to i32*
store i32 1342177296,i32*%aR,align 4
store i8*%aP,i8**%g,align 8
%aS=getelementptr inbounds i8,i8*%aP,i64 4
%aT=bitcast i8*%aS to i32*
store i32 0,i32*%aT,align 1
%aU=bitcast i8*%aP to i32*
store i32 4,i32*%aU,align 4
%aV=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aW=getelementptr inbounds i8,i8*%aP,i64 8
%aX=bitcast i8*%aW to i8**
store i8*%aV,i8**%aX,align 8
%aY=getelementptr inbounds i8,i8*%aP,i64 16
%aZ=bitcast i8*%aY to i32*
store i32 2,i32*%aZ,align 4
%a0=call i8*@sml_alloc(i32 inreg 20)#0
%a1=getelementptr inbounds i8,i8*%a0,i64 -4
%a2=bitcast i8*%a1 to i32*
store i32 1342177296,i32*%a2,align 4
store i8*%a0,i8**%e,align 8
%a3=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%a4=bitcast i8*%a0 to i8**
store i8*%a3,i8**%a4,align 8
%a5=getelementptr inbounds i8,i8*%a0,i64 8
%a6=bitcast i8*%a5 to i8**
store i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,i8*,i32}>,<{[4x i8],i32,i8*,i8*,i32}>*@bn,i64 0,i32 2)to i8*),i8**%a6,align 8
%a7=getelementptr inbounds i8,i8*%a0,i64 16
%a8=bitcast i8*%a7 to i32*
store i32 3,i32*%a8,align 4
%a9=load i8*,i8**%d,align 8
%ba=getelementptr inbounds i8,i8*%a9,i64 32
%bb=bitcast i8*%ba to i32*
%bc=load i32,i32*%bb,align 4
%bd=getelementptr inbounds i8,i8*%a9,i64 36
%be=bitcast i8*%bd to i32*
%bf=load i32,i32*%be,align 4
%bg=call fastcc i8*@_SMLFN4List3mapE(i32 inreg%bc,i32 inreg%bf,i32 inreg 1,i32 inreg 8)
%bh=getelementptr inbounds i8,i8*%bg,i64 16
%bi=bitcast i8*%bh to i8*(i8*,i8*)**
%bj=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bi,align 8
%bk=bitcast i8*%bg to i8**
%bl=load i8*,i8**%bk,align 8
%bm=bitcast i8**%d to i8***
%bn=load i8**,i8***%bm,align 8
%bo=load i8*,i8**%bn,align 8
%bp=call fastcc i8*%bj(i8*inreg%bl,i8*inreg%bo)
%bq=getelementptr inbounds i8,i8*%bp,i64 16
%br=bitcast i8*%bq to i8*(i8*,i8*)**
%bs=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%br,align 8
%bt=bitcast i8*%bp to i8**
%bu=load i8*,i8**%bt,align 8
%bv=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bw=call fastcc i8*%bs(i8*inreg%bu,i8*inreg%bv)
%bx=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%by=call fastcc i8*@_SMLLLN10TermFormat11intersperseE_206(i8*inreg%bx,i8*inreg%bw)
%bz=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%bA=call fastcc i8*%aI(i8*inreg%bz,i8*inreg%by)
%bB=getelementptr inbounds i8,i8*%bA,i64 16
%bC=bitcast i8*%bB to i8*(i8*,i8*)**
%bD=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bC,align 8
%bE=bitcast i8*%bA to i8**
%bF=load i8*,i8**%bE,align 8
%bG=call fastcc i8*%bD(i8*inreg%bF,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@v,i64 0,i32 2)to i8*))
%bH=getelementptr inbounds i8,i8*%bG,i64 16
%bI=bitcast i8*%bH to i8*(i8*,i8*)**
%bJ=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bI,align 8
%bK=bitcast i8*%bG to i8**
%bL=load i8*,i8**%bK,align 8
%bM=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bN=getelementptr inbounds i8,i8*%bM,i64 24
%bO=bitcast i8*%bN to i8**
%bP=load i8*,i8**%bO,align 8
%bQ=call fastcc i8*%bJ(i8*inreg%bL,i8*inreg%bP)
%bR=getelementptr inbounds i8,i8*%bQ,i64 16
%bS=bitcast i8*%bR to i8*(i8*,i8*)**
%bT=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bS,align 8
%bU=bitcast i8*%bQ to i8**
%bV=load i8*,i8**%bU,align 8
%bW=call fastcc i8*%bT(i8*inreg%bV,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@w,i64 0,i32 2)to i8*))
%bX=getelementptr inbounds i8,i8*%bW,i64 16
%bY=bitcast i8*%bX to i8*(i8*,i8*)**
%bZ=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bY,align 8
%b0=bitcast i8*%bW to i8**
%b1=load i8*,i8**%b0,align 8
%b2=tail call fastcc i8*%bZ(i8*inreg%b1,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@x,i64 0,i32 2)to i8*))
ret i8*%b2
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_229(i32 inreg%a,i32 inreg%b,i8*inreg%c)unnamed_addr#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
%i=bitcast i8*%c to i8**
%j=load i8*,i8**%i,align 8
store i8*%j,i8**%d,align 8
%k=getelementptr inbounds i8,i8*%c,i64 8
%l=bitcast i8*%k to i8**
%m=load i8*,i8**%l,align 8
store i8*%m,i8**%e,align 8
%n=getelementptr inbounds i8,i8*%c,i64 16
%o=bitcast i8*%n to i8**
%p=load i8*,i8**%o,align 8
store i8*%p,i8**%f,align 8
%q=getelementptr inbounds i8,i8*%c,i64 24
%r=bitcast i8*%q to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%g,align 8
%t=call i8*@sml_alloc(i32 inreg 44)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177320,i32*%v,align 4
store i8*%t,i8**%h,align 8
%w=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%z=getelementptr inbounds i8,i8*%t,i64 8
%A=bitcast i8*%z to i8**
store i8*%y,i8**%A,align 8
%B=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%C=getelementptr inbounds i8,i8*%t,i64 16
%D=bitcast i8*%C to i8**
store i8*%B,i8**%D,align 8
%E=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%F=getelementptr inbounds i8,i8*%t,i64 24
%G=bitcast i8*%F to i8**
store i8*%E,i8**%G,align 8
%H=getelementptr inbounds i8,i8*%t,i64 32
%I=bitcast i8*%H to i32*
store i32%a,i32*%I,align 4
%J=getelementptr inbounds i8,i8*%t,i64 36
%K=bitcast i8*%J to i32*
store i32%b,i32*%K,align 4
%L=getelementptr inbounds i8,i8*%t,i64 40
%M=bitcast i8*%L to i32*
store i32 15,i32*%M,align 4
%N=call i8*@sml_alloc(i32 inreg 28)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32 1342177304,i32*%P,align 4
%Q=load i8*,i8**%h,align 8
%R=bitcast i8*%N to i8**
store i8*%Q,i8**%R,align 8
%S=getelementptr inbounds i8,i8*%N,i64 8
%T=bitcast i8*%S to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_228 to void(...)*),void(...)**%T,align 8
%U=getelementptr inbounds i8,i8*%N,i64 16
%V=bitcast i8*%U to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_228 to void(...)*),void(...)**%V,align 8
%W=getelementptr inbounds i8,i8*%N,i64 24
%X=bitcast i8*%W to i32*
store i32 -2147483647,i32*%X,align 4
ret i8*%N
}
define internal fastcc i8*@_SMLLLN10TermFormat13formatAppListE_231(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
o:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%g,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%m,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%g,align 8
%l=load i8*,i8**%c,align 8
br label%m
m:
%n=phi i8*[%l,%j],[%b,%o]
%p=phi i8*[%k,%j],[%a,%o]
%q=bitcast i8*%p to i8**
%r=getelementptr inbounds i8,i8*%p,i64 12
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=add i32%t,-1
%v=sub i32 0,%t
%w=and i32%u,%v
%x=add i32%t,7
%y=add i32%x,%w
%z=and i32%y,-8
%A=bitcast i8*%p to i8***
%B=load i8**,i8***%A,align 8
%C=load i8*,i8**%B,align 8
store i8*%C,i8**%d,align 8
%D=load i8*,i8**%q,align 8
%E=getelementptr inbounds i8,i8*%D,i64 8
%F=bitcast i8*%E to i8**
%G=load i8*,i8**%F,align 8
store i8*%G,i8**%e,align 8
%H=load i8*,i8**%q,align 8
%I=getelementptr inbounds i8,i8*%H,i64 24
%J=bitcast i8*%I to i8**
%K=load i8*,i8**%J,align 8
store i8*%K,i8**%f,align 8
%L=icmp eq i8*%n,null
br i1%L,label%M,label%ai
M:
store i8*null,i8**%c,align 8
store i8*null,i8**%d,align 8
store i8*null,i8**%g,align 8
%N=call i8*@sml_alloc(i32 inreg 20)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32 1342177296,i32*%P,align 4
store i8*%N,i8**%c,align 8
%Q=getelementptr inbounds i8,i8*%N,i64 4
%R=bitcast i8*%Q to i32*
store i32 0,i32*%R,align 1
%S=bitcast i8*%N to i32*
store i32 4,i32*%S,align 4
%T=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%U=getelementptr inbounds i8,i8*%N,i64 8
%V=bitcast i8*%U to i8**
store i8*%T,i8**%V,align 8
%W=getelementptr inbounds i8,i8*%N,i64 16
%X=bitcast i8*%W to i32*
store i32 2,i32*%X,align 4
%Y=call i8*@sml_alloc(i32 inreg 20)#0
%Z=getelementptr inbounds i8,i8*%Y,i64 -4
%aa=bitcast i8*%Z to i32*
store i32 1342177296,i32*%aa,align 4
%ab=load i8*,i8**%c,align 8
%ac=bitcast i8*%Y to i8**
store i8*%ab,i8**%ac,align 8
%ad=load i8*,i8**%f,align 8
%ae=getelementptr inbounds i8,i8*%Y,i64 8
%af=bitcast i8*%ae to i8**
store i8*%ad,i8**%af,align 8
%ag=getelementptr inbounds i8,i8*%Y,i64 16
%ah=bitcast i8*%ag to i32*
store i32 3,i32*%ah,align 4
ret i8*%Y
ai:
store i8*null,i8**%e,align 8
store i8*null,i8**%f,align 8
%aj=getelementptr inbounds i8,i8*%p,i64 8
%ak=bitcast i8*%aj to i32*
%al=load i32,i32*%ak,align 4
%am=icmp eq i32%al,0
br i1%am,label%as,label%an
an:
%ao=sext i32%w to i64
%ap=getelementptr inbounds i8,i8*%n,i64%ao
%aq=bitcast i8*%ap to i8**
%ar=load i8*,i8**%aq,align 8
br label%az
as:
%at=call i8*@sml_alloc(i32 inreg%t)#0
%au=getelementptr inbounds i8,i8*%at,i64 -4
%av=bitcast i8*%au to i32*
store i32%t,i32*%av,align 4
%aw=load i8*,i8**%c,align 8
%ax=sext i32%w to i64
%ay=getelementptr inbounds i8,i8*%aw,i64%ax
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%at,i8*%ay,i32%t,i1 false)
br label%az
az:
%aA=phi i8*[%n,%an],[%aw,%as]
%aB=phi i8*[%ar,%an],[%at,%as]
%aC=sext i32%z to i64
%aD=getelementptr inbounds i8,i8*%aA,i64%aC
%aE=bitcast i8*%aD to i8**
%aF=load i8*,i8**%aE,align 8
%aG=icmp eq i8*%aF,null
br i1%aG,label%aH,label%aP
aH:
%aI=load i8*,i8**%d,align 8
%aJ=getelementptr inbounds i8,i8*%aI,i64 16
%aK=bitcast i8*%aJ to i8*(i8*,i8*)**
%aL=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aK,align 8
%aM=bitcast i8*%aI to i8**
%aN=load i8*,i8**%aM,align 8
%aO=tail call fastcc i8*%aL(i8*inreg%aN,i8*inreg%aB)
ret i8*%aO
aP:
store i8*null,i8**%d,align 8
%aQ=load i8*,i8**%g,align 8
%aR=getelementptr inbounds i8,i8*%aQ,i64 8
%aS=bitcast i8*%aR to i32*
%aT=load i32,i32*%aS,align 4
%aU=getelementptr inbounds i8,i8*%aQ,i64 12
%aV=bitcast i8*%aU to i32*
%aW=load i32,i32*%aV,align 4
store i8*null,i8**%g,align 8
%aX=bitcast i8*%aQ to i8**
%aY=load i8*,i8**%aX,align 8
%aZ=call fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_229(i32 inreg%aT,i32 inreg%aW,i8*inreg%aY)
%a0=getelementptr inbounds i8,i8*%aZ,i64 16
%a1=bitcast i8*%a0 to i8*(i8*,i8*)**
%a2=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a1,align 8
%a3=bitcast i8*%aZ to i8**
%a4=load i8*,i8**%a3,align 8
%a5=load i8*,i8**%c,align 8
%a6=tail call fastcc i8*%a2(i8*inreg%a4,i8*inreg%a5)
ret i8*%a6
}
define internal fastcc i8*@_SMLLLN10TermFormat13formatAppListE_232(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat13formatAppListE_231 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat13formatAppListE_231 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat13formatAppListE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat13formatAppListE_232 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat13formatAppListE_232 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLLN10TermFormat13formatSeqListE_235(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
m:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%k,label%h
h:
call void@sml_check(i32 inreg%f)
%i=load i8*,i8**%e,align 8
%j=load i8*,i8**%c,align 8
br label%k
k:
%l=phi i8*[%j,%h],[%b,%m]
%n=phi i8*[%i,%h],[%a,%m]
%o=getelementptr inbounds i8,i8*%n,i64 12
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=add i32%q,-1
%s=sub i32 0,%q
%t=and i32%r,%s
%u=add i32%q,7
%v=add i32%u,%t
%w=and i32%v,-8
%x=bitcast i8*%n to i8***
%y=load i8**,i8***%x,align 8
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%d,align 8
%A=icmp eq i8*%l,null
br i1%A,label%B,label%C
B:
ret i8*null
C:
%D=getelementptr inbounds i8,i8*%n,i64 8
%E=bitcast i8*%D to i32*
%F=load i32,i32*%E,align 4
%G=icmp eq i32%F,0
br i1%G,label%M,label%H
H:
%I=sext i32%t to i64
%J=getelementptr inbounds i8,i8*%l,i64%I
%K=bitcast i8*%J to i8**
%L=load i8*,i8**%K,align 8
br label%T
M:
%N=call i8*@sml_alloc(i32 inreg%q)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32%q,i32*%P,align 4
%Q=load i8*,i8**%c,align 8
%R=sext i32%t to i64
%S=getelementptr inbounds i8,i8*%Q,i64%R
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%N,i8*%S,i32%q,i1 false)
br label%T
T:
%U=phi i8*[%l,%H],[%Q,%M]
%V=phi i8*[%L,%H],[%N,%M]
%W=sext i32%w to i64
%X=getelementptr inbounds i8,i8*%U,i64%W
%Y=bitcast i8*%X to i8**
%Z=load i8*,i8**%Y,align 8
%aa=icmp eq i8*%Z,null
br i1%aa,label%ab,label%aj
ab:
%ac=load i8*,i8**%d,align 8
%ad=getelementptr inbounds i8,i8*%ac,i64 16
%ae=bitcast i8*%ad to i8*(i8*,i8*)**
%af=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ae,align 8
%ag=bitcast i8*%ac to i8**
%ah=load i8*,i8**%ag,align 8
%ai=tail call fastcc i8*%af(i8*inreg%ah,i8*inreg%V)
ret i8*%ai
aj:
store i8*null,i8**%d,align 8
%ak=load i8*,i8**%e,align 8
%al=getelementptr inbounds i8,i8*%ak,i64 8
%am=bitcast i8*%al to i32*
%an=load i32,i32*%am,align 4
%ao=getelementptr inbounds i8,i8*%ak,i64 12
%ap=bitcast i8*%ao to i32*
%aq=load i32,i32*%ap,align 4
store i8*null,i8**%e,align 8
%ar=bitcast i8*%ak to i8**
%as=load i8*,i8**%ar,align 8
%at=call fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_229(i32 inreg%an,i32 inreg%aq,i8*inreg%as)
%au=getelementptr inbounds i8,i8*%at,i64 16
%av=bitcast i8*%au to i8*(i8*,i8*)**
%aw=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%av,align 8
%ax=bitcast i8*%at to i8**
%ay=load i8*,i8**%ax,align 8
%az=load i8*,i8**%c,align 8
%aA=tail call fastcc i8*%aw(i8*inreg%ay,i8*inreg%az)
ret i8*%aA
}
define internal fastcc i8*@_SMLLLN10TermFormat13formatSeqListE_236(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat13formatSeqListE_235 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat13formatSeqListE_235 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat13formatSeqListE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat13formatSeqListE_236 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat13formatSeqListE_236 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatOptionalListE_239(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%c,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%b,%k]
%l=icmp eq i8*%j,null
br i1%l,label%m,label%n
m:
ret i8*null
n:
%o=load i8*,i8**%d,align 8
%p=getelementptr inbounds i8,i8*%o,i64 8
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=getelementptr inbounds i8,i8*%o,i64 12
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
store i8*null,i8**%d,align 8
%v=bitcast i8*%o to i8**
%w=load i8*,i8**%v,align 8
%x=call fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_229(i32 inreg%r,i32 inreg%u,i8*inreg%w)
%y=getelementptr inbounds i8,i8*%x,i64 16
%z=bitcast i8*%y to i8*(i8*,i8*)**
%A=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%z,align 8
%B=bitcast i8*%x to i8**
%C=load i8*,i8**%B,align 8
%D=load i8*,i8**%c,align 8
%E=tail call fastcc i8*%A(i8*inreg%C,i8*inreg%D)
ret i8*%E
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatOptionalListE_240(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatOptionalListE_239 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatOptionalListE_239 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat18formatOptionalListE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatOptionalListE_240 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatOptionalListE_240 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatDeclListE_243(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%h,label%j
h:
%i=bitcast i8*%a to i8**
br label%n
j:
call void@sml_check(i32 inreg%f)
%k=bitcast i8**%d to i8***
%l=load i8**,i8***%k,align 8
%m=load i8*,i8**%c,align 8
br label%n
n:
%o=phi i8*[%m,%j],[%b,%h]
%p=phi i8**[%l,%j],[%i,%h]
%q=load i8*,i8**%p,align 8
%r=getelementptr inbounds i8,i8*%q,i64 16
%s=bitcast i8*%r to i8*(i8*,i8*)**
%t=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%s,align 8
%u=bitcast i8*%q to i8**
%v=load i8*,i8**%u,align 8
store i8*null,i8**%c,align 8
%w=call fastcc i8*%t(i8*inreg%v,i8*inreg%o)
store i8*%w,i8**%c,align 8
%x=load i8*,i8**%d,align 8
%y=getelementptr inbounds i8,i8*%x,i64 8
%z=bitcast i8*%y to i8**
%A=load i8*,i8**%z,align 8
store i8*%A,i8**%d,align 8
%B=call i8*@sml_alloc(i32 inreg 20)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177296,i32*%D,align 4
store i8*%B,i8**%e,align 8
%E=getelementptr inbounds i8,i8*%B,i64 4
%F=bitcast i8*%E to i32*
store i32 0,i32*%F,align 1
%G=bitcast i8*%B to i32*
store i32 4,i32*%G,align 4
%H=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%I=getelementptr inbounds i8,i8*%B,i64 8
%J=bitcast i8*%I to i8**
store i8*%H,i8**%J,align 8
%K=getelementptr inbounds i8,i8*%B,i64 16
%L=bitcast i8*%K to i32*
store i32 2,i32*%L,align 4
%M=call i8*@sml_alloc(i32 inreg 20)#0
%N=getelementptr inbounds i8,i8*%M,i64 -4
%O=bitcast i8*%N to i32*
store i32 1342177296,i32*%O,align 4
store i8*%M,i8**%d,align 8
%P=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%Q=bitcast i8*%M to i8**
store i8*%P,i8**%Q,align 8
%R=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%S=getelementptr inbounds i8,i8*%M,i64 8
%T=bitcast i8*%S to i8**
store i8*%R,i8**%T,align 8
%U=getelementptr inbounds i8,i8*%M,i64 16
%V=bitcast i8*%U to i32*
store i32 3,i32*%V,align 4
%W=call i8*@sml_alloc(i32 inreg 20)#0
%X=bitcast i8*%W to i32*
%Y=getelementptr inbounds i8,i8*%W,i64 -4
%Z=bitcast i8*%Y to i32*
store i32 1342177296,i32*%Z,align 4
%aa=getelementptr inbounds i8,i8*%W,i64 4
%ab=bitcast i8*%aa to i32*
store i32 0,i32*%ab,align 1
store i32 4,i32*%X,align 4
%ac=load i8*,i8**%d,align 8
%ad=getelementptr inbounds i8,i8*%W,i64 8
%ae=bitcast i8*%ad to i8**
store i8*%ac,i8**%ae,align 8
%af=getelementptr inbounds i8,i8*%W,i64 16
%ag=bitcast i8*%af to i32*
store i32 2,i32*%ag,align 4
ret i8*%W
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatDeclListE_244(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
q:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
store i8*%a,i8**%g,align 8
store i8*%b,i8**%c,align 8
%j=load atomic i32,i32*@sml_check_flag unordered,align 4
%k=icmp eq i32%j,0
br i1%k,label%o,label%l
l:
call void@sml_check(i32 inreg%j)
%m=load i8*,i8**%g,align 8
%n=load i8*,i8**%c,align 8
br label%o
o:
%p=phi i8*[%n,%l],[%b,%q]
%r=phi i8*[%m,%l],[%a,%q]
%s=bitcast i8*%r to i8**
%t=getelementptr inbounds i8,i8*%r,i64 12
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=add i32%v,-1
%x=sub i32 0,%v
%y=and i32%w,%x
%z=add i32%v,7
%A=add i32%z,%y
%B=and i32%A,-8
%C=bitcast i8*%r to i8***
%D=load i8**,i8***%C,align 8
%E=load i8*,i8**%D,align 8
store i8*%E,i8**%d,align 8
%F=load i8*,i8**%s,align 8
%G=getelementptr inbounds i8,i8*%F,i64 8
%H=bitcast i8*%G to i8**
%I=load i8*,i8**%H,align 8
store i8*%I,i8**%e,align 8
%J=load i8*,i8**%s,align 8
%K=getelementptr inbounds i8,i8*%J,i64 16
%L=bitcast i8*%K to i8**
%M=load i8*,i8**%L,align 8
store i8*%M,i8**%f,align 8
%N=icmp eq i8*%p,null
br i1%N,label%O,label%P
O:
ret i8*null
P:
%Q=getelementptr inbounds i8,i8*%r,i64 8
%R=bitcast i8*%Q to i32*
%S=load i32,i32*%R,align 4
%T=icmp eq i32%S,0
br i1%T,label%Z,label%U
U:
%V=sext i32%y to i64
%W=getelementptr inbounds i8,i8*%p,i64%V
%X=bitcast i8*%W to i8**
%Y=load i8*,i8**%X,align 8
br label%ah
Z:
%aa=call i8*@sml_alloc(i32 inreg%v)#0
%ab=getelementptr inbounds i8,i8*%aa,i64 -4
%ac=bitcast i8*%ab to i32*
store i32%v,i32*%ac,align 4
%ad=load i8*,i8**%c,align 8
%ae=sext i32%y to i64
%af=getelementptr inbounds i8,i8*%ad,i64%ae
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aa,i8*%af,i32%v,i1 false)
%ag=load i8*,i8**%d,align 8
br label%ah
ah:
%ai=phi i8*[%E,%U],[%ag,%Z]
%aj=phi i8*[%p,%U],[%ad,%Z]
%ak=phi i8*[%Y,%U],[%aa,%Z]
%al=sext i32%B to i64
%am=getelementptr inbounds i8,i8*%aj,i64%al
%an=bitcast i8*%am to i8**
%ao=load i8*,i8**%an,align 8
store i8*%ao,i8**%c,align 8
%ap=getelementptr inbounds i8,i8*%ai,i64 16
%aq=bitcast i8*%ap to i8*(i8*,i8*)**
%ar=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aq,align 8
%as=bitcast i8*%ai to i8**
%at=load i8*,i8**%as,align 8
%au=call fastcc i8*%ar(i8*inreg%at,i8*inreg%ak)
store i8*%au,i8**%h,align 8
%av=call i8*@sml_alloc(i32 inreg 20)#0
%aw=getelementptr inbounds i8,i8*%av,i64 -4
%ax=bitcast i8*%aw to i32*
store i32 1342177296,i32*%ax,align 4
store i8*%av,i8**%i,align 8
%ay=getelementptr inbounds i8,i8*%av,i64 4
%az=bitcast i8*%ay to i32*
store i32 0,i32*%az,align 1
%aA=bitcast i8*%av to i32*
store i32 4,i32*%aA,align 4
%aB=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%aC=getelementptr inbounds i8,i8*%av,i64 8
%aD=bitcast i8*%aC to i8**
store i8*%aB,i8**%aD,align 8
%aE=getelementptr inbounds i8,i8*%av,i64 16
%aF=bitcast i8*%aE to i32*
store i32 2,i32*%aF,align 4
%aG=load i8*,i8**%g,align 8
%aH=getelementptr inbounds i8,i8*%aG,i64 8
%aI=bitcast i8*%aH to i32*
%aJ=load i32,i32*%aI,align 4
store i8*null,i8**%g,align 8
%aK=getelementptr inbounds i8,i8*%aG,i64 12
%aL=bitcast i8*%aK to i32*
%aM=load i32,i32*%aL,align 4
%aN=call fastcc i8*@_SMLFN4List3mapE(i32 inreg%aJ,i32 inreg%aM,i32 inreg 1,i32 inreg 8)
%aO=getelementptr inbounds i8,i8*%aN,i64 16
%aP=bitcast i8*%aO to i8*(i8*,i8*)**
%aQ=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aP,align 8
%aR=bitcast i8*%aN to i8**
%aS=load i8*,i8**%aR,align 8
store i8*%aS,i8**%g,align 8
%aT=call i8*@sml_alloc(i32 inreg 20)#0
%aU=getelementptr inbounds i8,i8*%aT,i64 -4
%aV=bitcast i8*%aU to i32*
store i32 1342177296,i32*%aV,align 4
store i8*%aT,i8**%h,align 8
%aW=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aX=bitcast i8*%aT to i8**
store i8*%aW,i8**%aX,align 8
%aY=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%aZ=getelementptr inbounds i8,i8*%aT,i64 8
%a0=bitcast i8*%aZ to i8**
store i8*%aY,i8**%a0,align 8
%a1=getelementptr inbounds i8,i8*%aT,i64 16
%a2=bitcast i8*%a1 to i32*
store i32 3,i32*%a2,align 4
%a3=call i8*@sml_alloc(i32 inreg 28)#0
%a4=getelementptr inbounds i8,i8*%a3,i64 -4
%a5=bitcast i8*%a4 to i32*
store i32 1342177304,i32*%a5,align 4
%a6=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%a7=bitcast i8*%a3 to i8**
store i8*%a6,i8**%a7,align 8
%a8=getelementptr inbounds i8,i8*%a3,i64 8
%a9=bitcast i8*%a8 to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatDeclListE_243 to void(...)*),void(...)**%a9,align 8
%ba=getelementptr inbounds i8,i8*%a3,i64 16
%bb=bitcast i8*%ba to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatDeclListE_243 to void(...)*),void(...)**%bb,align 8
%bc=getelementptr inbounds i8,i8*%a3,i64 24
%bd=bitcast i8*%bc to i32*
store i32 1,i32*%bd,align 4
%be=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%bf=call fastcc i8*%aQ(i8*inreg%be,i8*inreg%a3)
%bg=getelementptr inbounds i8,i8*%bf,i64 16
%bh=bitcast i8*%bg to i8*(i8*,i8*)**
%bi=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bh,align 8
%bj=bitcast i8*%bf to i8**
%bk=load i8*,i8**%bj,align 8
%bl=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bm=call fastcc i8*%bi(i8*inreg%bk,i8*inreg%bl)
store i8*%bm,i8**%d,align 8
%bn=call i8*@sml_alloc(i32 inreg 20)#0
%bo=getelementptr inbounds i8,i8*%bn,i64 -4
%bp=bitcast i8*%bo to i32*
store i32 1342177296,i32*%bp,align 4
store i8*%bn,i8**%c,align 8
%bq=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%br=bitcast i8*%bn to i8**
store i8*%bq,i8**%br,align 8
%bs=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bt=getelementptr inbounds i8,i8*%bn,i64 8
%bu=bitcast i8*%bt to i8**
store i8*%bs,i8**%bu,align 8
%bv=getelementptr inbounds i8,i8*%bn,i64 16
%bw=bitcast i8*%bv to i32*
store i32 3,i32*%bw,align 4
%bx=call i8*@sml_alloc(i32 inreg 20)#0
%by=getelementptr inbounds i8,i8*%bx,i64 -4
%bz=bitcast i8*%by to i32*
store i32 1342177296,i32*%bz,align 4
store i8*%bx,i8**%d,align 8
%bA=getelementptr inbounds i8,i8*%bx,i64 4
%bB=bitcast i8*%bA to i32*
store i32 0,i32*%bB,align 1
%bC=bitcast i8*%bx to i32*
store i32 4,i32*%bC,align 4
%bD=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bE=getelementptr inbounds i8,i8*%bx,i64 8
%bF=bitcast i8*%bE to i8**
store i8*%bD,i8**%bF,align 8
%bG=getelementptr inbounds i8,i8*%bx,i64 16
%bH=bitcast i8*%bG to i32*
store i32 2,i32*%bH,align 4
%bI=call i8*@sml_alloc(i32 inreg 20)#0
%bJ=getelementptr inbounds i8,i8*%bI,i64 -4
%bK=bitcast i8*%bJ to i32*
store i32 1342177296,i32*%bK,align 4
%bL=load i8*,i8**%d,align 8
%bM=bitcast i8*%bI to i8**
store i8*%bL,i8**%bM,align 8
%bN=load i8*,i8**%c,align 8
%bO=getelementptr inbounds i8,i8*%bI,i64 8
%bP=bitcast i8*%bO to i8**
store i8*%bN,i8**%bP,align 8
%bQ=getelementptr inbounds i8,i8*%bI,i64 16
%bR=bitcast i8*%bQ to i32*
store i32 3,i32*%bR,align 4
ret i8*%bI
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatDeclListE_245(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatDeclListE_244 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatDeclListE_244 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat14formatDeclListE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatDeclListE_245 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatDeclListE_245 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatCaseListE_248(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
m:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%k,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%d,align 8
br label%k
k:
%l=phi i8*[%j,%i],[%a,%m]
%n=getelementptr inbounds i8,i8*%l,i64 20
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=add i32%p,-1
%r=sub i32 0,%p
%s=and i32%q,%r
%t=add i32%p,7
%u=add i32%t,%s
%v=and i32%u,-8
%w=getelementptr inbounds i8,i8*%l,i64 16
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=icmp eq i32%y,0
br i1%z,label%H,label%A
A:
%B=bitcast i8*%l to i8**
%C=load i8*,i8**%c,align 8
%D=sext i32%s to i64
%E=getelementptr inbounds i8,i8*%C,i64%D
%F=bitcast i8*%E to i8**
%G=load i8*,i8**%F,align 8
br label%Q
H:
%I=call i8*@sml_alloc(i32 inreg%p)#0
%J=getelementptr inbounds i8,i8*%I,i64 -4
%K=bitcast i8*%J to i32*
store i32%p,i32*%K,align 4
%L=load i8*,i8**%c,align 8
%M=sext i32%s to i64
%N=getelementptr inbounds i8,i8*%L,i64%M
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%I,i8*%N,i32%p,i1 false)
%O=bitcast i8**%d to i8***
%P=load i8**,i8***%O,align 8
br label%Q
Q:
%R=phi i8**[%B,%A],[%P,%H]
%S=phi i8*[%C,%A],[%L,%H]
%T=phi i8*[%G,%A],[%I,%H]
%U=sext i32%v to i64
%V=getelementptr inbounds i8,i8*%S,i64%U
%W=bitcast i8*%V to i8**
%X=load i8*,i8**%W,align 8
store i8*%X,i8**%c,align 8
%Y=load i8*,i8**%R,align 8
%Z=getelementptr inbounds i8,i8*%Y,i64 16
%aa=bitcast i8*%Z to i8*(i8*,i8*)**
%ab=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aa,align 8
%ac=bitcast i8*%Y to i8**
%ad=load i8*,i8**%ac,align 8
%ae=call fastcc i8*%ab(i8*inreg%ad,i8*inreg%T)
store i8*%ae,i8**%e,align 8
%af=call i8*@sml_alloc(i32 inreg 20)#0
%ag=getelementptr inbounds i8,i8*%af,i64 -4
%ah=bitcast i8*%ag to i32*
store i32 1342177296,i32*%ah,align 4
store i8*%af,i8**%f,align 8
%ai=getelementptr inbounds i8,i8*%af,i64 4
%aj=bitcast i8*%ai to i32*
store i32 0,i32*%aj,align 1
%ak=bitcast i8*%af to i32*
store i32 4,i32*%ak,align 4
%al=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%am=getelementptr inbounds i8,i8*%af,i64 8
%an=bitcast i8*%am to i8**
store i8*%al,i8**%an,align 8
%ao=getelementptr inbounds i8,i8*%af,i64 16
%ap=bitcast i8*%ao to i32*
store i32 2,i32*%ap,align 4
%aq=load i8*,i8**%d,align 8
%ar=getelementptr inbounds i8,i8*%aq,i64 8
%as=bitcast i8*%ar to i8**
%at=load i8*,i8**%as,align 8
store i8*%at,i8**%d,align 8
%au=call i8*@sml_alloc(i32 inreg 20)#0
%av=getelementptr inbounds i8,i8*%au,i64 -4
%aw=bitcast i8*%av to i32*
store i32 1342177296,i32*%aw,align 4
store i8*%au,i8**%e,align 8
%ax=getelementptr inbounds i8,i8*%au,i64 4
%ay=bitcast i8*%ax to i32*
store i32 0,i32*%ay,align 1
%az=bitcast i8*%au to i32*
store i32 4,i32*%az,align 4
%aA=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aB=getelementptr inbounds i8,i8*%au,i64 8
%aC=bitcast i8*%aB to i8**
store i8*%aA,i8**%aC,align 8
%aD=getelementptr inbounds i8,i8*%au,i64 16
%aE=bitcast i8*%aD to i32*
store i32 2,i32*%aE,align 4
%aF=call i8*@sml_alloc(i32 inreg 20)#0
%aG=getelementptr inbounds i8,i8*%aF,i64 -4
%aH=bitcast i8*%aG to i32*
store i32 1342177296,i32*%aH,align 4
store i8*%aF,i8**%d,align 8
%aI=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aJ=bitcast i8*%aF to i8**
store i8*%aI,i8**%aJ,align 8
%aK=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aL=getelementptr inbounds i8,i8*%aF,i64 8
%aM=bitcast i8*%aL to i8**
store i8*%aK,i8**%aM,align 8
%aN=getelementptr inbounds i8,i8*%aF,i64 16
%aO=bitcast i8*%aN to i32*
store i32 3,i32*%aO,align 4
%aP=call i8*@sml_alloc(i32 inreg 20)#0
%aQ=getelementptr inbounds i8,i8*%aP,i64 -4
%aR=bitcast i8*%aQ to i32*
store i32 1342177296,i32*%aR,align 4
%aS=load i8*,i8**%f,align 8
%aT=bitcast i8*%aP to i8**
store i8*%aS,i8**%aT,align 8
%aU=load i8*,i8**%d,align 8
%aV=getelementptr inbounds i8,i8*%aP,i64 8
%aW=bitcast i8*%aV to i8**
store i8*%aU,i8**%aW,align 8
%aX=getelementptr inbounds i8,i8*%aP,i64 16
%aY=bitcast i8*%aX to i32*
store i32 3,i32*%aY,align 4
ret i8*%aP
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatCaseListE_249(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
store i8*%a,i8**%h,align 8
store i8*%b,i8**%c,align 8
%j=load atomic i32,i32*@sml_check_flag unordered,align 4
%k=icmp eq i32%j,0
br i1%k,label%l,label%p
l:
%m=bitcast i8*%a to i8***
%n=bitcast i8*%a to i8**
%o=bitcast i8*%a to i8**
br label%v
p:
call void@sml_check(i32 inreg%j)
%q=bitcast i8**%h to i8****
%r=load i8***,i8****%q,align 8
%s=bitcast i8***%r to i8**
%t=load i8*,i8**%c,align 8
%u=bitcast i8***%r to i8*
br label%v
v:
%w=phi i8**[%o,%l],[%s,%p]
%x=phi i8*[%a,%l],[%u,%p]
%y=phi i8*[%b,%l],[%t,%p]
%z=phi i8**[%n,%l],[%s,%p]
%A=phi i8***[%m,%l],[%r,%p]
%B=load i8**,i8***%A,align 8
%C=load i8*,i8**%B,align 8
store i8*%C,i8**%d,align 8
%D=load i8*,i8**%w,align 8
%E=getelementptr inbounds i8,i8*%D,i64 8
%F=bitcast i8*%E to i8**
%G=load i8*,i8**%F,align 8
store i8*%G,i8**%e,align 8
%H=load i8*,i8**%z,align 8
%I=getelementptr inbounds i8,i8*%H,i64 16
%J=bitcast i8*%I to i8**
%K=load i8*,i8**%J,align 8
store i8*%K,i8**%f,align 8
%L=load i8*,i8**%z,align 8
%M=getelementptr inbounds i8,i8*%L,i64 24
%N=bitcast i8*%M to i8**
%O=load i8*,i8**%N,align 8
store i8*%O,i8**%g,align 8
%P=icmp eq i8*%y,null
br i1%P,label%Q,label%am
Q:
store i8*null,i8**%c,align 8
store i8*null,i8**%d,align 8
store i8*null,i8**%f,align 8
store i8*null,i8**%h,align 8
%R=call i8*@sml_alloc(i32 inreg 20)#0
%S=getelementptr inbounds i8,i8*%R,i64 -4
%T=bitcast i8*%S to i32*
store i32 1342177296,i32*%T,align 4
store i8*%R,i8**%c,align 8
%U=getelementptr inbounds i8,i8*%R,i64 4
%V=bitcast i8*%U to i32*
store i32 0,i32*%V,align 1
%W=bitcast i8*%R to i32*
store i32 4,i32*%W,align 4
%X=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%Y=getelementptr inbounds i8,i8*%R,i64 8
%Z=bitcast i8*%Y to i8**
store i8*%X,i8**%Z,align 8
%aa=getelementptr inbounds i8,i8*%R,i64 16
%ab=bitcast i8*%aa to i32*
store i32 2,i32*%ab,align 4
%ac=call i8*@sml_alloc(i32 inreg 20)#0
%ad=getelementptr inbounds i8,i8*%ac,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 1342177296,i32*%ae,align 4
%af=load i8*,i8**%c,align 8
%ag=bitcast i8*%ac to i8**
store i8*%af,i8**%ag,align 8
%ah=load i8*,i8**%g,align 8
%ai=getelementptr inbounds i8,i8*%ac,i64 8
%aj=bitcast i8*%ai to i8**
store i8*%ah,i8**%aj,align 8
%ak=getelementptr inbounds i8,i8*%ac,i64 16
%al=bitcast i8*%ak to i32*
store i32 3,i32*%al,align 4
ret i8*%ac
am:
%an=getelementptr inbounds i8,i8*%x,i64 8
%ao=bitcast i8*%an to i32*
%ap=load i32,i32*%ao,align 4
%aq=getelementptr inbounds i8,i8*%x,i64 12
%ar=bitcast i8*%aq to i32*
%as=load i32,i32*%ar,align 4
%at=call fastcc i8*@_SMLFN4List5foldrE(i32 inreg%ap,i32 inreg%as,i32 inreg 1,i32 inreg 8)
%au=getelementptr inbounds i8,i8*%at,i64 16
%av=bitcast i8*%au to i8*(i8*,i8*)**
%aw=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%av,align 8
%ax=bitcast i8*%at to i8**
%ay=load i8*,i8**%ax,align 8
store i8*%ay,i8**%i,align 8
%az=load i8*,i8**%h,align 8
%aA=getelementptr inbounds i8,i8*%az,i64 8
%aB=bitcast i8*%aA to i32*
%aC=load i32,i32*%aB,align 4
store i8*null,i8**%h,align 8
%aD=getelementptr inbounds i8,i8*%az,i64 12
%aE=bitcast i8*%aD to i32*
%aF=load i32,i32*%aE,align 4
%aG=call i8*@sml_alloc(i32 inreg 28)#0
%aH=getelementptr inbounds i8,i8*%aG,i64 -4
%aI=bitcast i8*%aH to i32*
store i32 1342177304,i32*%aI,align 4
store i8*%aG,i8**%h,align 8
%aJ=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aK=bitcast i8*%aG to i8**
store i8*%aJ,i8**%aK,align 8
%aL=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%aM=getelementptr inbounds i8,i8*%aG,i64 8
%aN=bitcast i8*%aM to i8**
store i8*%aL,i8**%aN,align 8
%aO=getelementptr inbounds i8,i8*%aG,i64 16
%aP=bitcast i8*%aO to i32*
store i32%aC,i32*%aP,align 4
%aQ=getelementptr inbounds i8,i8*%aG,i64 20
%aR=bitcast i8*%aQ to i32*
store i32%aF,i32*%aR,align 4
%aS=getelementptr inbounds i8,i8*%aG,i64 24
%aT=bitcast i8*%aS to i32*
store i32 3,i32*%aT,align 4
%aU=call i8*@sml_alloc(i32 inreg 28)#0
%aV=getelementptr inbounds i8,i8*%aU,i64 -4
%aW=bitcast i8*%aV to i32*
store i32 1342177304,i32*%aW,align 4
%aX=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%aY=bitcast i8*%aU to i8**
store i8*%aX,i8**%aY,align 8
%aZ=getelementptr inbounds i8,i8*%aU,i64 8
%a0=bitcast i8*%aZ to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatCaseListE_248 to void(...)*),void(...)**%a0,align 8
%a1=getelementptr inbounds i8,i8*%aU,i64 16
%a2=bitcast i8*%a1 to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatCaseListE_248 to void(...)*),void(...)**%a2,align 8
%a3=getelementptr inbounds i8,i8*%aU,i64 24
%a4=bitcast i8*%a3 to i32*
store i32 -2147483647,i32*%a4,align 4
%a5=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%a6=call fastcc i8*%aw(i8*inreg%a5,i8*inreg%aU)
%a7=getelementptr inbounds i8,i8*%a6,i64 16
%a8=bitcast i8*%a7 to i8*(i8*,i8*)**
%a9=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a8,align 8
%ba=bitcast i8*%a6 to i8**
%bb=load i8*,i8**%ba,align 8
%bc=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%bd=call fastcc i8*%a9(i8*inreg%bb,i8*inreg%bc)
%be=getelementptr inbounds i8,i8*%bd,i64 16
%bf=bitcast i8*%be to i8*(i8*,i8*)**
%bg=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bf,align 8
%bh=bitcast i8*%bd to i8**
%bi=load i8*,i8**%bh,align 8
%bj=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bk=call fastcc i8*%bg(i8*inreg%bi,i8*inreg%bj)
store i8*%bk,i8**%c,align 8
%bl=call i8*@sml_alloc(i32 inreg 20)#0
%bm=getelementptr inbounds i8,i8*%bl,i64 -4
%bn=bitcast i8*%bm to i32*
store i32 1342177296,i32*%bn,align 4
store i8*%bl,i8**%d,align 8
%bo=getelementptr inbounds i8,i8*%bl,i64 4
%bp=bitcast i8*%bo to i32*
store i32 0,i32*%bp,align 1
%bq=bitcast i8*%bl to i32*
store i32 4,i32*%bq,align 4
%br=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bs=getelementptr inbounds i8,i8*%bl,i64 8
%bt=bitcast i8*%bs to i8**
store i8*%br,i8**%bt,align 8
%bu=getelementptr inbounds i8,i8*%bl,i64 16
%bv=bitcast i8*%bu to i32*
store i32 2,i32*%bv,align 4
%bw=call i8*@sml_alloc(i32 inreg 20)#0
%bx=getelementptr inbounds i8,i8*%bw,i64 -4
%by=bitcast i8*%bx to i32*
store i32 1342177296,i32*%by,align 4
%bz=load i8*,i8**%d,align 8
%bA=bitcast i8*%bw to i8**
store i8*%bz,i8**%bA,align 8
%bB=load i8*,i8**%c,align 8
%bC=getelementptr inbounds i8,i8*%bw,i64 8
%bD=bitcast i8*%bC to i8**
store i8*%bB,i8**%bD,align 8
%bE=getelementptr inbounds i8,i8*%bw,i64 16
%bF=bitcast i8*%bE to i32*
store i32 3,i32*%bF,align 4
ret i8*%bw
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatCaseListE_250(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatCaseListE_249 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatCaseListE_249 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat14formatCaseListE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatCaseListE_250 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatCaseListE_250 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLLN10TermFormat20formatEnclosedOptionE_253(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
o:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%f,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%m,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%f,align 8
%l=load i8*,i8**%c,align 8
br label%m
m:
%n=phi i8*[%k,%j],[%a,%o]
%p=phi i8*[%l,%j],[%b,%o]
%q=bitcast i8*%n to i8**
%r=getelementptr inbounds i8,i8*%n,i64 12
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=add i32%t,-1
%v=sub i32 0,%t
%w=and i32%u,%v
%x=load i8*,i8**%q,align 8
%y=bitcast i8*%x to i8**
%z=load i8*,i8**%y,align 8
%A=getelementptr inbounds i8,i8*%x,i64 8
%B=bitcast i8*%A to i8**
%C=load i8*,i8**%B,align 8
store i8*%C,i8**%d,align 8
%D=load i8*,i8**%q,align 8
%E=getelementptr inbounds i8,i8*%D,i64 16
%F=bitcast i8*%E to i8**
%G=load i8*,i8**%F,align 8
store i8*%G,i8**%e,align 8
%H=icmp eq i8*%p,null
br i1%H,label%I,label%ae
I:
store i8*null,i8**%c,align 8
store i8*null,i8**%f,align 8
%J=call i8*@sml_alloc(i32 inreg 20)#0
%K=getelementptr inbounds i8,i8*%J,i64 -4
%L=bitcast i8*%K to i32*
store i32 1342177296,i32*%L,align 4
store i8*%J,i8**%c,align 8
%M=getelementptr inbounds i8,i8*%J,i64 4
%N=bitcast i8*%M to i32*
store i32 0,i32*%N,align 1
%O=bitcast i8*%J to i32*
store i32 4,i32*%O,align 4
%P=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%Q=getelementptr inbounds i8,i8*%J,i64 8
%R=bitcast i8*%Q to i8**
store i8*%P,i8**%R,align 8
%S=getelementptr inbounds i8,i8*%J,i64 16
%T=bitcast i8*%S to i32*
store i32 2,i32*%T,align 4
%U=call i8*@sml_alloc(i32 inreg 20)#0
%V=getelementptr inbounds i8,i8*%U,i64 -4
%W=bitcast i8*%V to i32*
store i32 1342177296,i32*%W,align 4
%X=load i8*,i8**%c,align 8
%Y=bitcast i8*%U to i8**
store i8*%X,i8**%Y,align 8
%Z=load i8*,i8**%e,align 8
%aa=getelementptr inbounds i8,i8*%U,i64 8
%ab=bitcast i8*%aa to i8**
store i8*%Z,i8**%ab,align 8
%ac=getelementptr inbounds i8,i8*%U,i64 16
%ad=bitcast i8*%ac to i32*
store i32 3,i32*%ad,align 4
ret i8*%U
ae:
%af=getelementptr inbounds i8,i8*%z,i64 16
%ag=bitcast i8*%af to i8*(i8*,i8*)**
%ah=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ag,align 8
%ai=bitcast i8*%z to i8**
%aj=load i8*,i8**%ai,align 8
store i8*%aj,i8**%g,align 8
%ak=getelementptr inbounds i8,i8*%n,i64 8
%al=bitcast i8*%ak to i32*
%am=load i32,i32*%al,align 4
%an=icmp eq i32%am,0
store i8*null,i8**%f,align 8
br i1%an,label%at,label%ao
ao:
store i8*null,i8**%c,align 8
%ap=sext i32%w to i64
%aq=getelementptr inbounds i8,i8*%p,i64%ap
%ar=bitcast i8*%aq to i8**
%as=load i8*,i8**%ar,align 8
br label%aB
at:
%au=call i8*@sml_alloc(i32 inreg%t)#0
%av=getelementptr inbounds i8,i8*%au,i64 -4
%aw=bitcast i8*%av to i32*
store i32%t,i32*%aw,align 4
%ax=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ay=sext i32%w to i64
%az=getelementptr inbounds i8,i8*%ax,i64%ay
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%au,i8*%az,i32%t,i1 false)
%aA=load i8*,i8**%g,align 8
br label%aB
aB:
%aC=phi i8*[%aj,%ao],[%aA,%at]
%aD=phi i8*[%as,%ao],[%au,%at]
store i8*null,i8**%g,align 8
%aE=call fastcc i8*%ah(i8*inreg%aC,i8*inreg%aD)
store i8*%aE,i8**%c,align 8
%aF=call i8*@sml_alloc(i32 inreg 20)#0
%aG=getelementptr inbounds i8,i8*%aF,i64 -4
%aH=bitcast i8*%aG to i32*
store i32 1342177296,i32*%aH,align 4
store i8*%aF,i8**%f,align 8
%aI=getelementptr inbounds i8,i8*%aF,i64 4
%aJ=bitcast i8*%aI to i32*
store i32 0,i32*%aJ,align 1
%aK=bitcast i8*%aF to i32*
store i32 4,i32*%aK,align 4
%aL=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aM=getelementptr inbounds i8,i8*%aF,i64 8
%aN=bitcast i8*%aM to i8**
store i8*%aL,i8**%aN,align 8
%aO=getelementptr inbounds i8,i8*%aF,i64 16
%aP=bitcast i8*%aO to i32*
store i32 2,i32*%aP,align 4
%aQ=call i8*@sml_alloc(i32 inreg 20)#0
%aR=getelementptr inbounds i8,i8*%aQ,i64 -4
%aS=bitcast i8*%aR to i32*
store i32 1342177296,i32*%aS,align 4
store i8*%aQ,i8**%c,align 8
%aT=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%aU=bitcast i8*%aQ to i8**
store i8*%aT,i8**%aU,align 8
%aV=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aW=getelementptr inbounds i8,i8*%aQ,i64 8
%aX=bitcast i8*%aW to i8**
store i8*%aV,i8**%aX,align 8
%aY=getelementptr inbounds i8,i8*%aQ,i64 16
%aZ=bitcast i8*%aY to i32*
store i32 3,i32*%aZ,align 4
%a0=call i8*@sml_alloc(i32 inreg 20)#0
%a1=getelementptr inbounds i8,i8*%a0,i64 -4
%a2=bitcast i8*%a1 to i32*
store i32 1342177296,i32*%a2,align 4
store i8*%a0,i8**%e,align 8
%a3=getelementptr inbounds i8,i8*%a0,i64 4
%a4=bitcast i8*%a3 to i32*
store i32 0,i32*%a4,align 1
%a5=bitcast i8*%a0 to i32*
store i32 4,i32*%a5,align 4
%a6=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%a7=getelementptr inbounds i8,i8*%a0,i64 8
%a8=bitcast i8*%a7 to i8**
store i8*%a6,i8**%a8,align 8
%a9=getelementptr inbounds i8,i8*%a0,i64 16
%ba=bitcast i8*%a9 to i32*
store i32 2,i32*%ba,align 4
%bb=call i8*@sml_alloc(i32 inreg 20)#0
%bc=getelementptr inbounds i8,i8*%bb,i64 -4
%bd=bitcast i8*%bc to i32*
store i32 1342177296,i32*%bd,align 4
%be=load i8*,i8**%e,align 8
%bf=bitcast i8*%bb to i8**
store i8*%be,i8**%bf,align 8
%bg=load i8*,i8**%c,align 8
%bh=getelementptr inbounds i8,i8*%bb,i64 8
%bi=bitcast i8*%bh to i8**
store i8*%bg,i8**%bi,align 8
%bj=getelementptr inbounds i8,i8*%bb,i64 16
%bk=bitcast i8*%bj to i32*
store i32 3,i32*%bk,align 4
ret i8*%bb
}
define internal fastcc i8*@_SMLLLN10TermFormat20formatEnclosedOptionE_254(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat20formatEnclosedOptionE_253 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat20formatEnclosedOptionE_253 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat20formatEnclosedOptionE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat20formatEnclosedOptionE_254 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat20formatEnclosedOptionE_254 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLLN10TermFormat20formatOptionalOptionE_257(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
o:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%f,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%m,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%f,align 8
%l=load i8*,i8**%c,align 8
br label%m
m:
%n=phi i8*[%k,%j],[%a,%o]
%p=phi i8*[%l,%j],[%b,%o]
%q=bitcast i8*%n to i8**
%r=getelementptr inbounds i8,i8*%n,i64 12
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=add i32%t,-1
%v=sub i32 0,%t
%w=and i32%u,%v
%x=load i8*,i8**%q,align 8
%y=bitcast i8*%x to i8**
%z=load i8*,i8**%y,align 8
%A=getelementptr inbounds i8,i8*%x,i64 8
%B=bitcast i8*%A to i8**
%C=load i8*,i8**%B,align 8
store i8*%C,i8**%d,align 8
%D=load i8*,i8**%q,align 8
%E=getelementptr inbounds i8,i8*%D,i64 16
%F=bitcast i8*%E to i8**
%G=load i8*,i8**%F,align 8
store i8*%G,i8**%e,align 8
%H=icmp eq i8*%p,null
br i1%H,label%I,label%J
I:
ret i8*null
J:
%K=getelementptr inbounds i8,i8*%z,i64 16
%L=bitcast i8*%K to i8*(i8*,i8*)**
%M=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%L,align 8
%N=bitcast i8*%z to i8**
%O=load i8*,i8**%N,align 8
store i8*%O,i8**%g,align 8
%P=getelementptr inbounds i8,i8*%n,i64 8
%Q=bitcast i8*%P to i32*
%R=load i32,i32*%Q,align 4
%S=icmp eq i32%R,0
store i8*null,i8**%f,align 8
br i1%S,label%Y,label%T
T:
store i8*null,i8**%c,align 8
%U=sext i32%w to i64
%V=getelementptr inbounds i8,i8*%p,i64%U
%W=bitcast i8*%V to i8**
%X=load i8*,i8**%W,align 8
br label%ag
Y:
%Z=call i8*@sml_alloc(i32 inreg%t)#0
%aa=getelementptr inbounds i8,i8*%Z,i64 -4
%ab=bitcast i8*%aa to i32*
store i32%t,i32*%ab,align 4
%ac=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ad=sext i32%w to i64
%ae=getelementptr inbounds i8,i8*%ac,i64%ad
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%Z,i8*%ae,i32%t,i1 false)
%af=load i8*,i8**%g,align 8
br label%ag
ag:
%ah=phi i8*[%O,%T],[%af,%Y]
%ai=phi i8*[%X,%T],[%Z,%Y]
store i8*null,i8**%g,align 8
%aj=call fastcc i8*%M(i8*inreg%ah,i8*inreg%ai)
store i8*%aj,i8**%c,align 8
%ak=call i8*@sml_alloc(i32 inreg 20)#0
%al=getelementptr inbounds i8,i8*%ak,i64 -4
%am=bitcast i8*%al to i32*
store i32 1342177296,i32*%am,align 4
store i8*%ak,i8**%f,align 8
%an=getelementptr inbounds i8,i8*%ak,i64 4
%ao=bitcast i8*%an to i32*
store i32 0,i32*%ao,align 1
%ap=bitcast i8*%ak to i32*
store i32 4,i32*%ap,align 4
%aq=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ar=getelementptr inbounds i8,i8*%ak,i64 8
%as=bitcast i8*%ar to i8**
store i8*%aq,i8**%as,align 8
%at=getelementptr inbounds i8,i8*%ak,i64 16
%au=bitcast i8*%at to i32*
store i32 2,i32*%au,align 4
%av=call i8*@sml_alloc(i32 inreg 20)#0
%aw=getelementptr inbounds i8,i8*%av,i64 -4
%ax=bitcast i8*%aw to i32*
store i32 1342177296,i32*%ax,align 4
store i8*%av,i8**%c,align 8
%ay=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%az=bitcast i8*%av to i8**
store i8*%ay,i8**%az,align 8
%aA=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aB=getelementptr inbounds i8,i8*%av,i64 8
%aC=bitcast i8*%aB to i8**
store i8*%aA,i8**%aC,align 8
%aD=getelementptr inbounds i8,i8*%av,i64 16
%aE=bitcast i8*%aD to i32*
store i32 3,i32*%aE,align 4
%aF=call i8*@sml_alloc(i32 inreg 20)#0
%aG=getelementptr inbounds i8,i8*%aF,i64 -4
%aH=bitcast i8*%aG to i32*
store i32 1342177296,i32*%aH,align 4
store i8*%aF,i8**%e,align 8
%aI=getelementptr inbounds i8,i8*%aF,i64 4
%aJ=bitcast i8*%aI to i32*
store i32 0,i32*%aJ,align 1
%aK=bitcast i8*%aF to i32*
store i32 4,i32*%aK,align 4
%aL=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aM=getelementptr inbounds i8,i8*%aF,i64 8
%aN=bitcast i8*%aM to i8**
store i8*%aL,i8**%aN,align 8
%aO=getelementptr inbounds i8,i8*%aF,i64 16
%aP=bitcast i8*%aO to i32*
store i32 2,i32*%aP,align 4
%aQ=call i8*@sml_alloc(i32 inreg 20)#0
%aR=getelementptr inbounds i8,i8*%aQ,i64 -4
%aS=bitcast i8*%aR to i32*
store i32 1342177296,i32*%aS,align 4
%aT=load i8*,i8**%e,align 8
%aU=bitcast i8*%aQ to i8**
store i8*%aT,i8**%aU,align 8
%aV=load i8*,i8**%c,align 8
%aW=getelementptr inbounds i8,i8*%aQ,i64 8
%aX=bitcast i8*%aW to i8**
store i8*%aV,i8**%aX,align 8
%aY=getelementptr inbounds i8,i8*%aQ,i64 16
%aZ=bitcast i8*%aY to i32*
store i32 3,i32*%aZ,align 4
ret i8*%aQ
}
define internal fastcc i8*@_SMLLLN10TermFormat20formatOptionalOptionE_258(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat20formatOptionalOptionE_257 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat20formatOptionalOptionE_257 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat20formatOptionalOptionE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat20formatOptionalOptionE_258 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat20formatOptionalOptionE_258 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLLN10TermFormat12formatOptionE_267(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
p:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%g,align 8
store i8*%b,i8**%c,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%n,label%k
k:
call void@sml_check(i32 inreg%i)
%l=load i8*,i8**%g,align 8
%m=load i8*,i8**%c,align 8
br label%n
n:
%o=phi i8*[%m,%k],[%b,%p]
%q=phi i8*[%l,%k],[%a,%p]
%r=bitcast i8*%q to i8**
%s=getelementptr inbounds i8,i8*%q,i64 12
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=add i32%u,-1
%w=sub i32 0,%u
%x=and i32%v,%w
%y=bitcast i8*%q to i8***
%z=load i8**,i8***%y,align 8
%A=load i8*,i8**%z,align 8
store i8*%A,i8**%d,align 8
%B=load i8*,i8**%r,align 8
%C=getelementptr inbounds i8,i8*%B,i64 8
%D=bitcast i8*%C to i8**
%E=load i8*,i8**%D,align 8
store i8*%E,i8**%e,align 8
%F=load i8*,i8**%r,align 8
%G=getelementptr inbounds i8,i8*%F,i64 16
%H=bitcast i8*%G to i8**
%I=load i8*,i8**%H,align 8
store i8*%I,i8**%f,align 8
%J=icmp eq i8*%o,null
br i1%J,label%K,label%ap
K:
store i8*null,i8**%c,align 8
store i8*null,i8**%d,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%f,align 8
store i8*null,i8**%g,align 8
%L=call i8*@sml_alloc(i32 inreg 20)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32 1342177296,i32*%N,align 4
store i8*%L,i8**%d,align 8
%O=getelementptr inbounds i8,i8*%L,i64 4
%P=bitcast i8*%O to i32*
store i32 0,i32*%P,align 1
%Q=bitcast i8*%L to i32*
store i32 4,i32*%Q,align 4
%R=getelementptr inbounds i8,i8*%L,i64 8
%S=bitcast i8*%R to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[5x i8]}>,<{[4x i8],i32,[5x i8]}>*@G,i64 0,i32 2,i64 0),i8**%S,align 8
%T=getelementptr inbounds i8,i8*%L,i64 16
%U=bitcast i8*%T to i32*
store i32 2,i32*%U,align 4
%V=call i8*@sml_alloc(i32 inreg 20)#0
%W=getelementptr inbounds i8,i8*%V,i64 -4
%X=bitcast i8*%W to i32*
store i32 1342177296,i32*%X,align 4
store i8*%V,i8**%c,align 8
%Y=getelementptr inbounds i8,i8*%V,i64 4
%Z=bitcast i8*%Y to i32*
store i32 0,i32*%Z,align 1
%aa=bitcast i8*%V to i32*
store i32 6,i32*%aa,align 4
%ab=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ac=getelementptr inbounds i8,i8*%V,i64 8
%ad=bitcast i8*%ac to i8**
store i8*%ab,i8**%ad,align 8
%ae=getelementptr inbounds i8,i8*%V,i64 16
%af=bitcast i8*%ae to i32*
store i32 2,i32*%af,align 4
%ag=call i8*@sml_alloc(i32 inreg 20)#0
%ah=getelementptr inbounds i8,i8*%ag,i64 -4
%ai=bitcast i8*%ah to i32*
store i32 1342177296,i32*%ai,align 4
%aj=load i8*,i8**%c,align 8
%ak=bitcast i8*%ag to i8**
store i8*%aj,i8**%ak,align 8
%al=getelementptr inbounds i8,i8*%ag,i64 8
%am=bitcast i8*%al to i8**
store i8*null,i8**%am,align 8
%an=getelementptr inbounds i8,i8*%ag,i64 16
%ao=bitcast i8*%an to i32*
store i32 3,i32*%ao,align 4
ret i8*%ag
ap:
%aq=getelementptr inbounds i8,i8*%q,i64 8
%ar=bitcast i8*%aq to i32*
%as=load i32,i32*%ar,align 4
%at=icmp eq i32%as,0
store i8*null,i8**%g,align 8
br i1%at,label%az,label%au
au:
store i8*null,i8**%c,align 8
%av=sext i32%x to i64
%aw=getelementptr inbounds i8,i8*%o,i64%av
%ax=bitcast i8*%aw to i8**
%ay=load i8*,i8**%ax,align 8
br label%aG
az:
%aA=call i8*@sml_alloc(i32 inreg%u)#0
%aB=getelementptr inbounds i8,i8*%aA,i64 -4
%aC=bitcast i8*%aB to i32*
store i32%u,i32*%aC,align 4
%aD=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aE=sext i32%x to i64
%aF=getelementptr inbounds i8,i8*%aD,i64%aE
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aA,i8*%aF,i32%u,i1 false)
br label%aG
aG:
%aH=phi i8*[%aA,%az],[%ay,%au]
store i8*%aH,i8**%c,align 8
%aI=call i8*@sml_alloc(i32 inreg 20)#0
%aJ=getelementptr inbounds i8,i8*%aI,i64 -4
%aK=bitcast i8*%aJ to i32*
store i32 1342177296,i32*%aK,align 4
store i8*%aI,i8**%h,align 8
%aL=getelementptr inbounds i8,i8*%aI,i64 4
%aM=bitcast i8*%aL to i32*
store i32 0,i32*%aM,align 1
%aN=bitcast i8*%aI to i32*
store i32 5,i32*%aN,align 4
%aO=getelementptr inbounds i8,i8*%aI,i64 8
%aP=bitcast i8*%aO to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[6x i8]}>,<{[4x i8],i32,[6x i8]}>*@F,i64 0,i32 2,i64 0),i8**%aP,align 8
%aQ=getelementptr inbounds i8,i8*%aI,i64 16
%aR=bitcast i8*%aQ to i32*
store i32 2,i32*%aR,align 4
%aS=call i8*@sml_alloc(i32 inreg 20)#0
%aT=getelementptr inbounds i8,i8*%aS,i64 -4
%aU=bitcast i8*%aT to i32*
store i32 1342177296,i32*%aU,align 4
store i8*%aS,i8**%g,align 8
%aV=getelementptr inbounds i8,i8*%aS,i64 4
%aW=bitcast i8*%aV to i32*
store i32 0,i32*%aW,align 1
%aX=bitcast i8*%aS to i32*
store i32 6,i32*%aX,align 4
%aY=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%aZ=getelementptr inbounds i8,i8*%aS,i64 8
%a0=bitcast i8*%aZ to i8**
store i8*%aY,i8**%a0,align 8
%a1=getelementptr inbounds i8,i8*%aS,i64 16
%a2=bitcast i8*%a1 to i32*
store i32 2,i32*%a2,align 4
%a3=load i8*,i8**%d,align 8
%a4=getelementptr inbounds i8,i8*%a3,i64 16
%a5=bitcast i8*%a4 to i8*(i8*,i8*)**
%a6=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a5,align 8
store i8*null,i8**%d,align 8
%a7=bitcast i8*%a3 to i8**
%a8=load i8*,i8**%a7,align 8
%a9=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ba=call fastcc i8*%a6(i8*inreg%a8,i8*inreg%a9)
store i8*%ba,i8**%d,align 8
%bb=call i8*@sml_alloc(i32 inreg 20)#0
%bc=getelementptr inbounds i8,i8*%bb,i64 -4
%bd=bitcast i8*%bc to i32*
store i32 1342177296,i32*%bd,align 4
store i8*%bb,i8**%c,align 8
%be=getelementptr inbounds i8,i8*%bb,i64 4
%bf=bitcast i8*%be to i32*
store i32 0,i32*%bf,align 1
%bg=bitcast i8*%bb to i32*
store i32 4,i32*%bg,align 4
%bh=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bi=getelementptr inbounds i8,i8*%bb,i64 8
%bj=bitcast i8*%bi to i8**
store i8*%bh,i8**%bj,align 8
%bk=getelementptr inbounds i8,i8*%bb,i64 16
%bl=bitcast i8*%bk to i32*
store i32 2,i32*%bl,align 4
%bm=call i8*@sml_alloc(i32 inreg 20)#0
%bn=getelementptr inbounds i8,i8*%bm,i64 -4
%bo=bitcast i8*%bn to i32*
store i32 1342177296,i32*%bo,align 4
store i8*%bm,i8**%h,align 8
%bp=getelementptr inbounds i8,i8*%bm,i64 4
%bq=bitcast i8*%bp to i32*
store i32 0,i32*%bq,align 1
%br=bitcast i8*%bm to i32*
store i32 1,i32*%br,align 4
%bs=getelementptr inbounds i8,i8*%bm,i64 8
%bt=bitcast i8*%bs to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bK,i64 0,i32 2,i64 0),i8**%bt,align 8
%bu=getelementptr inbounds i8,i8*%bm,i64 16
%bv=bitcast i8*%bu to i32*
store i32 2,i32*%bv,align 4
%bw=call i8*@sml_alloc(i32 inreg 20)#0
%bx=getelementptr inbounds i8,i8*%bw,i64 -4
%by=bitcast i8*%bx to i32*
store i32 1342177296,i32*%by,align 4
store i8*%bw,i8**%d,align 8
%bz=getelementptr inbounds i8,i8*%bw,i64 4
%bA=bitcast i8*%bz to i32*
store i32 0,i32*%bA,align 1
%bB=bitcast i8*%bw to i32*
store i32 6,i32*%bB,align 4
%bC=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%bD=getelementptr inbounds i8,i8*%bw,i64 8
%bE=bitcast i8*%bD to i8**
store i8*%bC,i8**%bE,align 8
%bF=getelementptr inbounds i8,i8*%bw,i64 16
%bG=bitcast i8*%bF to i32*
store i32 2,i32*%bG,align 4
%bH=call i8*@sml_alloc(i32 inreg 20)#0
%bI=getelementptr inbounds i8,i8*%bH,i64 -4
%bJ=bitcast i8*%bI to i32*
store i32 1342177296,i32*%bJ,align 4
store i8*%bH,i8**%h,align 8
%bK=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bL=bitcast i8*%bH to i8**
store i8*%bK,i8**%bL,align 8
%bM=getelementptr inbounds i8,i8*%bH,i64 8
%bN=bitcast i8*%bM to i8**
store i8*null,i8**%bN,align 8
%bO=getelementptr inbounds i8,i8*%bH,i64 16
%bP=bitcast i8*%bO to i32*
store i32 3,i32*%bP,align 4
%bQ=call i8*@sml_alloc(i32 inreg 20)#0
%bR=getelementptr inbounds i8,i8*%bQ,i64 -4
%bS=bitcast i8*%bR to i32*
store i32 1342177296,i32*%bS,align 4
store i8*%bQ,i8**%d,align 8
%bT=getelementptr inbounds i8,i8*%bQ,i64 4
%bU=bitcast i8*%bT to i32*
store i32 0,i32*%bU,align 1
%bV=bitcast i8*%bQ to i32*
store i32 4,i32*%bV,align 4
%bW=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%bX=getelementptr inbounds i8,i8*%bQ,i64 8
%bY=bitcast i8*%bX to i8**
store i8*%bW,i8**%bY,align 8
%bZ=getelementptr inbounds i8,i8*%bQ,i64 16
%b0=bitcast i8*%bZ to i32*
store i32 2,i32*%b0,align 4
%b1=call i8*@sml_alloc(i32 inreg 20)#0
%b2=getelementptr inbounds i8,i8*%b1,i64 -4
%b3=bitcast i8*%b2 to i32*
store i32 1342177296,i32*%b3,align 4
store i8*%b1,i8**%f,align 8
%b4=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%b5=bitcast i8*%b1 to i8**
store i8*%b4,i8**%b5,align 8
%b6=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%b7=getelementptr inbounds i8,i8*%b1,i64 8
%b8=bitcast i8*%b7 to i8**
store i8*%b6,i8**%b8,align 8
%b9=getelementptr inbounds i8,i8*%b1,i64 16
%ca=bitcast i8*%b9 to i32*
store i32 3,i32*%ca,align 4
%cb=call i8*@sml_alloc(i32 inreg 20)#0
%cc=getelementptr inbounds i8,i8*%cb,i64 -4
%cd=bitcast i8*%cc to i32*
store i32 1342177296,i32*%cd,align 4
store i8*%cb,i8**%d,align 8
%ce=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cf=bitcast i8*%cb to i8**
store i8*%ce,i8**%cf,align 8
%cg=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%ch=getelementptr inbounds i8,i8*%cb,i64 8
%ci=bitcast i8*%ch to i8**
store i8*%cg,i8**%ci,align 8
%cj=getelementptr inbounds i8,i8*%cb,i64 16
%ck=bitcast i8*%cj to i32*
store i32 3,i32*%ck,align 4
%cl=call i8*@sml_alloc(i32 inreg 20)#0
%cm=getelementptr inbounds i8,i8*%cl,i64 -4
%cn=bitcast i8*%cm to i32*
store i32 1342177296,i32*%cn,align 4
store i8*%cl,i8**%c,align 8
%co=getelementptr inbounds i8,i8*%cl,i64 4
%cp=bitcast i8*%co to i32*
store i32 0,i32*%cp,align 1
%cq=bitcast i8*%cl to i32*
store i32 4,i32*%cq,align 4
%cr=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%cs=getelementptr inbounds i8,i8*%cl,i64 8
%ct=bitcast i8*%cs to i8**
store i8*%cr,i8**%ct,align 8
%cu=getelementptr inbounds i8,i8*%cl,i64 16
%cv=bitcast i8*%cu to i32*
store i32 2,i32*%cv,align 4
%cw=call i8*@sml_alloc(i32 inreg 20)#0
%cx=getelementptr inbounds i8,i8*%cw,i64 -4
%cy=bitcast i8*%cx to i32*
store i32 1342177296,i32*%cy,align 4
store i8*%cw,i8**%e,align 8
%cz=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cA=bitcast i8*%cw to i8**
store i8*%cz,i8**%cA,align 8
%cB=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%cC=getelementptr inbounds i8,i8*%cw,i64 8
%cD=bitcast i8*%cC to i8**
store i8*%cB,i8**%cD,align 8
%cE=getelementptr inbounds i8,i8*%cw,i64 16
%cF=bitcast i8*%cE to i32*
store i32 3,i32*%cF,align 4
%cG=call i8*@sml_alloc(i32 inreg 20)#0
%cH=getelementptr inbounds i8,i8*%cG,i64 -4
%cI=bitcast i8*%cH to i32*
store i32 1342177296,i32*%cI,align 4
%cJ=load i8*,i8**%g,align 8
%cK=bitcast i8*%cG to i8**
store i8*%cJ,i8**%cK,align 8
%cL=load i8*,i8**%e,align 8
%cM=getelementptr inbounds i8,i8*%cG,i64 8
%cN=bitcast i8*%cM to i8**
store i8*%cL,i8**%cN,align 8
%cO=getelementptr inbounds i8,i8*%cG,i64 16
%cP=bitcast i8*%cO to i32*
store i32 3,i32*%cP,align 4
ret i8*%cG
}
define internal fastcc i8*@_SMLLLN10TermFormat12formatOptionE_268(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12formatOptionE_267 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12formatOptionE_267 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat12formatOptionE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12formatOptionE_268 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12formatOptionE_268 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_271(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_273(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_276(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=bitcast i8**%d to i8***
%m=load i8**,i8***%l,align 8
%n=bitcast i8**%m to i8*
br label%o
o:
%p=phi i8*[%n,%k],[%a,%i]
%q=phi i8**[%m,%k],[%j,%i]
%r=load i8*,i8**%q,align 8
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%e,align 8
%x=getelementptr inbounds i8,i8*%p,i64 8
%y=bitcast i8*%x to i8**
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%d,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%f,align 8
%D=getelementptr inbounds i8,i8*%A,i64 4
%E=bitcast i8*%D to i32*
store i32 0,i32*%E,align 1
%F=bitcast i8*%A to i32*
store i32 4,i32*%F,align 4
%G=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%H=getelementptr inbounds i8,i8*%A,i64 8
%I=bitcast i8*%H to i8**
store i8*%G,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%A,i64 16
%K=bitcast i8*%J to i32*
store i32 2,i32*%K,align 4
%L=call i8*@sml_alloc(i32 inreg 20)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32 1342177296,i32*%N,align 4
%O=load i8*,i8**%f,align 8
%P=bitcast i8*%L to i8**
store i8*%O,i8**%P,align 8
%Q=load i8*,i8**%c,align 8
%R=getelementptr inbounds i8,i8*%L,i64 8
%S=bitcast i8*%R to i8**
store i8*%Q,i8**%S,align 8
%T=getelementptr inbounds i8,i8*%L,i64 16
%U=bitcast i8*%T to i32*
store i32 3,i32*%U,align 4
%V=load i8*,i8**%e,align 8
%W=tail call fastcc i8*%u(i8*inreg%V,i8*inreg%L)
ret i8*%W
}
define internal fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_277(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8**
br label%p
l:
call void@sml_check(i32 inreg%h)
%m=load i8*,i8**%d,align 8
%n=bitcast i8**%c to i8***
%o=load i8**,i8***%n,align 8
br label%p
p:
%q=phi i8**[%o,%l],[%k,%j]
%r=phi i8*[%m,%l],[%b,%j]
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%f,align 8
%x=load i8*,i8**%q,align 8
store i8*%x,i8**%d,align 8
%y=getelementptr inbounds i8*,i8**%q,i64 2
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%e,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%g,align 8
%D=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%E=bitcast i8*%A to i8**
store i8*%D,i8**%E,align 8
%F=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%G=getelementptr inbounds i8,i8*%A,i64 8
%H=bitcast i8*%G to i8**
store i8*%F,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%A,i64 16
%J=bitcast i8*%I to i32*
store i32 3,i32*%J,align 4
%K=call i8*@sml_alloc(i32 inreg 28)#0
%L=getelementptr inbounds i8,i8*%K,i64 -4
%M=bitcast i8*%L to i32*
store i32 1342177304,i32*%M,align 4
store i8*%K,i8**%d,align 8
%N=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%O=bitcast i8*%K to i8**
store i8*%N,i8**%O,align 8
%P=getelementptr inbounds i8,i8*%K,i64 8
%Q=bitcast i8*%P to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12keyValuePairE_276 to void(...)*),void(...)**%Q,align 8
%R=getelementptr inbounds i8,i8*%K,i64 16
%S=bitcast i8*%R to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12keyValuePairE_276 to void(...)*),void(...)**%S,align 8
%T=getelementptr inbounds i8,i8*%K,i64 24
%U=bitcast i8*%T to i32*
store i32 -2147483647,i32*%U,align 4
%V=load i8*,i8**%c,align 8
%W=getelementptr inbounds i8,i8*%V,i64 8
%X=bitcast i8*%W to i8**
%Y=load i8*,i8**%X,align 8
store i8*%Y,i8**%c,align 8
%Z=call i8*@sml_alloc(i32 inreg 20)#0
%aa=getelementptr inbounds i8,i8*%Z,i64 -4
%ab=bitcast i8*%aa to i32*
store i32 1342177296,i32*%ab,align 4
%ac=load i8*,i8**%d,align 8
%ad=bitcast i8*%Z to i8**
store i8*%ac,i8**%ad,align 8
%ae=load i8*,i8**%c,align 8
%af=getelementptr inbounds i8,i8*%Z,i64 8
%ag=bitcast i8*%af to i8**
store i8*%ae,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%Z,i64 16
%ai=bitcast i8*%ah to i32*
store i32 3,i32*%ai,align 4
%aj=load i8*,i8**%f,align 8
%ak=tail call fastcc i8*%u(i8*inreg%aj,i8*inreg%Z)
ret i8*%ak
}
define internal fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_278(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
store i8*%l,i8**%f,align 8
%o=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%r=getelementptr inbounds i8,i8*%l,i64 8
%s=bitcast i8*%r to i8**
store i8*%q,i8**%s,align 8
%t=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%u=getelementptr inbounds i8,i8*%l,i64 16
%v=bitcast i8*%u to i8**
store i8*%t,i8**%v,align 8
%w=getelementptr inbounds i8,i8*%l,i64 24
%x=bitcast i8*%w to i32*
store i32 7,i32*%x,align 4
%y=call i8*@sml_alloc(i32 inreg 28)#0
%z=getelementptr inbounds i8,i8*%y,i64 -4
%A=bitcast i8*%z to i32*
store i32 1342177304,i32*%A,align 4
%B=load i8*,i8**%f,align 8
%C=bitcast i8*%y to i8**
store i8*%B,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%y,i64 8
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12keyValuePairE_277 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%y,i64 16
%G=bitcast i8*%F to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12keyValuePairE_277 to void(...)*),void(...)**%G,align 8
%H=getelementptr inbounds i8,i8*%y,i64 24
%I=bitcast i8*%H to i32*
store i32 -2147483647,i32*%I,align 4
ret i8*%y
}
define internal fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_279(i8*inreg%a)#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i8**
%f=load i8*,i8**%e,align 8
store i8*%f,i8**%b,align 8
%g=getelementptr inbounds i8,i8*%a,i64 8
%h=bitcast i8*%g to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%c,align 8
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i8**
store i8*%o,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%j,i64 16
%s=bitcast i8*%r to i32*
store i32 3,i32*%s,align 4
%t=call i8*@sml_alloc(i32 inreg 28)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177304,i32*%v,align 4
%w=load i8*,i8**%d,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12keyValuePairE_278 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%t,i64 16
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12keyValuePairE_278 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%t,i64 24
%D=bitcast i8*%C to i32*
store i32 -2147483647,i32*%D,align 4
ret i8*%t
}
define internal fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_281(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=bitcast i8**%d to i8***
%m=load i8**,i8***%l,align 8
%n=bitcast i8**%m to i8*
br label%o
o:
%p=phi i8*[%n,%k],[%a,%i]
%q=phi i8**[%m,%k],[%j,%i]
%r=load i8*,i8**%q,align 8
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%e,align 8
%x=getelementptr inbounds i8,i8*%p,i64 8
%y=bitcast i8*%x to i8**
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%d,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%f,align 8
%D=getelementptr inbounds i8,i8*%A,i64 4
%E=bitcast i8*%D to i32*
store i32 0,i32*%E,align 1
%F=bitcast i8*%A to i32*
store i32 4,i32*%F,align 4
%G=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%H=getelementptr inbounds i8,i8*%A,i64 8
%I=bitcast i8*%H to i8**
store i8*%G,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%A,i64 16
%K=bitcast i8*%J to i32*
store i32 2,i32*%K,align 4
%L=call i8*@sml_alloc(i32 inreg 20)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32 1342177296,i32*%N,align 4
%O=load i8*,i8**%f,align 8
%P=bitcast i8*%L to i8**
store i8*%O,i8**%P,align 8
%Q=load i8*,i8**%c,align 8
%R=getelementptr inbounds i8,i8*%L,i64 8
%S=bitcast i8*%R to i8**
store i8*%Q,i8**%S,align 8
%T=getelementptr inbounds i8,i8*%L,i64 16
%U=bitcast i8*%T to i32*
store i32 3,i32*%U,align 4
%V=load i8*,i8**%e,align 8
%W=tail call fastcc i8*%u(i8*inreg%V,i8*inreg%L)
ret i8*%W
}
define internal fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_282(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8**
br label%p
l:
call void@sml_check(i32 inreg%h)
%m=load i8*,i8**%d,align 8
%n=bitcast i8**%c to i8***
%o=load i8**,i8***%n,align 8
br label%p
p:
%q=phi i8**[%o,%l],[%k,%j]
%r=phi i8*[%m,%l],[%b,%j]
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%f,align 8
%x=load i8*,i8**%q,align 8
store i8*%x,i8**%d,align 8
%y=getelementptr inbounds i8*,i8**%q,i64 2
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%e,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%g,align 8
%D=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%E=bitcast i8*%A to i8**
store i8*%D,i8**%E,align 8
%F=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%G=getelementptr inbounds i8,i8*%A,i64 8
%H=bitcast i8*%G to i8**
store i8*%F,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%A,i64 16
%J=bitcast i8*%I to i32*
store i32 3,i32*%J,align 4
%K=call i8*@sml_alloc(i32 inreg 28)#0
%L=getelementptr inbounds i8,i8*%K,i64 -4
%M=bitcast i8*%L to i32*
store i32 1342177304,i32*%M,align 4
store i8*%K,i8**%d,align 8
%N=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%O=bitcast i8*%K to i8**
store i8*%N,i8**%O,align 8
%P=getelementptr inbounds i8,i8*%K,i64 8
%Q=bitcast i8*%P to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12keyValuePairE_281 to void(...)*),void(...)**%Q,align 8
%R=getelementptr inbounds i8,i8*%K,i64 16
%S=bitcast i8*%R to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12keyValuePairE_281 to void(...)*),void(...)**%S,align 8
%T=getelementptr inbounds i8,i8*%K,i64 24
%U=bitcast i8*%T to i32*
store i32 -2147483647,i32*%U,align 4
%V=load i8*,i8**%c,align 8
%W=getelementptr inbounds i8,i8*%V,i64 8
%X=bitcast i8*%W to i8**
%Y=load i8*,i8**%X,align 8
store i8*%Y,i8**%c,align 8
%Z=call i8*@sml_alloc(i32 inreg 20)#0
%aa=getelementptr inbounds i8,i8*%Z,i64 -4
%ab=bitcast i8*%aa to i32*
store i32 1342177296,i32*%ab,align 4
%ac=load i8*,i8**%d,align 8
%ad=bitcast i8*%Z to i8**
store i8*%ac,i8**%ad,align 8
%ae=load i8*,i8**%c,align 8
%af=getelementptr inbounds i8,i8*%Z,i64 8
%ag=bitcast i8*%af to i8**
store i8*%ae,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%Z,i64 16
%ai=bitcast i8*%ah to i32*
store i32 3,i32*%ai,align 4
%aj=load i8*,i8**%f,align 8
%ak=tail call fastcc i8*%u(i8*inreg%aj,i8*inreg%Z)
ret i8*%ak
}
define internal fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_283(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
store i8*%l,i8**%f,align 8
%o=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%r=getelementptr inbounds i8,i8*%l,i64 8
%s=bitcast i8*%r to i8**
store i8*%q,i8**%s,align 8
%t=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%u=getelementptr inbounds i8,i8*%l,i64 16
%v=bitcast i8*%u to i8**
store i8*%t,i8**%v,align 8
%w=getelementptr inbounds i8,i8*%l,i64 24
%x=bitcast i8*%w to i32*
store i32 7,i32*%x,align 4
%y=call i8*@sml_alloc(i32 inreg 28)#0
%z=getelementptr inbounds i8,i8*%y,i64 -4
%A=bitcast i8*%z to i32*
store i32 1342177304,i32*%A,align 4
%B=load i8*,i8**%f,align 8
%C=bitcast i8*%y to i8**
store i8*%B,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%y,i64 8
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12keyValuePairE_282 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%y,i64 16
%G=bitcast i8*%F to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12keyValuePairE_282 to void(...)*),void(...)**%G,align 8
%H=getelementptr inbounds i8,i8*%y,i64 24
%I=bitcast i8*%H to i32*
store i32 -2147483647,i32*%I,align 4
ret i8*%y
}
define internal fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_284(i8*inreg%a)#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i8**
%f=load i8*,i8**%e,align 8
store i8*%f,i8**%b,align 8
%g=getelementptr inbounds i8,i8*%a,i64 8
%h=bitcast i8*%g to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%c,align 8
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i8**
store i8*%o,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%j,i64 16
%s=bitcast i8*%r to i32*
store i32 3,i32*%s,align 4
%t=call i8*@sml_alloc(i32 inreg 28)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177304,i32*%v,align 4
%w=load i8*,i8**%d,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12keyValuePairE_283 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%t,i64 16
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12keyValuePairE_283 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%t,i64 24
%D=bitcast i8*%C to i32*
store i32 -2147483647,i32*%D,align 4
ret i8*%t
}
define internal fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_286(i8*inreg%a,i32 inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%n
k:
call void@sml_check(i32 inreg%g)
%l=bitcast i8**%c to i8***
%m=load i8**,i8***%l,align 8
br label%n
n:
%o=phi i8**[%m,%k],[%j,%i]
%p=load i8*,i8**%o,align 8
%q=getelementptr inbounds i8,i8*%p,i64 16
%r=bitcast i8*%q to i8*(i8*,i8*)**
%s=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%r,align 8
%t=bitcast i8*%p to i8**
%u=load i8*,i8**%t,align 8
store i8*%u,i8**%c,align 8
%v=call i8*@sml_alloc(i32 inreg 4)#0
%w=bitcast i8*%v to i32*
%x=getelementptr inbounds i8,i8*%v,i64 -4
%y=bitcast i8*%x to i32*
store i32 4,i32*%y,align 4
store i32%b,i32*%w,align 4
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%s(i8*inreg%z,i8*inreg%v)
%B=getelementptr inbounds i8,i8*%A,i64 16
%C=bitcast i8*%B to i8*(i8*,i8*,i8*,i8*,i8*)**
%D=load i8*(i8*,i8*,i8*,i8*,i8*)*,i8*(i8*,i8*,i8*,i8*,i8*)**%C,align 8
%E=bitcast i8*%A to i8**
%F=load i8*,i8**%E,align 8
store i8*%F,i8**%c,align 8
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i8*%G,i8**%d,align 8
store i32 1,i32*%H,align 4
%K=call i8*@sml_alloc(i32 inreg 4)#0
%L=bitcast i8*%K to i32*
%M=getelementptr inbounds i8,i8*%K,i64 -4
%N=bitcast i8*%M to i32*
store i32 4,i32*%N,align 4
store i8*%K,i8**%e,align 8
store i32 8,i32*%L,align 4
%O=call i8*@sml_alloc(i32 inreg 4)#0
%P=bitcast i8*%O to i32*
%Q=getelementptr inbounds i8,i8*%O,i64 -4
%R=bitcast i8*%Q to i32*
store i32 4,i32*%R,align 4
store i8*%O,i8**%f,align 8
store i32 1,i32*%P,align 4
%S=call i8*@sml_alloc(i32 inreg 4)#0
%T=bitcast i8*%S to i32*
%U=getelementptr inbounds i8,i8*%S,i64 -4
%V=bitcast i8*%U to i32*
store i32 4,i32*%V,align 4
store i32 8,i32*%T,align 4
%W=load i8*,i8**%c,align 8
%X=load i8*,i8**%d,align 8
%Y=load i8*,i8**%e,align 8
%Z=load i8*,i8**%f,align 8
%aa=call fastcc i8*%D(i8*inreg%W,i8*inreg%X,i8*inreg%Y,i8*inreg%Z,i8*inreg%S)
ret i8*%aa
}
define internal fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_287(i8*inreg%a)#2 gc"smlsharp"{
j:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%h,label%f
f:
call void@sml_check(i32 inreg%d)
%g=load i8*,i8**%b,align 8
br label%h
h:
%i=phi i8*[%g,%f],[%a,%j]
store i8*null,i8**%b,align 8
%k=call fastcc i8*@_SMLLLN10TermFormat10FormatComb5nest__E_204(i8*inreg%i)
store i8*%k,i8**%b,align 8
%l=call i8*@sml_alloc(i32 inreg 12)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177288,i32*%n,align 4
store i8*%l,i8**%c,align 8
%o=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%c,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i32)*@_SMLLLN10TermFormat12keyValuePairE_286 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12keyValuePairE_867 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_289(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%l
i:
call void@sml_check(i32 inreg%e)
%j=bitcast i8**%d to i8***
%k=load i8**,i8***%j,align 8
br label%l
l:
%m=phi i8**[%k,%i],[%h,%g]
%n=load i8*,i8**%m,align 8
%o=getelementptr inbounds i8,i8*%n,i64 16
%p=bitcast i8*%o to i8*(i8*,i8*)**
%q=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%p,align 8
%r=bitcast i8*%n to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%d,align 8
%t=call i8*@sml_alloc(i32 inreg 20)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177296,i32*%v,align 4
%w=bitcast i8*%t to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@e,i64 0,i32 2)to i8*),i8**%w,align 8
%x=load i8*,i8**%c,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to i8**
store i8*%x,i8**%z,align 8
%A=getelementptr inbounds i8,i8*%t,i64 16
%B=bitcast i8*%A to i32*
store i32 3,i32*%B,align 4
%C=load i8*,i8**%d,align 8
%D=tail call fastcc i8*%q(i8*inreg%C,i8*inreg%t)
ret i8*%D
}
define internal fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_290(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=load i8*,i8**%d,align 8
%m=bitcast i8**%c to i8***
%n=load i8**,i8***%m,align 8
br label%o
o:
%p=phi i8**[%n,%k],[%j,%i]
%q=phi i8*[%l,%k],[%b,%i]
%r=getelementptr inbounds i8,i8*%q,i64 16
%s=bitcast i8*%r to i8*(i8*,i8*)**
%t=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%s,align 8
%u=bitcast i8*%q to i8**
%v=load i8*,i8**%u,align 8
store i8*%v,i8**%e,align 8
%w=load i8*,i8**%p,align 8
store i8*%w,i8**%d,align 8
%x=call i8*@sml_alloc(i32 inreg 12)#0
%y=getelementptr inbounds i8,i8*%x,i64 -4
%z=bitcast i8*%y to i32*
store i32 1342177288,i32*%z,align 4
store i8*%x,i8**%f,align 8
%A=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%B=bitcast i8*%x to i8**
store i8*%A,i8**%B,align 8
%C=getelementptr inbounds i8,i8*%x,i64 8
%D=bitcast i8*%C to i32*
store i32 1,i32*%D,align 4
%E=call i8*@sml_alloc(i32 inreg 28)#0
%F=getelementptr inbounds i8,i8*%E,i64 -4
%G=bitcast i8*%F to i32*
store i32 1342177304,i32*%G,align 4
store i8*%E,i8**%d,align 8
%H=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%I=bitcast i8*%E to i8**
store i8*%H,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%E,i64 8
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12keyValuePairE_289 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%E,i64 16
%M=bitcast i8*%L to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12keyValuePairE_289 to void(...)*),void(...)**%M,align 8
%N=getelementptr inbounds i8,i8*%E,i64 24
%O=bitcast i8*%N to i32*
store i32 -2147483647,i32*%O,align 4
%P=load i8*,i8**%c,align 8
%Q=getelementptr inbounds i8,i8*%P,i64 8
%R=bitcast i8*%Q to i8**
%S=load i8*,i8**%R,align 8
store i8*%S,i8**%c,align 8
%T=call i8*@sml_alloc(i32 inreg 20)#0
%U=getelementptr inbounds i8,i8*%T,i64 -4
%V=bitcast i8*%U to i32*
store i32 1342177296,i32*%V,align 4
%W=load i8*,i8**%d,align 8
%X=bitcast i8*%T to i8**
store i8*%W,i8**%X,align 8
%Y=load i8*,i8**%c,align 8
%Z=getelementptr inbounds i8,i8*%T,i64 8
%aa=bitcast i8*%Z to i8**
store i8*%Y,i8**%aa,align 8
%ab=getelementptr inbounds i8,i8*%T,i64 16
%ac=bitcast i8*%ab to i32*
store i32 3,i32*%ac,align 4
%ad=load i8*,i8**%e,align 8
%ae=tail call fastcc i8*%t(i8*inreg%ad,i8*inreg%T)
ret i8*%ae
}
define internal fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_291(i8*inreg%a)#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i8**
%f=load i8*,i8**%e,align 8
store i8*%f,i8**%b,align 8
%g=getelementptr inbounds i8,i8*%a,i64 8
%h=bitcast i8*%g to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%c,align 8
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i8**
store i8*%o,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%j,i64 16
%s=bitcast i8*%r to i32*
store i32 3,i32*%s,align 4
%t=call i8*@sml_alloc(i32 inreg 28)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177304,i32*%v,align 4
%w=load i8*,i8**%d,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12keyValuePairE_290 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%t,i64 16
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12keyValuePairE_290 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%t,i64 24
%D=bitcast i8*%C to i32*
store i32 -2147483647,i32*%D,align 4
ret i8*%t
}
define internal fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_293(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=bitcast i8**%d to i8***
%m=load i8**,i8***%l,align 8
%n=bitcast i8**%m to i8*
br label%o
o:
%p=phi i8*[%n,%k],[%a,%i]
%q=phi i8**[%m,%k],[%j,%i]
%r=load i8*,i8**%q,align 8
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%e,align 8
%x=getelementptr inbounds i8,i8*%p,i64 8
%y=bitcast i8*%x to i8**
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%d,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%f,align 8
%D=getelementptr inbounds i8,i8*%A,i64 4
%E=bitcast i8*%D to i32*
store i32 0,i32*%E,align 1
%F=bitcast i8*%A to i32*
store i32 4,i32*%F,align 4
%G=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%H=getelementptr inbounds i8,i8*%A,i64 8
%I=bitcast i8*%H to i8**
store i8*%G,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%A,i64 16
%K=bitcast i8*%J to i32*
store i32 2,i32*%K,align 4
%L=call i8*@sml_alloc(i32 inreg 20)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32 1342177296,i32*%N,align 4
%O=load i8*,i8**%f,align 8
%P=bitcast i8*%L to i8**
store i8*%O,i8**%P,align 8
%Q=load i8*,i8**%c,align 8
%R=getelementptr inbounds i8,i8*%L,i64 8
%S=bitcast i8*%R to i8**
store i8*%Q,i8**%S,align 8
%T=getelementptr inbounds i8,i8*%L,i64 16
%U=bitcast i8*%T to i32*
store i32 3,i32*%U,align 4
%V=load i8*,i8**%e,align 8
%W=tail call fastcc i8*%u(i8*inreg%V,i8*inreg%L)
ret i8*%W
}
define internal fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_294(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8**
br label%p
l:
call void@sml_check(i32 inreg%h)
%m=load i8*,i8**%d,align 8
%n=bitcast i8**%c to i8***
%o=load i8**,i8***%n,align 8
br label%p
p:
%q=phi i8**[%o,%l],[%k,%j]
%r=phi i8*[%m,%l],[%b,%j]
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%f,align 8
%x=load i8*,i8**%q,align 8
store i8*%x,i8**%d,align 8
%y=getelementptr inbounds i8*,i8**%q,i64 2
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%e,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%g,align 8
%D=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%E=bitcast i8*%A to i8**
store i8*%D,i8**%E,align 8
%F=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%G=getelementptr inbounds i8,i8*%A,i64 8
%H=bitcast i8*%G to i8**
store i8*%F,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%A,i64 16
%J=bitcast i8*%I to i32*
store i32 3,i32*%J,align 4
%K=call i8*@sml_alloc(i32 inreg 28)#0
%L=getelementptr inbounds i8,i8*%K,i64 -4
%M=bitcast i8*%L to i32*
store i32 1342177304,i32*%M,align 4
store i8*%K,i8**%d,align 8
%N=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%O=bitcast i8*%K to i8**
store i8*%N,i8**%O,align 8
%P=getelementptr inbounds i8,i8*%K,i64 8
%Q=bitcast i8*%P to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12keyValuePairE_293 to void(...)*),void(...)**%Q,align 8
%R=getelementptr inbounds i8,i8*%K,i64 16
%S=bitcast i8*%R to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12keyValuePairE_293 to void(...)*),void(...)**%S,align 8
%T=getelementptr inbounds i8,i8*%K,i64 24
%U=bitcast i8*%T to i32*
store i32 -2147483647,i32*%U,align 4
%V=load i8*,i8**%c,align 8
%W=getelementptr inbounds i8,i8*%V,i64 8
%X=bitcast i8*%W to i8**
%Y=load i8*,i8**%X,align 8
store i8*%Y,i8**%c,align 8
%Z=call i8*@sml_alloc(i32 inreg 20)#0
%aa=getelementptr inbounds i8,i8*%Z,i64 -4
%ab=bitcast i8*%aa to i32*
store i32 1342177296,i32*%ab,align 4
%ac=load i8*,i8**%d,align 8
%ad=bitcast i8*%Z to i8**
store i8*%ac,i8**%ad,align 8
%ae=load i8*,i8**%c,align 8
%af=getelementptr inbounds i8,i8*%Z,i64 8
%ag=bitcast i8*%af to i8**
store i8*%ae,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%Z,i64 16
%ai=bitcast i8*%ah to i32*
store i32 3,i32*%ai,align 4
%aj=load i8*,i8**%f,align 8
%ak=tail call fastcc i8*%u(i8*inreg%aj,i8*inreg%Z)
ret i8*%ak
}
define internal fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_295(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
store i8*%l,i8**%f,align 8
%o=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%r=getelementptr inbounds i8,i8*%l,i64 8
%s=bitcast i8*%r to i8**
store i8*%q,i8**%s,align 8
%t=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%u=getelementptr inbounds i8,i8*%l,i64 16
%v=bitcast i8*%u to i8**
store i8*%t,i8**%v,align 8
%w=getelementptr inbounds i8,i8*%l,i64 24
%x=bitcast i8*%w to i32*
store i32 7,i32*%x,align 4
%y=call i8*@sml_alloc(i32 inreg 28)#0
%z=getelementptr inbounds i8,i8*%y,i64 -4
%A=bitcast i8*%z to i32*
store i32 1342177304,i32*%A,align 4
%B=load i8*,i8**%f,align 8
%C=bitcast i8*%y to i8**
store i8*%B,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%y,i64 8
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12keyValuePairE_294 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%y,i64 16
%G=bitcast i8*%F to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12keyValuePairE_294 to void(...)*),void(...)**%G,align 8
%H=getelementptr inbounds i8,i8*%y,i64 24
%I=bitcast i8*%H to i32*
store i32 -2147483647,i32*%I,align 4
ret i8*%y
}
define internal fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_296(i8*inreg%a)#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i8**
%f=load i8*,i8**%e,align 8
store i8*%f,i8**%b,align 8
%g=getelementptr inbounds i8,i8*%a,i64 8
%h=bitcast i8*%g to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%c,align 8
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i8**
store i8*%o,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%j,i64 16
%s=bitcast i8*%r to i32*
store i32 3,i32*%s,align 4
%t=call i8*@sml_alloc(i32 inreg 28)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177304,i32*%v,align 4
%w=load i8*,i8**%d,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12keyValuePairE_295 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%t,i64 16
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12keyValuePairE_295 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%t,i64 24
%D=bitcast i8*%C to i32*
store i32 -2147483647,i32*%D,align 4
ret i8*%t
}
define internal fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_298(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=bitcast i8*%h to i8**
%k=load i8*,i8**%j,align 8
%l=getelementptr inbounds i8,i8*%h,i64 8
%m=bitcast i8*%l to i8**
%n=load i8*,i8**%m,align 8
%o=getelementptr inbounds i8,i8*%n,i64 16
%p=bitcast i8*%o to i8*(i8*,i8*)**
%q=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%p,align 8
%r=bitcast i8*%n to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%b,align 8
%t=getelementptr inbounds i8,i8*%k,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%k to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
%A=tail call fastcc i8*%q(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define internal fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_300(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=bitcast i8*%h to i8**
%k=load i8*,i8**%j,align 8
%l=getelementptr inbounds i8,i8*%h,i64 8
%m=bitcast i8*%l to i8**
%n=load i8*,i8**%m,align 8
%o=getelementptr inbounds i8,i8*%n,i64 16
%p=bitcast i8*%o to i8*(i8*,i8*)**
%q=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%p,align 8
%r=bitcast i8*%n to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%b,align 8
%t=getelementptr inbounds i8,i8*%k,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%k to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
%A=tail call fastcc i8*%q(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define internal fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_302(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=bitcast i8*%h to i8**
%k=load i8*,i8**%j,align 8
%l=getelementptr inbounds i8,i8*%h,i64 8
%m=bitcast i8*%l to i8**
%n=load i8*,i8**%m,align 8
%o=getelementptr inbounds i8,i8*%n,i64 16
%p=bitcast i8*%o to i8*(i8*,i8*)**
%q=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%p,align 8
%r=bitcast i8*%n to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%b,align 8
%t=getelementptr inbounds i8,i8*%k,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%k to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
%A=tail call fastcc i8*%q(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define internal fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_304(i8*inreg%a)unnamed_addr#2 gc"smlsharp"{
o:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%b,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%m,label%k
k:
call void@sml_check(i32 inreg%i)
%l=load i8*,i8**%b,align 8
br label%m
m:
%n=phi i8*[%l,%k],[%a,%o]
%p=bitcast i8*%n to i8**
%q=load i8*,i8**%p,align 8
store i8*%q,i8**%b,align 8
%r=getelementptr inbounds i8,i8*%n,i64 8
%s=bitcast i8*%r to i8**
%t=load i8*,i8**%s,align 8
store i8*%t,i8**%c,align 8
%u=getelementptr inbounds i8,i8*%n,i64 16
%v=bitcast i8*%u to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%d,align 8
%x=call fastcc i8*@_SMLLLN10TermFormat10FormatComb6guard__E_186(i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,i8*,i32}>,<{[4x i8],i32,i8*,i8*,i32}>*@K,i64 0,i32 2)to i8*))
%y=getelementptr inbounds i8,i8*%x,i64 16
%z=bitcast i8*%y to i8*(i8*,i8*)**
%A=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%z,align 8
%B=bitcast i8*%x to i8**
%C=load i8*,i8**%B,align 8
%D=call fastcc i8*%A(i8*inreg%C,i8*inreg null)
%E=getelementptr inbounds i8,i8*%D,i64 16
%F=bitcast i8*%E to i8*(i8*,i8*,i8*,i8*,i8*)**
%G=load i8*(i8*,i8*,i8*,i8*,i8*)*,i8*(i8*,i8*,i8*,i8*,i8*)**%F,align 8
%H=bitcast i8*%D to i8**
%I=load i8*,i8**%H,align 8
store i8*%I,i8**%e,align 8
%J=call i8*@sml_alloc(i32 inreg 4)#0
%K=bitcast i8*%J to i32*
%L=getelementptr inbounds i8,i8*%J,i64 -4
%M=bitcast i8*%L to i32*
store i32 4,i32*%M,align 4
store i8*%J,i8**%f,align 8
store i32 1,i32*%K,align 4
%N=call i8*@sml_alloc(i32 inreg 4)#0
%O=bitcast i8*%N to i32*
%P=getelementptr inbounds i8,i8*%N,i64 -4
%Q=bitcast i8*%P to i32*
store i32 4,i32*%Q,align 4
store i8*%N,i8**%g,align 8
store i32 8,i32*%O,align 4
%R=call i8*@sml_alloc(i32 inreg 4)#0
%S=bitcast i8*%R to i32*
%T=getelementptr inbounds i8,i8*%R,i64 -4
%U=bitcast i8*%T to i32*
store i32 4,i32*%U,align 4
store i8*%R,i8**%h,align 8
store i32 1,i32*%S,align 4
%V=call i8*@sml_alloc(i32 inreg 4)#0
%W=bitcast i8*%V to i32*
%X=getelementptr inbounds i8,i8*%V,i64 -4
%Y=bitcast i8*%X to i32*
store i32 4,i32*%Y,align 4
store i32 8,i32*%W,align 4
%Z=load i8*,i8**%e,align 8
%aa=load i8*,i8**%f,align 8
%ab=load i8*,i8**%g,align 8
%ac=load i8*,i8**%h,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%f,align 8
store i8*null,i8**%g,align 8
store i8*null,i8**%h,align 8
%ad=call fastcc i8*%G(i8*inreg%Z,i8*inreg%aa,i8*inreg%ab,i8*inreg%ac,i8*inreg%V)
%ae=getelementptr inbounds i8,i8*%ad,i64 16
%af=bitcast i8*%ae to i8*(i8*,i8*)**
%ag=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%af,align 8
%ah=bitcast i8*%ad to i8**
%ai=load i8*,i8**%ah,align 8
%aj=call fastcc i8*%ag(i8*inreg%ai,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@L,i64 0,i32 2)to i8*))
%ak=getelementptr inbounds i8,i8*%aj,i64 16
%al=bitcast i8*%ak to i8*(i8*,i8*)**
%am=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%al,align 8
%an=bitcast i8*%aj to i8**
%ao=load i8*,i8**%an,align 8
%ap=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%aq=call fastcc i8*%am(i8*inreg%ao,i8*inreg%ap)
%ar=getelementptr inbounds i8,i8*%aq,i64 16
%as=bitcast i8*%ar to i8*(i8*,i8*)**
%at=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%as,align 8
%au=bitcast i8*%aq to i8**
%av=load i8*,i8**%au,align 8
%aw=call fastcc i8*%at(i8*inreg%av,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@M,i64 0,i32 2)to i8*))
%ax=getelementptr inbounds i8,i8*%aw,i64 16
%ay=bitcast i8*%ax to i8*(i8*,i8*)**
%az=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ay,align 8
%aA=bitcast i8*%aw to i8**
%aB=load i8*,i8**%aA,align 8
%aC=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aD=call fastcc i8*%az(i8*inreg%aB,i8*inreg%aC)
%aE=getelementptr inbounds i8,i8*%aD,i64 16
%aF=bitcast i8*%aE to i8*(i8*,i8*)**
%aG=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aF,align 8
%aH=bitcast i8*%aD to i8**
%aI=load i8*,i8**%aH,align 8
%aJ=call fastcc i8*%aG(i8*inreg%aI,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@N,i64 0,i32 2)to i8*))
%aK=getelementptr inbounds i8,i8*%aJ,i64 16
%aL=bitcast i8*%aK to i8*(i8*,i8*)**
%aM=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aL,align 8
%aN=bitcast i8*%aJ to i8**
%aO=load i8*,i8**%aN,align 8
store i8*%aO,i8**%b,align 8
%aP=call i8*@sml_alloc(i32 inreg 4)#0
%aQ=bitcast i8*%aP to i32*
%aR=getelementptr inbounds i8,i8*%aP,i64 -4
%aS=bitcast i8*%aR to i32*
store i32 4,i32*%aS,align 4
store i32 2,i32*%aQ,align 4
%aT=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%aU=call fastcc i8*%aM(i8*inreg%aT,i8*inreg%aP)
%aV=getelementptr inbounds i8,i8*%aU,i64 16
%aW=bitcast i8*%aV to i8*(i8*,i8*)**
%aX=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aW,align 8
%aY=bitcast i8*%aU to i8**
%aZ=load i8*,i8**%aY,align 8
%a0=call fastcc i8*%aX(i8*inreg%aZ,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@O,i64 0,i32 2)to i8*))
%a1=getelementptr inbounds i8,i8*%a0,i64 16
%a2=bitcast i8*%a1 to i8*(i8*,i8*)**
%a3=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a2,align 8
%a4=bitcast i8*%a0 to i8**
%a5=load i8*,i8**%a4,align 8
%a6=call fastcc i8*%a3(i8*inreg%a5,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@P,i64 0,i32 2)to i8*))
%a7=getelementptr inbounds i8,i8*%a6,i64 16
%a8=bitcast i8*%a7 to i8*(i8*,i8*)**
%a9=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a8,align 8
%ba=bitcast i8*%a6 to i8**
%bb=load i8*,i8**%ba,align 8
%bc=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bd=call fastcc i8*%a9(i8*inreg%bb,i8*inreg%bc)
%be=getelementptr inbounds i8,i8*%bd,i64 16
%bf=bitcast i8*%be to i8*(i8*,i8*)**
%bg=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bf,align 8
%bh=bitcast i8*%bd to i8**
%bi=load i8*,i8**%bh,align 8
%bj=call fastcc i8*%bg(i8*inreg%bi,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@Q,i64 0,i32 2)to i8*))
%bk=getelementptr inbounds i8,i8*%bj,i64 16
%bl=bitcast i8*%bk to i8*(i8*,i8*)**
%bm=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bl,align 8
%bn=bitcast i8*%bj to i8**
%bo=load i8*,i8**%bn,align 8
%bp=call fastcc i8*%bm(i8*inreg%bo,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@R,i64 0,i32 2)to i8*))
%bq=getelementptr inbounds i8,i8*%bp,i64 16
%br=bitcast i8*%bq to i8*(i8*,i8*)**
%bs=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%br,align 8
%bt=bitcast i8*%bp to i8**
%bu=load i8*,i8**%bt,align 8
%bv=tail call fastcc i8*%bs(i8*inreg%bu,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@S,i64 0,i32 2)to i8*))
ret i8*%bv
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedSEnvE_306(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%b to i8**
br label%p
k:
call void@sml_check(i32 inreg%g)
%l=bitcast i8**%c to i8***
%m=load i8**,i8***%l,align 8
%n=load i8*,i8**%e,align 8
%o=bitcast i8**%m to i8*
br label%p
p:
%q=phi i8*[%o,%k],[%b,%i]
%r=phi i8*[%n,%k],[%a,%i]
%s=phi i8**[%m,%k],[%j,%i]
%t=getelementptr inbounds i8,i8*%r,i64 20
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=add i32%v,7
%x=sub i32 0,%v
%y=and i32%w,%x
%z=load i8*,i8**%s,align 8
store i8*%z,i8**%d,align 8
%A=getelementptr inbounds i8,i8*%r,i64 16
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=icmp eq i32%C,0
br i1%D,label%K,label%E
E:
%F=bitcast i8*%z to i32*
store i8*null,i8**%c,align 8
%G=sext i32%y to i64
%H=getelementptr inbounds i8,i8*%q,i64%G
%I=bitcast i8*%H to i8**
%J=load i8*,i8**%I,align 8
br label%T
K:
%L=call i8*@sml_alloc(i32 inreg%v)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32%v,i32*%N,align 4
%O=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%P=sext i32%y to i64
%Q=getelementptr inbounds i8,i8*%O,i64%P
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%L,i8*%Q,i32%v,i1 false)
%R=bitcast i8**%d to i32**
%S=load i32*,i32**%R,align 8
br label%T
T:
%U=phi i32*[%S,%K],[%F,%E]
%V=phi i8*[%L,%K],[%J,%E]
store i8*%V,i8**%c,align 8
%W=getelementptr inbounds i32,i32*%U,i64 -1
%X=load i32,i32*%W,align 4
%Y=and i32%X,268435455
%Z=add nsw i32%Y,-1
%aa=call i8*@sml_alloc(i32 inreg 20)#0
%ab=getelementptr inbounds i8,i8*%aa,i64 -4
%ac=bitcast i8*%ab to i32*
store i32 1342177296,i32*%ac,align 4
store i8*%aa,i8**%f,align 8
%ad=getelementptr inbounds i8,i8*%aa,i64 4
%ae=bitcast i8*%ad to i32*
store i32 0,i32*%ae,align 1
%af=bitcast i8*%aa to i32*
store i32%Z,i32*%af,align 4
%ag=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ah=getelementptr inbounds i8,i8*%aa,i64 8
%ai=bitcast i8*%ah to i8**
store i8*%ag,i8**%ai,align 8
%aj=getelementptr inbounds i8,i8*%aa,i64 16
%ak=bitcast i8*%aj to i32*
store i32 2,i32*%ak,align 4
%al=call i8*@sml_alloc(i32 inreg 20)#0
%am=getelementptr inbounds i8,i8*%al,i64 -4
%an=bitcast i8*%am to i32*
store i32 1342177296,i32*%an,align 4
store i8*%al,i8**%d,align 8
%ao=getelementptr inbounds i8,i8*%al,i64 4
%ap=bitcast i8*%ao to i32*
store i32 0,i32*%ap,align 1
%aq=bitcast i8*%al to i32*
store i32 6,i32*%aq,align 4
%ar=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%as=getelementptr inbounds i8,i8*%al,i64 8
%at=bitcast i8*%as to i8**
store i8*%ar,i8**%at,align 8
%au=getelementptr inbounds i8,i8*%al,i64 16
%av=bitcast i8*%au to i32*
store i32 2,i32*%av,align 4
%aw=call i8*@sml_alloc(i32 inreg 20)#0
%ax=getelementptr inbounds i8,i8*%aw,i64 -4
%ay=bitcast i8*%ax to i32*
store i32 1342177296,i32*%ay,align 4
store i8*%aw,i8**%f,align 8
%az=load i8*,i8**%d,align 8
%aA=bitcast i8*%aw to i8**
store i8*%az,i8**%aA,align 8
%aB=getelementptr inbounds i8,i8*%aw,i64 8
%aC=bitcast i8*%aB to i8**
store i8*null,i8**%aC,align 8
%aD=getelementptr inbounds i8,i8*%aw,i64 16
%aE=bitcast i8*%aD to i32*
store i32 3,i32*%aE,align 4
%aF=load i8*,i8**%e,align 8
%aG=getelementptr inbounds i8,i8*%aF,i64 8
%aH=bitcast i8*%aG to i8**
%aI=load i8*,i8**%aH,align 8
store i8*%aI,i8**%d,align 8
%aJ=bitcast i8*%aF to i8**
%aK=load i8*,i8**%aJ,align 8
%aL=getelementptr inbounds i8,i8*%aK,i64 16
%aM=bitcast i8*%aL to i8*(i8*,i8*)**
%aN=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aM,align 8
store i8*null,i8**%e,align 8
%aO=bitcast i8*%aF to i8***
%aP=load i8**,i8***%aO,align 8
%aQ=load i8*,i8**%aP,align 8
%aR=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aS=call fastcc i8*%aN(i8*inreg%aQ,i8*inreg%aR)
store i8*%aS,i8**%c,align 8
%aT=call i8*@sml_alloc(i32 inreg 28)#0
%aU=getelementptr inbounds i8,i8*%aT,i64 -4
%aV=bitcast i8*%aU to i32*
store i32 1342177304,i32*%aV,align 4
%aW=load i8*,i8**%f,align 8
%aX=bitcast i8*%aT to i8**
store i8*%aW,i8**%aX,align 8
%aY=load i8*,i8**%d,align 8
%aZ=getelementptr inbounds i8,i8*%aT,i64 8
%a0=bitcast i8*%aZ to i8**
store i8*%aY,i8**%a0,align 8
%a1=load i8*,i8**%c,align 8
%a2=getelementptr inbounds i8,i8*%aT,i64 16
%a3=bitcast i8*%a2 to i8**
store i8*%a1,i8**%a3,align 8
%a4=getelementptr inbounds i8,i8*%aT,i64 24
%a5=bitcast i8*%a4 to i32*
store i32 7,i32*%a5,align 4
%a6=tail call fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_304(i8*inreg%aT)
ret i8*%a6
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedSEnvE_307(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
q:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
store i8*%a,i8**%i,align 8
store i8*%b,i8**%j,align 8
%k=load atomic i32,i32*@sml_check_flag unordered,align 4
%l=icmp eq i32%k,0
br i1%l,label%o,label%m
m:
call void@sml_check(i32 inreg%k)
%n=load i8*,i8**%i,align 8
br label%o
o:
%p=phi i8*[%n,%m],[%a,%q]
%r=getelementptr inbounds i8,i8*%p,i64 8
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=getelementptr inbounds i8,i8*%p,i64 12
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=call fastcc i8*@_SMLFN4SEnv10listItemsiE(i32 inreg%t,i32 inreg%w)
store i8*%x,i8**%c,align 8
%y=bitcast i8**%i to i8****
%z=load i8***,i8****%y,align 8
%A=load i8**,i8***%z,align 8
%B=load i8*,i8**%A,align 8
store i8*%B,i8**%d,align 8
%C=bitcast i8***%z to i8**
%D=load i8*,i8**%C,align 8
%E=getelementptr inbounds i8,i8*%D,i64 8
%F=bitcast i8*%E to i8**
%G=load i8*,i8**%F,align 8
store i8*%G,i8**%e,align 8
%H=load i8*,i8**%C,align 8
%I=getelementptr inbounds i8,i8*%H,i64 16
%J=bitcast i8*%I to i8**
%K=load i8*,i8**%J,align 8
store i8*%K,i8**%f,align 8
%L=load i8*,i8**%C,align 8
%M=getelementptr inbounds i8,i8*%L,i64 24
%N=bitcast i8*%M to i8**
%O=load i8*,i8**%N,align 8
store i8*%O,i8**%g,align 8
%P=load i8*,i8**%C,align 8
%Q=getelementptr inbounds i8,i8*%P,i64 32
%R=bitcast i8*%Q to i8**
%S=load i8*,i8**%R,align 8
store i8*%S,i8**%h,align 8
%T=bitcast i8***%z to i8*
%U=getelementptr inbounds i8**,i8***%z,i64 1
%V=bitcast i8***%U to i32*
%W=load i32,i32*%V,align 4
store i8*null,i8**%i,align 8
%X=getelementptr inbounds i8,i8*%T,i64 12
%Y=bitcast i8*%X to i32*
%Z=load i32,i32*%Y,align 4
%aa=call i8*@sml_alloc(i32 inreg 28)#0
%ab=getelementptr inbounds i8,i8*%aa,i64 -4
%ac=bitcast i8*%ab to i32*
store i32 1342177304,i32*%ac,align 4
store i8*%aa,i8**%i,align 8
%ad=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ae=bitcast i8*%aa to i8**
store i8*%ad,i8**%ae,align 8
%af=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%ag=getelementptr inbounds i8,i8*%aa,i64 8
%ah=bitcast i8*%ag to i8**
store i8*%af,i8**%ah,align 8
%ai=getelementptr inbounds i8,i8*%aa,i64 16
%aj=bitcast i8*%ai to i32*
store i32%W,i32*%aj,align 4
%ak=getelementptr inbounds i8,i8*%aa,i64 20
%al=bitcast i8*%ak to i32*
store i32%Z,i32*%al,align 4
%am=getelementptr inbounds i8,i8*%aa,i64 24
%an=bitcast i8*%am to i32*
store i32 3,i32*%an,align 4
%ao=call i8*@sml_alloc(i32 inreg 28)#0
%ap=getelementptr inbounds i8,i8*%ao,i64 -4
%aq=bitcast i8*%ap to i32*
store i32 1342177304,i32*%aq,align 4
store i8*%ao,i8**%d,align 8
%ar=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%as=bitcast i8*%ao to i8**
store i8*%ar,i8**%as,align 8
%at=getelementptr inbounds i8,i8*%ao,i64 8
%au=bitcast i8*%at to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedSEnvE_306 to void(...)*),void(...)**%au,align 8
%av=getelementptr inbounds i8,i8*%ao,i64 16
%aw=bitcast i8*%av to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedSEnvE_306 to void(...)*),void(...)**%aw,align 8
%ax=getelementptr inbounds i8,i8*%ao,i64 24
%ay=bitcast i8*%ax to i32*
store i32 -2147483647,i32*%ay,align 4
%az=call i8*@sml_alloc(i32 inreg 36)#0
%aA=getelementptr inbounds i8,i8*%az,i64 -4
%aB=bitcast i8*%aA to i32*
store i32 1342177312,i32*%aB,align 4
%aC=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aD=bitcast i8*%az to i8**
store i8*%aC,i8**%aD,align 8
%aE=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aF=getelementptr inbounds i8,i8*%az,i64 8
%aG=bitcast i8*%aF to i8**
store i8*%aE,i8**%aG,align 8
%aH=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%aI=getelementptr inbounds i8,i8*%az,i64 16
%aJ=bitcast i8*%aI to i8**
store i8*%aH,i8**%aJ,align 8
%aK=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%aL=getelementptr inbounds i8,i8*%az,i64 24
%aM=bitcast i8*%aL to i8**
store i8*%aK,i8**%aM,align 8
%aN=getelementptr inbounds i8,i8*%az,i64 32
%aO=bitcast i8*%aN to i32*
store i32 15,i32*%aO,align 4
%aP=call fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_229(i32 inreg 1,i32 inreg 8,i8*inreg%az)
%aQ=getelementptr inbounds i8,i8*%aP,i64 16
%aR=bitcast i8*%aQ to i8*(i8*,i8*)**
%aS=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aR,align 8
%aT=bitcast i8*%aP to i8**
%aU=load i8*,i8**%aT,align 8
store i8*%aU,i8**%d,align 8
%aV=load i8*,i8**%c,align 8
%aW=getelementptr inbounds i8,i8*%aV,i64 16
%aX=bitcast i8*%aW to i8*(i8*,i8*)**
%aY=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aX,align 8
store i8*null,i8**%c,align 8
%aZ=bitcast i8*%aV to i8**
%a0=load i8*,i8**%aZ,align 8
%a1=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%a2=call fastcc i8*%aY(i8*inreg%a0,i8*inreg%a1)
%a3=load i8*,i8**%d,align 8
%a4=tail call fastcc i8*%aS(i8*inreg%a3,i8*inreg%a2)
ret i8*%a4
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedSEnvE_308(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedSEnvE_307 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedSEnvE_307 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat18formatEnclosedSEnvE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedSEnvE_308 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedSEnvE_308 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLLN10TermFormat22formatEnclosedLabelMapE_311(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%b to i8**
br label%p
k:
call void@sml_check(i32 inreg%g)
%l=bitcast i8**%c to i8***
%m=load i8**,i8***%l,align 8
%n=load i8*,i8**%e,align 8
%o=bitcast i8**%m to i8*
br label%p
p:
%q=phi i8*[%o,%k],[%b,%i]
%r=phi i8*[%n,%k],[%a,%i]
%s=phi i8**[%m,%k],[%j,%i]
%t=getelementptr inbounds i8,i8*%r,i64 20
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=add i32%v,7
%x=sub i32 0,%v
%y=and i32%w,%x
%z=load i8*,i8**%s,align 8
store i8*%z,i8**%d,align 8
%A=getelementptr inbounds i8,i8*%r,i64 16
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=icmp eq i32%C,0
br i1%D,label%J,label%E
E:
store i8*null,i8**%c,align 8
%F=sext i32%y to i64
%G=getelementptr inbounds i8,i8*%q,i64%F
%H=bitcast i8*%G to i8**
%I=load i8*,i8**%H,align 8
br label%R
J:
%K=call i8*@sml_alloc(i32 inreg%v)#0
%L=getelementptr inbounds i8,i8*%K,i64 -4
%M=bitcast i8*%L to i32*
store i32%v,i32*%M,align 4
%N=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%O=sext i32%y to i64
%P=getelementptr inbounds i8,i8*%N,i64%O
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%K,i8*%P,i32%v,i1 false)
%Q=load i8*,i8**%d,align 8
br label%R
R:
%S=phi i8*[%Q,%J],[%z,%E]
%T=phi i8*[%K,%J],[%I,%E]
store i8*%T,i8**%c,align 8
store i8*null,i8**%d,align 8
%U=call fastcc i8*@_SMLFN11RecordLabel12format__labelE(i8*inreg%S)
store i8*%U,i8**%d,align 8
%V=load i8*,i8**%e,align 8
%W=getelementptr inbounds i8,i8*%V,i64 8
%X=bitcast i8*%W to i8**
%Y=load i8*,i8**%X,align 8
store i8*%Y,i8**%f,align 8
%Z=bitcast i8*%V to i8**
%aa=load i8*,i8**%Z,align 8
%ab=getelementptr inbounds i8,i8*%aa,i64 16
%ac=bitcast i8*%ab to i8*(i8*,i8*)**
%ad=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ac,align 8
store i8*null,i8**%e,align 8
%ae=bitcast i8*%V to i8***
%af=load i8**,i8***%ae,align 8
%ag=load i8*,i8**%af,align 8
%ah=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ai=call fastcc i8*%ad(i8*inreg%ag,i8*inreg%ah)
store i8*%ai,i8**%c,align 8
%aj=call i8*@sml_alloc(i32 inreg 28)#0
%ak=getelementptr inbounds i8,i8*%aj,i64 -4
%al=bitcast i8*%ak to i32*
store i32 1342177304,i32*%al,align 4
%am=load i8*,i8**%d,align 8
%an=bitcast i8*%aj to i8**
store i8*%am,i8**%an,align 8
%ao=load i8*,i8**%f,align 8
%ap=getelementptr inbounds i8,i8*%aj,i64 8
%aq=bitcast i8*%ap to i8**
store i8*%ao,i8**%aq,align 8
%ar=load i8*,i8**%c,align 8
%as=getelementptr inbounds i8,i8*%aj,i64 16
%at=bitcast i8*%as to i8**
store i8*%ar,i8**%at,align 8
%au=getelementptr inbounds i8,i8*%aj,i64 24
%av=bitcast i8*%au to i32*
store i32 7,i32*%av,align 4
%aw=tail call fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_304(i8*inreg%aj)
ret i8*%aw
}
define internal fastcc i8*@_SMLLLN10TermFormat22formatEnclosedLabelMapE_312(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
q:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
store i8*%a,i8**%i,align 8
store i8*%b,i8**%j,align 8
%k=load atomic i32,i32*@sml_check_flag unordered,align 4
%l=icmp eq i32%k,0
br i1%l,label%o,label%m
m:
call void@sml_check(i32 inreg%k)
%n=load i8*,i8**%i,align 8
br label%o
o:
%p=phi i8*[%n,%m],[%a,%q]
%r=getelementptr inbounds i8,i8*%p,i64 8
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=getelementptr inbounds i8,i8*%p,i64 12
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=call fastcc i8*@_SMLFN11RecordLabel3Map10listItemsiE(i32 inreg%t,i32 inreg%w)
store i8*%x,i8**%c,align 8
%y=bitcast i8**%i to i8****
%z=load i8***,i8****%y,align 8
%A=load i8**,i8***%z,align 8
%B=load i8*,i8**%A,align 8
store i8*%B,i8**%d,align 8
%C=bitcast i8***%z to i8**
%D=load i8*,i8**%C,align 8
%E=getelementptr inbounds i8,i8*%D,i64 8
%F=bitcast i8*%E to i8**
%G=load i8*,i8**%F,align 8
store i8*%G,i8**%e,align 8
%H=load i8*,i8**%C,align 8
%I=getelementptr inbounds i8,i8*%H,i64 16
%J=bitcast i8*%I to i8**
%K=load i8*,i8**%J,align 8
store i8*%K,i8**%f,align 8
%L=load i8*,i8**%C,align 8
%M=getelementptr inbounds i8,i8*%L,i64 24
%N=bitcast i8*%M to i8**
%O=load i8*,i8**%N,align 8
store i8*%O,i8**%g,align 8
%P=load i8*,i8**%C,align 8
%Q=getelementptr inbounds i8,i8*%P,i64 32
%R=bitcast i8*%Q to i8**
%S=load i8*,i8**%R,align 8
store i8*%S,i8**%h,align 8
%T=bitcast i8***%z to i8*
%U=getelementptr inbounds i8**,i8***%z,i64 1
%V=bitcast i8***%U to i32*
%W=load i32,i32*%V,align 4
store i8*null,i8**%i,align 8
%X=getelementptr inbounds i8,i8*%T,i64 12
%Y=bitcast i8*%X to i32*
%Z=load i32,i32*%Y,align 4
%aa=call i8*@sml_alloc(i32 inreg 28)#0
%ab=getelementptr inbounds i8,i8*%aa,i64 -4
%ac=bitcast i8*%ab to i32*
store i32 1342177304,i32*%ac,align 4
store i8*%aa,i8**%i,align 8
%ad=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ae=bitcast i8*%aa to i8**
store i8*%ad,i8**%ae,align 8
%af=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%ag=getelementptr inbounds i8,i8*%aa,i64 8
%ah=bitcast i8*%ag to i8**
store i8*%af,i8**%ah,align 8
%ai=getelementptr inbounds i8,i8*%aa,i64 16
%aj=bitcast i8*%ai to i32*
store i32%W,i32*%aj,align 4
%ak=getelementptr inbounds i8,i8*%aa,i64 20
%al=bitcast i8*%ak to i32*
store i32%Z,i32*%al,align 4
%am=getelementptr inbounds i8,i8*%aa,i64 24
%an=bitcast i8*%am to i32*
store i32 3,i32*%an,align 4
%ao=call i8*@sml_alloc(i32 inreg 28)#0
%ap=getelementptr inbounds i8,i8*%ao,i64 -4
%aq=bitcast i8*%ap to i32*
store i32 1342177304,i32*%aq,align 4
store i8*%ao,i8**%d,align 8
%ar=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%as=bitcast i8*%ao to i8**
store i8*%ar,i8**%as,align 8
%at=getelementptr inbounds i8,i8*%ao,i64 8
%au=bitcast i8*%at to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat22formatEnclosedLabelMapE_311 to void(...)*),void(...)**%au,align 8
%av=getelementptr inbounds i8,i8*%ao,i64 16
%aw=bitcast i8*%av to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat22formatEnclosedLabelMapE_311 to void(...)*),void(...)**%aw,align 8
%ax=getelementptr inbounds i8,i8*%ao,i64 24
%ay=bitcast i8*%ax to i32*
store i32 -2147483647,i32*%ay,align 4
%az=call i8*@sml_alloc(i32 inreg 36)#0
%aA=getelementptr inbounds i8,i8*%az,i64 -4
%aB=bitcast i8*%aA to i32*
store i32 1342177312,i32*%aB,align 4
%aC=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aD=bitcast i8*%az to i8**
store i8*%aC,i8**%aD,align 8
%aE=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aF=getelementptr inbounds i8,i8*%az,i64 8
%aG=bitcast i8*%aF to i8**
store i8*%aE,i8**%aG,align 8
%aH=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%aI=getelementptr inbounds i8,i8*%az,i64 16
%aJ=bitcast i8*%aI to i8**
store i8*%aH,i8**%aJ,align 8
%aK=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%aL=getelementptr inbounds i8,i8*%az,i64 24
%aM=bitcast i8*%aL to i8**
store i8*%aK,i8**%aM,align 8
%aN=getelementptr inbounds i8,i8*%az,i64 32
%aO=bitcast i8*%aN to i32*
store i32 15,i32*%aO,align 4
%aP=call fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_229(i32 inreg 1,i32 inreg 8,i8*inreg%az)
%aQ=getelementptr inbounds i8,i8*%aP,i64 16
%aR=bitcast i8*%aQ to i8*(i8*,i8*)**
%aS=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aR,align 8
%aT=bitcast i8*%aP to i8**
%aU=load i8*,i8**%aT,align 8
store i8*%aU,i8**%d,align 8
%aV=load i8*,i8**%c,align 8
%aW=getelementptr inbounds i8,i8*%aV,i64 16
%aX=bitcast i8*%aW to i8*(i8*,i8*)**
%aY=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aX,align 8
store i8*null,i8**%c,align 8
%aZ=bitcast i8*%aV to i8**
%a0=load i8*,i8**%aZ,align 8
%a1=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%a2=call fastcc i8*%aY(i8*inreg%a0,i8*inreg%a1)
%a3=load i8*,i8**%d,align 8
%a4=tail call fastcc i8*%aS(i8*inreg%a3,i8*inreg%a2)
ret i8*%a4
}
define internal fastcc i8*@_SMLLLN10TermFormat22formatEnclosedLabelMapE_313(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat22formatEnclosedLabelMapE_312 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat22formatEnclosedLabelMapE_312 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat22formatEnclosedLabelMapE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat22formatEnclosedLabelMapE_313 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat22formatEnclosedLabelMapE_313 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_318(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_320(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%b,i8**%c,align 8
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=getelementptr inbounds i8,i8*%h,i64 4
%l=bitcast i8*%k to i32*
store i32 0,i32*%l,align 1
%m=bitcast i8*%h to i32*
store i32 4,i32*%m,align 4
%n=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%o=getelementptr inbounds i8,i8*%h,i64 8
%p=bitcast i8*%o to i8**
store i8*%n,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 2,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 20)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177296,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=load i8*,i8**%c,align 8
%y=getelementptr inbounds i8,i8*%s,i64 8
%z=bitcast i8*%y to i8**
store i8*%x,i8**%z,align 8
%A=getelementptr inbounds i8,i8*%s,i64 16
%B=bitcast i8*%A to i32*
store i32 3,i32*%B,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_321(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=bitcast i8**%d to i8***
%m=load i8**,i8***%l,align 8
%n=bitcast i8**%m to i8*
br label%o
o:
%p=phi i8*[%n,%k],[%a,%i]
%q=phi i8**[%m,%k],[%j,%i]
%r=load i8*,i8**%q,align 8
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%e,align 8
%x=getelementptr inbounds i8,i8*%p,i64 8
%y=bitcast i8*%x to i8**
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%d,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%f,align 8
%D=getelementptr inbounds i8,i8*%A,i64 4
%E=bitcast i8*%D to i32*
store i32 0,i32*%E,align 1
%F=bitcast i8*%A to i32*
store i32 4,i32*%F,align 4
%G=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%H=getelementptr inbounds i8,i8*%A,i64 8
%I=bitcast i8*%H to i8**
store i8*%G,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%A,i64 16
%K=bitcast i8*%J to i32*
store i32 2,i32*%K,align 4
%L=call i8*@sml_alloc(i32 inreg 20)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32 1342177296,i32*%N,align 4
%O=load i8*,i8**%f,align 8
%P=bitcast i8*%L to i8**
store i8*%O,i8**%P,align 8
%Q=load i8*,i8**%c,align 8
%R=getelementptr inbounds i8,i8*%L,i64 8
%S=bitcast i8*%R to i8**
store i8*%Q,i8**%S,align 8
%T=getelementptr inbounds i8,i8*%L,i64 16
%U=bitcast i8*%T to i32*
store i32 3,i32*%U,align 4
%V=load i8*,i8**%e,align 8
%W=tail call fastcc i8*%u(i8*inreg%V,i8*inreg%L)
ret i8*%W
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_322(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8**
br label%p
l:
call void@sml_check(i32 inreg%h)
%m=load i8*,i8**%d,align 8
%n=bitcast i8**%c to i8***
%o=load i8**,i8***%n,align 8
br label%p
p:
%q=phi i8**[%o,%l],[%k,%j]
%r=phi i8*[%m,%l],[%b,%j]
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%f,align 8
%x=load i8*,i8**%q,align 8
store i8*%x,i8**%d,align 8
%y=getelementptr inbounds i8*,i8**%q,i64 2
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%e,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%g,align 8
%D=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%E=bitcast i8*%A to i8**
store i8*%D,i8**%E,align 8
%F=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%G=getelementptr inbounds i8,i8*%A,i64 8
%H=bitcast i8*%G to i8**
store i8*%F,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%A,i64 16
%J=bitcast i8*%I to i32*
store i32 3,i32*%J,align 4
%K=call i8*@sml_alloc(i32 inreg 28)#0
%L=getelementptr inbounds i8,i8*%K,i64 -4
%M=bitcast i8*%L to i32*
store i32 1342177304,i32*%M,align 4
store i8*%K,i8**%d,align 8
%N=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%O=bitcast i8*%K to i8**
store i8*%N,i8**%O,align 8
%P=getelementptr inbounds i8,i8*%K,i64 8
%Q=bitcast i8*%P to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_321 to void(...)*),void(...)**%Q,align 8
%R=getelementptr inbounds i8,i8*%K,i64 16
%S=bitcast i8*%R to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_321 to void(...)*),void(...)**%S,align 8
%T=getelementptr inbounds i8,i8*%K,i64 24
%U=bitcast i8*%T to i32*
store i32 -2147483647,i32*%U,align 4
%V=load i8*,i8**%c,align 8
%W=getelementptr inbounds i8,i8*%V,i64 8
%X=bitcast i8*%W to i8**
%Y=load i8*,i8**%X,align 8
store i8*%Y,i8**%c,align 8
%Z=call i8*@sml_alloc(i32 inreg 20)#0
%aa=getelementptr inbounds i8,i8*%Z,i64 -4
%ab=bitcast i8*%aa to i32*
store i32 1342177296,i32*%ab,align 4
%ac=load i8*,i8**%d,align 8
%ad=bitcast i8*%Z to i8**
store i8*%ac,i8**%ad,align 8
%ae=load i8*,i8**%c,align 8
%af=getelementptr inbounds i8,i8*%Z,i64 8
%ag=bitcast i8*%af to i8**
store i8*%ae,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%Z,i64 16
%ai=bitcast i8*%ah to i32*
store i32 3,i32*%ai,align 4
%aj=load i8*,i8**%f,align 8
%ak=tail call fastcc i8*%u(i8*inreg%aj,i8*inreg%Z)
ret i8*%ak
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_323(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
store i8*%l,i8**%f,align 8
%o=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%r=getelementptr inbounds i8,i8*%l,i64 8
%s=bitcast i8*%r to i8**
store i8*%q,i8**%s,align 8
%t=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%u=getelementptr inbounds i8,i8*%l,i64 16
%v=bitcast i8*%u to i8**
store i8*%t,i8**%v,align 8
%w=getelementptr inbounds i8,i8*%l,i64 24
%x=bitcast i8*%w to i32*
store i32 7,i32*%x,align 4
%y=call i8*@sml_alloc(i32 inreg 28)#0
%z=getelementptr inbounds i8,i8*%y,i64 -4
%A=bitcast i8*%z to i32*
store i32 1342177304,i32*%A,align 4
%B=load i8*,i8**%f,align 8
%C=bitcast i8*%y to i8**
store i8*%B,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%y,i64 8
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_322 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%y,i64 16
%G=bitcast i8*%F to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_322 to void(...)*),void(...)**%G,align 8
%H=getelementptr inbounds i8,i8*%y,i64 24
%I=bitcast i8*%H to i32*
store i32 -2147483647,i32*%I,align 4
ret i8*%y
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_324(i8*inreg%a)#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i8**
%f=load i8*,i8**%e,align 8
store i8*%f,i8**%b,align 8
%g=getelementptr inbounds i8,i8*%a,i64 8
%h=bitcast i8*%g to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%c,align 8
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i8**
store i8*%o,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%j,i64 16
%s=bitcast i8*%r to i32*
store i32 3,i32*%s,align 4
%t=call i8*@sml_alloc(i32 inreg 28)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177304,i32*%v,align 4
%w=load i8*,i8**%d,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_323 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%t,i64 16
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_323 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%t,i64 24
%D=bitcast i8*%C to i32*
store i32 -2147483647,i32*%D,align 4
ret i8*%t
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_327(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=bitcast i8**%d to i8***
%m=load i8**,i8***%l,align 8
%n=bitcast i8**%m to i8*
br label%o
o:
%p=phi i8*[%n,%k],[%a,%i]
%q=phi i8**[%m,%k],[%j,%i]
%r=load i8*,i8**%q,align 8
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%e,align 8
%x=getelementptr inbounds i8,i8*%p,i64 8
%y=bitcast i8*%x to i8**
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%d,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%f,align 8
%D=getelementptr inbounds i8,i8*%A,i64 4
%E=bitcast i8*%D to i32*
store i32 0,i32*%E,align 1
%F=bitcast i8*%A to i32*
store i32 4,i32*%F,align 4
%G=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%H=getelementptr inbounds i8,i8*%A,i64 8
%I=bitcast i8*%H to i8**
store i8*%G,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%A,i64 16
%K=bitcast i8*%J to i32*
store i32 2,i32*%K,align 4
%L=call i8*@sml_alloc(i32 inreg 20)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32 1342177296,i32*%N,align 4
%O=load i8*,i8**%f,align 8
%P=bitcast i8*%L to i8**
store i8*%O,i8**%P,align 8
%Q=load i8*,i8**%c,align 8
%R=getelementptr inbounds i8,i8*%L,i64 8
%S=bitcast i8*%R to i8**
store i8*%Q,i8**%S,align 8
%T=getelementptr inbounds i8,i8*%L,i64 16
%U=bitcast i8*%T to i32*
store i32 3,i32*%U,align 4
%V=load i8*,i8**%e,align 8
%W=tail call fastcc i8*%u(i8*inreg%V,i8*inreg%L)
ret i8*%W
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_328(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8**
br label%p
l:
call void@sml_check(i32 inreg%h)
%m=load i8*,i8**%d,align 8
%n=bitcast i8**%c to i8***
%o=load i8**,i8***%n,align 8
br label%p
p:
%q=phi i8**[%o,%l],[%k,%j]
%r=phi i8*[%m,%l],[%b,%j]
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%f,align 8
%x=load i8*,i8**%q,align 8
store i8*%x,i8**%d,align 8
%y=getelementptr inbounds i8*,i8**%q,i64 2
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%e,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%g,align 8
%D=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%E=bitcast i8*%A to i8**
store i8*%D,i8**%E,align 8
%F=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%G=getelementptr inbounds i8,i8*%A,i64 8
%H=bitcast i8*%G to i8**
store i8*%F,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%A,i64 16
%J=bitcast i8*%I to i32*
store i32 3,i32*%J,align 4
%K=call i8*@sml_alloc(i32 inreg 28)#0
%L=getelementptr inbounds i8,i8*%K,i64 -4
%M=bitcast i8*%L to i32*
store i32 1342177304,i32*%M,align 4
store i8*%K,i8**%d,align 8
%N=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%O=bitcast i8*%K to i8**
store i8*%N,i8**%O,align 8
%P=getelementptr inbounds i8,i8*%K,i64 8
%Q=bitcast i8*%P to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_327 to void(...)*),void(...)**%Q,align 8
%R=getelementptr inbounds i8,i8*%K,i64 16
%S=bitcast i8*%R to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_327 to void(...)*),void(...)**%S,align 8
%T=getelementptr inbounds i8,i8*%K,i64 24
%U=bitcast i8*%T to i32*
store i32 -2147483647,i32*%U,align 4
%V=load i8*,i8**%c,align 8
%W=getelementptr inbounds i8,i8*%V,i64 8
%X=bitcast i8*%W to i8**
%Y=load i8*,i8**%X,align 8
store i8*%Y,i8**%c,align 8
%Z=call i8*@sml_alloc(i32 inreg 20)#0
%aa=getelementptr inbounds i8,i8*%Z,i64 -4
%ab=bitcast i8*%aa to i32*
store i32 1342177296,i32*%ab,align 4
%ac=load i8*,i8**%d,align 8
%ad=bitcast i8*%Z to i8**
store i8*%ac,i8**%ad,align 8
%ae=load i8*,i8**%c,align 8
%af=getelementptr inbounds i8,i8*%Z,i64 8
%ag=bitcast i8*%af to i8**
store i8*%ae,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%Z,i64 16
%ai=bitcast i8*%ah to i32*
store i32 3,i32*%ai,align 4
%aj=load i8*,i8**%f,align 8
%ak=tail call fastcc i8*%u(i8*inreg%aj,i8*inreg%Z)
ret i8*%ak
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_329(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
store i8*%l,i8**%f,align 8
%o=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%r=getelementptr inbounds i8,i8*%l,i64 8
%s=bitcast i8*%r to i8**
store i8*%q,i8**%s,align 8
%t=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%u=getelementptr inbounds i8,i8*%l,i64 16
%v=bitcast i8*%u to i8**
store i8*%t,i8**%v,align 8
%w=getelementptr inbounds i8,i8*%l,i64 24
%x=bitcast i8*%w to i32*
store i32 7,i32*%x,align 4
%y=call i8*@sml_alloc(i32 inreg 28)#0
%z=getelementptr inbounds i8,i8*%y,i64 -4
%A=bitcast i8*%z to i32*
store i32 1342177304,i32*%A,align 4
%B=load i8*,i8**%f,align 8
%C=bitcast i8*%y to i8**
store i8*%B,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%y,i64 8
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_328 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%y,i64 16
%G=bitcast i8*%F to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_328 to void(...)*),void(...)**%G,align 8
%H=getelementptr inbounds i8,i8*%y,i64 24
%I=bitcast i8*%H to i32*
store i32 -2147483647,i32*%I,align 4
ret i8*%y
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_330(i8*inreg%a)#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i8**
%f=load i8*,i8**%e,align 8
store i8*%f,i8**%b,align 8
%g=getelementptr inbounds i8,i8*%a,i64 8
%h=bitcast i8*%g to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%c,align 8
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i8**
store i8*%o,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%j,i64 16
%s=bitcast i8*%r to i32*
store i32 3,i32*%s,align 4
%t=call i8*@sml_alloc(i32 inreg 28)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177304,i32*%v,align 4
%w=load i8*,i8**%d,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_329 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%t,i64 16
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_329 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%t,i64 24
%D=bitcast i8*%C to i32*
store i32 -2147483647,i32*%D,align 4
ret i8*%t
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_332(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=bitcast i8*%h to i8**
%k=load i8*,i8**%j,align 8
%l=getelementptr inbounds i8,i8*%h,i64 8
%m=bitcast i8*%l to i8**
%n=load i8*,i8**%m,align 8
%o=getelementptr inbounds i8,i8*%n,i64 16
%p=bitcast i8*%o to i8*(i8*,i8*)**
%q=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%p,align 8
%r=bitcast i8*%n to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%b,align 8
%t=getelementptr inbounds i8,i8*%k,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%k to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
%A=tail call fastcc i8*%q(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_334(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=bitcast i8*%h to i8**
%k=load i8*,i8**%j,align 8
%l=getelementptr inbounds i8,i8*%h,i64 8
%m=bitcast i8*%l to i8**
%n=load i8*,i8**%m,align 8
%o=getelementptr inbounds i8,i8*%n,i64 16
%p=bitcast i8*%o to i8*(i8*,i8*)**
%q=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%p,align 8
%r=bitcast i8*%n to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%b,align 8
%t=getelementptr inbounds i8,i8*%k,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%k to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
%A=tail call fastcc i8*%q(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_336(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
o:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%m,label%k
k:
call void@sml_check(i32 inreg%i)
%l=load i8*,i8**%d,align 8
br label%m
m:
%n=phi i8*[%l,%k],[%a,%o]
%p=getelementptr inbounds i8,i8*%n,i64 8
%q=bitcast i8*%p to i8**
%r=load i8*,i8**%q,align 8
store i8*%r,i8**%e,align 8
%s=call i8*@sml_alloc(i32 inreg 12)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177288,i32*%u,align 4
store i8*%s,i8**%f,align 8
%v=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to i32*
store i32 1,i32*%y,align 4
%z=call i8*@sml_alloc(i32 inreg 28)#0
%A=getelementptr inbounds i8,i8*%z,i64 -4
%B=bitcast i8*%A to i32*
store i32 1342177304,i32*%B,align 4
store i8*%z,i8**%e,align 8
%C=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%D=bitcast i8*%z to i8**
store i8*%C,i8**%D,align 8
%E=getelementptr inbounds i8,i8*%z,i64 8
%F=bitcast i8*%E to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_320 to void(...)*),void(...)**%F,align 8
%G=getelementptr inbounds i8,i8*%z,i64 16
%H=bitcast i8*%G to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_320 to void(...)*),void(...)**%H,align 8
%I=getelementptr inbounds i8,i8*%z,i64 24
%J=bitcast i8*%I to i32*
store i32 -2147483647,i32*%J,align 4
%K=call i8*@sml_alloc(i32 inreg 20)#0
%L=getelementptr inbounds i8,i8*%K,i64 -4
%M=bitcast i8*%L to i32*
store i32 1342177296,i32*%M,align 4
%N=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%O=bitcast i8*%K to i8**
store i8*%N,i8**%O,align 8
%P=getelementptr inbounds i8,i8*%K,i64 8
%Q=bitcast i8*%P to i8**
store i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@V,i64 0,i32 2)to i8*),i8**%Q,align 8
%R=getelementptr inbounds i8,i8*%K,i64 16
%S=bitcast i8*%R to i32*
store i32 3,i32*%S,align 4
%T=call fastcc i8*@_SMLLLN10TermFormat10FormatComb6guard__E_186(i8*inreg%K)
%U=getelementptr inbounds i8,i8*%T,i64 16
%V=bitcast i8*%U to i8*(i8*,i8*)**
%W=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%V,align 8
%X=bitcast i8*%T to i8**
%Y=load i8*,i8**%X,align 8
%Z=call fastcc i8*%W(i8*inreg%Y,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,i32}>,<{[4x i8],i32,i8*,i32}>*@k,i64 0,i32 2)to i8*))
%aa=getelementptr inbounds i8,i8*%Z,i64 16
%ab=bitcast i8*%aa to i8*(i8*,i8*,i8*,i8*,i8*)**
%ac=load i8*(i8*,i8*,i8*,i8*,i8*)*,i8*(i8*,i8*,i8*,i8*,i8*)**%ab,align 8
%ad=bitcast i8*%Z to i8**
%ae=load i8*,i8**%ad,align 8
store i8*%ae,i8**%e,align 8
%af=call i8*@sml_alloc(i32 inreg 4)#0
%ag=bitcast i8*%af to i32*
%ah=getelementptr inbounds i8,i8*%af,i64 -4
%ai=bitcast i8*%ah to i32*
store i32 4,i32*%ai,align 4
store i8*%af,i8**%f,align 8
store i32 1,i32*%ag,align 4
%aj=call i8*@sml_alloc(i32 inreg 4)#0
%ak=bitcast i8*%aj to i32*
%al=getelementptr inbounds i8,i8*%aj,i64 -4
%am=bitcast i8*%al to i32*
store i32 4,i32*%am,align 4
store i8*%aj,i8**%g,align 8
store i32 8,i32*%ak,align 4
%an=call i8*@sml_alloc(i32 inreg 4)#0
%ao=bitcast i8*%an to i32*
%ap=getelementptr inbounds i8,i8*%an,i64 -4
%aq=bitcast i8*%ap to i32*
store i32 4,i32*%aq,align 4
store i8*%an,i8**%h,align 8
store i32 1,i32*%ao,align 4
%ar=call i8*@sml_alloc(i32 inreg 4)#0
%as=bitcast i8*%ar to i32*
%at=getelementptr inbounds i8,i8*%ar,i64 -4
%au=bitcast i8*%at to i32*
store i32 4,i32*%au,align 4
store i32 8,i32*%as,align 4
%av=load i8*,i8**%e,align 8
%aw=load i8*,i8**%f,align 8
%ax=load i8*,i8**%g,align 8
%ay=load i8*,i8**%h,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%f,align 8
store i8*null,i8**%g,align 8
store i8*null,i8**%h,align 8
%az=call fastcc i8*%ac(i8*inreg%av,i8*inreg%aw,i8*inreg%ax,i8*inreg%ay,i8*inreg%ar)
%aA=getelementptr inbounds i8,i8*%az,i64 16
%aB=bitcast i8*%aA to i8*(i8*,i8*)**
%aC=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aB,align 8
%aD=bitcast i8*%az to i8**
%aE=load i8*,i8**%aD,align 8
%aF=call fastcc i8*%aC(i8*inreg%aE,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@W,i64 0,i32 2)to i8*))
%aG=getelementptr inbounds i8,i8*%aF,i64 16
%aH=bitcast i8*%aG to i8*(i8*,i8*)**
%aI=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aH,align 8
%aJ=bitcast i8*%aF to i8**
%aK=load i8*,i8**%aJ,align 8
store i8*%aK,i8**%f,align 8
%aL=load i8*,i8**%d,align 8
%aM=getelementptr inbounds i8,i8*%aL,i64 16
%aN=bitcast i8*%aM to i8**
%aO=load i8*,i8**%aN,align 8
store i8*%aO,i8**%e,align 8
%aP=call i8*@sml_alloc(i32 inreg 20)#0
%aQ=getelementptr inbounds i8,i8*%aP,i64 -4
%aR=bitcast i8*%aQ to i32*
store i32 1342177296,i32*%aR,align 4
store i8*%aP,i8**%g,align 8
%aS=getelementptr inbounds i8,i8*%aP,i64 4
%aT=bitcast i8*%aS to i32*
store i32 0,i32*%aT,align 1
%aU=bitcast i8*%aP to i32*
store i32 4,i32*%aU,align 4
%aV=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aW=getelementptr inbounds i8,i8*%aP,i64 8
%aX=bitcast i8*%aW to i8**
store i8*%aV,i8**%aX,align 8
%aY=getelementptr inbounds i8,i8*%aP,i64 16
%aZ=bitcast i8*%aY to i32*
store i32 2,i32*%aZ,align 4
%a0=call i8*@sml_alloc(i32 inreg 20)#0
%a1=getelementptr inbounds i8,i8*%a0,i64 -4
%a2=bitcast i8*%a1 to i32*
store i32 1342177296,i32*%a2,align 4
store i8*%a0,i8**%e,align 8
%a3=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%a4=bitcast i8*%a0 to i8**
store i8*%a3,i8**%a4,align 8
%a5=getelementptr inbounds i8,i8*%a0,i64 8
%a6=bitcast i8*%a5 to i8**
store i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,i8*,i32}>,<{[4x i8],i32,i8*,i8*,i32}>*@bn,i64 0,i32 2)to i8*),i8**%a6,align 8
%a7=getelementptr inbounds i8,i8*%a0,i64 16
%a8=bitcast i8*%a7 to i32*
store i32 3,i32*%a8,align 4
%a9=load i8*,i8**%d,align 8
%ba=getelementptr inbounds i8,i8*%a9,i64 32
%bb=bitcast i8*%ba to i32*
%bc=load i32,i32*%bb,align 4
%bd=getelementptr inbounds i8,i8*%a9,i64 36
%be=bitcast i8*%bd to i32*
%bf=load i32,i32*%be,align 4
%bg=call fastcc i8*@_SMLFN4List3mapE(i32 inreg%bc,i32 inreg%bf,i32 inreg 1,i32 inreg 8)
%bh=getelementptr inbounds i8,i8*%bg,i64 16
%bi=bitcast i8*%bh to i8*(i8*,i8*)**
%bj=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bi,align 8
%bk=bitcast i8*%bg to i8**
%bl=load i8*,i8**%bk,align 8
%bm=bitcast i8**%d to i8***
%bn=load i8**,i8***%bm,align 8
%bo=load i8*,i8**%bn,align 8
%bp=call fastcc i8*%bj(i8*inreg%bl,i8*inreg%bo)
%bq=getelementptr inbounds i8,i8*%bp,i64 16
%br=bitcast i8*%bq to i8*(i8*,i8*)**
%bs=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%br,align 8
%bt=bitcast i8*%bp to i8**
%bu=load i8*,i8**%bt,align 8
%bv=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bw=call fastcc i8*%bs(i8*inreg%bu,i8*inreg%bv)
%bx=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%by=call fastcc i8*@_SMLLLN10TermFormat11intersperseE_206(i8*inreg%bx,i8*inreg%bw)
%bz=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%bA=call fastcc i8*%aI(i8*inreg%bz,i8*inreg%by)
%bB=getelementptr inbounds i8,i8*%bA,i64 16
%bC=bitcast i8*%bB to i8*(i8*,i8*)**
%bD=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bC,align 8
%bE=bitcast i8*%bA to i8**
%bF=load i8*,i8**%bE,align 8
%bG=call fastcc i8*%bD(i8*inreg%bF,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@X,i64 0,i32 2)to i8*))
%bH=getelementptr inbounds i8,i8*%bG,i64 16
%bI=bitcast i8*%bH to i8*(i8*,i8*)**
%bJ=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bI,align 8
%bK=bitcast i8*%bG to i8**
%bL=load i8*,i8**%bK,align 8
%bM=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bN=getelementptr inbounds i8,i8*%bM,i64 24
%bO=bitcast i8*%bN to i8**
%bP=load i8*,i8**%bO,align 8
%bQ=call fastcc i8*%bJ(i8*inreg%bL,i8*inreg%bP)
%bR=getelementptr inbounds i8,i8*%bQ,i64 16
%bS=bitcast i8*%bR to i8*(i8*,i8*)**
%bT=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bS,align 8
%bU=bitcast i8*%bQ to i8**
%bV=load i8*,i8**%bU,align 8
%bW=call fastcc i8*%bT(i8*inreg%bV,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@Y,i64 0,i32 2)to i8*))
%bX=getelementptr inbounds i8,i8*%bW,i64 16
%bY=bitcast i8*%bX to i8*(i8*,i8*)**
%bZ=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bY,align 8
%b0=bitcast i8*%bW to i8**
%b1=load i8*,i8**%b0,align 8
%b2=tail call fastcc i8*%bZ(i8*inreg%b1,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@Z,i64 0,i32 2)to i8*))
ret i8*%b2
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_337(i32 inreg%a,i32 inreg%b,i8*inreg%c)unnamed_addr#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
%i=bitcast i8*%c to i8**
%j=load i8*,i8**%i,align 8
store i8*%j,i8**%d,align 8
%k=getelementptr inbounds i8,i8*%c,i64 8
%l=bitcast i8*%k to i8**
%m=load i8*,i8**%l,align 8
store i8*%m,i8**%e,align 8
%n=getelementptr inbounds i8,i8*%c,i64 16
%o=bitcast i8*%n to i8**
%p=load i8*,i8**%o,align 8
store i8*%p,i8**%f,align 8
%q=getelementptr inbounds i8,i8*%c,i64 24
%r=bitcast i8*%q to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%g,align 8
%t=call i8*@sml_alloc(i32 inreg 44)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177320,i32*%v,align 4
store i8*%t,i8**%h,align 8
%w=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%z=getelementptr inbounds i8,i8*%t,i64 8
%A=bitcast i8*%z to i8**
store i8*%y,i8**%A,align 8
%B=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%C=getelementptr inbounds i8,i8*%t,i64 16
%D=bitcast i8*%C to i8**
store i8*%B,i8**%D,align 8
%E=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%F=getelementptr inbounds i8,i8*%t,i64 24
%G=bitcast i8*%F to i8**
store i8*%E,i8**%G,align 8
%H=getelementptr inbounds i8,i8*%t,i64 32
%I=bitcast i8*%H to i32*
store i32%a,i32*%I,align 4
%J=getelementptr inbounds i8,i8*%t,i64 36
%K=bitcast i8*%J to i32*
store i32%b,i32*%K,align 4
%L=getelementptr inbounds i8,i8*%t,i64 40
%M=bitcast i8*%L to i32*
store i32 15,i32*%M,align 4
%N=call i8*@sml_alloc(i32 inreg 28)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32 1342177304,i32*%P,align 4
%Q=load i8*,i8**%h,align 8
%R=bitcast i8*%N to i8**
store i8*%Q,i8**%R,align 8
%S=getelementptr inbounds i8,i8*%N,i64 8
%T=bitcast i8*%S to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_336 to void(...)*),void(...)**%T,align 8
%U=getelementptr inbounds i8,i8*%N,i64 16
%V=bitcast i8*%U to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_336 to void(...)*),void(...)**%V,align 8
%W=getelementptr inbounds i8,i8*%N,i64 24
%X=bitcast i8*%W to i32*
store i32 -2147483647,i32*%X,align 4
ret i8*%N
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_339(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
l:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%j,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
%i=load i8*,i8**%c,align 8
br label%j
j:
%k=phi i8*[%i,%g],[%a,%l]
%m=phi i8*[%h,%g],[%b,%l]
%n=bitcast i8*%k to i32*
%o=load i32,i32*%n,align 4
%p=getelementptr inbounds i8,i8*%k,i64 4
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=tail call fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_337(i32 inreg%o,i32 inreg%r,i8*inreg%m)
ret i8*%s
}
define fastcc i8*@_SMLFN10TermFormat18formatEnclosedListE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_339 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat18formatEnclosedListE_339 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_342(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_344(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_347(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=bitcast i8**%d to i8***
%m=load i8**,i8***%l,align 8
%n=bitcast i8**%m to i8*
br label%o
o:
%p=phi i8*[%n,%k],[%a,%i]
%q=phi i8**[%m,%k],[%j,%i]
%r=load i8*,i8**%q,align 8
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%e,align 8
%x=getelementptr inbounds i8,i8*%p,i64 8
%y=bitcast i8*%x to i8**
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%d,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%f,align 8
%D=getelementptr inbounds i8,i8*%A,i64 4
%E=bitcast i8*%D to i32*
store i32 0,i32*%E,align 1
%F=bitcast i8*%A to i32*
store i32 4,i32*%F,align 4
%G=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%H=getelementptr inbounds i8,i8*%A,i64 8
%I=bitcast i8*%H to i8**
store i8*%G,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%A,i64 16
%K=bitcast i8*%J to i32*
store i32 2,i32*%K,align 4
%L=call i8*@sml_alloc(i32 inreg 20)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32 1342177296,i32*%N,align 4
%O=load i8*,i8**%f,align 8
%P=bitcast i8*%L to i8**
store i8*%O,i8**%P,align 8
%Q=load i8*,i8**%c,align 8
%R=getelementptr inbounds i8,i8*%L,i64 8
%S=bitcast i8*%R to i8**
store i8*%Q,i8**%S,align 8
%T=getelementptr inbounds i8,i8*%L,i64 16
%U=bitcast i8*%T to i32*
store i32 3,i32*%U,align 4
%V=load i8*,i8**%e,align 8
%W=tail call fastcc i8*%u(i8*inreg%V,i8*inreg%L)
ret i8*%W
}
define internal fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_348(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8**
br label%p
l:
call void@sml_check(i32 inreg%h)
%m=load i8*,i8**%d,align 8
%n=bitcast i8**%c to i8***
%o=load i8**,i8***%n,align 8
br label%p
p:
%q=phi i8**[%o,%l],[%k,%j]
%r=phi i8*[%m,%l],[%b,%j]
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%f,align 8
%x=load i8*,i8**%q,align 8
store i8*%x,i8**%d,align 8
%y=getelementptr inbounds i8*,i8**%q,i64 2
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%e,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%g,align 8
%D=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%E=bitcast i8*%A to i8**
store i8*%D,i8**%E,align 8
%F=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%G=getelementptr inbounds i8,i8*%A,i64 8
%H=bitcast i8*%G to i8**
store i8*%F,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%A,i64 16
%J=bitcast i8*%I to i32*
store i32 3,i32*%J,align 4
%K=call i8*@sml_alloc(i32 inreg 28)#0
%L=getelementptr inbounds i8,i8*%K,i64 -4
%M=bitcast i8*%L to i32*
store i32 1342177304,i32*%M,align 4
store i8*%K,i8**%d,align 8
%N=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%O=bitcast i8*%K to i8**
store i8*%N,i8**%O,align 8
%P=getelementptr inbounds i8,i8*%K,i64 8
%Q=bitcast i8*%P to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_347 to void(...)*),void(...)**%Q,align 8
%R=getelementptr inbounds i8,i8*%K,i64 16
%S=bitcast i8*%R to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_347 to void(...)*),void(...)**%S,align 8
%T=getelementptr inbounds i8,i8*%K,i64 24
%U=bitcast i8*%T to i32*
store i32 -2147483647,i32*%U,align 4
%V=load i8*,i8**%c,align 8
%W=getelementptr inbounds i8,i8*%V,i64 8
%X=bitcast i8*%W to i8**
%Y=load i8*,i8**%X,align 8
store i8*%Y,i8**%c,align 8
%Z=call i8*@sml_alloc(i32 inreg 20)#0
%aa=getelementptr inbounds i8,i8*%Z,i64 -4
%ab=bitcast i8*%aa to i32*
store i32 1342177296,i32*%ab,align 4
%ac=load i8*,i8**%d,align 8
%ad=bitcast i8*%Z to i8**
store i8*%ac,i8**%ad,align 8
%ae=load i8*,i8**%c,align 8
%af=getelementptr inbounds i8,i8*%Z,i64 8
%ag=bitcast i8*%af to i8**
store i8*%ae,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%Z,i64 16
%ai=bitcast i8*%ah to i32*
store i32 3,i32*%ai,align 4
%aj=load i8*,i8**%f,align 8
%ak=tail call fastcc i8*%u(i8*inreg%aj,i8*inreg%Z)
ret i8*%ak
}
define internal fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_349(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
store i8*%l,i8**%f,align 8
%o=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%r=getelementptr inbounds i8,i8*%l,i64 8
%s=bitcast i8*%r to i8**
store i8*%q,i8**%s,align 8
%t=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%u=getelementptr inbounds i8,i8*%l,i64 16
%v=bitcast i8*%u to i8**
store i8*%t,i8**%v,align 8
%w=getelementptr inbounds i8,i8*%l,i64 24
%x=bitcast i8*%w to i32*
store i32 7,i32*%x,align 4
%y=call i8*@sml_alloc(i32 inreg 28)#0
%z=getelementptr inbounds i8,i8*%y,i64 -4
%A=bitcast i8*%z to i32*
store i32 1342177304,i32*%A,align 4
%B=load i8*,i8**%f,align 8
%C=bitcast i8*%y to i8**
store i8*%B,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%y,i64 8
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_348 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%y,i64 16
%G=bitcast i8*%F to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_348 to void(...)*),void(...)**%G,align 8
%H=getelementptr inbounds i8,i8*%y,i64 24
%I=bitcast i8*%H to i32*
store i32 -2147483647,i32*%I,align 4
ret i8*%y
}
define internal fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_350(i8*inreg%a)#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i8**
%f=load i8*,i8**%e,align 8
store i8*%f,i8**%b,align 8
%g=getelementptr inbounds i8,i8*%a,i64 8
%h=bitcast i8*%g to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%c,align 8
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i8**
store i8*%o,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%j,i64 16
%s=bitcast i8*%r to i32*
store i32 3,i32*%s,align 4
%t=call i8*@sml_alloc(i32 inreg 28)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177304,i32*%v,align 4
%w=load i8*,i8**%d,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_349 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%t,i64 16
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_349 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%t,i64 24
%D=bitcast i8*%C to i32*
store i32 -2147483647,i32*%D,align 4
ret i8*%t
}
define internal fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_352(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=bitcast i8**%d to i8***
%m=load i8**,i8***%l,align 8
%n=bitcast i8**%m to i8*
br label%o
o:
%p=phi i8*[%n,%k],[%a,%i]
%q=phi i8**[%m,%k],[%j,%i]
%r=load i8*,i8**%q,align 8
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%e,align 8
%x=getelementptr inbounds i8,i8*%p,i64 8
%y=bitcast i8*%x to i8**
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%d,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%f,align 8
%D=getelementptr inbounds i8,i8*%A,i64 4
%E=bitcast i8*%D to i32*
store i32 0,i32*%E,align 1
%F=bitcast i8*%A to i32*
store i32 4,i32*%F,align 4
%G=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%H=getelementptr inbounds i8,i8*%A,i64 8
%I=bitcast i8*%H to i8**
store i8*%G,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%A,i64 16
%K=bitcast i8*%J to i32*
store i32 2,i32*%K,align 4
%L=call i8*@sml_alloc(i32 inreg 20)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32 1342177296,i32*%N,align 4
%O=load i8*,i8**%f,align 8
%P=bitcast i8*%L to i8**
store i8*%O,i8**%P,align 8
%Q=load i8*,i8**%c,align 8
%R=getelementptr inbounds i8,i8*%L,i64 8
%S=bitcast i8*%R to i8**
store i8*%Q,i8**%S,align 8
%T=getelementptr inbounds i8,i8*%L,i64 16
%U=bitcast i8*%T to i32*
store i32 3,i32*%U,align 4
%V=load i8*,i8**%e,align 8
%W=tail call fastcc i8*%u(i8*inreg%V,i8*inreg%L)
ret i8*%W
}
define internal fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_353(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8**
br label%p
l:
call void@sml_check(i32 inreg%h)
%m=load i8*,i8**%d,align 8
%n=bitcast i8**%c to i8***
%o=load i8**,i8***%n,align 8
br label%p
p:
%q=phi i8**[%o,%l],[%k,%j]
%r=phi i8*[%m,%l],[%b,%j]
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%f,align 8
%x=load i8*,i8**%q,align 8
store i8*%x,i8**%d,align 8
%y=getelementptr inbounds i8*,i8**%q,i64 2
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%e,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%g,align 8
%D=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%E=bitcast i8*%A to i8**
store i8*%D,i8**%E,align 8
%F=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%G=getelementptr inbounds i8,i8*%A,i64 8
%H=bitcast i8*%G to i8**
store i8*%F,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%A,i64 16
%J=bitcast i8*%I to i32*
store i32 3,i32*%J,align 4
%K=call i8*@sml_alloc(i32 inreg 28)#0
%L=getelementptr inbounds i8,i8*%K,i64 -4
%M=bitcast i8*%L to i32*
store i32 1342177304,i32*%M,align 4
store i8*%K,i8**%d,align 8
%N=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%O=bitcast i8*%K to i8**
store i8*%N,i8**%O,align 8
%P=getelementptr inbounds i8,i8*%K,i64 8
%Q=bitcast i8*%P to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_352 to void(...)*),void(...)**%Q,align 8
%R=getelementptr inbounds i8,i8*%K,i64 16
%S=bitcast i8*%R to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_352 to void(...)*),void(...)**%S,align 8
%T=getelementptr inbounds i8,i8*%K,i64 24
%U=bitcast i8*%T to i32*
store i32 -2147483647,i32*%U,align 4
%V=load i8*,i8**%c,align 8
%W=getelementptr inbounds i8,i8*%V,i64 8
%X=bitcast i8*%W to i8**
%Y=load i8*,i8**%X,align 8
store i8*%Y,i8**%c,align 8
%Z=call i8*@sml_alloc(i32 inreg 20)#0
%aa=getelementptr inbounds i8,i8*%Z,i64 -4
%ab=bitcast i8*%aa to i32*
store i32 1342177296,i32*%ab,align 4
%ac=load i8*,i8**%d,align 8
%ad=bitcast i8*%Z to i8**
store i8*%ac,i8**%ad,align 8
%ae=load i8*,i8**%c,align 8
%af=getelementptr inbounds i8,i8*%Z,i64 8
%ag=bitcast i8*%af to i8**
store i8*%ae,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%Z,i64 16
%ai=bitcast i8*%ah to i32*
store i32 3,i32*%ai,align 4
%aj=load i8*,i8**%f,align 8
%ak=tail call fastcc i8*%u(i8*inreg%aj,i8*inreg%Z)
ret i8*%ak
}
define internal fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_354(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
store i8*%l,i8**%f,align 8
%o=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%r=getelementptr inbounds i8,i8*%l,i64 8
%s=bitcast i8*%r to i8**
store i8*%q,i8**%s,align 8
%t=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%u=getelementptr inbounds i8,i8*%l,i64 16
%v=bitcast i8*%u to i8**
store i8*%t,i8**%v,align 8
%w=getelementptr inbounds i8,i8*%l,i64 24
%x=bitcast i8*%w to i32*
store i32 7,i32*%x,align 4
%y=call i8*@sml_alloc(i32 inreg 28)#0
%z=getelementptr inbounds i8,i8*%y,i64 -4
%A=bitcast i8*%z to i32*
store i32 1342177304,i32*%A,align 4
%B=load i8*,i8**%f,align 8
%C=bitcast i8*%y to i8**
store i8*%B,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%y,i64 8
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_353 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%y,i64 16
%G=bitcast i8*%F to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_353 to void(...)*),void(...)**%G,align 8
%H=getelementptr inbounds i8,i8*%y,i64 24
%I=bitcast i8*%H to i32*
store i32 -2147483647,i32*%I,align 4
ret i8*%y
}
define internal fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_355(i8*inreg%a)#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i8**
%f=load i8*,i8**%e,align 8
store i8*%f,i8**%b,align 8
%g=getelementptr inbounds i8,i8*%a,i64 8
%h=bitcast i8*%g to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%c,align 8
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i8**
store i8*%o,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%j,i64 16
%s=bitcast i8*%r to i32*
store i32 3,i32*%s,align 4
%t=call i8*@sml_alloc(i32 inreg 28)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177304,i32*%v,align 4
%w=load i8*,i8**%d,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_354 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%t,i64 16
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_354 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%t,i64 24
%D=bitcast i8*%C to i32*
store i32 -2147483647,i32*%D,align 4
ret i8*%t
}
define internal fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_357(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=bitcast i8**%d to i8***
%m=load i8**,i8***%l,align 8
%n=bitcast i8**%m to i8*
br label%o
o:
%p=phi i8*[%n,%k],[%a,%i]
%q=phi i8**[%m,%k],[%j,%i]
%r=load i8*,i8**%q,align 8
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%e,align 8
%x=getelementptr inbounds i8,i8*%p,i64 8
%y=bitcast i8*%x to i8**
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%d,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%f,align 8
%D=getelementptr inbounds i8,i8*%A,i64 4
%E=bitcast i8*%D to i32*
store i32 0,i32*%E,align 1
%F=bitcast i8*%A to i32*
store i32 4,i32*%F,align 4
%G=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%H=getelementptr inbounds i8,i8*%A,i64 8
%I=bitcast i8*%H to i8**
store i8*%G,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%A,i64 16
%K=bitcast i8*%J to i32*
store i32 2,i32*%K,align 4
%L=call i8*@sml_alloc(i32 inreg 20)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32 1342177296,i32*%N,align 4
%O=load i8*,i8**%f,align 8
%P=bitcast i8*%L to i8**
store i8*%O,i8**%P,align 8
%Q=load i8*,i8**%c,align 8
%R=getelementptr inbounds i8,i8*%L,i64 8
%S=bitcast i8*%R to i8**
store i8*%Q,i8**%S,align 8
%T=getelementptr inbounds i8,i8*%L,i64 16
%U=bitcast i8*%T to i32*
store i32 3,i32*%U,align 4
%V=load i8*,i8**%e,align 8
%W=tail call fastcc i8*%u(i8*inreg%V,i8*inreg%L)
ret i8*%W
}
define internal fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_358(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8**
br label%p
l:
call void@sml_check(i32 inreg%h)
%m=load i8*,i8**%d,align 8
%n=bitcast i8**%c to i8***
%o=load i8**,i8***%n,align 8
br label%p
p:
%q=phi i8**[%o,%l],[%k,%j]
%r=phi i8*[%m,%l],[%b,%j]
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%f,align 8
%x=load i8*,i8**%q,align 8
store i8*%x,i8**%d,align 8
%y=getelementptr inbounds i8*,i8**%q,i64 2
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%e,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%g,align 8
%D=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%E=bitcast i8*%A to i8**
store i8*%D,i8**%E,align 8
%F=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%G=getelementptr inbounds i8,i8*%A,i64 8
%H=bitcast i8*%G to i8**
store i8*%F,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%A,i64 16
%J=bitcast i8*%I to i32*
store i32 3,i32*%J,align 4
%K=call i8*@sml_alloc(i32 inreg 28)#0
%L=getelementptr inbounds i8,i8*%K,i64 -4
%M=bitcast i8*%L to i32*
store i32 1342177304,i32*%M,align 4
store i8*%K,i8**%d,align 8
%N=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%O=bitcast i8*%K to i8**
store i8*%N,i8**%O,align 8
%P=getelementptr inbounds i8,i8*%K,i64 8
%Q=bitcast i8*%P to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_357 to void(...)*),void(...)**%Q,align 8
%R=getelementptr inbounds i8,i8*%K,i64 16
%S=bitcast i8*%R to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_357 to void(...)*),void(...)**%S,align 8
%T=getelementptr inbounds i8,i8*%K,i64 24
%U=bitcast i8*%T to i32*
store i32 -2147483647,i32*%U,align 4
%V=load i8*,i8**%c,align 8
%W=getelementptr inbounds i8,i8*%V,i64 8
%X=bitcast i8*%W to i8**
%Y=load i8*,i8**%X,align 8
store i8*%Y,i8**%c,align 8
%Z=call i8*@sml_alloc(i32 inreg 20)#0
%aa=getelementptr inbounds i8,i8*%Z,i64 -4
%ab=bitcast i8*%aa to i32*
store i32 1342177296,i32*%ab,align 4
%ac=load i8*,i8**%d,align 8
%ad=bitcast i8*%Z to i8**
store i8*%ac,i8**%ad,align 8
%ae=load i8*,i8**%c,align 8
%af=getelementptr inbounds i8,i8*%Z,i64 8
%ag=bitcast i8*%af to i8**
store i8*%ae,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%Z,i64 16
%ai=bitcast i8*%ah to i32*
store i32 3,i32*%ai,align 4
%aj=load i8*,i8**%f,align 8
%ak=tail call fastcc i8*%u(i8*inreg%aj,i8*inreg%Z)
ret i8*%ak
}
define internal fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_359(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
store i8*%l,i8**%f,align 8
%o=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%r=getelementptr inbounds i8,i8*%l,i64 8
%s=bitcast i8*%r to i8**
store i8*%q,i8**%s,align 8
%t=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%u=getelementptr inbounds i8,i8*%l,i64 16
%v=bitcast i8*%u to i8**
store i8*%t,i8**%v,align 8
%w=getelementptr inbounds i8,i8*%l,i64 24
%x=bitcast i8*%w to i32*
store i32 7,i32*%x,align 4
%y=call i8*@sml_alloc(i32 inreg 28)#0
%z=getelementptr inbounds i8,i8*%y,i64 -4
%A=bitcast i8*%z to i32*
store i32 1342177304,i32*%A,align 4
%B=load i8*,i8**%f,align 8
%C=bitcast i8*%y to i8**
store i8*%B,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%y,i64 8
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_358 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%y,i64 16
%G=bitcast i8*%F to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_358 to void(...)*),void(...)**%G,align 8
%H=getelementptr inbounds i8,i8*%y,i64 24
%I=bitcast i8*%H to i32*
store i32 -2147483647,i32*%I,align 4
ret i8*%y
}
define internal fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_360(i8*inreg%a)#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i8**
%f=load i8*,i8**%e,align 8
store i8*%f,i8**%b,align 8
%g=getelementptr inbounds i8,i8*%a,i64 8
%h=bitcast i8*%g to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%c,align 8
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i8**
store i8*%o,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%j,i64 16
%s=bitcast i8*%r to i32*
store i32 3,i32*%s,align 4
%t=call i8*@sml_alloc(i32 inreg 28)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177304,i32*%v,align 4
%w=load i8*,i8**%d,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_359 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%t,i64 16
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_359 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%t,i64 24
%D=bitcast i8*%C to i32*
store i32 -2147483647,i32*%D,align 4
ret i8*%t
}
define internal fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_362(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=bitcast i8*%h to i8**
%k=load i8*,i8**%j,align 8
%l=getelementptr inbounds i8,i8*%h,i64 8
%m=bitcast i8*%l to i8**
%n=load i8*,i8**%m,align 8
%o=getelementptr inbounds i8,i8*%n,i64 16
%p=bitcast i8*%o to i8*(i8*,i8*)**
%q=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%p,align 8
%r=bitcast i8*%n to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%b,align 8
%t=getelementptr inbounds i8,i8*%k,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%k to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
%A=tail call fastcc i8*%q(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define internal fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_364(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=bitcast i8*%h to i8**
%k=load i8*,i8**%j,align 8
%l=getelementptr inbounds i8,i8*%h,i64 8
%m=bitcast i8*%l to i8**
%n=load i8*,i8**%m,align 8
%o=getelementptr inbounds i8,i8*%n,i64 16
%p=bitcast i8*%o to i8*(i8*,i8*)**
%q=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%p,align 8
%r=bitcast i8*%n to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%b,align 8
%t=getelementptr inbounds i8,i8*%k,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%k to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
%A=tail call fastcc i8*%q(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define internal fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_366(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
store i8*%a,i8**%f,align 8
store i8*%b,i8**%c,align 8
%j=load atomic i32,i32*@sml_check_flag unordered,align 4
%k=icmp eq i32%j,0
br i1%k,label%l,label%n
l:
%m=bitcast i8*%b to i8**
br label%s
n:
call void@sml_check(i32 inreg%j)
%o=bitcast i8**%c to i8***
%p=load i8**,i8***%o,align 8
%q=load i8*,i8**%f,align 8
%r=bitcast i8**%p to i8*
br label%s
s:
%t=phi i8*[%r,%n],[%b,%l]
%u=phi i8*[%q,%n],[%a,%l]
%v=phi i8**[%p,%n],[%m,%l]
%w=getelementptr inbounds i8,i8*%u,i64 20
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=add i32%y,7
%A=sub i32 0,%y
%B=and i32%z,%A
%C=load i8*,i8**%v,align 8
store i8*%C,i8**%d,align 8
%D=getelementptr inbounds i8,i8*%u,i64 16
%E=bitcast i8*%D to i32*
%F=load i32,i32*%E,align 4
%G=icmp eq i32%F,0
br i1%G,label%M,label%H
H:
store i8*null,i8**%c,align 8
%I=sext i32%B to i64
%J=getelementptr inbounds i8,i8*%t,i64%I
%K=bitcast i8*%J to i8**
%L=load i8*,i8**%K,align 8
br label%T
M:
%N=call i8*@sml_alloc(i32 inreg%y)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32%y,i32*%P,align 4
%Q=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%R=sext i32%B to i64
%S=getelementptr inbounds i8,i8*%Q,i64%R
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%N,i8*%S,i32%y,i1 false)
br label%T
T:
%U=phi i8*[%N,%M],[%L,%H]
store i8*%U,i8**%c,align 8
%V=call fastcc i8*@_SMLLLN10TermFormat10FormatComb5nest__E_204(i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,i8*,i32}>,<{[4x i8],i32,i8*,i8*,i32}>*@ad,i64 0,i32 2)to i8*))
%W=getelementptr inbounds i8,i8*%V,i64 16
%X=bitcast i8*%W to i8*(i8*,i8*)**
%Y=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%X,align 8
%Z=bitcast i8*%V to i8**
%aa=load i8*,i8**%Z,align 8
store i8*%aa,i8**%e,align 8
%ab=call i8*@sml_alloc(i32 inreg 4)#0
%ac=bitcast i8*%ab to i32*
%ad=getelementptr inbounds i8,i8*%ab,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 4,i32*%ae,align 4
store i32 1,i32*%ac,align 4
%af=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%ag=call fastcc i8*%Y(i8*inreg%af,i8*inreg%ab)
%ah=getelementptr inbounds i8,i8*%ag,i64 16
%ai=bitcast i8*%ah to i8*(i8*,i8*,i8*,i8*,i8*)**
%aj=load i8*(i8*,i8*,i8*,i8*,i8*)*,i8*(i8*,i8*,i8*,i8*,i8*)**%ai,align 8
%ak=bitcast i8*%ag to i8**
%al=load i8*,i8**%ak,align 8
store i8*%al,i8**%e,align 8
%am=call i8*@sml_alloc(i32 inreg 4)#0
%an=bitcast i8*%am to i32*
%ao=getelementptr inbounds i8,i8*%am,i64 -4
%ap=bitcast i8*%ao to i32*
store i32 4,i32*%ap,align 4
store i8*%am,i8**%g,align 8
store i32 1,i32*%an,align 4
%aq=call i8*@sml_alloc(i32 inreg 4)#0
%ar=bitcast i8*%aq to i32*
%as=getelementptr inbounds i8,i8*%aq,i64 -4
%at=bitcast i8*%as to i32*
store i32 4,i32*%at,align 4
store i8*%aq,i8**%h,align 8
store i32 8,i32*%ar,align 4
%au=call i8*@sml_alloc(i32 inreg 4)#0
%av=bitcast i8*%au to i32*
%aw=getelementptr inbounds i8,i8*%au,i64 -4
%ax=bitcast i8*%aw to i32*
store i32 4,i32*%ax,align 4
store i8*%au,i8**%i,align 8
store i32 1,i32*%av,align 4
%ay=call i8*@sml_alloc(i32 inreg 4)#0
%az=bitcast i8*%ay to i32*
%aA=getelementptr inbounds i8,i8*%ay,i64 -4
%aB=bitcast i8*%aA to i32*
store i32 4,i32*%aB,align 4
store i32 8,i32*%az,align 4
%aC=load i8*,i8**%e,align 8
%aD=load i8*,i8**%g,align 8
%aE=load i8*,i8**%h,align 8
%aF=load i8*,i8**%i,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%g,align 8
store i8*null,i8**%h,align 8
store i8*null,i8**%i,align 8
%aG=call fastcc i8*%aj(i8*inreg%aC,i8*inreg%aD,i8*inreg%aE,i8*inreg%aF,i8*inreg%ay)
%aH=getelementptr inbounds i8,i8*%aG,i64 16
%aI=bitcast i8*%aH to i8*(i8*,i8*)**
%aJ=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aI,align 8
%aK=bitcast i8*%aG to i8**
%aL=load i8*,i8**%aK,align 8
%aM=call fastcc i8*%aJ(i8*inreg%aL,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@ae,i64 0,i32 2)to i8*))
store i8*%aM,i8**%e,align 8
%aN=bitcast i8**%d to i32**
%aO=load i32*,i32**%aN,align 8
%aP=getelementptr inbounds i32,i32*%aO,i64 -1
%aQ=load i32,i32*%aP,align 4
%aR=and i32%aQ,268435455
%aS=add nsw i32%aR,-1
%aT=call i8*@sml_alloc(i32 inreg 20)#0
%aU=getelementptr inbounds i8,i8*%aT,i64 -4
%aV=bitcast i8*%aU to i32*
store i32 1342177296,i32*%aV,align 4
store i8*%aT,i8**%g,align 8
%aW=getelementptr inbounds i8,i8*%aT,i64 4
%aX=bitcast i8*%aW to i32*
store i32 0,i32*%aX,align 1
%aY=bitcast i8*%aT to i32*
store i32%aS,i32*%aY,align 4
%aZ=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%a0=getelementptr inbounds i8,i8*%aT,i64 8
%a1=bitcast i8*%a0 to i8**
store i8*%aZ,i8**%a1,align 8
%a2=getelementptr inbounds i8,i8*%aT,i64 16
%a3=bitcast i8*%a2 to i32*
store i32 2,i32*%a3,align 4
%a4=call i8*@sml_alloc(i32 inreg 20)#0
%a5=getelementptr inbounds i8,i8*%a4,i64 -4
%a6=bitcast i8*%a5 to i32*
store i32 1342177296,i32*%a6,align 4
store i8*%a4,i8**%d,align 8
%a7=getelementptr inbounds i8,i8*%a4,i64 4
%a8=bitcast i8*%a7 to i32*
store i32 0,i32*%a8,align 1
%a9=bitcast i8*%a4 to i32*
store i32 6,i32*%a9,align 4
%ba=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%bb=getelementptr inbounds i8,i8*%a4,i64 8
%bc=bitcast i8*%bb to i8**
store i8*%ba,i8**%bc,align 8
%bd=getelementptr inbounds i8,i8*%a4,i64 16
%be=bitcast i8*%bd to i32*
store i32 2,i32*%be,align 4
%bf=load i8*,i8**%e,align 8
%bg=getelementptr inbounds i8,i8*%bf,i64 16
%bh=bitcast i8*%bg to i8*(i8*,i8*)**
%bi=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bh,align 8
%bj=bitcast i8*%bf to i8**
%bk=load i8*,i8**%bj,align 8
store i8*%bk,i8**%e,align 8
%bl=call i8*@sml_alloc(i32 inreg 20)#0
%bm=getelementptr inbounds i8,i8*%bl,i64 -4
%bn=bitcast i8*%bm to i32*
store i32 1342177296,i32*%bn,align 4
%bo=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bp=bitcast i8*%bl to i8**
store i8*%bo,i8**%bp,align 8
%bq=getelementptr inbounds i8,i8*%bl,i64 8
%br=bitcast i8*%bq to i8**
store i8*null,i8**%br,align 8
%bs=getelementptr inbounds i8,i8*%bl,i64 16
%bt=bitcast i8*%bs to i32*
store i32 3,i32*%bt,align 4
%bu=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bv=call fastcc i8*%bi(i8*inreg%bu,i8*inreg%bl)
%bw=getelementptr inbounds i8,i8*%bv,i64 16
%bx=bitcast i8*%bw to i8*(i8*,i8*)**
%by=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bx,align 8
%bz=bitcast i8*%bv to i8**
%bA=load i8*,i8**%bz,align 8
%bB=call fastcc i8*%by(i8*inreg%bA,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@af,i64 0,i32 2)to i8*))
%bC=getelementptr inbounds i8,i8*%bB,i64 16
%bD=bitcast i8*%bC to i8*(i8*,i8*)**
%bE=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bD,align 8
%bF=bitcast i8*%bB to i8**
%bG=load i8*,i8**%bF,align 8
%bH=load i8*,i8**%f,align 8
%bI=getelementptr inbounds i8,i8*%bH,i64 8
%bJ=bitcast i8*%bI to i8**
%bK=load i8*,i8**%bJ,align 8
%bL=call fastcc i8*%bE(i8*inreg%bG,i8*inreg%bK)
%bM=getelementptr inbounds i8,i8*%bL,i64 16
%bN=bitcast i8*%bM to i8*(i8*,i8*)**
%bO=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bN,align 8
%bP=bitcast i8*%bL to i8**
%bQ=load i8*,i8**%bP,align 8
%bR=call fastcc i8*%bO(i8*inreg%bQ,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@ag,i64 0,i32 2)to i8*))
%bS=getelementptr inbounds i8,i8*%bR,i64 16
%bT=bitcast i8*%bS to i8*(i8*,i8*)**
%bU=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bT,align 8
%bV=bitcast i8*%bR to i8**
%bW=load i8*,i8**%bV,align 8
store i8*%bW,i8**%d,align 8
%bX=bitcast i8**%f to i8***
%bY=load i8**,i8***%bX,align 8
%bZ=load i8*,i8**%bY,align 8
%b0=getelementptr inbounds i8,i8*%bZ,i64 16
%b1=bitcast i8*%b0 to i8*(i8*,i8*)**
%b2=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%b1,align 8
store i8*null,i8**%f,align 8
%b3=bitcast i8**%bY to i8***
%b4=load i8**,i8***%b3,align 8
%b5=load i8*,i8**%b4,align 8
%b6=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%b7=call fastcc i8*%b2(i8*inreg%b5,i8*inreg%b6)
%b8=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%b9=call fastcc i8*%bU(i8*inreg%b8,i8*inreg%b7)
%ca=getelementptr inbounds i8,i8*%b9,i64 16
%cb=bitcast i8*%ca to i8*(i8*,i8*)**
%cc=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%cb,align 8
%cd=bitcast i8*%b9 to i8**
%ce=load i8*,i8**%cd,align 8
%cf=call fastcc i8*%cc(i8*inreg%ce,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@ah,i64 0,i32 2)to i8*))
%cg=getelementptr inbounds i8,i8*%cf,i64 16
%ch=bitcast i8*%cg to i8*(i8*,i8*)**
%ci=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ch,align 8
%cj=bitcast i8*%cf to i8**
%ck=load i8*,i8**%cj,align 8
%cl=tail call fastcc i8*%ci(i8*inreg%ck,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@ai,i64 0,i32 2)to i8*))
ret i8*%cl
}
define internal fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_367(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
m:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%k,label%h
h:
call void@sml_check(i32 inreg%f)
%i=load i8*,i8**%c,align 8
%j=load i8*,i8**%d,align 8
br label%k
k:
%l=phi i8*[%j,%h],[%a,%m]
%n=phi i8*[%i,%h],[%b,%m]
store i8*null,i8**%c,align 8
%o=getelementptr inbounds i8,i8*%l,i64 8
%p=bitcast i8*%o to i8**
%q=load i8*,i8**%p,align 8
%r=call fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_366(i8*inreg%q,i8*inreg%n)
store i8*%r,i8**%c,align 8
%s=bitcast i8**%d to i8***
%t=load i8**,i8***%s,align 8
%u=load i8*,i8**%t,align 8
store i8*%u,i8**%d,align 8
%v=call i8*@sml_alloc(i32 inreg 20)#0
%w=getelementptr inbounds i8,i8*%v,i64 -4
%x=bitcast i8*%w to i32*
store i32 1342177296,i32*%x,align 4
store i8*%v,i8**%e,align 8
%y=getelementptr inbounds i8,i8*%v,i64 4
%z=bitcast i8*%y to i32*
store i32 0,i32*%z,align 1
%A=bitcast i8*%v to i32*
store i32 4,i32*%A,align 4
%B=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%C=getelementptr inbounds i8,i8*%v,i64 8
%D=bitcast i8*%C to i8**
store i8*%B,i8**%D,align 8
%E=getelementptr inbounds i8,i8*%v,i64 16
%F=bitcast i8*%E to i32*
store i32 2,i32*%F,align 4
%G=call i8*@sml_alloc(i32 inreg 20)#0
%H=getelementptr inbounds i8,i8*%G,i64 -4
%I=bitcast i8*%H to i32*
store i32 1342177296,i32*%I,align 4
store i8*%G,i8**%d,align 8
%J=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%K=bitcast i8*%G to i8**
store i8*%J,i8**%K,align 8
%L=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%M=getelementptr inbounds i8,i8*%G,i64 8
%N=bitcast i8*%M to i8**
store i8*%L,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%G,i64 16
%P=bitcast i8*%O to i32*
store i32 3,i32*%P,align 4
%Q=call i8*@sml_alloc(i32 inreg 20)#0
%R=bitcast i8*%Q to i32*
%S=getelementptr inbounds i8,i8*%Q,i64 -4
%T=bitcast i8*%S to i32*
store i32 1342177296,i32*%T,align 4
%U=getelementptr inbounds i8,i8*%Q,i64 4
%V=bitcast i8*%U to i32*
store i32 0,i32*%V,align 1
store i32 4,i32*%R,align 4
%W=load i8*,i8**%d,align 8
%X=getelementptr inbounds i8,i8*%Q,i64 8
%Y=bitcast i8*%X to i8**
store i8*%W,i8**%Y,align 8
%Z=getelementptr inbounds i8,i8*%Q,i64 16
%aa=bitcast i8*%Z to i32*
store i32 2,i32*%aa,align 4
ret i8*%Q
}
define internal fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_368(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%j=load atomic i32,i32*@sml_check_flag unordered,align 4
%k=icmp eq i32%j,0
br i1%k,label%l,label%n
l:
%m=bitcast i8*%a to i8**
br label%r
n:
call void@sml_check(i32 inreg%j)
%o=bitcast i8**%d to i8***
%p=load i8**,i8***%o,align 8
%q=bitcast i8**%p to i8*
br label%r
r:
%s=phi i8*[%q,%n],[%a,%l]
%t=phi i8**[%p,%n],[%m,%l]
%u=load i8*,i8**%t,align 8
store i8*%u,i8**%e,align 8
%v=getelementptr inbounds i8*,i8**%t,i64 2
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%f,align 8
%x=getelementptr inbounds i8*,i8**%t,i64 3
%y=bitcast i8**%x to i32*
%z=load i32,i32*%y,align 4
%A=getelementptr inbounds i8,i8*%s,i64 28
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=call i8*@sml_alloc(i32 inreg 28)#0
%E=getelementptr inbounds i8,i8*%D,i64 -4
%F=bitcast i8*%E to i32*
store i32 1342177304,i32*%F,align 4
store i8*%D,i8**%g,align 8
%G=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%H=bitcast i8*%D to i8**
store i8*%G,i8**%H,align 8
%I=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%J=getelementptr inbounds i8,i8*%D,i64 8
%K=bitcast i8*%J to i8**
store i8*%I,i8**%K,align 8
%L=getelementptr inbounds i8,i8*%D,i64 16
%M=bitcast i8*%L to i32*
store i32%z,i32*%M,align 4
%N=getelementptr inbounds i8,i8*%D,i64 20
%O=bitcast i8*%N to i32*
store i32%C,i32*%O,align 4
%P=getelementptr inbounds i8,i8*%D,i64 24
%Q=bitcast i8*%P to i32*
store i32 3,i32*%Q,align 4
%R=call i8*@sml_alloc(i32 inreg 28)#0
%S=getelementptr inbounds i8,i8*%R,i64 -4
%T=bitcast i8*%S to i32*
store i32 1342177304,i32*%T,align 4
%U=load i8*,i8**%g,align 8
%V=bitcast i8*%R to i8**
store i8*%U,i8**%V,align 8
%W=getelementptr inbounds i8,i8*%R,i64 8
%X=bitcast i8*%W to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_366 to void(...)*),void(...)**%X,align 8
%Y=getelementptr inbounds i8,i8*%R,i64 16
%Z=bitcast i8*%Y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_366 to void(...)*),void(...)**%Z,align 8
%aa=getelementptr inbounds i8,i8*%R,i64 24
%ab=bitcast i8*%aa to i32*
store i32 -2147483647,i32*%ab,align 4
%ac=load i8*,i8**%d,align 8
%ad=getelementptr inbounds i8,i8*%ac,i64 24
%ae=bitcast i8*%ad to i32*
%af=load i32,i32*%ae,align 4
%ag=getelementptr inbounds i8,i8*%ac,i64 28
%ah=bitcast i8*%ag to i32*
%ai=load i32,i32*%ah,align 4
%aj=call fastcc i8*@_SMLFN4SEnv10listItemsiE(i32 inreg%af,i32 inreg%ai)
%ak=getelementptr inbounds i8,i8*%aj,i64 16
%al=bitcast i8*%ak to i8*(i8*,i8*)**
%am=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%al,align 8
%an=bitcast i8*%aj to i8**
%ao=load i8*,i8**%an,align 8
%ap=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aq=call fastcc i8*%am(i8*inreg%ao,i8*inreg%ap)
%ar=icmp eq i8*%aq,null
br i1%ar,label%as,label%at
as:
ret i8*null
at:
%au=bitcast i8*%aq to i8**
%av=load i8*,i8**%au,align 8
%aw=getelementptr inbounds i8,i8*%aq,i64 8
%ax=bitcast i8*%aw to i8**
%ay=load i8*,i8**%ax,align 8
store i8*%ay,i8**%c,align 8
%az=load i8*,i8**%g,align 8
%aA=call fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_366(i8*inreg%az,i8*inreg%av)
store i8*%aA,i8**%e,align 8
%aB=call i8*@sml_alloc(i32 inreg 20)#0
%aC=getelementptr inbounds i8,i8*%aB,i64 -4
%aD=bitcast i8*%aC to i32*
store i32 1342177296,i32*%aD,align 4
store i8*%aB,i8**%h,align 8
%aE=getelementptr inbounds i8,i8*%aB,i64 4
%aF=bitcast i8*%aE to i32*
store i32 0,i32*%aF,align 1
%aG=bitcast i8*%aB to i32*
store i32 4,i32*%aG,align 4
%aH=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aI=getelementptr inbounds i8,i8*%aB,i64 8
%aJ=bitcast i8*%aI to i8**
store i8*%aH,i8**%aJ,align 8
%aK=getelementptr inbounds i8,i8*%aB,i64 16
%aL=bitcast i8*%aK to i32*
store i32 2,i32*%aL,align 4
%aM=call fastcc i8*@_SMLFN4List3mapE(i32 inreg 1,i32 inreg 8,i32 inreg 1,i32 inreg 8)
%aN=getelementptr inbounds i8,i8*%aM,i64 16
%aO=bitcast i8*%aN to i8*(i8*,i8*)**
%aP=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aO,align 8
%aQ=bitcast i8*%aM to i8**
%aR=load i8*,i8**%aQ,align 8
store i8*%aR,i8**%f,align 8
%aS=load i8*,i8**%d,align 8
%aT=getelementptr inbounds i8,i8*%aS,i64 8
%aU=bitcast i8*%aT to i8**
%aV=load i8*,i8**%aU,align 8
store i8*%aV,i8**%e,align 8
%aW=call i8*@sml_alloc(i32 inreg 20)#0
%aX=getelementptr inbounds i8,i8*%aW,i64 -4
%aY=bitcast i8*%aX to i32*
store i32 1342177296,i32*%aY,align 4
store i8*%aW,i8**%i,align 8
%aZ=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%a0=bitcast i8*%aW to i8**
store i8*%aZ,i8**%a0,align 8
%a1=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%a2=getelementptr inbounds i8,i8*%aW,i64 8
%a3=bitcast i8*%a2 to i8**
store i8*%a1,i8**%a3,align 8
%a4=getelementptr inbounds i8,i8*%aW,i64 16
%a5=bitcast i8*%a4 to i32*
store i32 3,i32*%a5,align 4
%a6=call i8*@sml_alloc(i32 inreg 28)#0
%a7=getelementptr inbounds i8,i8*%a6,i64 -4
%a8=bitcast i8*%a7 to i32*
store i32 1342177304,i32*%a8,align 4
%a9=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%ba=bitcast i8*%a6 to i8**
store i8*%a9,i8**%ba,align 8
%bb=getelementptr inbounds i8,i8*%a6,i64 8
%bc=bitcast i8*%bb to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_367 to void(...)*),void(...)**%bc,align 8
%bd=getelementptr inbounds i8,i8*%a6,i64 16
%be=bitcast i8*%bd to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_367 to void(...)*),void(...)**%be,align 8
%bf=getelementptr inbounds i8,i8*%a6,i64 24
%bg=bitcast i8*%bf to i32*
store i32 -2147483647,i32*%bg,align 4
%bh=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%bi=call fastcc i8*%aP(i8*inreg%bh,i8*inreg%a6)
%bj=getelementptr inbounds i8,i8*%bi,i64 16
%bk=bitcast i8*%bj to i8*(i8*,i8*)**
%bl=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bk,align 8
%bm=bitcast i8*%bi to i8**
%bn=load i8*,i8**%bm,align 8
%bo=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bp=call fastcc i8*%bl(i8*inreg%bn,i8*inreg%bo)
store i8*%bp,i8**%e,align 8
%bq=call i8*@sml_alloc(i32 inreg 20)#0
%br=getelementptr inbounds i8,i8*%bq,i64 -4
%bs=bitcast i8*%br to i32*
store i32 1342177296,i32*%bs,align 4
store i8*%bq,i8**%c,align 8
%bt=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%bu=bitcast i8*%bq to i8**
store i8*%bt,i8**%bu,align 8
%bv=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bw=getelementptr inbounds i8,i8*%bq,i64 8
%bx=bitcast i8*%bw to i8**
store i8*%bv,i8**%bx,align 8
%by=getelementptr inbounds i8,i8*%bq,i64 16
%bz=bitcast i8*%by to i32*
store i32 3,i32*%bz,align 4
%bA=load i8*,i8**%d,align 8
%bB=getelementptr inbounds i8,i8*%bA,i64 8
%bC=bitcast i8*%bB to i8**
%bD=load i8*,i8**%bC,align 8
store i8*%bD,i8**%d,align 8
%bE=call i8*@sml_alloc(i32 inreg 20)#0
%bF=getelementptr inbounds i8,i8*%bE,i64 -4
%bG=bitcast i8*%bF to i32*
store i32 1342177296,i32*%bG,align 4
store i8*%bE,i8**%e,align 8
%bH=getelementptr inbounds i8,i8*%bE,i64 4
%bI=bitcast i8*%bH to i32*
store i32 0,i32*%bI,align 1
%bJ=bitcast i8*%bE to i32*
store i32 4,i32*%bJ,align 4
%bK=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bL=getelementptr inbounds i8,i8*%bE,i64 8
%bM=bitcast i8*%bL to i8**
store i8*%bK,i8**%bM,align 8
%bN=getelementptr inbounds i8,i8*%bE,i64 16
%bO=bitcast i8*%bN to i32*
store i32 2,i32*%bO,align 4
%bP=call i8*@sml_alloc(i32 inreg 20)#0
%bQ=getelementptr inbounds i8,i8*%bP,i64 -4
%bR=bitcast i8*%bQ to i32*
store i32 1342177296,i32*%bR,align 4
%bS=load i8*,i8**%e,align 8
%bT=bitcast i8*%bP to i8**
store i8*%bS,i8**%bT,align 8
%bU=load i8*,i8**%c,align 8
%bV=getelementptr inbounds i8,i8*%bP,i64 8
%bW=bitcast i8*%bV to i8**
store i8*%bU,i8**%bW,align 8
%bX=getelementptr inbounds i8,i8*%bP,i64 16
%bY=bitcast i8*%bX to i32*
store i32 3,i32*%bY,align 4
ret i8*%bP
}
define internal fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_369(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
%g=bitcast i8*%b to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%c,align 8
%i=getelementptr inbounds i8,i8*%b,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%d,align 8
%l=getelementptr inbounds i8,i8*%b,i64 16
%m=bitcast i8*%l to i8**
%n=load i8*,i8**%m,align 8
store i8*%n,i8**%e,align 8
%o=bitcast i8*%a to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%a,i64 4
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call i8*@sml_alloc(i32 inreg 36)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177312,i32*%v,align 4
store i8*%t,i8**%f,align 8
%w=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%z=getelementptr inbounds i8,i8*%t,i64 8
%A=bitcast i8*%z to i8**
store i8*%y,i8**%A,align 8
%B=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%C=getelementptr inbounds i8,i8*%t,i64 16
%D=bitcast i8*%C to i8**
store i8*%B,i8**%D,align 8
%E=getelementptr inbounds i8,i8*%t,i64 24
%F=bitcast i8*%E to i32*
store i32%p,i32*%F,align 4
%G=getelementptr inbounds i8,i8*%t,i64 28
%H=bitcast i8*%G to i32*
store i32%s,i32*%H,align 4
%I=getelementptr inbounds i8,i8*%t,i64 32
%J=bitcast i8*%I to i32*
store i32 7,i32*%J,align 4
%K=call i8*@sml_alloc(i32 inreg 28)#0
%L=getelementptr inbounds i8,i8*%K,i64 -4
%M=bitcast i8*%L to i32*
store i32 1342177304,i32*%M,align 4
%N=load i8*,i8**%f,align 8
%O=bitcast i8*%K to i8**
store i8*%N,i8**%O,align 8
%P=getelementptr inbounds i8,i8*%K,i64 8
%Q=bitcast i8*%P to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_368 to void(...)*),void(...)**%Q,align 8
%R=getelementptr inbounds i8,i8*%K,i64 16
%S=bitcast i8*%R to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_368 to void(...)*),void(...)**%S,align 8
%T=getelementptr inbounds i8,i8*%K,i64 24
%U=bitcast i8*%T to i32*
store i32 -2147483647,i32*%U,align 4
ret i8*%K
}
define fastcc i8*@_SMLFN10TermFormat23formatEnclosedSEnvPlainE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_369 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_369 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_372(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_374(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_377(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=bitcast i8**%d to i8***
%m=load i8**,i8***%l,align 8
%n=bitcast i8**%m to i8*
br label%o
o:
%p=phi i8*[%n,%k],[%a,%i]
%q=phi i8**[%m,%k],[%j,%i]
%r=load i8*,i8**%q,align 8
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%e,align 8
%x=getelementptr inbounds i8,i8*%p,i64 8
%y=bitcast i8*%x to i8**
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%d,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%f,align 8
%D=getelementptr inbounds i8,i8*%A,i64 4
%E=bitcast i8*%D to i32*
store i32 0,i32*%E,align 1
%F=bitcast i8*%A to i32*
store i32 4,i32*%F,align 4
%G=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%H=getelementptr inbounds i8,i8*%A,i64 8
%I=bitcast i8*%H to i8**
store i8*%G,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%A,i64 16
%K=bitcast i8*%J to i32*
store i32 2,i32*%K,align 4
%L=call i8*@sml_alloc(i32 inreg 20)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32 1342177296,i32*%N,align 4
%O=load i8*,i8**%f,align 8
%P=bitcast i8*%L to i8**
store i8*%O,i8**%P,align 8
%Q=load i8*,i8**%c,align 8
%R=getelementptr inbounds i8,i8*%L,i64 8
%S=bitcast i8*%R to i8**
store i8*%Q,i8**%S,align 8
%T=getelementptr inbounds i8,i8*%L,i64 16
%U=bitcast i8*%T to i32*
store i32 3,i32*%U,align 4
%V=load i8*,i8**%e,align 8
%W=tail call fastcc i8*%u(i8*inreg%V,i8*inreg%L)
ret i8*%W
}
define internal fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_378(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8**
br label%p
l:
call void@sml_check(i32 inreg%h)
%m=load i8*,i8**%d,align 8
%n=bitcast i8**%c to i8***
%o=load i8**,i8***%n,align 8
br label%p
p:
%q=phi i8**[%o,%l],[%k,%j]
%r=phi i8*[%m,%l],[%b,%j]
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%f,align 8
%x=load i8*,i8**%q,align 8
store i8*%x,i8**%d,align 8
%y=getelementptr inbounds i8*,i8**%q,i64 2
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%e,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%g,align 8
%D=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%E=bitcast i8*%A to i8**
store i8*%D,i8**%E,align 8
%F=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%G=getelementptr inbounds i8,i8*%A,i64 8
%H=bitcast i8*%G to i8**
store i8*%F,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%A,i64 16
%J=bitcast i8*%I to i32*
store i32 3,i32*%J,align 4
%K=call i8*@sml_alloc(i32 inreg 28)#0
%L=getelementptr inbounds i8,i8*%K,i64 -4
%M=bitcast i8*%L to i32*
store i32 1342177304,i32*%M,align 4
store i8*%K,i8**%d,align 8
%N=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%O=bitcast i8*%K to i8**
store i8*%N,i8**%O,align 8
%P=getelementptr inbounds i8,i8*%K,i64 8
%Q=bitcast i8*%P to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_377 to void(...)*),void(...)**%Q,align 8
%R=getelementptr inbounds i8,i8*%K,i64 16
%S=bitcast i8*%R to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_377 to void(...)*),void(...)**%S,align 8
%T=getelementptr inbounds i8,i8*%K,i64 24
%U=bitcast i8*%T to i32*
store i32 -2147483647,i32*%U,align 4
%V=load i8*,i8**%c,align 8
%W=getelementptr inbounds i8,i8*%V,i64 8
%X=bitcast i8*%W to i8**
%Y=load i8*,i8**%X,align 8
store i8*%Y,i8**%c,align 8
%Z=call i8*@sml_alloc(i32 inreg 20)#0
%aa=getelementptr inbounds i8,i8*%Z,i64 -4
%ab=bitcast i8*%aa to i32*
store i32 1342177296,i32*%ab,align 4
%ac=load i8*,i8**%d,align 8
%ad=bitcast i8*%Z to i8**
store i8*%ac,i8**%ad,align 8
%ae=load i8*,i8**%c,align 8
%af=getelementptr inbounds i8,i8*%Z,i64 8
%ag=bitcast i8*%af to i8**
store i8*%ae,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%Z,i64 16
%ai=bitcast i8*%ah to i32*
store i32 3,i32*%ai,align 4
%aj=load i8*,i8**%f,align 8
%ak=tail call fastcc i8*%u(i8*inreg%aj,i8*inreg%Z)
ret i8*%ak
}
define internal fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_379(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
store i8*%l,i8**%f,align 8
%o=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%r=getelementptr inbounds i8,i8*%l,i64 8
%s=bitcast i8*%r to i8**
store i8*%q,i8**%s,align 8
%t=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%u=getelementptr inbounds i8,i8*%l,i64 16
%v=bitcast i8*%u to i8**
store i8*%t,i8**%v,align 8
%w=getelementptr inbounds i8,i8*%l,i64 24
%x=bitcast i8*%w to i32*
store i32 7,i32*%x,align 4
%y=call i8*@sml_alloc(i32 inreg 28)#0
%z=getelementptr inbounds i8,i8*%y,i64 -4
%A=bitcast i8*%z to i32*
store i32 1342177304,i32*%A,align 4
%B=load i8*,i8**%f,align 8
%C=bitcast i8*%y to i8**
store i8*%B,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%y,i64 8
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_378 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%y,i64 16
%G=bitcast i8*%F to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_378 to void(...)*),void(...)**%G,align 8
%H=getelementptr inbounds i8,i8*%y,i64 24
%I=bitcast i8*%H to i32*
store i32 -2147483647,i32*%I,align 4
ret i8*%y
}
define internal fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_380(i8*inreg%a)#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i8**
%f=load i8*,i8**%e,align 8
store i8*%f,i8**%b,align 8
%g=getelementptr inbounds i8,i8*%a,i64 8
%h=bitcast i8*%g to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%c,align 8
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i8**
store i8*%o,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%j,i64 16
%s=bitcast i8*%r to i32*
store i32 3,i32*%s,align 4
%t=call i8*@sml_alloc(i32 inreg 28)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177304,i32*%v,align 4
%w=load i8*,i8**%d,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_379 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%t,i64 16
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_379 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%t,i64 24
%D=bitcast i8*%C to i32*
store i32 -2147483647,i32*%D,align 4
ret i8*%t
}
define internal fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_382(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=bitcast i8**%d to i8***
%m=load i8**,i8***%l,align 8
%n=bitcast i8**%m to i8*
br label%o
o:
%p=phi i8*[%n,%k],[%a,%i]
%q=phi i8**[%m,%k],[%j,%i]
%r=load i8*,i8**%q,align 8
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%e,align 8
%x=getelementptr inbounds i8,i8*%p,i64 8
%y=bitcast i8*%x to i8**
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%d,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%f,align 8
%D=getelementptr inbounds i8,i8*%A,i64 4
%E=bitcast i8*%D to i32*
store i32 0,i32*%E,align 1
%F=bitcast i8*%A to i32*
store i32 4,i32*%F,align 4
%G=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%H=getelementptr inbounds i8,i8*%A,i64 8
%I=bitcast i8*%H to i8**
store i8*%G,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%A,i64 16
%K=bitcast i8*%J to i32*
store i32 2,i32*%K,align 4
%L=call i8*@sml_alloc(i32 inreg 20)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32 1342177296,i32*%N,align 4
%O=load i8*,i8**%f,align 8
%P=bitcast i8*%L to i8**
store i8*%O,i8**%P,align 8
%Q=load i8*,i8**%c,align 8
%R=getelementptr inbounds i8,i8*%L,i64 8
%S=bitcast i8*%R to i8**
store i8*%Q,i8**%S,align 8
%T=getelementptr inbounds i8,i8*%L,i64 16
%U=bitcast i8*%T to i32*
store i32 3,i32*%U,align 4
%V=load i8*,i8**%e,align 8
%W=tail call fastcc i8*%u(i8*inreg%V,i8*inreg%L)
ret i8*%W
}
define internal fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_383(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8**
br label%p
l:
call void@sml_check(i32 inreg%h)
%m=load i8*,i8**%d,align 8
%n=bitcast i8**%c to i8***
%o=load i8**,i8***%n,align 8
br label%p
p:
%q=phi i8**[%o,%l],[%k,%j]
%r=phi i8*[%m,%l],[%b,%j]
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%f,align 8
%x=load i8*,i8**%q,align 8
store i8*%x,i8**%d,align 8
%y=getelementptr inbounds i8*,i8**%q,i64 2
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%e,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%g,align 8
%D=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%E=bitcast i8*%A to i8**
store i8*%D,i8**%E,align 8
%F=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%G=getelementptr inbounds i8,i8*%A,i64 8
%H=bitcast i8*%G to i8**
store i8*%F,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%A,i64 16
%J=bitcast i8*%I to i32*
store i32 3,i32*%J,align 4
%K=call i8*@sml_alloc(i32 inreg 28)#0
%L=getelementptr inbounds i8,i8*%K,i64 -4
%M=bitcast i8*%L to i32*
store i32 1342177304,i32*%M,align 4
store i8*%K,i8**%d,align 8
%N=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%O=bitcast i8*%K to i8**
store i8*%N,i8**%O,align 8
%P=getelementptr inbounds i8,i8*%K,i64 8
%Q=bitcast i8*%P to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_382 to void(...)*),void(...)**%Q,align 8
%R=getelementptr inbounds i8,i8*%K,i64 16
%S=bitcast i8*%R to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_382 to void(...)*),void(...)**%S,align 8
%T=getelementptr inbounds i8,i8*%K,i64 24
%U=bitcast i8*%T to i32*
store i32 -2147483647,i32*%U,align 4
%V=load i8*,i8**%c,align 8
%W=getelementptr inbounds i8,i8*%V,i64 8
%X=bitcast i8*%W to i8**
%Y=load i8*,i8**%X,align 8
store i8*%Y,i8**%c,align 8
%Z=call i8*@sml_alloc(i32 inreg 20)#0
%aa=getelementptr inbounds i8,i8*%Z,i64 -4
%ab=bitcast i8*%aa to i32*
store i32 1342177296,i32*%ab,align 4
%ac=load i8*,i8**%d,align 8
%ad=bitcast i8*%Z to i8**
store i8*%ac,i8**%ad,align 8
%ae=load i8*,i8**%c,align 8
%af=getelementptr inbounds i8,i8*%Z,i64 8
%ag=bitcast i8*%af to i8**
store i8*%ae,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%Z,i64 16
%ai=bitcast i8*%ah to i32*
store i32 3,i32*%ai,align 4
%aj=load i8*,i8**%f,align 8
%ak=tail call fastcc i8*%u(i8*inreg%aj,i8*inreg%Z)
ret i8*%ak
}
define internal fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_384(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
store i8*%l,i8**%f,align 8
%o=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%r=getelementptr inbounds i8,i8*%l,i64 8
%s=bitcast i8*%r to i8**
store i8*%q,i8**%s,align 8
%t=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%u=getelementptr inbounds i8,i8*%l,i64 16
%v=bitcast i8*%u to i8**
store i8*%t,i8**%v,align 8
%w=getelementptr inbounds i8,i8*%l,i64 24
%x=bitcast i8*%w to i32*
store i32 7,i32*%x,align 4
%y=call i8*@sml_alloc(i32 inreg 28)#0
%z=getelementptr inbounds i8,i8*%y,i64 -4
%A=bitcast i8*%z to i32*
store i32 1342177304,i32*%A,align 4
%B=load i8*,i8**%f,align 8
%C=bitcast i8*%y to i8**
store i8*%B,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%y,i64 8
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_383 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%y,i64 16
%G=bitcast i8*%F to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_383 to void(...)*),void(...)**%G,align 8
%H=getelementptr inbounds i8,i8*%y,i64 24
%I=bitcast i8*%H to i32*
store i32 -2147483647,i32*%I,align 4
ret i8*%y
}
define internal fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_385(i8*inreg%a)#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i8**
%f=load i8*,i8**%e,align 8
store i8*%f,i8**%b,align 8
%g=getelementptr inbounds i8,i8*%a,i64 8
%h=bitcast i8*%g to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%c,align 8
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i8**
store i8*%o,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%j,i64 16
%s=bitcast i8*%r to i32*
store i32 3,i32*%s,align 4
%t=call i8*@sml_alloc(i32 inreg 28)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177304,i32*%v,align 4
%w=load i8*,i8**%d,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_384 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%t,i64 16
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_384 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%t,i64 24
%D=bitcast i8*%C to i32*
store i32 -2147483647,i32*%D,align 4
ret i8*%t
}
define internal fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_387(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=bitcast i8**%d to i8***
%m=load i8**,i8***%l,align 8
%n=bitcast i8**%m to i8*
br label%o
o:
%p=phi i8*[%n,%k],[%a,%i]
%q=phi i8**[%m,%k],[%j,%i]
%r=load i8*,i8**%q,align 8
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%e,align 8
%x=getelementptr inbounds i8,i8*%p,i64 8
%y=bitcast i8*%x to i8**
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%d,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%f,align 8
%D=getelementptr inbounds i8,i8*%A,i64 4
%E=bitcast i8*%D to i32*
store i32 0,i32*%E,align 1
%F=bitcast i8*%A to i32*
store i32 4,i32*%F,align 4
%G=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%H=getelementptr inbounds i8,i8*%A,i64 8
%I=bitcast i8*%H to i8**
store i8*%G,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%A,i64 16
%K=bitcast i8*%J to i32*
store i32 2,i32*%K,align 4
%L=call i8*@sml_alloc(i32 inreg 20)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32 1342177296,i32*%N,align 4
%O=load i8*,i8**%f,align 8
%P=bitcast i8*%L to i8**
store i8*%O,i8**%P,align 8
%Q=load i8*,i8**%c,align 8
%R=getelementptr inbounds i8,i8*%L,i64 8
%S=bitcast i8*%R to i8**
store i8*%Q,i8**%S,align 8
%T=getelementptr inbounds i8,i8*%L,i64 16
%U=bitcast i8*%T to i32*
store i32 3,i32*%U,align 4
%V=load i8*,i8**%e,align 8
%W=tail call fastcc i8*%u(i8*inreg%V,i8*inreg%L)
ret i8*%W
}
define internal fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_388(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8**
br label%p
l:
call void@sml_check(i32 inreg%h)
%m=load i8*,i8**%d,align 8
%n=bitcast i8**%c to i8***
%o=load i8**,i8***%n,align 8
br label%p
p:
%q=phi i8**[%o,%l],[%k,%j]
%r=phi i8*[%m,%l],[%b,%j]
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%f,align 8
%x=load i8*,i8**%q,align 8
store i8*%x,i8**%d,align 8
%y=getelementptr inbounds i8*,i8**%q,i64 2
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%e,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%g,align 8
%D=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%E=bitcast i8*%A to i8**
store i8*%D,i8**%E,align 8
%F=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%G=getelementptr inbounds i8,i8*%A,i64 8
%H=bitcast i8*%G to i8**
store i8*%F,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%A,i64 16
%J=bitcast i8*%I to i32*
store i32 3,i32*%J,align 4
%K=call i8*@sml_alloc(i32 inreg 28)#0
%L=getelementptr inbounds i8,i8*%K,i64 -4
%M=bitcast i8*%L to i32*
store i32 1342177304,i32*%M,align 4
store i8*%K,i8**%d,align 8
%N=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%O=bitcast i8*%K to i8**
store i8*%N,i8**%O,align 8
%P=getelementptr inbounds i8,i8*%K,i64 8
%Q=bitcast i8*%P to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_387 to void(...)*),void(...)**%Q,align 8
%R=getelementptr inbounds i8,i8*%K,i64 16
%S=bitcast i8*%R to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_387 to void(...)*),void(...)**%S,align 8
%T=getelementptr inbounds i8,i8*%K,i64 24
%U=bitcast i8*%T to i32*
store i32 -2147483647,i32*%U,align 4
%V=load i8*,i8**%c,align 8
%W=getelementptr inbounds i8,i8*%V,i64 8
%X=bitcast i8*%W to i8**
%Y=load i8*,i8**%X,align 8
store i8*%Y,i8**%c,align 8
%Z=call i8*@sml_alloc(i32 inreg 20)#0
%aa=getelementptr inbounds i8,i8*%Z,i64 -4
%ab=bitcast i8*%aa to i32*
store i32 1342177296,i32*%ab,align 4
%ac=load i8*,i8**%d,align 8
%ad=bitcast i8*%Z to i8**
store i8*%ac,i8**%ad,align 8
%ae=load i8*,i8**%c,align 8
%af=getelementptr inbounds i8,i8*%Z,i64 8
%ag=bitcast i8*%af to i8**
store i8*%ae,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%Z,i64 16
%ai=bitcast i8*%ah to i32*
store i32 3,i32*%ai,align 4
%aj=load i8*,i8**%f,align 8
%ak=tail call fastcc i8*%u(i8*inreg%aj,i8*inreg%Z)
ret i8*%ak
}
define internal fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_389(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
store i8*%l,i8**%f,align 8
%o=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%r=getelementptr inbounds i8,i8*%l,i64 8
%s=bitcast i8*%r to i8**
store i8*%q,i8**%s,align 8
%t=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%u=getelementptr inbounds i8,i8*%l,i64 16
%v=bitcast i8*%u to i8**
store i8*%t,i8**%v,align 8
%w=getelementptr inbounds i8,i8*%l,i64 24
%x=bitcast i8*%w to i32*
store i32 7,i32*%x,align 4
%y=call i8*@sml_alloc(i32 inreg 28)#0
%z=getelementptr inbounds i8,i8*%y,i64 -4
%A=bitcast i8*%z to i32*
store i32 1342177304,i32*%A,align 4
%B=load i8*,i8**%f,align 8
%C=bitcast i8*%y to i8**
store i8*%B,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%y,i64 8
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_388 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%y,i64 16
%G=bitcast i8*%F to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_388 to void(...)*),void(...)**%G,align 8
%H=getelementptr inbounds i8,i8*%y,i64 24
%I=bitcast i8*%H to i32*
store i32 -2147483647,i32*%I,align 4
ret i8*%y
}
define internal fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_390(i8*inreg%a)#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i8**
%f=load i8*,i8**%e,align 8
store i8*%f,i8**%b,align 8
%g=getelementptr inbounds i8,i8*%a,i64 8
%h=bitcast i8*%g to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%c,align 8
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i8**
store i8*%o,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%j,i64 16
%s=bitcast i8*%r to i32*
store i32 3,i32*%s,align 4
%t=call i8*@sml_alloc(i32 inreg 28)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177304,i32*%v,align 4
%w=load i8*,i8**%d,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_389 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%t,i64 16
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_389 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%t,i64 24
%D=bitcast i8*%C to i32*
store i32 -2147483647,i32*%D,align 4
ret i8*%t
}
define internal fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_392(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=bitcast i8*%h to i8**
%k=load i8*,i8**%j,align 8
%l=getelementptr inbounds i8,i8*%h,i64 8
%m=bitcast i8*%l to i8**
%n=load i8*,i8**%m,align 8
%o=getelementptr inbounds i8,i8*%n,i64 16
%p=bitcast i8*%o to i8*(i8*,i8*)**
%q=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%p,align 8
%r=bitcast i8*%n to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%b,align 8
%t=getelementptr inbounds i8,i8*%k,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%k to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
%A=tail call fastcc i8*%q(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define internal fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_394(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=bitcast i8*%h to i8**
%k=load i8*,i8**%j,align 8
%l=getelementptr inbounds i8,i8*%h,i64 8
%m=bitcast i8*%l to i8**
%n=load i8*,i8**%m,align 8
%o=getelementptr inbounds i8,i8*%n,i64 16
%p=bitcast i8*%o to i8*(i8*,i8*)**
%q=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%p,align 8
%r=bitcast i8*%n to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%b,align 8
%t=getelementptr inbounds i8,i8*%k,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%k to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
%A=tail call fastcc i8*%q(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define internal fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_396(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%j=load atomic i32,i32*@sml_check_flag unordered,align 4
%k=icmp eq i32%j,0
br i1%k,label%l,label%n
l:
%m=bitcast i8*%b to i8**
br label%s
n:
call void@sml_check(i32 inreg%j)
%o=bitcast i8**%c to i8***
%p=load i8**,i8***%o,align 8
%q=load i8*,i8**%e,align 8
%r=bitcast i8**%p to i8*
br label%s
s:
%t=phi i8*[%r,%n],[%b,%l]
%u=phi i8*[%q,%n],[%a,%l]
%v=phi i8**[%p,%n],[%m,%l]
%w=getelementptr inbounds i8,i8*%u,i64 20
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=add i32%y,7
%A=sub i32 0,%y
%B=and i32%z,%A
%C=load i8*,i8**%v,align 8
store i8*%C,i8**%d,align 8
%D=getelementptr inbounds i8,i8*%u,i64 16
%E=bitcast i8*%D to i32*
%F=load i32,i32*%E,align 4
%G=icmp eq i32%F,0
br i1%G,label%M,label%H
H:
store i8*null,i8**%c,align 8
%I=sext i32%B to i64
%J=getelementptr inbounds i8,i8*%t,i64%I
%K=bitcast i8*%J to i8**
%L=load i8*,i8**%K,align 8
br label%T
M:
%N=call i8*@sml_alloc(i32 inreg%y)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32%y,i32*%P,align 4
%Q=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%R=sext i32%B to i64
%S=getelementptr inbounds i8,i8*%Q,i64%R
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%N,i8*%S,i32%y,i1 false)
br label%T
T:
%U=phi i8*[%N,%M],[%L,%H]
store i8*%U,i8**%c,align 8
%V=call fastcc i8*@_SMLLLN10TermFormat10FormatComb5nest__E_204(i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,i8*,i32}>,<{[4x i8],i32,i8*,i8*,i32}>*@am,i64 0,i32 2)to i8*))
%W=getelementptr inbounds i8,i8*%V,i64 16
%X=bitcast i8*%W to i8*(i8*,i8*)**
%Y=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%X,align 8
%Z=bitcast i8*%V to i8**
%aa=load i8*,i8**%Z,align 8
store i8*%aa,i8**%f,align 8
%ab=call i8*@sml_alloc(i32 inreg 4)#0
%ac=bitcast i8*%ab to i32*
%ad=getelementptr inbounds i8,i8*%ab,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 4,i32*%ae,align 4
store i32 1,i32*%ac,align 4
%af=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%ag=call fastcc i8*%Y(i8*inreg%af,i8*inreg%ab)
%ah=getelementptr inbounds i8,i8*%ag,i64 16
%ai=bitcast i8*%ah to i8*(i8*,i8*,i8*,i8*,i8*)**
%aj=load i8*(i8*,i8*,i8*,i8*,i8*)*,i8*(i8*,i8*,i8*,i8*,i8*)**%ai,align 8
%ak=bitcast i8*%ag to i8**
%al=load i8*,i8**%ak,align 8
store i8*%al,i8**%f,align 8
%am=call i8*@sml_alloc(i32 inreg 4)#0
%an=bitcast i8*%am to i32*
%ao=getelementptr inbounds i8,i8*%am,i64 -4
%ap=bitcast i8*%ao to i32*
store i32 4,i32*%ap,align 4
store i8*%am,i8**%g,align 8
store i32 1,i32*%an,align 4
%aq=call i8*@sml_alloc(i32 inreg 4)#0
%ar=bitcast i8*%aq to i32*
%as=getelementptr inbounds i8,i8*%aq,i64 -4
%at=bitcast i8*%as to i32*
store i32 4,i32*%at,align 4
store i8*%aq,i8**%h,align 8
store i32 8,i32*%ar,align 4
%au=call i8*@sml_alloc(i32 inreg 4)#0
%av=bitcast i8*%au to i32*
%aw=getelementptr inbounds i8,i8*%au,i64 -4
%ax=bitcast i8*%aw to i32*
store i32 4,i32*%ax,align 4
store i8*%au,i8**%i,align 8
store i32 1,i32*%av,align 4
%ay=call i8*@sml_alloc(i32 inreg 4)#0
%az=bitcast i8*%ay to i32*
%aA=getelementptr inbounds i8,i8*%ay,i64 -4
%aB=bitcast i8*%aA to i32*
store i32 4,i32*%aB,align 4
store i32 8,i32*%az,align 4
%aC=load i8*,i8**%f,align 8
%aD=load i8*,i8**%g,align 8
%aE=load i8*,i8**%h,align 8
%aF=load i8*,i8**%i,align 8
store i8*null,i8**%f,align 8
store i8*null,i8**%g,align 8
store i8*null,i8**%h,align 8
store i8*null,i8**%i,align 8
%aG=call fastcc i8*%aj(i8*inreg%aC,i8*inreg%aD,i8*inreg%aE,i8*inreg%aF,i8*inreg%ay)
%aH=getelementptr inbounds i8,i8*%aG,i64 16
%aI=bitcast i8*%aH to i8*(i8*,i8*)**
%aJ=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aI,align 8
%aK=bitcast i8*%aG to i8**
%aL=load i8*,i8**%aK,align 8
%aM=call fastcc i8*%aJ(i8*inreg%aL,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@an,i64 0,i32 2)to i8*))
%aN=getelementptr inbounds i8,i8*%aM,i64 16
%aO=bitcast i8*%aN to i8*(i8*,i8*)**
%aP=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aO,align 8
%aQ=bitcast i8*%aM to i8**
%aR=load i8*,i8**%aQ,align 8
store i8*%aR,i8**%f,align 8
%aS=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aT=call fastcc i8*@_SMLFN6Symbol13format__symbolE(i8*inreg%aS)
%aU=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%aV=call fastcc i8*%aP(i8*inreg%aU,i8*inreg%aT)
%aW=getelementptr inbounds i8,i8*%aV,i64 16
%aX=bitcast i8*%aW to i8*(i8*,i8*)**
%aY=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aX,align 8
%aZ=bitcast i8*%aV to i8**
%a0=load i8*,i8**%aZ,align 8
%a1=call fastcc i8*%aY(i8*inreg%a0,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@ao,i64 0,i32 2)to i8*))
%a2=getelementptr inbounds i8,i8*%a1,i64 16
%a3=bitcast i8*%a2 to i8*(i8*,i8*)**
%a4=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a3,align 8
%a5=bitcast i8*%a1 to i8**
%a6=load i8*,i8**%a5,align 8
%a7=load i8*,i8**%e,align 8
%a8=getelementptr inbounds i8,i8*%a7,i64 8
%a9=bitcast i8*%a8 to i8**
%ba=load i8*,i8**%a9,align 8
%bb=call fastcc i8*%a4(i8*inreg%a6,i8*inreg%ba)
%bc=getelementptr inbounds i8,i8*%bb,i64 16
%bd=bitcast i8*%bc to i8*(i8*,i8*)**
%be=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bd,align 8
%bf=bitcast i8*%bb to i8**
%bg=load i8*,i8**%bf,align 8
%bh=call fastcc i8*%be(i8*inreg%bg,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@ap,i64 0,i32 2)to i8*))
%bi=getelementptr inbounds i8,i8*%bh,i64 16
%bj=bitcast i8*%bi to i8*(i8*,i8*)**
%bk=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bj,align 8
%bl=bitcast i8*%bh to i8**
%bm=load i8*,i8**%bl,align 8
store i8*%bm,i8**%d,align 8
%bn=bitcast i8**%e to i8***
%bo=load i8**,i8***%bn,align 8
%bp=load i8*,i8**%bo,align 8
%bq=getelementptr inbounds i8,i8*%bp,i64 16
%br=bitcast i8*%bq to i8*(i8*,i8*)**
%bs=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%br,align 8
store i8*null,i8**%e,align 8
%bt=bitcast i8**%bo to i8***
%bu=load i8**,i8***%bt,align 8
%bv=load i8*,i8**%bu,align 8
%bw=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bx=call fastcc i8*%bs(i8*inreg%bv,i8*inreg%bw)
%by=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bz=call fastcc i8*%bk(i8*inreg%by,i8*inreg%bx)
%bA=getelementptr inbounds i8,i8*%bz,i64 16
%bB=bitcast i8*%bA to i8*(i8*,i8*)**
%bC=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bB,align 8
%bD=bitcast i8*%bz to i8**
%bE=load i8*,i8**%bD,align 8
%bF=call fastcc i8*%bC(i8*inreg%bE,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aq,i64 0,i32 2)to i8*))
%bG=getelementptr inbounds i8,i8*%bF,i64 16
%bH=bitcast i8*%bG to i8*(i8*,i8*)**
%bI=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bH,align 8
%bJ=bitcast i8*%bF to i8**
%bK=load i8*,i8**%bJ,align 8
%bL=tail call fastcc i8*%bI(i8*inreg%bK,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@ar,i64 0,i32 2)to i8*))
ret i8*%bL
}
define internal fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_397(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
m:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%k,label%h
h:
call void@sml_check(i32 inreg%f)
%i=load i8*,i8**%c,align 8
%j=load i8*,i8**%d,align 8
br label%k
k:
%l=phi i8*[%j,%h],[%a,%m]
%n=phi i8*[%i,%h],[%b,%m]
store i8*null,i8**%c,align 8
%o=getelementptr inbounds i8,i8*%l,i64 8
%p=bitcast i8*%o to i8**
%q=load i8*,i8**%p,align 8
%r=call fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_396(i8*inreg%q,i8*inreg%n)
store i8*%r,i8**%c,align 8
%s=bitcast i8**%d to i8***
%t=load i8**,i8***%s,align 8
%u=load i8*,i8**%t,align 8
store i8*%u,i8**%d,align 8
%v=call i8*@sml_alloc(i32 inreg 20)#0
%w=getelementptr inbounds i8,i8*%v,i64 -4
%x=bitcast i8*%w to i32*
store i32 1342177296,i32*%x,align 4
store i8*%v,i8**%e,align 8
%y=getelementptr inbounds i8,i8*%v,i64 4
%z=bitcast i8*%y to i32*
store i32 0,i32*%z,align 1
%A=bitcast i8*%v to i32*
store i32 4,i32*%A,align 4
%B=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%C=getelementptr inbounds i8,i8*%v,i64 8
%D=bitcast i8*%C to i8**
store i8*%B,i8**%D,align 8
%E=getelementptr inbounds i8,i8*%v,i64 16
%F=bitcast i8*%E to i32*
store i32 2,i32*%F,align 4
%G=call i8*@sml_alloc(i32 inreg 20)#0
%H=getelementptr inbounds i8,i8*%G,i64 -4
%I=bitcast i8*%H to i32*
store i32 1342177296,i32*%I,align 4
store i8*%G,i8**%d,align 8
%J=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%K=bitcast i8*%G to i8**
store i8*%J,i8**%K,align 8
%L=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%M=getelementptr inbounds i8,i8*%G,i64 8
%N=bitcast i8*%M to i8**
store i8*%L,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%G,i64 16
%P=bitcast i8*%O to i32*
store i32 3,i32*%P,align 4
%Q=call i8*@sml_alloc(i32 inreg 20)#0
%R=bitcast i8*%Q to i32*
%S=getelementptr inbounds i8,i8*%Q,i64 -4
%T=bitcast i8*%S to i32*
store i32 1342177296,i32*%T,align 4
%U=getelementptr inbounds i8,i8*%Q,i64 4
%V=bitcast i8*%U to i32*
store i32 0,i32*%V,align 1
store i32 4,i32*%R,align 4
%W=load i8*,i8**%d,align 8
%X=getelementptr inbounds i8,i8*%Q,i64 8
%Y=bitcast i8*%X to i8**
store i8*%W,i8**%Y,align 8
%Z=getelementptr inbounds i8,i8*%Q,i64 16
%aa=bitcast i8*%Z to i32*
store i32 2,i32*%aa,align 4
ret i8*%Q
}
define internal fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_398(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%j=load atomic i32,i32*@sml_check_flag unordered,align 4
%k=icmp eq i32%j,0
br i1%k,label%l,label%n
l:
%m=bitcast i8*%a to i8**
br label%r
n:
call void@sml_check(i32 inreg%j)
%o=bitcast i8**%d to i8***
%p=load i8**,i8***%o,align 8
%q=bitcast i8**%p to i8*
br label%r
r:
%s=phi i8*[%q,%n],[%a,%l]
%t=phi i8**[%p,%n],[%m,%l]
%u=load i8*,i8**%t,align 8
store i8*%u,i8**%e,align 8
%v=getelementptr inbounds i8*,i8**%t,i64 2
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%f,align 8
%x=getelementptr inbounds i8*,i8**%t,i64 3
%y=bitcast i8**%x to i32*
%z=load i32,i32*%y,align 4
%A=getelementptr inbounds i8,i8*%s,i64 28
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=call i8*@sml_alloc(i32 inreg 28)#0
%E=getelementptr inbounds i8,i8*%D,i64 -4
%F=bitcast i8*%E to i32*
store i32 1342177304,i32*%F,align 4
store i8*%D,i8**%g,align 8
%G=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%H=bitcast i8*%D to i8**
store i8*%G,i8**%H,align 8
%I=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%J=getelementptr inbounds i8,i8*%D,i64 8
%K=bitcast i8*%J to i8**
store i8*%I,i8**%K,align 8
%L=getelementptr inbounds i8,i8*%D,i64 16
%M=bitcast i8*%L to i32*
store i32%z,i32*%M,align 4
%N=getelementptr inbounds i8,i8*%D,i64 20
%O=bitcast i8*%N to i32*
store i32%C,i32*%O,align 4
%P=getelementptr inbounds i8,i8*%D,i64 24
%Q=bitcast i8*%P to i32*
store i32 3,i32*%Q,align 4
%R=call i8*@sml_alloc(i32 inreg 28)#0
%S=getelementptr inbounds i8,i8*%R,i64 -4
%T=bitcast i8*%S to i32*
store i32 1342177304,i32*%T,align 4
%U=load i8*,i8**%g,align 8
%V=bitcast i8*%R to i8**
store i8*%U,i8**%V,align 8
%W=getelementptr inbounds i8,i8*%R,i64 8
%X=bitcast i8*%W to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_396 to void(...)*),void(...)**%X,align 8
%Y=getelementptr inbounds i8,i8*%R,i64 16
%Z=bitcast i8*%Y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_396 to void(...)*),void(...)**%Z,align 8
%aa=getelementptr inbounds i8,i8*%R,i64 24
%ab=bitcast i8*%aa to i32*
store i32 -2147483647,i32*%ab,align 4
%ac=load i8*,i8**%d,align 8
%ad=getelementptr inbounds i8,i8*%ac,i64 24
%ae=bitcast i8*%ad to i32*
%af=load i32,i32*%ae,align 4
%ag=getelementptr inbounds i8,i8*%ac,i64 28
%ah=bitcast i8*%ag to i32*
%ai=load i32,i32*%ah,align 4
%aj=call fastcc i8*@_SMLFN9SymbolEnv10listItemsiE(i32 inreg%af,i32 inreg%ai)
%ak=getelementptr inbounds i8,i8*%aj,i64 16
%al=bitcast i8*%ak to i8*(i8*,i8*)**
%am=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%al,align 8
%an=bitcast i8*%aj to i8**
%ao=load i8*,i8**%an,align 8
%ap=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aq=call fastcc i8*%am(i8*inreg%ao,i8*inreg%ap)
%ar=icmp eq i8*%aq,null
br i1%ar,label%as,label%at
as:
ret i8*null
at:
%au=bitcast i8*%aq to i8**
%av=load i8*,i8**%au,align 8
%aw=getelementptr inbounds i8,i8*%aq,i64 8
%ax=bitcast i8*%aw to i8**
%ay=load i8*,i8**%ax,align 8
store i8*%ay,i8**%c,align 8
%az=load i8*,i8**%g,align 8
%aA=call fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_396(i8*inreg%az,i8*inreg%av)
store i8*%aA,i8**%e,align 8
%aB=call i8*@sml_alloc(i32 inreg 20)#0
%aC=getelementptr inbounds i8,i8*%aB,i64 -4
%aD=bitcast i8*%aC to i32*
store i32 1342177296,i32*%aD,align 4
store i8*%aB,i8**%h,align 8
%aE=getelementptr inbounds i8,i8*%aB,i64 4
%aF=bitcast i8*%aE to i32*
store i32 0,i32*%aF,align 1
%aG=bitcast i8*%aB to i32*
store i32 4,i32*%aG,align 4
%aH=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aI=getelementptr inbounds i8,i8*%aB,i64 8
%aJ=bitcast i8*%aI to i8**
store i8*%aH,i8**%aJ,align 8
%aK=getelementptr inbounds i8,i8*%aB,i64 16
%aL=bitcast i8*%aK to i32*
store i32 2,i32*%aL,align 4
%aM=call fastcc i8*@_SMLFN4List3mapE(i32 inreg 1,i32 inreg 8,i32 inreg 1,i32 inreg 8)
%aN=getelementptr inbounds i8,i8*%aM,i64 16
%aO=bitcast i8*%aN to i8*(i8*,i8*)**
%aP=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aO,align 8
%aQ=bitcast i8*%aM to i8**
%aR=load i8*,i8**%aQ,align 8
store i8*%aR,i8**%f,align 8
%aS=load i8*,i8**%d,align 8
%aT=getelementptr inbounds i8,i8*%aS,i64 8
%aU=bitcast i8*%aT to i8**
%aV=load i8*,i8**%aU,align 8
store i8*%aV,i8**%e,align 8
%aW=call i8*@sml_alloc(i32 inreg 20)#0
%aX=getelementptr inbounds i8,i8*%aW,i64 -4
%aY=bitcast i8*%aX to i32*
store i32 1342177296,i32*%aY,align 4
store i8*%aW,i8**%i,align 8
%aZ=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%a0=bitcast i8*%aW to i8**
store i8*%aZ,i8**%a0,align 8
%a1=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%a2=getelementptr inbounds i8,i8*%aW,i64 8
%a3=bitcast i8*%a2 to i8**
store i8*%a1,i8**%a3,align 8
%a4=getelementptr inbounds i8,i8*%aW,i64 16
%a5=bitcast i8*%a4 to i32*
store i32 3,i32*%a5,align 4
%a6=call i8*@sml_alloc(i32 inreg 28)#0
%a7=getelementptr inbounds i8,i8*%a6,i64 -4
%a8=bitcast i8*%a7 to i32*
store i32 1342177304,i32*%a8,align 4
%a9=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%ba=bitcast i8*%a6 to i8**
store i8*%a9,i8**%ba,align 8
%bb=getelementptr inbounds i8,i8*%a6,i64 8
%bc=bitcast i8*%bb to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_397 to void(...)*),void(...)**%bc,align 8
%bd=getelementptr inbounds i8,i8*%a6,i64 16
%be=bitcast i8*%bd to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_397 to void(...)*),void(...)**%be,align 8
%bf=getelementptr inbounds i8,i8*%a6,i64 24
%bg=bitcast i8*%bf to i32*
store i32 -2147483647,i32*%bg,align 4
%bh=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%bi=call fastcc i8*%aP(i8*inreg%bh,i8*inreg%a6)
%bj=getelementptr inbounds i8,i8*%bi,i64 16
%bk=bitcast i8*%bj to i8*(i8*,i8*)**
%bl=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bk,align 8
%bm=bitcast i8*%bi to i8**
%bn=load i8*,i8**%bm,align 8
%bo=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bp=call fastcc i8*%bl(i8*inreg%bn,i8*inreg%bo)
store i8*%bp,i8**%e,align 8
%bq=call i8*@sml_alloc(i32 inreg 20)#0
%br=getelementptr inbounds i8,i8*%bq,i64 -4
%bs=bitcast i8*%br to i32*
store i32 1342177296,i32*%bs,align 4
store i8*%bq,i8**%c,align 8
%bt=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%bu=bitcast i8*%bq to i8**
store i8*%bt,i8**%bu,align 8
%bv=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bw=getelementptr inbounds i8,i8*%bq,i64 8
%bx=bitcast i8*%bw to i8**
store i8*%bv,i8**%bx,align 8
%by=getelementptr inbounds i8,i8*%bq,i64 16
%bz=bitcast i8*%by to i32*
store i32 3,i32*%bz,align 4
%bA=load i8*,i8**%d,align 8
%bB=getelementptr inbounds i8,i8*%bA,i64 8
%bC=bitcast i8*%bB to i8**
%bD=load i8*,i8**%bC,align 8
store i8*%bD,i8**%d,align 8
%bE=call i8*@sml_alloc(i32 inreg 20)#0
%bF=getelementptr inbounds i8,i8*%bE,i64 -4
%bG=bitcast i8*%bF to i32*
store i32 1342177296,i32*%bG,align 4
store i8*%bE,i8**%e,align 8
%bH=getelementptr inbounds i8,i8*%bE,i64 4
%bI=bitcast i8*%bH to i32*
store i32 0,i32*%bI,align 1
%bJ=bitcast i8*%bE to i32*
store i32 4,i32*%bJ,align 4
%bK=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bL=getelementptr inbounds i8,i8*%bE,i64 8
%bM=bitcast i8*%bL to i8**
store i8*%bK,i8**%bM,align 8
%bN=getelementptr inbounds i8,i8*%bE,i64 16
%bO=bitcast i8*%bN to i32*
store i32 2,i32*%bO,align 4
%bP=call i8*@sml_alloc(i32 inreg 20)#0
%bQ=getelementptr inbounds i8,i8*%bP,i64 -4
%bR=bitcast i8*%bQ to i32*
store i32 1342177296,i32*%bR,align 4
%bS=load i8*,i8**%e,align 8
%bT=bitcast i8*%bP to i8**
store i8*%bS,i8**%bT,align 8
%bU=load i8*,i8**%c,align 8
%bV=getelementptr inbounds i8,i8*%bP,i64 8
%bW=bitcast i8*%bV to i8**
store i8*%bU,i8**%bW,align 8
%bX=getelementptr inbounds i8,i8*%bP,i64 16
%bY=bitcast i8*%bX to i32*
store i32 3,i32*%bY,align 4
ret i8*%bP
}
define internal fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_399(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
%g=bitcast i8*%b to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%c,align 8
%i=getelementptr inbounds i8,i8*%b,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%d,align 8
%l=getelementptr inbounds i8,i8*%b,i64 16
%m=bitcast i8*%l to i8**
%n=load i8*,i8**%m,align 8
store i8*%n,i8**%e,align 8
%o=bitcast i8*%a to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%a,i64 4
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call i8*@sml_alloc(i32 inreg 36)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177312,i32*%v,align 4
store i8*%t,i8**%f,align 8
%w=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%z=getelementptr inbounds i8,i8*%t,i64 8
%A=bitcast i8*%z to i8**
store i8*%y,i8**%A,align 8
%B=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%C=getelementptr inbounds i8,i8*%t,i64 16
%D=bitcast i8*%C to i8**
store i8*%B,i8**%D,align 8
%E=getelementptr inbounds i8,i8*%t,i64 24
%F=bitcast i8*%E to i32*
store i32%p,i32*%F,align 4
%G=getelementptr inbounds i8,i8*%t,i64 28
%H=bitcast i8*%G to i32*
store i32%s,i32*%H,align 4
%I=getelementptr inbounds i8,i8*%t,i64 32
%J=bitcast i8*%I to i32*
store i32 7,i32*%J,align 4
%K=call i8*@sml_alloc(i32 inreg 28)#0
%L=getelementptr inbounds i8,i8*%K,i64 -4
%M=bitcast i8*%L to i32*
store i32 1342177304,i32*%M,align 4
%N=load i8*,i8**%f,align 8
%O=bitcast i8*%K to i8**
store i8*%N,i8**%O,align 8
%P=getelementptr inbounds i8,i8*%K,i64 8
%Q=bitcast i8*%P to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_398 to void(...)*),void(...)**%Q,align 8
%R=getelementptr inbounds i8,i8*%K,i64 16
%S=bitcast i8*%R to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_398 to void(...)*),void(...)**%S,align 8
%T=getelementptr inbounds i8,i8*%K,i64 24
%U=bitcast i8*%T to i32*
store i32 -2147483647,i32*%U,align 4
ret i8*%K
}
define fastcc i8*@_SMLFN10TermFormat28formatEnclosedSymbolEnvPlainE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_399 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_399 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb9assocListE_410(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
m:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%k,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%e,align 8
br label%k
k:
%l=phi i8*[%j,%i],[%a,%m]
%n=getelementptr inbounds i8,i8*%l,i64 28
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=add i32%p,-1
%r=sub i32 0,%p
%s=and i32%q,%r
%t=getelementptr inbounds i8,i8*%l,i64 36
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=add i32%q,%v
%x=add i32%w,%s
%y=sub i32 0,%v
%z=and i32%x,%y
%A=getelementptr inbounds i8,i8*%l,i64 24
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=icmp eq i32%C,0
br i1%D,label%K,label%E
E:
%F=load i8*,i8**%c,align 8
%G=sext i32%s to i64
%H=getelementptr inbounds i8,i8*%F,i64%G
%I=bitcast i8*%H to i8**
%J=load i8*,i8**%I,align 8
br label%S
K:
%L=call i8*@sml_alloc(i32 inreg%p)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32%p,i32*%N,align 4
%O=load i8*,i8**%c,align 8
%P=sext i32%s to i64
%Q=getelementptr inbounds i8,i8*%O,i64%P
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%L,i8*%Q,i32%p,i1 false)
%R=load i8*,i8**%e,align 8
br label%S
S:
%T=phi i8*[%R,%K],[%l,%E]
%U=phi i8*[%O,%K],[%F,%E]
%V=phi i8*[%L,%K],[%J,%E]
store i8*%V,i8**%d,align 8
%W=getelementptr inbounds i8,i8*%T,i64 32
%X=bitcast i8*%W to i32*
%Y=load i32,i32*%X,align 4
%Z=icmp eq i32%Y,0
br i1%Z,label%ag,label%aa
aa:
%ab=bitcast i8*%T to i8**
store i8*null,i8**%c,align 8
%ac=sext i32%z to i64
%ad=getelementptr inbounds i8,i8*%U,i64%ac
%ae=bitcast i8*%ad to i8**
%af=load i8*,i8**%ae,align 8
br label%at
ag:
%ah=getelementptr inbounds i8,i8*%T,i64 36
%ai=bitcast i8*%ah to i32*
%aj=load i32,i32*%ai,align 4
%ak=call i8*@sml_alloc(i32 inreg%aj)#0
%al=getelementptr inbounds i8,i8*%ak,i64 -4
%am=bitcast i8*%al to i32*
store i32%aj,i32*%am,align 4
%an=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ao=sext i32%z to i64
%ap=getelementptr inbounds i8,i8*%an,i64%ao
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ak,i8*%ap,i32%aj,i1 false)
%aq=bitcast i8**%e to i8***
%ar=load i8**,i8***%aq,align 8
%as=load i8*,i8**%d,align 8
br label%at
at:
%au=phi i8*[%as,%ag],[%V,%aa]
%av=phi i8**[%ar,%ag],[%ab,%aa]
%aw=phi i8*[%ak,%ag],[%af,%aa]
store i8*%aw,i8**%c,align 8
%ax=load i8*,i8**%av,align 8
%ay=getelementptr inbounds i8,i8*%ax,i64 16
%az=bitcast i8*%ay to i8*(i8*,i8*)**
%aA=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%az,align 8
%aB=bitcast i8*%ax to i8**
%aC=load i8*,i8**%aB,align 8
store i8*null,i8**%d,align 8
%aD=call fastcc i8*%aA(i8*inreg%aC,i8*inreg%au)
store i8*%aD,i8**%d,align 8
%aE=load i8*,i8**%e,align 8
%aF=getelementptr inbounds i8,i8*%aE,i64 16
%aG=bitcast i8*%aF to i8**
%aH=load i8*,i8**%aG,align 8
store i8*%aH,i8**%f,align 8
%aI=getelementptr inbounds i8,i8*%aE,i64 8
%aJ=bitcast i8*%aI to i8**
%aK=load i8*,i8**%aJ,align 8
%aL=getelementptr inbounds i8,i8*%aK,i64 16
%aM=bitcast i8*%aL to i8*(i8*,i8*)**
%aN=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aM,align 8
store i8*null,i8**%e,align 8
%aO=bitcast i8*%aK to i8**
%aP=load i8*,i8**%aO,align 8
%aQ=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aR=call fastcc i8*%aN(i8*inreg%aP,i8*inreg%aQ)
store i8*%aR,i8**%c,align 8
%aS=call i8*@sml_alloc(i32 inreg 28)#0
%aT=getelementptr inbounds i8,i8*%aS,i64 -4
%aU=bitcast i8*%aT to i32*
store i32 1342177304,i32*%aU,align 4
%aV=load i8*,i8**%d,align 8
%aW=bitcast i8*%aS to i8**
store i8*%aV,i8**%aW,align 8
%aX=load i8*,i8**%f,align 8
%aY=getelementptr inbounds i8,i8*%aS,i64 8
%aZ=bitcast i8*%aY to i8**
store i8*%aX,i8**%aZ,align 8
%a0=load i8*,i8**%c,align 8
%a1=getelementptr inbounds i8,i8*%aS,i64 16
%a2=bitcast i8*%a1 to i8**
store i8*%a0,i8**%a2,align 8
%a3=getelementptr inbounds i8,i8*%aS,i64 24
%a4=bitcast i8*%a3 to i32*
store i32 7,i32*%a4,align 4
%a5=tail call fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_304(i8*inreg%aS)
ret i8*%a5
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb9assocListE_411(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
store i8*%a,i8**%i,align 8
store i8*%b,i8**%c,align 8
%k=load atomic i32,i32*@sml_check_flag unordered,align 4
%l=icmp eq i32%k,0
br i1%l,label%n,label%m
m:
call void@sml_check(i32 inreg%k)
br label%n
n:
%o=call i8*@sml_alloc(i32 inreg 20)#0
%p=getelementptr inbounds i8,i8*%o,i64 -4
%q=bitcast i8*%p to i32*
store i32 1342177296,i32*%q,align 4
store i8*%o,i8**%e,align 8
%r=getelementptr inbounds i8,i8*%o,i64 4
%s=bitcast i8*%r to i32*
store i32 0,i32*%s,align 1
%t=bitcast i8*%o to i32*
store i32 1,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%o,i64 8
%v=bitcast i8*%u to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bb,i64 0,i32 2,i64 0),i8**%v,align 8
%w=getelementptr inbounds i8,i8*%o,i64 16
%x=bitcast i8*%w to i32*
store i32 2,i32*%x,align 4
%y=call i8*@sml_alloc(i32 inreg 20)#0
%z=getelementptr inbounds i8,i8*%y,i64 -4
%A=bitcast i8*%z to i32*
store i32 1342177296,i32*%A,align 4
store i8*%y,i8**%d,align 8
%B=getelementptr inbounds i8,i8*%y,i64 4
%C=bitcast i8*%B to i32*
store i32 0,i32*%C,align 1
%D=bitcast i8*%y to i32*
store i32 6,i32*%D,align 4
%E=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%F=getelementptr inbounds i8,i8*%y,i64 8
%G=bitcast i8*%F to i8**
store i8*%E,i8**%G,align 8
%H=getelementptr inbounds i8,i8*%y,i64 16
%I=bitcast i8*%H to i32*
store i32 2,i32*%I,align 4
%J=call i8*@sml_alloc(i32 inreg 20)#0
%K=getelementptr inbounds i8,i8*%J,i64 -4
%L=bitcast i8*%K to i32*
store i32 1342177296,i32*%L,align 4
store i8*%J,i8**%e,align 8
%M=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%N=bitcast i8*%J to i8**
store i8*%M,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%J,i64 8
%P=bitcast i8*%O to i8**
store i8*null,i8**%P,align 8
%Q=getelementptr inbounds i8,i8*%J,i64 16
%R=bitcast i8*%Q to i32*
store i32 3,i32*%R,align 4
%S=call i8*@sml_alloc(i32 inreg 20)#0
%T=getelementptr inbounds i8,i8*%S,i64 -4
%U=bitcast i8*%T to i32*
store i32 1342177296,i32*%U,align 4
store i8*%S,i8**%f,align 8
%V=getelementptr inbounds i8,i8*%S,i64 4
%W=bitcast i8*%V to i32*
store i32 0,i32*%W,align 1
%X=bitcast i8*%S to i32*
store i32 1,i32*%X,align 4
%Y=getelementptr inbounds i8,i8*%S,i64 8
%Z=bitcast i8*%Y to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@aZ,i64 0,i32 2,i64 0),i8**%Z,align 8
%aa=getelementptr inbounds i8,i8*%S,i64 16
%ab=bitcast i8*%aa to i32*
store i32 2,i32*%ab,align 4
%ac=call i8*@sml_alloc(i32 inreg 20)#0
%ad=getelementptr inbounds i8,i8*%ac,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 1342177296,i32*%ae,align 4
store i8*%ac,i8**%d,align 8
%af=getelementptr inbounds i8,i8*%ac,i64 4
%ag=bitcast i8*%af to i32*
store i32 0,i32*%ag,align 1
%ah=bitcast i8*%ac to i32*
store i32 6,i32*%ah,align 4
%ai=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%aj=getelementptr inbounds i8,i8*%ac,i64 8
%ak=bitcast i8*%aj to i8**
store i8*%ai,i8**%ak,align 8
%al=getelementptr inbounds i8,i8*%ac,i64 16
%am=bitcast i8*%al to i32*
store i32 2,i32*%am,align 4
%an=call i8*@sml_alloc(i32 inreg 20)#0
%ao=getelementptr inbounds i8,i8*%an,i64 -4
%ap=bitcast i8*%ao to i32*
store i32 1342177296,i32*%ap,align 4
store i8*%an,i8**%f,align 8
%aq=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ar=bitcast i8*%an to i8**
store i8*%aq,i8**%ar,align 8
%as=getelementptr inbounds i8,i8*%an,i64 8
%at=bitcast i8*%as to i8**
store i8*null,i8**%at,align 8
%au=getelementptr inbounds i8,i8*%an,i64 16
%av=bitcast i8*%au to i32*
store i32 3,i32*%av,align 4
%aw=call i8*@sml_alloc(i32 inreg 20)#0
%ax=getelementptr inbounds i8,i8*%aw,i64 -4
%ay=bitcast i8*%ax to i32*
store i32 1342177296,i32*%ay,align 4
store i8*%aw,i8**%g,align 8
%az=getelementptr inbounds i8,i8*%aw,i64 4
%aA=bitcast i8*%az to i32*
store i32 0,i32*%aA,align 1
%aB=bitcast i8*%aw to i32*
store i32 2,i32*%aB,align 4
%aC=getelementptr inbounds i8,i8*%aw,i64 8
%aD=bitcast i8*%aC to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[3x i8]}>,<{[4x i8],i32,[3x i8]}>*@at,i64 0,i32 2,i64 0),i8**%aD,align 8
%aE=getelementptr inbounds i8,i8*%aw,i64 16
%aF=bitcast i8*%aE to i32*
store i32 2,i32*%aF,align 4
%aG=call i8*@sml_alloc(i32 inreg 20)#0
%aH=getelementptr inbounds i8,i8*%aG,i64 -4
%aI=bitcast i8*%aH to i32*
store i32 1342177296,i32*%aI,align 4
store i8*%aG,i8**%d,align 8
%aJ=getelementptr inbounds i8,i8*%aG,i64 4
%aK=bitcast i8*%aJ to i32*
store i32 0,i32*%aK,align 1
%aL=bitcast i8*%aG to i32*
store i32 6,i32*%aL,align 4
%aM=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%aN=getelementptr inbounds i8,i8*%aG,i64 8
%aO=bitcast i8*%aN to i8**
store i8*%aM,i8**%aO,align 8
%aP=getelementptr inbounds i8,i8*%aG,i64 16
%aQ=bitcast i8*%aP to i32*
store i32 2,i32*%aQ,align 4
%aR=call i8*@sml_alloc(i32 inreg 20)#0
%aS=getelementptr inbounds i8,i8*%aR,i64 -4
%aT=bitcast i8*%aS to i32*
store i32 1342177296,i32*%aT,align 4
store i8*%aR,i8**%g,align 8
%aU=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aV=bitcast i8*%aR to i8**
store i8*%aU,i8**%aV,align 8
%aW=getelementptr inbounds i8,i8*%aR,i64 8
%aX=bitcast i8*%aW to i8**
store i8*null,i8**%aX,align 8
%aY=getelementptr inbounds i8,i8*%aR,i64 16
%aZ=bitcast i8*%aY to i32*
store i32 3,i32*%aZ,align 4
%a0=call i8*@sml_alloc(i32 inreg 20)#0
%a1=getelementptr inbounds i8,i8*%a0,i64 -4
%a2=bitcast i8*%a1 to i32*
store i32 1342177296,i32*%a2,align 4
store i8*%a0,i8**%d,align 8
%a3=bitcast i8*%a0 to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@i,i64 0,i32 2)to i8*),i8**%a3,align 8
%a4=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%a5=getelementptr inbounds i8,i8*%a0,i64 8
%a6=bitcast i8*%a5 to i8**
store i8*%a4,i8**%a6,align 8
%a7=getelementptr inbounds i8,i8*%a0,i64 16
%a8=bitcast i8*%a7 to i32*
store i32 3,i32*%a8,align 4
%a9=call i8*@sml_alloc(i32 inreg 20)#0
%ba=getelementptr inbounds i8,i8*%a9,i64 -4
%bb=bitcast i8*%ba to i32*
store i32 1342177296,i32*%bb,align 4
store i8*%a9,i8**%h,align 8
%bc=getelementptr inbounds i8,i8*%a9,i64 4
%bd=bitcast i8*%bc to i32*
store i32 0,i32*%bd,align 1
%be=bitcast i8*%a9 to i32*
store i32 1,i32*%be,align 4
%bf=getelementptr inbounds i8,i8*%a9,i64 8
%bg=bitcast i8*%bf to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bf,i64 0,i32 2,i64 0),i8**%bg,align 8
%bh=getelementptr inbounds i8,i8*%a9,i64 16
%bi=bitcast i8*%bh to i32*
store i32 2,i32*%bi,align 4
%bj=call i8*@sml_alloc(i32 inreg 20)#0
%bk=getelementptr inbounds i8,i8*%bj,i64 -4
%bl=bitcast i8*%bk to i32*
store i32 1342177296,i32*%bl,align 4
store i8*%bj,i8**%g,align 8
%bm=getelementptr inbounds i8,i8*%bj,i64 4
%bn=bitcast i8*%bm to i32*
store i32 0,i32*%bn,align 1
%bo=bitcast i8*%bj to i32*
store i32 6,i32*%bo,align 4
%bp=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%bq=getelementptr inbounds i8,i8*%bj,i64 8
%br=bitcast i8*%bq to i8**
store i8*%bp,i8**%br,align 8
%bs=getelementptr inbounds i8,i8*%bj,i64 16
%bt=bitcast i8*%bs to i32*
store i32 2,i32*%bt,align 4
%bu=call i8*@sml_alloc(i32 inreg 20)#0
%bv=getelementptr inbounds i8,i8*%bu,i64 -4
%bw=bitcast i8*%bv to i32*
store i32 1342177296,i32*%bw,align 4
store i8*%bu,i8**%h,align 8
%bx=load i8*,i8**%g,align 8
%by=bitcast i8*%bu to i8**
store i8*%bx,i8**%by,align 8
%bz=getelementptr inbounds i8,i8*%bu,i64 8
%bA=bitcast i8*%bz to i8**
store i8*null,i8**%bA,align 8
%bB=getelementptr inbounds i8,i8*%bu,i64 16
%bC=bitcast i8*%bB to i32*
store i32 3,i32*%bC,align 4
%bD=bitcast i8**%i to i8***
%bE=load i8**,i8***%bD,align 8
%bF=load i8*,i8**%bE,align 8
store i8*%bF,i8**%g,align 8
%bG=getelementptr inbounds i8*,i8**%bE,i64 1
%bH=load i8*,i8**%bG,align 8
store i8*%bH,i8**%j,align 8
%bI=bitcast i8**%bE to i8*
%bJ=getelementptr inbounds i8*,i8**%bE,i64 2
%bK=bitcast i8**%bJ to i32*
%bL=load i32,i32*%bK,align 4
%bM=getelementptr inbounds i8,i8*%bI,i64 20
%bN=bitcast i8*%bM to i32*
%bO=load i32,i32*%bN,align 4
%bP=getelementptr inbounds i8*,i8**%bE,i64 3
%bQ=bitcast i8**%bP to i32*
%bR=load i32,i32*%bQ,align 4
store i8*null,i8**%i,align 8
%bS=getelementptr inbounds i8,i8*%bI,i64 28
%bT=bitcast i8*%bS to i32*
%bU=load i32,i32*%bT,align 4
%bV=call i8*@sml_alloc(i32 inreg 44)#0
%bW=getelementptr inbounds i8,i8*%bV,i64 -4
%bX=bitcast i8*%bW to i32*
store i32 1342177320,i32*%bX,align 4
store i8*%bV,i8**%i,align 8
%bY=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%bZ=bitcast i8*%bV to i8**
store i8*%bY,i8**%bZ,align 8
%b0=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%b1=getelementptr inbounds i8,i8*%bV,i64 8
%b2=bitcast i8*%b1 to i8**
store i8*%b0,i8**%b2,align 8
%b3=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%b4=getelementptr inbounds i8,i8*%bV,i64 16
%b5=bitcast i8*%b4 to i8**
store i8*%b3,i8**%b5,align 8
%b6=getelementptr inbounds i8,i8*%bV,i64 24
%b7=bitcast i8*%b6 to i32*
store i32%bL,i32*%b7,align 4
%b8=getelementptr inbounds i8,i8*%bV,i64 28
%b9=bitcast i8*%b8 to i32*
store i32%bO,i32*%b9,align 4
%ca=getelementptr inbounds i8,i8*%bV,i64 32
%cb=bitcast i8*%ca to i32*
store i32%bR,i32*%cb,align 4
%cc=getelementptr inbounds i8,i8*%bV,i64 36
%cd=bitcast i8*%cc to i32*
store i32%bU,i32*%cd,align 4
%ce=getelementptr inbounds i8,i8*%bV,i64 40
%cf=bitcast i8*%ce to i32*
store i32 7,i32*%cf,align 4
%cg=call i8*@sml_alloc(i32 inreg 28)#0
%ch=getelementptr inbounds i8,i8*%cg,i64 -4
%ci=bitcast i8*%ch to i32*
store i32 1342177304,i32*%ci,align 4
store i8*%cg,i8**%d,align 8
%cj=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%ck=bitcast i8*%cg to i8**
store i8*%cj,i8**%ck,align 8
%cl=getelementptr inbounds i8,i8*%cg,i64 8
%cm=bitcast i8*%cl to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb9assocListE_410 to void(...)*),void(...)**%cm,align 8
%cn=getelementptr inbounds i8,i8*%cg,i64 16
%co=bitcast i8*%cn to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb9assocListE_410 to void(...)*),void(...)**%co,align 8
%cp=getelementptr inbounds i8,i8*%cg,i64 24
%cq=bitcast i8*%cp to i32*
store i32 -2147483647,i32*%cq,align 4
%cr=call i8*@sml_alloc(i32 inreg 36)#0
%cs=getelementptr inbounds i8,i8*%cr,i64 -4
%ct=bitcast i8*%cs to i32*
store i32 1342177312,i32*%ct,align 4
%cu=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%cv=bitcast i8*%cr to i8**
store i8*%cu,i8**%cv,align 8
%cw=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%cx=getelementptr inbounds i8,i8*%cr,i64 8
%cy=bitcast i8*%cx to i8**
store i8*%cw,i8**%cy,align 8
%cz=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%cA=getelementptr inbounds i8,i8*%cr,i64 16
%cB=bitcast i8*%cA to i8**
store i8*%cz,i8**%cB,align 8
%cC=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%cD=getelementptr inbounds i8,i8*%cr,i64 24
%cE=bitcast i8*%cD to i8**
store i8*%cC,i8**%cE,align 8
%cF=getelementptr inbounds i8,i8*%cr,i64 32
%cG=bitcast i8*%cF to i32*
store i32 15,i32*%cG,align 4
%cH=call fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_229(i32 inreg 1,i32 inreg 8,i8*inreg%cr)
%cI=getelementptr inbounds i8,i8*%cH,i64 16
%cJ=bitcast i8*%cI to i8*(i8*,i8*)**
%cK=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%cJ,align 8
%cL=bitcast i8*%cH to i8**
%cM=load i8*,i8**%cL,align 8
%cN=load i8*,i8**%c,align 8
%cO=tail call fastcc i8*%cK(i8*inreg%cM,i8*inreg%cN)
ret i8*%cO
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb9assocListE_412(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%b to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%c,align 8
%h=getelementptr inbounds i8,i8*%b,i64 8
%i=bitcast i8*%h to i8**
%j=load i8*,i8**%i,align 8
store i8*%j,i8**%d,align 8
%k=bitcast i8*%a to i32*
%l=load i32,i32*%k,align 4
%m=getelementptr inbounds i8,i8*%a,i64 4
%n=bitcast i8*%m to i32*
%o=load i32,i32*%n,align 4
%p=getelementptr inbounds i8,i8*%a,i64 8
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=getelementptr inbounds i8,i8*%a,i64 12
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=call i8*@sml_alloc(i32 inreg 36)#0
%w=getelementptr inbounds i8,i8*%v,i64 -4
%x=bitcast i8*%w to i32*
store i32 1342177312,i32*%x,align 4
store i8*%v,i8**%e,align 8
%y=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%z=bitcast i8*%v to i8**
store i8*%y,i8**%z,align 8
%A=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%B=getelementptr inbounds i8,i8*%v,i64 8
%C=bitcast i8*%B to i8**
store i8*%A,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%v,i64 16
%E=bitcast i8*%D to i32*
store i32%l,i32*%E,align 4
%F=getelementptr inbounds i8,i8*%v,i64 20
%G=bitcast i8*%F to i32*
store i32%o,i32*%G,align 4
%H=getelementptr inbounds i8,i8*%v,i64 24
%I=bitcast i8*%H to i32*
store i32%r,i32*%I,align 4
%J=getelementptr inbounds i8,i8*%v,i64 28
%K=bitcast i8*%J to i32*
store i32%u,i32*%K,align 4
%L=getelementptr inbounds i8,i8*%v,i64 32
%M=bitcast i8*%L to i32*
store i32 3,i32*%M,align 4
%N=call i8*@sml_alloc(i32 inreg 28)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32 1342177304,i32*%P,align 4
%Q=load i8*,i8**%e,align 8
%R=bitcast i8*%N to i8**
store i8*%Q,i8**%R,align 8
%S=getelementptr inbounds i8,i8*%N,i64 8
%T=bitcast i8*%S to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb9assocListE_411 to void(...)*),void(...)**%T,align 8
%U=getelementptr inbounds i8,i8*%N,i64 16
%V=bitcast i8*%U to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb9assocListE_411 to void(...)*),void(...)**%V,align 8
%W=getelementptr inbounds i8,i8*%N,i64 24
%X=bitcast i8*%W to i32*
store i32 -2147483647,i32*%X,align 4
ret i8*%N
}
define fastcc i8*@_SMLFN10TermFormat10FormatComb9assocListE(i32 inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d)#4 gc"smlsharp"{
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=call i8*@sml_alloc(i32 inreg 20)#0
%g=bitcast i8*%f to i32*
%h=getelementptr inbounds i8,i8*%f,i64 -4
%i=bitcast i8*%h to i32*
store i32 1342177296,i32*%i,align 4
store i8*%f,i8**%e,align 8
store i32%a,i32*%g,align 4
%j=getelementptr inbounds i8,i8*%f,i64 4
%k=bitcast i8*%j to i32*
store i32%b,i32*%k,align 4
%l=getelementptr inbounds i8,i8*%f,i64 8
%m=bitcast i8*%l to i32*
store i32%c,i32*%m,align 4
%n=getelementptr inbounds i8,i8*%f,i64 12
%o=bitcast i8*%n to i32*
store i32%d,i32*%o,align 4
%p=getelementptr inbounds i8,i8*%f,i64 16
%q=bitcast i8*%p to i32*
store i32 0,i32*%q,align 4
%r=call i8*@sml_alloc(i32 inreg 28)#0
%s=getelementptr inbounds i8,i8*%r,i64 -4
%t=bitcast i8*%s to i32*
store i32 1342177304,i32*%t,align 4
%u=load i8*,i8**%e,align 8
%v=bitcast i8*%r to i8**
store i8*%u,i8**%v,align 8
%w=getelementptr inbounds i8,i8*%r,i64 8
%x=bitcast i8*%w to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb9assocListE_412 to void(...)*),void(...)**%x,align 8
%y=getelementptr inbounds i8,i8*%r,i64 16
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb9assocListE_412 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%r,i64 24
%B=bitcast i8*%A to i32*
store i32 -2147483647,i32*%B,align 4
ret i8*%r
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6recordE_423(i8*inreg%a)#2 gc"smlsharp"{
l:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%b,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%j,label%h
h:
call void@sml_check(i32 inreg%f)
%i=load i8*,i8**%b,align 8
br label%j
j:
%k=phi i8*[%i,%h],[%a,%l]
%m=bitcast i8*%k to i8**
%n=load i8*,i8**%m,align 8
store i8*%n,i8**%b,align 8
%o=getelementptr inbounds i8,i8*%k,i64 8
%p=bitcast i8*%o to i8**
%q=load i8*,i8**%p,align 8
store i8*%q,i8**%c,align 8
%r=getelementptr inbounds i8,i8*%n,i64 -4
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=and i32%t,268435455
%v=add nsw i32%u,-1
%w=call i8*@sml_alloc(i32 inreg 20)#0
%x=getelementptr inbounds i8,i8*%w,i64 -4
%y=bitcast i8*%x to i32*
store i32 1342177296,i32*%y,align 4
store i8*%w,i8**%d,align 8
%z=getelementptr inbounds i8,i8*%w,i64 4
%A=bitcast i8*%z to i32*
store i32 0,i32*%A,align 1
%B=bitcast i8*%w to i32*
store i32%v,i32*%B,align 4
%C=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%D=getelementptr inbounds i8,i8*%w,i64 8
%E=bitcast i8*%D to i8**
store i8*%C,i8**%E,align 8
%F=getelementptr inbounds i8,i8*%w,i64 16
%G=bitcast i8*%F to i32*
store i32 2,i32*%G,align 4
%H=call i8*@sml_alloc(i32 inreg 20)#0
%I=getelementptr inbounds i8,i8*%H,i64 -4
%J=bitcast i8*%I to i32*
store i32 1342177296,i32*%J,align 4
store i8*%H,i8**%b,align 8
%K=getelementptr inbounds i8,i8*%H,i64 4
%L=bitcast i8*%K to i32*
store i32 0,i32*%L,align 1
%M=bitcast i8*%H to i32*
store i32 6,i32*%M,align 4
%N=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%O=getelementptr inbounds i8,i8*%H,i64 8
%P=bitcast i8*%O to i8**
store i8*%N,i8**%P,align 8
%Q=getelementptr inbounds i8,i8*%H,i64 16
%R=bitcast i8*%Q to i32*
store i32 2,i32*%R,align 4
%S=call i8*@sml_alloc(i32 inreg 20)#0
%T=getelementptr inbounds i8,i8*%S,i64 -4
%U=bitcast i8*%T to i32*
store i32 1342177296,i32*%U,align 4
store i8*%S,i8**%d,align 8
%V=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%W=bitcast i8*%S to i8**
store i8*%V,i8**%W,align 8
%X=getelementptr inbounds i8,i8*%S,i64 8
%Y=bitcast i8*%X to i8**
store i8*null,i8**%Y,align 8
%Z=getelementptr inbounds i8,i8*%S,i64 16
%aa=bitcast i8*%Z to i32*
store i32 3,i32*%aa,align 4
%ab=call i8*@sml_alloc(i32 inreg 20)#0
%ac=getelementptr inbounds i8,i8*%ab,i64 -4
%ad=bitcast i8*%ac to i32*
store i32 1342177296,i32*%ad,align 4
store i8*%ab,i8**%e,align 8
%ae=getelementptr inbounds i8,i8*%ab,i64 4
%af=bitcast i8*%ae to i32*
store i32 0,i32*%af,align 1
%ag=bitcast i8*%ab to i32*
store i32 1,i32*%ag,align 4
%ah=getelementptr inbounds i8,i8*%ab,i64 8
%ai=bitcast i8*%ah to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@ax,i64 0,i32 2,i64 0),i8**%ai,align 8
%aj=getelementptr inbounds i8,i8*%ab,i64 16
%ak=bitcast i8*%aj to i32*
store i32 2,i32*%ak,align 4
%al=call i8*@sml_alloc(i32 inreg 20)#0
%am=getelementptr inbounds i8,i8*%al,i64 -4
%an=bitcast i8*%am to i32*
store i32 1342177296,i32*%an,align 4
store i8*%al,i8**%b,align 8
%ao=getelementptr inbounds i8,i8*%al,i64 4
%ap=bitcast i8*%ao to i32*
store i32 0,i32*%ap,align 1
%aq=bitcast i8*%al to i32*
store i32 6,i32*%aq,align 4
%ar=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%as=getelementptr inbounds i8,i8*%al,i64 8
%at=bitcast i8*%as to i8**
store i8*%ar,i8**%at,align 8
%au=getelementptr inbounds i8,i8*%al,i64 16
%av=bitcast i8*%au to i32*
store i32 2,i32*%av,align 4
%aw=call i8*@sml_alloc(i32 inreg 20)#0
%ax=getelementptr inbounds i8,i8*%aw,i64 -4
%ay=bitcast i8*%ax to i32*
store i32 1342177296,i32*%ay,align 4
store i8*%aw,i8**%e,align 8
%az=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%aA=bitcast i8*%aw to i8**
store i8*%az,i8**%aA,align 8
%aB=getelementptr inbounds i8,i8*%aw,i64 8
%aC=bitcast i8*%aB to i8**
store i8*null,i8**%aC,align 8
%aD=getelementptr inbounds i8,i8*%aw,i64 16
%aE=bitcast i8*%aD to i32*
store i32 3,i32*%aE,align 4
%aF=call i8*@sml_alloc(i32 inreg 20)#0
%aG=getelementptr inbounds i8,i8*%aF,i64 -4
%aH=bitcast i8*%aG to i32*
store i32 1342177296,i32*%aH,align 4
store i8*%aF,i8**%b,align 8
%aI=bitcast i8*%aF to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@i,i64 0,i32 2)to i8*),i8**%aI,align 8
%aJ=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aK=getelementptr inbounds i8,i8*%aF,i64 8
%aL=bitcast i8*%aK to i8**
store i8*%aJ,i8**%aL,align 8
%aM=getelementptr inbounds i8,i8*%aF,i64 16
%aN=bitcast i8*%aM to i32*
store i32 3,i32*%aN,align 4
%aO=call i8*@sml_alloc(i32 inreg 28)#0
%aP=getelementptr inbounds i8,i8*%aO,i64 -4
%aQ=bitcast i8*%aP to i32*
store i32 1342177304,i32*%aQ,align 4
%aR=load i8*,i8**%d,align 8
%aS=bitcast i8*%aO to i8**
store i8*%aR,i8**%aS,align 8
%aT=load i8*,i8**%b,align 8
%aU=getelementptr inbounds i8,i8*%aO,i64 8
%aV=bitcast i8*%aU to i8**
store i8*%aT,i8**%aV,align 8
%aW=load i8*,i8**%c,align 8
%aX=getelementptr inbounds i8,i8*%aO,i64 16
%aY=bitcast i8*%aX to i8**
store i8*%aW,i8**%aY,align 8
%aZ=getelementptr inbounds i8,i8*%aO,i64 24
%a0=bitcast i8*%aZ to i32*
store i32 7,i32*%a0,align 4
%a1=tail call fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_304(i8*inreg%aO)
ret i8*%a1
}
define fastcc i8*@_SMLFN10TermFormat10FormatComb6recordE(i8*inreg%a)#2 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%b,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%j,label%i
i:
call void@sml_check(i32 inreg%g)
br label%j
j:
%k=call i8*@sml_alloc(i32 inreg 20)#0
%l=getelementptr inbounds i8,i8*%k,i64 -4
%m=bitcast i8*%l to i32*
store i32 1342177296,i32*%m,align 4
store i8*%k,i8**%d,align 8
%n=getelementptr inbounds i8,i8*%k,i64 4
%o=bitcast i8*%n to i32*
store i32 0,i32*%o,align 1
%p=bitcast i8*%k to i32*
store i32 1,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%k,i64 8
%r=bitcast i8*%q to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bb,i64 0,i32 2,i64 0),i8**%r,align 8
%s=getelementptr inbounds i8,i8*%k,i64 16
%t=bitcast i8*%s to i32*
store i32 2,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 20)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177296,i32*%w,align 4
store i8*%u,i8**%c,align 8
%x=getelementptr inbounds i8,i8*%u,i64 4
%y=bitcast i8*%x to i32*
store i32 0,i32*%y,align 1
%z=bitcast i8*%u to i32*
store i32 6,i32*%z,align 4
%A=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%B=getelementptr inbounds i8,i8*%u,i64 8
%C=bitcast i8*%B to i8**
store i8*%A,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 16
%E=bitcast i8*%D to i32*
store i32 2,i32*%E,align 4
%F=call i8*@sml_alloc(i32 inreg 20)#0
%G=getelementptr inbounds i8,i8*%F,i64 -4
%H=bitcast i8*%G to i32*
store i32 1342177296,i32*%H,align 4
store i8*%F,i8**%d,align 8
%I=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%J=bitcast i8*%F to i8**
store i8*%I,i8**%J,align 8
%K=getelementptr inbounds i8,i8*%F,i64 8
%L=bitcast i8*%K to i8**
store i8*null,i8**%L,align 8
%M=getelementptr inbounds i8,i8*%F,i64 16
%N=bitcast i8*%M to i32*
store i32 3,i32*%N,align 4
%O=call i8*@sml_alloc(i32 inreg 20)#0
%P=getelementptr inbounds i8,i8*%O,i64 -4
%Q=bitcast i8*%P to i32*
store i32 1342177296,i32*%Q,align 4
store i8*%O,i8**%e,align 8
%R=getelementptr inbounds i8,i8*%O,i64 4
%S=bitcast i8*%R to i32*
store i32 0,i32*%S,align 1
%T=bitcast i8*%O to i32*
store i32 1,i32*%T,align 4
%U=getelementptr inbounds i8,i8*%O,i64 8
%V=bitcast i8*%U to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@aZ,i64 0,i32 2,i64 0),i8**%V,align 8
%W=getelementptr inbounds i8,i8*%O,i64 16
%X=bitcast i8*%W to i32*
store i32 2,i32*%X,align 4
%Y=call i8*@sml_alloc(i32 inreg 20)#0
%Z=getelementptr inbounds i8,i8*%Y,i64 -4
%aa=bitcast i8*%Z to i32*
store i32 1342177296,i32*%aa,align 4
store i8*%Y,i8**%c,align 8
%ab=getelementptr inbounds i8,i8*%Y,i64 4
%ac=bitcast i8*%ab to i32*
store i32 0,i32*%ac,align 1
%ad=bitcast i8*%Y to i32*
store i32 6,i32*%ad,align 4
%ae=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%af=getelementptr inbounds i8,i8*%Y,i64 8
%ag=bitcast i8*%af to i8**
store i8*%ae,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%Y,i64 16
%ai=bitcast i8*%ah to i32*
store i32 2,i32*%ai,align 4
%aj=call i8*@sml_alloc(i32 inreg 20)#0
%ak=getelementptr inbounds i8,i8*%aj,i64 -4
%al=bitcast i8*%ak to i32*
store i32 1342177296,i32*%al,align 4
store i8*%aj,i8**%e,align 8
%am=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%an=bitcast i8*%aj to i8**
store i8*%am,i8**%an,align 8
%ao=getelementptr inbounds i8,i8*%aj,i64 8
%ap=bitcast i8*%ao to i8**
store i8*null,i8**%ap,align 8
%aq=getelementptr inbounds i8,i8*%aj,i64 16
%ar=bitcast i8*%aq to i32*
store i32 3,i32*%ar,align 4
%as=call i8*@sml_alloc(i32 inreg 20)#0
%at=getelementptr inbounds i8,i8*%as,i64 -4
%au=bitcast i8*%at to i32*
store i32 1342177296,i32*%au,align 4
store i8*%as,i8**%f,align 8
%av=getelementptr inbounds i8,i8*%as,i64 4
%aw=bitcast i8*%av to i32*
store i32 0,i32*%aw,align 1
%ax=bitcast i8*%as to i32*
store i32 1,i32*%ax,align 4
%ay=getelementptr inbounds i8,i8*%as,i64 8
%az=bitcast i8*%ay to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bf,i64 0,i32 2,i64 0),i8**%az,align 8
%aA=getelementptr inbounds i8,i8*%as,i64 16
%aB=bitcast i8*%aA to i32*
store i32 2,i32*%aB,align 4
%aC=call i8*@sml_alloc(i32 inreg 20)#0
%aD=getelementptr inbounds i8,i8*%aC,i64 -4
%aE=bitcast i8*%aD to i32*
store i32 1342177296,i32*%aE,align 4
store i8*%aC,i8**%c,align 8
%aF=getelementptr inbounds i8,i8*%aC,i64 4
%aG=bitcast i8*%aF to i32*
store i32 0,i32*%aG,align 1
%aH=bitcast i8*%aC to i32*
store i32 6,i32*%aH,align 4
%aI=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%aJ=getelementptr inbounds i8,i8*%aC,i64 8
%aK=bitcast i8*%aJ to i8**
store i8*%aI,i8**%aK,align 8
%aL=getelementptr inbounds i8,i8*%aC,i64 16
%aM=bitcast i8*%aL to i32*
store i32 2,i32*%aM,align 4
%aN=call i8*@sml_alloc(i32 inreg 20)#0
%aO=getelementptr inbounds i8,i8*%aN,i64 -4
%aP=bitcast i8*%aO to i32*
store i32 1342177296,i32*%aP,align 4
store i8*%aN,i8**%f,align 8
%aQ=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aR=bitcast i8*%aN to i8**
store i8*%aQ,i8**%aR,align 8
%aS=getelementptr inbounds i8,i8*%aN,i64 8
%aT=bitcast i8*%aS to i8**
store i8*null,i8**%aT,align 8
%aU=getelementptr inbounds i8,i8*%aN,i64 16
%aV=bitcast i8*%aU to i32*
store i32 3,i32*%aV,align 4
%aW=call i8*@sml_alloc(i32 inreg 36)#0
%aX=getelementptr inbounds i8,i8*%aW,i64 -4
%aY=bitcast i8*%aX to i32*
store i32 1342177312,i32*%aY,align 4
%aZ=bitcast i8*%aW to i8**
store i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@av,i64 0,i32 2)to i8*),i8**%aZ,align 8
%a0=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%a1=getelementptr inbounds i8,i8*%aW,i64 8
%a2=bitcast i8*%a1 to i8**
store i8*%a0,i8**%a2,align 8
%a3=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%a4=getelementptr inbounds i8,i8*%aW,i64 16
%a5=bitcast i8*%a4 to i8**
store i8*%a3,i8**%a5,align 8
%a6=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%a7=getelementptr inbounds i8,i8*%aW,i64 24
%a8=bitcast i8*%a7 to i8**
store i8*%a6,i8**%a8,align 8
%a9=getelementptr inbounds i8,i8*%aW,i64 32
%ba=bitcast i8*%a9 to i32*
store i32 15,i32*%ba,align 4
%bb=call fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_337(i32 inreg 1,i32 inreg 8,i8*inreg%aW)
%bc=getelementptr inbounds i8,i8*%bb,i64 16
%bd=bitcast i8*%bc to i8*(i8*,i8*)**
%be=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bd,align 8
%bf=bitcast i8*%bb to i8**
%bg=load i8*,i8**%bf,align 8
%bh=load i8*,i8**%b,align 8
%bi=tail call fastcc i8*%be(i8*inreg%bg,i8*inreg%bh)
ret i8*%bi
}
define internal fastcc i8*@_SMLLLN10TermFormat15formatRecordExpE_435(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%b to i8**
br label%p
k:
call void@sml_check(i32 inreg%g)
%l=bitcast i8**%c to i8***
%m=load i8**,i8***%l,align 8
%n=load i8*,i8**%e,align 8
%o=bitcast i8**%m to i8*
br label%p
p:
%q=phi i8*[%o,%k],[%b,%i]
%r=phi i8*[%n,%k],[%a,%i]
%s=phi i8**[%m,%k],[%j,%i]
%t=getelementptr inbounds i8,i8*%r,i64 20
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=add i32%v,7
%x=sub i32 0,%v
%y=and i32%w,%x
%z=load i8*,i8**%s,align 8
store i8*%z,i8**%d,align 8
%A=getelementptr inbounds i8,i8*%r,i64 16
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=icmp eq i32%C,0
br i1%D,label%J,label%E
E:
store i8*null,i8**%c,align 8
%F=sext i32%y to i64
%G=getelementptr inbounds i8,i8*%q,i64%F
%H=bitcast i8*%G to i8**
%I=load i8*,i8**%H,align 8
br label%R
J:
%K=call i8*@sml_alloc(i32 inreg%v)#0
%L=getelementptr inbounds i8,i8*%K,i64 -4
%M=bitcast i8*%L to i32*
store i32%v,i32*%M,align 4
%N=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%O=sext i32%y to i64
%P=getelementptr inbounds i8,i8*%N,i64%O
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%K,i8*%P,i32%v,i1 false)
%Q=load i8*,i8**%d,align 8
br label%R
R:
%S=phi i8*[%Q,%J],[%z,%E]
%T=phi i8*[%K,%J],[%I,%E]
store i8*%T,i8**%c,align 8
store i8*null,i8**%d,align 8
%U=call fastcc i8*@_SMLFN11RecordLabel12format__labelE(i8*inreg%S)
store i8*%U,i8**%d,align 8
%V=load i8*,i8**%e,align 8
%W=getelementptr inbounds i8,i8*%V,i64 8
%X=bitcast i8*%W to i8**
%Y=load i8*,i8**%X,align 8
store i8*%Y,i8**%f,align 8
%Z=bitcast i8*%V to i8**
%aa=load i8*,i8**%Z,align 8
%ab=getelementptr inbounds i8,i8*%aa,i64 16
%ac=bitcast i8*%ab to i8*(i8*,i8*)**
%ad=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ac,align 8
store i8*null,i8**%e,align 8
%ae=bitcast i8*%V to i8***
%af=load i8**,i8***%ae,align 8
%ag=load i8*,i8**%af,align 8
%ah=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ai=call fastcc i8*%ad(i8*inreg%ag,i8*inreg%ah)
store i8*%ai,i8**%c,align 8
%aj=call i8*@sml_alloc(i32 inreg 28)#0
%ak=getelementptr inbounds i8,i8*%aj,i64 -4
%al=bitcast i8*%ak to i32*
store i32 1342177304,i32*%al,align 4
%am=load i8*,i8**%d,align 8
%an=bitcast i8*%aj to i8**
store i8*%am,i8**%an,align 8
%ao=load i8*,i8**%f,align 8
%ap=getelementptr inbounds i8,i8*%aj,i64 8
%aq=bitcast i8*%ap to i8**
store i8*%ao,i8**%aq,align 8
%ar=load i8*,i8**%c,align 8
%as=getelementptr inbounds i8,i8*%aj,i64 16
%at=bitcast i8*%as to i8**
store i8*%ar,i8**%at,align 8
%au=getelementptr inbounds i8,i8*%aj,i64 24
%av=bitcast i8*%au to i32*
store i32 7,i32*%av,align 4
%aw=tail call fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_304(i8*inreg%aj)
ret i8*%aw
}
define internal fastcc i8*@_SMLLLN10TermFormat15formatRecordExpE_442(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
q:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
store i8*%a,i8**%h,align 8
store i8*%b,i8**%i,align 8
%k=load atomic i32,i32*@sml_check_flag unordered,align 4
%l=icmp eq i32%k,0
br i1%l,label%o,label%m
m:
call void@sml_check(i32 inreg%k)
%n=load i8*,i8**%h,align 8
br label%o
o:
%p=phi i8*[%n,%m],[%a,%q]
%r=getelementptr inbounds i8,i8*%p,i64 8
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=getelementptr inbounds i8,i8*%p,i64 12
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=call fastcc i8*@_SMLFN11RecordLabel10isTupleMapE(i32 inreg%t,i32 inreg%w)
%y=getelementptr inbounds i8,i8*%x,i64 16
%z=bitcast i8*%y to i8*(i8*,i8*)**
%A=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%z,align 8
%B=bitcast i8*%x to i8**
%C=load i8*,i8**%B,align 8
%D=load i8*,i8**%i,align 8
%E=call fastcc i8*%A(i8*inreg%C,i8*inreg%D)
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
%H=icmp eq i32%G,0
%I=call i8*@sml_alloc(i32 inreg 20)#0
%J=getelementptr inbounds i8,i8*%I,i64 -4
%K=bitcast i8*%J to i32*
store i32 1342177296,i32*%K,align 4
store i8*%I,i8**%d,align 8
%L=getelementptr inbounds i8,i8*%I,i64 4
call void@llvm.memset.p0i8.i32(i8*%L,i8 0,i32 16,i1 false)
%M=bitcast i8*%I to i32*
store i32 1,i32*%M,align 4
%N=getelementptr inbounds i8,i8*%I,i64 8
%O=bitcast i8*%N to i8**
br i1%H,label%b6,label%P
P:
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bI,i64 0,i32 2,i64 0),i8**%O,align 8
%Q=getelementptr inbounds i8,i8*%I,i64 16
%R=bitcast i8*%Q to i32*
store i32 2,i32*%R,align 4
%S=call i8*@sml_alloc(i32 inreg 20)#0
%T=getelementptr inbounds i8,i8*%S,i64 -4
%U=bitcast i8*%T to i32*
store i32 1342177296,i32*%U,align 4
store i8*%S,i8**%c,align 8
%V=getelementptr inbounds i8,i8*%S,i64 4
%W=bitcast i8*%V to i32*
store i32 0,i32*%W,align 1
%X=bitcast i8*%S to i32*
store i32 6,i32*%X,align 4
%Y=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%Z=getelementptr inbounds i8,i8*%S,i64 8
%aa=bitcast i8*%Z to i8**
store i8*%Y,i8**%aa,align 8
%ab=getelementptr inbounds i8,i8*%S,i64 16
%ac=bitcast i8*%ab to i32*
store i32 2,i32*%ac,align 4
%ad=call i8*@sml_alloc(i32 inreg 20)#0
%ae=getelementptr inbounds i8,i8*%ad,i64 -4
%af=bitcast i8*%ae to i32*
store i32 1342177296,i32*%af,align 4
store i8*%ad,i8**%d,align 8
%ag=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ah=bitcast i8*%ad to i8**
store i8*%ag,i8**%ah,align 8
%ai=getelementptr inbounds i8,i8*%ad,i64 8
%aj=bitcast i8*%ai to i8**
store i8*null,i8**%aj,align 8
%ak=getelementptr inbounds i8,i8*%ad,i64 16
%al=bitcast i8*%ak to i32*
store i32 3,i32*%al,align 4
%am=call i8*@sml_alloc(i32 inreg 20)#0
%an=getelementptr inbounds i8,i8*%am,i64 -4
%ao=bitcast i8*%an to i32*
store i32 1342177296,i32*%ao,align 4
store i8*%am,i8**%e,align 8
%ap=getelementptr inbounds i8,i8*%am,i64 4
%aq=bitcast i8*%ap to i32*
store i32 0,i32*%aq,align 1
%ar=bitcast i8*%am to i32*
store i32 1,i32*%ar,align 4
%as=getelementptr inbounds i8,i8*%am,i64 8
%at=bitcast i8*%as to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@aZ,i64 0,i32 2,i64 0),i8**%at,align 8
%au=getelementptr inbounds i8,i8*%am,i64 16
%av=bitcast i8*%au to i32*
store i32 2,i32*%av,align 4
%aw=call i8*@sml_alloc(i32 inreg 20)#0
%ax=getelementptr inbounds i8,i8*%aw,i64 -4
%ay=bitcast i8*%ax to i32*
store i32 1342177296,i32*%ay,align 4
store i8*%aw,i8**%c,align 8
%az=getelementptr inbounds i8,i8*%aw,i64 4
%aA=bitcast i8*%az to i32*
store i32 0,i32*%aA,align 1
%aB=bitcast i8*%aw to i32*
store i32 6,i32*%aB,align 4
%aC=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aD=getelementptr inbounds i8,i8*%aw,i64 8
%aE=bitcast i8*%aD to i8**
store i8*%aC,i8**%aE,align 8
%aF=getelementptr inbounds i8,i8*%aw,i64 16
%aG=bitcast i8*%aF to i32*
store i32 2,i32*%aG,align 4
%aH=call i8*@sml_alloc(i32 inreg 20)#0
%aI=getelementptr inbounds i8,i8*%aH,i64 -4
%aJ=bitcast i8*%aI to i32*
store i32 1342177296,i32*%aJ,align 4
store i8*%aH,i8**%e,align 8
%aK=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aL=bitcast i8*%aH to i8**
store i8*%aK,i8**%aL,align 8
%aM=getelementptr inbounds i8,i8*%aH,i64 8
%aN=bitcast i8*%aM to i8**
store i8*null,i8**%aN,align 8
%aO=getelementptr inbounds i8,i8*%aH,i64 16
%aP=bitcast i8*%aO to i32*
store i32 3,i32*%aP,align 4
%aQ=call i8*@sml_alloc(i32 inreg 20)#0
%aR=getelementptr inbounds i8,i8*%aQ,i64 -4
%aS=bitcast i8*%aR to i32*
store i32 1342177296,i32*%aS,align 4
store i8*%aQ,i8**%f,align 8
%aT=getelementptr inbounds i8,i8*%aQ,i64 4
%aU=bitcast i8*%aT to i32*
store i32 0,i32*%aU,align 1
%aV=bitcast i8*%aQ to i32*
store i32 1,i32*%aV,align 4
%aW=getelementptr inbounds i8,i8*%aQ,i64 8
%aX=bitcast i8*%aW to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bK,i64 0,i32 2,i64 0),i8**%aX,align 8
%aY=getelementptr inbounds i8,i8*%aQ,i64 16
%aZ=bitcast i8*%aY to i32*
store i32 2,i32*%aZ,align 4
%a0=call i8*@sml_alloc(i32 inreg 20)#0
%a1=getelementptr inbounds i8,i8*%a0,i64 -4
%a2=bitcast i8*%a1 to i32*
store i32 1342177296,i32*%a2,align 4
store i8*%a0,i8**%c,align 8
%a3=getelementptr inbounds i8,i8*%a0,i64 4
%a4=bitcast i8*%a3 to i32*
store i32 0,i32*%a4,align 1
%a5=bitcast i8*%a0 to i32*
store i32 6,i32*%a5,align 4
%a6=load i8*,i8**%f,align 8
%a7=getelementptr inbounds i8,i8*%a0,i64 8
%a8=bitcast i8*%a7 to i8**
store i8*%a6,i8**%a8,align 8
%a9=getelementptr inbounds i8,i8*%a0,i64 16
%ba=bitcast i8*%a9 to i32*
store i32 2,i32*%ba,align 4
%bb=load i8*,i8**%h,align 8
%bc=getelementptr inbounds i8,i8*%bb,i64 8
%bd=bitcast i8*%bc to i32*
%be=load i32,i32*%bd,align 4
%bf=getelementptr inbounds i8,i8*%bb,i64 12
%bg=bitcast i8*%bf to i32*
%bh=load i32,i32*%bg,align 4
%bi=bitcast i8*%bb to i8**
%bj=load i8*,i8**%bi,align 8
store i8*%bj,i8**%f,align 8
%bk=call i8*@sml_alloc(i32 inreg 20)#0
%bl=getelementptr inbounds i8,i8*%bk,i64 -4
%bm=bitcast i8*%bl to i32*
store i32 1342177296,i32*%bm,align 4
store i8*%bk,i8**%g,align 8
%bn=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bo=bitcast i8*%bk to i8**
store i8*%bn,i8**%bo,align 8
%bp=getelementptr inbounds i8,i8*%bk,i64 8
%bq=bitcast i8*%bp to i8**
store i8*null,i8**%bq,align 8
%br=getelementptr inbounds i8,i8*%bk,i64 16
%bs=bitcast i8*%br to i32*
store i32 3,i32*%bs,align 4
%bt=call i8*@sml_alloc(i32 inreg 36)#0
%bu=getelementptr inbounds i8,i8*%bt,i64 -4
%bv=bitcast i8*%bu to i32*
store i32 1342177312,i32*%bv,align 4
%bw=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%bx=bitcast i8*%bt to i8**
store i8*%bw,i8**%bx,align 8
%by=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bz=getelementptr inbounds i8,i8*%bt,i64 8
%bA=bitcast i8*%bz to i8**
store i8*%by,i8**%bA,align 8
%bB=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bC=getelementptr inbounds i8,i8*%bt,i64 16
%bD=bitcast i8*%bC to i8**
store i8*%bB,i8**%bD,align 8
%bE=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%bF=getelementptr inbounds i8,i8*%bt,i64 24
%bG=bitcast i8*%bF to i8**
store i8*%bE,i8**%bG,align 8
%bH=getelementptr inbounds i8,i8*%bt,i64 32
%bI=bitcast i8*%bH to i32*
store i32 15,i32*%bI,align 4
%bJ=call fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_337(i32 inreg%be,i32 inreg%bh,i8*inreg%bt)
%bK=getelementptr inbounds i8,i8*%bJ,i64 16
%bL=bitcast i8*%bK to i8*(i8*,i8*)**
%bM=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bL,align 8
%bN=bitcast i8*%bJ to i8**
%bO=load i8*,i8**%bN,align 8
store i8*%bO,i8**%c,align 8
%bP=load i8*,i8**%h,align 8
%bQ=getelementptr inbounds i8,i8*%bP,i64 8
%bR=bitcast i8*%bQ to i32*
%bS=load i32,i32*%bR,align 4
store i8*null,i8**%h,align 8
%bT=getelementptr inbounds i8,i8*%bP,i64 12
%bU=bitcast i8*%bT to i32*
%bV=load i32,i32*%bU,align 4
%bW=call fastcc i8*@_SMLFN11RecordLabel3Map9listItemsE(i32 inreg%bS,i32 inreg%bV)
%bX=getelementptr inbounds i8,i8*%bW,i64 16
%bY=bitcast i8*%bX to i8*(i8*,i8*)**
%bZ=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bY,align 8
%b0=bitcast i8*%bW to i8**
%b1=load i8*,i8**%b0,align 8
%b2=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%b3=call fastcc i8*%bZ(i8*inreg%b1,i8*inreg%b2)
%b4=load i8*,i8**%c,align 8
%b5=tail call fastcc i8*%bM(i8*inreg%b4,i8*inreg%b3)
ret i8*%b5
b6:
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bb,i64 0,i32 2,i64 0),i8**%O,align 8
%b7=getelementptr inbounds i8,i8*%I,i64 16
%b8=bitcast i8*%b7 to i32*
store i32 2,i32*%b8,align 4
%b9=call i8*@sml_alloc(i32 inreg 20)#0
%ca=getelementptr inbounds i8,i8*%b9,i64 -4
%cb=bitcast i8*%ca to i32*
store i32 1342177296,i32*%cb,align 4
store i8*%b9,i8**%c,align 8
%cc=getelementptr inbounds i8,i8*%b9,i64 4
%cd=bitcast i8*%cc to i32*
store i32 0,i32*%cd,align 1
%ce=bitcast i8*%b9 to i32*
store i32 6,i32*%ce,align 4
%cf=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%cg=getelementptr inbounds i8,i8*%b9,i64 8
%ch=bitcast i8*%cg to i8**
store i8*%cf,i8**%ch,align 8
%ci=getelementptr inbounds i8,i8*%b9,i64 16
%cj=bitcast i8*%ci to i32*
store i32 2,i32*%cj,align 4
%ck=call i8*@sml_alloc(i32 inreg 20)#0
%cl=getelementptr inbounds i8,i8*%ck,i64 -4
%cm=bitcast i8*%cl to i32*
store i32 1342177296,i32*%cm,align 4
store i8*%ck,i8**%d,align 8
%cn=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%co=bitcast i8*%ck to i8**
store i8*%cn,i8**%co,align 8
%cp=getelementptr inbounds i8,i8*%ck,i64 8
%cq=bitcast i8*%cp to i8**
store i8*null,i8**%cq,align 8
%cr=getelementptr inbounds i8,i8*%ck,i64 16
%cs=bitcast i8*%cr to i32*
store i32 3,i32*%cs,align 4
%ct=call i8*@sml_alloc(i32 inreg 20)#0
%cu=getelementptr inbounds i8,i8*%ct,i64 -4
%cv=bitcast i8*%cu to i32*
store i32 1342177296,i32*%cv,align 4
store i8*%ct,i8**%e,align 8
%cw=getelementptr inbounds i8,i8*%ct,i64 4
%cx=bitcast i8*%cw to i32*
store i32 0,i32*%cx,align 1
%cy=bitcast i8*%ct to i32*
store i32 1,i32*%cy,align 4
%cz=getelementptr inbounds i8,i8*%ct,i64 8
%cA=bitcast i8*%cz to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@aZ,i64 0,i32 2,i64 0),i8**%cA,align 8
%cB=getelementptr inbounds i8,i8*%ct,i64 16
%cC=bitcast i8*%cB to i32*
store i32 2,i32*%cC,align 4
%cD=call i8*@sml_alloc(i32 inreg 20)#0
%cE=getelementptr inbounds i8,i8*%cD,i64 -4
%cF=bitcast i8*%cE to i32*
store i32 1342177296,i32*%cF,align 4
store i8*%cD,i8**%c,align 8
%cG=getelementptr inbounds i8,i8*%cD,i64 4
%cH=bitcast i8*%cG to i32*
store i32 0,i32*%cH,align 1
%cI=bitcast i8*%cD to i32*
store i32 6,i32*%cI,align 4
%cJ=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%cK=getelementptr inbounds i8,i8*%cD,i64 8
%cL=bitcast i8*%cK to i8**
store i8*%cJ,i8**%cL,align 8
%cM=getelementptr inbounds i8,i8*%cD,i64 16
%cN=bitcast i8*%cM to i32*
store i32 2,i32*%cN,align 4
%cO=call i8*@sml_alloc(i32 inreg 20)#0
%cP=getelementptr inbounds i8,i8*%cO,i64 -4
%cQ=bitcast i8*%cP to i32*
store i32 1342177296,i32*%cQ,align 4
store i8*%cO,i8**%e,align 8
%cR=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cS=bitcast i8*%cO to i8**
store i8*%cR,i8**%cS,align 8
%cT=getelementptr inbounds i8,i8*%cO,i64 8
%cU=bitcast i8*%cT to i8**
store i8*null,i8**%cU,align 8
%cV=getelementptr inbounds i8,i8*%cO,i64 16
%cW=bitcast i8*%cV to i32*
store i32 3,i32*%cW,align 4
%cX=call i8*@sml_alloc(i32 inreg 20)#0
%cY=getelementptr inbounds i8,i8*%cX,i64 -4
%cZ=bitcast i8*%cY to i32*
store i32 1342177296,i32*%cZ,align 4
store i8*%cX,i8**%f,align 8
%c0=getelementptr inbounds i8,i8*%cX,i64 4
%c1=bitcast i8*%c0 to i32*
store i32 0,i32*%c1,align 1
%c2=bitcast i8*%cX to i32*
store i32 1,i32*%c2,align 4
%c3=getelementptr inbounds i8,i8*%cX,i64 8
%c4=bitcast i8*%c3 to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@ax,i64 0,i32 2,i64 0),i8**%c4,align 8
%c5=getelementptr inbounds i8,i8*%cX,i64 16
%c6=bitcast i8*%c5 to i32*
store i32 2,i32*%c6,align 4
%c7=call i8*@sml_alloc(i32 inreg 20)#0
%c8=getelementptr inbounds i8,i8*%c7,i64 -4
%c9=bitcast i8*%c8 to i32*
store i32 1342177296,i32*%c9,align 4
store i8*%c7,i8**%c,align 8
%da=getelementptr inbounds i8,i8*%c7,i64 4
%db=bitcast i8*%da to i32*
store i32 0,i32*%db,align 1
%dc=bitcast i8*%c7 to i32*
store i32 6,i32*%dc,align 4
%dd=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%de=getelementptr inbounds i8,i8*%c7,i64 8
%df=bitcast i8*%de to i8**
store i8*%dd,i8**%df,align 8
%dg=getelementptr inbounds i8,i8*%c7,i64 16
%dh=bitcast i8*%dg to i32*
store i32 2,i32*%dh,align 4
%di=call i8*@sml_alloc(i32 inreg 20)#0
%dj=getelementptr inbounds i8,i8*%di,i64 -4
%dk=bitcast i8*%dj to i32*
store i32 1342177296,i32*%dk,align 4
store i8*%di,i8**%f,align 8
%dl=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%dm=bitcast i8*%di to i8**
store i8*%dl,i8**%dm,align 8
%dn=getelementptr inbounds i8,i8*%di,i64 8
%do=bitcast i8*%dn to i8**
store i8*null,i8**%do,align 8
%dp=getelementptr inbounds i8,i8*%di,i64 16
%dq=bitcast i8*%dp to i32*
store i32 3,i32*%dq,align 4
%dr=call i8*@sml_alloc(i32 inreg 20)#0
%ds=getelementptr inbounds i8,i8*%dr,i64 -4
%dt=bitcast i8*%ds to i32*
store i32 1342177296,i32*%dt,align 4
store i8*%dr,i8**%c,align 8
%du=bitcast i8*%dr to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@i,i64 0,i32 2)to i8*),i8**%du,align 8
%dv=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%dw=getelementptr inbounds i8,i8*%dr,i64 8
%dx=bitcast i8*%dw to i8**
store i8*%dv,i8**%dx,align 8
%dy=getelementptr inbounds i8,i8*%dr,i64 16
%dz=bitcast i8*%dy to i32*
store i32 3,i32*%dz,align 4
%dA=call i8*@sml_alloc(i32 inreg 20)#0
%dB=getelementptr inbounds i8,i8*%dA,i64 -4
%dC=bitcast i8*%dB to i32*
store i32 1342177296,i32*%dC,align 4
store i8*%dA,i8**%g,align 8
%dD=getelementptr inbounds i8,i8*%dA,i64 4
%dE=bitcast i8*%dD to i32*
store i32 0,i32*%dE,align 1
%dF=bitcast i8*%dA to i32*
store i32 1,i32*%dF,align 4
%dG=getelementptr inbounds i8,i8*%dA,i64 8
%dH=bitcast i8*%dG to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bf,i64 0,i32 2,i64 0),i8**%dH,align 8
%dI=getelementptr inbounds i8,i8*%dA,i64 16
%dJ=bitcast i8*%dI to i32*
store i32 2,i32*%dJ,align 4
%dK=call i8*@sml_alloc(i32 inreg 20)#0
%dL=getelementptr inbounds i8,i8*%dK,i64 -4
%dM=bitcast i8*%dL to i32*
store i32 1342177296,i32*%dM,align 4
store i8*%dK,i8**%f,align 8
%dN=getelementptr inbounds i8,i8*%dK,i64 4
%dO=bitcast i8*%dN to i32*
store i32 0,i32*%dO,align 1
%dP=bitcast i8*%dK to i32*
store i32 6,i32*%dP,align 4
%dQ=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%dR=getelementptr inbounds i8,i8*%dK,i64 8
%dS=bitcast i8*%dR to i8**
store i8*%dQ,i8**%dS,align 8
%dT=getelementptr inbounds i8,i8*%dK,i64 16
%dU=bitcast i8*%dT to i32*
store i32 2,i32*%dU,align 4
%dV=call i8*@sml_alloc(i32 inreg 20)#0
%dW=getelementptr inbounds i8,i8*%dV,i64 -4
%dX=bitcast i8*%dW to i32*
store i32 1342177296,i32*%dX,align 4
store i8*%dV,i8**%g,align 8
%dY=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%dZ=bitcast i8*%dV to i8**
store i8*%dY,i8**%dZ,align 8
%d0=getelementptr inbounds i8,i8*%dV,i64 8
%d1=bitcast i8*%d0 to i8**
store i8*null,i8**%d1,align 8
%d2=getelementptr inbounds i8,i8*%dV,i64 16
%d3=bitcast i8*%d2 to i32*
store i32 3,i32*%d3,align 4
%d4=load i8*,i8**%h,align 8
%d5=getelementptr inbounds i8,i8*%d4,i64 8
%d6=bitcast i8*%d5 to i32*
%d7=load i32,i32*%d6,align 4
%d8=getelementptr inbounds i8,i8*%d4,i64 12
%d9=bitcast i8*%d8 to i32*
%ea=load i32,i32*%d9,align 4
%eb=call fastcc i8*@_SMLFN11RecordLabel3Map10listItemsiE(i32 inreg%d7,i32 inreg%ea)
store i8*%eb,i8**%f,align 8
%ec=bitcast i8**%h to i8***
%ed=load i8**,i8***%ec,align 8
%ee=load i8*,i8**%ed,align 8
store i8*%ee,i8**%j,align 8
%ef=bitcast i8**%ed to i8*
%eg=getelementptr inbounds i8*,i8**%ed,i64 1
%eh=bitcast i8**%eg to i32*
%ei=load i32,i32*%eh,align 4
store i8*null,i8**%h,align 8
%ej=getelementptr inbounds i8,i8*%ef,i64 12
%ek=bitcast i8*%ej to i32*
%el=load i32,i32*%ek,align 4
%em=call i8*@sml_alloc(i32 inreg 28)#0
%en=getelementptr inbounds i8,i8*%em,i64 -4
%eo=bitcast i8*%en to i32*
store i32 1342177304,i32*%eo,align 4
store i8*%em,i8**%h,align 8
%ep=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%eq=bitcast i8*%em to i8**
store i8*%ep,i8**%eq,align 8
%er=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%es=getelementptr inbounds i8,i8*%em,i64 8
%et=bitcast i8*%es to i8**
store i8*%er,i8**%et,align 8
%eu=getelementptr inbounds i8,i8*%em,i64 16
%ev=bitcast i8*%eu to i32*
store i32%ei,i32*%ev,align 4
%ew=getelementptr inbounds i8,i8*%em,i64 20
%ex=bitcast i8*%ew to i32*
store i32%el,i32*%ex,align 4
%ey=getelementptr inbounds i8,i8*%em,i64 24
%ez=bitcast i8*%ey to i32*
store i32 3,i32*%ez,align 4
%eA=call i8*@sml_alloc(i32 inreg 28)#0
%eB=getelementptr inbounds i8,i8*%eA,i64 -4
%eC=bitcast i8*%eB to i32*
store i32 1342177304,i32*%eC,align 4
store i8*%eA,i8**%c,align 8
%eD=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%eE=bitcast i8*%eA to i8**
store i8*%eD,i8**%eE,align 8
%eF=getelementptr inbounds i8,i8*%eA,i64 8
%eG=bitcast i8*%eF to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat15formatRecordExpE_435 to void(...)*),void(...)**%eG,align 8
%eH=getelementptr inbounds i8,i8*%eA,i64 16
%eI=bitcast i8*%eH to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat15formatRecordExpE_435 to void(...)*),void(...)**%eI,align 8
%eJ=getelementptr inbounds i8,i8*%eA,i64 24
%eK=bitcast i8*%eJ to i32*
store i32 -2147483647,i32*%eK,align 4
%eL=call i8*@sml_alloc(i32 inreg 36)#0
%eM=getelementptr inbounds i8,i8*%eL,i64 -4
%eN=bitcast i8*%eM to i32*
store i32 1342177312,i32*%eN,align 4
%eO=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%eP=bitcast i8*%eL to i8**
store i8*%eO,i8**%eP,align 8
%eQ=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%eR=getelementptr inbounds i8,i8*%eL,i64 8
%eS=bitcast i8*%eR to i8**
store i8*%eQ,i8**%eS,align 8
%eT=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%eU=getelementptr inbounds i8,i8*%eL,i64 16
%eV=bitcast i8*%eU to i8**
store i8*%eT,i8**%eV,align 8
%eW=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%eX=getelementptr inbounds i8,i8*%eL,i64 24
%eY=bitcast i8*%eX to i8**
store i8*%eW,i8**%eY,align 8
%eZ=getelementptr inbounds i8,i8*%eL,i64 32
%e0=bitcast i8*%eZ to i32*
store i32 15,i32*%e0,align 4
%e1=call fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_229(i32 inreg 1,i32 inreg 8,i8*inreg%eL)
%e2=getelementptr inbounds i8,i8*%e1,i64 16
%e3=bitcast i8*%e2 to i8*(i8*,i8*)**
%e4=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%e3,align 8
%e5=bitcast i8*%e1 to i8**
%e6=load i8*,i8**%e5,align 8
store i8*%e6,i8**%c,align 8
%e7=load i8*,i8**%f,align 8
%e8=getelementptr inbounds i8,i8*%e7,i64 16
%e9=bitcast i8*%e8 to i8*(i8*,i8*)**
%fa=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%e9,align 8
store i8*null,i8**%f,align 8
%fb=bitcast i8*%e7 to i8**
%fc=load i8*,i8**%fb,align 8
%fd=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%fe=call fastcc i8*%fa(i8*inreg%fc,i8*inreg%fd)
%ff=load i8*,i8**%c,align 8
%fg=tail call fastcc i8*%e4(i8*inreg%ff,i8*inreg%fe)
ret i8*%fg
}
define internal fastcc i8*@_SMLLLN10TermFormat15formatRecordExpE_443(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat15formatRecordExpE_442 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat15formatRecordExpE_442 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat15formatRecordExpE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat15formatRecordExpE_443 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat15formatRecordExpE_443 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLLN10TermFormat21formatRecordExpToJsonE_454(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%b to i8**
br label%p
k:
call void@sml_check(i32 inreg%g)
%l=bitcast i8**%c to i8***
%m=load i8**,i8***%l,align 8
%n=load i8*,i8**%e,align 8
%o=bitcast i8**%m to i8*
br label%p
p:
%q=phi i8*[%o,%k],[%b,%i]
%r=phi i8*[%n,%k],[%a,%i]
%s=phi i8**[%m,%k],[%j,%i]
%t=getelementptr inbounds i8,i8*%r,i64 20
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=add i32%v,7
%x=sub i32 0,%v
%y=and i32%w,%x
%z=load i8*,i8**%s,align 8
store i8*%z,i8**%d,align 8
%A=getelementptr inbounds i8,i8*%r,i64 16
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=icmp eq i32%C,0
br i1%D,label%J,label%E
E:
store i8*null,i8**%c,align 8
%F=sext i32%y to i64
%G=getelementptr inbounds i8,i8*%q,i64%F
%H=bitcast i8*%G to i8**
%I=load i8*,i8**%H,align 8
br label%R
J:
%K=call i8*@sml_alloc(i32 inreg%v)#0
%L=getelementptr inbounds i8,i8*%K,i64 -4
%M=bitcast i8*%L to i32*
store i32%v,i32*%M,align 4
%N=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%O=sext i32%y to i64
%P=getelementptr inbounds i8,i8*%N,i64%O
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%K,i8*%P,i32%v,i1 false)
%Q=load i8*,i8**%d,align 8
br label%R
R:
%S=phi i8*[%Q,%J],[%z,%E]
%T=phi i8*[%K,%J],[%I,%E]
store i8*%T,i8**%c,align 8
store i8*null,i8**%d,align 8
%U=call fastcc i8*@_SMLFN11RecordLabel16format__jsonLabelE(i8*inreg%S)
store i8*%U,i8**%d,align 8
%V=load i8*,i8**%e,align 8
%W=getelementptr inbounds i8,i8*%V,i64 8
%X=bitcast i8*%W to i8**
%Y=load i8*,i8**%X,align 8
store i8*%Y,i8**%f,align 8
%Z=bitcast i8*%V to i8**
%aa=load i8*,i8**%Z,align 8
%ab=getelementptr inbounds i8,i8*%aa,i64 16
%ac=bitcast i8*%ab to i8*(i8*,i8*)**
%ad=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ac,align 8
store i8*null,i8**%e,align 8
%ae=bitcast i8*%V to i8***
%af=load i8**,i8***%ae,align 8
%ag=load i8*,i8**%af,align 8
%ah=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ai=call fastcc i8*%ad(i8*inreg%ag,i8*inreg%ah)
store i8*%ai,i8**%c,align 8
%aj=call i8*@sml_alloc(i32 inreg 28)#0
%ak=getelementptr inbounds i8,i8*%aj,i64 -4
%al=bitcast i8*%ak to i32*
store i32 1342177304,i32*%al,align 4
%am=load i8*,i8**%d,align 8
%an=bitcast i8*%aj to i8**
store i8*%am,i8**%an,align 8
%ao=load i8*,i8**%f,align 8
%ap=getelementptr inbounds i8,i8*%aj,i64 8
%aq=bitcast i8*%ap to i8**
store i8*%ao,i8**%aq,align 8
%ar=load i8*,i8**%c,align 8
%as=getelementptr inbounds i8,i8*%aj,i64 16
%at=bitcast i8*%as to i8**
store i8*%ar,i8**%at,align 8
%au=getelementptr inbounds i8,i8*%aj,i64 24
%av=bitcast i8*%au to i32*
store i32 7,i32*%av,align 4
%aw=tail call fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_304(i8*inreg%aj)
ret i8*%aw
}
define internal fastcc i8*@_SMLLLN10TermFormat21formatRecordExpToJsonE_455(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
store i8*%a,i8**%h,align 8
store i8*%b,i8**%i,align 8
%k=load atomic i32,i32*@sml_check_flag unordered,align 4
%l=icmp eq i32%k,0
br i1%l,label%n,label%m
m:
call void@sml_check(i32 inreg%k)
br label%n
n:
%o=call i8*@sml_alloc(i32 inreg 20)#0
%p=getelementptr inbounds i8,i8*%o,i64 -4
%q=bitcast i8*%p to i32*
store i32 1342177296,i32*%q,align 4
store i8*%o,i8**%d,align 8
%r=getelementptr inbounds i8,i8*%o,i64 4
%s=bitcast i8*%r to i32*
store i32 0,i32*%s,align 1
%t=bitcast i8*%o to i32*
store i32 1,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%o,i64 8
%v=bitcast i8*%u to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bb,i64 0,i32 2,i64 0),i8**%v,align 8
%w=getelementptr inbounds i8,i8*%o,i64 16
%x=bitcast i8*%w to i32*
store i32 2,i32*%x,align 4
%y=call i8*@sml_alloc(i32 inreg 20)#0
%z=getelementptr inbounds i8,i8*%y,i64 -4
%A=bitcast i8*%z to i32*
store i32 1342177296,i32*%A,align 4
store i8*%y,i8**%c,align 8
%B=getelementptr inbounds i8,i8*%y,i64 4
%C=bitcast i8*%B to i32*
store i32 0,i32*%C,align 1
%D=bitcast i8*%y to i32*
store i32 6,i32*%D,align 4
%E=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%F=getelementptr inbounds i8,i8*%y,i64 8
%G=bitcast i8*%F to i8**
store i8*%E,i8**%G,align 8
%H=getelementptr inbounds i8,i8*%y,i64 16
%I=bitcast i8*%H to i32*
store i32 2,i32*%I,align 4
%J=call i8*@sml_alloc(i32 inreg 20)#0
%K=getelementptr inbounds i8,i8*%J,i64 -4
%L=bitcast i8*%K to i32*
store i32 1342177296,i32*%L,align 4
store i8*%J,i8**%d,align 8
%M=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%N=bitcast i8*%J to i8**
store i8*%M,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%J,i64 8
%P=bitcast i8*%O to i8**
store i8*null,i8**%P,align 8
%Q=getelementptr inbounds i8,i8*%J,i64 16
%R=bitcast i8*%Q to i32*
store i32 3,i32*%R,align 4
%S=call i8*@sml_alloc(i32 inreg 20)#0
%T=getelementptr inbounds i8,i8*%S,i64 -4
%U=bitcast i8*%T to i32*
store i32 1342177296,i32*%U,align 4
store i8*%S,i8**%e,align 8
%V=getelementptr inbounds i8,i8*%S,i64 4
%W=bitcast i8*%V to i32*
store i32 0,i32*%W,align 1
%X=bitcast i8*%S to i32*
store i32 1,i32*%X,align 4
%Y=getelementptr inbounds i8,i8*%S,i64 8
%Z=bitcast i8*%Y to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@aZ,i64 0,i32 2,i64 0),i8**%Z,align 8
%aa=getelementptr inbounds i8,i8*%S,i64 16
%ab=bitcast i8*%aa to i32*
store i32 2,i32*%ab,align 4
%ac=call i8*@sml_alloc(i32 inreg 20)#0
%ad=getelementptr inbounds i8,i8*%ac,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 1342177296,i32*%ae,align 4
store i8*%ac,i8**%c,align 8
%af=getelementptr inbounds i8,i8*%ac,i64 4
%ag=bitcast i8*%af to i32*
store i32 0,i32*%ag,align 1
%ah=bitcast i8*%ac to i32*
store i32 6,i32*%ah,align 4
%ai=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aj=getelementptr inbounds i8,i8*%ac,i64 8
%ak=bitcast i8*%aj to i8**
store i8*%ai,i8**%ak,align 8
%al=getelementptr inbounds i8,i8*%ac,i64 16
%am=bitcast i8*%al to i32*
store i32 2,i32*%am,align 4
%an=call i8*@sml_alloc(i32 inreg 20)#0
%ao=getelementptr inbounds i8,i8*%an,i64 -4
%ap=bitcast i8*%ao to i32*
store i32 1342177296,i32*%ap,align 4
store i8*%an,i8**%e,align 8
%aq=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ar=bitcast i8*%an to i8**
store i8*%aq,i8**%ar,align 8
%as=getelementptr inbounds i8,i8*%an,i64 8
%at=bitcast i8*%as to i8**
store i8*null,i8**%at,align 8
%au=getelementptr inbounds i8,i8*%an,i64 16
%av=bitcast i8*%au to i32*
store i32 3,i32*%av,align 4
%aw=call i8*@sml_alloc(i32 inreg 20)#0
%ax=getelementptr inbounds i8,i8*%aw,i64 -4
%ay=bitcast i8*%ax to i32*
store i32 1342177296,i32*%ay,align 4
store i8*%aw,i8**%f,align 8
%az=getelementptr inbounds i8,i8*%aw,i64 4
%aA=bitcast i8*%az to i32*
store i32 0,i32*%aA,align 1
%aB=bitcast i8*%aw to i32*
store i32 1,i32*%aB,align 4
%aC=getelementptr inbounds i8,i8*%aw,i64 8
%aD=bitcast i8*%aC to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@aK,i64 0,i32 2,i64 0),i8**%aD,align 8
%aE=getelementptr inbounds i8,i8*%aw,i64 16
%aF=bitcast i8*%aE to i32*
store i32 2,i32*%aF,align 4
%aG=call i8*@sml_alloc(i32 inreg 20)#0
%aH=getelementptr inbounds i8,i8*%aG,i64 -4
%aI=bitcast i8*%aH to i32*
store i32 1342177296,i32*%aI,align 4
store i8*%aG,i8**%c,align 8
%aJ=getelementptr inbounds i8,i8*%aG,i64 4
%aK=bitcast i8*%aJ to i32*
store i32 0,i32*%aK,align 1
%aL=bitcast i8*%aG to i32*
store i32 6,i32*%aL,align 4
%aM=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%aN=getelementptr inbounds i8,i8*%aG,i64 8
%aO=bitcast i8*%aN to i8**
store i8*%aM,i8**%aO,align 8
%aP=getelementptr inbounds i8,i8*%aG,i64 16
%aQ=bitcast i8*%aP to i32*
store i32 2,i32*%aQ,align 4
%aR=call i8*@sml_alloc(i32 inreg 20)#0
%aS=getelementptr inbounds i8,i8*%aR,i64 -4
%aT=bitcast i8*%aS to i32*
store i32 1342177296,i32*%aT,align 4
store i8*%aR,i8**%f,align 8
%aU=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aV=bitcast i8*%aR to i8**
store i8*%aU,i8**%aV,align 8
%aW=getelementptr inbounds i8,i8*%aR,i64 8
%aX=bitcast i8*%aW to i8**
store i8*null,i8**%aX,align 8
%aY=getelementptr inbounds i8,i8*%aR,i64 16
%aZ=bitcast i8*%aY to i32*
store i32 3,i32*%aZ,align 4
%a0=call i8*@sml_alloc(i32 inreg 20)#0
%a1=getelementptr inbounds i8,i8*%a0,i64 -4
%a2=bitcast i8*%a1 to i32*
store i32 1342177296,i32*%a2,align 4
store i8*%a0,i8**%c,align 8
%a3=bitcast i8*%a0 to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@i,i64 0,i32 2)to i8*),i8**%a3,align 8
%a4=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%a5=getelementptr inbounds i8,i8*%a0,i64 8
%a6=bitcast i8*%a5 to i8**
store i8*%a4,i8**%a6,align 8
%a7=getelementptr inbounds i8,i8*%a0,i64 16
%a8=bitcast i8*%a7 to i32*
store i32 3,i32*%a8,align 4
%a9=call i8*@sml_alloc(i32 inreg 20)#0
%ba=getelementptr inbounds i8,i8*%a9,i64 -4
%bb=bitcast i8*%ba to i32*
store i32 1342177296,i32*%bb,align 4
store i8*%a9,i8**%g,align 8
%bc=getelementptr inbounds i8,i8*%a9,i64 4
%bd=bitcast i8*%bc to i32*
store i32 0,i32*%bd,align 1
%be=bitcast i8*%a9 to i32*
store i32 1,i32*%be,align 4
%bf=getelementptr inbounds i8,i8*%a9,i64 8
%bg=bitcast i8*%bf to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bf,i64 0,i32 2,i64 0),i8**%bg,align 8
%bh=getelementptr inbounds i8,i8*%a9,i64 16
%bi=bitcast i8*%bh to i32*
store i32 2,i32*%bi,align 4
%bj=call i8*@sml_alloc(i32 inreg 20)#0
%bk=getelementptr inbounds i8,i8*%bj,i64 -4
%bl=bitcast i8*%bk to i32*
store i32 1342177296,i32*%bl,align 4
store i8*%bj,i8**%f,align 8
%bm=getelementptr inbounds i8,i8*%bj,i64 4
%bn=bitcast i8*%bm to i32*
store i32 0,i32*%bn,align 1
%bo=bitcast i8*%bj to i32*
store i32 6,i32*%bo,align 4
%bp=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%bq=getelementptr inbounds i8,i8*%bj,i64 8
%br=bitcast i8*%bq to i8**
store i8*%bp,i8**%br,align 8
%bs=getelementptr inbounds i8,i8*%bj,i64 16
%bt=bitcast i8*%bs to i32*
store i32 2,i32*%bt,align 4
%bu=call i8*@sml_alloc(i32 inreg 20)#0
%bv=getelementptr inbounds i8,i8*%bu,i64 -4
%bw=bitcast i8*%bv to i32*
store i32 1342177296,i32*%bw,align 4
store i8*%bu,i8**%g,align 8
%bx=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%by=bitcast i8*%bu to i8**
store i8*%bx,i8**%by,align 8
%bz=getelementptr inbounds i8,i8*%bu,i64 8
%bA=bitcast i8*%bz to i8**
store i8*null,i8**%bA,align 8
%bB=getelementptr inbounds i8,i8*%bu,i64 16
%bC=bitcast i8*%bB to i32*
store i32 3,i32*%bC,align 4
%bD=load i8*,i8**%h,align 8
%bE=getelementptr inbounds i8,i8*%bD,i64 8
%bF=bitcast i8*%bE to i32*
%bG=load i32,i32*%bF,align 4
%bH=getelementptr inbounds i8,i8*%bD,i64 12
%bI=bitcast i8*%bH to i32*
%bJ=load i32,i32*%bI,align 4
%bK=call fastcc i8*@_SMLFN11RecordLabel3Map10listItemsiE(i32 inreg%bG,i32 inreg%bJ)
store i8*%bK,i8**%f,align 8
%bL=bitcast i8**%h to i8***
%bM=load i8**,i8***%bL,align 8
%bN=load i8*,i8**%bM,align 8
store i8*%bN,i8**%j,align 8
%bO=bitcast i8**%bM to i8*
%bP=getelementptr inbounds i8*,i8**%bM,i64 1
%bQ=bitcast i8**%bP to i32*
%bR=load i32,i32*%bQ,align 4
store i8*null,i8**%h,align 8
%bS=getelementptr inbounds i8,i8*%bO,i64 12
%bT=bitcast i8*%bS to i32*
%bU=load i32,i32*%bT,align 4
%bV=call i8*@sml_alloc(i32 inreg 28)#0
%bW=getelementptr inbounds i8,i8*%bV,i64 -4
%bX=bitcast i8*%bW to i32*
store i32 1342177304,i32*%bX,align 4
store i8*%bV,i8**%h,align 8
%bY=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%bZ=bitcast i8*%bV to i8**
store i8*%bY,i8**%bZ,align 8
%b0=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%b1=getelementptr inbounds i8,i8*%bV,i64 8
%b2=bitcast i8*%b1 to i8**
store i8*%b0,i8**%b2,align 8
%b3=getelementptr inbounds i8,i8*%bV,i64 16
%b4=bitcast i8*%b3 to i32*
store i32%bR,i32*%b4,align 4
%b5=getelementptr inbounds i8,i8*%bV,i64 20
%b6=bitcast i8*%b5 to i32*
store i32%bU,i32*%b6,align 4
%b7=getelementptr inbounds i8,i8*%bV,i64 24
%b8=bitcast i8*%b7 to i32*
store i32 3,i32*%b8,align 4
%b9=call i8*@sml_alloc(i32 inreg 28)#0
%ca=getelementptr inbounds i8,i8*%b9,i64 -4
%cb=bitcast i8*%ca to i32*
store i32 1342177304,i32*%cb,align 4
store i8*%b9,i8**%c,align 8
%cc=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%cd=bitcast i8*%b9 to i8**
store i8*%cc,i8**%cd,align 8
%ce=getelementptr inbounds i8,i8*%b9,i64 8
%cf=bitcast i8*%ce to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat21formatRecordExpToJsonE_454 to void(...)*),void(...)**%cf,align 8
%cg=getelementptr inbounds i8,i8*%b9,i64 16
%ch=bitcast i8*%cg to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat21formatRecordExpToJsonE_454 to void(...)*),void(...)**%ch,align 8
%ci=getelementptr inbounds i8,i8*%b9,i64 24
%cj=bitcast i8*%ci to i32*
store i32 -2147483647,i32*%cj,align 4
%ck=call i8*@sml_alloc(i32 inreg 36)#0
%cl=getelementptr inbounds i8,i8*%ck,i64 -4
%cm=bitcast i8*%cl to i32*
store i32 1342177312,i32*%cm,align 4
%cn=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%co=bitcast i8*%ck to i8**
store i8*%cn,i8**%co,align 8
%cp=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%cq=getelementptr inbounds i8,i8*%ck,i64 8
%cr=bitcast i8*%cq to i8**
store i8*%cp,i8**%cr,align 8
%cs=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%ct=getelementptr inbounds i8,i8*%ck,i64 16
%cu=bitcast i8*%ct to i8**
store i8*%cs,i8**%cu,align 8
%cv=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%cw=getelementptr inbounds i8,i8*%ck,i64 24
%cx=bitcast i8*%cw to i8**
store i8*%cv,i8**%cx,align 8
%cy=getelementptr inbounds i8,i8*%ck,i64 32
%cz=bitcast i8*%cy to i32*
store i32 15,i32*%cz,align 4
%cA=call fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_229(i32 inreg 1,i32 inreg 8,i8*inreg%ck)
%cB=getelementptr inbounds i8,i8*%cA,i64 16
%cC=bitcast i8*%cB to i8*(i8*,i8*)**
%cD=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%cC,align 8
%cE=bitcast i8*%cA to i8**
%cF=load i8*,i8**%cE,align 8
store i8*%cF,i8**%c,align 8
%cG=load i8*,i8**%f,align 8
%cH=getelementptr inbounds i8,i8*%cG,i64 16
%cI=bitcast i8*%cH to i8*(i8*,i8*)**
%cJ=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%cI,align 8
store i8*null,i8**%f,align 8
%cK=bitcast i8*%cG to i8**
%cL=load i8*,i8**%cK,align 8
%cM=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%cN=call fastcc i8*%cJ(i8*inreg%cL,i8*inreg%cM)
%cO=load i8*,i8**%c,align 8
%cP=tail call fastcc i8*%cD(i8*inreg%cO,i8*inreg%cN)
ret i8*%cP
}
define internal fastcc i8*@_SMLLLN10TermFormat21formatRecordExpToJsonE_456(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat21formatRecordExpToJsonE_455 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat21formatRecordExpToJsonE_455 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat21formatRecordExpToJsonE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat21formatRecordExpToJsonE_456 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat21formatRecordExpToJsonE_456 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatRecordTyE_467(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%b to i8**
br label%p
k:
call void@sml_check(i32 inreg%g)
%l=bitcast i8**%c to i8***
%m=load i8**,i8***%l,align 8
%n=load i8*,i8**%e,align 8
%o=bitcast i8**%m to i8*
br label%p
p:
%q=phi i8*[%o,%k],[%b,%i]
%r=phi i8*[%n,%k],[%a,%i]
%s=phi i8**[%m,%k],[%j,%i]
%t=getelementptr inbounds i8,i8*%r,i64 20
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=add i32%v,7
%x=sub i32 0,%v
%y=and i32%w,%x
%z=load i8*,i8**%s,align 8
store i8*%z,i8**%d,align 8
%A=getelementptr inbounds i8,i8*%r,i64 16
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=icmp eq i32%C,0
br i1%D,label%J,label%E
E:
store i8*null,i8**%c,align 8
%F=sext i32%y to i64
%G=getelementptr inbounds i8,i8*%q,i64%F
%H=bitcast i8*%G to i8**
%I=load i8*,i8**%H,align 8
br label%R
J:
%K=call i8*@sml_alloc(i32 inreg%v)#0
%L=getelementptr inbounds i8,i8*%K,i64 -4
%M=bitcast i8*%L to i32*
store i32%v,i32*%M,align 4
%N=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%O=sext i32%y to i64
%P=getelementptr inbounds i8,i8*%N,i64%O
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%K,i8*%P,i32%v,i1 false)
%Q=load i8*,i8**%d,align 8
br label%R
R:
%S=phi i8*[%Q,%J],[%z,%E]
%T=phi i8*[%K,%J],[%I,%E]
store i8*%T,i8**%c,align 8
store i8*null,i8**%d,align 8
%U=call fastcc i8*@_SMLFN11RecordLabel12format__labelE(i8*inreg%S)
store i8*%U,i8**%d,align 8
%V=load i8*,i8**%e,align 8
%W=getelementptr inbounds i8,i8*%V,i64 8
%X=bitcast i8*%W to i8**
%Y=load i8*,i8**%X,align 8
store i8*%Y,i8**%f,align 8
%Z=bitcast i8*%V to i8**
%aa=load i8*,i8**%Z,align 8
%ab=getelementptr inbounds i8,i8*%aa,i64 16
%ac=bitcast i8*%ab to i8*(i8*,i8*)**
%ad=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ac,align 8
store i8*null,i8**%e,align 8
%ae=bitcast i8*%V to i8***
%af=load i8**,i8***%ae,align 8
%ag=load i8*,i8**%af,align 8
%ah=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ai=call fastcc i8*%ad(i8*inreg%ag,i8*inreg%ah)
store i8*%ai,i8**%c,align 8
%aj=call i8*@sml_alloc(i32 inreg 28)#0
%ak=getelementptr inbounds i8,i8*%aj,i64 -4
%al=bitcast i8*%ak to i32*
store i32 1342177304,i32*%al,align 4
%am=load i8*,i8**%d,align 8
%an=bitcast i8*%aj to i8**
store i8*%am,i8**%an,align 8
%ao=load i8*,i8**%f,align 8
%ap=getelementptr inbounds i8,i8*%aj,i64 8
%aq=bitcast i8*%ap to i8**
store i8*%ao,i8**%aq,align 8
%ar=load i8*,i8**%c,align 8
%as=getelementptr inbounds i8,i8*%aj,i64 16
%at=bitcast i8*%as to i8**
store i8*%ar,i8**%at,align 8
%au=getelementptr inbounds i8,i8*%aj,i64 24
%av=bitcast i8*%au to i32*
store i32 7,i32*%av,align 4
%aw=tail call fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_304(i8*inreg%aj)
ret i8*%aw
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatRecordTyE_468(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatRecordTyE_470(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatRecordTyE_473(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=load i8*,i8**%d,align 8
%m=bitcast i8**%c to i8***
%n=load i8**,i8***%m,align 8
br label%o
o:
%p=phi i8**[%n,%k],[%j,%i]
%q=phi i8*[%l,%k],[%b,%i]
store i8*null,i8**%d,align 8
%r=load i8*,i8**%p,align 8
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
store i8*null,i8**%c,align 8
%v=bitcast i8**%p to i8***
%w=load i8**,i8***%v,align 8
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%u(i8*inreg%x,i8*inreg%q)
%z=getelementptr inbounds i8,i8*%y,i64 16
%A=bitcast i8*%z to i8*(i8*,i8*,i8*,i8*,i8*)**
%B=load i8*(i8*,i8*,i8*,i8*,i8*)*,i8*(i8*,i8*,i8*,i8*,i8*)**%A,align 8
%C=bitcast i8*%y to i8**
%D=load i8*,i8**%C,align 8
store i8*%D,i8**%c,align 8
%E=call i8*@sml_alloc(i32 inreg 4)#0
%F=bitcast i8*%E to i32*
%G=getelementptr inbounds i8,i8*%E,i64 -4
%H=bitcast i8*%G to i32*
store i32 4,i32*%H,align 4
store i8*%E,i8**%d,align 8
store i32 1,i32*%F,align 4
%I=call i8*@sml_alloc(i32 inreg 4)#0
%J=bitcast i8*%I to i32*
%K=getelementptr inbounds i8,i8*%I,i64 -4
%L=bitcast i8*%K to i32*
store i32 4,i32*%L,align 4
store i8*%I,i8**%e,align 8
store i32 8,i32*%J,align 4
%M=call i8*@sml_alloc(i32 inreg 4)#0
%N=bitcast i8*%M to i32*
%O=getelementptr inbounds i8,i8*%M,i64 -4
%P=bitcast i8*%O to i32*
store i32 4,i32*%P,align 4
store i8*%M,i8**%f,align 8
store i32 1,i32*%N,align 4
%Q=call i8*@sml_alloc(i32 inreg 4)#0
%R=bitcast i8*%Q to i32*
%S=getelementptr inbounds i8,i8*%Q,i64 -4
%T=bitcast i8*%S to i32*
store i32 4,i32*%T,align 4
store i32 8,i32*%R,align 4
%U=load i8*,i8**%c,align 8
%V=load i8*,i8**%d,align 8
%W=load i8*,i8**%e,align 8
%X=load i8*,i8**%f,align 8
%Y=call fastcc i8*%B(i8*inreg%U,i8*inreg%V,i8*inreg%W,i8*inreg%X,i8*inreg%Q)
ret i8*%Y
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatRecordTyE_474(i8*inreg%a)#2 gc"smlsharp"{
j:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%h,label%f
f:
call void@sml_check(i32 inreg%d)
%g=load i8*,i8**%b,align 8
br label%h
h:
%i=phi i8*[%g,%f],[%a,%j]
store i8*null,i8**%b,align 8
%k=call fastcc i8*@_SMLLLN10TermFormat10FormatComb6guard__E_186(i8*inreg%i)
store i8*%k,i8**%b,align 8
%l=call i8*@sml_alloc(i32 inreg 12)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177288,i32*%n,align 4
store i8*%l,i8**%c,align 8
%o=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%c,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatRecordTyE_473 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatRecordTyE_473 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatRecordTyE_476(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=bitcast i8**%d to i8***
%m=load i8**,i8***%l,align 8
%n=bitcast i8**%m to i8*
br label%o
o:
%p=phi i8*[%n,%k],[%a,%i]
%q=phi i8**[%m,%k],[%j,%i]
%r=load i8*,i8**%q,align 8
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%e,align 8
%x=getelementptr inbounds i8,i8*%p,i64 8
%y=bitcast i8*%x to i8**
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%d,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%f,align 8
%D=getelementptr inbounds i8,i8*%A,i64 4
%E=bitcast i8*%D to i32*
store i32 0,i32*%E,align 1
%F=bitcast i8*%A to i32*
store i32 4,i32*%F,align 4
%G=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%H=getelementptr inbounds i8,i8*%A,i64 8
%I=bitcast i8*%H to i8**
store i8*%G,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%A,i64 16
%K=bitcast i8*%J to i32*
store i32 2,i32*%K,align 4
%L=call i8*@sml_alloc(i32 inreg 20)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32 1342177296,i32*%N,align 4
%O=load i8*,i8**%f,align 8
%P=bitcast i8*%L to i8**
store i8*%O,i8**%P,align 8
%Q=load i8*,i8**%c,align 8
%R=getelementptr inbounds i8,i8*%L,i64 8
%S=bitcast i8*%R to i8**
store i8*%Q,i8**%S,align 8
%T=getelementptr inbounds i8,i8*%L,i64 16
%U=bitcast i8*%T to i32*
store i32 3,i32*%U,align 4
%V=load i8*,i8**%e,align 8
%W=tail call fastcc i8*%u(i8*inreg%V,i8*inreg%L)
ret i8*%W
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatRecordTyE_477(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8**
br label%p
l:
call void@sml_check(i32 inreg%h)
%m=load i8*,i8**%d,align 8
%n=bitcast i8**%c to i8***
%o=load i8**,i8***%n,align 8
br label%p
p:
%q=phi i8**[%o,%l],[%k,%j]
%r=phi i8*[%m,%l],[%b,%j]
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%f,align 8
%x=load i8*,i8**%q,align 8
store i8*%x,i8**%d,align 8
%y=getelementptr inbounds i8*,i8**%q,i64 2
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%e,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%g,align 8
%D=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%E=bitcast i8*%A to i8**
store i8*%D,i8**%E,align 8
%F=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%G=getelementptr inbounds i8,i8*%A,i64 8
%H=bitcast i8*%G to i8**
store i8*%F,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%A,i64 16
%J=bitcast i8*%I to i32*
store i32 3,i32*%J,align 4
%K=call i8*@sml_alloc(i32 inreg 28)#0
%L=getelementptr inbounds i8,i8*%K,i64 -4
%M=bitcast i8*%L to i32*
store i32 1342177304,i32*%M,align 4
store i8*%K,i8**%d,align 8
%N=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%O=bitcast i8*%K to i8**
store i8*%N,i8**%O,align 8
%P=getelementptr inbounds i8,i8*%K,i64 8
%Q=bitcast i8*%P to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatRecordTyE_476 to void(...)*),void(...)**%Q,align 8
%R=getelementptr inbounds i8,i8*%K,i64 16
%S=bitcast i8*%R to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatRecordTyE_476 to void(...)*),void(...)**%S,align 8
%T=getelementptr inbounds i8,i8*%K,i64 24
%U=bitcast i8*%T to i32*
store i32 -2147483647,i32*%U,align 4
%V=load i8*,i8**%c,align 8
%W=getelementptr inbounds i8,i8*%V,i64 8
%X=bitcast i8*%W to i8**
%Y=load i8*,i8**%X,align 8
store i8*%Y,i8**%c,align 8
%Z=call i8*@sml_alloc(i32 inreg 20)#0
%aa=getelementptr inbounds i8,i8*%Z,i64 -4
%ab=bitcast i8*%aa to i32*
store i32 1342177296,i32*%ab,align 4
%ac=load i8*,i8**%d,align 8
%ad=bitcast i8*%Z to i8**
store i8*%ac,i8**%ad,align 8
%ae=load i8*,i8**%c,align 8
%af=getelementptr inbounds i8,i8*%Z,i64 8
%ag=bitcast i8*%af to i8**
store i8*%ae,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%Z,i64 16
%ai=bitcast i8*%ah to i32*
store i32 3,i32*%ai,align 4
%aj=load i8*,i8**%f,align 8
%ak=tail call fastcc i8*%u(i8*inreg%aj,i8*inreg%Z)
ret i8*%ak
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatRecordTyE_478(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
store i8*%l,i8**%f,align 8
%o=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%r=getelementptr inbounds i8,i8*%l,i64 8
%s=bitcast i8*%r to i8**
store i8*%q,i8**%s,align 8
%t=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%u=getelementptr inbounds i8,i8*%l,i64 16
%v=bitcast i8*%u to i8**
store i8*%t,i8**%v,align 8
%w=getelementptr inbounds i8,i8*%l,i64 24
%x=bitcast i8*%w to i32*
store i32 7,i32*%x,align 4
%y=call i8*@sml_alloc(i32 inreg 28)#0
%z=getelementptr inbounds i8,i8*%y,i64 -4
%A=bitcast i8*%z to i32*
store i32 1342177304,i32*%A,align 4
%B=load i8*,i8**%f,align 8
%C=bitcast i8*%y to i8**
store i8*%B,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%y,i64 8
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatRecordTyE_477 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%y,i64 16
%G=bitcast i8*%F to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatRecordTyE_477 to void(...)*),void(...)**%G,align 8
%H=getelementptr inbounds i8,i8*%y,i64 24
%I=bitcast i8*%H to i32*
store i32 -2147483647,i32*%I,align 4
ret i8*%y
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatRecordTyE_479(i8*inreg%a)#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i8**
%f=load i8*,i8**%e,align 8
store i8*%f,i8**%b,align 8
%g=getelementptr inbounds i8,i8*%a,i64 8
%h=bitcast i8*%g to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%c,align 8
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i8**
store i8*%o,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%j,i64 16
%s=bitcast i8*%r to i32*
store i32 3,i32*%s,align 4
%t=call i8*@sml_alloc(i32 inreg 28)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177304,i32*%v,align 4
%w=load i8*,i8**%d,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatRecordTyE_478 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%t,i64 16
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatRecordTyE_478 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%t,i64 24
%D=bitcast i8*%C to i32*
store i32 -2147483647,i32*%D,align 4
ret i8*%t
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatRecordTyE_485(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%b,i8**%c,align 8
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=getelementptr inbounds i8,i8*%h,i64 4
%l=bitcast i8*%k to i32*
store i32 0,i32*%l,align 1
%m=bitcast i8*%h to i32*
store i32 4,i32*%m,align 4
%n=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%o=getelementptr inbounds i8,i8*%h,i64 8
%p=bitcast i8*%o to i8**
store i8*%n,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 2,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 20)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177296,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=load i8*,i8**%c,align 8
%y=getelementptr inbounds i8,i8*%s,i64 8
%z=bitcast i8*%y to i8**
store i8*%x,i8**%z,align 8
%A=getelementptr inbounds i8,i8*%s,i64 16
%B=bitcast i8*%A to i32*
store i32 3,i32*%B,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatRecordTyE_486(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%f=call i8*@sml_alloc(i32 inreg 20)#0
%g=getelementptr inbounds i8,i8*%f,i64 -4
%h=bitcast i8*%g to i32*
store i32 1342177296,i32*%h,align 4
store i8*%f,i8**%d,align 8
%i=bitcast i8*%f to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@e,i64 0,i32 2)to i8*),i8**%i,align 8
%j=load i8*,i8**%c,align 8
%k=getelementptr inbounds i8,i8*%f,i64 8
%l=bitcast i8*%k to i8**
store i8*%j,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%f,i64 16
%n=bitcast i8*%m to i32*
store i32 3,i32*%n,align 4
%o=bitcast i8**%e to i8***
%p=load i8**,i8***%o,align 8
store i8*null,i8**%e,align 8
%q=load i8*,i8**%p,align 8
store i8*%q,i8**%c,align 8
%r=call i8*@sml_alloc(i32 inreg 20)#0
%s=getelementptr inbounds i8,i8*%r,i64 -4
%t=bitcast i8*%s to i32*
store i32 1342177296,i32*%t,align 4
store i8*%r,i8**%e,align 8
%u=getelementptr inbounds i8,i8*%r,i64 4
%v=bitcast i8*%u to i32*
store i32 0,i32*%v,align 1
%w=bitcast i8*%r to i32*
store i32 4,i32*%w,align 4
%x=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%y=getelementptr inbounds i8,i8*%r,i64 8
%z=bitcast i8*%y to i8**
store i8*%x,i8**%z,align 8
%A=getelementptr inbounds i8,i8*%r,i64 16
%B=bitcast i8*%A to i32*
store i32 2,i32*%B,align 4
%C=call i8*@sml_alloc(i32 inreg 20)#0
%D=getelementptr inbounds i8,i8*%C,i64 -4
%E=bitcast i8*%D to i32*
store i32 1342177296,i32*%E,align 4
%F=load i8*,i8**%e,align 8
%G=bitcast i8*%C to i8**
store i8*%F,i8**%G,align 8
%H=load i8*,i8**%d,align 8
%I=getelementptr inbounds i8,i8*%C,i64 8
%J=bitcast i8*%I to i8**
store i8*%H,i8**%J,align 8
%K=getelementptr inbounds i8,i8*%C,i64 16
%L=bitcast i8*%K to i32*
store i32 3,i32*%L,align 4
ret i8*%C
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatRecordTyE_489(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%g=call i8*@sml_alloc(i32 inreg 20)#0
%h=getelementptr inbounds i8,i8*%g,i64 -4
%i=bitcast i8*%h to i32*
store i32 1342177296,i32*%i,align 4
store i8*%g,i8**%e,align 8
%j=getelementptr inbounds i8,i8*%g,i64 4
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 1
%l=bitcast i8*%g to i32*
store i32 1,i32*%l,align 4
%m=getelementptr inbounds i8,i8*%g,i64 8
%n=bitcast i8*%m to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@aF,i64 0,i32 2,i64 0),i8**%n,align 8
%o=getelementptr inbounds i8,i8*%g,i64 16
%p=bitcast i8*%o to i32*
store i32 2,i32*%p,align 4
%q=call i8*@sml_alloc(i32 inreg 20)#0
%r=getelementptr inbounds i8,i8*%q,i64 -4
%s=bitcast i8*%r to i32*
store i32 1342177296,i32*%s,align 4
store i8*%q,i8**%f,align 8
%t=getelementptr inbounds i8,i8*%q,i64 4
%u=bitcast i8*%t to i32*
store i32 0,i32*%u,align 1
%v=bitcast i8*%q to i32*
store i32 6,i32*%v,align 4
%w=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%x=getelementptr inbounds i8,i8*%q,i64 8
%y=bitcast i8*%x to i8**
store i8*%w,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%q,i64 16
%A=bitcast i8*%z to i32*
store i32 2,i32*%A,align 4
%B=call i8*@sml_alloc(i32 inreg 20)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177296,i32*%D,align 4
store i8*%B,i8**%e,align 8
%E=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%F=bitcast i8*%B to i8**
store i8*%E,i8**%F,align 8
%G=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%H=getelementptr inbounds i8,i8*%B,i64 8
%I=bitcast i8*%H to i8**
store i8*%G,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%B,i64 16
%K=bitcast i8*%J to i32*
store i32 3,i32*%K,align 4
%L=call i8*@sml_alloc(i32 inreg 20)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32 1342177296,i32*%N,align 4
store i8*%L,i8**%c,align 8
%O=bitcast i8*%L to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@e,i64 0,i32 2)to i8*),i8**%O,align 8
%P=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%Q=getelementptr inbounds i8,i8*%L,i64 8
%R=bitcast i8*%Q to i8**
store i8*%P,i8**%R,align 8
%S=getelementptr inbounds i8,i8*%L,i64 16
%T=bitcast i8*%S to i32*
store i32 3,i32*%T,align 4
%U=bitcast i8**%d to i8***
%V=load i8**,i8***%U,align 8
%W=load i8*,i8**%V,align 8
store i8*%W,i8**%d,align 8
%X=call i8*@sml_alloc(i32 inreg 20)#0
%Y=getelementptr inbounds i8,i8*%X,i64 -4
%Z=bitcast i8*%Y to i32*
store i32 1342177296,i32*%Z,align 4
store i8*%X,i8**%e,align 8
%aa=getelementptr inbounds i8,i8*%X,i64 4
%ab=bitcast i8*%aa to i32*
store i32 0,i32*%ab,align 1
%ac=bitcast i8*%X to i32*
store i32 4,i32*%ac,align 4
%ad=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ae=getelementptr inbounds i8,i8*%X,i64 8
%af=bitcast i8*%ae to i8**
store i8*%ad,i8**%af,align 8
%ag=getelementptr inbounds i8,i8*%X,i64 16
%ah=bitcast i8*%ag to i32*
store i32 2,i32*%ah,align 4
%ai=call i8*@sml_alloc(i32 inreg 20)#0
%aj=getelementptr inbounds i8,i8*%ai,i64 -4
%ak=bitcast i8*%aj to i32*
store i32 1342177296,i32*%ak,align 4
%al=load i8*,i8**%e,align 8
%am=bitcast i8*%ai to i8**
store i8*%al,i8**%am,align 8
%an=load i8*,i8**%c,align 8
%ao=getelementptr inbounds i8,i8*%ai,i64 8
%ap=bitcast i8*%ao to i8**
store i8*%an,i8**%ap,align 8
%aq=getelementptr inbounds i8,i8*%ai,i64 16
%ar=bitcast i8*%aq to i32*
store i32 3,i32*%ar,align 4
ret i8*%ai
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatRecordTyE_492(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%d,align 8
%k=bitcast i8*%h to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@i,i64 0,i32 2)to i8*),i8**%k,align 8
%l=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i8**
store i8*%l,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%h,i64 16
%p=bitcast i8*%o to i32*
store i32 3,i32*%p,align 4
%q=call i8*@sml_alloc(i32 inreg 20)#0
%r=getelementptr inbounds i8,i8*%q,i64 -4
%s=bitcast i8*%r to i32*
store i32 1342177296,i32*%s,align 4
store i8*%q,i8**%c,align 8
%t=getelementptr inbounds i8,i8*%q,i64 4
%u=bitcast i8*%t to i32*
store i32 0,i32*%u,align 1
%v=bitcast i8*%q to i32*
store i32 1,i32*%v,align 4
%w=getelementptr inbounds i8,i8*%q,i64 8
%x=bitcast i8*%w to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@aF,i64 0,i32 2,i64 0),i8**%x,align 8
%y=getelementptr inbounds i8,i8*%q,i64 16
%z=bitcast i8*%y to i32*
store i32 2,i32*%z,align 4
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%f,align 8
%D=getelementptr inbounds i8,i8*%A,i64 4
%E=bitcast i8*%D to i32*
store i32 0,i32*%E,align 1
%F=bitcast i8*%A to i32*
store i32 6,i32*%F,align 4
%G=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%H=getelementptr inbounds i8,i8*%A,i64 8
%I=bitcast i8*%H to i8**
store i8*%G,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%A,i64 16
%K=bitcast i8*%J to i32*
store i32 2,i32*%K,align 4
%L=call i8*@sml_alloc(i32 inreg 20)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32 1342177296,i32*%N,align 4
store i8*%L,i8**%g,align 8
%O=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%P=bitcast i8*%L to i8**
store i8*%O,i8**%P,align 8
%Q=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%R=getelementptr inbounds i8,i8*%L,i64 8
%S=bitcast i8*%R to i8**
store i8*%Q,i8**%S,align 8
%T=getelementptr inbounds i8,i8*%L,i64 16
%U=bitcast i8*%T to i32*
store i32 3,i32*%U,align 4
%V=call i8*@sml_alloc(i32 inreg 20)#0
%W=getelementptr inbounds i8,i8*%V,i64 -4
%X=bitcast i8*%W to i32*
store i32 1342177296,i32*%X,align 4
store i8*%V,i8**%c,align 8
%Y=bitcast i8*%V to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@e,i64 0,i32 2)to i8*),i8**%Y,align 8
%Z=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%aa=getelementptr inbounds i8,i8*%V,i64 8
%ab=bitcast i8*%aa to i8**
store i8*%Z,i8**%ab,align 8
%ac=getelementptr inbounds i8,i8*%V,i64 16
%ad=bitcast i8*%ac to i32*
store i32 3,i32*%ad,align 4
%ae=bitcast i8**%e to i8***
%af=load i8**,i8***%ae,align 8
store i8*null,i8**%e,align 8
%ag=load i8*,i8**%af,align 8
store i8*%ag,i8**%d,align 8
%ah=call i8*@sml_alloc(i32 inreg 20)#0
%ai=getelementptr inbounds i8,i8*%ah,i64 -4
%aj=bitcast i8*%ai to i32*
store i32 1342177296,i32*%aj,align 4
store i8*%ah,i8**%e,align 8
%ak=getelementptr inbounds i8,i8*%ah,i64 4
%al=bitcast i8*%ak to i32*
store i32 0,i32*%al,align 1
%am=bitcast i8*%ah to i32*
store i32 4,i32*%am,align 4
%an=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ao=getelementptr inbounds i8,i8*%ah,i64 8
%ap=bitcast i8*%ao to i8**
store i8*%an,i8**%ap,align 8
%aq=getelementptr inbounds i8,i8*%ah,i64 16
%ar=bitcast i8*%aq to i32*
store i32 2,i32*%ar,align 4
%as=call i8*@sml_alloc(i32 inreg 20)#0
%at=getelementptr inbounds i8,i8*%as,i64 -4
%au=bitcast i8*%at to i32*
store i32 1342177296,i32*%au,align 4
%av=load i8*,i8**%e,align 8
%aw=bitcast i8*%as to i8**
store i8*%av,i8**%aw,align 8
%ax=load i8*,i8**%c,align 8
%ay=getelementptr inbounds i8,i8*%as,i64 8
%az=bitcast i8*%ay to i8**
store i8*%ax,i8**%az,align 8
%aA=getelementptr inbounds i8,i8*%as,i64 16
%aB=bitcast i8*%aA to i32*
store i32 3,i32*%aB,align 4
ret i8*%as
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatRecordTyE_495(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%e,align 8
%i=call i8*@sml_alloc(i32 inreg 20)#0
%j=getelementptr inbounds i8,i8*%i,i64 -4
%k=bitcast i8*%j to i32*
store i32 1342177296,i32*%k,align 4
store i8*%i,i8**%f,align 8
%l=getelementptr inbounds i8,i8*%i,i64 4
%m=bitcast i8*%l to i32*
store i32 0,i32*%m,align 1
%n=bitcast i8*%i to i32*
store i32 4,i32*%n,align 4
%o=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%p=getelementptr inbounds i8,i8*%i,i64 8
%q=bitcast i8*%p to i8**
store i8*%o,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%i,i64 16
%s=bitcast i8*%r to i32*
store i32 2,i32*%s,align 4
%t=call i8*@sml_alloc(i32 inreg 20)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177296,i32*%v,align 4
store i8*%t,i8**%e,align 8
%w=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%z=getelementptr inbounds i8,i8*%t,i64 8
%A=bitcast i8*%z to i8**
store i8*%y,i8**%A,align 8
%B=getelementptr inbounds i8,i8*%t,i64 16
%C=bitcast i8*%B to i32*
store i32 3,i32*%C,align 4
%D=call i8*@sml_alloc(i32 inreg 20)#0
%E=getelementptr inbounds i8,i8*%D,i64 -4
%F=bitcast i8*%E to i32*
store i32 1342177296,i32*%F,align 4
store i8*%D,i8**%c,align 8
%G=bitcast i8*%D to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@i,i64 0,i32 2)to i8*),i8**%G,align 8
%H=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%I=getelementptr inbounds i8,i8*%D,i64 8
%J=bitcast i8*%I to i8**
store i8*%H,i8**%J,align 8
%K=getelementptr inbounds i8,i8*%D,i64 16
%L=bitcast i8*%K to i32*
store i32 3,i32*%L,align 4
%M=call i8*@sml_alloc(i32 inreg 20)#0
%N=getelementptr inbounds i8,i8*%M,i64 -4
%O=bitcast i8*%N to i32*
store i32 1342177296,i32*%O,align 4
store i8*%M,i8**%e,align 8
%P=getelementptr inbounds i8,i8*%M,i64 4
%Q=bitcast i8*%P to i32*
store i32 0,i32*%Q,align 1
%R=bitcast i8*%M to i32*
store i32 1,i32*%R,align 4
%S=getelementptr inbounds i8,i8*%M,i64 8
%T=bitcast i8*%S to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@aF,i64 0,i32 2,i64 0),i8**%T,align 8
%U=getelementptr inbounds i8,i8*%M,i64 16
%V=bitcast i8*%U to i32*
store i32 2,i32*%V,align 4
%W=call i8*@sml_alloc(i32 inreg 20)#0
%X=getelementptr inbounds i8,i8*%W,i64 -4
%Y=bitcast i8*%X to i32*
store i32 1342177296,i32*%Y,align 4
store i8*%W,i8**%f,align 8
%Z=getelementptr inbounds i8,i8*%W,i64 4
%aa=bitcast i8*%Z to i32*
store i32 0,i32*%aa,align 1
%ab=bitcast i8*%W to i32*
store i32 6,i32*%ab,align 4
%ac=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%ad=getelementptr inbounds i8,i8*%W,i64 8
%ae=bitcast i8*%ad to i8**
store i8*%ac,i8**%ae,align 8
%af=getelementptr inbounds i8,i8*%W,i64 16
%ag=bitcast i8*%af to i32*
store i32 2,i32*%ag,align 4
%ah=call i8*@sml_alloc(i32 inreg 20)#0
%ai=getelementptr inbounds i8,i8*%ah,i64 -4
%aj=bitcast i8*%ai to i32*
store i32 1342177296,i32*%aj,align 4
store i8*%ah,i8**%e,align 8
%ak=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%al=bitcast i8*%ah to i8**
store i8*%ak,i8**%al,align 8
%am=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%an=getelementptr inbounds i8,i8*%ah,i64 8
%ao=bitcast i8*%an to i8**
store i8*%am,i8**%ao,align 8
%ap=getelementptr inbounds i8,i8*%ah,i64 16
%aq=bitcast i8*%ap to i32*
store i32 3,i32*%aq,align 4
%ar=call i8*@sml_alloc(i32 inreg 20)#0
%as=getelementptr inbounds i8,i8*%ar,i64 -4
%at=bitcast i8*%as to i32*
store i32 1342177296,i32*%at,align 4
store i8*%ar,i8**%c,align 8
%au=bitcast i8*%ar to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@e,i64 0,i32 2)to i8*),i8**%au,align 8
%av=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aw=getelementptr inbounds i8,i8*%ar,i64 8
%ax=bitcast i8*%aw to i8**
store i8*%av,i8**%ax,align 8
%ay=getelementptr inbounds i8,i8*%ar,i64 16
%az=bitcast i8*%ay to i32*
store i32 3,i32*%az,align 4
%aA=load i8*,i8**%d,align 8
%aB=getelementptr inbounds i8,i8*%aA,i64 8
%aC=bitcast i8*%aB to i8**
%aD=load i8*,i8**%aC,align 8
store i8*%aD,i8**%d,align 8
%aE=call i8*@sml_alloc(i32 inreg 20)#0
%aF=getelementptr inbounds i8,i8*%aE,i64 -4
%aG=bitcast i8*%aF to i32*
store i32 1342177296,i32*%aG,align 4
store i8*%aE,i8**%e,align 8
%aH=getelementptr inbounds i8,i8*%aE,i64 4
%aI=bitcast i8*%aH to i32*
store i32 0,i32*%aI,align 1
%aJ=bitcast i8*%aE to i32*
store i32 4,i32*%aJ,align 4
%aK=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aL=getelementptr inbounds i8,i8*%aE,i64 8
%aM=bitcast i8*%aL to i8**
store i8*%aK,i8**%aM,align 8
%aN=getelementptr inbounds i8,i8*%aE,i64 16
%aO=bitcast i8*%aN to i32*
store i32 2,i32*%aO,align 4
%aP=call i8*@sml_alloc(i32 inreg 20)#0
%aQ=getelementptr inbounds i8,i8*%aP,i64 -4
%aR=bitcast i8*%aQ to i32*
store i32 1342177296,i32*%aR,align 4
%aS=load i8*,i8**%e,align 8
%aT=bitcast i8*%aP to i8**
store i8*%aS,i8**%aT,align 8
%aU=load i8*,i8**%c,align 8
%aV=getelementptr inbounds i8,i8*%aP,i64 8
%aW=bitcast i8*%aV to i8**
store i8*%aU,i8**%aW,align 8
%aX=getelementptr inbounds i8,i8*%aP,i64 16
%aY=bitcast i8*%aX to i32*
store i32 3,i32*%aY,align 4
ret i8*%aP
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatRecordTyE_498(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
m:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%k,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%d,align 8
br label%k
k:
%l=phi i8*[%j,%i],[%a,%m]
%n=getelementptr inbounds i8,i8*%l,i64 12
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=add i32%p,-1
%r=sub i32 0,%p
%s=and i32%q,%r
%t=add i32%p,7
%u=add i32%t,%s
%v=and i32%u,-8
%w=getelementptr inbounds i8,i8*%l,i64 8
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=icmp eq i32%y,0
br i1%z,label%H,label%A
A:
%B=bitcast i8*%l to i8**
%C=load i8*,i8**%c,align 8
%D=sext i32%s to i64
%E=getelementptr inbounds i8,i8*%C,i64%D
%F=bitcast i8*%E to i8**
%G=load i8*,i8**%F,align 8
br label%Q
H:
%I=call i8*@sml_alloc(i32 inreg%p)#0
%J=getelementptr inbounds i8,i8*%I,i64 -4
%K=bitcast i8*%J to i32*
store i32%p,i32*%K,align 4
%L=load i8*,i8**%c,align 8
%M=sext i32%s to i64
%N=getelementptr inbounds i8,i8*%L,i64%M
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%I,i8*%N,i32%p,i1 false)
%O=bitcast i8**%d to i8***
%P=load i8**,i8***%O,align 8
br label%Q
Q:
%R=phi i8**[%B,%A],[%P,%H]
%S=phi i8*[%C,%A],[%L,%H]
%T=phi i8*[%G,%A],[%I,%H]
%U=sext i32%v to i64
%V=getelementptr inbounds i8,i8*%S,i64%U
%W=bitcast i8*%V to i8**
%X=load i8*,i8**%W,align 8
store i8*%X,i8**%c,align 8
%Y=icmp eq i8*%X,null
%Z=load i8*,i8**%R,align 8
%aa=getelementptr inbounds i8,i8*%Z,i64 16
%ab=bitcast i8*%aa to void(...)**
%ac=load void(...)*,void(...)**%ab,align 8
br i1%Y,label%ad,label%ai
ad:
%ae=bitcast i8*%Z to i8**
%af=load i8*,i8**%ae,align 8
%ag=bitcast void(...)*%ac to i8*(i8*,i8*)*
%ah=tail call fastcc i8*%ag(i8*inreg%af,i8*inreg%T)
ret i8*%ah
ai:
store i8*null,i8**%d,align 8
%aj=bitcast i8**%R to i8***
%ak=load i8**,i8***%aj,align 8
%al=load i8*,i8**%ak,align 8
%am=bitcast void(...)*%ac to i8*(i8*,i8*)*
%an=call fastcc i8*%am(i8*inreg%al,i8*inreg%T)
store i8*%an,i8**%d,align 8
%ao=call i8*@sml_alloc(i32 inreg 12)#0
%ap=getelementptr inbounds i8,i8*%ao,i64 -4
%aq=bitcast i8*%ap to i32*
store i32 1342177288,i32*%aq,align 4
store i8*%ao,i8**%e,align 8
%ar=load i8*,i8**%d,align 8
%as=bitcast i8*%ao to i8**
store i8*%ar,i8**%as,align 8
%at=getelementptr inbounds i8,i8*%ao,i64 8
%au=bitcast i8*%at to i32*
store i32 1,i32*%au,align 4
%av=call i8*@sml_alloc(i32 inreg 28)#0
%aw=getelementptr inbounds i8,i8*%av,i64 -4
%ax=bitcast i8*%aw to i32*
store i32 1342177304,i32*%ax,align 4
%ay=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%az=bitcast i8*%av to i8**
store i8*%ay,i8**%az,align 8
%aA=getelementptr inbounds i8,i8*%av,i64 8
%aB=bitcast i8*%aA to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatRecordTyE_485 to void(...)*),void(...)**%aB,align 8
%aC=getelementptr inbounds i8,i8*%av,i64 16
%aD=bitcast i8*%aC to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatRecordTyE_485 to void(...)*),void(...)**%aD,align 8
%aE=getelementptr inbounds i8,i8*%av,i64 24
%aF=bitcast i8*%aE to i32*
store i32 -2147483647,i32*%aF,align 4
%aG=call i8*@sml_alloc(i32 inreg 12)#0
%aH=getelementptr inbounds i8,i8*%aG,i64 -4
%aI=bitcast i8*%aH to i32*
store i32 1342177288,i32*%aI,align 4
store i8*%aG,i8**%e,align 8
%aJ=load i8*,i8**%d,align 8
%aK=bitcast i8*%aG to i8**
store i8*%aJ,i8**%aK,align 8
%aL=getelementptr inbounds i8,i8*%aG,i64 8
%aM=bitcast i8*%aL to i32*
store i32 1,i32*%aM,align 4
%aN=call i8*@sml_alloc(i32 inreg 28)#0
%aO=getelementptr inbounds i8,i8*%aN,i64 -4
%aP=bitcast i8*%aO to i32*
store i32 1342177304,i32*%aP,align 4
%aQ=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aR=bitcast i8*%aN to i8**
store i8*%aQ,i8**%aR,align 8
%aS=getelementptr inbounds i8,i8*%aN,i64 8
%aT=bitcast i8*%aS to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatRecordTyE_486 to void(...)*),void(...)**%aT,align 8
%aU=getelementptr inbounds i8,i8*%aN,i64 16
%aV=bitcast i8*%aU to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatRecordTyE_486 to void(...)*),void(...)**%aV,align 8
%aW=getelementptr inbounds i8,i8*%aN,i64 24
%aX=bitcast i8*%aW to i32*
store i32 -2147483647,i32*%aX,align 4
%aY=call i8*@sml_alloc(i32 inreg 12)#0
%aZ=getelementptr inbounds i8,i8*%aY,i64 -4
%a0=bitcast i8*%aZ to i32*
store i32 1342177288,i32*%a0,align 4
store i8*%aY,i8**%e,align 8
%a1=load i8*,i8**%d,align 8
%a2=bitcast i8*%aY to i8**
store i8*%a1,i8**%a2,align 8
%a3=getelementptr inbounds i8,i8*%aY,i64 8
%a4=bitcast i8*%a3 to i32*
store i32 1,i32*%a4,align 4
%a5=call i8*@sml_alloc(i32 inreg 28)#0
%a6=getelementptr inbounds i8,i8*%a5,i64 -4
%a7=bitcast i8*%a6 to i32*
store i32 1342177304,i32*%a7,align 4
%a8=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%a9=bitcast i8*%a5 to i8**
store i8*%a8,i8**%a9,align 8
%ba=getelementptr inbounds i8,i8*%a5,i64 8
%bb=bitcast i8*%ba to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatRecordTyE_489 to void(...)*),void(...)**%bb,align 8
%bc=getelementptr inbounds i8,i8*%a5,i64 16
%bd=bitcast i8*%bc to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatRecordTyE_489 to void(...)*),void(...)**%bd,align 8
%be=getelementptr inbounds i8,i8*%a5,i64 24
%bf=bitcast i8*%be to i32*
store i32 -2147483647,i32*%bf,align 4
%bg=call i8*@sml_alloc(i32 inreg 12)#0
%bh=getelementptr inbounds i8,i8*%bg,i64 -4
%bi=bitcast i8*%bh to i32*
store i32 1342177288,i32*%bi,align 4
store i8*%bg,i8**%e,align 8
%bj=load i8*,i8**%d,align 8
%bk=bitcast i8*%bg to i8**
store i8*%bj,i8**%bk,align 8
%bl=getelementptr inbounds i8,i8*%bg,i64 8
%bm=bitcast i8*%bl to i32*
store i32 1,i32*%bm,align 4
%bn=call i8*@sml_alloc(i32 inreg 28)#0
%bo=getelementptr inbounds i8,i8*%bn,i64 -4
%bp=bitcast i8*%bo to i32*
store i32 1342177304,i32*%bp,align 4
%bq=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%br=bitcast i8*%bn to i8**
store i8*%bq,i8**%br,align 8
%bs=getelementptr inbounds i8,i8*%bn,i64 8
%bt=bitcast i8*%bs to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatRecordTyE_492 to void(...)*),void(...)**%bt,align 8
%bu=getelementptr inbounds i8,i8*%bn,i64 16
%bv=bitcast i8*%bu to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatRecordTyE_492 to void(...)*),void(...)**%bv,align 8
%bw=getelementptr inbounds i8,i8*%bn,i64 24
%bx=bitcast i8*%bw to i32*
store i32 -2147483647,i32*%bx,align 4
%by=call i8*@sml_alloc(i32 inreg 20)#0
%bz=getelementptr inbounds i8,i8*%by,i64 -4
%bA=bitcast i8*%bz to i32*
store i32 1342177296,i32*%bA,align 4
store i8*%by,i8**%e,align 8
%bB=load i8*,i8**%c,align 8
%bC=bitcast i8*%by to i8**
store i8*%bB,i8**%bC,align 8
%bD=load i8*,i8**%d,align 8
%bE=getelementptr inbounds i8,i8*%by,i64 8
%bF=bitcast i8*%bE to i8**
store i8*%bD,i8**%bF,align 8
%bG=getelementptr inbounds i8,i8*%by,i64 16
%bH=bitcast i8*%bG to i32*
store i32 3,i32*%bH,align 4
%bI=call i8*@sml_alloc(i32 inreg 28)#0
%bJ=getelementptr inbounds i8,i8*%bI,i64 -4
%bK=bitcast i8*%bJ to i32*
store i32 1342177304,i32*%bK,align 4
%bL=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bM=bitcast i8*%bI to i8**
store i8*%bL,i8**%bM,align 8
%bN=getelementptr inbounds i8,i8*%bI,i64 8
%bO=bitcast i8*%bN to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatRecordTyE_495 to void(...)*),void(...)**%bO,align 8
%bP=getelementptr inbounds i8,i8*%bI,i64 16
%bQ=bitcast i8*%bP to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatRecordTyE_495 to void(...)*),void(...)**%bQ,align 8
%bR=getelementptr inbounds i8,i8*%bI,i64 24
%bS=bitcast i8*%bR to i32*
store i32 -2147483647,i32*%bS,align 4
%bT=call i8*@sml_alloc(i32 inreg 20)#0
%bU=getelementptr inbounds i8,i8*%bT,i64 -4
%bV=bitcast i8*%bU to i32*
store i32 1342177296,i32*%bV,align 4
store i8*%bT,i8**%e,align 8
%bW=getelementptr inbounds i8,i8*%bT,i64 4
%bX=bitcast i8*%bW to i32*
store i32 0,i32*%bX,align 1
%bY=bitcast i8*%bT to i32*
store i32 4,i32*%bY,align 4
%bZ=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%b0=getelementptr inbounds i8,i8*%bT,i64 8
%b1=bitcast i8*%b0 to i8**
store i8*%bZ,i8**%b1,align 8
%b2=getelementptr inbounds i8,i8*%bT,i64 16
%b3=bitcast i8*%b2 to i32*
store i32 2,i32*%b3,align 4
%b4=call i8*@sml_alloc(i32 inreg 20)#0
%b5=getelementptr inbounds i8,i8*%b4,i64 -4
%b6=bitcast i8*%b5 to i32*
store i32 1342177296,i32*%b6,align 4
store i8*%b4,i8**%f,align 8
%b7=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%b8=bitcast i8*%b4 to i8**
store i8*%b7,i8**%b8,align 8
%b9=getelementptr inbounds i8,i8*%b4,i64 8
%ca=bitcast i8*%b9 to i8**
store i8*null,i8**%ca,align 8
%cb=getelementptr inbounds i8,i8*%b4,i64 16
%cc=bitcast i8*%cb to i32*
store i32 3,i32*%cc,align 4
%cd=call i8*@sml_alloc(i32 inreg 20)#0
%ce=getelementptr inbounds i8,i8*%cd,i64 -4
%cf=bitcast i8*%ce to i32*
store i32 1342177296,i32*%cf,align 4
store i8*%cd,i8**%c,align 8
%cg=bitcast i8*%cd to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@i,i64 0,i32 2)to i8*),i8**%cg,align 8
%ch=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%ci=getelementptr inbounds i8,i8*%cd,i64 8
%cj=bitcast i8*%ci to i8**
store i8*%ch,i8**%cj,align 8
%ck=getelementptr inbounds i8,i8*%cd,i64 16
%cl=bitcast i8*%ck to i32*
store i32 3,i32*%cl,align 4
%cm=call i8*@sml_alloc(i32 inreg 20)#0
%cn=getelementptr inbounds i8,i8*%cm,i64 -4
%co=bitcast i8*%cn to i32*
store i32 1342177296,i32*%co,align 4
store i8*%cm,i8**%e,align 8
%cp=getelementptr inbounds i8,i8*%cm,i64 4
%cq=bitcast i8*%cp to i32*
store i32 0,i32*%cq,align 1
%cr=bitcast i8*%cm to i32*
store i32 1,i32*%cr,align 4
%cs=getelementptr inbounds i8,i8*%cm,i64 8
%ct=bitcast i8*%cs to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@aF,i64 0,i32 2,i64 0),i8**%ct,align 8
%cu=getelementptr inbounds i8,i8*%cm,i64 16
%cv=bitcast i8*%cu to i32*
store i32 2,i32*%cv,align 4
%cw=call i8*@sml_alloc(i32 inreg 20)#0
%cx=getelementptr inbounds i8,i8*%cw,i64 -4
%cy=bitcast i8*%cx to i32*
store i32 1342177296,i32*%cy,align 4
store i8*%cw,i8**%f,align 8
%cz=getelementptr inbounds i8,i8*%cw,i64 4
%cA=bitcast i8*%cz to i32*
store i32 0,i32*%cA,align 1
%cB=bitcast i8*%cw to i32*
store i32 6,i32*%cB,align 4
%cC=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%cD=getelementptr inbounds i8,i8*%cw,i64 8
%cE=bitcast i8*%cD to i8**
store i8*%cC,i8**%cE,align 8
%cF=getelementptr inbounds i8,i8*%cw,i64 16
%cG=bitcast i8*%cF to i32*
store i32 2,i32*%cG,align 4
%cH=call i8*@sml_alloc(i32 inreg 20)#0
%cI=getelementptr inbounds i8,i8*%cH,i64 -4
%cJ=bitcast i8*%cI to i32*
store i32 1342177296,i32*%cJ,align 4
store i8*%cH,i8**%e,align 8
%cK=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%cL=bitcast i8*%cH to i8**
store i8*%cK,i8**%cL,align 8
%cM=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cN=getelementptr inbounds i8,i8*%cH,i64 8
%cO=bitcast i8*%cN to i8**
store i8*%cM,i8**%cO,align 8
%cP=getelementptr inbounds i8,i8*%cH,i64 16
%cQ=bitcast i8*%cP to i32*
store i32 3,i32*%cQ,align 4
%cR=call i8*@sml_alloc(i32 inreg 20)#0
%cS=getelementptr inbounds i8,i8*%cR,i64 -4
%cT=bitcast i8*%cS to i32*
store i32 1342177296,i32*%cT,align 4
store i8*%cR,i8**%c,align 8
%cU=bitcast i8*%cR to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@e,i64 0,i32 2)to i8*),i8**%cU,align 8
%cV=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%cW=getelementptr inbounds i8,i8*%cR,i64 8
%cX=bitcast i8*%cW to i8**
store i8*%cV,i8**%cX,align 8
%cY=getelementptr inbounds i8,i8*%cR,i64 16
%cZ=bitcast i8*%cY to i32*
store i32 3,i32*%cZ,align 4
%c0=call i8*@sml_alloc(i32 inreg 20)#0
%c1=getelementptr inbounds i8,i8*%c0,i64 -4
%c2=bitcast i8*%c1 to i32*
store i32 1342177296,i32*%c2,align 4
store i8*%c0,i8**%e,align 8
%c3=getelementptr inbounds i8,i8*%c0,i64 4
%c4=bitcast i8*%c3 to i32*
store i32 0,i32*%c4,align 1
%c5=bitcast i8*%c0 to i32*
store i32 4,i32*%c5,align 4
%c6=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%c7=getelementptr inbounds i8,i8*%c0,i64 8
%c8=bitcast i8*%c7 to i8**
store i8*%c6,i8**%c8,align 8
%c9=getelementptr inbounds i8,i8*%c0,i64 16
%da=bitcast i8*%c9 to i32*
store i32 2,i32*%da,align 4
%db=call i8*@sml_alloc(i32 inreg 20)#0
%dc=getelementptr inbounds i8,i8*%db,i64 -4
%dd=bitcast i8*%dc to i32*
store i32 1342177296,i32*%dd,align 4
%de=load i8*,i8**%e,align 8
%df=bitcast i8*%db to i8**
store i8*%de,i8**%df,align 8
%dg=load i8*,i8**%c,align 8
%dh=getelementptr inbounds i8,i8*%db,i64 8
%di=bitcast i8*%dh to i8**
store i8*%dg,i8**%di,align 8
%dj=getelementptr inbounds i8,i8*%db,i64 16
%dk=bitcast i8*%dj to i32*
store i32 3,i32*%dk,align 4
ret i8*%db
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatRecordTyE_499(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=bitcast i8*%h to i8**
%k=load i8*,i8**%j,align 8
%l=getelementptr inbounds i8,i8*%h,i64 8
%m=bitcast i8*%l to i8**
%n=load i8*,i8**%m,align 8
%o=getelementptr inbounds i8,i8*%n,i64 16
%p=bitcast i8*%o to i8*(i8*,i8*)**
%q=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%p,align 8
%r=bitcast i8*%n to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%b,align 8
%t=getelementptr inbounds i8,i8*%k,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%k to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
%A=tail call fastcc i8*%q(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatRecordTyE_501(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=bitcast i8*%h to i8**
%k=load i8*,i8**%j,align 8
%l=getelementptr inbounds i8,i8*%h,i64 8
%m=bitcast i8*%l to i8**
%n=load i8*,i8**%m,align 8
%o=getelementptr inbounds i8,i8*%n,i64 16
%p=bitcast i8*%o to i8*(i8*,i8*)**
%q=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%p,align 8
%r=bitcast i8*%n to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%b,align 8
%t=getelementptr inbounds i8,i8*%k,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%k to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
%A=tail call fastcc i8*%q(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatRecordTyE_503(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=bitcast i8*%h to i8**
%k=load i8*,i8**%j,align 8
%l=getelementptr inbounds i8,i8*%h,i64 8
%m=bitcast i8*%l to i8**
%n=load i8*,i8**%m,align 8
%o=getelementptr inbounds i8,i8*%n,i64 16
%p=bitcast i8*%o to i8*(i8*,i8*)**
%q=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%p,align 8
%r=bitcast i8*%n to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%b,align 8
%t=getelementptr inbounds i8,i8*%k,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%k to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
%A=tail call fastcc i8*%q(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatRecordTyE_505(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
q:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
store i8*%a,i8**%h,align 8
store i8*%b,i8**%i,align 8
%k=load atomic i32,i32*@sml_check_flag unordered,align 4
%l=icmp eq i32%k,0
br i1%l,label%o,label%m
m:
call void@sml_check(i32 inreg%k)
%n=load i8*,i8**%h,align 8
br label%o
o:
%p=phi i8*[%n,%m],[%a,%q]
%r=getelementptr inbounds i8,i8*%p,i64 8
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=getelementptr inbounds i8,i8*%p,i64 12
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=call fastcc i8*@_SMLFN11RecordLabel10isTupleMapE(i32 inreg%t,i32 inreg%w)
%y=getelementptr inbounds i8,i8*%x,i64 16
%z=bitcast i8*%y to i8*(i8*,i8*)**
%A=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%z,align 8
%B=bitcast i8*%x to i8**
%C=load i8*,i8**%B,align 8
%D=load i8*,i8**%i,align 8
%E=call fastcc i8*%A(i8*inreg%C,i8*inreg%D)
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
%H=icmp eq i32%G,0
br i1%H,label%b5,label%I
I:
%J=call fastcc i8*@_SMLLLN10TermFormat10FormatComb6guard__E_186(i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,i8*,i32}>,<{[4x i8],i32,i8*,i8*,i32}>*@aC,i64 0,i32 2)to i8*))
%K=getelementptr inbounds i8,i8*%J,i64 16
%L=bitcast i8*%K to i8*(i8*,i8*)**
%M=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%L,align 8
%N=bitcast i8*%J to i8**
%O=load i8*,i8**%N,align 8
%P=call fastcc i8*%M(i8*inreg%O,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,i32}>,<{[4x i8],i32,i8*,i32}>*@m,i64 0,i32 2)to i8*))
%Q=getelementptr inbounds i8,i8*%P,i64 16
%R=bitcast i8*%Q to i8*(i8*,i8*,i8*,i8*,i8*)**
%S=load i8*(i8*,i8*,i8*,i8*,i8*)*,i8*(i8*,i8*,i8*,i8*,i8*)**%R,align 8
%T=bitcast i8*%P to i8**
%U=load i8*,i8**%T,align 8
store i8*%U,i8**%c,align 8
%V=call i8*@sml_alloc(i32 inreg 4)#0
%W=bitcast i8*%V to i32*
%X=getelementptr inbounds i8,i8*%V,i64 -4
%Y=bitcast i8*%X to i32*
store i32 4,i32*%Y,align 4
store i8*%V,i8**%d,align 8
store i32 1,i32*%W,align 4
%Z=call i8*@sml_alloc(i32 inreg 4)#0
%aa=bitcast i8*%Z to i32*
%ab=getelementptr inbounds i8,i8*%Z,i64 -4
%ac=bitcast i8*%ab to i32*
store i32 4,i32*%ac,align 4
store i8*%Z,i8**%e,align 8
store i32 8,i32*%aa,align 4
%ad=call i8*@sml_alloc(i32 inreg 4)#0
%ae=bitcast i8*%ad to i32*
%af=getelementptr inbounds i8,i8*%ad,i64 -4
%ag=bitcast i8*%af to i32*
store i32 4,i32*%ag,align 4
store i8*%ad,i8**%f,align 8
store i32 1,i32*%ae,align 4
%ah=call i8*@sml_alloc(i32 inreg 4)#0
%ai=bitcast i8*%ah to i32*
%aj=getelementptr inbounds i8,i8*%ah,i64 -4
%ak=bitcast i8*%aj to i32*
store i32 4,i32*%ak,align 4
store i32 8,i32*%ai,align 4
%al=load i8*,i8**%c,align 8
%am=load i8*,i8**%d,align 8
%an=load i8*,i8**%e,align 8
%ao=load i8*,i8**%f,align 8
store i8*null,i8**%c,align 8
store i8*null,i8**%d,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%f,align 8
%ap=call fastcc i8*%S(i8*inreg%al,i8*inreg%am,i8*inreg%an,i8*inreg%ao,i8*inreg%ah)
%aq=getelementptr inbounds i8,i8*%ap,i64 16
%ar=bitcast i8*%aq to i8*(i8*,i8*)**
%as=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ar,align 8
%at=bitcast i8*%ap to i8**
%au=load i8*,i8**%at,align 8
%av=call fastcc i8*%as(i8*inreg%au,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aD,i64 0,i32 2)to i8*))
%aw=getelementptr inbounds i8,i8*%av,i64 16
%ax=bitcast i8*%aw to i8*(i8*,i8*)**
%ay=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ax,align 8
%az=bitcast i8*%av to i8**
%aA=load i8*,i8**%az,align 8
%aB=call fastcc i8*%ay(i8*inreg%aA,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,i32}>,<{[4x i8],i32,i8*,i32}>*@o,i64 0,i32 2)to i8*))
%aC=getelementptr inbounds i8,i8*%aB,i64 16
%aD=bitcast i8*%aC to i8*(i8*,i8*)**
%aE=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aD,align 8
%aF=bitcast i8*%aB to i8**
%aG=load i8*,i8**%aF,align 8
%aH=call fastcc i8*%aE(i8*inreg%aG,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aE,i64 0,i32 2)to i8*))
%aI=getelementptr inbounds i8,i8*%aH,i64 16
%aJ=bitcast i8*%aI to i8*(i8*,i8*)**
%aK=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aJ,align 8
%aL=bitcast i8*%aH to i8**
%aM=load i8*,i8**%aL,align 8
store i8*%aM,i8**%e,align 8
%aN=load i8*,i8**%h,align 8
%aO=getelementptr inbounds i8,i8*%aN,i64 8
%aP=bitcast i8*%aO to i32*
%aQ=load i32,i32*%aP,align 4
%aR=getelementptr inbounds i8,i8*%aN,i64 12
%aS=bitcast i8*%aR to i32*
%aT=load i32,i32*%aS,align 4
%aU=call fastcc i8*@_SMLFN11RecordLabel3Map5foldrE(i32 inreg%aQ,i32 inreg%aT,i32 inreg 1,i32 inreg 8)
%aV=getelementptr inbounds i8,i8*%aU,i64 16
%aW=bitcast i8*%aV to i8*(i8*,i8*)**
%aX=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aW,align 8
%aY=bitcast i8*%aU to i8**
%aZ=load i8*,i8**%aY,align 8
store i8*%aZ,i8**%d,align 8
%a0=bitcast i8**%h to i8***
%a1=load i8**,i8***%a0,align 8
%a2=load i8*,i8**%a1,align 8
store i8*%a2,i8**%c,align 8
%a3=bitcast i8**%a1 to i8*
%a4=getelementptr inbounds i8*,i8**%a1,i64 1
%a5=bitcast i8**%a4 to i32*
%a6=load i32,i32*%a5,align 4
store i8*null,i8**%h,align 8
%a7=getelementptr inbounds i8,i8*%a3,i64 12
%a8=bitcast i8*%a7 to i32*
%a9=load i32,i32*%a8,align 4
%ba=call i8*@sml_alloc(i32 inreg 20)#0
%bb=getelementptr inbounds i8,i8*%ba,i64 -4
%bc=bitcast i8*%bb to i32*
store i32 1342177296,i32*%bc,align 4
store i8*%ba,i8**%f,align 8
%bd=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%be=bitcast i8*%ba to i8**
store i8*%bd,i8**%be,align 8
%bf=getelementptr inbounds i8,i8*%ba,i64 8
%bg=bitcast i8*%bf to i32*
store i32%a6,i32*%bg,align 4
%bh=getelementptr inbounds i8,i8*%ba,i64 12
%bi=bitcast i8*%bh to i32*
store i32%a9,i32*%bi,align 4
%bj=getelementptr inbounds i8,i8*%ba,i64 16
%bk=bitcast i8*%bj to i32*
store i32 1,i32*%bk,align 4
%bl=call i8*@sml_alloc(i32 inreg 28)#0
%bm=getelementptr inbounds i8,i8*%bl,i64 -4
%bn=bitcast i8*%bm to i32*
store i32 1342177304,i32*%bn,align 4
%bo=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%bp=bitcast i8*%bl to i8**
store i8*%bo,i8**%bp,align 8
%bq=getelementptr inbounds i8,i8*%bl,i64 8
%br=bitcast i8*%bq to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatRecordTyE_498 to void(...)*),void(...)**%br,align 8
%bs=getelementptr inbounds i8,i8*%bl,i64 16
%bt=bitcast i8*%bs to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatRecordTyE_498 to void(...)*),void(...)**%bt,align 8
%bu=getelementptr inbounds i8,i8*%bl,i64 24
%bv=bitcast i8*%bu to i32*
store i32 -2147483647,i32*%bv,align 4
%bw=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bx=call fastcc i8*%aX(i8*inreg%bw,i8*inreg%bl)
%by=getelementptr inbounds i8,i8*%bx,i64 16
%bz=bitcast i8*%by to i8*(i8*,i8*)**
%bA=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bz,align 8
%bB=bitcast i8*%bx to i8**
%bC=load i8*,i8**%bB,align 8
%bD=call fastcc i8*%bA(i8*inreg%bC,i8*inreg null)
%bE=getelementptr inbounds i8,i8*%bD,i64 16
%bF=bitcast i8*%bE to i8*(i8*,i8*)**
%bG=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bF,align 8
%bH=bitcast i8*%bD to i8**
%bI=load i8*,i8**%bH,align 8
%bJ=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%bK=call fastcc i8*%bG(i8*inreg%bI,i8*inreg%bJ)
%bL=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bM=call fastcc i8*%aK(i8*inreg%bL,i8*inreg%bK)
%bN=getelementptr inbounds i8,i8*%bM,i64 16
%bO=bitcast i8*%bN to i8*(i8*,i8*)**
%bP=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bO,align 8
%bQ=bitcast i8*%bM to i8**
%bR=load i8*,i8**%bQ,align 8
%bS=call fastcc i8*%bP(i8*inreg%bR,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aG,i64 0,i32 2)to i8*))
%bT=getelementptr inbounds i8,i8*%bS,i64 16
%bU=bitcast i8*%bT to i8*(i8*,i8*)**
%bV=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bU,align 8
%bW=bitcast i8*%bS to i8**
%bX=load i8*,i8**%bW,align 8
%bY=call fastcc i8*%bV(i8*inreg%bX,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aH,i64 0,i32 2)to i8*))
%bZ=getelementptr inbounds i8,i8*%bY,i64 16
%b0=bitcast i8*%bZ to i8*(i8*,i8*)**
%b1=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%b0,align 8
%b2=bitcast i8*%bY to i8**
%b3=load i8*,i8**%b2,align 8
%b4=tail call fastcc i8*%b1(i8*inreg%b3,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aI,i64 0,i32 2)to i8*))
ret i8*%b4
b5:
%b6=call i8*@sml_alloc(i32 inreg 20)#0
%b7=getelementptr inbounds i8,i8*%b6,i64 -4
%b8=bitcast i8*%b7 to i32*
store i32 1342177296,i32*%b8,align 4
store i8*%b6,i8**%d,align 8
%b9=getelementptr inbounds i8,i8*%b6,i64 4
%ca=bitcast i8*%b9 to i32*
store i32 0,i32*%ca,align 1
%cb=bitcast i8*%b6 to i32*
store i32 1,i32*%cb,align 4
%cc=getelementptr inbounds i8,i8*%b6,i64 8
%cd=bitcast i8*%cc to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bb,i64 0,i32 2,i64 0),i8**%cd,align 8
%ce=getelementptr inbounds i8,i8*%b6,i64 16
%cf=bitcast i8*%ce to i32*
store i32 2,i32*%cf,align 4
%cg=call i8*@sml_alloc(i32 inreg 20)#0
%ch=getelementptr inbounds i8,i8*%cg,i64 -4
%ci=bitcast i8*%ch to i32*
store i32 1342177296,i32*%ci,align 4
store i8*%cg,i8**%c,align 8
%cj=getelementptr inbounds i8,i8*%cg,i64 4
%ck=bitcast i8*%cj to i32*
store i32 0,i32*%ck,align 1
%cl=bitcast i8*%cg to i32*
store i32 6,i32*%cl,align 4
%cm=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%cn=getelementptr inbounds i8,i8*%cg,i64 8
%co=bitcast i8*%cn to i8**
store i8*%cm,i8**%co,align 8
%cp=getelementptr inbounds i8,i8*%cg,i64 16
%cq=bitcast i8*%cp to i32*
store i32 2,i32*%cq,align 4
%cr=call i8*@sml_alloc(i32 inreg 20)#0
%cs=getelementptr inbounds i8,i8*%cr,i64 -4
%ct=bitcast i8*%cs to i32*
store i32 1342177296,i32*%ct,align 4
store i8*%cr,i8**%d,align 8
%cu=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cv=bitcast i8*%cr to i8**
store i8*%cu,i8**%cv,align 8
%cw=getelementptr inbounds i8,i8*%cr,i64 8
%cx=bitcast i8*%cw to i8**
store i8*null,i8**%cx,align 8
%cy=getelementptr inbounds i8,i8*%cr,i64 16
%cz=bitcast i8*%cy to i32*
store i32 3,i32*%cz,align 4
%cA=call i8*@sml_alloc(i32 inreg 20)#0
%cB=getelementptr inbounds i8,i8*%cA,i64 -4
%cC=bitcast i8*%cB to i32*
store i32 1342177296,i32*%cC,align 4
store i8*%cA,i8**%e,align 8
%cD=getelementptr inbounds i8,i8*%cA,i64 4
%cE=bitcast i8*%cD to i32*
store i32 0,i32*%cE,align 1
%cF=bitcast i8*%cA to i32*
store i32 1,i32*%cF,align 4
%cG=getelementptr inbounds i8,i8*%cA,i64 8
%cH=bitcast i8*%cG to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@aZ,i64 0,i32 2,i64 0),i8**%cH,align 8
%cI=getelementptr inbounds i8,i8*%cA,i64 16
%cJ=bitcast i8*%cI to i32*
store i32 2,i32*%cJ,align 4
%cK=call i8*@sml_alloc(i32 inreg 20)#0
%cL=getelementptr inbounds i8,i8*%cK,i64 -4
%cM=bitcast i8*%cL to i32*
store i32 1342177296,i32*%cM,align 4
store i8*%cK,i8**%c,align 8
%cN=getelementptr inbounds i8,i8*%cK,i64 4
%cO=bitcast i8*%cN to i32*
store i32 0,i32*%cO,align 1
%cP=bitcast i8*%cK to i32*
store i32 6,i32*%cP,align 4
%cQ=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%cR=getelementptr inbounds i8,i8*%cK,i64 8
%cS=bitcast i8*%cR to i8**
store i8*%cQ,i8**%cS,align 8
%cT=getelementptr inbounds i8,i8*%cK,i64 16
%cU=bitcast i8*%cT to i32*
store i32 2,i32*%cU,align 4
%cV=call i8*@sml_alloc(i32 inreg 20)#0
%cW=getelementptr inbounds i8,i8*%cV,i64 -4
%cX=bitcast i8*%cW to i32*
store i32 1342177296,i32*%cX,align 4
store i8*%cV,i8**%e,align 8
%cY=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cZ=bitcast i8*%cV to i8**
store i8*%cY,i8**%cZ,align 8
%c0=getelementptr inbounds i8,i8*%cV,i64 8
%c1=bitcast i8*%c0 to i8**
store i8*null,i8**%c1,align 8
%c2=getelementptr inbounds i8,i8*%cV,i64 16
%c3=bitcast i8*%c2 to i32*
store i32 3,i32*%c3,align 4
%c4=call i8*@sml_alloc(i32 inreg 20)#0
%c5=getelementptr inbounds i8,i8*%c4,i64 -4
%c6=bitcast i8*%c5 to i32*
store i32 1342177296,i32*%c6,align 4
store i8*%c4,i8**%f,align 8
%c7=getelementptr inbounds i8,i8*%c4,i64 4
%c8=bitcast i8*%c7 to i32*
store i32 0,i32*%c8,align 1
%c9=bitcast i8*%c4 to i32*
store i32 1,i32*%c9,align 4
%da=getelementptr inbounds i8,i8*%c4,i64 8
%db=bitcast i8*%da to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@aK,i64 0,i32 2,i64 0),i8**%db,align 8
%dc=getelementptr inbounds i8,i8*%c4,i64 16
%dd=bitcast i8*%dc to i32*
store i32 2,i32*%dd,align 4
%de=call i8*@sml_alloc(i32 inreg 20)#0
%df=getelementptr inbounds i8,i8*%de,i64 -4
%dg=bitcast i8*%df to i32*
store i32 1342177296,i32*%dg,align 4
store i8*%de,i8**%c,align 8
%dh=getelementptr inbounds i8,i8*%de,i64 4
%di=bitcast i8*%dh to i32*
store i32 0,i32*%di,align 1
%dj=bitcast i8*%de to i32*
store i32 6,i32*%dj,align 4
%dk=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%dl=getelementptr inbounds i8,i8*%de,i64 8
%dm=bitcast i8*%dl to i8**
store i8*%dk,i8**%dm,align 8
%dn=getelementptr inbounds i8,i8*%de,i64 16
%do=bitcast i8*%dn to i32*
store i32 2,i32*%do,align 4
%dp=call i8*@sml_alloc(i32 inreg 20)#0
%dq=getelementptr inbounds i8,i8*%dp,i64 -4
%dr=bitcast i8*%dq to i32*
store i32 1342177296,i32*%dr,align 4
store i8*%dp,i8**%f,align 8
%ds=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%dt=bitcast i8*%dp to i8**
store i8*%ds,i8**%dt,align 8
%du=getelementptr inbounds i8,i8*%dp,i64 8
%dv=bitcast i8*%du to i8**
store i8*null,i8**%dv,align 8
%dw=getelementptr inbounds i8,i8*%dp,i64 16
%dx=bitcast i8*%dw to i32*
store i32 3,i32*%dx,align 4
%dy=call i8*@sml_alloc(i32 inreg 20)#0
%dz=getelementptr inbounds i8,i8*%dy,i64 -4
%dA=bitcast i8*%dz to i32*
store i32 1342177296,i32*%dA,align 4
store i8*%dy,i8**%g,align 8
%dB=getelementptr inbounds i8,i8*%dy,i64 4
%dC=bitcast i8*%dB to i32*
store i32 0,i32*%dC,align 1
%dD=bitcast i8*%dy to i32*
store i32 1,i32*%dD,align 4
%dE=getelementptr inbounds i8,i8*%dy,i64 8
%dF=bitcast i8*%dE to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bf,i64 0,i32 2,i64 0),i8**%dF,align 8
%dG=getelementptr inbounds i8,i8*%dy,i64 16
%dH=bitcast i8*%dG to i32*
store i32 2,i32*%dH,align 4
%dI=call i8*@sml_alloc(i32 inreg 20)#0
%dJ=getelementptr inbounds i8,i8*%dI,i64 -4
%dK=bitcast i8*%dJ to i32*
store i32 1342177296,i32*%dK,align 4
store i8*%dI,i8**%c,align 8
%dL=getelementptr inbounds i8,i8*%dI,i64 4
%dM=bitcast i8*%dL to i32*
store i32 0,i32*%dM,align 1
%dN=bitcast i8*%dI to i32*
store i32 6,i32*%dN,align 4
%dO=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%dP=getelementptr inbounds i8,i8*%dI,i64 8
%dQ=bitcast i8*%dP to i8**
store i8*%dO,i8**%dQ,align 8
%dR=getelementptr inbounds i8,i8*%dI,i64 16
%dS=bitcast i8*%dR to i32*
store i32 2,i32*%dS,align 4
%dT=call i8*@sml_alloc(i32 inreg 20)#0
%dU=getelementptr inbounds i8,i8*%dT,i64 -4
%dV=bitcast i8*%dU to i32*
store i32 1342177296,i32*%dV,align 4
store i8*%dT,i8**%g,align 8
%dW=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%dX=bitcast i8*%dT to i8**
store i8*%dW,i8**%dX,align 8
%dY=getelementptr inbounds i8,i8*%dT,i64 8
%dZ=bitcast i8*%dY to i8**
store i8*null,i8**%dZ,align 8
%d0=getelementptr inbounds i8,i8*%dT,i64 16
%d1=bitcast i8*%d0 to i32*
store i32 3,i32*%d1,align 4
%d2=load i8*,i8**%h,align 8
%d3=getelementptr inbounds i8,i8*%d2,i64 8
%d4=bitcast i8*%d3 to i32*
%d5=load i32,i32*%d4,align 4
%d6=getelementptr inbounds i8,i8*%d2,i64 12
%d7=bitcast i8*%d6 to i32*
%d8=load i32,i32*%d7,align 4
%d9=call fastcc i8*@_SMLFN11RecordLabel3Map10listItemsiE(i32 inreg%d5,i32 inreg%d8)
store i8*%d9,i8**%c,align 8
%ea=bitcast i8**%h to i8***
%eb=load i8**,i8***%ea,align 8
%ec=load i8*,i8**%eb,align 8
store i8*%ec,i8**%j,align 8
%ed=bitcast i8**%eb to i8*
%ee=getelementptr inbounds i8*,i8**%eb,i64 1
%ef=bitcast i8**%ee to i32*
%eg=load i32,i32*%ef,align 4
store i8*null,i8**%h,align 8
%eh=getelementptr inbounds i8,i8*%ed,i64 12
%ei=bitcast i8*%eh to i32*
%ej=load i32,i32*%ei,align 4
%ek=call i8*@sml_alloc(i32 inreg 28)#0
%el=getelementptr inbounds i8,i8*%ek,i64 -4
%em=bitcast i8*%el to i32*
store i32 1342177304,i32*%em,align 4
store i8*%ek,i8**%h,align 8
%en=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%eo=bitcast i8*%ek to i8**
store i8*%en,i8**%eo,align 8
%ep=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%eq=getelementptr inbounds i8,i8*%ek,i64 8
%er=bitcast i8*%eq to i8**
store i8*%ep,i8**%er,align 8
%es=getelementptr inbounds i8,i8*%ek,i64 16
%et=bitcast i8*%es to i32*
store i32%eg,i32*%et,align 4
%eu=getelementptr inbounds i8,i8*%ek,i64 20
%ev=bitcast i8*%eu to i32*
store i32%ej,i32*%ev,align 4
%ew=getelementptr inbounds i8,i8*%ek,i64 24
%ex=bitcast i8*%ew to i32*
store i32 3,i32*%ex,align 4
%ey=call i8*@sml_alloc(i32 inreg 28)#0
%ez=getelementptr inbounds i8,i8*%ey,i64 -4
%eA=bitcast i8*%ez to i32*
store i32 1342177304,i32*%eA,align 4
store i8*%ey,i8**%f,align 8
%eB=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%eC=bitcast i8*%ey to i8**
store i8*%eB,i8**%eC,align 8
%eD=getelementptr inbounds i8,i8*%ey,i64 8
%eE=bitcast i8*%eD to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatRecordTyE_467 to void(...)*),void(...)**%eE,align 8
%eF=getelementptr inbounds i8,i8*%ey,i64 16
%eG=bitcast i8*%eF to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatRecordTyE_467 to void(...)*),void(...)**%eG,align 8
%eH=getelementptr inbounds i8,i8*%ey,i64 24
%eI=bitcast i8*%eH to i32*
store i32 -2147483647,i32*%eI,align 4
%eJ=call i8*@sml_alloc(i32 inreg 36)#0
%eK=getelementptr inbounds i8,i8*%eJ,i64 -4
%eL=bitcast i8*%eK to i32*
store i32 1342177312,i32*%eL,align 4
%eM=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%eN=bitcast i8*%eJ to i8**
store i8*%eM,i8**%eN,align 8
%eO=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%eP=getelementptr inbounds i8,i8*%eJ,i64 8
%eQ=bitcast i8*%eP to i8**
store i8*%eO,i8**%eQ,align 8
%eR=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%eS=getelementptr inbounds i8,i8*%eJ,i64 16
%eT=bitcast i8*%eS to i8**
store i8*%eR,i8**%eT,align 8
%eU=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%eV=getelementptr inbounds i8,i8*%eJ,i64 24
%eW=bitcast i8*%eV to i8**
store i8*%eU,i8**%eW,align 8
%eX=getelementptr inbounds i8,i8*%eJ,i64 32
%eY=bitcast i8*%eX to i32*
store i32 15,i32*%eY,align 4
%eZ=call fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_229(i32 inreg 1,i32 inreg 8,i8*inreg%eJ)
%e0=getelementptr inbounds i8,i8*%eZ,i64 16
%e1=bitcast i8*%e0 to i8*(i8*,i8*)**
%e2=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%e1,align 8
%e3=bitcast i8*%eZ to i8**
%e4=load i8*,i8**%e3,align 8
store i8*%e4,i8**%d,align 8
%e5=load i8*,i8**%c,align 8
%e6=getelementptr inbounds i8,i8*%e5,i64 16
%e7=bitcast i8*%e6 to i8*(i8*,i8*)**
%e8=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%e7,align 8
store i8*null,i8**%c,align 8
%e9=bitcast i8*%e5 to i8**
%fa=load i8*,i8**%e9,align 8
%fb=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%fc=call fastcc i8*%e8(i8*inreg%fa,i8*inreg%fb)
%fd=load i8*,i8**%d,align 8
%fe=tail call fastcc i8*%e2(i8*inreg%fd,i8*inreg%fc)
ret i8*%fe
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatRecordTyE_506(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatRecordTyE_505 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatRecordTyE_505 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat14formatRecordTyE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatRecordTyE_506 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat14formatRecordTyE_506 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLLN10TermFormat19formatDummyRecordTyE_517(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%b to i8**
br label%p
k:
call void@sml_check(i32 inreg%g)
%l=bitcast i8**%c to i8***
%m=load i8**,i8***%l,align 8
%n=load i8*,i8**%e,align 8
%o=bitcast i8**%m to i8*
br label%p
p:
%q=phi i8*[%o,%k],[%b,%i]
%r=phi i8*[%n,%k],[%a,%i]
%s=phi i8**[%m,%k],[%j,%i]
%t=getelementptr inbounds i8,i8*%r,i64 20
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=add i32%v,7
%x=sub i32 0,%v
%y=and i32%w,%x
%z=load i8*,i8**%s,align 8
store i8*%z,i8**%d,align 8
%A=getelementptr inbounds i8,i8*%r,i64 16
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=icmp eq i32%C,0
br i1%D,label%J,label%E
E:
store i8*null,i8**%c,align 8
%F=sext i32%y to i64
%G=getelementptr inbounds i8,i8*%q,i64%F
%H=bitcast i8*%G to i8**
%I=load i8*,i8**%H,align 8
br label%R
J:
%K=call i8*@sml_alloc(i32 inreg%v)#0
%L=getelementptr inbounds i8,i8*%K,i64 -4
%M=bitcast i8*%L to i32*
store i32%v,i32*%M,align 4
%N=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%O=sext i32%y to i64
%P=getelementptr inbounds i8,i8*%N,i64%O
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%K,i8*%P,i32%v,i1 false)
%Q=load i8*,i8**%d,align 8
br label%R
R:
%S=phi i8*[%Q,%J],[%z,%E]
%T=phi i8*[%K,%J],[%I,%E]
store i8*%T,i8**%c,align 8
store i8*null,i8**%d,align 8
%U=call fastcc i8*@_SMLFN11RecordLabel12format__labelE(i8*inreg%S)
store i8*%U,i8**%d,align 8
%V=load i8*,i8**%e,align 8
%W=getelementptr inbounds i8,i8*%V,i64 8
%X=bitcast i8*%W to i8**
%Y=load i8*,i8**%X,align 8
store i8*%Y,i8**%f,align 8
%Z=bitcast i8*%V to i8**
%aa=load i8*,i8**%Z,align 8
%ab=getelementptr inbounds i8,i8*%aa,i64 16
%ac=bitcast i8*%ab to i8*(i8*,i8*)**
%ad=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ac,align 8
store i8*null,i8**%e,align 8
%ae=bitcast i8*%V to i8***
%af=load i8**,i8***%ae,align 8
%ag=load i8*,i8**%af,align 8
%ah=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ai=call fastcc i8*%ad(i8*inreg%ag,i8*inreg%ah)
store i8*%ai,i8**%c,align 8
%aj=call i8*@sml_alloc(i32 inreg 28)#0
%ak=getelementptr inbounds i8,i8*%aj,i64 -4
%al=bitcast i8*%ak to i32*
store i32 1342177304,i32*%al,align 4
%am=load i8*,i8**%d,align 8
%an=bitcast i8*%aj to i8**
store i8*%am,i8**%an,align 8
%ao=load i8*,i8**%f,align 8
%ap=getelementptr inbounds i8,i8*%aj,i64 8
%aq=bitcast i8*%ap to i8**
store i8*%ao,i8**%aq,align 8
%ar=load i8*,i8**%c,align 8
%as=getelementptr inbounds i8,i8*%aj,i64 16
%at=bitcast i8*%as to i8**
store i8*%ar,i8**%at,align 8
%au=getelementptr inbounds i8,i8*%aj,i64 24
%av=bitcast i8*%au to i32*
store i32 7,i32*%av,align 4
%aw=tail call fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_304(i8*inreg%aj)
ret i8*%aw
}
define internal fastcc i8*@_SMLLLN10TermFormat19formatDummyRecordTyE_518(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
store i8*%a,i8**%h,align 8
store i8*%b,i8**%i,align 8
%k=load atomic i32,i32*@sml_check_flag unordered,align 4
%l=icmp eq i32%k,0
br i1%l,label%n,label%m
m:
call void@sml_check(i32 inreg%k)
br label%n
n:
%o=call i8*@sml_alloc(i32 inreg 20)#0
%p=getelementptr inbounds i8,i8*%o,i64 -4
%q=bitcast i8*%p to i32*
store i32 1342177296,i32*%q,align 4
store i8*%o,i8**%d,align 8
%r=getelementptr inbounds i8,i8*%o,i64 4
%s=bitcast i8*%r to i32*
store i32 0,i32*%s,align 1
%t=bitcast i8*%o to i32*
store i32 1,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%o,i64 8
%v=bitcast i8*%u to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bb,i64 0,i32 2,i64 0),i8**%v,align 8
%w=getelementptr inbounds i8,i8*%o,i64 16
%x=bitcast i8*%w to i32*
store i32 2,i32*%x,align 4
%y=call i8*@sml_alloc(i32 inreg 20)#0
%z=getelementptr inbounds i8,i8*%y,i64 -4
%A=bitcast i8*%z to i32*
store i32 1342177296,i32*%A,align 4
store i8*%y,i8**%c,align 8
%B=getelementptr inbounds i8,i8*%y,i64 4
%C=bitcast i8*%B to i32*
store i32 0,i32*%C,align 1
%D=bitcast i8*%y to i32*
store i32 6,i32*%D,align 4
%E=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%F=getelementptr inbounds i8,i8*%y,i64 8
%G=bitcast i8*%F to i8**
store i8*%E,i8**%G,align 8
%H=getelementptr inbounds i8,i8*%y,i64 16
%I=bitcast i8*%H to i32*
store i32 2,i32*%I,align 4
%J=call i8*@sml_alloc(i32 inreg 20)#0
%K=getelementptr inbounds i8,i8*%J,i64 -4
%L=bitcast i8*%K to i32*
store i32 1342177296,i32*%L,align 4
store i8*%J,i8**%d,align 8
%M=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%N=bitcast i8*%J to i8**
store i8*%M,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%J,i64 8
%P=bitcast i8*%O to i8**
store i8*null,i8**%P,align 8
%Q=getelementptr inbounds i8,i8*%J,i64 16
%R=bitcast i8*%Q to i32*
store i32 3,i32*%R,align 4
%S=call i8*@sml_alloc(i32 inreg 20)#0
%T=getelementptr inbounds i8,i8*%S,i64 -4
%U=bitcast i8*%T to i32*
store i32 1342177296,i32*%U,align 4
store i8*%S,i8**%e,align 8
%V=getelementptr inbounds i8,i8*%S,i64 4
%W=bitcast i8*%V to i32*
store i32 0,i32*%W,align 1
%X=bitcast i8*%S to i32*
store i32 1,i32*%X,align 4
%Y=getelementptr inbounds i8,i8*%S,i64 8
%Z=bitcast i8*%Y to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@aZ,i64 0,i32 2,i64 0),i8**%Z,align 8
%aa=getelementptr inbounds i8,i8*%S,i64 16
%ab=bitcast i8*%aa to i32*
store i32 2,i32*%ab,align 4
%ac=call i8*@sml_alloc(i32 inreg 20)#0
%ad=getelementptr inbounds i8,i8*%ac,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 1342177296,i32*%ae,align 4
store i8*%ac,i8**%c,align 8
%af=getelementptr inbounds i8,i8*%ac,i64 4
%ag=bitcast i8*%af to i32*
store i32 0,i32*%ag,align 1
%ah=bitcast i8*%ac to i32*
store i32 6,i32*%ah,align 4
%ai=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aj=getelementptr inbounds i8,i8*%ac,i64 8
%ak=bitcast i8*%aj to i8**
store i8*%ai,i8**%ak,align 8
%al=getelementptr inbounds i8,i8*%ac,i64 16
%am=bitcast i8*%al to i32*
store i32 2,i32*%am,align 4
%an=call i8*@sml_alloc(i32 inreg 20)#0
%ao=getelementptr inbounds i8,i8*%an,i64 -4
%ap=bitcast i8*%ao to i32*
store i32 1342177296,i32*%ap,align 4
store i8*%an,i8**%e,align 8
%aq=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ar=bitcast i8*%an to i8**
store i8*%aq,i8**%ar,align 8
%as=getelementptr inbounds i8,i8*%an,i64 8
%at=bitcast i8*%as to i8**
store i8*null,i8**%at,align 8
%au=getelementptr inbounds i8,i8*%an,i64 16
%av=bitcast i8*%au to i32*
store i32 3,i32*%av,align 4
%aw=call i8*@sml_alloc(i32 inreg 20)#0
%ax=getelementptr inbounds i8,i8*%aw,i64 -4
%ay=bitcast i8*%ax to i32*
store i32 1342177296,i32*%ay,align 4
store i8*%aw,i8**%f,align 8
%az=getelementptr inbounds i8,i8*%aw,i64 4
%aA=bitcast i8*%az to i32*
store i32 0,i32*%aA,align 1
%aB=bitcast i8*%aw to i32*
store i32 1,i32*%aB,align 4
%aC=getelementptr inbounds i8,i8*%aw,i64 8
%aD=bitcast i8*%aC to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@aK,i64 0,i32 2,i64 0),i8**%aD,align 8
%aE=getelementptr inbounds i8,i8*%aw,i64 16
%aF=bitcast i8*%aE to i32*
store i32 2,i32*%aF,align 4
%aG=call i8*@sml_alloc(i32 inreg 20)#0
%aH=getelementptr inbounds i8,i8*%aG,i64 -4
%aI=bitcast i8*%aH to i32*
store i32 1342177296,i32*%aI,align 4
store i8*%aG,i8**%c,align 8
%aJ=getelementptr inbounds i8,i8*%aG,i64 4
%aK=bitcast i8*%aJ to i32*
store i32 0,i32*%aK,align 1
%aL=bitcast i8*%aG to i32*
store i32 6,i32*%aL,align 4
%aM=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%aN=getelementptr inbounds i8,i8*%aG,i64 8
%aO=bitcast i8*%aN to i8**
store i8*%aM,i8**%aO,align 8
%aP=getelementptr inbounds i8,i8*%aG,i64 16
%aQ=bitcast i8*%aP to i32*
store i32 2,i32*%aQ,align 4
%aR=call i8*@sml_alloc(i32 inreg 20)#0
%aS=getelementptr inbounds i8,i8*%aR,i64 -4
%aT=bitcast i8*%aS to i32*
store i32 1342177296,i32*%aT,align 4
store i8*%aR,i8**%f,align 8
%aU=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aV=bitcast i8*%aR to i8**
store i8*%aU,i8**%aV,align 8
%aW=getelementptr inbounds i8,i8*%aR,i64 8
%aX=bitcast i8*%aW to i8**
store i8*null,i8**%aX,align 8
%aY=getelementptr inbounds i8,i8*%aR,i64 16
%aZ=bitcast i8*%aY to i32*
store i32 3,i32*%aZ,align 4
%a0=call i8*@sml_alloc(i32 inreg 20)#0
%a1=getelementptr inbounds i8,i8*%a0,i64 -4
%a2=bitcast i8*%a1 to i32*
store i32 1342177296,i32*%a2,align 4
store i8*%a0,i8**%g,align 8
%a3=getelementptr inbounds i8,i8*%a0,i64 4
%a4=bitcast i8*%a3 to i32*
store i32 0,i32*%a4,align 1
%a5=bitcast i8*%a0 to i32*
store i32 4,i32*%a5,align 4
%a6=getelementptr inbounds i8,i8*%a0,i64 8
%a7=bitcast i8*%a6 to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[5x i8]}>,<{[4x i8],i32,[5x i8]}>*@aL,i64 0,i32 2,i64 0),i8**%a7,align 8
%a8=getelementptr inbounds i8,i8*%a0,i64 16
%a9=bitcast i8*%a8 to i32*
store i32 2,i32*%a9,align 4
%ba=call i8*@sml_alloc(i32 inreg 20)#0
%bb=getelementptr inbounds i8,i8*%ba,i64 -4
%bc=bitcast i8*%bb to i32*
store i32 1342177296,i32*%bc,align 4
store i8*%ba,i8**%c,align 8
%bd=getelementptr inbounds i8,i8*%ba,i64 4
%be=bitcast i8*%bd to i32*
store i32 0,i32*%be,align 1
%bf=bitcast i8*%ba to i32*
store i32 6,i32*%bf,align 4
%bg=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%bh=getelementptr inbounds i8,i8*%ba,i64 8
%bi=bitcast i8*%bh to i8**
store i8*%bg,i8**%bi,align 8
%bj=getelementptr inbounds i8,i8*%ba,i64 16
%bk=bitcast i8*%bj to i32*
store i32 2,i32*%bk,align 4
%bl=call i8*@sml_alloc(i32 inreg 20)#0
%bm=getelementptr inbounds i8,i8*%bl,i64 -4
%bn=bitcast i8*%bm to i32*
store i32 1342177296,i32*%bn,align 4
store i8*%bl,i8**%g,align 8
%bo=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bp=bitcast i8*%bl to i8**
store i8*%bo,i8**%bp,align 8
%bq=getelementptr inbounds i8,i8*%bl,i64 8
%br=bitcast i8*%bq to i8**
store i8*null,i8**%br,align 8
%bs=getelementptr inbounds i8,i8*%bl,i64 16
%bt=bitcast i8*%bs to i32*
store i32 3,i32*%bt,align 4
%bu=load i8*,i8**%h,align 8
%bv=getelementptr inbounds i8,i8*%bu,i64 8
%bw=bitcast i8*%bv to i32*
%bx=load i32,i32*%bw,align 4
%by=getelementptr inbounds i8,i8*%bu,i64 12
%bz=bitcast i8*%by to i32*
%bA=load i32,i32*%bz,align 4
%bB=call fastcc i8*@_SMLFN11RecordLabel3Map10listItemsiE(i32 inreg%bx,i32 inreg%bA)
store i8*%bB,i8**%c,align 8
%bC=bitcast i8**%h to i8***
%bD=load i8**,i8***%bC,align 8
%bE=load i8*,i8**%bD,align 8
store i8*%bE,i8**%j,align 8
%bF=bitcast i8**%bD to i8*
%bG=getelementptr inbounds i8*,i8**%bD,i64 1
%bH=bitcast i8**%bG to i32*
%bI=load i32,i32*%bH,align 4
store i8*null,i8**%h,align 8
%bJ=getelementptr inbounds i8,i8*%bF,i64 12
%bK=bitcast i8*%bJ to i32*
%bL=load i32,i32*%bK,align 4
%bM=call i8*@sml_alloc(i32 inreg 28)#0
%bN=getelementptr inbounds i8,i8*%bM,i64 -4
%bO=bitcast i8*%bN to i32*
store i32 1342177304,i32*%bO,align 4
store i8*%bM,i8**%h,align 8
%bP=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%bQ=bitcast i8*%bM to i8**
store i8*%bP,i8**%bQ,align 8
%bR=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%bS=getelementptr inbounds i8,i8*%bM,i64 8
%bT=bitcast i8*%bS to i8**
store i8*%bR,i8**%bT,align 8
%bU=getelementptr inbounds i8,i8*%bM,i64 16
%bV=bitcast i8*%bU to i32*
store i32%bI,i32*%bV,align 4
%bW=getelementptr inbounds i8,i8*%bM,i64 20
%bX=bitcast i8*%bW to i32*
store i32%bL,i32*%bX,align 4
%bY=getelementptr inbounds i8,i8*%bM,i64 24
%bZ=bitcast i8*%bY to i32*
store i32 3,i32*%bZ,align 4
%b0=call i8*@sml_alloc(i32 inreg 28)#0
%b1=getelementptr inbounds i8,i8*%b0,i64 -4
%b2=bitcast i8*%b1 to i32*
store i32 1342177304,i32*%b2,align 4
store i8*%b0,i8**%f,align 8
%b3=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%b4=bitcast i8*%b0 to i8**
store i8*%b3,i8**%b4,align 8
%b5=getelementptr inbounds i8,i8*%b0,i64 8
%b6=bitcast i8*%b5 to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat19formatDummyRecordTyE_517 to void(...)*),void(...)**%b6,align 8
%b7=getelementptr inbounds i8,i8*%b0,i64 16
%b8=bitcast i8*%b7 to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat19formatDummyRecordTyE_517 to void(...)*),void(...)**%b8,align 8
%b9=getelementptr inbounds i8,i8*%b0,i64 24
%ca=bitcast i8*%b9 to i32*
store i32 -2147483647,i32*%ca,align 4
%cb=call i8*@sml_alloc(i32 inreg 36)#0
%cc=getelementptr inbounds i8,i8*%cb,i64 -4
%cd=bitcast i8*%cc to i32*
store i32 1342177312,i32*%cd,align 4
%ce=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%cf=bitcast i8*%cb to i8**
store i8*%ce,i8**%cf,align 8
%cg=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ch=getelementptr inbounds i8,i8*%cb,i64 8
%ci=bitcast i8*%ch to i8**
store i8*%cg,i8**%ci,align 8
%cj=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%ck=getelementptr inbounds i8,i8*%cb,i64 16
%cl=bitcast i8*%ck to i8**
store i8*%cj,i8**%cl,align 8
%cm=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%cn=getelementptr inbounds i8,i8*%cb,i64 24
%co=bitcast i8*%cn to i8**
store i8*%cm,i8**%co,align 8
%cp=getelementptr inbounds i8,i8*%cb,i64 32
%cq=bitcast i8*%cp to i32*
store i32 15,i32*%cq,align 4
%cr=call fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_229(i32 inreg 1,i32 inreg 8,i8*inreg%cb)
%cs=getelementptr inbounds i8,i8*%cr,i64 16
%ct=bitcast i8*%cs to i8*(i8*,i8*)**
%cu=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ct,align 8
%cv=bitcast i8*%cr to i8**
%cw=load i8*,i8**%cv,align 8
store i8*%cw,i8**%d,align 8
%cx=load i8*,i8**%c,align 8
%cy=getelementptr inbounds i8,i8*%cx,i64 16
%cz=bitcast i8*%cy to i8*(i8*,i8*)**
%cA=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%cz,align 8
store i8*null,i8**%c,align 8
%cB=bitcast i8*%cx to i8**
%cC=load i8*,i8**%cB,align 8
%cD=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%cE=call fastcc i8*%cA(i8*inreg%cC,i8*inreg%cD)
%cF=load i8*,i8**%d,align 8
%cG=tail call fastcc i8*%cu(i8*inreg%cF,i8*inreg%cE)
ret i8*%cG
}
define internal fastcc i8*@_SMLLLN10TermFormat19formatDummyRecordTyE_519(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat19formatDummyRecordTyE_518 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat19formatDummyRecordTyE_518 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat19formatDummyRecordTyE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat19formatDummyRecordTyE_519 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat19formatDummyRecordTyE_519 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLLN10TermFormat6tvNameE_522(i8 inreg%a,i32 inreg%b)unnamed_addr#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%h,label%g
g:
call void@sml_check(i32 inreg%e)
br label%h
h:
%i=icmp sgt i32%b,25
br i1%i,label%I,label%j
j:
%k=zext i8%a to i32
%l=add nsw i32%k,%b
%m=icmp ugt i32%l,255
br i1%m,label%q,label%n
n:
%o=trunc i32%l to i8
%p=tail call fastcc i8*@_SMLFN6String3strE(i8 inreg%o)
ret i8*%p
q:
%r=load i8*,i8**@_SMLZ3Chr,align 8
store i8*%r,i8**%c,align 8
%s=call i8*@sml_alloc(i32 inreg 20)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177296,i32*%u,align 4
store i8*%s,i8**%d,align 8
%v=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[57x i8]}>,<{[4x i8],i32,[57x i8]}>*@aO,i64 0,i32 2,i64 0),i8**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to i32*
store i32 3,i32*%A,align 4
%B=call i8*@sml_alloc(i32 inreg 60)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177336,i32*%D,align 4
%E=getelementptr inbounds i8,i8*%B,i64 56
%F=bitcast i8*%E to i32*
store i32 1,i32*%F,align 4
%G=load i8*,i8**%d,align 8
%H=bitcast i8*%B to i8**
store i8*%G,i8**%H,align 8
call void@sml_raise(i8*inreg%B)#1
unreachable
I:
%J=udiv i32%b,26
%K=urem i32%b,26
%L=lshr i32%b,31
%M=icmp ne i32%K,0
%N=zext i1%M to i32
%O=and i32%L,%N
%P=sub nsw i32%J,%O
%Q=call fastcc i8*@_SMLLLN10TermFormat6tvNameE_522(i8 inreg%a,i32 inreg%P)
store i8*%Q,i8**%c,align 8
%R=zext i8%a to i32
%S=sub nsw i32 0,%O
%T=and i32%S,26
%U=add nuw nsw i32%K,%R
%V=add nuw nsw i32%U,%T
%W=icmp ugt i32%V,255
br i1%W,label%al,label%X
X:
%Y=trunc i32%V to i8
%Z=call fastcc i8*@_SMLFN6String3strE(i8 inreg%Y)
store i8*%Z,i8**%d,align 8
%aa=call i8*@sml_alloc(i32 inreg 20)#0
%ab=getelementptr inbounds i8,i8*%aa,i64 -4
%ac=bitcast i8*%ab to i32*
store i32 1342177296,i32*%ac,align 4
%ad=load i8*,i8**%c,align 8
%ae=bitcast i8*%aa to i8**
store i8*%ad,i8**%ae,align 8
%af=load i8*,i8**%d,align 8
%ag=getelementptr inbounds i8,i8*%aa,i64 8
%ah=bitcast i8*%ag to i8**
store i8*%af,i8**%ah,align 8
%ai=getelementptr inbounds i8,i8*%aa,i64 16
%aj=bitcast i8*%ai to i32*
store i32 3,i32*%aj,align 4
%ak=tail call fastcc i8*@_SMLFN6String1_ZE(i8*inreg%aa)
ret i8*%ak
al:
%am=load i8*,i8**@_SMLZ3Chr,align 8
store i8*%am,i8**%c,align 8
%an=call i8*@sml_alloc(i32 inreg 20)#0
%ao=getelementptr inbounds i8,i8*%an,i64 -4
%ap=bitcast i8*%ao to i32*
store i32 1342177296,i32*%ap,align 4
store i8*%an,i8**%d,align 8
%aq=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ar=bitcast i8*%an to i8**
store i8*%aq,i8**%ar,align 8
%as=getelementptr inbounds i8,i8*%an,i64 8
%at=bitcast i8*%as to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[57x i8]}>,<{[4x i8],i32,[57x i8]}>*@aN,i64 0,i32 2,i64 0),i8**%at,align 8
%au=getelementptr inbounds i8,i8*%an,i64 16
%av=bitcast i8*%au to i32*
store i32 3,i32*%av,align 4
%aw=call i8*@sml_alloc(i32 inreg 60)#0
%ax=getelementptr inbounds i8,i8*%aw,i64 -4
%ay=bitcast i8*%ax to i32*
store i32 1342177336,i32*%ay,align 4
%az=getelementptr inbounds i8,i8*%aw,i64 56
%aA=bitcast i8*%az to i32*
store i32 1,i32*%aA,align 4
%aB=load i8*,i8**%d,align 8
%aC=bitcast i8*%aw to i8**
store i8*%aB,i8**%aC,align 8
call void@sml_raise(i8*inreg%aw)#1
unreachable
}
define fastcc i8*@_SMLFN10TermFormat7btvNameE(i32 inreg%a)#2 gc"smlsharp"{
%b=load atomic i32,i32*@sml_check_flag unordered,align 4
%c=icmp eq i32%b,0
br i1%c,label%e,label%d
d:
tail call void@sml_check(i32 inreg%b)
br label%e
e:
%f=tail call fastcc i8*@_SMLLLN10TermFormat6tvNameE_522(i8 inreg 97,i32 inreg%a)
ret i8*%f
}
define fastcc i8*@_SMLFN10TermFormat7ftvNameE(i32 inreg%a)#2 gc"smlsharp"{
%b=load atomic i32,i32*@sml_check_flag unordered,align 4
%c=icmp eq i32%b,0
br i1%c,label%e,label%d
d:
tail call void@sml_check(i32 inreg%b)
br label%e
e:
%f=tail call fastcc i8*@_SMLLLN10TermFormat6tvNameE_522(i8 inreg 65,i32 inreg%a)
ret i8*%f
}
define fastcc i8*@_SMLFN10TermFormat15formatFreeTyvarE(i32 inreg%a)#2 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%g,label%f
f:
call void@sml_check(i32 inreg%d)
br label%g
g:
%h=call fastcc i32@_SMLFN13FreeTypeVarID5toIntE(i32 inreg%a)
%i=call fastcc i8*@_SMLLLN10TermFormat6tvNameE_522(i8 inreg 65,i32 inreg%h)
store i8*%i,i8**%b,align 8
%j=getelementptr inbounds i8,i8*%i,i64 -4
%k=bitcast i8*%j to i32*
%l=load i32,i32*%k,align 4
%m=and i32%l,268435455
%n=add nsw i32%m,-1
%o=call i8*@sml_alloc(i32 inreg 20)#0
%p=getelementptr inbounds i8,i8*%o,i64 -4
%q=bitcast i8*%p to i32*
store i32 1342177296,i32*%q,align 4
store i8*%o,i8**%c,align 8
%r=getelementptr inbounds i8,i8*%o,i64 4
%s=bitcast i8*%r to i32*
store i32 0,i32*%s,align 1
%t=bitcast i8*%o to i32*
store i32%n,i32*%t,align 4
%u=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%v=getelementptr inbounds i8,i8*%o,i64 8
%w=bitcast i8*%v to i8**
store i8*%u,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%o,i64 16
%y=bitcast i8*%x to i32*
store i32 2,i32*%y,align 4
%z=call i8*@sml_alloc(i32 inreg 20)#0
%A=getelementptr inbounds i8,i8*%z,i64 -4
%B=bitcast i8*%A to i32*
store i32 1342177296,i32*%B,align 4
store i8*%z,i8**%b,align 8
%C=getelementptr inbounds i8,i8*%z,i64 4
%D=bitcast i8*%C to i32*
store i32 0,i32*%D,align 1
%E=bitcast i8*%z to i32*
store i32 6,i32*%E,align 4
%F=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%G=getelementptr inbounds i8,i8*%z,i64 8
%H=bitcast i8*%G to i8**
store i8*%F,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%z,i64 16
%J=bitcast i8*%I to i32*
store i32 2,i32*%J,align 4
%K=call i8*@sml_alloc(i32 inreg 20)#0
%L=getelementptr inbounds i8,i8*%K,i64 -4
%M=bitcast i8*%L to i32*
store i32 1342177296,i32*%M,align 4
%N=load i8*,i8**%b,align 8
%O=bitcast i8*%K to i8**
store i8*%N,i8**%O,align 8
%P=getelementptr inbounds i8,i8*%K,i64 8
%Q=bitcast i8*%P to i8**
store i8*null,i8**%Q,align 8
%R=getelementptr inbounds i8,i8*%K,i64 16
%S=bitcast i8*%R to i32*
store i32 3,i32*%S,align 4
ret i8*%K
}
define internal fastcc i8*@_SMLLLN10TermFormat9formatBtvE_539(i32 inreg%a,i32 inreg%b,i8*inreg%c,i8*inreg%d)unnamed_addr#2 gc"smlsharp"{
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%c,i8**%e,align 8
store i8*%d,i8**%f,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%k,label%m
k:
%l=bitcast i8*%d to i8**
br label%p
m:
call void@sml_check(i32 inreg%i)
%n=bitcast i8**%f to i8***
%o=load i8**,i8***%n,align 8
br label%p
p:
%q=phi i8**[%o,%m],[%l,%k]
%r=add i32%b,-1
%s=sub i32 0,%b
%t=and i32%r,%s
%u=load i8*,i8**%q,align 8
%v=bitcast i8*%u to i8**
%w=load i8*,i8**%v,align 8
%x=getelementptr inbounds i8,i8*%u,i64 8
%y=bitcast i8*%x to i8**
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%f,align 8
%A=bitcast i8*%w to i32*
%B=load i32,i32*%A,align 4
switch i32%B,label%C[
i32 0,label%at
i32 1,label%U
]
C:
store i8*null,i8**%f,align 8
call void@sml_matchcomp_bug()
%D=load i8*,i8**@_SMLZ5Match,align 8
store i8*%D,i8**%e,align 8
%E=call i8*@sml_alloc(i32 inreg 20)#0
%F=getelementptr inbounds i8,i8*%E,i64 -4
%G=bitcast i8*%F to i32*
store i32 1342177296,i32*%G,align 4
store i8*%E,i8**%f,align 8
%H=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%I=bitcast i8*%E to i8**
store i8*%H,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%E,i64 8
%K=bitcast i8*%J to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[57x i8]}>,<{[4x i8],i32,[57x i8]}>*@aS,i64 0,i32 2,i64 0),i8**%K,align 8
%L=getelementptr inbounds i8,i8*%E,i64 16
%M=bitcast i8*%L to i32*
store i32 3,i32*%M,align 4
%N=call i8*@sml_alloc(i32 inreg 60)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32 1342177336,i32*%P,align 4
%Q=getelementptr inbounds i8,i8*%N,i64 56
%R=bitcast i8*%Q to i32*
store i32 1,i32*%R,align 4
%S=load i8*,i8**%f,align 8
%T=bitcast i8*%N to i8**
store i8*%S,i8**%T,align 8
call void@sml_raise(i8*inreg%N)#1
unreachable
U:
%V=getelementptr inbounds i8,i8*%w,i64 4
%W=bitcast i8*%V to i32*
%X=load i32,i32*%W,align 4
%Y=call fastcc i8*@_SMLFN14BoundTypeVarID8toStringE(i32 inreg%X)
store i8*%Y,i8**%g,align 8
%Z=call i8*@sml_alloc(i32 inreg 20)#0
%aa=getelementptr inbounds i8,i8*%Z,i64 -4
%ab=bitcast i8*%aa to i32*
store i32 1342177296,i32*%ab,align 4
%ac=bitcast i8*%Z to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[9x i8]}>,<{[4x i8],i32,[9x i8]}>*@bJ,i64 0,i32 2,i64 0),i8**%ac,align 8
%ad=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%ae=getelementptr inbounds i8,i8*%Z,i64 8
%af=bitcast i8*%ae to i8**
store i8*%ad,i8**%af,align 8
%ag=getelementptr inbounds i8,i8*%Z,i64 16
%ah=bitcast i8*%ag to i32*
store i32 3,i32*%ah,align 4
%ai=call fastcc i8*@_SMLFN6String1_ZE(i8*inreg%Z)
store i8*%ai,i8**%g,align 8
%aj=call i8*@sml_alloc(i32 inreg 20)#0
%ak=getelementptr inbounds i8,i8*%aj,i64 -4
%al=bitcast i8*%ak to i32*
store i32 1342177296,i32*%al,align 4
%am=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%an=bitcast i8*%aj to i8**
store i8*%am,i8**%an,align 8
%ao=getelementptr inbounds i8,i8*%aj,i64 8
%ap=bitcast i8*%ao to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bK,i64 0,i32 2,i64 0),i8**%ap,align 8
%aq=getelementptr inbounds i8,i8*%aj,i64 16
%ar=bitcast i8*%aq to i32*
store i32 3,i32*%ar,align 4
%as=call fastcc i8*@_SMLFN6String1_ZE(i8*inreg%aj)
br label%ay
at:
%au=getelementptr inbounds i8,i8*%w,i64 4
%av=bitcast i8*%au to i32*
%aw=load i32,i32*%av,align 4
%ax=call fastcc i8*@_SMLLLN10TermFormat6tvNameE_522(i8 inreg 97,i32 inreg%aw)
br label%ay
ay:
%az=phi i8*[%ax,%at],[%as,%U]
store i8*%az,i8**%g,align 8
%aA=getelementptr inbounds i8,i8*%az,i64 -4
%aB=bitcast i8*%aA to i32*
%aC=load i32,i32*%aB,align 4
%aD=and i32%aC,268435455
%aE=add nsw i32%aD,-1
%aF=call i8*@sml_alloc(i32 inreg 20)#0
%aG=getelementptr inbounds i8,i8*%aF,i64 -4
%aH=bitcast i8*%aG to i32*
store i32 1342177296,i32*%aH,align 4
store i8*%aF,i8**%h,align 8
%aI=getelementptr inbounds i8,i8*%aF,i64 4
%aJ=bitcast i8*%aI to i32*
store i32 0,i32*%aJ,align 1
%aK=bitcast i8*%aF to i32*
store i32%aE,i32*%aK,align 4
%aL=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%aM=getelementptr inbounds i8,i8*%aF,i64 8
%aN=bitcast i8*%aM to i8**
store i8*%aL,i8**%aN,align 8
%aO=getelementptr inbounds i8,i8*%aF,i64 16
%aP=bitcast i8*%aO to i32*
store i32 2,i32*%aP,align 4
%aQ=call i8*@sml_alloc(i32 inreg 20)#0
%aR=getelementptr inbounds i8,i8*%aQ,i64 -4
%aS=bitcast i8*%aR to i32*
store i32 1342177296,i32*%aS,align 4
store i8*%aQ,i8**%g,align 8
%aT=getelementptr inbounds i8,i8*%aQ,i64 4
%aU=bitcast i8*%aT to i32*
store i32 0,i32*%aU,align 1
%aV=bitcast i8*%aQ to i32*
store i32 6,i32*%aV,align 4
%aW=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%aX=getelementptr inbounds i8,i8*%aQ,i64 8
%aY=bitcast i8*%aX to i8**
store i8*%aW,i8**%aY,align 8
%aZ=getelementptr inbounds i8,i8*%aQ,i64 16
%a0=bitcast i8*%aZ to i32*
store i32 2,i32*%a0,align 4
%a1=call i8*@sml_alloc(i32 inreg 20)#0
%a2=getelementptr inbounds i8,i8*%a1,i64 -4
%a3=bitcast i8*%a2 to i32*
store i32 1342177296,i32*%a3,align 4
store i8*%a1,i8**%h,align 8
%a4=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%a5=bitcast i8*%a1 to i8**
store i8*%a4,i8**%a5,align 8
%a6=getelementptr inbounds i8,i8*%a1,i64 8
%a7=bitcast i8*%a6 to i8**
store i8*null,i8**%a7,align 8
%a8=getelementptr inbounds i8,i8*%a1,i64 16
%a9=bitcast i8*%a8 to i32*
store i32 3,i32*%a9,align 4
%ba=load i8*,i8**%f,align 8
%bb=icmp eq i8*%ba,null
br i1%bb,label%bc,label%bd
bc:
ret i8*%a1
bd:
%be=icmp eq i32%a,0
br i1%be,label%bk,label%bf
bf:
store i8*null,i8**%f,align 8
%bg=sext i32%t to i64
%bh=getelementptr inbounds i8,i8*%ba,i64%bg
%bi=bitcast i8*%bh to i8**
%bj=load i8*,i8**%bi,align 8
br label%bs
bk:
%bl=call i8*@sml_alloc(i32 inreg%b)#0
%bm=getelementptr inbounds i8,i8*%bl,i64 -4
%bn=bitcast i8*%bm to i32*
store i32%b,i32*%bn,align 4
%bo=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%bp=sext i32%t to i64
%bq=getelementptr inbounds i8,i8*%bo,i64%bp
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bl,i8*%bq,i32%b,i1 false)
%br=load i8*,i8**%h,align 8
br label%bs
bs:
%bt=phi i8*[%br,%bk],[%a1,%bf]
%bu=phi i8*[%bl,%bk],[%bj,%bf]
store i8*%bu,i8**%f,align 8
%bv=load i8*,i8**%e,align 8
%bw=getelementptr inbounds i8,i8*%bv,i64 16
%bx=bitcast i8*%bw to i8*(i8*,i8*)**
%by=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bx,align 8
store i8*null,i8**%e,align 8
%bz=bitcast i8*%bv to i8**
%bA=load i8*,i8**%bz,align 8
store i8*null,i8**%h,align 8
%bB=call fastcc i8*%by(i8*inreg%bA,i8*inreg%bt)
%bC=getelementptr inbounds i8,i8*%bB,i64 16
%bD=bitcast i8*%bC to i8*(i8*,i8*)**
%bE=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bD,align 8
%bF=bitcast i8*%bB to i8**
%bG=load i8*,i8**%bF,align 8
%bH=load i8*,i8**%f,align 8
%bI=call fastcc i8*%bE(i8*inreg%bG,i8*inreg%bH)
ret i8*%bI
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb4listE_547(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%g,align 8
store i8*%b,i8**%c,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%l,label%k
k:
call void@sml_check(i32 inreg%i)
br label%l
l:
%m=call i8*@sml_alloc(i32 inreg 20)#0
%n=getelementptr inbounds i8,i8*%m,i64 -4
%o=bitcast i8*%n to i32*
store i32 1342177296,i32*%o,align 4
store i8*%m,i8**%e,align 8
%p=getelementptr inbounds i8,i8*%m,i64 4
%q=bitcast i8*%p to i32*
store i32 0,i32*%q,align 1
%r=bitcast i8*%m to i32*
store i32 1,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%m,i64 8
%t=bitcast i8*%s to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bl,i64 0,i32 2,i64 0),i8**%t,align 8
%u=getelementptr inbounds i8,i8*%m,i64 16
%v=bitcast i8*%u to i32*
store i32 2,i32*%v,align 4
%w=call i8*@sml_alloc(i32 inreg 20)#0
%x=getelementptr inbounds i8,i8*%w,i64 -4
%y=bitcast i8*%x to i32*
store i32 1342177296,i32*%y,align 4
store i8*%w,i8**%d,align 8
%z=getelementptr inbounds i8,i8*%w,i64 4
%A=bitcast i8*%z to i32*
store i32 0,i32*%A,align 1
%B=bitcast i8*%w to i32*
store i32 6,i32*%B,align 4
%C=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%D=getelementptr inbounds i8,i8*%w,i64 8
%E=bitcast i8*%D to i8**
store i8*%C,i8**%E,align 8
%F=getelementptr inbounds i8,i8*%w,i64 16
%G=bitcast i8*%F to i32*
store i32 2,i32*%G,align 4
%H=call i8*@sml_alloc(i32 inreg 20)#0
%I=getelementptr inbounds i8,i8*%H,i64 -4
%J=bitcast i8*%I to i32*
store i32 1342177296,i32*%J,align 4
store i8*%H,i8**%e,align 8
%K=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%L=bitcast i8*%H to i8**
store i8*%K,i8**%L,align 8
%M=getelementptr inbounds i8,i8*%H,i64 8
%N=bitcast i8*%M to i8**
store i8*null,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%H,i64 16
%P=bitcast i8*%O to i32*
store i32 3,i32*%P,align 4
%Q=call i8*@sml_alloc(i32 inreg 20)#0
%R=getelementptr inbounds i8,i8*%Q,i64 -4
%S=bitcast i8*%R to i32*
store i32 1342177296,i32*%S,align 4
store i8*%Q,i8**%f,align 8
%T=getelementptr inbounds i8,i8*%Q,i64 4
%U=bitcast i8*%T to i32*
store i32 0,i32*%U,align 1
%V=bitcast i8*%Q to i32*
store i32 1,i32*%V,align 4
%W=getelementptr inbounds i8,i8*%Q,i64 8
%X=bitcast i8*%W to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@aZ,i64 0,i32 2,i64 0),i8**%X,align 8
%Y=getelementptr inbounds i8,i8*%Q,i64 16
%Z=bitcast i8*%Y to i32*
store i32 2,i32*%Z,align 4
%aa=call i8*@sml_alloc(i32 inreg 20)#0
%ab=getelementptr inbounds i8,i8*%aa,i64 -4
%ac=bitcast i8*%ab to i32*
store i32 1342177296,i32*%ac,align 4
store i8*%aa,i8**%d,align 8
%ad=getelementptr inbounds i8,i8*%aa,i64 4
%ae=bitcast i8*%ad to i32*
store i32 0,i32*%ae,align 1
%af=bitcast i8*%aa to i32*
store i32 6,i32*%af,align 4
%ag=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%ah=getelementptr inbounds i8,i8*%aa,i64 8
%ai=bitcast i8*%ah to i8**
store i8*%ag,i8**%ai,align 8
%aj=getelementptr inbounds i8,i8*%aa,i64 16
%ak=bitcast i8*%aj to i32*
store i32 2,i32*%ak,align 4
%al=call i8*@sml_alloc(i32 inreg 20)#0
%am=getelementptr inbounds i8,i8*%al,i64 -4
%an=bitcast i8*%am to i32*
store i32 1342177296,i32*%an,align 4
store i8*%al,i8**%f,align 8
%ao=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ap=bitcast i8*%al to i8**
store i8*%ao,i8**%ap,align 8
%aq=getelementptr inbounds i8,i8*%al,i64 8
%ar=bitcast i8*%aq to i8**
store i8*null,i8**%ar,align 8
%as=getelementptr inbounds i8,i8*%al,i64 16
%at=bitcast i8*%as to i32*
store i32 3,i32*%at,align 4
%au=call i8*@sml_alloc(i32 inreg 20)#0
%av=getelementptr inbounds i8,i8*%au,i64 -4
%aw=bitcast i8*%av to i32*
store i32 1342177296,i32*%aw,align 4
store i8*%au,i8**%h,align 8
%ax=getelementptr inbounds i8,i8*%au,i64 4
%ay=bitcast i8*%ax to i32*
store i32 0,i32*%ay,align 1
%az=bitcast i8*%au to i32*
store i32 1,i32*%az,align 4
%aA=getelementptr inbounds i8,i8*%au,i64 8
%aB=bitcast i8*%aA to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bm,i64 0,i32 2,i64 0),i8**%aB,align 8
%aC=getelementptr inbounds i8,i8*%au,i64 16
%aD=bitcast i8*%aC to i32*
store i32 2,i32*%aD,align 4
%aE=call i8*@sml_alloc(i32 inreg 20)#0
%aF=getelementptr inbounds i8,i8*%aE,i64 -4
%aG=bitcast i8*%aF to i32*
store i32 1342177296,i32*%aG,align 4
store i8*%aE,i8**%d,align 8
%aH=getelementptr inbounds i8,i8*%aE,i64 4
%aI=bitcast i8*%aH to i32*
store i32 0,i32*%aI,align 1
%aJ=bitcast i8*%aE to i32*
store i32 6,i32*%aJ,align 4
%aK=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%aL=getelementptr inbounds i8,i8*%aE,i64 8
%aM=bitcast i8*%aL to i8**
store i8*%aK,i8**%aM,align 8
%aN=getelementptr inbounds i8,i8*%aE,i64 16
%aO=bitcast i8*%aN to i32*
store i32 2,i32*%aO,align 4
%aP=load i8*,i8**%g,align 8
%aQ=getelementptr inbounds i8,i8*%aP,i64 8
%aR=bitcast i8*%aQ to i32*
%aS=load i32,i32*%aR,align 4
%aT=getelementptr inbounds i8,i8*%aP,i64 12
%aU=bitcast i8*%aT to i32*
%aV=load i32,i32*%aU,align 4
%aW=bitcast i8*%aP to i8**
%aX=load i8*,i8**%aW,align 8
store i8*%aX,i8**%g,align 8
%aY=call i8*@sml_alloc(i32 inreg 20)#0
%aZ=getelementptr inbounds i8,i8*%aY,i64 -4
%a0=bitcast i8*%aZ to i32*
store i32 1342177296,i32*%a0,align 4
store i8*%aY,i8**%h,align 8
%a1=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%a2=bitcast i8*%aY to i8**
store i8*%a1,i8**%a2,align 8
%a3=getelementptr inbounds i8,i8*%aY,i64 8
%a4=bitcast i8*%a3 to i8**
store i8*null,i8**%a4,align 8
%a5=getelementptr inbounds i8,i8*%aY,i64 16
%a6=bitcast i8*%a5 to i32*
store i32 3,i32*%a6,align 4
%a7=call i8*@sml_alloc(i32 inreg 36)#0
%a8=getelementptr inbounds i8,i8*%a7,i64 -4
%a9=bitcast i8*%a8 to i32*
store i32 1342177312,i32*%a9,align 4
%ba=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%bb=bitcast i8*%a7 to i8**
store i8*%ba,i8**%bb,align 8
%bc=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bd=getelementptr inbounds i8,i8*%a7,i64 8
%be=bitcast i8*%bd to i8**
store i8*%bc,i8**%be,align 8
%bf=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%bg=getelementptr inbounds i8,i8*%a7,i64 16
%bh=bitcast i8*%bg to i8**
store i8*%bf,i8**%bh,align 8
%bi=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%bj=getelementptr inbounds i8,i8*%a7,i64 24
%bk=bitcast i8*%bj to i8**
store i8*%bi,i8**%bk,align 8
%bl=getelementptr inbounds i8,i8*%a7,i64 32
%bm=bitcast i8*%bl to i32*
store i32 15,i32*%bm,align 4
%bn=call fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_337(i32 inreg%aS,i32 inreg%aV,i8*inreg%a7)
%bo=getelementptr inbounds i8,i8*%bn,i64 16
%bp=bitcast i8*%bo to i8*(i8*,i8*)**
%bq=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bp,align 8
%br=bitcast i8*%bn to i8**
%bs=load i8*,i8**%br,align 8
%bt=load i8*,i8**%c,align 8
%bu=tail call fastcc i8*%bq(i8*inreg%bs,i8*inreg%bt)
ret i8*%bu
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb4listE_548(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb4listE_547 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb4listE_547 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat10FormatComb4listE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb4listE_548 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb4listE_548 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6tuple2E_551(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6tuple2E_559(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
n:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%l,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%e,align 8
br label%l
l:
%m=phi i8*[%k,%j],[%a,%n]
%o=getelementptr inbounds i8,i8*%m,i64 20
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=add i32%q,-1
%s=sub i32 0,%q
%t=and i32%r,%s
%u=getelementptr inbounds i8,i8*%m,i64 28
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=add i32%r,%w
%y=add i32%x,%t
%z=sub i32 0,%w
%A=and i32%y,%z
%B=getelementptr inbounds i8,i8*%m,i64 16
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=icmp eq i32%D,0
br i1%E,label%L,label%F
F:
%G=load i8*,i8**%c,align 8
%H=sext i32%t to i64
%I=getelementptr inbounds i8,i8*%G,i64%H
%J=bitcast i8*%I to i8**
%K=load i8*,i8**%J,align 8
br label%T
L:
%M=call i8*@sml_alloc(i32 inreg%q)#0
%N=getelementptr inbounds i8,i8*%M,i64 -4
%O=bitcast i8*%N to i32*
store i32%q,i32*%O,align 4
%P=load i8*,i8**%c,align 8
%Q=sext i32%t to i64
%R=getelementptr inbounds i8,i8*%P,i64%Q
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%M,i8*%R,i32%q,i1 false)
%S=load i8*,i8**%e,align 8
br label%T
T:
%U=phi i8*[%S,%L],[%m,%F]
%V=phi i8*[%P,%L],[%G,%F]
%W=phi i8*[%M,%L],[%K,%F]
store i8*%W,i8**%d,align 8
%X=getelementptr inbounds i8,i8*%U,i64 24
%Y=bitcast i8*%X to i32*
%Z=load i32,i32*%Y,align 4
%aa=icmp eq i32%Z,0
br i1%aa,label%ah,label%ab
ab:
%ac=bitcast i8*%U to i8**
store i8*null,i8**%c,align 8
%ad=sext i32%A to i64
%ae=getelementptr inbounds i8,i8*%V,i64%ad
%af=bitcast i8*%ae to i8**
%ag=load i8*,i8**%af,align 8
br label%au
ah:
%ai=getelementptr inbounds i8,i8*%U,i64 28
%aj=bitcast i8*%ai to i32*
%ak=load i32,i32*%aj,align 4
%al=call i8*@sml_alloc(i32 inreg%ak)#0
%am=getelementptr inbounds i8,i8*%al,i64 -4
%an=bitcast i8*%am to i32*
store i32%ak,i32*%an,align 4
%ao=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ap=sext i32%A to i64
%aq=getelementptr inbounds i8,i8*%ao,i64%ap
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%al,i8*%aq,i32%ak,i1 false)
%ar=bitcast i8**%e to i8***
%as=load i8**,i8***%ar,align 8
%at=load i8*,i8**%d,align 8
br label%au
au:
%av=phi i8*[%at,%ah],[%W,%ab]
%aw=phi i8**[%as,%ah],[%ac,%ab]
%ax=phi i8*[%al,%ah],[%ag,%ab]
store i8*%ax,i8**%c,align 8
%ay=load i8*,i8**%aw,align 8
%az=getelementptr inbounds i8,i8*%ay,i64 16
%aA=bitcast i8*%az to i8*(i8*,i8*)**
%aB=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aA,align 8
%aC=bitcast i8*%ay to i8**
%aD=load i8*,i8**%aC,align 8
store i8*null,i8**%d,align 8
%aE=call fastcc i8*%aB(i8*inreg%aD,i8*inreg%av)
store i8*%aE,i8**%d,align 8
%aF=load i8*,i8**%e,align 8
%aG=getelementptr inbounds i8,i8*%aF,i64 8
%aH=bitcast i8*%aG to i8**
%aI=load i8*,i8**%aH,align 8
%aJ=getelementptr inbounds i8,i8*%aI,i64 16
%aK=bitcast i8*%aJ to i8*(i8*,i8*)**
%aL=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aK,align 8
store i8*null,i8**%e,align 8
%aM=bitcast i8*%aI to i8**
%aN=load i8*,i8**%aM,align 8
%aO=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aP=call fastcc i8*%aL(i8*inreg%aN,i8*inreg%aO)
store i8*%aP,i8**%c,align 8
%aQ=call i8*@sml_alloc(i32 inreg 20)#0
%aR=getelementptr inbounds i8,i8*%aQ,i64 -4
%aS=bitcast i8*%aR to i32*
store i32 1342177296,i32*%aS,align 4
store i8*%aQ,i8**%e,align 8
%aT=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aU=bitcast i8*%aQ to i8**
store i8*%aT,i8**%aU,align 8
%aV=getelementptr inbounds i8,i8*%aQ,i64 8
%aW=bitcast i8*%aV to i8**
store i8*null,i8**%aW,align 8
%aX=getelementptr inbounds i8,i8*%aQ,i64 16
%aY=bitcast i8*%aX to i32*
store i32 3,i32*%aY,align 4
%aZ=call i8*@sml_alloc(i32 inreg 20)#0
%a0=getelementptr inbounds i8,i8*%aZ,i64 -4
%a1=bitcast i8*%a0 to i32*
store i32 1342177296,i32*%a1,align 4
store i8*%aZ,i8**%c,align 8
%a2=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%a3=bitcast i8*%aZ to i8**
store i8*%a2,i8**%a3,align 8
%a4=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%a5=getelementptr inbounds i8,i8*%aZ,i64 8
%a6=bitcast i8*%a5 to i8**
store i8*%a4,i8**%a6,align 8
%a7=getelementptr inbounds i8,i8*%aZ,i64 16
%a8=bitcast i8*%a7 to i32*
store i32 3,i32*%a8,align 4
%a9=call i8*@sml_alloc(i32 inreg 20)#0
%ba=getelementptr inbounds i8,i8*%a9,i64 -4
%bb=bitcast i8*%ba to i32*
store i32 1342177296,i32*%bb,align 4
store i8*%a9,i8**%d,align 8
%bc=getelementptr inbounds i8,i8*%a9,i64 4
%bd=bitcast i8*%bc to i32*
store i32 0,i32*%bd,align 1
%be=bitcast i8*%a9 to i32*
store i32 1,i32*%be,align 4
%bf=getelementptr inbounds i8,i8*%a9,i64 8
%bg=bitcast i8*%bf to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bI,i64 0,i32 2,i64 0),i8**%bg,align 8
%bh=getelementptr inbounds i8,i8*%a9,i64 16
%bi=bitcast i8*%bh to i32*
store i32 2,i32*%bi,align 4
%bj=call i8*@sml_alloc(i32 inreg 20)#0
%bk=getelementptr inbounds i8,i8*%bj,i64 -4
%bl=bitcast i8*%bk to i32*
store i32 1342177296,i32*%bl,align 4
store i8*%bj,i8**%e,align 8
%bm=getelementptr inbounds i8,i8*%bj,i64 4
%bn=bitcast i8*%bm to i32*
store i32 0,i32*%bn,align 1
%bo=bitcast i8*%bj to i32*
store i32 6,i32*%bo,align 4
%bp=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bq=getelementptr inbounds i8,i8*%bj,i64 8
%br=bitcast i8*%bq to i8**
store i8*%bp,i8**%br,align 8
%bs=getelementptr inbounds i8,i8*%bj,i64 16
%bt=bitcast i8*%bs to i32*
store i32 2,i32*%bt,align 4
%bu=call i8*@sml_alloc(i32 inreg 20)#0
%bv=getelementptr inbounds i8,i8*%bu,i64 -4
%bw=bitcast i8*%bv to i32*
store i32 1342177296,i32*%bw,align 4
store i8*%bu,i8**%f,align 8
%bx=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%by=bitcast i8*%bu to i8**
store i8*%bx,i8**%by,align 8
%bz=getelementptr inbounds i8,i8*%bu,i64 8
%bA=bitcast i8*%bz to i8**
store i8*null,i8**%bA,align 8
%bB=getelementptr inbounds i8,i8*%bu,i64 16
%bC=bitcast i8*%bB to i32*
store i32 3,i32*%bC,align 4
%bD=call i8*@sml_alloc(i32 inreg 20)#0
%bE=getelementptr inbounds i8,i8*%bD,i64 -4
%bF=bitcast i8*%bE to i32*
store i32 1342177296,i32*%bF,align 4
store i8*%bD,i8**%d,align 8
%bG=getelementptr inbounds i8,i8*%bD,i64 4
%bH=bitcast i8*%bG to i32*
store i32 0,i32*%bH,align 1
%bI=bitcast i8*%bD to i32*
store i32 1,i32*%bI,align 4
%bJ=getelementptr inbounds i8,i8*%bD,i64 8
%bK=bitcast i8*%bJ to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@aZ,i64 0,i32 2,i64 0),i8**%bK,align 8
%bL=getelementptr inbounds i8,i8*%bD,i64 16
%bM=bitcast i8*%bL to i32*
store i32 2,i32*%bM,align 4
%bN=call i8*@sml_alloc(i32 inreg 20)#0
%bO=getelementptr inbounds i8,i8*%bN,i64 -4
%bP=bitcast i8*%bO to i32*
store i32 1342177296,i32*%bP,align 4
store i8*%bN,i8**%e,align 8
%bQ=getelementptr inbounds i8,i8*%bN,i64 4
%bR=bitcast i8*%bQ to i32*
store i32 0,i32*%bR,align 1
%bS=bitcast i8*%bN to i32*
store i32 6,i32*%bS,align 4
%bT=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bU=getelementptr inbounds i8,i8*%bN,i64 8
%bV=bitcast i8*%bU to i8**
store i8*%bT,i8**%bV,align 8
%bW=getelementptr inbounds i8,i8*%bN,i64 16
%bX=bitcast i8*%bW to i32*
store i32 2,i32*%bX,align 4
%bY=call i8*@sml_alloc(i32 inreg 20)#0
%bZ=getelementptr inbounds i8,i8*%bY,i64 -4
%b0=bitcast i8*%bZ to i32*
store i32 1342177296,i32*%b0,align 4
store i8*%bY,i8**%g,align 8
%b1=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%b2=bitcast i8*%bY to i8**
store i8*%b1,i8**%b2,align 8
%b3=getelementptr inbounds i8,i8*%bY,i64 8
%b4=bitcast i8*%b3 to i8**
store i8*null,i8**%b4,align 8
%b5=getelementptr inbounds i8,i8*%bY,i64 16
%b6=bitcast i8*%b5 to i32*
store i32 3,i32*%b6,align 4
%b7=call i8*@sml_alloc(i32 inreg 20)#0
%b8=getelementptr inbounds i8,i8*%b7,i64 -4
%b9=bitcast i8*%b8 to i32*
store i32 1342177296,i32*%b9,align 4
store i8*%b7,i8**%d,align 8
%ca=getelementptr inbounds i8,i8*%b7,i64 4
%cb=bitcast i8*%ca to i32*
store i32 0,i32*%cb,align 1
%cc=bitcast i8*%b7 to i32*
store i32 1,i32*%cc,align 4
%cd=getelementptr inbounds i8,i8*%b7,i64 8
%ce=bitcast i8*%cd to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bK,i64 0,i32 2,i64 0),i8**%ce,align 8
%cf=getelementptr inbounds i8,i8*%b7,i64 16
%cg=bitcast i8*%cf to i32*
store i32 2,i32*%cg,align 4
%ch=call i8*@sml_alloc(i32 inreg 20)#0
%ci=getelementptr inbounds i8,i8*%ch,i64 -4
%cj=bitcast i8*%ci to i32*
store i32 1342177296,i32*%cj,align 4
store i8*%ch,i8**%e,align 8
%ck=getelementptr inbounds i8,i8*%ch,i64 4
%cl=bitcast i8*%ck to i32*
store i32 0,i32*%cl,align 1
%cm=bitcast i8*%ch to i32*
store i32 6,i32*%cm,align 4
%cn=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%co=getelementptr inbounds i8,i8*%ch,i64 8
%cp=bitcast i8*%co to i8**
store i8*%cn,i8**%cp,align 8
%cq=getelementptr inbounds i8,i8*%ch,i64 16
%cr=bitcast i8*%cq to i32*
store i32 2,i32*%cr,align 4
%cs=call i8*@sml_alloc(i32 inreg 20)#0
%ct=getelementptr inbounds i8,i8*%cs,i64 -4
%cu=bitcast i8*%ct to i32*
store i32 1342177296,i32*%cu,align 4
store i8*%cs,i8**%d,align 8
%cv=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%cw=bitcast i8*%cs to i8**
store i8*%cv,i8**%cw,align 8
%cx=getelementptr inbounds i8,i8*%cs,i64 8
%cy=bitcast i8*%cx to i8**
store i8*null,i8**%cy,align 8
%cz=getelementptr inbounds i8,i8*%cs,i64 16
%cA=bitcast i8*%cz to i32*
store i32 3,i32*%cA,align 4
%cB=call i8*@sml_alloc(i32 inreg 36)#0
%cC=getelementptr inbounds i8,i8*%cB,i64 -4
%cD=bitcast i8*%cC to i32*
store i32 1342177312,i32*%cD,align 4
%cE=bitcast i8*%cB to i8**
store i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aU,i64 0,i32 2)to i8*),i8**%cE,align 8
%cF=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%cG=getelementptr inbounds i8,i8*%cB,i64 8
%cH=bitcast i8*%cG to i8**
store i8*%cF,i8**%cH,align 8
%cI=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%cJ=getelementptr inbounds i8,i8*%cB,i64 16
%cK=bitcast i8*%cJ to i8**
store i8*%cI,i8**%cK,align 8
%cL=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%cM=getelementptr inbounds i8,i8*%cB,i64 24
%cN=bitcast i8*%cM to i8**
store i8*%cL,i8**%cN,align 8
%cO=getelementptr inbounds i8,i8*%cB,i64 32
%cP=bitcast i8*%cO to i32*
store i32 15,i32*%cP,align 4
%cQ=call fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_337(i32 inreg 1,i32 inreg 8,i8*inreg%cB)
%cR=getelementptr inbounds i8,i8*%cQ,i64 16
%cS=bitcast i8*%cR to i8*(i8*,i8*)**
%cT=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%cS,align 8
%cU=bitcast i8*%cQ to i8**
%cV=load i8*,i8**%cU,align 8
%cW=load i8*,i8**%c,align 8
%cX=tail call fastcc i8*%cT(i8*inreg%cV,i8*inreg%cW)
ret i8*%cX
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6tuple2E_560(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%b to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%c,align 8
%h=getelementptr inbounds i8,i8*%b,i64 8
%i=bitcast i8*%h to i8**
%j=load i8*,i8**%i,align 8
store i8*%j,i8**%d,align 8
%k=bitcast i8*%a to i32*
%l=load i32,i32*%k,align 4
%m=getelementptr inbounds i8,i8*%a,i64 4
%n=bitcast i8*%m to i32*
%o=load i32,i32*%n,align 4
%p=getelementptr inbounds i8,i8*%a,i64 8
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=getelementptr inbounds i8,i8*%a,i64 12
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=call i8*@sml_alloc(i32 inreg 36)#0
%w=getelementptr inbounds i8,i8*%v,i64 -4
%x=bitcast i8*%w to i32*
store i32 1342177312,i32*%x,align 4
store i8*%v,i8**%e,align 8
%y=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%z=bitcast i8*%v to i8**
store i8*%y,i8**%z,align 8
%A=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%B=getelementptr inbounds i8,i8*%v,i64 8
%C=bitcast i8*%B to i8**
store i8*%A,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%v,i64 16
%E=bitcast i8*%D to i32*
store i32%l,i32*%E,align 4
%F=getelementptr inbounds i8,i8*%v,i64 20
%G=bitcast i8*%F to i32*
store i32%o,i32*%G,align 4
%H=getelementptr inbounds i8,i8*%v,i64 24
%I=bitcast i8*%H to i32*
store i32%r,i32*%I,align 4
%J=getelementptr inbounds i8,i8*%v,i64 28
%K=bitcast i8*%J to i32*
store i32%u,i32*%K,align 4
%L=getelementptr inbounds i8,i8*%v,i64 32
%M=bitcast i8*%L to i32*
store i32 3,i32*%M,align 4
%N=call i8*@sml_alloc(i32 inreg 28)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32 1342177304,i32*%P,align 4
%Q=load i8*,i8**%e,align 8
%R=bitcast i8*%N to i8**
store i8*%Q,i8**%R,align 8
%S=getelementptr inbounds i8,i8*%N,i64 8
%T=bitcast i8*%S to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6tuple2E_559 to void(...)*),void(...)**%T,align 8
%U=getelementptr inbounds i8,i8*%N,i64 16
%V=bitcast i8*%U to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6tuple2E_559 to void(...)*),void(...)**%V,align 8
%W=getelementptr inbounds i8,i8*%N,i64 24
%X=bitcast i8*%W to i32*
store i32 -2147483647,i32*%X,align 4
ret i8*%N
}
define fastcc i8*@_SMLFN10TermFormat10FormatComb6tuple2E(i32 inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d)#4 gc"smlsharp"{
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=call i8*@sml_alloc(i32 inreg 20)#0
%g=bitcast i8*%f to i32*
%h=getelementptr inbounds i8,i8*%f,i64 -4
%i=bitcast i8*%h to i32*
store i32 1342177296,i32*%i,align 4
store i8*%f,i8**%e,align 8
store i32%a,i32*%g,align 4
%j=getelementptr inbounds i8,i8*%f,i64 4
%k=bitcast i8*%j to i32*
store i32%b,i32*%k,align 4
%l=getelementptr inbounds i8,i8*%f,i64 8
%m=bitcast i8*%l to i32*
store i32%c,i32*%m,align 4
%n=getelementptr inbounds i8,i8*%f,i64 12
%o=bitcast i8*%n to i32*
store i32%d,i32*%o,align 4
%p=getelementptr inbounds i8,i8*%f,i64 16
%q=bitcast i8*%p to i32*
store i32 0,i32*%q,align 4
%r=call i8*@sml_alloc(i32 inreg 28)#0
%s=getelementptr inbounds i8,i8*%r,i64 -4
%t=bitcast i8*%s to i32*
store i32 1342177304,i32*%t,align 4
%u=load i8*,i8**%e,align 8
%v=bitcast i8*%r to i8**
store i8*%u,i8**%v,align 8
%w=getelementptr inbounds i8,i8*%r,i64 8
%x=bitcast i8*%w to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6tuple2E_560 to void(...)*),void(...)**%x,align 8
%y=getelementptr inbounds i8,i8*%r,i64 16
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6tuple2E_560 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%r,i64 24
%B=bitcast i8*%A to i32*
store i32 -2147483647,i32*%B,align 4
ret i8*%r
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6tuple3E_563(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6tuple3E_571(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
n:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%f,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%l,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%f,align 8
br label%l
l:
%m=phi i8*[%k,%j],[%a,%n]
%o=getelementptr inbounds i8,i8*%m,i64 28
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=add i32%q,-1
%s=sub i32 0,%q
%t=and i32%r,%s
%u=getelementptr inbounds i8,i8*%m,i64 36
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=add i32%r,%w
%y=add i32%x,%t
%z=sub i32 0,%w
%A=and i32%y,%z
%B=getelementptr inbounds i8,i8*%m,i64 44
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=add i32%w,-1
%F=add i32%E,%D
%G=add i32%F,%A
%H=sub i32 0,%D
%I=and i32%G,%H
%J=getelementptr inbounds i8,i8*%m,i64 24
%K=bitcast i8*%J to i32*
%L=load i32,i32*%K,align 4
%M=icmp eq i32%L,0
br i1%M,label%T,label%N
N:
%O=load i8*,i8**%c,align 8
%P=sext i32%t to i64
%Q=getelementptr inbounds i8,i8*%O,i64%P
%R=bitcast i8*%Q to i8**
%S=load i8*,i8**%R,align 8
br label%ab
T:
%U=call i8*@sml_alloc(i32 inreg%q)#0
%V=getelementptr inbounds i8,i8*%U,i64 -4
%W=bitcast i8*%V to i32*
store i32%q,i32*%W,align 4
%X=load i8*,i8**%c,align 8
%Y=sext i32%t to i64
%Z=getelementptr inbounds i8,i8*%X,i64%Y
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%U,i8*%Z,i32%q,i1 false)
%aa=load i8*,i8**%f,align 8
br label%ab
ab:
%ac=phi i8*[%aa,%T],[%m,%N]
%ad=phi i8*[%X,%T],[%O,%N]
%ae=phi i8*[%U,%T],[%S,%N]
store i8*%ae,i8**%d,align 8
%af=getelementptr inbounds i8,i8*%ac,i64 32
%ag=bitcast i8*%af to i32*
%ah=load i32,i32*%ag,align 4
%ai=icmp eq i32%ah,0
br i1%ai,label%ao,label%aj
aj:
%ak=sext i32%A to i64
%al=getelementptr inbounds i8,i8*%ad,i64%ak
%am=bitcast i8*%al to i8**
%an=load i8*,i8**%am,align 8
br label%az
ao:
%ap=getelementptr inbounds i8,i8*%ac,i64 36
%aq=bitcast i8*%ap to i32*
%ar=load i32,i32*%aq,align 4
%as=call i8*@sml_alloc(i32 inreg%ar)#0
%at=getelementptr inbounds i8,i8*%as,i64 -4
%au=bitcast i8*%at to i32*
store i32%ar,i32*%au,align 4
%av=load i8*,i8**%c,align 8
%aw=sext i32%A to i64
%ax=getelementptr inbounds i8,i8*%av,i64%aw
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%as,i8*%ax,i32%ar,i1 false)
%ay=load i8*,i8**%f,align 8
br label%az
az:
%aA=phi i8*[%ay,%ao],[%ac,%aj]
%aB=phi i8*[%av,%ao],[%ad,%aj]
%aC=phi i8*[%as,%ao],[%an,%aj]
store i8*%aC,i8**%e,align 8
%aD=getelementptr inbounds i8,i8*%aA,i64 40
%aE=bitcast i8*%aD to i32*
%aF=load i32,i32*%aE,align 4
%aG=icmp eq i32%aF,0
br i1%aG,label%aN,label%aH
aH:
%aI=bitcast i8*%aA to i8**
store i8*null,i8**%c,align 8
%aJ=sext i32%I to i64
%aK=getelementptr inbounds i8,i8*%aB,i64%aJ
%aL=bitcast i8*%aK to i8**
%aM=load i8*,i8**%aL,align 8
br label%aZ
aN:
%aO=getelementptr inbounds i8,i8*%aA,i64 44
%aP=bitcast i8*%aO to i32*
%aQ=load i32,i32*%aP,align 4
%aR=call i8*@sml_alloc(i32 inreg%aQ)#0
%aS=getelementptr inbounds i8,i8*%aR,i64 -4
%aT=bitcast i8*%aS to i32*
store i32%aQ,i32*%aT,align 4
%aU=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aV=sext i32%I to i64
%aW=getelementptr inbounds i8,i8*%aU,i64%aV
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aR,i8*%aW,i32%aQ,i1 false)
%aX=bitcast i8**%f to i8***
%aY=load i8**,i8***%aX,align 8
br label%aZ
aZ:
%a0=phi i8**[%aY,%aN],[%aI,%aH]
%a1=phi i8*[%aR,%aN],[%aM,%aH]
store i8*%a1,i8**%c,align 8
%a2=load i8*,i8**%a0,align 8
%a3=getelementptr inbounds i8,i8*%a2,i64 16
%a4=bitcast i8*%a3 to i8*(i8*,i8*)**
%a5=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a4,align 8
%a6=bitcast i8*%a2 to i8**
%a7=load i8*,i8**%a6,align 8
%a8=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%a9=call fastcc i8*%a5(i8*inreg%a7,i8*inreg%a8)
store i8*%a9,i8**%d,align 8
%ba=load i8*,i8**%f,align 8
%bb=getelementptr inbounds i8,i8*%ba,i64 8
%bc=bitcast i8*%bb to i8**
%bd=load i8*,i8**%bc,align 8
%be=getelementptr inbounds i8,i8*%bd,i64 16
%bf=bitcast i8*%be to i8*(i8*,i8*)**
%bg=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bf,align 8
%bh=bitcast i8*%bd to i8**
%bi=load i8*,i8**%bh,align 8
%bj=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bk=call fastcc i8*%bg(i8*inreg%bi,i8*inreg%bj)
store i8*%bk,i8**%e,align 8
%bl=load i8*,i8**%f,align 8
%bm=getelementptr inbounds i8,i8*%bl,i64 16
%bn=bitcast i8*%bm to i8**
%bo=load i8*,i8**%bn,align 8
%bp=getelementptr inbounds i8,i8*%bo,i64 16
%bq=bitcast i8*%bp to i8*(i8*,i8*)**
%br=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bq,align 8
store i8*null,i8**%f,align 8
%bs=bitcast i8*%bo to i8**
%bt=load i8*,i8**%bs,align 8
%bu=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bv=call fastcc i8*%br(i8*inreg%bt,i8*inreg%bu)
store i8*%bv,i8**%c,align 8
%bw=call i8*@sml_alloc(i32 inreg 20)#0
%bx=getelementptr inbounds i8,i8*%bw,i64 -4
%by=bitcast i8*%bx to i32*
store i32 1342177296,i32*%by,align 4
store i8*%bw,i8**%f,align 8
%bz=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bA=bitcast i8*%bw to i8**
store i8*%bz,i8**%bA,align 8
%bB=getelementptr inbounds i8,i8*%bw,i64 8
%bC=bitcast i8*%bB to i8**
store i8*null,i8**%bC,align 8
%bD=getelementptr inbounds i8,i8*%bw,i64 16
%bE=bitcast i8*%bD to i32*
store i32 3,i32*%bE,align 4
%bF=call i8*@sml_alloc(i32 inreg 20)#0
%bG=getelementptr inbounds i8,i8*%bF,i64 -4
%bH=bitcast i8*%bG to i32*
store i32 1342177296,i32*%bH,align 4
store i8*%bF,i8**%g,align 8
%bI=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bJ=bitcast i8*%bF to i8**
store i8*%bI,i8**%bJ,align 8
%bK=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%bL=getelementptr inbounds i8,i8*%bF,i64 8
%bM=bitcast i8*%bL to i8**
store i8*%bK,i8**%bM,align 8
%bN=getelementptr inbounds i8,i8*%bF,i64 16
%bO=bitcast i8*%bN to i32*
store i32 3,i32*%bO,align 4
%bP=call i8*@sml_alloc(i32 inreg 20)#0
%bQ=getelementptr inbounds i8,i8*%bP,i64 -4
%bR=bitcast i8*%bQ to i32*
store i32 1342177296,i32*%bR,align 4
store i8*%bP,i8**%c,align 8
%bS=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bT=bitcast i8*%bP to i8**
store i8*%bS,i8**%bT,align 8
%bU=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%bV=getelementptr inbounds i8,i8*%bP,i64 8
%bW=bitcast i8*%bV to i8**
store i8*%bU,i8**%bW,align 8
%bX=getelementptr inbounds i8,i8*%bP,i64 16
%bY=bitcast i8*%bX to i32*
store i32 3,i32*%bY,align 4
%bZ=call i8*@sml_alloc(i32 inreg 20)#0
%b0=getelementptr inbounds i8,i8*%bZ,i64 -4
%b1=bitcast i8*%b0 to i32*
store i32 1342177296,i32*%b1,align 4
store i8*%bZ,i8**%d,align 8
%b2=getelementptr inbounds i8,i8*%bZ,i64 4
%b3=bitcast i8*%b2 to i32*
store i32 0,i32*%b3,align 1
%b4=bitcast i8*%bZ to i32*
store i32 1,i32*%b4,align 4
%b5=getelementptr inbounds i8,i8*%bZ,i64 8
%b6=bitcast i8*%b5 to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bI,i64 0,i32 2,i64 0),i8**%b6,align 8
%b7=getelementptr inbounds i8,i8*%bZ,i64 16
%b8=bitcast i8*%b7 to i32*
store i32 2,i32*%b8,align 4
%b9=call i8*@sml_alloc(i32 inreg 20)#0
%ca=getelementptr inbounds i8,i8*%b9,i64 -4
%cb=bitcast i8*%ca to i32*
store i32 1342177296,i32*%cb,align 4
store i8*%b9,i8**%e,align 8
%cc=getelementptr inbounds i8,i8*%b9,i64 4
%cd=bitcast i8*%cc to i32*
store i32 0,i32*%cd,align 1
%ce=bitcast i8*%b9 to i32*
store i32 6,i32*%ce,align 4
%cf=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%cg=getelementptr inbounds i8,i8*%b9,i64 8
%ch=bitcast i8*%cg to i8**
store i8*%cf,i8**%ch,align 8
%ci=getelementptr inbounds i8,i8*%b9,i64 16
%cj=bitcast i8*%ci to i32*
store i32 2,i32*%cj,align 4
%ck=call i8*@sml_alloc(i32 inreg 20)#0
%cl=getelementptr inbounds i8,i8*%ck,i64 -4
%cm=bitcast i8*%cl to i32*
store i32 1342177296,i32*%cm,align 4
store i8*%ck,i8**%f,align 8
%cn=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%co=bitcast i8*%ck to i8**
store i8*%cn,i8**%co,align 8
%cp=getelementptr inbounds i8,i8*%ck,i64 8
%cq=bitcast i8*%cp to i8**
store i8*null,i8**%cq,align 8
%cr=getelementptr inbounds i8,i8*%ck,i64 16
%cs=bitcast i8*%cr to i32*
store i32 3,i32*%cs,align 4
%ct=call i8*@sml_alloc(i32 inreg 20)#0
%cu=getelementptr inbounds i8,i8*%ct,i64 -4
%cv=bitcast i8*%cu to i32*
store i32 1342177296,i32*%cv,align 4
store i8*%ct,i8**%d,align 8
%cw=getelementptr inbounds i8,i8*%ct,i64 4
%cx=bitcast i8*%cw to i32*
store i32 0,i32*%cx,align 1
%cy=bitcast i8*%ct to i32*
store i32 1,i32*%cy,align 4
%cz=getelementptr inbounds i8,i8*%ct,i64 8
%cA=bitcast i8*%cz to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@aZ,i64 0,i32 2,i64 0),i8**%cA,align 8
%cB=getelementptr inbounds i8,i8*%ct,i64 16
%cC=bitcast i8*%cB to i32*
store i32 2,i32*%cC,align 4
%cD=call i8*@sml_alloc(i32 inreg 20)#0
%cE=getelementptr inbounds i8,i8*%cD,i64 -4
%cF=bitcast i8*%cE to i32*
store i32 1342177296,i32*%cF,align 4
store i8*%cD,i8**%e,align 8
%cG=getelementptr inbounds i8,i8*%cD,i64 4
%cH=bitcast i8*%cG to i32*
store i32 0,i32*%cH,align 1
%cI=bitcast i8*%cD to i32*
store i32 6,i32*%cI,align 4
%cJ=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%cK=getelementptr inbounds i8,i8*%cD,i64 8
%cL=bitcast i8*%cK to i8**
store i8*%cJ,i8**%cL,align 8
%cM=getelementptr inbounds i8,i8*%cD,i64 16
%cN=bitcast i8*%cM to i32*
store i32 2,i32*%cN,align 4
%cO=call i8*@sml_alloc(i32 inreg 20)#0
%cP=getelementptr inbounds i8,i8*%cO,i64 -4
%cQ=bitcast i8*%cP to i32*
store i32 1342177296,i32*%cQ,align 4
store i8*%cO,i8**%g,align 8
%cR=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%cS=bitcast i8*%cO to i8**
store i8*%cR,i8**%cS,align 8
%cT=getelementptr inbounds i8,i8*%cO,i64 8
%cU=bitcast i8*%cT to i8**
store i8*null,i8**%cU,align 8
%cV=getelementptr inbounds i8,i8*%cO,i64 16
%cW=bitcast i8*%cV to i32*
store i32 3,i32*%cW,align 4
%cX=call i8*@sml_alloc(i32 inreg 20)#0
%cY=getelementptr inbounds i8,i8*%cX,i64 -4
%cZ=bitcast i8*%cY to i32*
store i32 1342177296,i32*%cZ,align 4
store i8*%cX,i8**%d,align 8
%c0=getelementptr inbounds i8,i8*%cX,i64 4
%c1=bitcast i8*%c0 to i32*
store i32 0,i32*%c1,align 1
%c2=bitcast i8*%cX to i32*
store i32 1,i32*%c2,align 4
%c3=getelementptr inbounds i8,i8*%cX,i64 8
%c4=bitcast i8*%c3 to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bK,i64 0,i32 2,i64 0),i8**%c4,align 8
%c5=getelementptr inbounds i8,i8*%cX,i64 16
%c6=bitcast i8*%c5 to i32*
store i32 2,i32*%c6,align 4
%c7=call i8*@sml_alloc(i32 inreg 20)#0
%c8=getelementptr inbounds i8,i8*%c7,i64 -4
%c9=bitcast i8*%c8 to i32*
store i32 1342177296,i32*%c9,align 4
store i8*%c7,i8**%e,align 8
%da=getelementptr inbounds i8,i8*%c7,i64 4
%db=bitcast i8*%da to i32*
store i32 0,i32*%db,align 1
%dc=bitcast i8*%c7 to i32*
store i32 6,i32*%dc,align 4
%dd=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%de=getelementptr inbounds i8,i8*%c7,i64 8
%df=bitcast i8*%de to i8**
store i8*%dd,i8**%df,align 8
%dg=getelementptr inbounds i8,i8*%c7,i64 16
%dh=bitcast i8*%dg to i32*
store i32 2,i32*%dh,align 4
%di=call i8*@sml_alloc(i32 inreg 20)#0
%dj=getelementptr inbounds i8,i8*%di,i64 -4
%dk=bitcast i8*%dj to i32*
store i32 1342177296,i32*%dk,align 4
store i8*%di,i8**%d,align 8
%dl=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%dm=bitcast i8*%di to i8**
store i8*%dl,i8**%dm,align 8
%dn=getelementptr inbounds i8,i8*%di,i64 8
%do=bitcast i8*%dn to i8**
store i8*null,i8**%do,align 8
%dp=getelementptr inbounds i8,i8*%di,i64 16
%dq=bitcast i8*%dp to i32*
store i32 3,i32*%dq,align 4
%dr=call i8*@sml_alloc(i32 inreg 36)#0
%ds=getelementptr inbounds i8,i8*%dr,i64 -4
%dt=bitcast i8*%ds to i32*
store i32 1342177312,i32*%dt,align 4
%du=bitcast i8*%dr to i8**
store i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aW,i64 0,i32 2)to i8*),i8**%du,align 8
%dv=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%dw=getelementptr inbounds i8,i8*%dr,i64 8
%dx=bitcast i8*%dw to i8**
store i8*%dv,i8**%dx,align 8
%dy=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%dz=getelementptr inbounds i8,i8*%dr,i64 16
%dA=bitcast i8*%dz to i8**
store i8*%dy,i8**%dA,align 8
%dB=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%dC=getelementptr inbounds i8,i8*%dr,i64 24
%dD=bitcast i8*%dC to i8**
store i8*%dB,i8**%dD,align 8
%dE=getelementptr inbounds i8,i8*%dr,i64 32
%dF=bitcast i8*%dE to i32*
store i32 15,i32*%dF,align 4
%dG=call fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_337(i32 inreg 1,i32 inreg 8,i8*inreg%dr)
%dH=getelementptr inbounds i8,i8*%dG,i64 16
%dI=bitcast i8*%dH to i8*(i8*,i8*)**
%dJ=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%dI,align 8
%dK=bitcast i8*%dG to i8**
%dL=load i8*,i8**%dK,align 8
%dM=load i8*,i8**%c,align 8
%dN=tail call fastcc i8*%dJ(i8*inreg%dL,i8*inreg%dM)
ret i8*%dN
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6tuple3E_572(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
%g=bitcast i8*%b to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%c,align 8
%i=getelementptr inbounds i8,i8*%b,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%d,align 8
%l=getelementptr inbounds i8,i8*%b,i64 16
%m=bitcast i8*%l to i8**
%n=load i8*,i8**%m,align 8
store i8*%n,i8**%e,align 8
%o=bitcast i8*%a to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%a,i64 4
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=getelementptr inbounds i8,i8*%a,i64 8
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=getelementptr inbounds i8,i8*%a,i64 12
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=getelementptr inbounds i8,i8*%a,i64 16
%A=bitcast i8*%z to i32*
%B=load i32,i32*%A,align 4
%C=getelementptr inbounds i8,i8*%a,i64 20
%D=bitcast i8*%C to i32*
%E=load i32,i32*%D,align 4
%F=call i8*@sml_alloc(i32 inreg 52)#0
%G=getelementptr inbounds i8,i8*%F,i64 -4
%H=bitcast i8*%G to i32*
store i32 1342177328,i32*%H,align 4
store i8*%F,i8**%f,align 8
%I=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%J=bitcast i8*%F to i8**
store i8*%I,i8**%J,align 8
%K=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%L=getelementptr inbounds i8,i8*%F,i64 8
%M=bitcast i8*%L to i8**
store i8*%K,i8**%M,align 8
%N=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%O=getelementptr inbounds i8,i8*%F,i64 16
%P=bitcast i8*%O to i8**
store i8*%N,i8**%P,align 8
%Q=getelementptr inbounds i8,i8*%F,i64 24
%R=bitcast i8*%Q to i32*
store i32%p,i32*%R,align 4
%S=getelementptr inbounds i8,i8*%F,i64 28
%T=bitcast i8*%S to i32*
store i32%s,i32*%T,align 4
%U=getelementptr inbounds i8,i8*%F,i64 32
%V=bitcast i8*%U to i32*
store i32%v,i32*%V,align 4
%W=getelementptr inbounds i8,i8*%F,i64 36
%X=bitcast i8*%W to i32*
store i32%y,i32*%X,align 4
%Y=getelementptr inbounds i8,i8*%F,i64 40
%Z=bitcast i8*%Y to i32*
store i32%B,i32*%Z,align 4
%aa=getelementptr inbounds i8,i8*%F,i64 44
%ab=bitcast i8*%aa to i32*
store i32%E,i32*%ab,align 4
%ac=getelementptr inbounds i8,i8*%F,i64 48
%ad=bitcast i8*%ac to i32*
store i32 7,i32*%ad,align 4
%ae=call i8*@sml_alloc(i32 inreg 28)#0
%af=getelementptr inbounds i8,i8*%ae,i64 -4
%ag=bitcast i8*%af to i32*
store i32 1342177304,i32*%ag,align 4
%ah=load i8*,i8**%f,align 8
%ai=bitcast i8*%ae to i8**
store i8*%ah,i8**%ai,align 8
%aj=getelementptr inbounds i8,i8*%ae,i64 8
%ak=bitcast i8*%aj to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6tuple3E_571 to void(...)*),void(...)**%ak,align 8
%al=getelementptr inbounds i8,i8*%ae,i64 16
%am=bitcast i8*%al to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6tuple3E_571 to void(...)*),void(...)**%am,align 8
%an=getelementptr inbounds i8,i8*%ae,i64 24
%ao=bitcast i8*%an to i32*
store i32 -2147483647,i32*%ao,align 4
ret i8*%ae
}
define fastcc i8*@_SMLFN10TermFormat10FormatComb6tuple3E(i32 inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e,i32 inreg%f)#4 gc"smlsharp"{
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%g,i8*null)#0
%h=call i8*@sml_alloc(i32 inreg 28)#0
%i=bitcast i8*%h to i32*
%j=getelementptr inbounds i8,i8*%h,i64 -4
%k=bitcast i8*%j to i32*
store i32 1342177304,i32*%k,align 4
store i8*%h,i8**%g,align 8
store i32%a,i32*%i,align 4
%l=getelementptr inbounds i8,i8*%h,i64 4
%m=bitcast i8*%l to i32*
store i32%b,i32*%m,align 4
%n=getelementptr inbounds i8,i8*%h,i64 8
%o=bitcast i8*%n to i32*
store i32%c,i32*%o,align 4
%p=getelementptr inbounds i8,i8*%h,i64 12
%q=bitcast i8*%p to i32*
store i32%d,i32*%q,align 4
%r=getelementptr inbounds i8,i8*%h,i64 16
%s=bitcast i8*%r to i32*
store i32%e,i32*%s,align 4
%t=getelementptr inbounds i8,i8*%h,i64 20
%u=bitcast i8*%t to i32*
store i32%f,i32*%u,align 4
%v=getelementptr inbounds i8,i8*%h,i64 24
%w=bitcast i8*%v to i32*
store i32 0,i32*%w,align 4
%x=call i8*@sml_alloc(i32 inreg 28)#0
%y=getelementptr inbounds i8,i8*%x,i64 -4
%z=bitcast i8*%y to i32*
store i32 1342177304,i32*%z,align 4
%A=load i8*,i8**%g,align 8
%B=bitcast i8*%x to i8**
store i8*%A,i8**%B,align 8
%C=getelementptr inbounds i8,i8*%x,i64 8
%D=bitcast i8*%C to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6tuple3E_572 to void(...)*),void(...)**%D,align 8
%E=getelementptr inbounds i8,i8*%x,i64 16
%F=bitcast i8*%E to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6tuple3E_572 to void(...)*),void(...)**%F,align 8
%G=getelementptr inbounds i8,i8*%x,i64 24
%H=bitcast i8*%G to i32*
store i32 -2147483647,i32*%H,align 4
ret i8*%x
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6tuple4E_575(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6tuple4E_583(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
n:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%g,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%l,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%g,align 8
br label%l
l:
%m=phi i8*[%k,%j],[%a,%n]
%o=getelementptr inbounds i8,i8*%m,i64 36
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=add i32%q,-1
%s=sub i32 0,%q
%t=and i32%r,%s
%u=getelementptr inbounds i8,i8*%m,i64 44
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=add i32%r,%w
%y=add i32%x,%t
%z=sub i32 0,%w
%A=and i32%y,%z
%B=getelementptr inbounds i8,i8*%m,i64 52
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=add i32%w,-1
%F=add i32%E,%D
%G=add i32%F,%A
%H=sub i32 0,%D
%I=and i32%G,%H
%J=getelementptr inbounds i8,i8*%m,i64 60
%K=bitcast i8*%J to i32*
%L=load i32,i32*%K,align 4
%M=add i32%D,-1
%N=add i32%M,%L
%O=add i32%N,%I
%P=sub i32 0,%L
%Q=and i32%O,%P
%R=getelementptr inbounds i8,i8*%m,i64 32
%S=bitcast i8*%R to i32*
%T=load i32,i32*%S,align 4
%U=icmp eq i32%T,0
br i1%U,label%ab,label%V
V:
%W=load i8*,i8**%c,align 8
%X=sext i32%t to i64
%Y=getelementptr inbounds i8,i8*%W,i64%X
%Z=bitcast i8*%Y to i8**
%aa=load i8*,i8**%Z,align 8
br label%aj
ab:
%ac=call i8*@sml_alloc(i32 inreg%q)#0
%ad=getelementptr inbounds i8,i8*%ac,i64 -4
%ae=bitcast i8*%ad to i32*
store i32%q,i32*%ae,align 4
%af=load i8*,i8**%c,align 8
%ag=sext i32%t to i64
%ah=getelementptr inbounds i8,i8*%af,i64%ag
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ac,i8*%ah,i32%q,i1 false)
%ai=load i8*,i8**%g,align 8
br label%aj
aj:
%ak=phi i8*[%ai,%ab],[%m,%V]
%al=phi i8*[%af,%ab],[%W,%V]
%am=phi i8*[%ac,%ab],[%aa,%V]
store i8*%am,i8**%d,align 8
%an=getelementptr inbounds i8,i8*%ak,i64 40
%ao=bitcast i8*%an to i32*
%ap=load i32,i32*%ao,align 4
%aq=icmp eq i32%ap,0
br i1%aq,label%aw,label%ar
ar:
%as=sext i32%A to i64
%at=getelementptr inbounds i8,i8*%al,i64%as
%au=bitcast i8*%at to i8**
%av=load i8*,i8**%au,align 8
br label%aH
aw:
%ax=getelementptr inbounds i8,i8*%ak,i64 44
%ay=bitcast i8*%ax to i32*
%az=load i32,i32*%ay,align 4
%aA=call i8*@sml_alloc(i32 inreg%az)#0
%aB=getelementptr inbounds i8,i8*%aA,i64 -4
%aC=bitcast i8*%aB to i32*
store i32%az,i32*%aC,align 4
%aD=load i8*,i8**%c,align 8
%aE=sext i32%A to i64
%aF=getelementptr inbounds i8,i8*%aD,i64%aE
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aA,i8*%aF,i32%az,i1 false)
%aG=load i8*,i8**%g,align 8
br label%aH
aH:
%aI=phi i8*[%aG,%aw],[%ak,%ar]
%aJ=phi i8*[%aD,%aw],[%al,%ar]
%aK=phi i8*[%aA,%aw],[%av,%ar]
store i8*%aK,i8**%e,align 8
%aL=getelementptr inbounds i8,i8*%aI,i64 48
%aM=bitcast i8*%aL to i32*
%aN=load i32,i32*%aM,align 4
%aO=icmp eq i32%aN,0
br i1%aO,label%aU,label%aP
aP:
%aQ=sext i32%I to i64
%aR=getelementptr inbounds i8,i8*%aJ,i64%aQ
%aS=bitcast i8*%aR to i8**
%aT=load i8*,i8**%aS,align 8
br label%a5
aU:
%aV=getelementptr inbounds i8,i8*%aI,i64 52
%aW=bitcast i8*%aV to i32*
%aX=load i32,i32*%aW,align 4
%aY=call i8*@sml_alloc(i32 inreg%aX)#0
%aZ=getelementptr inbounds i8,i8*%aY,i64 -4
%a0=bitcast i8*%aZ to i32*
store i32%aX,i32*%a0,align 4
%a1=load i8*,i8**%c,align 8
%a2=sext i32%I to i64
%a3=getelementptr inbounds i8,i8*%a1,i64%a2
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aY,i8*%a3,i32%aX,i1 false)
%a4=load i8*,i8**%g,align 8
br label%a5
a5:
%a6=phi i8*[%a4,%aU],[%aI,%aP]
%a7=phi i8*[%a1,%aU],[%aJ,%aP]
%a8=phi i8*[%aY,%aU],[%aT,%aP]
store i8*%a8,i8**%f,align 8
%a9=getelementptr inbounds i8,i8*%a6,i64 56
%ba=bitcast i8*%a9 to i32*
%bb=load i32,i32*%ba,align 4
%bc=icmp eq i32%bb,0
br i1%bc,label%bj,label%bd
bd:
%be=bitcast i8*%a6 to i8**
store i8*null,i8**%c,align 8
%bf=sext i32%Q to i64
%bg=getelementptr inbounds i8,i8*%a7,i64%bf
%bh=bitcast i8*%bg to i8**
%bi=load i8*,i8**%bh,align 8
br label%bv
bj:
%bk=getelementptr inbounds i8,i8*%a6,i64 60
%bl=bitcast i8*%bk to i32*
%bm=load i32,i32*%bl,align 4
%bn=call i8*@sml_alloc(i32 inreg%bm)#0
%bo=getelementptr inbounds i8,i8*%bn,i64 -4
%bp=bitcast i8*%bo to i32*
store i32%bm,i32*%bp,align 4
%bq=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%br=sext i32%Q to i64
%bs=getelementptr inbounds i8,i8*%bq,i64%br
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bn,i8*%bs,i32%bm,i1 false)
%bt=bitcast i8**%g to i8***
%bu=load i8**,i8***%bt,align 8
br label%bv
bv:
%bw=phi i8**[%bu,%bj],[%be,%bd]
%bx=phi i8*[%bn,%bj],[%bi,%bd]
store i8*%bx,i8**%c,align 8
%by=load i8*,i8**%bw,align 8
%bz=getelementptr inbounds i8,i8*%by,i64 16
%bA=bitcast i8*%bz to i8*(i8*,i8*)**
%bB=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bA,align 8
%bC=bitcast i8*%by to i8**
%bD=load i8*,i8**%bC,align 8
%bE=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bF=call fastcc i8*%bB(i8*inreg%bD,i8*inreg%bE)
store i8*%bF,i8**%d,align 8
%bG=load i8*,i8**%g,align 8
%bH=getelementptr inbounds i8,i8*%bG,i64 8
%bI=bitcast i8*%bH to i8**
%bJ=load i8*,i8**%bI,align 8
%bK=getelementptr inbounds i8,i8*%bJ,i64 16
%bL=bitcast i8*%bK to i8*(i8*,i8*)**
%bM=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bL,align 8
%bN=bitcast i8*%bJ to i8**
%bO=load i8*,i8**%bN,align 8
%bP=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bQ=call fastcc i8*%bM(i8*inreg%bO,i8*inreg%bP)
store i8*%bQ,i8**%e,align 8
%bR=load i8*,i8**%g,align 8
%bS=getelementptr inbounds i8,i8*%bR,i64 16
%bT=bitcast i8*%bS to i8**
%bU=load i8*,i8**%bT,align 8
%bV=getelementptr inbounds i8,i8*%bU,i64 16
%bW=bitcast i8*%bV to i8*(i8*,i8*)**
%bX=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bW,align 8
%bY=bitcast i8*%bU to i8**
%bZ=load i8*,i8**%bY,align 8
%b0=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%b1=call fastcc i8*%bX(i8*inreg%bZ,i8*inreg%b0)
store i8*%b1,i8**%f,align 8
%b2=load i8*,i8**%g,align 8
%b3=getelementptr inbounds i8,i8*%b2,i64 24
%b4=bitcast i8*%b3 to i8**
%b5=load i8*,i8**%b4,align 8
%b6=getelementptr inbounds i8,i8*%b5,i64 16
%b7=bitcast i8*%b6 to i8*(i8*,i8*)**
%b8=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%b7,align 8
store i8*null,i8**%g,align 8
%b9=bitcast i8*%b5 to i8**
%ca=load i8*,i8**%b9,align 8
%cb=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cc=call fastcc i8*%b8(i8*inreg%ca,i8*inreg%cb)
store i8*%cc,i8**%c,align 8
%cd=call i8*@sml_alloc(i32 inreg 20)#0
%ce=getelementptr inbounds i8,i8*%cd,i64 -4
%cf=bitcast i8*%ce to i32*
store i32 1342177296,i32*%cf,align 4
store i8*%cd,i8**%g,align 8
%cg=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ch=bitcast i8*%cd to i8**
store i8*%cg,i8**%ch,align 8
%ci=getelementptr inbounds i8,i8*%cd,i64 8
%cj=bitcast i8*%ci to i8**
store i8*null,i8**%cj,align 8
%ck=getelementptr inbounds i8,i8*%cd,i64 16
%cl=bitcast i8*%ck to i32*
store i32 3,i32*%cl,align 4
%cm=call i8*@sml_alloc(i32 inreg 20)#0
%cn=getelementptr inbounds i8,i8*%cm,i64 -4
%co=bitcast i8*%cn to i32*
store i32 1342177296,i32*%co,align 4
store i8*%cm,i8**%c,align 8
%cp=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%cq=bitcast i8*%cm to i8**
store i8*%cp,i8**%cq,align 8
%cr=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%cs=getelementptr inbounds i8,i8*%cm,i64 8
%ct=bitcast i8*%cs to i8**
store i8*%cr,i8**%ct,align 8
%cu=getelementptr inbounds i8,i8*%cm,i64 16
%cv=bitcast i8*%cu to i32*
store i32 3,i32*%cv,align 4
%cw=call i8*@sml_alloc(i32 inreg 20)#0
%cx=getelementptr inbounds i8,i8*%cw,i64 -4
%cy=bitcast i8*%cx to i32*
store i32 1342177296,i32*%cy,align 4
store i8*%cw,i8**%f,align 8
%cz=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%cA=bitcast i8*%cw to i8**
store i8*%cz,i8**%cA,align 8
%cB=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cC=getelementptr inbounds i8,i8*%cw,i64 8
%cD=bitcast i8*%cC to i8**
store i8*%cB,i8**%cD,align 8
%cE=getelementptr inbounds i8,i8*%cw,i64 16
%cF=bitcast i8*%cE to i32*
store i32 3,i32*%cF,align 4
%cG=call i8*@sml_alloc(i32 inreg 20)#0
%cH=getelementptr inbounds i8,i8*%cG,i64 -4
%cI=bitcast i8*%cH to i32*
store i32 1342177296,i32*%cI,align 4
store i8*%cG,i8**%c,align 8
%cJ=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%cK=bitcast i8*%cG to i8**
store i8*%cJ,i8**%cK,align 8
%cL=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%cM=getelementptr inbounds i8,i8*%cG,i64 8
%cN=bitcast i8*%cM to i8**
store i8*%cL,i8**%cN,align 8
%cO=getelementptr inbounds i8,i8*%cG,i64 16
%cP=bitcast i8*%cO to i32*
store i32 3,i32*%cP,align 4
%cQ=call i8*@sml_alloc(i32 inreg 20)#0
%cR=getelementptr inbounds i8,i8*%cQ,i64 -4
%cS=bitcast i8*%cR to i32*
store i32 1342177296,i32*%cS,align 4
store i8*%cQ,i8**%d,align 8
%cT=getelementptr inbounds i8,i8*%cQ,i64 4
%cU=bitcast i8*%cT to i32*
store i32 0,i32*%cU,align 1
%cV=bitcast i8*%cQ to i32*
store i32 1,i32*%cV,align 4
%cW=getelementptr inbounds i8,i8*%cQ,i64 8
%cX=bitcast i8*%cW to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bI,i64 0,i32 2,i64 0),i8**%cX,align 8
%cY=getelementptr inbounds i8,i8*%cQ,i64 16
%cZ=bitcast i8*%cY to i32*
store i32 2,i32*%cZ,align 4
%c0=call i8*@sml_alloc(i32 inreg 20)#0
%c1=getelementptr inbounds i8,i8*%c0,i64 -4
%c2=bitcast i8*%c1 to i32*
store i32 1342177296,i32*%c2,align 4
store i8*%c0,i8**%e,align 8
%c3=getelementptr inbounds i8,i8*%c0,i64 4
%c4=bitcast i8*%c3 to i32*
store i32 0,i32*%c4,align 1
%c5=bitcast i8*%c0 to i32*
store i32 6,i32*%c5,align 4
%c6=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%c7=getelementptr inbounds i8,i8*%c0,i64 8
%c8=bitcast i8*%c7 to i8**
store i8*%c6,i8**%c8,align 8
%c9=getelementptr inbounds i8,i8*%c0,i64 16
%da=bitcast i8*%c9 to i32*
store i32 2,i32*%da,align 4
%db=call i8*@sml_alloc(i32 inreg 20)#0
%dc=getelementptr inbounds i8,i8*%db,i64 -4
%dd=bitcast i8*%dc to i32*
store i32 1342177296,i32*%dd,align 4
store i8*%db,i8**%f,align 8
%de=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%df=bitcast i8*%db to i8**
store i8*%de,i8**%df,align 8
%dg=getelementptr inbounds i8,i8*%db,i64 8
%dh=bitcast i8*%dg to i8**
store i8*null,i8**%dh,align 8
%di=getelementptr inbounds i8,i8*%db,i64 16
%dj=bitcast i8*%di to i32*
store i32 3,i32*%dj,align 4
%dk=call i8*@sml_alloc(i32 inreg 20)#0
%dl=getelementptr inbounds i8,i8*%dk,i64 -4
%dm=bitcast i8*%dl to i32*
store i32 1342177296,i32*%dm,align 4
store i8*%dk,i8**%d,align 8
%dn=getelementptr inbounds i8,i8*%dk,i64 4
%do=bitcast i8*%dn to i32*
store i32 0,i32*%do,align 1
%dp=bitcast i8*%dk to i32*
store i32 1,i32*%dp,align 4
%dq=getelementptr inbounds i8,i8*%dk,i64 8
%dr=bitcast i8*%dq to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@aZ,i64 0,i32 2,i64 0),i8**%dr,align 8
%ds=getelementptr inbounds i8,i8*%dk,i64 16
%dt=bitcast i8*%ds to i32*
store i32 2,i32*%dt,align 4
%du=call i8*@sml_alloc(i32 inreg 20)#0
%dv=getelementptr inbounds i8,i8*%du,i64 -4
%dw=bitcast i8*%dv to i32*
store i32 1342177296,i32*%dw,align 4
store i8*%du,i8**%e,align 8
%dx=getelementptr inbounds i8,i8*%du,i64 4
%dy=bitcast i8*%dx to i32*
store i32 0,i32*%dy,align 1
%dz=bitcast i8*%du to i32*
store i32 6,i32*%dz,align 4
%dA=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%dB=getelementptr inbounds i8,i8*%du,i64 8
%dC=bitcast i8*%dB to i8**
store i8*%dA,i8**%dC,align 8
%dD=getelementptr inbounds i8,i8*%du,i64 16
%dE=bitcast i8*%dD to i32*
store i32 2,i32*%dE,align 4
%dF=call i8*@sml_alloc(i32 inreg 20)#0
%dG=getelementptr inbounds i8,i8*%dF,i64 -4
%dH=bitcast i8*%dG to i32*
store i32 1342177296,i32*%dH,align 4
store i8*%dF,i8**%g,align 8
%dI=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%dJ=bitcast i8*%dF to i8**
store i8*%dI,i8**%dJ,align 8
%dK=getelementptr inbounds i8,i8*%dF,i64 8
%dL=bitcast i8*%dK to i8**
store i8*null,i8**%dL,align 8
%dM=getelementptr inbounds i8,i8*%dF,i64 16
%dN=bitcast i8*%dM to i32*
store i32 3,i32*%dN,align 4
%dO=call i8*@sml_alloc(i32 inreg 20)#0
%dP=getelementptr inbounds i8,i8*%dO,i64 -4
%dQ=bitcast i8*%dP to i32*
store i32 1342177296,i32*%dQ,align 4
store i8*%dO,i8**%d,align 8
%dR=getelementptr inbounds i8,i8*%dO,i64 4
%dS=bitcast i8*%dR to i32*
store i32 0,i32*%dS,align 1
%dT=bitcast i8*%dO to i32*
store i32 1,i32*%dT,align 4
%dU=getelementptr inbounds i8,i8*%dO,i64 8
%dV=bitcast i8*%dU to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bK,i64 0,i32 2,i64 0),i8**%dV,align 8
%dW=getelementptr inbounds i8,i8*%dO,i64 16
%dX=bitcast i8*%dW to i32*
store i32 2,i32*%dX,align 4
%dY=call i8*@sml_alloc(i32 inreg 20)#0
%dZ=getelementptr inbounds i8,i8*%dY,i64 -4
%d0=bitcast i8*%dZ to i32*
store i32 1342177296,i32*%d0,align 4
store i8*%dY,i8**%e,align 8
%d1=getelementptr inbounds i8,i8*%dY,i64 4
%d2=bitcast i8*%d1 to i32*
store i32 0,i32*%d2,align 1
%d3=bitcast i8*%dY to i32*
store i32 6,i32*%d3,align 4
%d4=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%d5=getelementptr inbounds i8,i8*%dY,i64 8
%d6=bitcast i8*%d5 to i8**
store i8*%d4,i8**%d6,align 8
%d7=getelementptr inbounds i8,i8*%dY,i64 16
%d8=bitcast i8*%d7 to i32*
store i32 2,i32*%d8,align 4
%d9=call i8*@sml_alloc(i32 inreg 20)#0
%ea=getelementptr inbounds i8,i8*%d9,i64 -4
%eb=bitcast i8*%ea to i32*
store i32 1342177296,i32*%eb,align 4
store i8*%d9,i8**%d,align 8
%ec=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%ed=bitcast i8*%d9 to i8**
store i8*%ec,i8**%ed,align 8
%ee=getelementptr inbounds i8,i8*%d9,i64 8
%ef=bitcast i8*%ee to i8**
store i8*null,i8**%ef,align 8
%eg=getelementptr inbounds i8,i8*%d9,i64 16
%eh=bitcast i8*%eg to i32*
store i32 3,i32*%eh,align 4
%ei=call i8*@sml_alloc(i32 inreg 36)#0
%ej=getelementptr inbounds i8,i8*%ei,i64 -4
%ek=bitcast i8*%ej to i32*
store i32 1342177312,i32*%ek,align 4
%el=bitcast i8*%ei to i8**
store i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aY,i64 0,i32 2)to i8*),i8**%el,align 8
%em=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%en=getelementptr inbounds i8,i8*%ei,i64 8
%eo=bitcast i8*%en to i8**
store i8*%em,i8**%eo,align 8
%ep=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%eq=getelementptr inbounds i8,i8*%ei,i64 16
%er=bitcast i8*%eq to i8**
store i8*%ep,i8**%er,align 8
%es=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%et=getelementptr inbounds i8,i8*%ei,i64 24
%eu=bitcast i8*%et to i8**
store i8*%es,i8**%eu,align 8
%ev=getelementptr inbounds i8,i8*%ei,i64 32
%ew=bitcast i8*%ev to i32*
store i32 15,i32*%ew,align 4
%ex=call fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_337(i32 inreg 1,i32 inreg 8,i8*inreg%ei)
%ey=getelementptr inbounds i8,i8*%ex,i64 16
%ez=bitcast i8*%ey to i8*(i8*,i8*)**
%eA=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ez,align 8
%eB=bitcast i8*%ex to i8**
%eC=load i8*,i8**%eB,align 8
%eD=load i8*,i8**%c,align 8
%eE=tail call fastcc i8*%eA(i8*inreg%eC,i8*inreg%eD)
ret i8*%eE
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6tuple4E_584(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
%h=bitcast i8*%b to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%c,align 8
%j=getelementptr inbounds i8,i8*%b,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
store i8*%l,i8**%d,align 8
%m=getelementptr inbounds i8,i8*%b,i64 16
%n=bitcast i8*%m to i8**
%o=load i8*,i8**%n,align 8
store i8*%o,i8**%e,align 8
%p=getelementptr inbounds i8,i8*%b,i64 24
%q=bitcast i8*%p to i8**
%r=load i8*,i8**%q,align 8
store i8*%r,i8**%f,align 8
%s=bitcast i8*%a to i32*
%t=load i32,i32*%s,align 4
%u=getelementptr inbounds i8,i8*%a,i64 4
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=getelementptr inbounds i8,i8*%a,i64 8
%y=bitcast i8*%x to i32*
%z=load i32,i32*%y,align 4
%A=getelementptr inbounds i8,i8*%a,i64 12
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=getelementptr inbounds i8,i8*%a,i64 16
%E=bitcast i8*%D to i32*
%F=load i32,i32*%E,align 4
%G=getelementptr inbounds i8,i8*%a,i64 20
%H=bitcast i8*%G to i32*
%I=load i32,i32*%H,align 4
%J=getelementptr inbounds i8,i8*%a,i64 24
%K=bitcast i8*%J to i32*
%L=load i32,i32*%K,align 4
%M=getelementptr inbounds i8,i8*%a,i64 28
%N=bitcast i8*%M to i32*
%O=load i32,i32*%N,align 4
%P=call i8*@sml_alloc(i32 inreg 68)#0
%Q=getelementptr inbounds i8,i8*%P,i64 -4
%R=bitcast i8*%Q to i32*
store i32 1342177344,i32*%R,align 4
store i8*%P,i8**%g,align 8
%S=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%T=bitcast i8*%P to i8**
store i8*%S,i8**%T,align 8
%U=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%V=getelementptr inbounds i8,i8*%P,i64 8
%W=bitcast i8*%V to i8**
store i8*%U,i8**%W,align 8
%X=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%Y=getelementptr inbounds i8,i8*%P,i64 16
%Z=bitcast i8*%Y to i8**
store i8*%X,i8**%Z,align 8
%aa=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%ab=getelementptr inbounds i8,i8*%P,i64 24
%ac=bitcast i8*%ab to i8**
store i8*%aa,i8**%ac,align 8
%ad=getelementptr inbounds i8,i8*%P,i64 32
%ae=bitcast i8*%ad to i32*
store i32%t,i32*%ae,align 4
%af=getelementptr inbounds i8,i8*%P,i64 36
%ag=bitcast i8*%af to i32*
store i32%w,i32*%ag,align 4
%ah=getelementptr inbounds i8,i8*%P,i64 40
%ai=bitcast i8*%ah to i32*
store i32%z,i32*%ai,align 4
%aj=getelementptr inbounds i8,i8*%P,i64 44
%ak=bitcast i8*%aj to i32*
store i32%C,i32*%ak,align 4
%al=getelementptr inbounds i8,i8*%P,i64 48
%am=bitcast i8*%al to i32*
store i32%F,i32*%am,align 4
%an=getelementptr inbounds i8,i8*%P,i64 52
%ao=bitcast i8*%an to i32*
store i32%I,i32*%ao,align 4
%ap=getelementptr inbounds i8,i8*%P,i64 56
%aq=bitcast i8*%ap to i32*
store i32%L,i32*%aq,align 4
%ar=getelementptr inbounds i8,i8*%P,i64 60
%as=bitcast i8*%ar to i32*
store i32%O,i32*%as,align 4
%at=getelementptr inbounds i8,i8*%P,i64 64
%au=bitcast i8*%at to i32*
store i32 15,i32*%au,align 4
%av=call i8*@sml_alloc(i32 inreg 28)#0
%aw=getelementptr inbounds i8,i8*%av,i64 -4
%ax=bitcast i8*%aw to i32*
store i32 1342177304,i32*%ax,align 4
%ay=load i8*,i8**%g,align 8
%az=bitcast i8*%av to i8**
store i8*%ay,i8**%az,align 8
%aA=getelementptr inbounds i8,i8*%av,i64 8
%aB=bitcast i8*%aA to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6tuple4E_583 to void(...)*),void(...)**%aB,align 8
%aC=getelementptr inbounds i8,i8*%av,i64 16
%aD=bitcast i8*%aC to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6tuple4E_583 to void(...)*),void(...)**%aD,align 8
%aE=getelementptr inbounds i8,i8*%av,i64 24
%aF=bitcast i8*%aE to i32*
store i32 -2147483647,i32*%aF,align 4
ret i8*%av
}
define fastcc i8*@_SMLFN10TermFormat10FormatComb6tuple4E(i32 inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e,i32 inreg%f,i32 inreg%g,i32 inreg%h)#4 gc"smlsharp"{
%i=alloca i8*,align 8
call void@llvm.gcroot(i8**%i,i8*null)#0
%j=call i8*@sml_alloc(i32 inreg 36)#0
%k=bitcast i8*%j to i32*
%l=getelementptr inbounds i8,i8*%j,i64 -4
%m=bitcast i8*%l to i32*
store i32 1342177312,i32*%m,align 4
store i8*%j,i8**%i,align 8
store i32%a,i32*%k,align 4
%n=getelementptr inbounds i8,i8*%j,i64 4
%o=bitcast i8*%n to i32*
store i32%b,i32*%o,align 4
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i32*
store i32%c,i32*%q,align 4
%r=getelementptr inbounds i8,i8*%j,i64 12
%s=bitcast i8*%r to i32*
store i32%d,i32*%s,align 4
%t=getelementptr inbounds i8,i8*%j,i64 16
%u=bitcast i8*%t to i32*
store i32%e,i32*%u,align 4
%v=getelementptr inbounds i8,i8*%j,i64 20
%w=bitcast i8*%v to i32*
store i32%f,i32*%w,align 4
%x=getelementptr inbounds i8,i8*%j,i64 24
%y=bitcast i8*%x to i32*
store i32%g,i32*%y,align 4
%z=getelementptr inbounds i8,i8*%j,i64 28
%A=bitcast i8*%z to i32*
store i32%h,i32*%A,align 4
%B=getelementptr inbounds i8,i8*%j,i64 32
%C=bitcast i8*%B to i32*
store i32 0,i32*%C,align 4
%D=call i8*@sml_alloc(i32 inreg 28)#0
%E=getelementptr inbounds i8,i8*%D,i64 -4
%F=bitcast i8*%E to i32*
store i32 1342177304,i32*%F,align 4
%G=load i8*,i8**%i,align 8
%H=bitcast i8*%D to i8**
store i8*%G,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%D,i64 8
%J=bitcast i8*%I to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6tuple4E_584 to void(...)*),void(...)**%J,align 8
%K=getelementptr inbounds i8,i8*%D,i64 16
%L=bitcast i8*%K to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6tuple4E_584 to void(...)*),void(...)**%L,align 8
%M=getelementptr inbounds i8,i8*%D,i64 24
%N=bitcast i8*%M to i32*
store i32 -2147483647,i32*%N,align 4
ret i8*%D
}
define fastcc i8*@_SMLFN10TermFormat10FormatComb4termE(i8*inreg%a)#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=getelementptr inbounds i8,i8*%a,i64 -4
%e=bitcast i8*%d to i32*
%f=load i32,i32*%e,align 4
%g=and i32%f,268435455
%h=add nsw i32%g,-1
%i=call i8*@sml_alloc(i32 inreg 20)#0
%j=getelementptr inbounds i8,i8*%i,i64 -4
%k=bitcast i8*%j to i32*
store i32 1342177296,i32*%k,align 4
store i8*%i,i8**%c,align 8
%l=getelementptr inbounds i8,i8*%i,i64 4
%m=bitcast i8*%l to i32*
store i32 0,i32*%m,align 1
%n=bitcast i8*%i to i32*
store i32%h,i32*%n,align 4
%o=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%p=getelementptr inbounds i8,i8*%i,i64 8
%q=bitcast i8*%p to i8**
store i8*%o,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%i,i64 16
%s=bitcast i8*%r to i32*
store i32 2,i32*%s,align 4
%t=call i8*@sml_alloc(i32 inreg 20)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177296,i32*%v,align 4
store i8*%t,i8**%b,align 8
%w=getelementptr inbounds i8,i8*%t,i64 4
%x=bitcast i8*%w to i32*
store i32 0,i32*%x,align 1
%y=bitcast i8*%t to i32*
store i32 6,i32*%y,align 4
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=getelementptr inbounds i8,i8*%t,i64 8
%B=bitcast i8*%A to i8**
store i8*%z,i8**%B,align 8
%C=getelementptr inbounds i8,i8*%t,i64 16
%D=bitcast i8*%C to i32*
store i32 2,i32*%D,align 4
%E=call i8*@sml_alloc(i32 inreg 20)#0
%F=getelementptr inbounds i8,i8*%E,i64 -4
%G=bitcast i8*%F to i32*
store i32 1342177296,i32*%G,align 4
%H=load i8*,i8**%b,align 8
%I=bitcast i8*%E to i8**
store i8*%H,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%E,i64 8
%K=bitcast i8*%J to i8**
store i8*null,i8**%K,align 8
%L=getelementptr inbounds i8,i8*%E,i64 16
%M=bitcast i8*%L to i32*
store i32 3,i32*%M,align 4
ret i8*%E
}
define internal fastcc i8*@_SMLLLN10TermFormat15formatFormatExpE_642(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLLN10TermFormat15formatFormatExpE_652(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%g=call i8*@sml_alloc(i32 inreg 20)#0
%h=getelementptr inbounds i8,i8*%g,i64 -4
%i=bitcast i8*%h to i32*
store i32 1342177296,i32*%i,align 4
store i8*%g,i8**%d,align 8
%j=bitcast i8*%g to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@i,i64 0,i32 2)to i8*),i8**%j,align 8
%k=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%l=getelementptr inbounds i8,i8*%g,i64 8
%m=bitcast i8*%l to i8**
store i8*%k,i8**%m,align 8
%n=getelementptr inbounds i8,i8*%g,i64 16
%o=bitcast i8*%n to i32*
store i32 3,i32*%o,align 4
%p=call i8*@sml_alloc(i32 inreg 20)#0
%q=getelementptr inbounds i8,i8*%p,i64 -4
%r=bitcast i8*%q to i32*
store i32 1342177296,i32*%r,align 4
store i8*%p,i8**%c,align 8
%s=getelementptr inbounds i8,i8*%p,i64 4
%t=bitcast i8*%s to i32*
store i32 0,i32*%t,align 1
%u=bitcast i8*%p to i32*
store i32 1,i32*%u,align 4
%v=getelementptr inbounds i8,i8*%p,i64 8
%w=bitcast i8*%v to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bb,i64 0,i32 2,i64 0),i8**%w,align 8
%x=getelementptr inbounds i8,i8*%p,i64 16
%y=bitcast i8*%x to i32*
store i32 2,i32*%y,align 4
%z=call i8*@sml_alloc(i32 inreg 20)#0
%A=getelementptr inbounds i8,i8*%z,i64 -4
%B=bitcast i8*%A to i32*
store i32 1342177296,i32*%B,align 4
store i8*%z,i8**%f,align 8
%C=getelementptr inbounds i8,i8*%z,i64 4
%D=bitcast i8*%C to i32*
store i32 0,i32*%D,align 1
%E=bitcast i8*%z to i32*
store i32 6,i32*%E,align 4
%F=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%G=getelementptr inbounds i8,i8*%z,i64 8
%H=bitcast i8*%G to i8**
store i8*%F,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%z,i64 16
%J=bitcast i8*%I to i32*
store i32 2,i32*%J,align 4
%K=call i8*@sml_alloc(i32 inreg 20)#0
%L=getelementptr inbounds i8,i8*%K,i64 -4
%M=bitcast i8*%L to i32*
store i32 1342177296,i32*%M,align 4
store i8*%K,i8**%c,align 8
%N=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%O=bitcast i8*%K to i8**
store i8*%N,i8**%O,align 8
%P=load i8*,i8**%d,align 8
%Q=getelementptr inbounds i8,i8*%K,i64 8
%R=bitcast i8*%Q to i8**
store i8*%P,i8**%R,align 8
%S=getelementptr inbounds i8,i8*%K,i64 16
%T=bitcast i8*%S to i32*
store i32 3,i32*%T,align 4
%U=bitcast i8**%e to i8***
%V=load i8**,i8***%U,align 8
store i8*null,i8**%e,align 8
%W=load i8*,i8**%V,align 8
store i8*%W,i8**%d,align 8
%X=call i8*@sml_alloc(i32 inreg 20)#0
%Y=getelementptr inbounds i8,i8*%X,i64 -4
%Z=bitcast i8*%Y to i32*
store i32 1342177296,i32*%Z,align 4
store i8*%X,i8**%e,align 8
%aa=getelementptr inbounds i8,i8*%X,i64 4
%ab=bitcast i8*%aa to i32*
store i32 0,i32*%ab,align 1
%ac=bitcast i8*%X to i32*
store i32 4,i32*%ac,align 4
%ad=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ae=getelementptr inbounds i8,i8*%X,i64 8
%af=bitcast i8*%ae to i8**
store i8*%ad,i8**%af,align 8
%ag=getelementptr inbounds i8,i8*%X,i64 16
%ah=bitcast i8*%ag to i32*
store i32 2,i32*%ah,align 4
%ai=call i8*@sml_alloc(i32 inreg 20)#0
%aj=getelementptr inbounds i8,i8*%ai,i64 -4
%ak=bitcast i8*%aj to i32*
store i32 1342177296,i32*%ak,align 4
store i8*%ai,i8**%d,align 8
%al=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%am=bitcast i8*%ai to i8**
store i8*%al,i8**%am,align 8
%an=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ao=getelementptr inbounds i8,i8*%ai,i64 8
%ap=bitcast i8*%ao to i8**
store i8*%an,i8**%ap,align 8
%aq=getelementptr inbounds i8,i8*%ai,i64 16
%ar=bitcast i8*%aq to i32*
store i32 3,i32*%ar,align 4
%as=call i8*@sml_alloc(i32 inreg 20)#0
%at=getelementptr inbounds i8,i8*%as,i64 -4
%au=bitcast i8*%at to i32*
store i32 1342177296,i32*%au,align 4
%av=bitcast i8*%as to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@e,i64 0,i32 2)to i8*),i8**%av,align 8
%aw=load i8*,i8**%d,align 8
%ax=getelementptr inbounds i8,i8*%as,i64 8
%ay=bitcast i8*%ax to i8**
store i8*%aw,i8**%ay,align 8
%az=getelementptr inbounds i8,i8*%as,i64 16
%aA=bitcast i8*%az to i32*
store i32 3,i32*%aA,align 4
ret i8*%as
}
define internal fastcc i8*@_SMLLLN10TermFormat15formatFormatExpE_653(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=bitcast i8**%d to i8***
%m=load i8**,i8***%l,align 8
%n=bitcast i8**%m to i8*
br label%o
o:
%p=phi i8*[%n,%k],[%a,%i]
%q=phi i8**[%m,%k],[%j,%i]
%r=load i8*,i8**%q,align 8
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%e,align 8
%x=getelementptr inbounds i8,i8*%p,i64 8
%y=bitcast i8*%x to i8**
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%d,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%f,align 8
%D=getelementptr inbounds i8,i8*%A,i64 4
%E=bitcast i8*%D to i32*
store i32 0,i32*%E,align 1
%F=bitcast i8*%A to i32*
store i32 4,i32*%F,align 4
%G=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%H=getelementptr inbounds i8,i8*%A,i64 8
%I=bitcast i8*%H to i8**
store i8*%G,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%A,i64 16
%K=bitcast i8*%J to i32*
store i32 2,i32*%K,align 4
%L=call i8*@sml_alloc(i32 inreg 20)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32 1342177296,i32*%N,align 4
%O=load i8*,i8**%f,align 8
%P=bitcast i8*%L to i8**
store i8*%O,i8**%P,align 8
%Q=load i8*,i8**%c,align 8
%R=getelementptr inbounds i8,i8*%L,i64 8
%S=bitcast i8*%R to i8**
store i8*%Q,i8**%S,align 8
%T=getelementptr inbounds i8,i8*%L,i64 16
%U=bitcast i8*%T to i32*
store i32 3,i32*%U,align 4
%V=load i8*,i8**%e,align 8
%W=tail call fastcc i8*%u(i8*inreg%V,i8*inreg%L)
ret i8*%W
}
define internal fastcc i8*@_SMLLLN10TermFormat15formatFormatExpE_654(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8**
br label%p
l:
call void@sml_check(i32 inreg%h)
%m=load i8*,i8**%d,align 8
%n=bitcast i8**%c to i8***
%o=load i8**,i8***%n,align 8
br label%p
p:
%q=phi i8**[%o,%l],[%k,%j]
%r=phi i8*[%m,%l],[%b,%j]
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%f,align 8
%x=load i8*,i8**%q,align 8
store i8*%x,i8**%d,align 8
%y=getelementptr inbounds i8*,i8**%q,i64 2
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%e,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%g,align 8
%D=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%E=bitcast i8*%A to i8**
store i8*%D,i8**%E,align 8
%F=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%G=getelementptr inbounds i8,i8*%A,i64 8
%H=bitcast i8*%G to i8**
store i8*%F,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%A,i64 16
%J=bitcast i8*%I to i32*
store i32 3,i32*%J,align 4
%K=call i8*@sml_alloc(i32 inreg 28)#0
%L=getelementptr inbounds i8,i8*%K,i64 -4
%M=bitcast i8*%L to i32*
store i32 1342177304,i32*%M,align 4
store i8*%K,i8**%d,align 8
%N=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%O=bitcast i8*%K to i8**
store i8*%N,i8**%O,align 8
%P=getelementptr inbounds i8,i8*%K,i64 8
%Q=bitcast i8*%P to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat15formatFormatExpE_653 to void(...)*),void(...)**%Q,align 8
%R=getelementptr inbounds i8,i8*%K,i64 16
%S=bitcast i8*%R to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat15formatFormatExpE_653 to void(...)*),void(...)**%S,align 8
%T=getelementptr inbounds i8,i8*%K,i64 24
%U=bitcast i8*%T to i32*
store i32 -2147483647,i32*%U,align 4
%V=load i8*,i8**%c,align 8
%W=getelementptr inbounds i8,i8*%V,i64 8
%X=bitcast i8*%W to i8**
%Y=load i8*,i8**%X,align 8
store i8*%Y,i8**%c,align 8
%Z=call i8*@sml_alloc(i32 inreg 20)#0
%aa=getelementptr inbounds i8,i8*%Z,i64 -4
%ab=bitcast i8*%aa to i32*
store i32 1342177296,i32*%ab,align 4
%ac=load i8*,i8**%d,align 8
%ad=bitcast i8*%Z to i8**
store i8*%ac,i8**%ad,align 8
%ae=load i8*,i8**%c,align 8
%af=getelementptr inbounds i8,i8*%Z,i64 8
%ag=bitcast i8*%af to i8**
store i8*%ae,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%Z,i64 16
%ai=bitcast i8*%ah to i32*
store i32 3,i32*%ai,align 4
%aj=load i8*,i8**%f,align 8
%ak=tail call fastcc i8*%u(i8*inreg%aj,i8*inreg%Z)
ret i8*%ak
}
define internal fastcc i8*@_SMLLLN10TermFormat15formatFormatExpE_655(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
store i8*%l,i8**%f,align 8
%o=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%r=getelementptr inbounds i8,i8*%l,i64 8
%s=bitcast i8*%r to i8**
store i8*%q,i8**%s,align 8
%t=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%u=getelementptr inbounds i8,i8*%l,i64 16
%v=bitcast i8*%u to i8**
store i8*%t,i8**%v,align 8
%w=getelementptr inbounds i8,i8*%l,i64 24
%x=bitcast i8*%w to i32*
store i32 7,i32*%x,align 4
%y=call i8*@sml_alloc(i32 inreg 28)#0
%z=getelementptr inbounds i8,i8*%y,i64 -4
%A=bitcast i8*%z to i32*
store i32 1342177304,i32*%A,align 4
%B=load i8*,i8**%f,align 8
%C=bitcast i8*%y to i8**
store i8*%B,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%y,i64 8
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat15formatFormatExpE_654 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%y,i64 16
%G=bitcast i8*%F to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat15formatFormatExpE_654 to void(...)*),void(...)**%G,align 8
%H=getelementptr inbounds i8,i8*%y,i64 24
%I=bitcast i8*%H to i32*
store i32 -2147483647,i32*%I,align 4
ret i8*%y
}
define internal fastcc i8*@_SMLLLN10TermFormat15formatFormatExpE_656(i8*inreg%a)#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i8**
%f=load i8*,i8**%e,align 8
store i8*%f,i8**%b,align 8
%g=getelementptr inbounds i8,i8*%a,i64 8
%h=bitcast i8*%g to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%c,align 8
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i8**
store i8*%o,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%j,i64 16
%s=bitcast i8*%r to i32*
store i32 3,i32*%s,align 4
%t=call i8*@sml_alloc(i32 inreg 28)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177304,i32*%v,align 4
%w=load i8*,i8**%d,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat15formatFormatExpE_655 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%t,i64 16
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat15formatFormatExpE_655 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%t,i64 24
%D=bitcast i8*%C to i32*
store i32 -2147483647,i32*%D,align 4
ret i8*%t
}
define internal fastcc i8*@_SMLLLN10TermFormat15formatFormatExpE_658(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%l
i:
call void@sml_check(i32 inreg%e)
%j=bitcast i8**%d to i8***
%k=load i8**,i8***%j,align 8
br label%l
l:
%m=phi i8**[%k,%i],[%h,%g]
%n=load i8*,i8**%m,align 8
%o=getelementptr inbounds i8,i8*%n,i64 16
%p=bitcast i8*%o to i8*(i8*,i8*)**
%q=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%p,align 8
%r=bitcast i8*%n to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%d,align 8
%t=call i8*@sml_alloc(i32 inreg 20)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177296,i32*%v,align 4
%w=bitcast i8*%t to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@i,i64 0,i32 2)to i8*),i8**%w,align 8
%x=load i8*,i8**%c,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to i8**
store i8*%x,i8**%z,align 8
%A=getelementptr inbounds i8,i8*%t,i64 16
%B=bitcast i8*%A to i32*
store i32 3,i32*%B,align 4
%C=load i8*,i8**%d,align 8
%D=tail call fastcc i8*%q(i8*inreg%C,i8*inreg%t)
ret i8*%D
}
define internal fastcc i8*@_SMLLLN10TermFormat15formatFormatExpE_659(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=load i8*,i8**%d,align 8
%m=bitcast i8**%c to i8***
%n=load i8**,i8***%m,align 8
br label%o
o:
%p=phi i8**[%n,%k],[%j,%i]
%q=phi i8*[%l,%k],[%b,%i]
%r=getelementptr inbounds i8,i8*%q,i64 16
%s=bitcast i8*%r to i8*(i8*,i8*)**
%t=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%s,align 8
%u=bitcast i8*%q to i8**
%v=load i8*,i8**%u,align 8
store i8*%v,i8**%e,align 8
%w=load i8*,i8**%p,align 8
store i8*%w,i8**%d,align 8
%x=call i8*@sml_alloc(i32 inreg 12)#0
%y=getelementptr inbounds i8,i8*%x,i64 -4
%z=bitcast i8*%y to i32*
store i32 1342177288,i32*%z,align 4
store i8*%x,i8**%f,align 8
%A=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%B=bitcast i8*%x to i8**
store i8*%A,i8**%B,align 8
%C=getelementptr inbounds i8,i8*%x,i64 8
%D=bitcast i8*%C to i32*
store i32 1,i32*%D,align 4
%E=call i8*@sml_alloc(i32 inreg 28)#0
%F=getelementptr inbounds i8,i8*%E,i64 -4
%G=bitcast i8*%F to i32*
store i32 1342177304,i32*%G,align 4
store i8*%E,i8**%d,align 8
%H=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%I=bitcast i8*%E to i8**
store i8*%H,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%E,i64 8
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat15formatFormatExpE_658 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%E,i64 16
%M=bitcast i8*%L to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat15formatFormatExpE_658 to void(...)*),void(...)**%M,align 8
%N=getelementptr inbounds i8,i8*%E,i64 24
%O=bitcast i8*%N to i32*
store i32 -2147483647,i32*%O,align 4
%P=load i8*,i8**%c,align 8
%Q=getelementptr inbounds i8,i8*%P,i64 8
%R=bitcast i8*%Q to i8**
%S=load i8*,i8**%R,align 8
store i8*%S,i8**%c,align 8
%T=call i8*@sml_alloc(i32 inreg 20)#0
%U=getelementptr inbounds i8,i8*%T,i64 -4
%V=bitcast i8*%U to i32*
store i32 1342177296,i32*%V,align 4
%W=load i8*,i8**%d,align 8
%X=bitcast i8*%T to i8**
store i8*%W,i8**%X,align 8
%Y=load i8*,i8**%c,align 8
%Z=getelementptr inbounds i8,i8*%T,i64 8
%aa=bitcast i8*%Z to i8**
store i8*%Y,i8**%aa,align 8
%ab=getelementptr inbounds i8,i8*%T,i64 16
%ac=bitcast i8*%ab to i32*
store i32 3,i32*%ac,align 4
%ad=load i8*,i8**%e,align 8
%ae=tail call fastcc i8*%t(i8*inreg%ad,i8*inreg%T)
ret i8*%ae
}
define internal fastcc i8*@_SMLLLN10TermFormat15formatFormatExpE_660(i8*inreg%a)#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i8**
%f=load i8*,i8**%e,align 8
store i8*%f,i8**%b,align 8
%g=getelementptr inbounds i8,i8*%a,i64 8
%h=bitcast i8*%g to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%c,align 8
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i8**
store i8*%o,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%j,i64 16
%s=bitcast i8*%r to i32*
store i32 3,i32*%s,align 4
%t=call i8*@sml_alloc(i32 inreg 28)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177304,i32*%v,align 4
%w=load i8*,i8**%d,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat15formatFormatExpE_659 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%t,i64 16
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat15formatFormatExpE_659 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%t,i64 24
%D=bitcast i8*%C to i32*
store i32 -2147483647,i32*%D,align 4
ret i8*%t
}
define internal fastcc i8*@_SMLLLN10TermFormat15formatFormatExpE_662(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=bitcast i8**%d to i8***
%m=load i8**,i8***%l,align 8
%n=bitcast i8**%m to i8*
br label%o
o:
%p=phi i8*[%n,%k],[%a,%i]
%q=phi i8**[%m,%k],[%j,%i]
%r=load i8*,i8**%q,align 8
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%f,align 8
%x=getelementptr inbounds i8,i8*%p,i64 8
%y=bitcast i8*%x to i8**
%z=load i8*,i8**%y,align 8
%A=getelementptr inbounds i8,i8*%z,i64 -4
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=and i32%C,268435455
%E=add nsw i32%D,-1
store i8*%z,i8**%d,align 8
%F=call i8*@sml_alloc(i32 inreg 20)#0
%G=getelementptr inbounds i8,i8*%F,i64 -4
%H=bitcast i8*%G to i32*
store i32 1342177296,i32*%H,align 4
store i8*%F,i8**%e,align 8
%I=getelementptr inbounds i8,i8*%F,i64 4
%J=bitcast i8*%I to i32*
store i32 0,i32*%J,align 1
%K=bitcast i8*%F to i32*
store i32%E,i32*%K,align 4
%L=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%M=getelementptr inbounds i8,i8*%F,i64 8
%N=bitcast i8*%M to i8**
store i8*%L,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%F,i64 16
%P=bitcast i8*%O to i32*
store i32 2,i32*%P,align 4
%Q=call i8*@sml_alloc(i32 inreg 20)#0
%R=getelementptr inbounds i8,i8*%Q,i64 -4
%S=bitcast i8*%R to i32*
store i32 1342177296,i32*%S,align 4
store i8*%Q,i8**%d,align 8
%T=getelementptr inbounds i8,i8*%Q,i64 4
%U=bitcast i8*%T to i32*
store i32 0,i32*%U,align 1
%V=bitcast i8*%Q to i32*
store i32 6,i32*%V,align 4
%W=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%X=getelementptr inbounds i8,i8*%Q,i64 8
%Y=bitcast i8*%X to i8**
store i8*%W,i8**%Y,align 8
%Z=getelementptr inbounds i8,i8*%Q,i64 16
%aa=bitcast i8*%Z to i32*
store i32 2,i32*%aa,align 4
%ab=call i8*@sml_alloc(i32 inreg 20)#0
%ac=getelementptr inbounds i8,i8*%ab,i64 -4
%ad=bitcast i8*%ac to i32*
store i32 1342177296,i32*%ad,align 4
%ae=load i8*,i8**%d,align 8
%af=bitcast i8*%ab to i8**
store i8*%ae,i8**%af,align 8
%ag=load i8*,i8**%c,align 8
%ah=getelementptr inbounds i8,i8*%ab,i64 8
%ai=bitcast i8*%ah to i8**
store i8*%ag,i8**%ai,align 8
%aj=getelementptr inbounds i8,i8*%ab,i64 16
%ak=bitcast i8*%aj to i32*
store i32 3,i32*%ak,align 4
%al=load i8*,i8**%f,align 8
%am=tail call fastcc i8*%u(i8*inreg%al,i8*inreg%ab)
ret i8*%am
}
define internal fastcc i8*@_SMLLLN10TermFormat15formatFormatExpE_663(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8**
br label%p
l:
call void@sml_check(i32 inreg%h)
%m=load i8*,i8**%d,align 8
%n=bitcast i8**%c to i8***
%o=load i8**,i8***%n,align 8
br label%p
p:
%q=phi i8**[%o,%l],[%k,%j]
%r=phi i8*[%m,%l],[%b,%j]
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%f,align 8
%x=load i8*,i8**%q,align 8
store i8*%x,i8**%d,align 8
%y=getelementptr inbounds i8*,i8**%q,i64 2
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%e,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%g,align 8
%D=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%E=bitcast i8*%A to i8**
store i8*%D,i8**%E,align 8
%F=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%G=getelementptr inbounds i8,i8*%A,i64 8
%H=bitcast i8*%G to i8**
store i8*%F,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%A,i64 16
%J=bitcast i8*%I to i32*
store i32 3,i32*%J,align 4
%K=call i8*@sml_alloc(i32 inreg 28)#0
%L=getelementptr inbounds i8,i8*%K,i64 -4
%M=bitcast i8*%L to i32*
store i32 1342177304,i32*%M,align 4
store i8*%K,i8**%d,align 8
%N=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%O=bitcast i8*%K to i8**
store i8*%N,i8**%O,align 8
%P=getelementptr inbounds i8,i8*%K,i64 8
%Q=bitcast i8*%P to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat15formatFormatExpE_662 to void(...)*),void(...)**%Q,align 8
%R=getelementptr inbounds i8,i8*%K,i64 16
%S=bitcast i8*%R to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat15formatFormatExpE_662 to void(...)*),void(...)**%S,align 8
%T=getelementptr inbounds i8,i8*%K,i64 24
%U=bitcast i8*%T to i32*
store i32 -2147483647,i32*%U,align 4
%V=load i8*,i8**%c,align 8
%W=getelementptr inbounds i8,i8*%V,i64 8
%X=bitcast i8*%W to i8**
%Y=load i8*,i8**%X,align 8
store i8*%Y,i8**%c,align 8
%Z=call i8*@sml_alloc(i32 inreg 20)#0
%aa=getelementptr inbounds i8,i8*%Z,i64 -4
%ab=bitcast i8*%aa to i32*
store i32 1342177296,i32*%ab,align 4
%ac=load i8*,i8**%d,align 8
%ad=bitcast i8*%Z to i8**
store i8*%ac,i8**%ad,align 8
%ae=load i8*,i8**%c,align 8
%af=getelementptr inbounds i8,i8*%Z,i64 8
%ag=bitcast i8*%af to i8**
store i8*%ae,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%Z,i64 16
%ai=bitcast i8*%ah to i32*
store i32 3,i32*%ai,align 4
%aj=load i8*,i8**%f,align 8
%ak=tail call fastcc i8*%u(i8*inreg%aj,i8*inreg%Z)
ret i8*%ak
}
define internal fastcc i8*@_SMLLLN10TermFormat15formatFormatExpE_664(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
store i8*%l,i8**%f,align 8
%o=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%r=getelementptr inbounds i8,i8*%l,i64 8
%s=bitcast i8*%r to i8**
store i8*%q,i8**%s,align 8
%t=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%u=getelementptr inbounds i8,i8*%l,i64 16
%v=bitcast i8*%u to i8**
store i8*%t,i8**%v,align 8
%w=getelementptr inbounds i8,i8*%l,i64 24
%x=bitcast i8*%w to i32*
store i32 7,i32*%x,align 4
%y=call i8*@sml_alloc(i32 inreg 28)#0
%z=getelementptr inbounds i8,i8*%y,i64 -4
%A=bitcast i8*%z to i32*
store i32 1342177304,i32*%A,align 4
%B=load i8*,i8**%f,align 8
%C=bitcast i8*%y to i8**
store i8*%B,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%y,i64 8
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat15formatFormatExpE_663 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%y,i64 16
%G=bitcast i8*%F to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat15formatFormatExpE_663 to void(...)*),void(...)**%G,align 8
%H=getelementptr inbounds i8,i8*%y,i64 24
%I=bitcast i8*%H to i32*
store i32 -2147483647,i32*%I,align 4
ret i8*%y
}
define internal fastcc i8*@_SMLLLN10TermFormat15formatFormatExpE_665(i8*inreg%a)#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i8**
%f=load i8*,i8**%e,align 8
store i8*%f,i8**%b,align 8
%g=getelementptr inbounds i8,i8*%a,i64 8
%h=bitcast i8*%g to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%c,align 8
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i8**
store i8*%o,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%j,i64 16
%s=bitcast i8*%r to i32*
store i32 3,i32*%s,align 4
%t=call i8*@sml_alloc(i32 inreg 28)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177304,i32*%v,align 4
%w=load i8*,i8**%d,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat15formatFormatExpE_664 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%t,i64 16
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat15formatFormatExpE_664 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%t,i64 24
%D=bitcast i8*%C to i32*
store i32 -2147483647,i32*%D,align 4
ret i8*%t
}
define internal fastcc i8*@_SMLLLN10TermFormat15formatFormatExpE_668(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=bitcast i8*%h to i8**
%k=load i8*,i8**%j,align 8
%l=getelementptr inbounds i8,i8*%h,i64 8
%m=bitcast i8*%l to i8**
%n=load i8*,i8**%m,align 8
%o=getelementptr inbounds i8,i8*%n,i64 16
%p=bitcast i8*%o to i8*(i8*,i8*)**
%q=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%p,align 8
%r=bitcast i8*%n to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%b,align 8
%t=getelementptr inbounds i8,i8*%k,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%k to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
%A=tail call fastcc i8*%q(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define internal fastcc i8*@_SMLLLN10TermFormat15formatFormatExpE_670(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=bitcast i8*%h to i8**
%k=load i8*,i8**%j,align 8
%l=getelementptr inbounds i8,i8*%h,i64 8
%m=bitcast i8*%l to i8**
%n=load i8*,i8**%m,align 8
%o=getelementptr inbounds i8,i8*%n,i64 16
%p=bitcast i8*%o to i8*(i8*,i8*)**
%q=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%p,align 8
%r=bitcast i8*%n to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%b,align 8
%t=getelementptr inbounds i8,i8*%k,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%k to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
%A=tail call fastcc i8*%q(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define internal fastcc i8*@_SMLLLN10TermFormat15formatFormatExpE_589(i8*inreg%a)#2 gc"smlsharp"{
m:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%b,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%k,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%b,align 8
br label%k
k:
%l=phi i8*[%j,%i],[%a,%m]
store i8*null,i8**%b,align 8
%n=bitcast i8*%l to i32*
%o=load i32,i32*%n,align 4
switch i32%o,label%p[
i32 6,label%hx
i32 3,label%gT
i32 1,label%c3
i32 2,label%bM
i32 5,label%aO
i32 0,label%aa
i32 4,label%H
]
p:
call void@sml_matchcomp_bug()
%q=load i8*,i8**@_SMLZ5Match,align 8
store i8*%q,i8**%b,align 8
%r=call i8*@sml_alloc(i32 inreg 20)#0
%s=getelementptr inbounds i8,i8*%r,i64 -4
%t=bitcast i8*%s to i32*
store i32 1342177296,i32*%t,align 4
store i8*%r,i8**%c,align 8
%u=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%v=bitcast i8*%r to i8**
store i8*%u,i8**%v,align 8
%w=getelementptr inbounds i8,i8*%r,i64 8
%x=bitcast i8*%w to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[56x i8]}>,<{[4x i8],i32,[56x i8]}>*@bo,i64 0,i32 2,i64 0),i8**%x,align 8
%y=getelementptr inbounds i8,i8*%r,i64 16
%z=bitcast i8*%y to i32*
store i32 3,i32*%z,align 4
%A=call i8*@sml_alloc(i32 inreg 60)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177336,i32*%C,align 4
%D=getelementptr inbounds i8,i8*%A,i64 56
%E=bitcast i8*%D to i32*
store i32 1,i32*%E,align 4
%F=load i8*,i8**%c,align 8
%G=bitcast i8*%A to i8**
store i8*%F,i8**%G,align 8
call void@sml_raise(i8*inreg%A)#1
unreachable
H:
%I=getelementptr inbounds i8,i8*%l,i64 8
%J=bitcast i8*%I to i8**
%K=load i8*,i8**%J,align 8
store i8*%K,i8**%b,align 8
%L=call fastcc i8*@_SMLFN4List3mapE(i32 inreg 1,i32 inreg 8,i32 inreg 1,i32 inreg 8)
%M=getelementptr inbounds i8,i8*%L,i64 16
%N=bitcast i8*%M to i8*(i8*,i8*)**
%O=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%N,align 8
%P=bitcast i8*%L to i8**
%Q=load i8*,i8**%P,align 8
%R=call fastcc i8*%O(i8*inreg%Q,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@a2,i64 0,i32 2)to i8*))
%S=getelementptr inbounds i8,i8*%R,i64 16
%T=bitcast i8*%S to i8*(i8*,i8*)**
%U=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%T,align 8
%V=bitcast i8*%R to i8**
%W=load i8*,i8**%V,align 8
%X=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%Y=call fastcc i8*%U(i8*inreg%W,i8*inreg%X)
%Z=tail call fastcc i8*@_SMLLLN10TermFormat11intersperseE_206(i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,i8*,i32}>,<{[4x i8],i32,i8*,i8*,i32}>*@bn,i64 0,i32 2)to i8*),i8*inreg%Y)
ret i8*%Z
aa:
%ab=call i8*@sml_alloc(i32 inreg 20)#0
%ac=getelementptr inbounds i8,i8*%ab,i64 -4
%ad=bitcast i8*%ac to i32*
store i32 1342177296,i32*%ad,align 4
store i8*%ab,i8**%b,align 8
%ae=getelementptr inbounds i8,i8*%ab,i64 4
%af=bitcast i8*%ae to i32*
store i32 0,i32*%af,align 1
%ag=bitcast i8*%ab to i32*
store i32 1,i32*%ag,align 4
%ah=getelementptr inbounds i8,i8*%ab,i64 8
%ai=bitcast i8*%ah to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bm,i64 0,i32 2,i64 0),i8**%ai,align 8
%aj=getelementptr inbounds i8,i8*%ab,i64 16
%ak=bitcast i8*%aj to i32*
store i32 2,i32*%ak,align 4
%al=call i8*@sml_alloc(i32 inreg 20)#0
%am=getelementptr inbounds i8,i8*%al,i64 -4
%an=bitcast i8*%am to i32*
store i32 1342177296,i32*%an,align 4
store i8*%al,i8**%c,align 8
%ao=getelementptr inbounds i8,i8*%al,i64 4
%ap=bitcast i8*%ao to i32*
store i32 0,i32*%ap,align 1
%aq=bitcast i8*%al to i32*
store i32 6,i32*%aq,align 4
%ar=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%as=getelementptr inbounds i8,i8*%al,i64 8
%at=bitcast i8*%as to i8**
store i8*%ar,i8**%at,align 8
%au=getelementptr inbounds i8,i8*%al,i64 16
%av=bitcast i8*%au to i32*
store i32 2,i32*%av,align 4
%aw=call i8*@sml_alloc(i32 inreg 20)#0
%ax=getelementptr inbounds i8,i8*%aw,i64 -4
%ay=bitcast i8*%ax to i32*
store i32 1342177296,i32*%ay,align 4
store i8*%aw,i8**%b,align 8
%az=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aA=bitcast i8*%aw to i8**
store i8*%az,i8**%aA,align 8
%aB=getelementptr inbounds i8,i8*%aw,i64 8
%aC=bitcast i8*%aB to i8**
store i8*null,i8**%aC,align 8
%aD=getelementptr inbounds i8,i8*%aw,i64 16
%aE=bitcast i8*%aD to i32*
store i32 3,i32*%aE,align 4
%aF=call i8*@sml_alloc(i32 inreg 20)#0
%aG=getelementptr inbounds i8,i8*%aF,i64 -4
%aH=bitcast i8*%aG to i32*
store i32 1342177296,i32*%aH,align 4
%aI=bitcast i8*%aF to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@i,i64 0,i32 2)to i8*),i8**%aI,align 8
%aJ=load i8*,i8**%b,align 8
%aK=getelementptr inbounds i8,i8*%aF,i64 8
%aL=bitcast i8*%aK to i8**
store i8*%aJ,i8**%aL,align 8
%aM=getelementptr inbounds i8,i8*%aF,i64 16
%aN=bitcast i8*%aM to i32*
store i32 3,i32*%aN,align 4
ret i8*%aF
aO:
%aP=getelementptr inbounds i8,i8*%l,i64 4
%aQ=bitcast i8*%aP to i32*
%aR=load i32,i32*%aQ,align 4
%aS=call fastcc i8*@_SMLFN5Int328toStringE(i32 inreg%aR)
store i8*%aS,i8**%b,align 8
%aT=call i8*@sml_alloc(i32 inreg 20)#0
%aU=getelementptr inbounds i8,i8*%aT,i64 -4
%aV=bitcast i8*%aU to i32*
store i32 1342177296,i32*%aV,align 4
%aW=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%aX=bitcast i8*%aT to i8**
store i8*%aW,i8**%aX,align 8
%aY=getelementptr inbounds i8,i8*%aT,i64 8
%aZ=bitcast i8*%aY to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bl,i64 0,i32 2,i64 0),i8**%aZ,align 8
%a0=getelementptr inbounds i8,i8*%aT,i64 16
%a1=bitcast i8*%a0 to i32*
store i32 3,i32*%a1,align 4
%a2=call fastcc i8*@_SMLFN6String1_ZE(i8*inreg%aT)
store i8*%a2,i8**%b,align 8
%a3=getelementptr inbounds i8,i8*%a2,i64 -4
%a4=bitcast i8*%a3 to i32*
%a5=load i32,i32*%a4,align 4
%a6=and i32%a5,268435455
%a7=add nsw i32%a6,-1
%a8=call i8*@sml_alloc(i32 inreg 20)#0
%a9=getelementptr inbounds i8,i8*%a8,i64 -4
%ba=bitcast i8*%a9 to i32*
store i32 1342177296,i32*%ba,align 4
store i8*%a8,i8**%c,align 8
%bb=getelementptr inbounds i8,i8*%a8,i64 4
%bc=bitcast i8*%bb to i32*
store i32 0,i32*%bc,align 1
%bd=bitcast i8*%a8 to i32*
store i32%a7,i32*%bd,align 4
%be=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%bf=getelementptr inbounds i8,i8*%a8,i64 8
%bg=bitcast i8*%bf to i8**
store i8*%be,i8**%bg,align 8
%bh=getelementptr inbounds i8,i8*%a8,i64 16
%bi=bitcast i8*%bh to i32*
store i32 2,i32*%bi,align 4
%bj=call i8*@sml_alloc(i32 inreg 20)#0
%bk=getelementptr inbounds i8,i8*%bj,i64 -4
%bl=bitcast i8*%bk to i32*
store i32 1342177296,i32*%bl,align 4
store i8*%bj,i8**%b,align 8
%bm=getelementptr inbounds i8,i8*%bj,i64 4
%bn=bitcast i8*%bm to i32*
store i32 0,i32*%bn,align 1
%bo=bitcast i8*%bj to i32*
store i32 6,i32*%bo,align 4
%bp=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bq=getelementptr inbounds i8,i8*%bj,i64 8
%br=bitcast i8*%bq to i8**
store i8*%bp,i8**%br,align 8
%bs=getelementptr inbounds i8,i8*%bj,i64 16
%bt=bitcast i8*%bs to i32*
store i32 2,i32*%bt,align 4
%bu=call i8*@sml_alloc(i32 inreg 20)#0
%bv=getelementptr inbounds i8,i8*%bu,i64 -4
%bw=bitcast i8*%bv to i32*
store i32 1342177296,i32*%bw,align 4
store i8*%bu,i8**%c,align 8
%bx=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%by=bitcast i8*%bu to i8**
store i8*%bx,i8**%by,align 8
%bz=getelementptr inbounds i8,i8*%bu,i64 8
%bA=bitcast i8*%bz to i8**
store i8*null,i8**%bA,align 8
%bB=getelementptr inbounds i8,i8*%bu,i64 16
%bC=bitcast i8*%bB to i32*
store i32 3,i32*%bC,align 4
%bD=call i8*@sml_alloc(i32 inreg 20)#0
%bE=getelementptr inbounds i8,i8*%bD,i64 -4
%bF=bitcast i8*%bE to i32*
store i32 1342177296,i32*%bF,align 4
%bG=bitcast i8*%bD to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@i,i64 0,i32 2)to i8*),i8**%bG,align 8
%bH=load i8*,i8**%c,align 8
%bI=getelementptr inbounds i8,i8*%bD,i64 8
%bJ=bitcast i8*%bI to i8**
store i8*%bH,i8**%bJ,align 8
%bK=getelementptr inbounds i8,i8*%bD,i64 16
%bL=bitcast i8*%bK to i32*
store i32 3,i32*%bL,align 4
ret i8*%bD
bM:
%bN=getelementptr inbounds i8,i8*%l,i64 8
%bO=bitcast i8*%bN to i8**
%bP=load i8*,i8**%bO,align 8
%bQ=bitcast i8*%bP to i8**
%bR=load i8*,i8**%bQ,align 8
%bS=getelementptr inbounds i8,i8*%bP,i64 8
%bT=bitcast i8*%bS to i32*
%bU=load i32,i32*%bT,align 4
%bV=icmp eq i32%bU,0
%bW=select i1%bV,i8*getelementptr inbounds(<{[4x i8],i32,[1x i8]}>,<{[4x i8],i32,[1x i8]}>*@bk,i64 0,i32 2,i64 0),i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bi,i64 0,i32 2,i64 0)
store i8*%bW,i8**%b,align 8
%bX=icmp eq i8*%bR,null
br i1%bX,label%b7,label%bY
bY:
%bZ=bitcast i8*%bR to i8***
%b0=load i8**,i8***%bZ,align 8
%b1=load i8*,i8**%b0,align 8
%b2=icmp eq i8*%b1,null
br i1%b2,label%b7,label%b3
b3:
%b4=bitcast i8*%b1 to i32*
%b5=load i32,i32*%b4,align 4
%b6=call fastcc i8*@_SMLFN5Int328toStringE(i32 inreg%b5)
br label%b7
b7:
%b8=phi i8*[getelementptr inbounds(<{[4x i8],i32,[1x i8]}>,<{[4x i8],i32,[1x i8]}>*@bk,i64 0,i32 2,i64 0),%bM],[%b6,%b3],[getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bj,i64 0,i32 2,i64 0),%bY]
store i8*%b8,i8**%c,align 8
%b9=call i8*@sml_alloc(i32 inreg 20)#0
%ca=getelementptr inbounds i8,i8*%b9,i64 -4
%cb=bitcast i8*%ca to i32*
store i32 1342177296,i32*%cb,align 4
%cc=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%cd=bitcast i8*%b9 to i8**
store i8*%cc,i8**%cd,align 8
%ce=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cf=getelementptr inbounds i8,i8*%b9,i64 8
%cg=bitcast i8*%cf to i8**
store i8*%ce,i8**%cg,align 8
%ch=getelementptr inbounds i8,i8*%b9,i64 16
%ci=bitcast i8*%ch to i32*
store i32 3,i32*%ci,align 4
%cj=call fastcc i8*@_SMLFN6String1_ZE(i8*inreg%b9)
store i8*%cj,i8**%b,align 8
%ck=getelementptr inbounds i8,i8*%cj,i64 -4
%cl=bitcast i8*%ck to i32*
%cm=load i32,i32*%cl,align 4
%cn=and i32%cm,268435455
%co=add nsw i32%cn,-1
%cp=call i8*@sml_alloc(i32 inreg 20)#0
%cq=getelementptr inbounds i8,i8*%cp,i64 -4
%cr=bitcast i8*%cq to i32*
store i32 1342177296,i32*%cr,align 4
store i8*%cp,i8**%c,align 8
%cs=getelementptr inbounds i8,i8*%cp,i64 4
%ct=bitcast i8*%cs to i32*
store i32 0,i32*%ct,align 1
%cu=bitcast i8*%cp to i32*
store i32%co,i32*%cu,align 4
%cv=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%cw=getelementptr inbounds i8,i8*%cp,i64 8
%cx=bitcast i8*%cw to i8**
store i8*%cv,i8**%cx,align 8
%cy=getelementptr inbounds i8,i8*%cp,i64 16
%cz=bitcast i8*%cy to i32*
store i32 2,i32*%cz,align 4
%cA=call i8*@sml_alloc(i32 inreg 20)#0
%cB=getelementptr inbounds i8,i8*%cA,i64 -4
%cC=bitcast i8*%cB to i32*
store i32 1342177296,i32*%cC,align 4
store i8*%cA,i8**%b,align 8
%cD=getelementptr inbounds i8,i8*%cA,i64 4
%cE=bitcast i8*%cD to i32*
store i32 0,i32*%cE,align 1
%cF=bitcast i8*%cA to i32*
store i32 6,i32*%cF,align 4
%cG=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cH=getelementptr inbounds i8,i8*%cA,i64 8
%cI=bitcast i8*%cH to i8**
store i8*%cG,i8**%cI,align 8
%cJ=getelementptr inbounds i8,i8*%cA,i64 16
%cK=bitcast i8*%cJ to i32*
store i32 2,i32*%cK,align 4
%cL=call i8*@sml_alloc(i32 inreg 20)#0
%cM=getelementptr inbounds i8,i8*%cL,i64 -4
%cN=bitcast i8*%cM to i32*
store i32 1342177296,i32*%cN,align 4
store i8*%cL,i8**%c,align 8
%cO=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%cP=bitcast i8*%cL to i8**
store i8*%cO,i8**%cP,align 8
%cQ=getelementptr inbounds i8,i8*%cL,i64 8
%cR=bitcast i8*%cQ to i8**
store i8*null,i8**%cR,align 8
%cS=getelementptr inbounds i8,i8*%cL,i64 16
%cT=bitcast i8*%cS to i32*
store i32 3,i32*%cT,align 4
%cU=call i8*@sml_alloc(i32 inreg 20)#0
%cV=getelementptr inbounds i8,i8*%cU,i64 -4
%cW=bitcast i8*%cV to i32*
store i32 1342177296,i32*%cW,align 4
%cX=bitcast i8*%cU to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@i,i64 0,i32 2)to i8*),i8**%cX,align 8
%cY=load i8*,i8**%c,align 8
%cZ=getelementptr inbounds i8,i8*%cU,i64 8
%c0=bitcast i8*%cZ to i8**
store i8*%cY,i8**%c0,align 8
%c1=getelementptr inbounds i8,i8*%cU,i64 16
%c2=bitcast i8*%c1 to i32*
store i32 3,i32*%c2,align 4
ret i8*%cU
c3:
%c4=getelementptr inbounds i8,i8*%l,i64 8
%c5=bitcast i8*%c4 to i8**
%c6=load i8*,i8**%c5,align 8
%c7=bitcast i8*%c6 to i8**
%c8=load i8*,i8**%c7,align 8
%c9=getelementptr inbounds i8,i8*%c6,i64 8
%da=bitcast i8*%c9 to i8**
%db=load i8*,i8**%da,align 8
store i8*%db,i8**%b,align 8
%dc=icmp eq i8*%c8,null
br i1%dc,label%eJ,label%dd
dd:
%de=bitcast i8*%c8 to i8**
%df=load i8*,i8**%de,align 8
%dg=bitcast i8*%df to i32*
%dh=load i32,i32*%dg,align 4
%di=getelementptr inbounds i8,i8*%df,i64 4
%dj=bitcast i8*%di to i32*
%dk=load i32,i32*%dj,align 4
%dl=getelementptr inbounds i8,i8*%df,i64 8
%dm=bitcast i8*%dl to i32*
%dn=load i32,i32*%dm,align 4
%do=icmp eq i32%dh,0
%dp=select i1%do,i8*getelementptr inbounds(<{[4x i8],i32,[1x i8]}>,<{[4x i8],i32,[1x i8]}>*@bk,i64 0,i32 2,i64 0),i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@a6,i64 0,i32 2,i64 0)
store i8*%dp,i8**%c,align 8
switch i32%dk,label%dq[
i32 0,label%dK
i32 2,label%dJ
i32 1,label%dI
]
dq:
store i8*null,i8**%c,align 8
call void@sml_matchcomp_bug()
%dr=load i8*,i8**@_SMLZ5Match,align 8
store i8*%dr,i8**%b,align 8
%ds=call i8*@sml_alloc(i32 inreg 20)#0
%dt=getelementptr inbounds i8,i8*%ds,i64 -4
%du=bitcast i8*%dt to i32*
store i32 1342177296,i32*%du,align 4
store i8*%ds,i8**%c,align 8
%dv=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%dw=bitcast i8*%ds to i8**
store i8*%dv,i8**%dw,align 8
%dx=getelementptr inbounds i8,i8*%ds,i64 8
%dy=bitcast i8*%dx to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[57x i8]}>,<{[4x i8],i32,[57x i8]}>*@ba,i64 0,i32 2,i64 0),i8**%dy,align 8
%dz=getelementptr inbounds i8,i8*%ds,i64 16
%dA=bitcast i8*%dz to i32*
store i32 3,i32*%dA,align 4
%dB=call i8*@sml_alloc(i32 inreg 60)#0
%dC=getelementptr inbounds i8,i8*%dB,i64 -4
%dD=bitcast i8*%dC to i32*
store i32 1342177336,i32*%dD,align 4
%dE=getelementptr inbounds i8,i8*%dB,i64 56
%dF=bitcast i8*%dE to i32*
store i32 1,i32*%dF,align 4
%dG=load i8*,i8**%c,align 8
%dH=bitcast i8*%dB to i8**
store i8*%dG,i8**%dH,align 8
call void@sml_raise(i8*inreg%dB)#1
unreachable
dI:
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@a9,i64 0,i32 2,i64 0),i8**%d,align 8
br label%dL
dJ:
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@a8,i64 0,i32 2,i64 0),i8**%d,align 8
br label%dL
dK:
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@a7,i64 0,i32 2,i64 0),i8**%d,align 8
br label%dL
dL:
%dM=call i8*@sml_alloc(i32 inreg 20)#0
%dN=getelementptr inbounds i8,i8*%dM,i64 -4
%dO=bitcast i8*%dN to i32*
store i32 1342177296,i32*%dO,align 4
%dP=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%dQ=bitcast i8*%dM to i8**
store i8*%dP,i8**%dQ,align 8
%dR=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%dS=getelementptr inbounds i8,i8*%dM,i64 8
%dT=bitcast i8*%dS to i8**
store i8*%dR,i8**%dT,align 8
%dU=getelementptr inbounds i8,i8*%dM,i64 16
%dV=bitcast i8*%dU to i32*
store i32 3,i32*%dV,align 4
%dW=call fastcc i8*@_SMLFN6String1_ZE(i8*inreg%dM)
store i8*%dW,i8**%c,align 8
%dX=call fastcc i8*@_SMLFN5Int328toStringE(i32 inreg%dn)
store i8*%dX,i8**%d,align 8
%dY=call i8*@sml_alloc(i32 inreg 20)#0
%dZ=getelementptr inbounds i8,i8*%dY,i64 -4
%d0=bitcast i8*%dZ to i32*
store i32 1342177296,i32*%d0,align 4
%d1=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%d2=bitcast i8*%dY to i8**
store i8*%d1,i8**%d2,align 8
%d3=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%d4=getelementptr inbounds i8,i8*%dY,i64 8
%d5=bitcast i8*%d4 to i8**
store i8*%d3,i8**%d5,align 8
%d6=getelementptr inbounds i8,i8*%dY,i64 16
%d7=bitcast i8*%d6 to i32*
store i32 3,i32*%d7,align 4
%d8=call fastcc i8*@_SMLFN6String1_ZE(i8*inreg%dY)
store i8*%d8,i8**%c,align 8
%d9=getelementptr inbounds i8,i8*%d8,i64 -4
%ea=bitcast i8*%d9 to i32*
%eb=load i32,i32*%ea,align 4
%ec=and i32%eb,268435455
%ed=add nsw i32%ec,-1
%ee=call i8*@sml_alloc(i32 inreg 20)#0
%ef=getelementptr inbounds i8,i8*%ee,i64 -4
%eg=bitcast i8*%ef to i32*
store i32 1342177296,i32*%eg,align 4
store i8*%ee,i8**%d,align 8
%eh=getelementptr inbounds i8,i8*%ee,i64 4
%ei=bitcast i8*%eh to i32*
store i32 0,i32*%ei,align 1
%ej=bitcast i8*%ee to i32*
store i32%ed,i32*%ej,align 4
%ek=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%el=getelementptr inbounds i8,i8*%ee,i64 8
%em=bitcast i8*%el to i8**
store i8*%ek,i8**%em,align 8
%en=getelementptr inbounds i8,i8*%ee,i64 16
%eo=bitcast i8*%en to i32*
store i32 2,i32*%eo,align 4
%ep=call i8*@sml_alloc(i32 inreg 20)#0
%eq=getelementptr inbounds i8,i8*%ep,i64 -4
%er=bitcast i8*%eq to i32*
store i32 1342177296,i32*%er,align 4
store i8*%ep,i8**%c,align 8
%es=getelementptr inbounds i8,i8*%ep,i64 4
%et=bitcast i8*%es to i32*
store i32 0,i32*%et,align 1
%eu=bitcast i8*%ep to i32*
store i32 6,i32*%eu,align 4
%ev=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ew=getelementptr inbounds i8,i8*%ep,i64 8
%ex=bitcast i8*%ew to i8**
store i8*%ev,i8**%ex,align 8
%ey=getelementptr inbounds i8,i8*%ep,i64 16
%ez=bitcast i8*%ey to i32*
store i32 2,i32*%ez,align 4
%eA=call i8*@sml_alloc(i32 inreg 20)#0
%eB=getelementptr inbounds i8,i8*%eA,i64 -4
%eC=bitcast i8*%eB to i32*
store i32 1342177296,i32*%eC,align 4
%eD=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%eE=bitcast i8*%eA to i8**
store i8*%eD,i8**%eE,align 8
%eF=getelementptr inbounds i8,i8*%eA,i64 8
%eG=bitcast i8*%eF to i8**
store i8*null,i8**%eG,align 8
%eH=getelementptr inbounds i8,i8*%eA,i64 16
%eI=bitcast i8*%eH to i32*
store i32 3,i32*%eI,align 4
br label%eJ
eJ:
%eK=phi i8*[%eA,%dL],[null,%c3]
store i8*%eK,i8**%c,align 8
%eL=call i8*@sml_alloc(i32 inreg 12)#0
%eM=getelementptr inbounds i8,i8*%eL,i64 -4
%eN=bitcast i8*%eM to i32*
store i32 1342177288,i32*%eN,align 4
store i8*%eL,i8**%d,align 8
%eO=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%eP=bitcast i8*%eL to i8**
store i8*%eO,i8**%eP,align 8
%eQ=getelementptr inbounds i8,i8*%eL,i64 8
%eR=bitcast i8*%eQ to i32*
store i32 1,i32*%eR,align 4
%eS=call i8*@sml_alloc(i32 inreg 28)#0
%eT=getelementptr inbounds i8,i8*%eS,i64 -4
%eU=bitcast i8*%eT to i32*
store i32 1342177304,i32*%eU,align 4
store i8*%eS,i8**%c,align 8
%eV=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%eW=bitcast i8*%eS to i8**
store i8*%eV,i8**%eW,align 8
%eX=getelementptr inbounds i8,i8*%eS,i64 8
%eY=bitcast i8*%eX to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat15formatFormatExpE_652 to void(...)*),void(...)**%eY,align 8
%eZ=getelementptr inbounds i8,i8*%eS,i64 16
%e0=bitcast i8*%eZ to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat15formatFormatExpE_652 to void(...)*),void(...)**%e0,align 8
%e1=getelementptr inbounds i8,i8*%eS,i64 24
%e2=bitcast i8*%e1 to i32*
store i32 -2147483647,i32*%e2,align 4
%e3=call i8*@sml_alloc(i32 inreg 20)#0
%e4=getelementptr inbounds i8,i8*%e3,i64 -4
%e5=bitcast i8*%e4 to i32*
store i32 1342177296,i32*%e5,align 4
%e6=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%e7=bitcast i8*%e3 to i8**
store i8*%e6,i8**%e7,align 8
%e8=getelementptr inbounds i8,i8*%e3,i64 8
%e9=bitcast i8*%e8 to i8**
store i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@a5,i64 0,i32 2)to i8*),i8**%e9,align 8
%fa=getelementptr inbounds i8,i8*%e3,i64 16
%fb=bitcast i8*%fa to i32*
store i32 3,i32*%fb,align 4
%fc=call fastcc i8*@_SMLLLN10TermFormat10FormatComb6guard__E_186(i8*inreg%e3)
%fd=getelementptr inbounds i8,i8*%fc,i64 16
%fe=bitcast i8*%fd to i8*(i8*,i8*)**
%ff=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%fe,align 8
%fg=bitcast i8*%fc to i8**
%fh=load i8*,i8**%fg,align 8
%fi=call fastcc i8*%ff(i8*inreg%fh,i8*inreg null)
%fj=getelementptr inbounds i8,i8*%fi,i64 16
%fk=bitcast i8*%fj to i8*(i8*,i8*,i8*,i8*,i8*)**
%fl=load i8*(i8*,i8*,i8*,i8*,i8*)*,i8*(i8*,i8*,i8*,i8*,i8*)**%fk,align 8
%fm=bitcast i8*%fi to i8**
%fn=load i8*,i8**%fm,align 8
store i8*%fn,i8**%c,align 8
%fo=call i8*@sml_alloc(i32 inreg 4)#0
%fp=bitcast i8*%fo to i32*
%fq=getelementptr inbounds i8,i8*%fo,i64 -4
%fr=bitcast i8*%fq to i32*
store i32 4,i32*%fr,align 4
store i8*%fo,i8**%d,align 8
store i32 1,i32*%fp,align 4
%fs=call i8*@sml_alloc(i32 inreg 4)#0
%ft=bitcast i8*%fs to i32*
%fu=getelementptr inbounds i8,i8*%fs,i64 -4
%fv=bitcast i8*%fu to i32*
store i32 4,i32*%fv,align 4
store i8*%fs,i8**%e,align 8
store i32 8,i32*%ft,align 4
%fw=call i8*@sml_alloc(i32 inreg 4)#0
%fx=bitcast i8*%fw to i32*
%fy=getelementptr inbounds i8,i8*%fw,i64 -4
%fz=bitcast i8*%fy to i32*
store i32 4,i32*%fz,align 4
store i8*%fw,i8**%f,align 8
store i32 1,i32*%fx,align 4
%fA=call i8*@sml_alloc(i32 inreg 4)#0
%fB=bitcast i8*%fA to i32*
%fC=getelementptr inbounds i8,i8*%fA,i64 -4
%fD=bitcast i8*%fC to i32*
store i32 4,i32*%fD,align 4
store i32 8,i32*%fB,align 4
%fE=load i8*,i8**%c,align 8
%fF=load i8*,i8**%d,align 8
%fG=load i8*,i8**%e,align 8
%fH=load i8*,i8**%f,align 8
store i8*null,i8**%c,align 8
store i8*null,i8**%d,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%f,align 8
%fI=call fastcc i8*%fl(i8*inreg%fE,i8*inreg%fF,i8*inreg%fG,i8*inreg%fH,i8*inreg%fA)
%fJ=getelementptr inbounds i8,i8*%fI,i64 16
%fK=bitcast i8*%fJ to i8*(i8*,i8*)**
%fL=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%fK,align 8
%fM=bitcast i8*%fI to i8**
%fN=load i8*,i8**%fM,align 8
%fO=call fastcc i8*%fL(i8*inreg%fN,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bc,i64 0,i32 2)to i8*))
store i8*%fO,i8**%c,align 8
%fP=call fastcc i8*@_SMLFN4List6concatE(i32 inreg 1,i32 inreg 8)
%fQ=getelementptr inbounds i8,i8*%fP,i64 16
%fR=bitcast i8*%fQ to i8*(i8*,i8*)**
%fS=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%fR,align 8
%fT=bitcast i8*%fP to i8**
%fU=load i8*,i8**%fT,align 8
store i8*%fU,i8**%d,align 8
%fV=call fastcc i8*@_SMLFN4List3mapE(i32 inreg 1,i32 inreg 8,i32 inreg 1,i32 inreg 8)
%fW=getelementptr inbounds i8,i8*%fV,i64 16
%fX=bitcast i8*%fW to i8*(i8*,i8*)**
%fY=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%fX,align 8
%fZ=bitcast i8*%fV to i8**
%f0=load i8*,i8**%fZ,align 8
%f1=call fastcc i8*%fY(i8*inreg%f0,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@a2,i64 0,i32 2)to i8*))
%f2=getelementptr inbounds i8,i8*%f1,i64 16
%f3=bitcast i8*%f2 to i8*(i8*,i8*)**
%f4=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%f3,align 8
%f5=bitcast i8*%f1 to i8**
%f6=load i8*,i8**%f5,align 8
%f7=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%f8=call fastcc i8*%f4(i8*inreg%f6,i8*inreg%f7)
%f9=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ga=call fastcc i8*%fS(i8*inreg%f9,i8*inreg%f8)
%gb=load i8*,i8**%c,align 8
%gc=getelementptr inbounds i8,i8*%gb,i64 16
%gd=bitcast i8*%gc to i8*(i8*,i8*)**
%ge=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%gd,align 8
store i8*null,i8**%c,align 8
%gf=bitcast i8*%gb to i8**
%gg=load i8*,i8**%gf,align 8
%gh=icmp eq i8*%ga,null
br i1%gh,label%gm,label%gi
gi:
%gj=getelementptr inbounds i8,i8*%ga,i64 8
%gk=bitcast i8*%gj to i8**
%gl=load i8*,i8**%gk,align 8
br label%gm
gm:
%gn=phi i8*[%gl,%gi],[null,%eJ]
%go=call fastcc i8*%ge(i8*inreg%gg,i8*inreg%gn)
%gp=getelementptr inbounds i8,i8*%go,i64 16
%gq=bitcast i8*%gp to i8*(i8*,i8*)**
%gr=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%gq,align 8
%gs=bitcast i8*%go to i8**
%gt=load i8*,i8**%gs,align 8
%gu=call fastcc i8*%gr(i8*inreg%gt,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bd,i64 0,i32 2)to i8*))
%gv=getelementptr inbounds i8,i8*%gu,i64 16
%gw=bitcast i8*%gv to i8*(i8*,i8*)**
%gx=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%gw,align 8
%gy=bitcast i8*%gu to i8**
%gz=load i8*,i8**%gy,align 8
%gA=call fastcc i8*%gx(i8*inreg%gz,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@be,i64 0,i32 2)to i8*))
%gB=getelementptr inbounds i8,i8*%gA,i64 16
%gC=bitcast i8*%gB to i8*(i8*,i8*)**
%gD=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%gC,align 8
%gE=bitcast i8*%gA to i8**
%gF=load i8*,i8**%gE,align 8
%gG=call fastcc i8*%gD(i8*inreg%gF,i8*inreg getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bf,i64 0,i32 2,i64 0))
%gH=getelementptr inbounds i8,i8*%gG,i64 16
%gI=bitcast i8*%gH to i8*(i8*,i8*)**
%gJ=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%gI,align 8
%gK=bitcast i8*%gG to i8**
%gL=load i8*,i8**%gK,align 8
%gM=call fastcc i8*%gJ(i8*inreg%gL,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bg,i64 0,i32 2)to i8*))
%gN=getelementptr inbounds i8,i8*%gM,i64 16
%gO=bitcast i8*%gN to i8*(i8*,i8*)**
%gP=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%gO,align 8
%gQ=bitcast i8*%gM to i8**
%gR=load i8*,i8**%gQ,align 8
%gS=tail call fastcc i8*%gP(i8*inreg%gR,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bh,i64 0,i32 2)to i8*))
ret i8*%gS
gT:
%gU=call i8*@sml_alloc(i32 inreg 20)#0
%gV=getelementptr inbounds i8,i8*%gU,i64 -4
%gW=bitcast i8*%gV to i32*
store i32 1342177296,i32*%gW,align 4
store i8*%gU,i8**%b,align 8
%gX=getelementptr inbounds i8,i8*%gU,i64 4
%gY=bitcast i8*%gX to i32*
store i32 0,i32*%gY,align 1
%gZ=bitcast i8*%gU to i32*
store i32 2,i32*%gZ,align 4
%g0=getelementptr inbounds i8,i8*%gU,i64 8
%g1=bitcast i8*%g0 to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[3x i8]}>,<{[4x i8],i32,[3x i8]}>*@a4,i64 0,i32 2,i64 0),i8**%g1,align 8
%g2=getelementptr inbounds i8,i8*%gU,i64 16
%g3=bitcast i8*%g2 to i32*
store i32 2,i32*%g3,align 4
%g4=call i8*@sml_alloc(i32 inreg 20)#0
%g5=getelementptr inbounds i8,i8*%g4,i64 -4
%g6=bitcast i8*%g5 to i32*
store i32 1342177296,i32*%g6,align 4
store i8*%g4,i8**%c,align 8
%g7=getelementptr inbounds i8,i8*%g4,i64 4
%g8=bitcast i8*%g7 to i32*
store i32 0,i32*%g8,align 1
%g9=bitcast i8*%g4 to i32*
store i32 6,i32*%g9,align 4
%ha=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%hb=getelementptr inbounds i8,i8*%g4,i64 8
%hc=bitcast i8*%hb to i8**
store i8*%ha,i8**%hc,align 8
%hd=getelementptr inbounds i8,i8*%g4,i64 16
%he=bitcast i8*%hd to i32*
store i32 2,i32*%he,align 4
%hf=call i8*@sml_alloc(i32 inreg 20)#0
%hg=getelementptr inbounds i8,i8*%hf,i64 -4
%hh=bitcast i8*%hg to i32*
store i32 1342177296,i32*%hh,align 4
store i8*%hf,i8**%b,align 8
%hi=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%hj=bitcast i8*%hf to i8**
store i8*%hi,i8**%hj,align 8
%hk=getelementptr inbounds i8,i8*%hf,i64 8
%hl=bitcast i8*%hk to i8**
store i8*null,i8**%hl,align 8
%hm=getelementptr inbounds i8,i8*%hf,i64 16
%hn=bitcast i8*%hm to i32*
store i32 3,i32*%hn,align 4
%ho=call i8*@sml_alloc(i32 inreg 20)#0
%hp=getelementptr inbounds i8,i8*%ho,i64 -4
%hq=bitcast i8*%hp to i32*
store i32 1342177296,i32*%hq,align 4
%hr=bitcast i8*%ho to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@i,i64 0,i32 2)to i8*),i8**%hr,align 8
%hs=load i8*,i8**%b,align 8
%ht=getelementptr inbounds i8,i8*%ho,i64 8
%hu=bitcast i8*%ht to i8**
store i8*%hs,i8**%hu,align 8
%hv=getelementptr inbounds i8,i8*%ho,i64 16
%hw=bitcast i8*%hv to i32*
store i32 3,i32*%hw,align 4
ret i8*%ho
hx:
%hy=getelementptr inbounds i8,i8*%l,i64 8
%hz=bitcast i8*%hy to i8**
%hA=load i8*,i8**%hz,align 8
%hB=bitcast i8*%hA to i32*
%hC=load i32,i32*%hB,align 4
%hD=getelementptr inbounds i8,i8*%hA,i64 8
%hE=bitcast i8*%hD to i8**
%hF=load i8*,i8**%hE,align 8
store i8*%hF,i8**%b,align 8
%hG=call fastcc i8*@_SMLFN6String8toStringE(i8*inreg%hF)
store i8*%hG,i8**%c,align 8
%hH=call i8*@sml_alloc(i32 inreg 20)#0
%hI=getelementptr inbounds i8,i8*%hH,i64 -4
%hJ=bitcast i8*%hI to i32*
store i32 1342177296,i32*%hJ,align 4
%hK=bitcast i8*%hH to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@a3,i64 0,i32 2,i64 0),i8**%hK,align 8
%hL=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%hM=getelementptr inbounds i8,i8*%hH,i64 8
%hN=bitcast i8*%hM to i8**
store i8*%hL,i8**%hN,align 8
%hO=getelementptr inbounds i8,i8*%hH,i64 16
%hP=bitcast i8*%hO to i32*
store i32 3,i32*%hP,align 4
%hQ=call fastcc i8*@_SMLFN6String1_ZE(i8*inreg%hH)
store i8*%hQ,i8**%c,align 8
%hR=call i8*@sml_alloc(i32 inreg 20)#0
%hS=getelementptr inbounds i8,i8*%hR,i64 -4
%hT=bitcast i8*%hS to i32*
store i32 1342177296,i32*%hT,align 4
%hU=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%hV=bitcast i8*%hR to i8**
store i8*%hU,i8**%hV,align 8
%hW=getelementptr inbounds i8,i8*%hR,i64 8
%hX=bitcast i8*%hW to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@a3,i64 0,i32 2,i64 0),i8**%hX,align 8
%hY=getelementptr inbounds i8,i8*%hR,i64 16
%hZ=bitcast i8*%hY to i32*
store i32 3,i32*%hZ,align 4
%h0=call fastcc i8*@_SMLFN6String1_ZE(i8*inreg%hR)
store i8*%h0,i8**%c,align 8
%h1=getelementptr inbounds i8,i8*%h0,i64 -4
%h2=bitcast i8*%h1 to i32*
%h3=load i32,i32*%h2,align 4
%h4=and i32%h3,268435455
%h5=add nsw i32%h4,-1
%h6=call i8*@sml_alloc(i32 inreg 20)#0
%h7=getelementptr inbounds i8,i8*%h6,i64 -4
%h8=bitcast i8*%h7 to i32*
store i32 1342177296,i32*%h8,align 4
store i8*%h6,i8**%d,align 8
%h9=getelementptr inbounds i8,i8*%h6,i64 4
%ia=bitcast i8*%h9 to i32*
store i32 0,i32*%ia,align 1
%ib=bitcast i8*%h6 to i32*
store i32%h5,i32*%ib,align 4
%ic=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%id=getelementptr inbounds i8,i8*%h6,i64 8
%ie=bitcast i8*%id to i8**
store i8*%ic,i8**%ie,align 8
%if=getelementptr inbounds i8,i8*%h6,i64 16
%ig=bitcast i8*%if to i32*
store i32 2,i32*%ig,align 4
%ih=call i8*@sml_alloc(i32 inreg 20)#0
%ii=getelementptr inbounds i8,i8*%ih,i64 -4
%ij=bitcast i8*%ii to i32*
store i32 1342177296,i32*%ij,align 4
store i8*%ih,i8**%c,align 8
%ik=getelementptr inbounds i8,i8*%ih,i64 4
%il=bitcast i8*%ik to i32*
store i32 0,i32*%il,align 1
%im=bitcast i8*%ih to i32*
store i32 6,i32*%im,align 4
%in=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%io=getelementptr inbounds i8,i8*%ih,i64 8
%ip=bitcast i8*%io to i8**
store i8*%in,i8**%ip,align 8
%iq=getelementptr inbounds i8,i8*%ih,i64 16
%ir=bitcast i8*%iq to i32*
store i32 2,i32*%ir,align 4
%is=call i8*@sml_alloc(i32 inreg 20)#0
%it=getelementptr inbounds i8,i8*%is,i64 -4
%iu=bitcast i8*%it to i32*
store i32 1342177296,i32*%iu,align 4
store i8*%is,i8**%d,align 8
%iv=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%iw=bitcast i8*%is to i8**
store i8*%iv,i8**%iw,align 8
%ix=getelementptr inbounds i8,i8*%is,i64 8
%iy=bitcast i8*%ix to i8**
store i8*null,i8**%iy,align 8
%iz=getelementptr inbounds i8,i8*%is,i64 16
%iA=bitcast i8*%iz to i32*
store i32 3,i32*%iA,align 4
%iB=call i8*@sml_alloc(i32 inreg 20)#0
%iC=getelementptr inbounds i8,i8*%iB,i64 -4
%iD=bitcast i8*%iC to i32*
store i32 1342177296,i32*%iD,align 4
store i8*%iB,i8**%e,align 8
%iE=getelementptr inbounds i8,i8*%iB,i64 4
%iF=bitcast i8*%iE to i32*
store i32 0,i32*%iF,align 1
%iG=bitcast i8*%iB to i32*
store i32 4,i32*%iG,align 4
%iH=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%iI=getelementptr inbounds i8,i8*%iB,i64 8
%iJ=bitcast i8*%iI to i8**
store i8*%iH,i8**%iJ,align 8
%iK=getelementptr inbounds i8,i8*%iB,i64 16
%iL=bitcast i8*%iK to i32*
store i32 2,i32*%iL,align 4
%iM=bitcast i8**%b to i32**
%iN=load i32*,i32**%iM,align 8
store i8*null,i8**%b,align 8
%iO=getelementptr inbounds i32,i32*%iN,i64 -1
%iP=load i32,i32*%iO,align 4
%iQ=and i32%iP,268435455
%iR=add nsw i32%iQ,-1
%iS=icmp eq i32%iR,%hC
br i1%iS,label%jP,label%iT
iT:
%iU=call fastcc i8*@_SMLFN5Int328toStringE(i32 inreg%hC)
store i8*%iU,i8**%b,align 8
%iV=call i8*@sml_alloc(i32 inreg 20)#0
%iW=getelementptr inbounds i8,i8*%iV,i64 -4
%iX=bitcast i8*%iW to i32*
store i32 1342177296,i32*%iX,align 4
%iY=bitcast i8*%iV to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bI,i64 0,i32 2,i64 0),i8**%iY,align 8
%iZ=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%i0=getelementptr inbounds i8,i8*%iV,i64 8
%i1=bitcast i8*%i0 to i8**
store i8*%iZ,i8**%i1,align 8
%i2=getelementptr inbounds i8,i8*%iV,i64 16
%i3=bitcast i8*%i2 to i32*
store i32 3,i32*%i3,align 4
%i4=call fastcc i8*@_SMLFN6String1_ZE(i8*inreg%iV)
store i8*%i4,i8**%b,align 8
%i5=call i8*@sml_alloc(i32 inreg 20)#0
%i6=getelementptr inbounds i8,i8*%i5,i64 -4
%i7=bitcast i8*%i6 to i32*
store i32 1342177296,i32*%i7,align 4
%i8=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%i9=bitcast i8*%i5 to i8**
store i8*%i8,i8**%i9,align 8
%ja=getelementptr inbounds i8,i8*%i5,i64 8
%jb=bitcast i8*%ja to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bK,i64 0,i32 2,i64 0),i8**%jb,align 8
%jc=getelementptr inbounds i8,i8*%i5,i64 16
%jd=bitcast i8*%jc to i32*
store i32 3,i32*%jd,align 4
%je=call fastcc i8*@_SMLFN6String1_ZE(i8*inreg%i5)
store i8*%je,i8**%b,align 8
%jf=getelementptr inbounds i8,i8*%je,i64 -4
%jg=bitcast i8*%jf to i32*
%jh=load i32,i32*%jg,align 4
%ji=and i32%jh,268435455
%jj=add nsw i32%ji,-1
%jk=call i8*@sml_alloc(i32 inreg 20)#0
%jl=getelementptr inbounds i8,i8*%jk,i64 -4
%jm=bitcast i8*%jl to i32*
store i32 1342177296,i32*%jm,align 4
store i8*%jk,i8**%c,align 8
%jn=getelementptr inbounds i8,i8*%jk,i64 4
%jo=bitcast i8*%jn to i32*
store i32 0,i32*%jo,align 1
%jp=bitcast i8*%jk to i32*
store i32%jj,i32*%jp,align 4
%jq=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%jr=getelementptr inbounds i8,i8*%jk,i64 8
%js=bitcast i8*%jr to i8**
store i8*%jq,i8**%js,align 8
%jt=getelementptr inbounds i8,i8*%jk,i64 16
%ju=bitcast i8*%jt to i32*
store i32 2,i32*%ju,align 4
%jv=call i8*@sml_alloc(i32 inreg 20)#0
%jw=getelementptr inbounds i8,i8*%jv,i64 -4
%jx=bitcast i8*%jw to i32*
store i32 1342177296,i32*%jx,align 4
store i8*%jv,i8**%b,align 8
%jy=getelementptr inbounds i8,i8*%jv,i64 4
%jz=bitcast i8*%jy to i32*
store i32 0,i32*%jz,align 1
%jA=bitcast i8*%jv to i32*
store i32 6,i32*%jA,align 4
%jB=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%jC=getelementptr inbounds i8,i8*%jv,i64 8
%jD=bitcast i8*%jC to i8**
store i8*%jB,i8**%jD,align 8
%jE=getelementptr inbounds i8,i8*%jv,i64 16
%jF=bitcast i8*%jE to i32*
store i32 2,i32*%jF,align 4
%jG=call i8*@sml_alloc(i32 inreg 20)#0
%jH=getelementptr inbounds i8,i8*%jG,i64 -4
%jI=bitcast i8*%jH to i32*
store i32 1342177296,i32*%jI,align 4
%jJ=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%jK=bitcast i8*%jG to i8**
store i8*%jJ,i8**%jK,align 8
%jL=getelementptr inbounds i8,i8*%jG,i64 8
%jM=bitcast i8*%jL to i8**
store i8*null,i8**%jM,align 8
%jN=getelementptr inbounds i8,i8*%jG,i64 16
%jO=bitcast i8*%jN to i32*
store i32 3,i32*%jO,align 4
br label%jP
jP:
%jQ=phi i8*[%jG,%iT],[null,%hx]
store i8*%jQ,i8**%b,align 8
%jR=call i8*@sml_alloc(i32 inreg 20)#0
%jS=getelementptr inbounds i8,i8*%jR,i64 -4
%jT=bitcast i8*%jS to i32*
store i32 1342177296,i32*%jT,align 4
store i8*%jR,i8**%c,align 8
%jU=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%jV=bitcast i8*%jR to i8**
store i8*%jU,i8**%jV,align 8
%jW=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%jX=getelementptr inbounds i8,i8*%jR,i64 8
%jY=bitcast i8*%jX to i8**
store i8*%jW,i8**%jY,align 8
%jZ=getelementptr inbounds i8,i8*%jR,i64 16
%j0=bitcast i8*%jZ to i32*
store i32 3,i32*%j0,align 4
%j1=call i8*@sml_alloc(i32 inreg 20)#0
%j2=getelementptr inbounds i8,i8*%j1,i64 -4
%j3=bitcast i8*%j2 to i32*
store i32 1342177296,i32*%j3,align 4
%j4=bitcast i8*%j1 to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@i,i64 0,i32 2)to i8*),i8**%j4,align 8
%j5=load i8*,i8**%c,align 8
%j6=getelementptr inbounds i8,i8*%j1,i64 8
%j7=bitcast i8*%j6 to i8**
store i8*%j5,i8**%j7,align 8
%j8=getelementptr inbounds i8,i8*%j1,i64 16
%j9=bitcast i8*%j8 to i32*
store i32 3,i32*%j9,align 4
ret i8*%j1
}
define fastcc i8*@_SMLFN10TermFormat12formatFormatE(i8*inreg%a)#2 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%g,label%f
f:
call void@sml_check(i32 inreg%d)
br label%g
g:
%h=call fastcc i8*@_SMLFN4List6concatE(i32 inreg 1,i32 inreg 8)
%i=getelementptr inbounds i8,i8*%h,i64 16
%j=bitcast i8*%i to i8*(i8*,i8*)**
%k=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%j,align 8
%l=bitcast i8*%h to i8**
%m=load i8*,i8**%l,align 8
store i8*%m,i8**%c,align 8
%n=call fastcc i8*@_SMLFN4List3mapE(i32 inreg 1,i32 inreg 8,i32 inreg 1,i32 inreg 8)
%o=getelementptr inbounds i8,i8*%n,i64 16
%p=bitcast i8*%o to i8*(i8*,i8*)**
%q=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%p,align 8
%r=bitcast i8*%n to i8**
%s=load i8*,i8**%r,align 8
%t=call fastcc i8*%q(i8*inreg%s,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@a2,i64 0,i32 2)to i8*))
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%A=call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
%B=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%C=call fastcc i8*%k(i8*inreg%B,i8*inreg%A)
%D=icmp eq i8*%C,null
br i1%D,label%E,label%F
E:
ret i8*null
F:
%G=getelementptr inbounds i8,i8*%C,i64 8
%H=bitcast i8*%G to i8**
%I=load i8*,i8**%H,align 8
ret i8*%I
}
define internal fastcc i8*@_SMLLLN10TermFormat17formatEnclosedMapE_683(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
m:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%k,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%e,align 8
br label%k
k:
%l=phi i8*[%j,%i],[%a,%m]
%n=getelementptr inbounds i8,i8*%l,i64 28
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=add i32%p,-1
%r=sub i32 0,%p
%s=and i32%q,%r
%t=getelementptr inbounds i8,i8*%l,i64 36
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=add i32%q,%v
%x=add i32%w,%s
%y=sub i32 0,%v
%z=and i32%x,%y
%A=getelementptr inbounds i8,i8*%l,i64 24
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=icmp eq i32%C,0
br i1%D,label%K,label%E
E:
%F=load i8*,i8**%c,align 8
%G=sext i32%s to i64
%H=getelementptr inbounds i8,i8*%F,i64%G
%I=bitcast i8*%H to i8**
%J=load i8*,i8**%I,align 8
br label%S
K:
%L=call i8*@sml_alloc(i32 inreg%p)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32%p,i32*%N,align 4
%O=load i8*,i8**%c,align 8
%P=sext i32%s to i64
%Q=getelementptr inbounds i8,i8*%O,i64%P
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%L,i8*%Q,i32%p,i1 false)
%R=load i8*,i8**%e,align 8
br label%S
S:
%T=phi i8*[%R,%K],[%l,%E]
%U=phi i8*[%O,%K],[%F,%E]
%V=phi i8*[%L,%K],[%J,%E]
store i8*%V,i8**%d,align 8
%W=getelementptr inbounds i8,i8*%T,i64 32
%X=bitcast i8*%W to i32*
%Y=load i32,i32*%X,align 4
%Z=icmp eq i32%Y,0
br i1%Z,label%ag,label%aa
aa:
%ab=bitcast i8*%T to i8**
store i8*null,i8**%c,align 8
%ac=sext i32%z to i64
%ad=getelementptr inbounds i8,i8*%U,i64%ac
%ae=bitcast i8*%ad to i8**
%af=load i8*,i8**%ae,align 8
br label%at
ag:
%ah=getelementptr inbounds i8,i8*%T,i64 36
%ai=bitcast i8*%ah to i32*
%aj=load i32,i32*%ai,align 4
%ak=call i8*@sml_alloc(i32 inreg%aj)#0
%al=getelementptr inbounds i8,i8*%ak,i64 -4
%am=bitcast i8*%al to i32*
store i32%aj,i32*%am,align 4
%an=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ao=sext i32%z to i64
%ap=getelementptr inbounds i8,i8*%an,i64%ao
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ak,i8*%ap,i32%aj,i1 false)
%aq=bitcast i8**%e to i8***
%ar=load i8**,i8***%aq,align 8
%as=load i8*,i8**%d,align 8
br label%at
at:
%au=phi i8*[%as,%ag],[%V,%aa]
%av=phi i8**[%ar,%ag],[%ab,%aa]
%aw=phi i8*[%ak,%ag],[%af,%aa]
store i8*%aw,i8**%c,align 8
%ax=load i8*,i8**%av,align 8
%ay=getelementptr inbounds i8,i8*%ax,i64 16
%az=bitcast i8*%ay to i8*(i8*,i8*)**
%aA=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%az,align 8
%aB=bitcast i8*%ax to i8**
%aC=load i8*,i8**%aB,align 8
store i8*null,i8**%d,align 8
%aD=call fastcc i8*%aA(i8*inreg%aC,i8*inreg%au)
store i8*%aD,i8**%d,align 8
%aE=load i8*,i8**%e,align 8
%aF=getelementptr inbounds i8,i8*%aE,i64 16
%aG=bitcast i8*%aF to i8**
%aH=load i8*,i8**%aG,align 8
store i8*%aH,i8**%f,align 8
%aI=getelementptr inbounds i8,i8*%aE,i64 8
%aJ=bitcast i8*%aI to i8**
%aK=load i8*,i8**%aJ,align 8
%aL=getelementptr inbounds i8,i8*%aK,i64 16
%aM=bitcast i8*%aL to i8*(i8*,i8*)**
%aN=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aM,align 8
store i8*null,i8**%e,align 8
%aO=bitcast i8*%aK to i8**
%aP=load i8*,i8**%aO,align 8
%aQ=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aR=call fastcc i8*%aN(i8*inreg%aP,i8*inreg%aQ)
store i8*%aR,i8**%c,align 8
%aS=call i8*@sml_alloc(i32 inreg 28)#0
%aT=getelementptr inbounds i8,i8*%aS,i64 -4
%aU=bitcast i8*%aT to i32*
store i32 1342177304,i32*%aU,align 4
%aV=load i8*,i8**%d,align 8
%aW=bitcast i8*%aS to i8**
store i8*%aV,i8**%aW,align 8
%aX=load i8*,i8**%f,align 8
%aY=getelementptr inbounds i8,i8*%aS,i64 8
%aZ=bitcast i8*%aY to i8**
store i8*%aX,i8**%aZ,align 8
%a0=load i8*,i8**%c,align 8
%a1=getelementptr inbounds i8,i8*%aS,i64 16
%a2=bitcast i8*%a1 to i8**
store i8*%a0,i8**%a2,align 8
%a3=getelementptr inbounds i8,i8*%aS,i64 24
%a4=bitcast i8*%a3 to i32*
store i32 7,i32*%a4,align 4
%a5=tail call fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_304(i8*inreg%aS)
ret i8*%a5
}
define internal fastcc i8*@_SMLLLN10TermFormat17formatEnclosedMapE_684(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%j=load atomic i32,i32*@sml_check_flag unordered,align 4
%k=icmp eq i32%j,0
br i1%k,label%l,label%n
l:
%m=bitcast i8*%a to i8**
br label%r
n:
call void@sml_check(i32 inreg%j)
%o=bitcast i8**%c to i8***
%p=load i8**,i8***%o,align 8
%q=bitcast i8**%p to i8*
br label%r
r:
%s=phi i8*[%q,%n],[%a,%l]
%t=phi i8**[%p,%n],[%m,%l]
%u=load i8*,i8**%t,align 8
store i8*%u,i8**%e,align 8
%v=getelementptr inbounds i8*,i8**%t,i64 2
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%f,align 8
%x=getelementptr inbounds i8*,i8**%t,i64 5
%y=load i8*,i8**%x,align 8
store i8*%y,i8**%g,align 8
%z=getelementptr inbounds i8,i8*%s,i64 56
%A=bitcast i8*%z to i32*
%B=load i32,i32*%A,align 4
%C=getelementptr inbounds i8,i8*%s,i64 60
%D=bitcast i8*%C to i32*
%E=load i32,i32*%D,align 4
%F=getelementptr inbounds i8,i8*%s,i64 64
%G=bitcast i8*%F to i32*
%H=load i32,i32*%G,align 4
%I=getelementptr inbounds i8,i8*%s,i64 68
%J=bitcast i8*%I to i32*
%K=load i32,i32*%J,align 4
%L=call i8*@sml_alloc(i32 inreg 44)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32 1342177320,i32*%N,align 4
store i8*%L,i8**%h,align 8
%O=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%P=bitcast i8*%L to i8**
store i8*%O,i8**%P,align 8
%Q=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%R=getelementptr inbounds i8,i8*%L,i64 8
%S=bitcast i8*%R to i8**
store i8*%Q,i8**%S,align 8
%T=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%U=getelementptr inbounds i8,i8*%L,i64 16
%V=bitcast i8*%U to i8**
store i8*%T,i8**%V,align 8
%W=getelementptr inbounds i8,i8*%L,i64 24
%X=bitcast i8*%W to i32*
store i32%B,i32*%X,align 4
%Y=getelementptr inbounds i8,i8*%L,i64 28
%Z=bitcast i8*%Y to i32*
store i32%E,i32*%Z,align 4
%aa=getelementptr inbounds i8,i8*%L,i64 32
%ab=bitcast i8*%aa to i32*
store i32%H,i32*%ab,align 4
%ac=getelementptr inbounds i8,i8*%L,i64 36
%ad=bitcast i8*%ac to i32*
store i32%K,i32*%ad,align 4
%ae=getelementptr inbounds i8,i8*%L,i64 40
%af=bitcast i8*%ae to i32*
store i32 7,i32*%af,align 4
%ag=call i8*@sml_alloc(i32 inreg 28)#0
%ah=getelementptr inbounds i8,i8*%ag,i64 -4
%ai=bitcast i8*%ah to i32*
store i32 1342177304,i32*%ai,align 4
store i8*%ag,i8**%i,align 8
%aj=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%ak=bitcast i8*%ag to i8**
store i8*%aj,i8**%ak,align 8
%al=getelementptr inbounds i8,i8*%ag,i64 8
%am=bitcast i8*%al to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat17formatEnclosedMapE_683 to void(...)*),void(...)**%am,align 8
%an=getelementptr inbounds i8,i8*%ag,i64 16
%ao=bitcast i8*%an to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat17formatEnclosedMapE_683 to void(...)*),void(...)**%ao,align 8
%ap=getelementptr inbounds i8,i8*%ag,i64 24
%aq=bitcast i8*%ap to i32*
store i32 -2147483647,i32*%aq,align 4
%ar=load i8*,i8**%c,align 8
%as=getelementptr inbounds i8,i8*%ar,i64 24
%at=bitcast i8*%as to i8**
%au=load i8*,i8**%at,align 8
store i8*%au,i8**%e,align 8
%av=getelementptr inbounds i8,i8*%ar,i64 32
%aw=bitcast i8*%av to i8**
%ax=load i8*,i8**%aw,align 8
store i8*%ax,i8**%f,align 8
%ay=getelementptr inbounds i8,i8*%ar,i64 48
%az=bitcast i8*%ay to i8**
%aA=load i8*,i8**%az,align 8
store i8*%aA,i8**%g,align 8
%aB=call i8*@sml_alloc(i32 inreg 36)#0
%aC=getelementptr inbounds i8,i8*%aB,i64 -4
%aD=bitcast i8*%aC to i32*
store i32 1342177312,i32*%aD,align 4
%aE=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%aF=bitcast i8*%aB to i8**
store i8*%aE,i8**%aF,align 8
%aG=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aH=getelementptr inbounds i8,i8*%aB,i64 8
%aI=bitcast i8*%aH to i8**
store i8*%aG,i8**%aI,align 8
%aJ=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%aK=getelementptr inbounds i8,i8*%aB,i64 16
%aL=bitcast i8*%aK to i8**
store i8*%aJ,i8**%aL,align 8
%aM=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%aN=getelementptr inbounds i8,i8*%aB,i64 24
%aO=bitcast i8*%aN to i8**
store i8*%aM,i8**%aO,align 8
%aP=getelementptr inbounds i8,i8*%aB,i64 32
%aQ=bitcast i8*%aP to i32*
store i32 15,i32*%aQ,align 4
%aR=call fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_229(i32 inreg 1,i32 inreg 8,i8*inreg%aB)
%aS=getelementptr inbounds i8,i8*%aR,i64 16
%aT=bitcast i8*%aS to i8*(i8*,i8*)**
%aU=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aT,align 8
%aV=bitcast i8*%aR to i8**
%aW=load i8*,i8**%aV,align 8
store i8*%aW,i8**%e,align 8
%aX=load i8*,i8**%c,align 8
%aY=getelementptr inbounds i8,i8*%aX,i64 8
%aZ=bitcast i8*%aY to i8**
%a0=load i8*,i8**%aZ,align 8
%a1=getelementptr inbounds i8,i8*%a0,i64 16
%a2=bitcast i8*%a1 to i8*(i8*,i8*)**
%a3=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a2,align 8
store i8*null,i8**%c,align 8
%a4=bitcast i8*%a0 to i8**
%a5=load i8*,i8**%a4,align 8
%a6=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%a7=call fastcc i8*%a3(i8*inreg%a5,i8*inreg%a6)
%a8=load i8*,i8**%e,align 8
%a9=tail call fastcc i8*%aU(i8*inreg%a8,i8*inreg%a7)
ret i8*%a9
}
define internal fastcc i8*@_SMLLLN10TermFormat17formatEnclosedMapE_685(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
%k=bitcast i8*%b to i8**
%l=load i8*,i8**%k,align 8
store i8*%l,i8**%c,align 8
%m=getelementptr inbounds i8,i8*%b,i64 8
%n=bitcast i8*%m to i8**
%o=load i8*,i8**%n,align 8
store i8*%o,i8**%d,align 8
%p=getelementptr inbounds i8,i8*%b,i64 16
%q=bitcast i8*%p to i8**
%r=load i8*,i8**%q,align 8
store i8*%r,i8**%e,align 8
%s=getelementptr inbounds i8,i8*%b,i64 24
%t=bitcast i8*%s to i8**
%u=load i8*,i8**%t,align 8
store i8*%u,i8**%f,align 8
%v=getelementptr inbounds i8,i8*%b,i64 32
%w=bitcast i8*%v to i8**
%x=load i8*,i8**%w,align 8
store i8*%x,i8**%g,align 8
%y=bitcast i8*%a to i8**
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%h,align 8
%A=getelementptr inbounds i8,i8*%a,i64 8
%B=bitcast i8*%A to i8**
%C=load i8*,i8**%B,align 8
store i8*%C,i8**%i,align 8
%D=getelementptr inbounds i8,i8*%a,i64 16
%E=bitcast i8*%D to i32*
%F=load i32,i32*%E,align 4
%G=getelementptr inbounds i8,i8*%a,i64 20
%H=bitcast i8*%G to i32*
%I=load i32,i32*%H,align 4
%J=getelementptr inbounds i8,i8*%a,i64 24
%K=bitcast i8*%J to i32*
%L=load i32,i32*%K,align 4
%M=getelementptr inbounds i8,i8*%a,i64 28
%N=bitcast i8*%M to i32*
%O=load i32,i32*%N,align 4
%P=call i8*@sml_alloc(i32 inreg 76)#0
%Q=getelementptr inbounds i8,i8*%P,i64 -4
%R=bitcast i8*%Q to i32*
store i32 1342177352,i32*%R,align 4
store i8*%P,i8**%j,align 8
%S=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%T=bitcast i8*%P to i8**
store i8*%S,i8**%T,align 8
%U=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%V=getelementptr inbounds i8,i8*%P,i64 8
%W=bitcast i8*%V to i8**
store i8*%U,i8**%W,align 8
%X=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%Y=getelementptr inbounds i8,i8*%P,i64 16
%Z=bitcast i8*%Y to i8**
store i8*%X,i8**%Z,align 8
%aa=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ab=getelementptr inbounds i8,i8*%P,i64 24
%ac=bitcast i8*%ab to i8**
store i8*%aa,i8**%ac,align 8
%ad=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%ae=getelementptr inbounds i8,i8*%P,i64 32
%af=bitcast i8*%ae to i8**
store i8*%ad,i8**%af,align 8
%ag=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%ah=getelementptr inbounds i8,i8*%P,i64 40
%ai=bitcast i8*%ah to i8**
store i8*%ag,i8**%ai,align 8
%aj=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%ak=getelementptr inbounds i8,i8*%P,i64 48
%al=bitcast i8*%ak to i8**
store i8*%aj,i8**%al,align 8
%am=getelementptr inbounds i8,i8*%P,i64 56
%an=bitcast i8*%am to i32*
store i32%F,i32*%an,align 4
%ao=getelementptr inbounds i8,i8*%P,i64 60
%ap=bitcast i8*%ao to i32*
store i32%I,i32*%ap,align 4
%aq=getelementptr inbounds i8,i8*%P,i64 64
%ar=bitcast i8*%aq to i32*
store i32%L,i32*%ar,align 4
%as=getelementptr inbounds i8,i8*%P,i64 68
%at=bitcast i8*%as to i32*
store i32%O,i32*%at,align 4
%au=getelementptr inbounds i8,i8*%P,i64 72
%av=bitcast i8*%au to i32*
store i32 127,i32*%av,align 4
%aw=call i8*@sml_alloc(i32 inreg 28)#0
%ax=getelementptr inbounds i8,i8*%aw,i64 -4
%ay=bitcast i8*%ax to i32*
store i32 1342177304,i32*%ay,align 4
%az=load i8*,i8**%j,align 8
%aA=bitcast i8*%aw to i8**
store i8*%az,i8**%aA,align 8
%aB=getelementptr inbounds i8,i8*%aw,i64 8
%aC=bitcast i8*%aB to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat17formatEnclosedMapE_684 to void(...)*),void(...)**%aC,align 8
%aD=getelementptr inbounds i8,i8*%aw,i64 16
%aE=bitcast i8*%aD to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat17formatEnclosedMapE_684 to void(...)*),void(...)**%aE,align 8
%aF=getelementptr inbounds i8,i8*%aw,i64 24
%aG=bitcast i8*%aF to i32*
store i32 1,i32*%aG,align 4
ret i8*%aw
}
define internal fastcc i8*@_SMLLLN10TermFormat17formatEnclosedMapE_686(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%b,i8**%c,align 8
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=getelementptr inbounds i8,i8*%a,i64 8
%i=bitcast i8*%h to i32*
%j=load i32,i32*%i,align 4
%k=getelementptr inbounds i8,i8*%a,i64 12
%l=bitcast i8*%k to i32*
%m=load i32,i32*%l,align 4
%n=getelementptr inbounds i8,i8*%a,i64 16
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%a,i64 20
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call i8*@sml_alloc(i32 inreg 36)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177312,i32*%v,align 4
store i8*%t,i8**%e,align 8
%w=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%z=getelementptr inbounds i8,i8*%t,i64 8
%A=bitcast i8*%z to i8**
store i8*%y,i8**%A,align 8
%B=getelementptr inbounds i8,i8*%t,i64 16
%C=bitcast i8*%B to i32*
store i32%j,i32*%C,align 4
%D=getelementptr inbounds i8,i8*%t,i64 20
%E=bitcast i8*%D to i32*
store i32%m,i32*%E,align 4
%F=getelementptr inbounds i8,i8*%t,i64 24
%G=bitcast i8*%F to i32*
store i32%p,i32*%G,align 4
%H=getelementptr inbounds i8,i8*%t,i64 28
%I=bitcast i8*%H to i32*
store i32%s,i32*%I,align 4
%J=getelementptr inbounds i8,i8*%t,i64 32
%K=bitcast i8*%J to i32*
store i32 3,i32*%K,align 4
%L=call i8*@sml_alloc(i32 inreg 28)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32 1342177304,i32*%N,align 4
%O=load i8*,i8**%e,align 8
%P=bitcast i8*%L to i8**
store i8*%O,i8**%P,align 8
%Q=getelementptr inbounds i8,i8*%L,i64 8
%R=bitcast i8*%Q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat17formatEnclosedMapE_685 to void(...)*),void(...)**%R,align 8
%S=getelementptr inbounds i8,i8*%L,i64 16
%T=bitcast i8*%S to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat17formatEnclosedMapE_685 to void(...)*),void(...)**%T,align 8
%U=getelementptr inbounds i8,i8*%L,i64 24
%V=bitcast i8*%U to i32*
store i32 -2147483647,i32*%V,align 4
ret i8*%L
}
define internal fastcc i8*@_SMLLLN10TermFormat17formatEnclosedMapE_687(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i32*
%l=load i32,i32*%k,align 4
%m=getelementptr inbounds i8,i8*%a,i64 12
%n=bitcast i8*%m to i32*
%o=load i32,i32*%n,align 4
%p=call i8*@sml_alloc(i32 inreg 28)#0
%q=getelementptr inbounds i8,i8*%p,i64 -4
%r=bitcast i8*%q to i32*
store i32 1342177304,i32*%r,align 4
store i8*%p,i8**%d,align 8
%s=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8*%p to i8**
store i8*%s,i8**%t,align 8
%u=getelementptr inbounds i8,i8*%p,i64 8
%v=bitcast i8*%u to i32*
store i32%f,i32*%v,align 4
%w=getelementptr inbounds i8,i8*%p,i64 12
%x=bitcast i8*%w to i32*
store i32%i,i32*%x,align 4
%y=getelementptr inbounds i8,i8*%p,i64 16
%z=bitcast i8*%y to i32*
store i32%l,i32*%z,align 4
%A=getelementptr inbounds i8,i8*%p,i64 20
%B=bitcast i8*%A to i32*
store i32%o,i32*%B,align 4
%C=getelementptr inbounds i8,i8*%p,i64 24
%D=bitcast i8*%C to i32*
store i32 1,i32*%D,align 4
%E=call i8*@sml_alloc(i32 inreg 28)#0
%F=getelementptr inbounds i8,i8*%E,i64 -4
%G=bitcast i8*%F to i32*
store i32 1342177304,i32*%G,align 4
%H=load i8*,i8**%d,align 8
%I=bitcast i8*%E to i8**
store i8*%H,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%E,i64 8
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat17formatEnclosedMapE_686 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%E,i64 16
%M=bitcast i8*%L to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat17formatEnclosedMapE_686 to void(...)*),void(...)**%M,align 8
%N=getelementptr inbounds i8,i8*%E,i64 24
%O=bitcast i8*%N to i32*
store i32 -2147483647,i32*%O,align 4
ret i8*%E
}
define fastcc i8*@_SMLFN10TermFormat17formatEnclosedMapE(i32 inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e,i32 inreg%f)#4 gc"smlsharp"{
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%g,i8*null)#0
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=bitcast i8*%h to i32*
%j=getelementptr inbounds i8,i8*%h,i64 -4
%k=bitcast i8*%j to i32*
store i32 1342177296,i32*%k,align 4
store i8*%h,i8**%g,align 8
store i32%a,i32*%i,align 4
%l=getelementptr inbounds i8,i8*%h,i64 4
%m=bitcast i8*%l to i32*
store i32%b,i32*%m,align 4
%n=getelementptr inbounds i8,i8*%h,i64 8
%o=bitcast i8*%n to i32*
store i32%e,i32*%o,align 4
%p=getelementptr inbounds i8,i8*%h,i64 12
%q=bitcast i8*%p to i32*
store i32%f,i32*%q,align 4
%r=getelementptr inbounds i8,i8*%h,i64 16
%s=bitcast i8*%r to i32*
store i32 0,i32*%s,align 4
%t=call i8*@sml_alloc(i32 inreg 28)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177304,i32*%v,align 4
%w=load i8*,i8**%g,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat17formatEnclosedMapE_687 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%t,i64 16
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat17formatEnclosedMapE_687 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%t,i64 24
%D=bitcast i8*%C to i32*
store i32 -2147483647,i32*%D,align 4
ret i8*%t
}
define internal fastcc i8*@_SMLLLN10TermFormat12formatIfConsE_690(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=icmp eq i8*%b,null
br i1%c,label%d,label%e
d:
ret i8*null
e:
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
ret i8*%g
}
define internal fastcc i8*@_SMLLLN10TermFormat12formatIfConsE_691(i8*inreg%a)#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=getelementptr inbounds i8,i8*%d,i64 -4
%f=bitcast i8*%e to i32*
store i32 1342177288,i32*%f,align 4
store i8*%d,i8**%c,align 8
%g=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%h=bitcast i8*%d to i8**
store i8*%g,i8**%h,align 8
%i=getelementptr inbounds i8,i8*%d,i64 8
%j=bitcast i8*%i to i32*
store i32 1,i32*%j,align 4
%k=call i8*@sml_alloc(i32 inreg 28)#0
%l=getelementptr inbounds i8,i8*%k,i64 -4
%m=bitcast i8*%l to i32*
store i32 1342177304,i32*%m,align 4
%n=load i8*,i8**%c,align 8
%o=bitcast i8*%k to i8**
store i8*%n,i8**%o,align 8
%p=getelementptr inbounds i8,i8*%k,i64 8
%q=bitcast i8*%p to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12formatIfConsE_690 to void(...)*),void(...)**%q,align 8
%r=getelementptr inbounds i8,i8*%k,i64 16
%s=bitcast i8*%r to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12formatIfConsE_690 to void(...)*),void(...)**%s,align 8
%t=getelementptr inbounds i8,i8*%k,i64 24
%u=bitcast i8*%t to i32*
store i32 -2147483647,i32*%u,align 4
ret i8*%k
}
define fastcc i8*@_SMLFN10TermFormat12formatIfConsE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
ret i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@br,i64 0,i32 2)to i8*)
}
define internal fastcc i8*@_SMLLLN10TermFormat13formatIfEmptyE_695(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%c,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=getelementptr inbounds i8,i8*%j,i64 8
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%j,i64 12
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=call fastcc i8*@_SMLFN4SEnv7isEmptyE(i32 inreg%n,i32 inreg%q)
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
%x=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%y=call fastcc i8*%u(i8*inreg%w,i8*inreg%x)
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=icmp eq i32%A,0
br i1%B,label%G,label%C
C:
%D=bitcast i8**%c to i8***
%E=load i8**,i8***%D,align 8
%F=load i8*,i8**%E,align 8
ret i8*%F
G:
ret i8*null
}
define internal fastcc i8*@_SMLLLN10TermFormat13formatIfEmptyE_696(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat13formatIfEmptyE_695 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat13formatIfEmptyE_695 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat13formatIfEmptyE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat13formatIfEmptyE_696 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat13formatIfEmptyE_696 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLLN10TermFormat19formatIfEmptyFormatE_699(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%h,label%g
g:
call void@sml_check(i32 inreg%e)
br label%h
h:
%i=call fastcc i8*@_SMLFN4List4nullE(i32 inreg 1,i32 inreg 8)
%j=getelementptr inbounds i8,i8*%i,i64 16
%k=bitcast i8*%j to i8*(i8*,i8*)**
%l=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%k,align 8
%m=bitcast i8*%i to i8**
%n=load i8*,i8**%m,align 8
%o=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%p=call fastcc i8*%l(i8*inreg%n,i8*inreg%o)
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=icmp eq i32%r,0
%t=load i8*,i8**%d,align 8
br i1%s,label%x,label%u
u:
%v=bitcast i8*%t to i8**
%w=load i8*,i8**%v,align 8
ret i8*%w
x:
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to i8**
%A=load i8*,i8**%z,align 8
ret i8*%A
}
define fastcc i8*@_SMLFN10TermFormat19formatIfEmptyFormatE(i8*inreg%a)#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i8**
%f=load i8*,i8**%e,align 8
store i8*%f,i8**%b,align 8
%g=getelementptr inbounds i8,i8*%a,i64 8
%h=bitcast i8*%g to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%c,align 8
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i8**
store i8*%o,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%j,i64 16
%s=bitcast i8*%r to i32*
store i32 3,i32*%s,align 4
%t=call i8*@sml_alloc(i32 inreg 28)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177304,i32*%v,align 4
%w=load i8*,i8**%d,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat19formatIfEmptyFormatE_699 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%t,i64 16
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat19formatIfEmptyFormatE_699 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%t,i64 24
%D=bitcast i8*%C to i32*
store i32 -2147483647,i32*%D,align 4
ret i8*%t
}
define internal fastcc i8*@_SMLLLN10TermFormat22formatIfEmptySymbolMapE_702(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%c,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=getelementptr inbounds i8,i8*%j,i64 8
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%j,i64 12
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=call fastcc i8*@_SMLFN9SymbolEnv7isEmptyE(i32 inreg%n,i32 inreg%q)
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
%x=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%y=call fastcc i8*%u(i8*inreg%w,i8*inreg%x)
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=icmp eq i32%A,0
br i1%B,label%G,label%C
C:
%D=bitcast i8**%c to i8***
%E=load i8**,i8***%D,align 8
%F=load i8*,i8**%E,align 8
ret i8*%F
G:
ret i8*null
}
define internal fastcc i8*@_SMLLLN10TermFormat22formatIfEmptySymbolMapE_703(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat22formatIfEmptySymbolMapE_702 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat22formatIfEmptySymbolMapE_702 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat22formatIfEmptySymbolMapE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat22formatIfEmptySymbolMapE_703 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat22formatIfEmptySymbolMapE_703 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLLN10TermFormat12formatIfListE_706(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=getelementptr inbounds i8,i8*%a,i64 8
%d=bitcast i8*%c to i32*
%e=load i32,i32*%d,align 4
%f=icmp eq i8*%b,null
br i1%f,label%g,label%h
g:
ret i8*null
h:
%i=add i32%e,-1
%j=sub i32 0,%e
%k=and i32%i,%j
%l=add i32%e,7
%m=add i32%l,%k
%n=and i32%m,-8
%o=sext i32%n to i64
%p=getelementptr inbounds i8,i8*%b,i64%o
%q=bitcast i8*%p to i8**
%r=load i8*,i8**%q,align 8
%s=icmp eq i8*%r,null
br i1%s,label%g,label%t
t:
%u=bitcast i8*%a to i8**
%v=load i8*,i8**%u,align 8
ret i8*%v
}
define internal fastcc i8*@_SMLLLN10TermFormat12formatIfListE_707(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=call i8*@sml_alloc(i32 inreg 20)#0
%h=getelementptr inbounds i8,i8*%g,i64 -4
%i=bitcast i8*%h to i32*
store i32 1342177296,i32*%i,align 4
store i8*%g,i8**%d,align 8
%j=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%k=bitcast i8*%g to i8**
store i8*%j,i8**%k,align 8
%l=getelementptr inbounds i8,i8*%g,i64 8
%m=bitcast i8*%l to i32*
store i32%f,i32*%m,align 4
%n=getelementptr inbounds i8,i8*%g,i64 16
%o=bitcast i8*%n to i32*
store i32 1,i32*%o,align 4
%p=call i8*@sml_alloc(i32 inreg 28)#0
%q=getelementptr inbounds i8,i8*%p,i64 -4
%r=bitcast i8*%q to i32*
store i32 1342177304,i32*%r,align 4
%s=load i8*,i8**%d,align 8
%t=bitcast i8*%p to i8**
store i8*%s,i8**%t,align 8
%u=getelementptr inbounds i8,i8*%p,i64 8
%v=bitcast i8*%u to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12formatIfListE_706 to void(...)*),void(...)**%v,align 8
%w=getelementptr inbounds i8,i8*%p,i64 16
%x=bitcast i8*%w to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12formatIfListE_706 to void(...)*),void(...)**%x,align 8
%y=getelementptr inbounds i8,i8*%p,i64 24
%z=bitcast i8*%y to i32*
store i32 -2147483647,i32*%z,align 4
ret i8*%p
}
define fastcc i8*@_SMLFN10TermFormat12formatIfListE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%b,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 8
%i=bitcast i8*%h to i32*
store i32 0,i32*%i,align 4
%j=call i8*@sml_alloc(i32 inreg 28)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177304,i32*%l,align 4
%m=load i8*,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12formatIfListE_707 to void(...)*),void(...)**%p,align 8
%q=getelementptr inbounds i8,i8*%j,i64 16
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12formatIfListE_707 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%j,i64 24
%t=bitcast i8*%s to i32*
store i32 -2147483647,i32*%t,align 4
ret i8*%j
}
define internal fastcc i8*@_SMLLLN10TermFormat16formatIfNonEmptyE_710(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%c,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=getelementptr inbounds i8,i8*%j,i64 8
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%j,i64 12
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=call fastcc i8*@_SMLFN4SEnv7isEmptyE(i32 inreg%n,i32 inreg%q)
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
%x=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%y=call fastcc i8*%u(i8*inreg%w,i8*inreg%x)
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=icmp eq i32%A,0
br i1%B,label%D,label%C
C:
ret i8*null
D:
%E=bitcast i8**%c to i8***
%F=load i8**,i8***%E,align 8
%G=load i8*,i8**%F,align 8
ret i8*%G
}
define internal fastcc i8*@_SMLLLN10TermFormat16formatIfNonEmptyE_711(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat16formatIfNonEmptyE_710 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat16formatIfNonEmptyE_710 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat16formatIfNonEmptyE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat16formatIfNonEmptyE_711 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat16formatIfNonEmptyE_711 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLLN10TermFormat25formatIfNonEmptySymbolMapE_714(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%c,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=getelementptr inbounds i8,i8*%j,i64 8
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%j,i64 12
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=call fastcc i8*@_SMLFN9SymbolEnv7isEmptyE(i32 inreg%n,i32 inreg%q)
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
%x=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%y=call fastcc i8*%u(i8*inreg%w,i8*inreg%x)
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=icmp eq i32%A,0
br i1%B,label%D,label%C
C:
ret i8*null
D:
%E=bitcast i8**%c to i8***
%F=load i8**,i8***%E,align 8
%G=load i8*,i8**%F,align 8
ret i8*%G
}
define internal fastcc i8*@_SMLLLN10TermFormat25formatIfNonEmptySymbolMapE_715(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat25formatIfNonEmptySymbolMapE_714 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat25formatIfNonEmptySymbolMapE_714 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat25formatIfNonEmptySymbolMapE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat25formatIfNonEmptySymbolMapE_715 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat25formatIfNonEmptySymbolMapE_715 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define fastcc i8*@_SMLFN10TermFormat11emptyBtvEnvE(i32 inreg%a,i32 inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%g,label%f
f:
call void@sml_check(i32 inreg%d)
br label%g
g:
%h=call fastcc i8*@_SMLFN14BoundTypeVarID3Map5emptyE(i32 inreg 1,i32 inreg 8)
store i8*%h,i8**%c,align 8
%i=call i8*@sml_alloc(i32 inreg 20)#0
%j=getelementptr inbounds i8,i8*%i,i64 -4
%k=bitcast i8*%j to i32*
store i32 1342177296,i32*%k,align 4
%l=bitcast i8*%i to i64*
store i64 0,i64*%l,align 4
%m=load i8*,i8**%c,align 8
%n=getelementptr inbounds i8,i8*%i,i64 8
%o=bitcast i8*%n to i8**
store i8*%m,i8**%o,align 8
%p=getelementptr inbounds i8,i8*%i,i64 16
%q=bitcast i8*%p to i32*
store i32 2,i32*%q,align 4
ret i8*%i
}
define internal fastcc i8*@_SMLLLN10TermFormat10makeBtvEnvE_720(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
n:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%l,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%c,align 8
%k=load i8*,i8**%e,align 8
br label%l
l:
%m=phi i8*[%k,%i],[%a,%n]
%o=phi i8*[%j,%i],[%b,%n]
%p=getelementptr inbounds i8,i8*%m,i64 4
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=add i32%r,3
%t=sub i32 0,%r
%u=and i32%s,%t
%v=add i32%r,7
%w=add i32%v,%u
%x=and i32%w,-8
%y=lshr i32%u,3
%z=bitcast i8*%m to i32*
%A=load i32,i32*%z,align 4
%B=shl i32%A,%y
%C=or i32%x,4
%D=bitcast i8*%o to i32*
%E=load i32,i32*%D,align 4
%F=icmp eq i32%A,0
br i1%F,label%L,label%G
G:
%H=sext i32%u to i64
%I=getelementptr inbounds i8,i8*%o,i64%H
%J=bitcast i8*%I to i8**
%K=load i8*,i8**%J,align 8
br label%S
L:
%M=call i8*@sml_alloc(i32 inreg%r)#0
%N=getelementptr inbounds i8,i8*%M,i64 -4
%O=bitcast i8*%N to i32*
store i32%r,i32*%O,align 4
%P=load i8*,i8**%c,align 8
%Q=sext i32%u to i64
%R=getelementptr inbounds i8,i8*%P,i64%Q
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%M,i8*%R,i32%r,i1 false)
br label%S
S:
%T=phi i64[%Q,%L],[%H,%G]
%U=phi i8*[%P,%L],[%o,%G]
%V=phi i8*[%M,%L],[%K,%G]
store i8*%V,i8**%d,align 8
%W=sext i32%x to i64
%X=getelementptr inbounds i8,i8*%U,i64%W
%Y=bitcast i8*%X to i8**
%Z=load i8*,i8**%Y,align 8
%aa=bitcast i8*%Z to i32*
%ab=load i32,i32*%aa,align 4
%ac=getelementptr inbounds i8,i8*%Z,i64 8
%ad=bitcast i8*%ac to i8**
%ae=load i8*,i8**%ad,align 8
store i8*%ae,i8**%c,align 8
%af=add nsw i32%ab,1
%ag=call fastcc i8*@_SMLFN14BoundTypeVarID3Map6insertE(i32 inreg 1,i32 inreg 8)
%ah=getelementptr inbounds i8,i8*%ag,i64 16
%ai=bitcast i8*%ah to i8*(i8*,i8*)**
%aj=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ai,align 8
%ak=bitcast i8*%ag to i8**
%al=load i8*,i8**%ak,align 8
store i8*%al,i8**%f,align 8
%am=load i8*,i8**%e,align 8
%an=getelementptr inbounds i8,i8*%am,i64 4
%ao=bitcast i8*%an to i32*
%ap=load i32,i32*%ao,align 4
store i8*null,i8**%e,align 8
%aq=bitcast i8*%am to i32*
%ar=load i32,i32*%aq,align 4
%as=call i8*@sml_alloc(i32 inreg%C)#0
%at=or i32%x,1342177280
%au=getelementptr inbounds i8,i8*%as,i64 -4
%av=bitcast i8*%au to i32*
store i32%at,i32*%av,align 4
store i8*%as,i8**%e,align 8
call void@llvm.memset.p0i8.i32(i8*%as,i8 0,i32%C,i1 false)
%aw=bitcast i8*%as to i32*
store i32%ab,i32*%aw,align 4
%ax=icmp eq i32%ar,0
%ay=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%az=getelementptr inbounds i8,i8*%as,i64%T
br i1%ax,label%aA,label%aB
aA:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%az,i8*%ay,i32%ap,i1 false)
br label%aD
aB:
%aC=bitcast i8*%az to i8**
store i8*%ay,i8**%aC,align 8
br label%aD
aD:
%aE=getelementptr inbounds i8,i8*%as,i64%W
%aF=bitcast i8*%aE to i32*
store i32%B,i32*%aF,align 4
%aG=call i8*@sml_alloc(i32 inreg 28)#0
%aH=getelementptr inbounds i8,i8*%aG,i64 -4
%aI=bitcast i8*%aH to i32*
store i32 1342177304,i32*%aI,align 4
%aJ=getelementptr inbounds i8,i8*%aG,i64 12
%aK=bitcast i8*%aJ to i32*
store i32 0,i32*%aK,align 1
%aL=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aM=bitcast i8*%aG to i8**
store i8*%aL,i8**%aM,align 8
%aN=getelementptr inbounds i8,i8*%aG,i64 8
%aO=bitcast i8*%aN to i32*
store i32%E,i32*%aO,align 4
%aP=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aQ=getelementptr inbounds i8,i8*%aG,i64 16
%aR=bitcast i8*%aQ to i8**
store i8*%aP,i8**%aR,align 8
%aS=getelementptr inbounds i8,i8*%aG,i64 24
%aT=bitcast i8*%aS to i32*
store i32 5,i32*%aT,align 4
%aU=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%aV=call fastcc i8*%aj(i8*inreg%aU,i8*inreg%aG)
store i8*%aV,i8**%c,align 8
%aW=call i8*@sml_alloc(i32 inreg 20)#0
%aX=bitcast i8*%aW to i32*
%aY=getelementptr inbounds i8,i8*%aW,i64 -4
%aZ=bitcast i8*%aY to i32*
store i32 1342177296,i32*%aZ,align 4
%a0=getelementptr inbounds i8,i8*%aW,i64 4
%a1=bitcast i8*%a0 to i32*
store i32 0,i32*%a1,align 1
store i32%af,i32*%aX,align 4
%a2=load i8*,i8**%c,align 8
%a3=getelementptr inbounds i8,i8*%aW,i64 8
%a4=bitcast i8*%a3 to i8**
store i8*%a2,i8**%a4,align 8
%a5=getelementptr inbounds i8,i8*%aW,i64 16
%a6=bitcast i8*%a5 to i32*
store i32 2,i32*%a6,align 4
ret i8*%aW
}
define internal fastcc i8*@_SMLLLN10TermFormat10makeBtvEnvE_721(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%e,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%j,label%i
i:
call void@sml_check(i32 inreg%g)
br label%j
j:
%k=call fastcc i8*@_SMLFN14BoundTypeVarID3Map5emptyE(i32 inreg 1,i32 inreg 8)
store i8*%k,i8**%f,align 8
%l=call i8*@sml_alloc(i32 inreg 20)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177296,i32*%n,align 4
store i8*%l,i8**%c,align 8
%o=bitcast i8*%l to i64*
store i64 0,i64*%o,align 4
%p=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to i8**
store i8*%p,i8**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to i32*
store i32 2,i32*%t,align 4
%u=load i8*,i8**%d,align 8
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=getelementptr inbounds i8,i8*%u,i64 4
%y=bitcast i8*%x to i32*
%z=load i32,i32*%y,align 4
%A=call fastcc i8*@_SMLFN14BoundTypeVarID3Map6foldliE(i32 inreg%w,i32 inreg%z,i32 inreg 1,i32 inreg 8)
%B=getelementptr inbounds i8,i8*%A,i64 16
%C=bitcast i8*%B to i8*(i8*,i8*)**
%D=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%C,align 8
%E=bitcast i8*%A to i8**
%F=load i8*,i8**%E,align 8
store i8*%F,i8**%f,align 8
%G=load i8*,i8**%d,align 8
%H=bitcast i8*%G to i32*
%I=load i32,i32*%H,align 4
store i8*null,i8**%d,align 8
%J=getelementptr inbounds i8,i8*%G,i64 4
%K=bitcast i8*%J to i32*
%L=load i32,i32*%K,align 4
%M=call i8*@sml_alloc(i32 inreg 12)#0
%N=bitcast i8*%M to i32*
%O=getelementptr inbounds i8,i8*%M,i64 -4
%P=bitcast i8*%O to i32*
store i32 1342177288,i32*%P,align 4
store i8*%M,i8**%d,align 8
store i32%I,i32*%N,align 4
%Q=getelementptr inbounds i8,i8*%M,i64 4
%R=bitcast i8*%Q to i32*
store i32%L,i32*%R,align 4
%S=getelementptr inbounds i8,i8*%M,i64 8
%T=bitcast i8*%S to i32*
store i32 0,i32*%T,align 4
%U=call i8*@sml_alloc(i32 inreg 28)#0
%V=getelementptr inbounds i8,i8*%U,i64 -4
%W=bitcast i8*%V to i32*
store i32 1342177304,i32*%W,align 4
%X=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%Y=bitcast i8*%U to i8**
store i8*%X,i8**%Y,align 8
%Z=getelementptr inbounds i8,i8*%U,i64 8
%aa=bitcast i8*%Z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10makeBtvEnvE_720 to void(...)*),void(...)**%aa,align 8
%ab=getelementptr inbounds i8,i8*%U,i64 16
%ac=bitcast i8*%ab to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10makeBtvEnvE_720 to void(...)*),void(...)**%ac,align 8
%ad=getelementptr inbounds i8,i8*%U,i64 24
%ae=bitcast i8*%ad to i32*
store i32 -2147483647,i32*%ae,align 4
%af=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%ag=call fastcc i8*%D(i8*inreg%af,i8*inreg%U)
%ah=getelementptr inbounds i8,i8*%ag,i64 16
%ai=bitcast i8*%ah to i8*(i8*,i8*)**
%aj=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ai,align 8
%ak=bitcast i8*%ag to i8**
%al=load i8*,i8**%ak,align 8
%am=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%an=call fastcc i8*%aj(i8*inreg%al,i8*inreg%am)
%ao=getelementptr inbounds i8,i8*%an,i64 16
%ap=bitcast i8*%ao to i8*(i8*,i8*)**
%aq=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ap,align 8
%ar=bitcast i8*%an to i8**
%as=load i8*,i8**%ar,align 8
%at=load i8*,i8**%e,align 8
%au=tail call fastcc i8*%aq(i8*inreg%as,i8*inreg%at)
ret i8*%au
}
define fastcc i8*@_SMLFN10TermFormat10makeBtvEnvE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10makeBtvEnvE_721 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10makeBtvEnvE_721 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLLN10TermFormat12extendBtvEnvE_724(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
n:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%l,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%c,align 8
%k=load i8*,i8**%e,align 8
br label%l
l:
%m=phi i8*[%k,%i],[%a,%n]
%o=phi i8*[%j,%i],[%b,%n]
%p=getelementptr inbounds i8,i8*%m,i64 4
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=add i32%r,3
%t=sub i32 0,%r
%u=and i32%s,%t
%v=add i32%r,7
%w=add i32%v,%u
%x=and i32%w,-8
%y=lshr i32%u,3
%z=bitcast i8*%m to i32*
%A=load i32,i32*%z,align 4
%B=shl i32%A,%y
%C=or i32%x,4
%D=bitcast i8*%o to i32*
%E=load i32,i32*%D,align 4
%F=icmp eq i32%A,0
br i1%F,label%L,label%G
G:
%H=sext i32%u to i64
%I=getelementptr inbounds i8,i8*%o,i64%H
%J=bitcast i8*%I to i8**
%K=load i8*,i8**%J,align 8
br label%S
L:
%M=call i8*@sml_alloc(i32 inreg%r)#0
%N=getelementptr inbounds i8,i8*%M,i64 -4
%O=bitcast i8*%N to i32*
store i32%r,i32*%O,align 4
%P=load i8*,i8**%c,align 8
%Q=sext i32%u to i64
%R=getelementptr inbounds i8,i8*%P,i64%Q
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%M,i8*%R,i32%r,i1 false)
br label%S
S:
%T=phi i64[%Q,%L],[%H,%G]
%U=phi i8*[%P,%L],[%o,%G]
%V=phi i8*[%M,%L],[%K,%G]
store i8*%V,i8**%d,align 8
%W=sext i32%x to i64
%X=getelementptr inbounds i8,i8*%U,i64%W
%Y=bitcast i8*%X to i8**
%Z=load i8*,i8**%Y,align 8
%aa=bitcast i8*%Z to i32*
%ab=load i32,i32*%aa,align 4
%ac=getelementptr inbounds i8,i8*%Z,i64 8
%ad=bitcast i8*%ac to i8**
%ae=load i8*,i8**%ad,align 8
store i8*%ae,i8**%c,align 8
%af=add nsw i32%ab,1
%ag=call fastcc i8*@_SMLFN14BoundTypeVarID3Map6insertE(i32 inreg 1,i32 inreg 8)
%ah=getelementptr inbounds i8,i8*%ag,i64 16
%ai=bitcast i8*%ah to i8*(i8*,i8*)**
%aj=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ai,align 8
%ak=bitcast i8*%ag to i8**
%al=load i8*,i8**%ak,align 8
store i8*%al,i8**%f,align 8
%am=load i8*,i8**%e,align 8
%an=getelementptr inbounds i8,i8*%am,i64 4
%ao=bitcast i8*%an to i32*
%ap=load i32,i32*%ao,align 4
store i8*null,i8**%e,align 8
%aq=bitcast i8*%am to i32*
%ar=load i32,i32*%aq,align 4
%as=call i8*@sml_alloc(i32 inreg%C)#0
%at=or i32%x,1342177280
%au=getelementptr inbounds i8,i8*%as,i64 -4
%av=bitcast i8*%au to i32*
store i32%at,i32*%av,align 4
store i8*%as,i8**%e,align 8
call void@llvm.memset.p0i8.i32(i8*%as,i8 0,i32%C,i1 false)
%aw=bitcast i8*%as to i32*
store i32%ab,i32*%aw,align 4
%ax=icmp eq i32%ar,0
%ay=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%az=getelementptr inbounds i8,i8*%as,i64%T
br i1%ax,label%aA,label%aB
aA:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%az,i8*%ay,i32%ap,i1 false)
br label%aD
aB:
%aC=bitcast i8*%az to i8**
store i8*%ay,i8**%aC,align 8
br label%aD
aD:
%aE=getelementptr inbounds i8,i8*%as,i64%W
%aF=bitcast i8*%aE to i32*
store i32%B,i32*%aF,align 4
%aG=call i8*@sml_alloc(i32 inreg 28)#0
%aH=getelementptr inbounds i8,i8*%aG,i64 -4
%aI=bitcast i8*%aH to i32*
store i32 1342177304,i32*%aI,align 4
%aJ=getelementptr inbounds i8,i8*%aG,i64 12
%aK=bitcast i8*%aJ to i32*
store i32 0,i32*%aK,align 1
%aL=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aM=bitcast i8*%aG to i8**
store i8*%aL,i8**%aM,align 8
%aN=getelementptr inbounds i8,i8*%aG,i64 8
%aO=bitcast i8*%aN to i32*
store i32%E,i32*%aO,align 4
%aP=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aQ=getelementptr inbounds i8,i8*%aG,i64 16
%aR=bitcast i8*%aQ to i8**
store i8*%aP,i8**%aR,align 8
%aS=getelementptr inbounds i8,i8*%aG,i64 24
%aT=bitcast i8*%aS to i32*
store i32 5,i32*%aT,align 4
%aU=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%aV=call fastcc i8*%aj(i8*inreg%aU,i8*inreg%aG)
store i8*%aV,i8**%c,align 8
%aW=call i8*@sml_alloc(i32 inreg 20)#0
%aX=bitcast i8*%aW to i32*
%aY=getelementptr inbounds i8,i8*%aW,i64 -4
%aZ=bitcast i8*%aY to i32*
store i32 1342177296,i32*%aZ,align 4
%a0=getelementptr inbounds i8,i8*%aW,i64 4
%a1=bitcast i8*%a0 to i32*
store i32 0,i32*%a1,align 1
store i32%af,i32*%aX,align 4
%a2=load i8*,i8**%c,align 8
%a3=getelementptr inbounds i8,i8*%aW,i64 8
%a4=bitcast i8*%a3 to i8**
store i8*%a2,i8**%a4,align 8
%a5=getelementptr inbounds i8,i8*%aW,i64 16
%a6=bitcast i8*%a5 to i32*
store i32 2,i32*%a6,align 4
ret i8*%aW
}
define internal fastcc i8*@_SMLLLN10TermFormat12extendBtvEnvE_725(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
m:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%k,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%c,align 8
br label%k
k:
%l=phi i8*[%j,%i],[%a,%m]
%n=getelementptr inbounds i8,i8*%l,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%l,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLFN14BoundTypeVarID3Map6foldliE(i32 inreg%p,i32 inreg%s,i32 inreg 1,i32 inreg 8)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
store i8*%y,i8**%e,align 8
%z=load i8*,i8**%c,align 8
%A=getelementptr inbounds i8,i8*%z,i64 8
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=getelementptr inbounds i8,i8*%z,i64 12
%E=bitcast i8*%D to i32*
%F=load i32,i32*%E,align 4
%G=call i8*@sml_alloc(i32 inreg 12)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 1342177288,i32*%J,align 4
store i8*%G,i8**%f,align 8
store i32%C,i32*%H,align 4
%K=getelementptr inbounds i8,i8*%G,i64 4
%L=bitcast i8*%K to i32*
store i32%F,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%G,i64 8
%N=bitcast i8*%M to i32*
store i32 0,i32*%N,align 4
%O=call i8*@sml_alloc(i32 inreg 28)#0
%P=getelementptr inbounds i8,i8*%O,i64 -4
%Q=bitcast i8*%P to i32*
store i32 1342177304,i32*%Q,align 4
%R=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%S=bitcast i8*%O to i8**
store i8*%R,i8**%S,align 8
%T=getelementptr inbounds i8,i8*%O,i64 8
%U=bitcast i8*%T to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12extendBtvEnvE_724 to void(...)*),void(...)**%U,align 8
%V=getelementptr inbounds i8,i8*%O,i64 16
%W=bitcast i8*%V to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12extendBtvEnvE_724 to void(...)*),void(...)**%W,align 8
%X=getelementptr inbounds i8,i8*%O,i64 24
%Y=bitcast i8*%X to i32*
store i32 -2147483647,i32*%Y,align 4
%Z=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aa=call fastcc i8*%w(i8*inreg%Z,i8*inreg%O)
%ab=getelementptr inbounds i8,i8*%aa,i64 16
%ac=bitcast i8*%ab to i8*(i8*,i8*)**
%ad=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ac,align 8
%ae=bitcast i8*%aa to i8**
%af=load i8*,i8**%ae,align 8
%ag=bitcast i8**%c to i8***
%ah=load i8**,i8***%ag,align 8
store i8*null,i8**%c,align 8
%ai=load i8*,i8**%ah,align 8
%aj=call fastcc i8*%ad(i8*inreg%af,i8*inreg%ai)
%ak=getelementptr inbounds i8,i8*%aj,i64 16
%al=bitcast i8*%ak to i8*(i8*,i8*)**
%am=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%al,align 8
%an=bitcast i8*%aj to i8**
%ao=load i8*,i8**%an,align 8
%ap=load i8*,i8**%d,align 8
%aq=tail call fastcc i8*%am(i8*inreg%ao,i8*inreg%ap)
ret i8*%aq
}
define internal fastcc i8*@_SMLLLN10TermFormat12extendBtvEnvE_726(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12extendBtvEnvE_725 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12extendBtvEnvE_725 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat12extendBtvEnvE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12extendBtvEnvE_726 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12extendBtvEnvE_726 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLLN10TermFormat21extendBtvEnvWithOrderE_729(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
n:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%l,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%c,align 8
%k=load i8*,i8**%e,align 8
br label%l
l:
%m=phi i8*[%k,%i],[%a,%n]
%o=phi i8*[%j,%i],[%b,%n]
%p=getelementptr inbounds i8,i8*%m,i64 4
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=add i32%r,3
%t=sub i32 0,%r
%u=and i32%s,%t
%v=add i32%r,7
%w=add i32%v,%u
%x=and i32%w,-8
%y=lshr i32%u,3
%z=bitcast i8*%m to i32*
%A=load i32,i32*%z,align 4
%B=shl i32%A,%y
%C=or i32%x,4
%D=bitcast i8*%o to i8**
%E=load i8*,i8**%D,align 8
store i8*%E,i8**%c,align 8
%F=getelementptr inbounds i8,i8*%o,i64 8
%G=bitcast i8*%F to i8**
%H=load i8*,i8**%G,align 8
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
%K=getelementptr inbounds i8,i8*%H,i64 8
%L=bitcast i8*%K to i8**
%M=load i8*,i8**%L,align 8
store i8*%M,i8**%d,align 8
%N=bitcast i8*%E to i32*
%O=load i32,i32*%N,align 4
%P=load i32,i32*%z,align 4
%Q=icmp eq i32%P,0
br i1%Q,label%W,label%R
R:
store i8*null,i8**%c,align 8
%S=sext i32%u to i64
%T=getelementptr inbounds i8,i8*%E,i64%S
%U=bitcast i8*%T to i8**
%V=load i8*,i8**%U,align 8
br label%ae
W:
%X=load i32,i32*%q,align 4
%Y=call i8*@sml_alloc(i32 inreg%X)#0
%Z=getelementptr inbounds i8,i8*%Y,i64 -4
%aa=bitcast i8*%Z to i32*
store i32%X,i32*%aa,align 4
%ab=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ac=sext i32%u to i64
%ad=getelementptr inbounds i8,i8*%ab,i64%ac
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%Y,i8*%ad,i32%X,i1 false)
br label%ae
ae:
%af=phi i64[%ac,%W],[%S,%R]
%ag=phi i8*[%Y,%W],[%V,%R]
store i8*%ag,i8**%c,align 8
%ah=add nsw i32%J,1
%ai=call fastcc i8*@_SMLFN14BoundTypeVarID3Map6insertE(i32 inreg 1,i32 inreg 8)
%aj=getelementptr inbounds i8,i8*%ai,i64 16
%ak=bitcast i8*%aj to i8*(i8*,i8*)**
%al=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ak,align 8
%am=bitcast i8*%ai to i8**
%an=load i8*,i8**%am,align 8
store i8*%an,i8**%f,align 8
%ao=load i8*,i8**%e,align 8
%ap=getelementptr inbounds i8,i8*%ao,i64 4
%aq=bitcast i8*%ap to i32*
%ar=load i32,i32*%aq,align 4
store i8*null,i8**%e,align 8
%as=bitcast i8*%ao to i32*
%at=load i32,i32*%as,align 4
%au=call i8*@sml_alloc(i32 inreg%C)#0
%av=or i32%x,1342177280
%aw=getelementptr inbounds i8,i8*%au,i64 -4
%ax=bitcast i8*%aw to i32*
store i32%av,i32*%ax,align 4
store i8*%au,i8**%e,align 8
call void@llvm.memset.p0i8.i32(i8*%au,i8 0,i32%C,i1 false)
%ay=bitcast i8*%au to i32*
store i32%J,i32*%ay,align 4
%az=icmp eq i32%at,0
%aA=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aB=getelementptr inbounds i8,i8*%au,i64%af
br i1%az,label%aC,label%aD
aC:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aB,i8*%aA,i32%ar,i1 false)
br label%aF
aD:
%aE=bitcast i8*%aB to i8**
store i8*%aA,i8**%aE,align 8
br label%aF
aF:
%aG=sext i32%x to i64
%aH=getelementptr inbounds i8,i8*%au,i64%aG
%aI=bitcast i8*%aH to i32*
store i32%B,i32*%aI,align 4
%aJ=call i8*@sml_alloc(i32 inreg 28)#0
%aK=getelementptr inbounds i8,i8*%aJ,i64 -4
%aL=bitcast i8*%aK to i32*
store i32 1342177304,i32*%aL,align 4
%aM=getelementptr inbounds i8,i8*%aJ,i64 12
%aN=bitcast i8*%aM to i32*
store i32 0,i32*%aN,align 1
%aO=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aP=bitcast i8*%aJ to i8**
store i8*%aO,i8**%aP,align 8
%aQ=getelementptr inbounds i8,i8*%aJ,i64 8
%aR=bitcast i8*%aQ to i32*
store i32%O,i32*%aR,align 4
%aS=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aT=getelementptr inbounds i8,i8*%aJ,i64 16
%aU=bitcast i8*%aT to i8**
store i8*%aS,i8**%aU,align 8
%aV=getelementptr inbounds i8,i8*%aJ,i64 24
%aW=bitcast i8*%aV to i32*
store i32 5,i32*%aW,align 4
%aX=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%aY=call fastcc i8*%al(i8*inreg%aX,i8*inreg%aJ)
store i8*%aY,i8**%c,align 8
%aZ=call i8*@sml_alloc(i32 inreg 20)#0
%a0=bitcast i8*%aZ to i32*
%a1=getelementptr inbounds i8,i8*%aZ,i64 -4
%a2=bitcast i8*%a1 to i32*
store i32 1342177296,i32*%a2,align 4
%a3=getelementptr inbounds i8,i8*%aZ,i64 4
%a4=bitcast i8*%a3 to i32*
store i32 0,i32*%a4,align 1
store i32%ah,i32*%a0,align 4
%a5=load i8*,i8**%c,align 8
%a6=getelementptr inbounds i8,i8*%aZ,i64 8
%a7=bitcast i8*%a6 to i8**
store i8*%a5,i8**%a7,align 8
%a8=getelementptr inbounds i8,i8*%aZ,i64 16
%a9=bitcast i8*%a8 to i32*
store i32 2,i32*%a9,align 4
ret i8*%aZ
}
define internal fastcc i8*@_SMLLL4loop_730(i32 inreg%a,i32 inreg%b,i8*inreg%c)unnamed_addr#2 gc"smlsharp"{
t:
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
%g=add i32%b,7
%h=sub i32 0,%b
%i=and i32%g,%h
%j=add i32%b,3
%k=and i32%j,%h
%l=add i32%g,%k
%m=and i32%l,-8
%n=lshr i32%k,3
%o=shl i32%a,%n
%p=or i32%m,4
%q=bitcast i8**%d to i8***
br label%r
r:
%s=phi i8*[%bC,%bB],[%c,%t]
store i8*%s,i8**%d,align 8
%u=load atomic i32,i32*@sml_check_flag unordered,align 4
%v=icmp eq i32%u,0
%w=bitcast i8*%s to i8**
br i1%v,label%z,label%x
x:
call void@sml_check(i32 inreg%u)
%y=load i8**,i8***%q,align 8
br label%z
z:
%A=phi i8**[%y,%x],[%w,%r]
%B=load i8*,i8**%A,align 8
store i8*%B,i8**%e,align 8
store i8*null,i8**%d,align 8
%C=getelementptr inbounds i8*,i8**%A,i64 1
%D=load i8*,i8**%C,align 8
%E=icmp eq i8*%D,null
br i1%E,label%F,label%O
F:
%G=call fastcc i8*@_SMLFN14BoundTypeVarID3Map10listItemsiE(i32 inreg%a,i32 inreg%b)
%H=getelementptr inbounds i8,i8*%G,i64 16
%I=bitcast i8*%H to i8*(i8*,i8*)**
%J=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%I,align 8
%K=bitcast i8*%G to i8**
%L=load i8*,i8**%K,align 8
%M=load i8*,i8**%e,align 8
%N=tail call fastcc i8*%J(i8*inreg%L,i8*inreg%M)
ret i8*%N
O:
%P=bitcast i8*%D to i32*
%Q=load i32,i32*%P,align 4
%R=getelementptr inbounds i8,i8*%D,i64 8
%S=bitcast i8*%R to i8**
%T=load i8*,i8**%S,align 8
store i8*%T,i8**%d,align 8
%U=call fastcc i8*@_SMLFN14BoundTypeVarID3Map8inDomainE(i32 inreg%a,i32 inreg%b)
%V=getelementptr inbounds i8,i8*%U,i64 16
%W=bitcast i8*%V to i8*(i8*,i8*)**
%X=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%W,align 8
%Y=bitcast i8*%U to i8**
%Z=load i8*,i8**%Y,align 8
store i8*%Z,i8**%f,align 8
%aa=call i8*@sml_alloc(i32 inreg 20)#0
%ab=getelementptr inbounds i8,i8*%aa,i64 -4
%ac=bitcast i8*%ab to i32*
store i32 1342177296,i32*%ac,align 4
%ad=getelementptr inbounds i8,i8*%aa,i64 12
%ae=bitcast i8*%ad to i32*
store i32 0,i32*%ae,align 1
%af=load i8*,i8**%e,align 8
%ag=bitcast i8*%aa to i8**
store i8*%af,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%aa,i64 8
%ai=bitcast i8*%ah to i32*
store i32%Q,i32*%ai,align 4
%aj=getelementptr inbounds i8,i8*%aa,i64 16
%ak=bitcast i8*%aj to i32*
store i32 1,i32*%ak,align 4
%al=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%am=call fastcc i8*%X(i8*inreg%al,i8*inreg%aa)
%an=bitcast i8*%am to i32*
%ao=load i32,i32*%an,align 4
%ap=icmp eq i32%ao,0
br i1%ap,label%bB,label%aq
aq:
%ar=call fastcc i8*@_SMLFN14BoundTypeVarID3Map6removeE(i32 inreg%a,i32 inreg%b)
%as=getelementptr inbounds i8,i8*%ar,i64 16
%at=bitcast i8*%as to i8*(i8*,i8*)**
%au=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%at,align 8
%av=bitcast i8*%ar to i8**
%aw=load i8*,i8**%av,align 8
store i8*%aw,i8**%f,align 8
%ax=call i8*@sml_alloc(i32 inreg 20)#0
%ay=getelementptr inbounds i8,i8*%ax,i64 -4
%az=bitcast i8*%ay to i32*
store i32 1342177296,i32*%az,align 4
%aA=getelementptr inbounds i8,i8*%ax,i64 12
%aB=bitcast i8*%aA to i32*
store i32 0,i32*%aB,align 1
%aC=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aD=bitcast i8*%ax to i8**
store i8*%aC,i8**%aD,align 8
%aE=getelementptr inbounds i8,i8*%ax,i64 8
%aF=bitcast i8*%aE to i32*
store i32%Q,i32*%aF,align 4
%aG=getelementptr inbounds i8,i8*%ax,i64 16
%aH=bitcast i8*%aG to i32*
store i32 1,i32*%aH,align 4
%aI=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%aJ=call fastcc i8*%au(i8*inreg%aI,i8*inreg%ax)
store i8*%aJ,i8**%e,align 8
%aK=bitcast i8*%aJ to i8**
%aL=load i8*,i8**%aK,align 8
store i8*%aL,i8**%f,align 8
%aM=icmp eq i32%a,0
br i1%aM,label%aS,label%aN
aN:
store i8*null,i8**%e,align 8
%aO=sext i32%i to i64
%aP=getelementptr inbounds i8,i8*%aJ,i64%aO
%aQ=bitcast i8*%aP to i8**
%aR=load i8*,i8**%aQ,align 8
br label%aZ
aS:
%aT=call i8*@sml_alloc(i32 inreg%b)#0
%aU=getelementptr inbounds i8,i8*%aT,i64 -4
%aV=bitcast i8*%aU to i32*
store i32%b,i32*%aV,align 4
%aW=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aX=sext i32%i to i64
%aY=getelementptr inbounds i8,i8*%aW,i64%aX
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aT,i8*%aY,i32%b,i1 false)
br label%aZ
aZ:
%a0=phi i8*[%aT,%aS],[%aR,%aN]
store i8*%a0,i8**%e,align 8
%a1=call i8*@sml_alloc(i32 inreg 20)#0
%a2=getelementptr inbounds i8,i8*%a1,i64 -4
%a3=bitcast i8*%a2 to i32*
store i32 1342177296,i32*%a3,align 4
%a4=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%a5=bitcast i8*%a1 to i8**
store i8*%a4,i8**%a5,align 8
%a6=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%a7=getelementptr inbounds i8,i8*%a1,i64 8
%a8=bitcast i8*%a7 to i8**
store i8*%a6,i8**%a8,align 8
%a9=getelementptr inbounds i8,i8*%a1,i64 16
%ba=bitcast i8*%a9 to i32*
store i32 3,i32*%ba,align 4
%bb=call fastcc i8*@_SMLLL4loop_730(i32 inreg%a,i32 inreg%b,i8*inreg%a1)
store i8*%bb,i8**%d,align 8
%bc=call i8*@sml_alloc(i32 inreg%p)#0
%bd=or i32%m,1342177280
%be=getelementptr inbounds i8,i8*%bc,i64 -4
%bf=bitcast i8*%be to i32*
store i32%bd,i32*%bf,align 4
store i8*%bc,i8**%f,align 8
call void@llvm.memset.p0i8.i32(i8*%bc,i8 0,i32%p,i1 false)
%bg=bitcast i8*%bc to i32*
store i32%Q,i32*%bg,align 4
%bh=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bi=sext i32%k to i64
%bj=getelementptr inbounds i8,i8*%bc,i64%bi
br i1%aM,label%bk,label%bl
bk:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bj,i8*%bh,i32%b,i1 false)
br label%bn
bl:
%bm=bitcast i8*%bj to i8**
store i8*%bh,i8**%bm,align 8
br label%bn
bn:
%bo=sext i32%m to i64
%bp=getelementptr inbounds i8,i8*%bc,i64%bo
%bq=bitcast i8*%bp to i32*
store i32%o,i32*%bq,align 4
%br=call i8*@sml_alloc(i32 inreg 20)#0
%bs=getelementptr inbounds i8,i8*%br,i64 -4
%bt=bitcast i8*%bs to i32*
store i32 1342177296,i32*%bt,align 4
%bu=load i8*,i8**%f,align 8
%bv=bitcast i8*%br to i8**
store i8*%bu,i8**%bv,align 8
%bw=load i8*,i8**%d,align 8
%bx=getelementptr inbounds i8,i8*%br,i64 8
%by=bitcast i8*%bx to i8**
store i8*%bw,i8**%by,align 8
%bz=getelementptr inbounds i8,i8*%br,i64 16
%bA=bitcast i8*%bz to i32*
store i32 3,i32*%bA,align 4
ret i8*%br
bB:
%bC=call i8*@sml_alloc(i32 inreg 20)#0
%bD=getelementptr inbounds i8,i8*%bC,i64 -4
%bE=bitcast i8*%bD to i32*
store i32 1342177296,i32*%bE,align 4
%bF=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bG=bitcast i8*%bC to i8**
store i8*%bF,i8**%bG,align 8
%bH=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bI=getelementptr inbounds i8,i8*%bC,i64 8
%bJ=bitcast i8*%bI to i8**
store i8*%bH,i8**%bJ,align 8
%bK=getelementptr inbounds i8,i8*%bC,i64 16
%bL=bitcast i8*%bK to i32*
store i32 3,i32*%bL,align 4
br label%r
}
define internal fastcc i8*@_SMLLLN10TermFormat21extendBtvEnvWithOrderE_732(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%j,label%i
i:
call void@sml_check(i32 inreg%g)
br label%j
j:
%k=call fastcc i8*@_SMLFN4List5foldlE(i32 inreg 1,i32 inreg 8,i32 inreg 1,i32 inreg 8)
%l=getelementptr inbounds i8,i8*%k,i64 16
%m=bitcast i8*%l to i8*(i8*,i8*)**
%n=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%m,align 8
%o=bitcast i8*%k to i8**
%p=load i8*,i8**%o,align 8
store i8*%p,i8**%d,align 8
%q=load i8*,i8**%e,align 8
%r=getelementptr inbounds i8,i8*%q,i64 8
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=getelementptr inbounds i8,i8*%q,i64 12
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=call i8*@sml_alloc(i32 inreg 12)#0
%y=bitcast i8*%x to i32*
%z=getelementptr inbounds i8,i8*%x,i64 -4
%A=bitcast i8*%z to i32*
store i32 1342177288,i32*%A,align 4
store i8*%x,i8**%f,align 8
store i32%t,i32*%y,align 4
%B=getelementptr inbounds i8,i8*%x,i64 4
%C=bitcast i8*%B to i32*
store i32%w,i32*%C,align 4
%D=getelementptr inbounds i8,i8*%x,i64 8
%E=bitcast i8*%D to i32*
store i32 0,i32*%E,align 4
%F=call i8*@sml_alloc(i32 inreg 28)#0
%G=getelementptr inbounds i8,i8*%F,i64 -4
%H=bitcast i8*%G to i32*
store i32 1342177304,i32*%H,align 4
%I=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%J=bitcast i8*%F to i8**
store i8*%I,i8**%J,align 8
%K=getelementptr inbounds i8,i8*%F,i64 8
%L=bitcast i8*%K to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat21extendBtvEnvWithOrderE_729 to void(...)*),void(...)**%L,align 8
%M=getelementptr inbounds i8,i8*%F,i64 16
%N=bitcast i8*%M to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat21extendBtvEnvWithOrderE_729 to void(...)*),void(...)**%N,align 8
%O=getelementptr inbounds i8,i8*%F,i64 24
%P=bitcast i8*%O to i32*
store i32 -2147483647,i32*%P,align 4
%Q=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%R=call fastcc i8*%n(i8*inreg%Q,i8*inreg%F)
%S=getelementptr inbounds i8,i8*%R,i64 16
%T=bitcast i8*%S to i8*(i8*,i8*)**
%U=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%T,align 8
%V=bitcast i8*%R to i8**
%W=load i8*,i8**%V,align 8
%X=bitcast i8**%e to i8***
%Y=load i8**,i8***%X,align 8
%Z=load i8*,i8**%Y,align 8
%aa=call fastcc i8*%U(i8*inreg%W,i8*inreg%Z)
%ab=bitcast i8**%c to i8***
%ac=load i8**,i8***%ab,align 8
%ad=load i8*,i8**%ac,align 8
store i8*%ad,i8**%d,align 8
%ae=getelementptr inbounds i8*,i8**%ac,i64 1
%af=load i8*,i8**%ae,align 8
store i8*%af,i8**%c,align 8
%ag=getelementptr inbounds i8,i8*%aa,i64 16
%ah=bitcast i8*%ag to i8*(i8*,i8*)**
%ai=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ah,align 8
%aj=bitcast i8*%aa to i8**
%ak=load i8*,i8**%aj,align 8
store i8*%ak,i8**%f,align 8
%al=load i8*,i8**%e,align 8
%am=getelementptr inbounds i8,i8*%al,i64 8
%an=bitcast i8*%am to i32*
%ao=load i32,i32*%an,align 4
store i8*null,i8**%e,align 8
%ap=getelementptr inbounds i8,i8*%al,i64 12
%aq=bitcast i8*%ap to i32*
%ar=load i32,i32*%aq,align 4
%as=call i8*@sml_alloc(i32 inreg 20)#0
%at=getelementptr inbounds i8,i8*%as,i64 -4
%au=bitcast i8*%at to i32*
store i32 1342177296,i32*%au,align 4
%av=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aw=bitcast i8*%as to i8**
store i8*%av,i8**%aw,align 8
%ax=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ay=getelementptr inbounds i8,i8*%as,i64 8
%az=bitcast i8*%ay to i8**
store i8*%ax,i8**%az,align 8
%aA=getelementptr inbounds i8,i8*%as,i64 16
%aB=bitcast i8*%aA to i32*
store i32 3,i32*%aB,align 4
%aC=call fastcc i8*@_SMLLL4loop_730(i32 inreg%ao,i32 inreg%ar,i8*inreg%as)
%aD=load i8*,i8**%f,align 8
%aE=tail call fastcc i8*%ai(i8*inreg%aD,i8*inreg%aC)
ret i8*%aE
}
define internal fastcc i8*@_SMLLLN10TermFormat21extendBtvEnvWithOrderE_733(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat21extendBtvEnvWithOrderE_732 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat21extendBtvEnvWithOrderE_732 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat21extendBtvEnvWithOrderE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat21extendBtvEnvWithOrderE_733 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat21extendBtvEnvWithOrderE_733 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLLN10TermFormat16formatBoundTyvarE_736(i8*inreg%a,i32 inreg%b)#2 gc"smlsharp"{
m:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%k,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%d,align 8
br label%k
k:
%l=phi i8*[%j,%i],[%a,%m]
%n=getelementptr inbounds i8,i8*%l,i64 20
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=add i32%p,3
%r=sub i32 0,%p
%s=and i32%q,%r
%t=add i32%p,-1
%u=and i32%t,%r
%v=add i32%p,7
%w=add i32%v,%u
%x=and i32%w,-8
%y=getelementptr inbounds i8,i8*%l,i64 16
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=or i32%x,4
%C=call fastcc i8*@_SMLFN14BoundTypeVarID3Map4findE(i32 inreg 1,i32 inreg 8)
%D=getelementptr inbounds i8,i8*%C,i64 16
%E=bitcast i8*%D to i8*(i8*,i8*)**
%F=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%E,align 8
%G=bitcast i8*%C to i8**
%H=load i8*,i8**%G,align 8
store i8*%H,i8**%e,align 8
%I=load i8*,i8**%d,align 8
%J=getelementptr inbounds i8,i8*%I,i64 8
%K=bitcast i8*%J to i8**
%L=load i8*,i8**%K,align 8
%M=getelementptr inbounds i8,i8*%L,i64 8
%N=bitcast i8*%M to i8**
%O=load i8*,i8**%N,align 8
store i8*%O,i8**%c,align 8
%P=call i8*@sml_alloc(i32 inreg 20)#0
%Q=getelementptr inbounds i8,i8*%P,i64 -4
%R=bitcast i8*%Q to i32*
store i32 1342177296,i32*%R,align 4
%S=getelementptr inbounds i8,i8*%P,i64 12
%T=bitcast i8*%S to i32*
store i32 0,i32*%T,align 1
%U=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%V=bitcast i8*%P to i8**
store i8*%U,i8**%V,align 8
%W=getelementptr inbounds i8,i8*%P,i64 8
%X=bitcast i8*%W to i32*
store i32%b,i32*%X,align 4
%Y=getelementptr inbounds i8,i8*%P,i64 16
%Z=bitcast i8*%Y to i32*
store i32 1,i32*%Z,align 4
%aa=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%ab=call fastcc i8*%F(i8*inreg%aa,i8*inreg%P)
%ac=load i8*,i8**%d,align 8
%ad=getelementptr inbounds i8,i8*%ac,i64 16
%ae=bitcast i8*%ad to i32*
%af=load i32,i32*%ae,align 4
%ag=getelementptr inbounds i8,i8*%ac,i64 20
%ah=bitcast i8*%ag to i32*
%ai=load i32,i32*%ah,align 4
%aj=bitcast i8*%ac to i8**
%ak=load i8*,i8**%aj,align 8
store i8*%ak,i8**%e,align 8
%al=icmp eq i8*%ab,null
br i1%al,label%am,label%aA
am:
store i8*null,i8**%d,align 8
%an=call i8*@sml_alloc(i32 inreg 12)#0
%ao=bitcast i8*%an to i32*
%ap=getelementptr inbounds i8,i8*%an,i64 -4
%aq=bitcast i8*%ap to i32*
store i32 1342177288,i32*%aq,align 4
store i8*%an,i8**%c,align 8
store i32 1,i32*%ao,align 4
%ar=getelementptr inbounds i8,i8*%an,i64 4
%as=bitcast i8*%ar to i32*
store i32%b,i32*%as,align 4
%at=getelementptr inbounds i8,i8*%an,i64 8
%au=bitcast i8*%at to i32*
store i32 0,i32*%au,align 4
%av=call i8*@sml_alloc(i32 inreg 20)#0
%aw=getelementptr inbounds i8,i8*%av,i64 -4
%ax=bitcast i8*%aw to i32*
store i32 1342177296,i32*%ax,align 4
%ay=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%az=bitcast i8*%av to i8**
store i8*%ay,i8**%az,align 8
br label%bu
aA:
%aB=bitcast i8*%ab to i8**
%aC=load i8*,i8**%aB,align 8
store i8*%aC,i8**%c,align 8
%aD=bitcast i8*%aC to i32*
%aE=load i32,i32*%aD,align 4
%aF=icmp eq i32%af,0
br i1%aF,label%aL,label%aG
aG:
store i8*null,i8**%c,align 8
%aH=sext i32%s to i64
%aI=getelementptr inbounds i8,i8*%aC,i64%aH
%aJ=bitcast i8*%aI to i8**
%aK=load i8*,i8**%aJ,align 8
br label%aS
aL:
%aM=call i8*@sml_alloc(i32 inreg%ai)#0
%aN=getelementptr inbounds i8,i8*%aM,i64 -4
%aO=bitcast i8*%aN to i32*
store i32%ai,i32*%aO,align 4
%aP=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aQ=sext i32%s to i64
%aR=getelementptr inbounds i8,i8*%aP,i64%aQ
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aM,i8*%aR,i32%ai,i1 false)
br label%aS
aS:
%aT=phi i8*[%aM,%aL],[%aK,%aG]
store i8*%aT,i8**%c,align 8
%aU=call i8*@sml_alloc(i32 inreg 12)#0
%aV=bitcast i8*%aU to i32*
%aW=getelementptr inbounds i8,i8*%aU,i64 -4
%aX=bitcast i8*%aW to i32*
store i32 1342177288,i32*%aX,align 4
store i8*%aU,i8**%f,align 8
store i32 0,i32*%aV,align 4
%aY=getelementptr inbounds i8,i8*%aU,i64 4
%aZ=bitcast i8*%aY to i32*
store i32%aE,i32*%aZ,align 4
%a0=getelementptr inbounds i8,i8*%aU,i64 8
%a1=bitcast i8*%a0 to i32*
store i32 0,i32*%a1,align 4
%a2=load i8*,i8**%d,align 8
%a3=getelementptr inbounds i8,i8*%a2,i64 20
%a4=bitcast i8*%a3 to i32*
%a5=load i32,i32*%a4,align 4
store i8*null,i8**%d,align 8
%a6=getelementptr inbounds i8,i8*%a2,i64 16
%a7=bitcast i8*%a6 to i32*
%a8=load i32,i32*%a7,align 4
%a9=call i8*@sml_alloc(i32 inreg%B)#0
%ba=or i32%x,1342177280
%bb=getelementptr inbounds i8,i8*%a9,i64 -4
%bc=bitcast i8*%bb to i32*
store i32%ba,i32*%bc,align 4
store i8*%a9,i8**%d,align 8
call void@llvm.memset.p0i8.i32(i8*%a9,i8 0,i32%B,i1 false)
%bd=icmp eq i32%a8,0
%be=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bf=sext i32%u to i64
%bg=getelementptr inbounds i8,i8*%a9,i64%bf
br i1%bd,label%bh,label%bi
bh:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bg,i8*%be,i32%a5,i1 false)
br label%bk
bi:
%bj=bitcast i8*%bg to i8**
store i8*%be,i8**%bj,align 8
br label%bk
bk:
%bl=sext i32%x to i64
%bm=getelementptr inbounds i8,i8*%a9,i64%bl
%bn=bitcast i8*%bm to i32*
store i32%A,i32*%bn,align 4
%bo=call i8*@sml_alloc(i32 inreg 20)#0
%bp=getelementptr inbounds i8,i8*%bo,i64 -4
%bq=bitcast i8*%bp to i32*
store i32 1342177296,i32*%bq,align 4
%br=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%bs=bitcast i8*%bo to i8**
store i8*%br,i8**%bs,align 8
%bt=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
br label%bu
bu:
%bv=phi i8*[%bo,%bk],[%av,%am]
%bw=phi i8*[%bt,%bk],[null,%am]
%bx=getelementptr inbounds i8,i8*%bv,i64 8
%by=bitcast i8*%bx to i8**
store i8*%bw,i8**%by,align 8
%bz=getelementptr inbounds i8,i8*%bv,i64 16
%bA=bitcast i8*%bz to i32*
store i32 3,i32*%bA,align 4
store i8*%bv,i8**%c,align 8
%bB=call i8*@sml_alloc(i32 inreg 20)#0
%bC=getelementptr inbounds i8,i8*%bB,i64 -4
%bD=bitcast i8*%bC to i32*
store i32 1342177296,i32*%bD,align 4
%bE=getelementptr inbounds i8,i8*%bB,i64 12
%bF=bitcast i8*%bE to i32*
store i32 0,i32*%bF,align 1
%bG=load i8*,i8**%c,align 8
%bH=bitcast i8*%bB to i8**
store i8*%bG,i8**%bH,align 8
%bI=getelementptr inbounds i8,i8*%bB,i64 8
%bJ=bitcast i8*%bI to i32*
store i32%b,i32*%bJ,align 4
%bK=getelementptr inbounds i8,i8*%bB,i64 16
%bL=bitcast i8*%bK to i32*
store i32 1,i32*%bL,align 4
%bM=load i8*,i8**%e,align 8
%bN=call fastcc i8*@_SMLLLN10TermFormat9formatBtvE_539(i32 inreg%af,i32 inreg%ai,i8*inreg%bM,i8*inreg%bB)
ret i8*%bN
}
define internal fastcc i8*@_SMLLLN10TermFormat16formatBoundTyvarE_737(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%b,i8**%c,align 8
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=getelementptr inbounds i8,i8*%a,i64 8
%i=bitcast i8*%h to i32*
%j=load i32,i32*%i,align 4
%k=getelementptr inbounds i8,i8*%a,i64 12
%l=bitcast i8*%k to i32*
%m=load i32,i32*%l,align 4
%n=call i8*@sml_alloc(i32 inreg 28)#0
%o=getelementptr inbounds i8,i8*%n,i64 -4
%p=bitcast i8*%o to i32*
store i32 1342177304,i32*%p,align 4
store i8*%n,i8**%e,align 8
%q=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%r=bitcast i8*%n to i8**
store i8*%q,i8**%r,align 8
%s=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%t=getelementptr inbounds i8,i8*%n,i64 8
%u=bitcast i8*%t to i8**
store i8*%s,i8**%u,align 8
%v=getelementptr inbounds i8,i8*%n,i64 16
%w=bitcast i8*%v to i32*
store i32%j,i32*%w,align 4
%x=getelementptr inbounds i8,i8*%n,i64 20
%y=bitcast i8*%x to i32*
store i32%m,i32*%y,align 4
%z=getelementptr inbounds i8,i8*%n,i64 24
%A=bitcast i8*%z to i32*
store i32 3,i32*%A,align 4
%B=call i8*@sml_alloc(i32 inreg 28)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177304,i32*%D,align 4
%E=load i8*,i8**%e,align 8
%F=bitcast i8*%B to i8**
store i8*%E,i8**%F,align 8
%G=getelementptr inbounds i8,i8*%B,i64 8
%H=bitcast i8*%G to void(...)**
store void(...)*bitcast(i8*(i8*,i32)*@_SMLLLN10TermFormat16formatBoundTyvarE_736 to void(...)*),void(...)**%H,align 8
%I=getelementptr inbounds i8,i8*%B,i64 16
%J=bitcast i8*%I to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat16formatBoundTyvarE_952 to void(...)*),void(...)**%J,align 8
%K=getelementptr inbounds i8,i8*%B,i64 24
%L=bitcast i8*%K to i32*
store i32 -2147483647,i32*%L,align 4
ret i8*%B
}
define internal fastcc i8*@_SMLLLN10TermFormat16formatBoundTyvarE_738(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat16formatBoundTyvarE_737 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat16formatBoundTyvarE_737 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat16formatBoundTyvarE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat16formatBoundTyvarE_738 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat16formatBoundTyvarE_738 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLL6tyvars_741(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
o:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%m,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%c,align 8
%l=load i8*,i8**%e,align 8
br label%m
m:
%n=phi i8*[%l,%j],[%a,%o]
%p=phi i8*[%k,%j],[%b,%o]
%q=getelementptr inbounds i8,i8*%n,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=add i32%s,3
%u=sub i32 0,%s
%v=and i32%t,%u
%w=getelementptr inbounds i8,i8*%n,i64 20
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=add i32%y,3
%A=sub i32 0,%y
%B=and i32%z,%A
%C=add i32%y,-1
%D=and i32%C,%A
%E=add i32%y,7
%F=add i32%E,%D
%G=and i32%F,-8
%H=getelementptr inbounds i8,i8*%n,i64 16
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
%K=or i32%G,4
%L=add i32%s,-1
%M=and i32%L,%u
%N=add i32%s,7
%O=add i32%N,%M
%P=and i32%O,-8
%Q=getelementptr inbounds i8,i8*%n,i64 8
%R=bitcast i8*%Q to i32*
%S=load i32,i32*%R,align 4
%T=or i32%P,4
%U=bitcast i8*%p to i32*
%V=load i32,i32*%U,align 4
%W=icmp eq i32%S,0
br i1%W,label%ac,label%X
X:
store i8*null,i8**%c,align 8
%Y=sext i32%v to i64
%Z=getelementptr inbounds i8,i8*%p,i64%Y
%aa=bitcast i8*%Z to i8**
%ab=load i8*,i8**%aa,align 8
br label%aj
ac:
%ad=call i8*@sml_alloc(i32 inreg%s)#0
%ae=getelementptr inbounds i8,i8*%ad,i64 -4
%af=bitcast i8*%ae to i32*
store i32%s,i32*%af,align 4
%ag=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ah=sext i32%v to i64
%ai=getelementptr inbounds i8,i8*%ag,i64%ah
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ad,i8*%ai,i32%s,i1 false)
br label%aj
aj:
%ak=phi i8*[%ad,%ac],[%ab,%X]
store i8*%ak,i8**%c,align 8
%al=call fastcc i8*@_SMLFN14BoundTypeVarID3Map4findE(i32 inreg 1,i32 inreg 8)
%am=getelementptr inbounds i8,i8*%al,i64 16
%an=bitcast i8*%am to i8*(i8*,i8*)**
%ao=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%an,align 8
%ap=bitcast i8*%al to i8**
%aq=load i8*,i8**%ap,align 8
store i8*%aq,i8**%f,align 8
%ar=bitcast i8**%e to i8***
%as=load i8**,i8***%ar,align 8
%at=load i8*,i8**%as,align 8
%au=getelementptr inbounds i8,i8*%at,i64 8
%av=bitcast i8*%au to i8**
%aw=load i8*,i8**%av,align 8
store i8*%aw,i8**%d,align 8
%ax=call i8*@sml_alloc(i32 inreg 20)#0
%ay=getelementptr inbounds i8,i8*%ax,i64 -4
%az=bitcast i8*%ay to i32*
store i32 1342177296,i32*%az,align 4
%aA=getelementptr inbounds i8,i8*%ax,i64 12
%aB=bitcast i8*%aA to i32*
store i32 0,i32*%aB,align 1
%aC=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aD=bitcast i8*%ax to i8**
store i8*%aC,i8**%aD,align 8
%aE=getelementptr inbounds i8,i8*%ax,i64 8
%aF=bitcast i8*%aE to i32*
store i32%V,i32*%aF,align 4
%aG=getelementptr inbounds i8,i8*%ax,i64 16
%aH=bitcast i8*%aG to i32*
store i32 1,i32*%aH,align 4
%aI=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%aJ=call fastcc i8*%ao(i8*inreg%aI,i8*inreg%ax)
%aK=icmp eq i8*%aJ,null
br i1%aK,label%aL,label%aZ
aL:
%aM=call i8*@sml_alloc(i32 inreg 12)#0
%aN=bitcast i8*%aM to i32*
%aO=getelementptr inbounds i8,i8*%aM,i64 -4
%aP=bitcast i8*%aO to i32*
store i32 1342177288,i32*%aP,align 4
store i8*%aM,i8**%d,align 8
store i32 1,i32*%aN,align 4
%aQ=getelementptr inbounds i8,i8*%aM,i64 4
%aR=bitcast i8*%aQ to i32*
store i32%V,i32*%aR,align 4
%aS=getelementptr inbounds i8,i8*%aM,i64 8
%aT=bitcast i8*%aS to i32*
store i32 0,i32*%aT,align 4
%aU=call i8*@sml_alloc(i32 inreg 20)#0
%aV=getelementptr inbounds i8,i8*%aU,i64 -4
%aW=bitcast i8*%aV to i32*
store i32 1342177296,i32*%aW,align 4
%aX=load i8*,i8**%d,align 8
%aY=bitcast i8*%aU to i8**
store i8*%aX,i8**%aY,align 8
br label%b0
aZ:
%a0=bitcast i8*%aJ to i8**
%a1=load i8*,i8**%a0,align 8
store i8*%a1,i8**%d,align 8
%a2=bitcast i8*%a1 to i32*
%a3=load i32,i32*%a2,align 4
%a4=load i8*,i8**%e,align 8
%a5=getelementptr inbounds i8,i8*%a4,i64 16
%a6=bitcast i8*%a5 to i32*
%a7=load i32,i32*%a6,align 4
%a8=icmp eq i32%a7,0
br i1%a8,label%be,label%a9
a9:
store i8*null,i8**%d,align 8
%ba=sext i32%B to i64
%bb=getelementptr inbounds i8,i8*%a1,i64%ba
%bc=bitcast i8*%bb to i8**
%bd=load i8*,i8**%bc,align 8
br label%bo
be:
%bf=getelementptr inbounds i8,i8*%a4,i64 20
%bg=bitcast i8*%bf to i32*
%bh=load i32,i32*%bg,align 4
%bi=call i8*@sml_alloc(i32 inreg%bh)#0
%bj=getelementptr inbounds i8,i8*%bi,i64 -4
%bk=bitcast i8*%bj to i32*
store i32%bh,i32*%bk,align 4
%bl=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bm=sext i32%B to i64
%bn=getelementptr inbounds i8,i8*%bl,i64%bm
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bi,i8*%bn,i32%bh,i1 false)
br label%bo
bo:
%bp=phi i8*[%bi,%be],[%bd,%a9]
store i8*%bp,i8**%d,align 8
%bq=call i8*@sml_alloc(i32 inreg 12)#0
%br=bitcast i8*%bq to i32*
%bs=getelementptr inbounds i8,i8*%bq,i64 -4
%bt=bitcast i8*%bs to i32*
store i32 1342177288,i32*%bt,align 4
store i8*%bq,i8**%f,align 8
store i32 0,i32*%br,align 4
%bu=getelementptr inbounds i8,i8*%bq,i64 4
%bv=bitcast i8*%bu to i32*
store i32%a3,i32*%bv,align 4
%bw=getelementptr inbounds i8,i8*%bq,i64 8
%bx=bitcast i8*%bw to i32*
store i32 0,i32*%bx,align 4
%by=load i8*,i8**%e,align 8
%bz=getelementptr inbounds i8,i8*%by,i64 20
%bA=bitcast i8*%bz to i32*
%bB=load i32,i32*%bA,align 4
%bC=getelementptr inbounds i8,i8*%by,i64 16
%bD=bitcast i8*%bC to i32*
%bE=load i32,i32*%bD,align 4
%bF=call i8*@sml_alloc(i32 inreg%K)#0
%bG=or i32%G,1342177280
%bH=getelementptr inbounds i8,i8*%bF,i64 -4
%bI=bitcast i8*%bH to i32*
store i32%bG,i32*%bI,align 4
store i8*%bF,i8**%g,align 8
call void@llvm.memset.p0i8.i32(i8*%bF,i8 0,i32%K,i1 false)
%bJ=icmp eq i32%bE,0
%bK=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bL=sext i32%D to i64
%bM=getelementptr inbounds i8,i8*%bF,i64%bL
br i1%bJ,label%bN,label%bO
bN:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bM,i8*%bK,i32%bB,i1 false)
br label%bQ
bO:
%bP=bitcast i8*%bM to i8**
store i8*%bK,i8**%bP,align 8
br label%bQ
bQ:
%bR=sext i32%G to i64
%bS=getelementptr inbounds i8,i8*%bF,i64%bR
%bT=bitcast i8*%bS to i32*
store i32%J,i32*%bT,align 4
%bU=call i8*@sml_alloc(i32 inreg 20)#0
%bV=getelementptr inbounds i8,i8*%bU,i64 -4
%bW=bitcast i8*%bV to i32*
store i32 1342177296,i32*%bW,align 4
%bX=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%bY=bitcast i8*%bU to i8**
store i8*%bX,i8**%bY,align 8
%bZ=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
br label%b0
b0:
%b1=phi i8*[%bU,%bQ],[%aU,%aL]
%b2=phi i8*[%bZ,%bQ],[null,%aL]
%b3=phi i8*[%bX,%bQ],[%aX,%aL]
%b4=getelementptr inbounds i8,i8*%b1,i64 8
%b5=bitcast i8*%b4 to i8**
store i8*%b2,i8**%b5,align 8
%b6=getelementptr inbounds i8,i8*%b1,i64 16
%b7=bitcast i8*%b6 to i32*
store i32 3,i32*%b7,align 4
store i8*%b3,i8**%d,align 8
%b8=load i8*,i8**%e,align 8
%b9=getelementptr inbounds i8,i8*%b8,i64 12
%ca=bitcast i8*%b9 to i32*
%cb=load i32,i32*%ca,align 4
store i8*null,i8**%e,align 8
%cc=getelementptr inbounds i8,i8*%b8,i64 8
%cd=bitcast i8*%cc to i32*
%ce=load i32,i32*%cd,align 4
%cf=call i8*@sml_alloc(i32 inreg%T)#0
%cg=or i32%P,1342177280
%ch=getelementptr inbounds i8,i8*%cf,i64 -4
%ci=bitcast i8*%ch to i32*
store i32%cg,i32*%ci,align 4
store i8*%cf,i8**%e,align 8
call void@llvm.memset.p0i8.i32(i8*%cf,i8 0,i32%T,i1 false)
%cj=icmp eq i32%ce,0
%ck=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cl=sext i32%M to i64
%cm=getelementptr inbounds i8,i8*%cf,i64%cl
br i1%cj,label%cn,label%co
cn:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cm,i8*%ck,i32%cb,i1 false)
br label%cq
co:
%cp=bitcast i8*%cm to i8**
store i8*%ck,i8**%cp,align 8
br label%cq
cq:
%cr=sext i32%P to i64
%cs=getelementptr inbounds i8,i8*%cf,i64%cr
%ct=bitcast i8*%cs to i32*
store i32%S,i32*%ct,align 4
%cu=call i8*@sml_alloc(i32 inreg 20)#0
%cv=getelementptr inbounds i8,i8*%cu,i64 -4
%cw=bitcast i8*%cv to i32*
store i32 1342177296,i32*%cw,align 4
store i8*%cu,i8**%c,align 8
%cx=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%cy=bitcast i8*%cu to i8**
store i8*%cx,i8**%cy,align 8
%cz=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%cA=getelementptr inbounds i8,i8*%cu,i64 8
%cB=bitcast i8*%cA to i8**
store i8*%cz,i8**%cB,align 8
%cC=getelementptr inbounds i8,i8*%cu,i64 16
%cD=bitcast i8*%cC to i32*
store i32 3,i32*%cD,align 4
%cE=call i8*@sml_alloc(i32 inreg 20)#0
%cF=getelementptr inbounds i8,i8*%cE,i64 -4
%cG=bitcast i8*%cF to i32*
store i32 1342177296,i32*%cG,align 4
%cH=getelementptr inbounds i8,i8*%cE,i64 12
%cI=bitcast i8*%cH to i32*
store i32 0,i32*%cI,align 1
%cJ=load i8*,i8**%c,align 8
%cK=bitcast i8*%cE to i8**
store i8*%cJ,i8**%cK,align 8
%cL=getelementptr inbounds i8,i8*%cE,i64 8
%cM=bitcast i8*%cL to i32*
store i32%V,i32*%cM,align 4
%cN=getelementptr inbounds i8,i8*%cE,i64 16
%cO=bitcast i8*%cN to i32*
store i32 1,i32*%cO,align 4
ret i8*%cE
}
define internal fastcc i32@_SMLLL6tyvars_745(i8*inreg%a)#2 gc"smlsharp"{
j:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%h,label%f
f:
call void@sml_check(i32 inreg%d)
%g=load i8*,i8**%b,align 8
br label%h
h:
%i=phi i8*[%g,%f],[%a,%j]
store i8*null,i8**%b,align 8
%k=bitcast i8*%i to i8****
%l=load i8***,i8****%k,align 8
%m=load i8**,i8***%l,align 8
%n=load i8*,i8**%m,align 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
switch i32%p,label%q[
i32 0,label%aA
i32 1,label%I
]
q:
call void@sml_matchcomp_bug()
%r=load i8*,i8**@_SMLZ5Match,align 8
store i8*%r,i8**%b,align 8
%s=call i8*@sml_alloc(i32 inreg 20)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177296,i32*%u,align 4
store i8*%s,i8**%c,align 8
%v=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[57x i8]}>,<{[4x i8],i32,[57x i8]}>*@bE,i64 0,i32 2,i64 0),i8**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to i32*
store i32 3,i32*%A,align 4
%B=call i8*@sml_alloc(i32 inreg 60)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177336,i32*%D,align 4
%E=getelementptr inbounds i8,i8*%B,i64 56
%F=bitcast i8*%E to i32*
store i32 1,i32*%F,align 4
%G=load i8*,i8**%c,align 8
%H=bitcast i8*%B to i8**
store i8*%G,i8**%H,align 8
call void@sml_raise(i8*inreg%B)#1
unreachable
I:
%J=getelementptr inbounds i8,i8*%i,i64 8
%K=bitcast i8*%J to i8****
%L=load i8***,i8****%K,align 8
%M=load i8**,i8***%L,align 8
%N=load i8*,i8**%M,align 8
%O=bitcast i8*%N to i32*
%P=load i32,i32*%O,align 4
switch i32%P,label%Q[
i32 0,label%ay
i32 1,label%ai
]
Q:
call void@sml_matchcomp_bug()
%R=load i8*,i8**@_SMLZ5Match,align 8
store i8*%R,i8**%b,align 8
%S=call i8*@sml_alloc(i32 inreg 20)#0
%T=getelementptr inbounds i8,i8*%S,i64 -4
%U=bitcast i8*%T to i32*
store i32 1342177296,i32*%U,align 4
store i8*%S,i8**%c,align 8
%V=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%W=bitcast i8*%S to i8**
store i8*%V,i8**%W,align 8
%X=getelementptr inbounds i8,i8*%S,i64 8
%Y=bitcast i8*%X to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[57x i8]}>,<{[4x i8],i32,[57x i8]}>*@bE,i64 0,i32 2,i64 0),i8**%Y,align 8
%Z=getelementptr inbounds i8,i8*%S,i64 16
%aa=bitcast i8*%Z to i32*
store i32 3,i32*%aa,align 4
%ab=call i8*@sml_alloc(i32 inreg 60)#0
%ac=getelementptr inbounds i8,i8*%ab,i64 -4
%ad=bitcast i8*%ac to i32*
store i32 1342177336,i32*%ad,align 4
%ae=getelementptr inbounds i8,i8*%ab,i64 56
%af=bitcast i8*%ae to i32*
store i32 1,i32*%af,align 4
%ag=load i8*,i8**%c,align 8
%ah=bitcast i8*%ab to i8**
store i8*%ag,i8**%ah,align 8
call void@sml_raise(i8*inreg%ab)#1
unreachable
ai:
%aj=getelementptr inbounds i8,i8*%n,i64 4
%ak=bitcast i8*%aj to i32*
%al=load i32,i32*%ak,align 4
%am=getelementptr inbounds i8,i8*%N,i64 4
%an=bitcast i8*%am to i32*
%ao=load i32,i32*%an,align 4
%ap=call i8*@sml_alloc(i32 inreg 12)#0
%aq=bitcast i8*%ap to i32*
%ar=getelementptr inbounds i8,i8*%ap,i64 -4
%as=bitcast i8*%ar to i32*
store i32 1342177288,i32*%as,align 4
store i32%al,i32*%aq,align 4
%at=getelementptr inbounds i8,i8*%ap,i64 4
%au=bitcast i8*%at to i32*
store i32%ao,i32*%au,align 4
%av=getelementptr inbounds i8,i8*%ap,i64 8
%aw=bitcast i8*%av to i32*
store i32 0,i32*%aw,align 4
%ax=tail call fastcc i32@_SMLFN14BoundTypeVarID7compareE(i8*inreg%ap)
ret i32%ax
ay:
%az=phi i32[1,%I],[2,%aA]
ret i32%az
aA:
%aB=getelementptr inbounds i8,i8*%i,i64 8
%aC=bitcast i8*%aB to i8****
%aD=load i8***,i8****%aC,align 8
%aE=load i8**,i8***%aD,align 8
%aF=load i8*,i8**%aE,align 8
%aG=bitcast i8*%aF to i32*
%aH=load i32,i32*%aG,align 4
switch i32%aH,label%aI[
i32 0,label%a0
i32 1,label%ay
]
aI:
call void@sml_matchcomp_bug()
%aJ=load i8*,i8**@_SMLZ5Match,align 8
store i8*%aJ,i8**%b,align 8
%aK=call i8*@sml_alloc(i32 inreg 20)#0
%aL=getelementptr inbounds i8,i8*%aK,i64 -4
%aM=bitcast i8*%aL to i32*
store i32 1342177296,i32*%aM,align 4
store i8*%aK,i8**%c,align 8
%aN=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%aO=bitcast i8*%aK to i8**
store i8*%aN,i8**%aO,align 8
%aP=getelementptr inbounds i8,i8*%aK,i64 8
%aQ=bitcast i8*%aP to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[57x i8]}>,<{[4x i8],i32,[57x i8]}>*@bE,i64 0,i32 2,i64 0),i8**%aQ,align 8
%aR=getelementptr inbounds i8,i8*%aK,i64 16
%aS=bitcast i8*%aR to i32*
store i32 3,i32*%aS,align 4
%aT=call i8*@sml_alloc(i32 inreg 60)#0
%aU=getelementptr inbounds i8,i8*%aT,i64 -4
%aV=bitcast i8*%aU to i32*
store i32 1342177336,i32*%aV,align 4
%aW=getelementptr inbounds i8,i8*%aT,i64 56
%aX=bitcast i8*%aW to i32*
store i32 1,i32*%aX,align 4
%aY=load i8*,i8**%c,align 8
%aZ=bitcast i8*%aT to i8**
store i8*%aY,i8**%aZ,align 8
call void@sml_raise(i8*inreg%aT)#1
unreachable
a0:
%a1=getelementptr inbounds i8,i8*%n,i64 4
%a2=bitcast i8*%a1 to i32*
%a3=load i32,i32*%a2,align 4
%a4=getelementptr inbounds i8,i8*%aF,i64 4
%a5=bitcast i8*%a4 to i32*
%a6=load i32,i32*%a5,align 4
%a7=call i8*@sml_alloc(i32 inreg 12)#0
%a8=bitcast i8*%a7 to i32*
%a9=getelementptr inbounds i8,i8*%a7,i64 -4
%ba=bitcast i8*%a9 to i32*
store i32 1342177288,i32*%ba,align 4
store i32%a3,i32*%a8,align 4
%bb=getelementptr inbounds i8,i8*%a7,i64 4
%bc=bitcast i8*%bb to i32*
store i32%a6,i32*%bc,align 4
%bd=getelementptr inbounds i8,i8*%a7,i64 8
%be=bitcast i8*%bd to i32*
store i32 0,i32*%be,align 4
%bf=tail call fastcc i32@_SMLFN5Int327compareE(i8*inreg%a7)
ret i32%bf
}
define internal fastcc i8*@_SMLLLN10TermFormat12formatBtvEnvE_747(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
l:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%j,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
%i=load i8*,i8**%c,align 8
br label%j
j:
%k=phi i8*[%i,%g],[%a,%l]
%m=phi i8*[%h,%g],[%b,%l]
%n=getelementptr inbounds i8,i8*%k,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%k,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=bitcast i8*%k to i8**
%u=load i8*,i8**%t,align 8
%v=call fastcc i8*@_SMLLLN10TermFormat9formatBtvE_539(i32 inreg%p,i32 inreg%s,i8*inreg%u,i8*inreg%m)
ret i8*%v
}
define internal fastcc i8*@_SMLLLN10TermFormat12formatBtvEnvE_748(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%k,label%j
j:
call void@sml_check(i32 inreg%h)
br label%k
k:
%l=call fastcc i8*@_SMLFN4List3mapE(i32 inreg 1,i32 inreg 8,i32 inreg 1,i32 inreg 8)
%m=getelementptr inbounds i8,i8*%l,i64 16
%n=bitcast i8*%m to i8*(i8*,i8*)**
%o=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%n,align 8
%p=bitcast i8*%l to i8**
%q=load i8*,i8**%p,align 8
store i8*%q,i8**%f,align 8
%r=load i8*,i8**%e,align 8
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8**
%u=load i8*,i8**%t,align 8
store i8*%u,i8**%d,align 8
%v=getelementptr inbounds i8,i8*%r,i64 24
%w=bitcast i8*%v to i32*
%x=load i32,i32*%w,align 4
%y=getelementptr inbounds i8,i8*%r,i64 28
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=getelementptr inbounds i8,i8*%r,i64 32
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=getelementptr inbounds i8,i8*%r,i64 36
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
%H=call i8*@sml_alloc(i32 inreg 28)#0
%I=getelementptr inbounds i8,i8*%H,i64 -4
%J=bitcast i8*%I to i32*
store i32 1342177304,i32*%J,align 4
store i8*%H,i8**%g,align 8
%K=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%L=bitcast i8*%H to i8**
store i8*%K,i8**%L,align 8
%M=getelementptr inbounds i8,i8*%H,i64 8
%N=bitcast i8*%M to i32*
store i32%x,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%H,i64 12
%P=bitcast i8*%O to i32*
store i32%A,i32*%P,align 4
%Q=getelementptr inbounds i8,i8*%H,i64 16
%R=bitcast i8*%Q to i32*
store i32%D,i32*%R,align 4
%S=getelementptr inbounds i8,i8*%H,i64 20
%T=bitcast i8*%S to i32*
store i32%G,i32*%T,align 4
%U=getelementptr inbounds i8,i8*%H,i64 24
%V=bitcast i8*%U to i32*
store i32 1,i32*%V,align 4
%W=call i8*@sml_alloc(i32 inreg 28)#0
%X=getelementptr inbounds i8,i8*%W,i64 -4
%Y=bitcast i8*%X to i32*
store i32 1342177304,i32*%Y,align 4
%Z=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%aa=bitcast i8*%W to i8**
store i8*%Z,i8**%aa,align 8
%ab=getelementptr inbounds i8,i8*%W,i64 8
%ac=bitcast i8*%ab to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLL6tyvars_741 to void(...)*),void(...)**%ac,align 8
%ad=getelementptr inbounds i8,i8*%W,i64 16
%ae=bitcast i8*%ad to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLL6tyvars_741 to void(...)*),void(...)**%ae,align 8
%af=getelementptr inbounds i8,i8*%W,i64 24
%ag=bitcast i8*%af to i32*
store i32 -2147483647,i32*%ag,align 4
%ah=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%ai=call fastcc i8*%o(i8*inreg%ah,i8*inreg%W)
%aj=getelementptr inbounds i8,i8*%ai,i64 16
%ak=bitcast i8*%aj to i8*(i8*,i8*)**
%al=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ak,align 8
%am=bitcast i8*%ai to i8**
%an=load i8*,i8**%am,align 8
store i8*%an,i8**%d,align 8
%ao=load i8*,i8**%e,align 8
%ap=getelementptr inbounds i8,i8*%ao,i64 24
%aq=bitcast i8*%ap to i32*
%ar=load i32,i32*%aq,align 4
%as=getelementptr inbounds i8,i8*%ao,i64 28
%at=bitcast i8*%as to i32*
%au=load i32,i32*%at,align 4
%av=call fastcc i8*@_SMLFN14BoundTypeVarID3Map10listItemsiE(i32 inreg%ar,i32 inreg%au)
%aw=getelementptr inbounds i8,i8*%av,i64 16
%ax=bitcast i8*%aw to i8*(i8*,i8*)**
%ay=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ax,align 8
%az=bitcast i8*%av to i8**
%aA=load i8*,i8**%az,align 8
%aB=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aC=call fastcc i8*%ay(i8*inreg%aA,i8*inreg%aB)
%aD=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aE=call fastcc i8*%al(i8*inreg%aD,i8*inreg%aC)
store i8*%aE,i8**%c,align 8
%aF=call fastcc i8*@_SMLFN10ListSorter4sortE(i32 inreg 1,i32 inreg 8)
%aG=getelementptr inbounds i8,i8*%aF,i64 16
%aH=bitcast i8*%aG to i8*(i8*,i8*)**
%aI=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aH,align 8
%aJ=bitcast i8*%aF to i8**
%aK=load i8*,i8**%aJ,align 8
%aL=call fastcc i8*%aI(i8*inreg%aK,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bF,i64 0,i32 2)to i8*))
%aM=getelementptr inbounds i8,i8*%aL,i64 16
%aN=bitcast i8*%aM to i8*(i8*,i8*)**
%aO=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aN,align 8
%aP=bitcast i8*%aL to i8**
%aQ=load i8*,i8**%aP,align 8
%aR=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aS=call fastcc i8*%aO(i8*inreg%aQ,i8*inreg%aR)
store i8*%aS,i8**%c,align 8
%aT=call fastcc i8*@_SMLFN15BasicFormatters11format__listE(i32 inreg 1,i32 inreg 8)
store i8*%aT,i8**%d,align 8
%aU=load i8*,i8**%e,align 8
%aV=getelementptr inbounds i8,i8*%aU,i64 8
%aW=bitcast i8*%aV to i8**
%aX=load i8*,i8**%aW,align 8
store i8*%aX,i8**%f,align 8
%aY=getelementptr inbounds i8,i8*%aU,i64 24
%aZ=bitcast i8*%aY to i32*
%a0=load i32,i32*%aZ,align 4
%a1=getelementptr inbounds i8,i8*%aU,i64 28
%a2=bitcast i8*%a1 to i32*
%a3=load i32,i32*%a2,align 4
%a4=call i8*@sml_alloc(i32 inreg 20)#0
%a5=getelementptr inbounds i8,i8*%a4,i64 -4
%a6=bitcast i8*%a5 to i32*
store i32 1342177296,i32*%a6,align 4
store i8*%a4,i8**%g,align 8
%a7=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%a8=bitcast i8*%a4 to i8**
store i8*%a7,i8**%a8,align 8
%a9=getelementptr inbounds i8,i8*%a4,i64 8
%ba=bitcast i8*%a9 to i32*
store i32%a0,i32*%ba,align 4
%bb=getelementptr inbounds i8,i8*%a4,i64 12
%bc=bitcast i8*%bb to i32*
store i32%a3,i32*%bc,align 4
%bd=getelementptr inbounds i8,i8*%a4,i64 16
%be=bitcast i8*%bd to i32*
store i32 1,i32*%be,align 4
%bf=call i8*@sml_alloc(i32 inreg 28)#0
%bg=getelementptr inbounds i8,i8*%bf,i64 -4
%bh=bitcast i8*%bg to i32*
store i32 1342177304,i32*%bh,align 4
store i8*%bf,i8**%f,align 8
%bi=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%bj=bitcast i8*%bf to i8**
store i8*%bi,i8**%bj,align 8
%bk=getelementptr inbounds i8,i8*%bf,i64 8
%bl=bitcast i8*%bk to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12formatBtvEnvE_747 to void(...)*),void(...)**%bl,align 8
%bm=getelementptr inbounds i8,i8*%bf,i64 16
%bn=bitcast i8*%bm to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12formatBtvEnvE_747 to void(...)*),void(...)**%bn,align 8
%bo=getelementptr inbounds i8,i8*%bf,i64 24
%bp=bitcast i8*%bo to i32*
store i32 -2147483647,i32*%bp,align 4
%bq=load i8*,i8**%d,align 8
%br=getelementptr inbounds i8,i8*%bq,i64 16
%bs=bitcast i8*%br to i8*(i8*,i8*)**
%bt=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bs,align 8
%bu=bitcast i8*%bq to i8**
%bv=load i8*,i8**%bu,align 8
store i8*%bv,i8**%d,align 8
%bw=bitcast i8**%e to i8***
%bx=load i8**,i8***%bw,align 8
%by=load i8*,i8**%bx,align 8
store i8*%by,i8**%e,align 8
%bz=call i8*@sml_alloc(i32 inreg 20)#0
%bA=getelementptr inbounds i8,i8*%bz,i64 -4
%bB=bitcast i8*%bA to i32*
store i32 1342177296,i32*%bB,align 4
%bC=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%bD=bitcast i8*%bz to i8**
store i8*%bC,i8**%bD,align 8
%bE=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bF=getelementptr inbounds i8,i8*%bz,i64 8
%bG=bitcast i8*%bF to i8**
store i8*%bE,i8**%bG,align 8
%bH=getelementptr inbounds i8,i8*%bz,i64 16
%bI=bitcast i8*%bH to i32*
store i32 3,i32*%bI,align 4
%bJ=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bK=call fastcc i8*%bt(i8*inreg%bJ,i8*inreg%bz)
%bL=getelementptr inbounds i8,i8*%bK,i64 16
%bM=bitcast i8*%bL to i8*(i8*,i8*)**
%bN=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bM,align 8
%bO=bitcast i8*%bK to i8**
%bP=load i8*,i8**%bO,align 8
%bQ=load i8*,i8**%c,align 8
%bR=tail call fastcc i8*%bN(i8*inreg%bP,i8*inreg%bQ)
ret i8*%bR
}
define internal fastcc i8*@_SMLLLN10TermFormat12formatBtvEnvE_749(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=getelementptr inbounds i8,i8*%a,i64 16
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%a,i64 20
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=getelementptr inbounds i8,i8*%a,i64 24
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=getelementptr inbounds i8,i8*%a,i64 28
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=call i8*@sml_alloc(i32 inreg 44)#0
%y=getelementptr inbounds i8,i8*%x,i64 -4
%z=bitcast i8*%y to i32*
store i32 1342177320,i32*%z,align 4
store i8*%x,i8**%f,align 8
%A=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%B=bitcast i8*%x to i8**
store i8*%A,i8**%B,align 8
%C=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%D=getelementptr inbounds i8,i8*%x,i64 8
%E=bitcast i8*%D to i8**
store i8*%C,i8**%E,align 8
%F=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%G=getelementptr inbounds i8,i8*%x,i64 16
%H=bitcast i8*%G to i8**
store i8*%F,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%x,i64 24
%J=bitcast i8*%I to i32*
store i32%n,i32*%J,align 4
%K=getelementptr inbounds i8,i8*%x,i64 28
%L=bitcast i8*%K to i32*
store i32%q,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%x,i64 32
%N=bitcast i8*%M to i32*
store i32%t,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%x,i64 36
%P=bitcast i8*%O to i32*
store i32%w,i32*%P,align 4
%Q=getelementptr inbounds i8,i8*%x,i64 40
%R=bitcast i8*%Q to i32*
store i32 7,i32*%R,align 4
%S=call i8*@sml_alloc(i32 inreg 28)#0
%T=getelementptr inbounds i8,i8*%S,i64 -4
%U=bitcast i8*%T to i32*
store i32 1342177304,i32*%U,align 4
%V=load i8*,i8**%f,align 8
%W=bitcast i8*%S to i8**
store i8*%V,i8**%W,align 8
%X=getelementptr inbounds i8,i8*%S,i64 8
%Y=bitcast i8*%X to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12formatBtvEnvE_748 to void(...)*),void(...)**%Y,align 8
%Z=getelementptr inbounds i8,i8*%S,i64 16
%aa=bitcast i8*%Z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12formatBtvEnvE_748 to void(...)*),void(...)**%aa,align 8
%ab=getelementptr inbounds i8,i8*%S,i64 24
%ac=bitcast i8*%ab to i32*
store i32 -2147483647,i32*%ac,align 4
ret i8*%S
}
define internal fastcc i8*@_SMLLLN10TermFormat12formatBtvEnvE_750(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=getelementptr inbounds i8,i8*%a,i64 16
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%a,i64 20
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=call i8*@sml_alloc(i32 inreg 36)#0
%s=getelementptr inbounds i8,i8*%r,i64 -4
%t=bitcast i8*%s to i32*
store i32 1342177312,i32*%t,align 4
store i8*%r,i8**%f,align 8
%u=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%v=bitcast i8*%r to i8**
store i8*%u,i8**%v,align 8
%w=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%x=getelementptr inbounds i8,i8*%r,i64 8
%y=bitcast i8*%x to i8**
store i8*%w,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%r,i64 16
%A=bitcast i8*%z to i32*
store i32%n,i32*%A,align 4
%B=getelementptr inbounds i8,i8*%r,i64 20
%C=bitcast i8*%B to i32*
store i32%q,i32*%C,align 4
%D=getelementptr inbounds i8,i8*%r,i64 24
%E=bitcast i8*%D to i32*
store i32%b,i32*%E,align 4
%F=getelementptr inbounds i8,i8*%r,i64 28
%G=bitcast i8*%F to i32*
store i32%c,i32*%G,align 4
%H=getelementptr inbounds i8,i8*%r,i64 32
%I=bitcast i8*%H to i32*
store i32 3,i32*%I,align 4
%J=call i8*@sml_alloc(i32 inreg 28)#0
%K=getelementptr inbounds i8,i8*%J,i64 -4
%L=bitcast i8*%K to i32*
store i32 1342177304,i32*%L,align 4
%M=load i8*,i8**%f,align 8
%N=bitcast i8*%J to i8**
store i8*%M,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%J,i64 8
%P=bitcast i8*%O to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12formatBtvEnvE_749 to void(...)*),void(...)**%P,align 8
%Q=getelementptr inbounds i8,i8*%J,i64 16
%R=bitcast i8*%Q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12formatBtvEnvE_749 to void(...)*),void(...)**%R,align 8
%S=getelementptr inbounds i8,i8*%J,i64 24
%T=bitcast i8*%S to i32*
store i32 -2147483647,i32*%T,align 4
ret i8*%J
}
define internal fastcc i8*@_SMLLLN10TermFormat12formatBtvEnvE_751(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLLLN10TermFormat12formatBtvEnvE_750(i8*inreg%m,i32 inreg%p,i32 inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%c,align 8
%A=tail call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
ret i8*%A
}
define internal fastcc i8*@_SMLLLN10TermFormat12formatBtvEnvE_752(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%e,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i32*
%k=load i32,i32*%j,align 4
%l=getelementptr inbounds i8,i8*%a,i64 12
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=call i8*@sml_alloc(i32 inreg 28)#0
%p=getelementptr inbounds i8,i8*%o,i64 -4
%q=bitcast i8*%p to i32*
store i32 1342177304,i32*%q,align 4
store i8*%o,i8**%f,align 8
%r=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%s=bitcast i8*%o to i8**
store i8*%r,i8**%s,align 8
%t=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%u=getelementptr inbounds i8,i8*%o,i64 8
%v=bitcast i8*%u to i8**
store i8*%t,i8**%v,align 8
%w=getelementptr inbounds i8,i8*%o,i64 16
%x=bitcast i8*%w to i32*
store i32%k,i32*%x,align 4
%y=getelementptr inbounds i8,i8*%o,i64 20
%z=bitcast i8*%y to i32*
store i32%n,i32*%z,align 4
%A=getelementptr inbounds i8,i8*%o,i64 24
%B=bitcast i8*%A to i32*
store i32 3,i32*%B,align 4
%C=call i8*@sml_alloc(i32 inreg 28)#0
%D=getelementptr inbounds i8,i8*%C,i64 -4
%E=bitcast i8*%D to i32*
store i32 1342177304,i32*%E,align 4
%F=load i8*,i8**%f,align 8
%G=bitcast i8*%C to i8**
store i8*%F,i8**%G,align 8
%H=getelementptr inbounds i8,i8*%C,i64 8
%I=bitcast i8*%H to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLLN10TermFormat12formatBtvEnvE_750 to void(...)*),void(...)**%I,align 8
%J=getelementptr inbounds i8,i8*%C,i64 16
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat12formatBtvEnvE_955 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%C,i64 24
%M=bitcast i8*%L to i32*
store i32 -2147483647,i32*%M,align 4
%N=load i8*,i8**%d,align 8
%O=getelementptr inbounds i8,i8*%N,i64 8
%P=bitcast i8*%O to i32*
%Q=load i32,i32*%P,align 4
store i8*null,i8**%d,align 8
%R=getelementptr inbounds i8,i8*%N,i64 12
%S=bitcast i8*%R to i32*
%T=load i32,i32*%S,align 4
%U=call i8*@sml_alloc(i32 inreg 20)#0
%V=getelementptr inbounds i8,i8*%U,i64 -4
%W=bitcast i8*%V to i32*
store i32 1342177296,i32*%W,align 4
store i8*%U,i8**%c,align 8
%X=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%Y=bitcast i8*%U to i8**
store i8*%X,i8**%Y,align 8
%Z=getelementptr inbounds i8,i8*%U,i64 8
%aa=bitcast i8*%Z to i32*
store i32%Q,i32*%aa,align 4
%ab=getelementptr inbounds i8,i8*%U,i64 12
%ac=bitcast i8*%ab to i32*
store i32%T,i32*%ac,align 4
%ad=getelementptr inbounds i8,i8*%U,i64 16
%ae=bitcast i8*%ad to i32*
store i32 1,i32*%ae,align 4
%af=call i8*@sml_alloc(i32 inreg 28)#0
%ag=getelementptr inbounds i8,i8*%af,i64 -4
%ah=bitcast i8*%ag to i32*
store i32 1342177304,i32*%ah,align 4
%ai=load i8*,i8**%c,align 8
%aj=bitcast i8*%af to i8**
store i8*%ai,i8**%aj,align 8
%ak=getelementptr inbounds i8,i8*%af,i64 8
%al=bitcast i8*%ak to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12formatBtvEnvE_751 to void(...)*),void(...)**%al,align 8
%am=getelementptr inbounds i8,i8*%af,i64 16
%an=bitcast i8*%am to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12formatBtvEnvE_751 to void(...)*),void(...)**%an,align 8
%ao=getelementptr inbounds i8,i8*%af,i64 24
%ap=bitcast i8*%ao to i32*
store i32 -2147483647,i32*%ap,align 4
ret i8*%af
}
define internal fastcc i8*@_SMLLLN10TermFormat12formatBtvEnvE_753(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12formatBtvEnvE_752 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat12formatBtvEnvE_752 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLL6tyvars_754(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
o:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%m,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%c,align 8
%l=load i8*,i8**%e,align 8
br label%m
m:
%n=phi i8*[%l,%j],[%a,%o]
%p=phi i8*[%k,%j],[%b,%o]
%q=getelementptr inbounds i8,i8*%n,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=add i32%s,3
%u=sub i32 0,%s
%v=and i32%t,%u
%w=getelementptr inbounds i8,i8*%n,i64 20
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=add i32%y,3
%A=sub i32 0,%y
%B=and i32%z,%A
%C=add i32%y,-1
%D=and i32%C,%A
%E=add i32%y,7
%F=add i32%E,%D
%G=and i32%F,-8
%H=getelementptr inbounds i8,i8*%n,i64 16
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
%K=or i32%G,4
%L=add i32%s,-1
%M=and i32%L,%u
%N=add i32%s,7
%O=add i32%N,%M
%P=and i32%O,-8
%Q=getelementptr inbounds i8,i8*%n,i64 8
%R=bitcast i8*%Q to i32*
%S=load i32,i32*%R,align 4
%T=or i32%P,4
%U=bitcast i8*%p to i32*
%V=load i32,i32*%U,align 4
%W=icmp eq i32%S,0
br i1%W,label%ac,label%X
X:
store i8*null,i8**%c,align 8
%Y=sext i32%v to i64
%Z=getelementptr inbounds i8,i8*%p,i64%Y
%aa=bitcast i8*%Z to i8**
%ab=load i8*,i8**%aa,align 8
br label%aj
ac:
%ad=call i8*@sml_alloc(i32 inreg%s)#0
%ae=getelementptr inbounds i8,i8*%ad,i64 -4
%af=bitcast i8*%ae to i32*
store i32%s,i32*%af,align 4
%ag=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ah=sext i32%v to i64
%ai=getelementptr inbounds i8,i8*%ag,i64%ah
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ad,i8*%ai,i32%s,i1 false)
br label%aj
aj:
%ak=phi i8*[%ad,%ac],[%ab,%X]
store i8*%ak,i8**%c,align 8
%al=call fastcc i8*@_SMLFN14BoundTypeVarID3Map4findE(i32 inreg 1,i32 inreg 8)
%am=getelementptr inbounds i8,i8*%al,i64 16
%an=bitcast i8*%am to i8*(i8*,i8*)**
%ao=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%an,align 8
%ap=bitcast i8*%al to i8**
%aq=load i8*,i8**%ap,align 8
store i8*%aq,i8**%f,align 8
%ar=bitcast i8**%e to i8***
%as=load i8**,i8***%ar,align 8
%at=load i8*,i8**%as,align 8
%au=getelementptr inbounds i8,i8*%at,i64 8
%av=bitcast i8*%au to i8**
%aw=load i8*,i8**%av,align 8
store i8*%aw,i8**%d,align 8
%ax=call i8*@sml_alloc(i32 inreg 20)#0
%ay=getelementptr inbounds i8,i8*%ax,i64 -4
%az=bitcast i8*%ay to i32*
store i32 1342177296,i32*%az,align 4
%aA=getelementptr inbounds i8,i8*%ax,i64 12
%aB=bitcast i8*%aA to i32*
store i32 0,i32*%aB,align 1
%aC=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aD=bitcast i8*%ax to i8**
store i8*%aC,i8**%aD,align 8
%aE=getelementptr inbounds i8,i8*%ax,i64 8
%aF=bitcast i8*%aE to i32*
store i32%V,i32*%aF,align 4
%aG=getelementptr inbounds i8,i8*%ax,i64 16
%aH=bitcast i8*%aG to i32*
store i32 1,i32*%aH,align 4
%aI=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%aJ=call fastcc i8*%ao(i8*inreg%aI,i8*inreg%ax)
%aK=icmp eq i8*%aJ,null
br i1%aK,label%aL,label%aZ
aL:
%aM=call i8*@sml_alloc(i32 inreg 12)#0
%aN=bitcast i8*%aM to i32*
%aO=getelementptr inbounds i8,i8*%aM,i64 -4
%aP=bitcast i8*%aO to i32*
store i32 1342177288,i32*%aP,align 4
store i8*%aM,i8**%d,align 8
store i32 1,i32*%aN,align 4
%aQ=getelementptr inbounds i8,i8*%aM,i64 4
%aR=bitcast i8*%aQ to i32*
store i32%V,i32*%aR,align 4
%aS=getelementptr inbounds i8,i8*%aM,i64 8
%aT=bitcast i8*%aS to i32*
store i32 0,i32*%aT,align 4
%aU=call i8*@sml_alloc(i32 inreg 20)#0
%aV=getelementptr inbounds i8,i8*%aU,i64 -4
%aW=bitcast i8*%aV to i32*
store i32 1342177296,i32*%aW,align 4
%aX=load i8*,i8**%d,align 8
%aY=bitcast i8*%aU to i8**
store i8*%aX,i8**%aY,align 8
br label%b0
aZ:
%a0=bitcast i8*%aJ to i8**
%a1=load i8*,i8**%a0,align 8
store i8*%a1,i8**%d,align 8
%a2=bitcast i8*%a1 to i32*
%a3=load i32,i32*%a2,align 4
%a4=load i8*,i8**%e,align 8
%a5=getelementptr inbounds i8,i8*%a4,i64 16
%a6=bitcast i8*%a5 to i32*
%a7=load i32,i32*%a6,align 4
%a8=icmp eq i32%a7,0
br i1%a8,label%be,label%a9
a9:
store i8*null,i8**%d,align 8
%ba=sext i32%B to i64
%bb=getelementptr inbounds i8,i8*%a1,i64%ba
%bc=bitcast i8*%bb to i8**
%bd=load i8*,i8**%bc,align 8
br label%bo
be:
%bf=getelementptr inbounds i8,i8*%a4,i64 20
%bg=bitcast i8*%bf to i32*
%bh=load i32,i32*%bg,align 4
%bi=call i8*@sml_alloc(i32 inreg%bh)#0
%bj=getelementptr inbounds i8,i8*%bi,i64 -4
%bk=bitcast i8*%bj to i32*
store i32%bh,i32*%bk,align 4
%bl=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bm=sext i32%B to i64
%bn=getelementptr inbounds i8,i8*%bl,i64%bm
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bi,i8*%bn,i32%bh,i1 false)
br label%bo
bo:
%bp=phi i8*[%bi,%be],[%bd,%a9]
store i8*%bp,i8**%d,align 8
%bq=call i8*@sml_alloc(i32 inreg 12)#0
%br=bitcast i8*%bq to i32*
%bs=getelementptr inbounds i8,i8*%bq,i64 -4
%bt=bitcast i8*%bs to i32*
store i32 1342177288,i32*%bt,align 4
store i8*%bq,i8**%f,align 8
store i32 0,i32*%br,align 4
%bu=getelementptr inbounds i8,i8*%bq,i64 4
%bv=bitcast i8*%bu to i32*
store i32%a3,i32*%bv,align 4
%bw=getelementptr inbounds i8,i8*%bq,i64 8
%bx=bitcast i8*%bw to i32*
store i32 0,i32*%bx,align 4
%by=load i8*,i8**%e,align 8
%bz=getelementptr inbounds i8,i8*%by,i64 20
%bA=bitcast i8*%bz to i32*
%bB=load i32,i32*%bA,align 4
%bC=getelementptr inbounds i8,i8*%by,i64 16
%bD=bitcast i8*%bC to i32*
%bE=load i32,i32*%bD,align 4
%bF=call i8*@sml_alloc(i32 inreg%K)#0
%bG=or i32%G,1342177280
%bH=getelementptr inbounds i8,i8*%bF,i64 -4
%bI=bitcast i8*%bH to i32*
store i32%bG,i32*%bI,align 4
store i8*%bF,i8**%g,align 8
call void@llvm.memset.p0i8.i32(i8*%bF,i8 0,i32%K,i1 false)
%bJ=icmp eq i32%bE,0
%bK=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bL=sext i32%D to i64
%bM=getelementptr inbounds i8,i8*%bF,i64%bL
br i1%bJ,label%bN,label%bO
bN:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bM,i8*%bK,i32%bB,i1 false)
br label%bQ
bO:
%bP=bitcast i8*%bM to i8**
store i8*%bK,i8**%bP,align 8
br label%bQ
bQ:
%bR=sext i32%G to i64
%bS=getelementptr inbounds i8,i8*%bF,i64%bR
%bT=bitcast i8*%bS to i32*
store i32%J,i32*%bT,align 4
%bU=call i8*@sml_alloc(i32 inreg 20)#0
%bV=getelementptr inbounds i8,i8*%bU,i64 -4
%bW=bitcast i8*%bV to i32*
store i32 1342177296,i32*%bW,align 4
%bX=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%bY=bitcast i8*%bU to i8**
store i8*%bX,i8**%bY,align 8
%bZ=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
br label%b0
b0:
%b1=phi i8*[%bU,%bQ],[%aU,%aL]
%b2=phi i8*[%bZ,%bQ],[null,%aL]
%b3=phi i8*[%bX,%bQ],[%aX,%aL]
%b4=getelementptr inbounds i8,i8*%b1,i64 8
%b5=bitcast i8*%b4 to i8**
store i8*%b2,i8**%b5,align 8
%b6=getelementptr inbounds i8,i8*%b1,i64 16
%b7=bitcast i8*%b6 to i32*
store i32 3,i32*%b7,align 4
store i8*%b3,i8**%d,align 8
%b8=load i8*,i8**%e,align 8
%b9=getelementptr inbounds i8,i8*%b8,i64 12
%ca=bitcast i8*%b9 to i32*
%cb=load i32,i32*%ca,align 4
store i8*null,i8**%e,align 8
%cc=getelementptr inbounds i8,i8*%b8,i64 8
%cd=bitcast i8*%cc to i32*
%ce=load i32,i32*%cd,align 4
%cf=call i8*@sml_alloc(i32 inreg%T)#0
%cg=or i32%P,1342177280
%ch=getelementptr inbounds i8,i8*%cf,i64 -4
%ci=bitcast i8*%ch to i32*
store i32%cg,i32*%ci,align 4
store i8*%cf,i8**%e,align 8
call void@llvm.memset.p0i8.i32(i8*%cf,i8 0,i32%T,i1 false)
%cj=icmp eq i32%ce,0
%ck=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cl=sext i32%M to i64
%cm=getelementptr inbounds i8,i8*%cf,i64%cl
br i1%cj,label%cn,label%co
cn:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%cm,i8*%ck,i32%cb,i1 false)
br label%cq
co:
%cp=bitcast i8*%cm to i8**
store i8*%ck,i8**%cp,align 8
br label%cq
cq:
%cr=sext i32%P to i64
%cs=getelementptr inbounds i8,i8*%cf,i64%cr
%ct=bitcast i8*%cs to i32*
store i32%S,i32*%ct,align 4
%cu=call i8*@sml_alloc(i32 inreg 20)#0
%cv=getelementptr inbounds i8,i8*%cu,i64 -4
%cw=bitcast i8*%cv to i32*
store i32 1342177296,i32*%cw,align 4
store i8*%cu,i8**%c,align 8
%cx=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%cy=bitcast i8*%cu to i8**
store i8*%cx,i8**%cy,align 8
%cz=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%cA=getelementptr inbounds i8,i8*%cu,i64 8
%cB=bitcast i8*%cA to i8**
store i8*%cz,i8**%cB,align 8
%cC=getelementptr inbounds i8,i8*%cu,i64 16
%cD=bitcast i8*%cC to i32*
store i32 3,i32*%cD,align 4
%cE=call i8*@sml_alloc(i32 inreg 20)#0
%cF=getelementptr inbounds i8,i8*%cE,i64 -4
%cG=bitcast i8*%cF to i32*
store i32 1342177296,i32*%cG,align 4
%cH=getelementptr inbounds i8,i8*%cE,i64 12
%cI=bitcast i8*%cH to i32*
store i32 0,i32*%cI,align 1
%cJ=load i8*,i8**%c,align 8
%cK=bitcast i8*%cE to i8**
store i8*%cJ,i8**%cK,align 8
%cL=getelementptr inbounds i8,i8*%cE,i64 8
%cM=bitcast i8*%cL to i32*
store i32%V,i32*%cM,align 4
%cN=getelementptr inbounds i8,i8*%cE,i64 16
%cO=bitcast i8*%cN to i32*
store i32 1,i32*%cO,align 4
ret i8*%cE
}
define internal fastcc i32@_SMLLL6tyvars_758(i8*inreg%a)#2 gc"smlsharp"{
j:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%h,label%f
f:
call void@sml_check(i32 inreg%d)
%g=load i8*,i8**%b,align 8
br label%h
h:
%i=phi i8*[%g,%f],[%a,%j]
store i8*null,i8**%b,align 8
%k=bitcast i8*%i to i8****
%l=load i8***,i8****%k,align 8
%m=load i8**,i8***%l,align 8
%n=load i8*,i8**%m,align 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
switch i32%p,label%q[
i32 0,label%aA
i32 1,label%I
]
q:
call void@sml_matchcomp_bug()
%r=load i8*,i8**@_SMLZ5Match,align 8
store i8*%r,i8**%b,align 8
%s=call i8*@sml_alloc(i32 inreg 20)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177296,i32*%u,align 4
store i8*%s,i8**%c,align 8
%v=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[57x i8]}>,<{[4x i8],i32,[57x i8]}>*@bG,i64 0,i32 2,i64 0),i8**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to i32*
store i32 3,i32*%A,align 4
%B=call i8*@sml_alloc(i32 inreg 60)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177336,i32*%D,align 4
%E=getelementptr inbounds i8,i8*%B,i64 56
%F=bitcast i8*%E to i32*
store i32 1,i32*%F,align 4
%G=load i8*,i8**%c,align 8
%H=bitcast i8*%B to i8**
store i8*%G,i8**%H,align 8
call void@sml_raise(i8*inreg%B)#1
unreachable
I:
%J=getelementptr inbounds i8,i8*%i,i64 8
%K=bitcast i8*%J to i8****
%L=load i8***,i8****%K,align 8
%M=load i8**,i8***%L,align 8
%N=load i8*,i8**%M,align 8
%O=bitcast i8*%N to i32*
%P=load i32,i32*%O,align 4
switch i32%P,label%Q[
i32 0,label%ay
i32 1,label%ai
]
Q:
call void@sml_matchcomp_bug()
%R=load i8*,i8**@_SMLZ5Match,align 8
store i8*%R,i8**%b,align 8
%S=call i8*@sml_alloc(i32 inreg 20)#0
%T=getelementptr inbounds i8,i8*%S,i64 -4
%U=bitcast i8*%T to i32*
store i32 1342177296,i32*%U,align 4
store i8*%S,i8**%c,align 8
%V=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%W=bitcast i8*%S to i8**
store i8*%V,i8**%W,align 8
%X=getelementptr inbounds i8,i8*%S,i64 8
%Y=bitcast i8*%X to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[57x i8]}>,<{[4x i8],i32,[57x i8]}>*@bG,i64 0,i32 2,i64 0),i8**%Y,align 8
%Z=getelementptr inbounds i8,i8*%S,i64 16
%aa=bitcast i8*%Z to i32*
store i32 3,i32*%aa,align 4
%ab=call i8*@sml_alloc(i32 inreg 60)#0
%ac=getelementptr inbounds i8,i8*%ab,i64 -4
%ad=bitcast i8*%ac to i32*
store i32 1342177336,i32*%ad,align 4
%ae=getelementptr inbounds i8,i8*%ab,i64 56
%af=bitcast i8*%ae to i32*
store i32 1,i32*%af,align 4
%ag=load i8*,i8**%c,align 8
%ah=bitcast i8*%ab to i8**
store i8*%ag,i8**%ah,align 8
call void@sml_raise(i8*inreg%ab)#1
unreachable
ai:
%aj=getelementptr inbounds i8,i8*%n,i64 4
%ak=bitcast i8*%aj to i32*
%al=load i32,i32*%ak,align 4
%am=getelementptr inbounds i8,i8*%N,i64 4
%an=bitcast i8*%am to i32*
%ao=load i32,i32*%an,align 4
%ap=call i8*@sml_alloc(i32 inreg 12)#0
%aq=bitcast i8*%ap to i32*
%ar=getelementptr inbounds i8,i8*%ap,i64 -4
%as=bitcast i8*%ar to i32*
store i32 1342177288,i32*%as,align 4
store i32%al,i32*%aq,align 4
%at=getelementptr inbounds i8,i8*%ap,i64 4
%au=bitcast i8*%at to i32*
store i32%ao,i32*%au,align 4
%av=getelementptr inbounds i8,i8*%ap,i64 8
%aw=bitcast i8*%av to i32*
store i32 0,i32*%aw,align 4
%ax=tail call fastcc i32@_SMLFN14BoundTypeVarID7compareE(i8*inreg%ap)
ret i32%ax
ay:
%az=phi i32[1,%I],[2,%aA]
ret i32%az
aA:
%aB=getelementptr inbounds i8,i8*%i,i64 8
%aC=bitcast i8*%aB to i8****
%aD=load i8***,i8****%aC,align 8
%aE=load i8**,i8***%aD,align 8
%aF=load i8*,i8**%aE,align 8
%aG=bitcast i8*%aF to i32*
%aH=load i32,i32*%aG,align 4
switch i32%aH,label%aI[
i32 0,label%a0
i32 1,label%ay
]
aI:
call void@sml_matchcomp_bug()
%aJ=load i8*,i8**@_SMLZ5Match,align 8
store i8*%aJ,i8**%b,align 8
%aK=call i8*@sml_alloc(i32 inreg 20)#0
%aL=getelementptr inbounds i8,i8*%aK,i64 -4
%aM=bitcast i8*%aL to i32*
store i32 1342177296,i32*%aM,align 4
store i8*%aK,i8**%c,align 8
%aN=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%aO=bitcast i8*%aK to i8**
store i8*%aN,i8**%aO,align 8
%aP=getelementptr inbounds i8,i8*%aK,i64 8
%aQ=bitcast i8*%aP to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[57x i8]}>,<{[4x i8],i32,[57x i8]}>*@bG,i64 0,i32 2,i64 0),i8**%aQ,align 8
%aR=getelementptr inbounds i8,i8*%aK,i64 16
%aS=bitcast i8*%aR to i32*
store i32 3,i32*%aS,align 4
%aT=call i8*@sml_alloc(i32 inreg 60)#0
%aU=getelementptr inbounds i8,i8*%aT,i64 -4
%aV=bitcast i8*%aU to i32*
store i32 1342177336,i32*%aV,align 4
%aW=getelementptr inbounds i8,i8*%aT,i64 56
%aX=bitcast i8*%aW to i32*
store i32 1,i32*%aX,align 4
%aY=load i8*,i8**%c,align 8
%aZ=bitcast i8*%aT to i8**
store i8*%aY,i8**%aZ,align 8
call void@sml_raise(i8*inreg%aT)#1
unreachable
a0:
%a1=getelementptr inbounds i8,i8*%n,i64 4
%a2=bitcast i8*%a1 to i32*
%a3=load i32,i32*%a2,align 4
%a4=getelementptr inbounds i8,i8*%aF,i64 4
%a5=bitcast i8*%a4 to i32*
%a6=load i32,i32*%a5,align 4
%a7=call i8*@sml_alloc(i32 inreg 12)#0
%a8=bitcast i8*%a7 to i32*
%a9=getelementptr inbounds i8,i8*%a7,i64 -4
%ba=bitcast i8*%a9 to i32*
store i32 1342177288,i32*%ba,align 4
store i32%a3,i32*%a8,align 4
%bb=getelementptr inbounds i8,i8*%a7,i64 4
%bc=bitcast i8*%bb to i32*
store i32%a6,i32*%bc,align 4
%bd=getelementptr inbounds i8,i8*%a7,i64 8
%be=bitcast i8*%bd to i32*
store i32 0,i32*%be,align 4
%bf=tail call fastcc i32@_SMLFN5Int327compareE(i8*inreg%a7)
ret i32%bf
}
define internal fastcc i8*@_SMLLLN10TermFormat20formatBtvEnvWithTypeE_765(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
n:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%f,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%l,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%c,align 8
%k=load i8*,i8**%f,align 8
br label%l
l:
%m=phi i8*[%k,%i],[%a,%n]
%o=phi i8*[%j,%i],[%b,%n]
%p=getelementptr inbounds i8,i8*%m,i64 12
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=add i32%r,-1
%t=sub i32 0,%r
%u=and i32%s,%t
%v=bitcast i8*%o to i8**
%w=load i8*,i8**%v,align 8
%x=bitcast i8*%w to i8**
%y=load i8*,i8**%x,align 8
%z=getelementptr inbounds i8,i8*%w,i64 8
%A=bitcast i8*%z to i8**
%B=load i8*,i8**%A,align 8
store i8*%B,i8**%c,align 8
%C=bitcast i8*%y to i32*
%D=load i32,i32*%C,align 4
switch i32%D,label%E[
i32 0,label%ao
i32 1,label%W
]
E:
store i8*null,i8**%f,align 8
call void@sml_matchcomp_bug()
%F=load i8*,i8**@_SMLZ5Match,align 8
store i8*%F,i8**%c,align 8
%G=call i8*@sml_alloc(i32 inreg 20)#0
%H=getelementptr inbounds i8,i8*%G,i64 -4
%I=bitcast i8*%H to i32*
store i32 1342177296,i32*%I,align 4
store i8*%G,i8**%d,align 8
%J=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%K=bitcast i8*%G to i8**
store i8*%J,i8**%K,align 8
%L=getelementptr inbounds i8,i8*%G,i64 8
%M=bitcast i8*%L to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[57x i8]}>,<{[4x i8],i32,[57x i8]}>*@bL,i64 0,i32 2,i64 0),i8**%M,align 8
%N=getelementptr inbounds i8,i8*%G,i64 16
%O=bitcast i8*%N to i32*
store i32 3,i32*%O,align 4
%P=call i8*@sml_alloc(i32 inreg 60)#0
%Q=getelementptr inbounds i8,i8*%P,i64 -4
%R=bitcast i8*%Q to i32*
store i32 1342177336,i32*%R,align 4
%S=getelementptr inbounds i8,i8*%P,i64 56
%T=bitcast i8*%S to i32*
store i32 1,i32*%T,align 4
%U=load i8*,i8**%d,align 8
%V=bitcast i8*%P to i8**
store i8*%U,i8**%V,align 8
call void@sml_raise(i8*inreg%P)#1
unreachable
W:
%X=getelementptr inbounds i8,i8*%y,i64 4
%Y=bitcast i8*%X to i32*
%Z=load i32,i32*%Y,align 4
%aa=call fastcc i8*@_SMLFN14BoundTypeVarID8toStringE(i32 inreg%Z)
store i8*%aa,i8**%d,align 8
%ab=call i8*@sml_alloc(i32 inreg 20)#0
%ac=getelementptr inbounds i8,i8*%ab,i64 -4
%ad=bitcast i8*%ac to i32*
store i32 1342177296,i32*%ad,align 4
%ae=bitcast i8*%ab to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[9x i8]}>,<{[4x i8],i32,[9x i8]}>*@bJ,i64 0,i32 2,i64 0),i8**%ae,align 8
%af=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ag=getelementptr inbounds i8,i8*%ab,i64 8
%ah=bitcast i8*%ag to i8**
store i8*%af,i8**%ah,align 8
%ai=getelementptr inbounds i8,i8*%ab,i64 16
%aj=bitcast i8*%ai to i32*
store i32 3,i32*%aj,align 4
%ak=call fastcc i8*@_SMLFN6String1_ZE(i8*inreg%ab)
store i8*%ak,i8**%d,align 8
%al=call i8*@sml_alloc(i32 inreg 20)#0
%am=getelementptr inbounds i8,i8*%al,i64 -4
%an=bitcast i8*%am to i32*
store i32 1342177296,i32*%an,align 4
br label%aV
ao:
%ap=getelementptr inbounds i8,i8*%o,i64 8
%aq=bitcast i8*%ap to i32*
%ar=load i32,i32*%aq,align 4
%as=getelementptr inbounds i8,i8*%y,i64 4
%at=bitcast i8*%as to i32*
%au=load i32,i32*%at,align 4
%av=call fastcc i8*@_SMLLLN10TermFormat6tvNameE_522(i8 inreg 97,i32 inreg%au)
store i8*%av,i8**%d,align 8
%aw=call i8*@sml_alloc(i32 inreg 20)#0
%ax=getelementptr inbounds i8,i8*%aw,i64 -4
%ay=bitcast i8*%ax to i32*
store i32 1342177296,i32*%ay,align 4
%az=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aA=bitcast i8*%aw to i8**
store i8*%az,i8**%aA,align 8
%aB=getelementptr inbounds i8,i8*%aw,i64 8
%aC=bitcast i8*%aB to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bI,i64 0,i32 2,i64 0),i8**%aC,align 8
%aD=getelementptr inbounds i8,i8*%aw,i64 16
%aE=bitcast i8*%aD to i32*
store i32 3,i32*%aE,align 4
%aF=call fastcc i8*@_SMLFN6String1_ZE(i8*inreg%aw)
store i8*%aF,i8**%d,align 8
%aG=call fastcc i8*@_SMLFN14BoundTypeVarID8toStringE(i32 inreg%ar)
store i8*%aG,i8**%e,align 8
%aH=call i8*@sml_alloc(i32 inreg 20)#0
%aI=getelementptr inbounds i8,i8*%aH,i64 -4
%aJ=bitcast i8*%aI to i32*
store i32 1342177296,i32*%aJ,align 4
%aK=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aL=bitcast i8*%aH to i8**
store i8*%aK,i8**%aL,align 8
%aM=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aN=getelementptr inbounds i8,i8*%aH,i64 8
%aO=bitcast i8*%aN to i8**
store i8*%aM,i8**%aO,align 8
%aP=getelementptr inbounds i8,i8*%aH,i64 16
%aQ=bitcast i8*%aP to i32*
store i32 3,i32*%aQ,align 4
%aR=call fastcc i8*@_SMLFN6String1_ZE(i8*inreg%aH)
store i8*%aR,i8**%d,align 8
%aS=call i8*@sml_alloc(i32 inreg 20)#0
%aT=getelementptr inbounds i8,i8*%aS,i64 -4
%aU=bitcast i8*%aT to i32*
store i32 1342177296,i32*%aU,align 4
br label%aV
aV:
%aW=phi i8*[%aS,%ao],[%al,%W]
%aX=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aY=bitcast i8*%aW to i8**
store i8*%aX,i8**%aY,align 8
%aZ=getelementptr inbounds i8,i8*%aW,i64 8
%a0=bitcast i8*%aZ to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bK,i64 0,i32 2,i64 0),i8**%a0,align 8
%a1=getelementptr inbounds i8,i8*%aW,i64 16
%a2=bitcast i8*%a1 to i32*
store i32 3,i32*%a2,align 4
%a3=call fastcc i8*@_SMLFN6String1_ZE(i8*inreg%aW)
store i8*%a3,i8**%d,align 8
%a4=getelementptr inbounds i8,i8*%a3,i64 -4
%a5=bitcast i8*%a4 to i32*
%a6=load i32,i32*%a5,align 4
%a7=and i32%a6,268435455
%a8=add nsw i32%a7,-1
%a9=call i8*@sml_alloc(i32 inreg 20)#0
%ba=getelementptr inbounds i8,i8*%a9,i64 -4
%bb=bitcast i8*%ba to i32*
store i32 1342177296,i32*%bb,align 4
store i8*%a9,i8**%e,align 8
%bc=getelementptr inbounds i8,i8*%a9,i64 4
%bd=bitcast i8*%bc to i32*
store i32 0,i32*%bd,align 1
%be=bitcast i8*%a9 to i32*
store i32%a8,i32*%be,align 4
%bf=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bg=getelementptr inbounds i8,i8*%a9,i64 8
%bh=bitcast i8*%bg to i8**
store i8*%bf,i8**%bh,align 8
%bi=getelementptr inbounds i8,i8*%a9,i64 16
%bj=bitcast i8*%bi to i32*
store i32 2,i32*%bj,align 4
%bk=call i8*@sml_alloc(i32 inreg 20)#0
%bl=getelementptr inbounds i8,i8*%bk,i64 -4
%bm=bitcast i8*%bl to i32*
store i32 1342177296,i32*%bm,align 4
store i8*%bk,i8**%d,align 8
%bn=getelementptr inbounds i8,i8*%bk,i64 4
%bo=bitcast i8*%bn to i32*
store i32 0,i32*%bo,align 1
%bp=bitcast i8*%bk to i32*
store i32 6,i32*%bp,align 4
%bq=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%br=getelementptr inbounds i8,i8*%bk,i64 8
%bs=bitcast i8*%br to i8**
store i8*%bq,i8**%bs,align 8
%bt=getelementptr inbounds i8,i8*%bk,i64 16
%bu=bitcast i8*%bt to i32*
store i32 2,i32*%bu,align 4
%bv=call i8*@sml_alloc(i32 inreg 20)#0
%bw=getelementptr inbounds i8,i8*%bv,i64 -4
%bx=bitcast i8*%bw to i32*
store i32 1342177296,i32*%bx,align 4
store i8*%bv,i8**%e,align 8
%by=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bz=bitcast i8*%bv to i8**
store i8*%by,i8**%bz,align 8
%bA=getelementptr inbounds i8,i8*%bv,i64 8
%bB=bitcast i8*%bA to i8**
store i8*null,i8**%bB,align 8
%bC=getelementptr inbounds i8,i8*%bv,i64 16
%bD=bitcast i8*%bC to i32*
store i32 3,i32*%bD,align 4
%bE=load i8*,i8**%c,align 8
%bF=icmp eq i8*%bE,null
br i1%bF,label%bG,label%bH
bG:
ret i8*%bv
bH:
%bI=load i8*,i8**%f,align 8
%bJ=getelementptr inbounds i8,i8*%bI,i64 8
%bK=bitcast i8*%bJ to i32*
%bL=load i32,i32*%bK,align 4
%bM=icmp eq i32%bL,0
br i1%bM,label%bT,label%bN
bN:
%bO=bitcast i8*%bI to i8**
store i8*null,i8**%c,align 8
%bP=sext i32%u to i64
%bQ=getelementptr inbounds i8,i8*%bE,i64%bP
%bR=bitcast i8*%bQ to i8**
%bS=load i8*,i8**%bR,align 8
br label%b6
bT:
%bU=getelementptr inbounds i8,i8*%bI,i64 12
%bV=bitcast i8*%bU to i32*
%bW=load i32,i32*%bV,align 4
%bX=call i8*@sml_alloc(i32 inreg%bW)#0
%bY=getelementptr inbounds i8,i8*%bX,i64 -4
%bZ=bitcast i8*%bY to i32*
store i32%bW,i32*%bZ,align 4
%b0=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%b1=sext i32%u to i64
%b2=getelementptr inbounds i8,i8*%b0,i64%b1
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bX,i8*%b2,i32%bW,i1 false)
%b3=bitcast i8**%f to i8***
%b4=load i8**,i8***%b3,align 8
%b5=load i8*,i8**%e,align 8
br label%b6
b6:
%b7=phi i8*[%b5,%bT],[%bv,%bN]
%b8=phi i8**[%b4,%bT],[%bO,%bN]
%b9=phi i8*[%bX,%bT],[%bS,%bN]
store i8*%b9,i8**%c,align 8
%ca=load i8*,i8**%b8,align 8
%cb=getelementptr inbounds i8,i8*%ca,i64 16
%cc=bitcast i8*%cb to i8*(i8*,i8*)**
%cd=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%cc,align 8
store i8*null,i8**%f,align 8
%ce=bitcast i8**%b8 to i8***
%cf=load i8**,i8***%ce,align 8
%cg=load i8*,i8**%cf,align 8
store i8*null,i8**%e,align 8
%ch=call fastcc i8*%cd(i8*inreg%cg,i8*inreg%b7)
%ci=getelementptr inbounds i8,i8*%ch,i64 16
%cj=bitcast i8*%ci to i8*(i8*,i8*)**
%ck=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%cj,align 8
%cl=bitcast i8*%ch to i8**
%cm=load i8*,i8**%cl,align 8
%cn=load i8*,i8**%c,align 8
%co=tail call fastcc i8*%ck(i8*inreg%cm,i8*inreg%cn)
ret i8*%co
}
define internal fastcc i8*@_SMLLLN10TermFormat20formatBtvEnvWithTypeE_766(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%k,label%j
j:
call void@sml_check(i32 inreg%h)
br label%k
k:
%l=call fastcc i8*@_SMLFN4List3mapE(i32 inreg 1,i32 inreg 8,i32 inreg 1,i32 inreg 8)
%m=getelementptr inbounds i8,i8*%l,i64 16
%n=bitcast i8*%m to i8*(i8*,i8*)**
%o=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%n,align 8
%p=bitcast i8*%l to i8**
%q=load i8*,i8**%p,align 8
store i8*%q,i8**%f,align 8
%r=load i8*,i8**%d,align 8
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8**
%u=load i8*,i8**%t,align 8
store i8*%u,i8**%e,align 8
%v=getelementptr inbounds i8,i8*%r,i64 24
%w=bitcast i8*%v to i32*
%x=load i32,i32*%w,align 4
%y=getelementptr inbounds i8,i8*%r,i64 28
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=getelementptr inbounds i8,i8*%r,i64 32
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=getelementptr inbounds i8,i8*%r,i64 36
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
%H=call i8*@sml_alloc(i32 inreg 28)#0
%I=getelementptr inbounds i8,i8*%H,i64 -4
%J=bitcast i8*%I to i32*
store i32 1342177304,i32*%J,align 4
store i8*%H,i8**%g,align 8
%K=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%L=bitcast i8*%H to i8**
store i8*%K,i8**%L,align 8
%M=getelementptr inbounds i8,i8*%H,i64 8
%N=bitcast i8*%M to i32*
store i32%x,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%H,i64 12
%P=bitcast i8*%O to i32*
store i32%A,i32*%P,align 4
%Q=getelementptr inbounds i8,i8*%H,i64 16
%R=bitcast i8*%Q to i32*
store i32%D,i32*%R,align 4
%S=getelementptr inbounds i8,i8*%H,i64 20
%T=bitcast i8*%S to i32*
store i32%G,i32*%T,align 4
%U=getelementptr inbounds i8,i8*%H,i64 24
%V=bitcast i8*%U to i32*
store i32 1,i32*%V,align 4
%W=call i8*@sml_alloc(i32 inreg 28)#0
%X=getelementptr inbounds i8,i8*%W,i64 -4
%Y=bitcast i8*%X to i32*
store i32 1342177304,i32*%Y,align 4
%Z=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%aa=bitcast i8*%W to i8**
store i8*%Z,i8**%aa,align 8
%ab=getelementptr inbounds i8,i8*%W,i64 8
%ac=bitcast i8*%ab to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLL6tyvars_754 to void(...)*),void(...)**%ac,align 8
%ad=getelementptr inbounds i8,i8*%W,i64 16
%ae=bitcast i8*%ad to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLL6tyvars_754 to void(...)*),void(...)**%ae,align 8
%af=getelementptr inbounds i8,i8*%W,i64 24
%ag=bitcast i8*%af to i32*
store i32 -2147483647,i32*%ag,align 4
%ah=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%ai=call fastcc i8*%o(i8*inreg%ah,i8*inreg%W)
%aj=getelementptr inbounds i8,i8*%ai,i64 16
%ak=bitcast i8*%aj to i8*(i8*,i8*)**
%al=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ak,align 8
%am=bitcast i8*%ai to i8**
%an=load i8*,i8**%am,align 8
store i8*%an,i8**%e,align 8
%ao=load i8*,i8**%d,align 8
%ap=getelementptr inbounds i8,i8*%ao,i64 24
%aq=bitcast i8*%ap to i32*
%ar=load i32,i32*%aq,align 4
%as=getelementptr inbounds i8,i8*%ao,i64 28
%at=bitcast i8*%as to i32*
%au=load i32,i32*%at,align 4
%av=call fastcc i8*@_SMLFN14BoundTypeVarID3Map10listItemsiE(i32 inreg%ar,i32 inreg%au)
%aw=getelementptr inbounds i8,i8*%av,i64 16
%ax=bitcast i8*%aw to i8*(i8*,i8*)**
%ay=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ax,align 8
%az=bitcast i8*%av to i8**
%aA=load i8*,i8**%az,align 8
%aB=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aC=call fastcc i8*%ay(i8*inreg%aA,i8*inreg%aB)
%aD=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aE=call fastcc i8*%al(i8*inreg%aD,i8*inreg%aC)
store i8*%aE,i8**%c,align 8
%aF=call fastcc i8*@_SMLFN10ListSorter4sortE(i32 inreg 1,i32 inreg 8)
%aG=getelementptr inbounds i8,i8*%aF,i64 16
%aH=bitcast i8*%aG to i8*(i8*,i8*)**
%aI=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aH,align 8
%aJ=bitcast i8*%aF to i8**
%aK=load i8*,i8**%aJ,align 8
%aL=call fastcc i8*%aI(i8*inreg%aK,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bH,i64 0,i32 2)to i8*))
%aM=getelementptr inbounds i8,i8*%aL,i64 16
%aN=bitcast i8*%aM to i8*(i8*,i8*)**
%aO=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aN,align 8
%aP=bitcast i8*%aL to i8**
%aQ=load i8*,i8**%aP,align 8
%aR=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aS=call fastcc i8*%aO(i8*inreg%aQ,i8*inreg%aR)
store i8*%aS,i8**%c,align 8
%aT=call fastcc i8*@_SMLFN15BasicFormatters11format__listE(i32 inreg 1,i32 inreg 8)
%aU=getelementptr inbounds i8,i8*%aT,i64 16
%aV=bitcast i8*%aU to i8*(i8*,i8*)**
%aW=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aV,align 8
%aX=bitcast i8*%aT to i8**
%aY=load i8*,i8**%aX,align 8
store i8*%aY,i8**%f,align 8
%aZ=load i8*,i8**%d,align 8
%a0=getelementptr inbounds i8,i8*%aZ,i64 8
%a1=bitcast i8*%a0 to i8**
%a2=load i8*,i8**%a1,align 8
store i8*%a2,i8**%e,align 8
%a3=getelementptr inbounds i8,i8*%aZ,i64 24
%a4=bitcast i8*%a3 to i32*
%a5=load i32,i32*%a4,align 4
%a6=getelementptr inbounds i8,i8*%aZ,i64 28
%a7=bitcast i8*%a6 to i32*
%a8=load i32,i32*%a7,align 4
%a9=call i8*@sml_alloc(i32 inreg 20)#0
%ba=getelementptr inbounds i8,i8*%a9,i64 -4
%bb=bitcast i8*%ba to i32*
store i32 1342177296,i32*%bb,align 4
store i8*%a9,i8**%g,align 8
%bc=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bd=bitcast i8*%a9 to i8**
store i8*%bc,i8**%bd,align 8
%be=getelementptr inbounds i8,i8*%a9,i64 8
%bf=bitcast i8*%be to i32*
store i32%a5,i32*%bf,align 4
%bg=getelementptr inbounds i8,i8*%a9,i64 12
%bh=bitcast i8*%bg to i32*
store i32%a8,i32*%bh,align 4
%bi=getelementptr inbounds i8,i8*%a9,i64 16
%bj=bitcast i8*%bi to i32*
store i32 1,i32*%bj,align 4
%bk=call i8*@sml_alloc(i32 inreg 28)#0
%bl=getelementptr inbounds i8,i8*%bk,i64 -4
%bm=bitcast i8*%bl to i32*
store i32 1342177304,i32*%bm,align 4
store i8*%bk,i8**%e,align 8
%bn=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%bo=bitcast i8*%bk to i8**
store i8*%bn,i8**%bo,align 8
%bp=getelementptr inbounds i8,i8*%bk,i64 8
%bq=bitcast i8*%bp to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat20formatBtvEnvWithTypeE_765 to void(...)*),void(...)**%bq,align 8
%br=getelementptr inbounds i8,i8*%bk,i64 16
%bs=bitcast i8*%br to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat20formatBtvEnvWithTypeE_765 to void(...)*),void(...)**%bs,align 8
%bt=getelementptr inbounds i8,i8*%bk,i64 24
%bu=bitcast i8*%bt to i32*
store i32 -2147483647,i32*%bu,align 4
%bv=bitcast i8**%d to i8***
%bw=load i8**,i8***%bv,align 8
%bx=load i8*,i8**%bw,align 8
store i8*%bx,i8**%d,align 8
%by=call i8*@sml_alloc(i32 inreg 20)#0
%bz=getelementptr inbounds i8,i8*%by,i64 -4
%bA=bitcast i8*%bz to i32*
store i32 1342177296,i32*%bA,align 4
%bB=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bC=bitcast i8*%by to i8**
store i8*%bB,i8**%bC,align 8
%bD=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bE=getelementptr inbounds i8,i8*%by,i64 8
%bF=bitcast i8*%bE to i8**
store i8*%bD,i8**%bF,align 8
%bG=getelementptr inbounds i8,i8*%by,i64 16
%bH=bitcast i8*%bG to i32*
store i32 3,i32*%bH,align 4
%bI=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%bJ=call fastcc i8*%aW(i8*inreg%bI,i8*inreg%by)
%bK=getelementptr inbounds i8,i8*%bJ,i64 16
%bL=bitcast i8*%bK to i8*(i8*,i8*)**
%bM=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bL,align 8
%bN=bitcast i8*%bJ to i8**
%bO=load i8*,i8**%bN,align 8
%bP=load i8*,i8**%c,align 8
%bQ=tail call fastcc i8*%bM(i8*inreg%bO,i8*inreg%bP)
ret i8*%bQ
}
define internal fastcc i8*@_SMLLLN10TermFormat20formatBtvEnvWithTypeE_767(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=getelementptr inbounds i8,i8*%a,i64 16
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%a,i64 20
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=getelementptr inbounds i8,i8*%a,i64 24
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=getelementptr inbounds i8,i8*%a,i64 28
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=call i8*@sml_alloc(i32 inreg 44)#0
%y=getelementptr inbounds i8,i8*%x,i64 -4
%z=bitcast i8*%y to i32*
store i32 1342177320,i32*%z,align 4
store i8*%x,i8**%f,align 8
%A=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%B=bitcast i8*%x to i8**
store i8*%A,i8**%B,align 8
%C=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%D=getelementptr inbounds i8,i8*%x,i64 8
%E=bitcast i8*%D to i8**
store i8*%C,i8**%E,align 8
%F=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%G=getelementptr inbounds i8,i8*%x,i64 16
%H=bitcast i8*%G to i8**
store i8*%F,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%x,i64 24
%J=bitcast i8*%I to i32*
store i32%n,i32*%J,align 4
%K=getelementptr inbounds i8,i8*%x,i64 28
%L=bitcast i8*%K to i32*
store i32%q,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%x,i64 32
%N=bitcast i8*%M to i32*
store i32%t,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%x,i64 36
%P=bitcast i8*%O to i32*
store i32%w,i32*%P,align 4
%Q=getelementptr inbounds i8,i8*%x,i64 40
%R=bitcast i8*%Q to i32*
store i32 7,i32*%R,align 4
%S=call i8*@sml_alloc(i32 inreg 28)#0
%T=getelementptr inbounds i8,i8*%S,i64 -4
%U=bitcast i8*%T to i32*
store i32 1342177304,i32*%U,align 4
%V=load i8*,i8**%f,align 8
%W=bitcast i8*%S to i8**
store i8*%V,i8**%W,align 8
%X=getelementptr inbounds i8,i8*%S,i64 8
%Y=bitcast i8*%X to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat20formatBtvEnvWithTypeE_766 to void(...)*),void(...)**%Y,align 8
%Z=getelementptr inbounds i8,i8*%S,i64 16
%aa=bitcast i8*%Z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat20formatBtvEnvWithTypeE_766 to void(...)*),void(...)**%aa,align 8
%ab=getelementptr inbounds i8,i8*%S,i64 24
%ac=bitcast i8*%ab to i32*
store i32 -2147483647,i32*%ac,align 4
ret i8*%S
}
define internal fastcc i8*@_SMLLLN10TermFormat20formatBtvEnvWithTypeE_768(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=getelementptr inbounds i8,i8*%a,i64 16
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%a,i64 20
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=call i8*@sml_alloc(i32 inreg 36)#0
%s=getelementptr inbounds i8,i8*%r,i64 -4
%t=bitcast i8*%s to i32*
store i32 1342177312,i32*%t,align 4
store i8*%r,i8**%f,align 8
%u=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%v=bitcast i8*%r to i8**
store i8*%u,i8**%v,align 8
%w=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%x=getelementptr inbounds i8,i8*%r,i64 8
%y=bitcast i8*%x to i8**
store i8*%w,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%r,i64 16
%A=bitcast i8*%z to i32*
store i32%n,i32*%A,align 4
%B=getelementptr inbounds i8,i8*%r,i64 20
%C=bitcast i8*%B to i32*
store i32%q,i32*%C,align 4
%D=getelementptr inbounds i8,i8*%r,i64 24
%E=bitcast i8*%D to i32*
store i32%b,i32*%E,align 4
%F=getelementptr inbounds i8,i8*%r,i64 28
%G=bitcast i8*%F to i32*
store i32%c,i32*%G,align 4
%H=getelementptr inbounds i8,i8*%r,i64 32
%I=bitcast i8*%H to i32*
store i32 3,i32*%I,align 4
%J=call i8*@sml_alloc(i32 inreg 28)#0
%K=getelementptr inbounds i8,i8*%J,i64 -4
%L=bitcast i8*%K to i32*
store i32 1342177304,i32*%L,align 4
%M=load i8*,i8**%f,align 8
%N=bitcast i8*%J to i8**
store i8*%M,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%J,i64 8
%P=bitcast i8*%O to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat20formatBtvEnvWithTypeE_767 to void(...)*),void(...)**%P,align 8
%Q=getelementptr inbounds i8,i8*%J,i64 16
%R=bitcast i8*%Q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat20formatBtvEnvWithTypeE_767 to void(...)*),void(...)**%R,align 8
%S=getelementptr inbounds i8,i8*%J,i64 24
%T=bitcast i8*%S to i32*
store i32 -2147483647,i32*%T,align 4
ret i8*%J
}
define internal fastcc i8*@_SMLLLN10TermFormat20formatBtvEnvWithTypeE_769(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLLLN10TermFormat20formatBtvEnvWithTypeE_768(i8*inreg%m,i32 inreg%p,i32 inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%c,align 8
%A=tail call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
ret i8*%A
}
define internal fastcc i8*@_SMLLLN10TermFormat20formatBtvEnvWithTypeE_770(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%e,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i32*
%k=load i32,i32*%j,align 4
%l=getelementptr inbounds i8,i8*%a,i64 12
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=call i8*@sml_alloc(i32 inreg 28)#0
%p=getelementptr inbounds i8,i8*%o,i64 -4
%q=bitcast i8*%p to i32*
store i32 1342177304,i32*%q,align 4
store i8*%o,i8**%f,align 8
%r=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%s=bitcast i8*%o to i8**
store i8*%r,i8**%s,align 8
%t=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%u=getelementptr inbounds i8,i8*%o,i64 8
%v=bitcast i8*%u to i8**
store i8*%t,i8**%v,align 8
%w=getelementptr inbounds i8,i8*%o,i64 16
%x=bitcast i8*%w to i32*
store i32%k,i32*%x,align 4
%y=getelementptr inbounds i8,i8*%o,i64 20
%z=bitcast i8*%y to i32*
store i32%n,i32*%z,align 4
%A=getelementptr inbounds i8,i8*%o,i64 24
%B=bitcast i8*%A to i32*
store i32 3,i32*%B,align 4
%C=call i8*@sml_alloc(i32 inreg 28)#0
%D=getelementptr inbounds i8,i8*%C,i64 -4
%E=bitcast i8*%D to i32*
store i32 1342177304,i32*%E,align 4
%F=load i8*,i8**%f,align 8
%G=bitcast i8*%C to i8**
store i8*%F,i8**%G,align 8
%H=getelementptr inbounds i8,i8*%C,i64 8
%I=bitcast i8*%H to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLLN10TermFormat20formatBtvEnvWithTypeE_768 to void(...)*),void(...)**%I,align 8
%J=getelementptr inbounds i8,i8*%C,i64 16
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLLN10TermFormat20formatBtvEnvWithTypeE_958 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%C,i64 24
%M=bitcast i8*%L to i32*
store i32 -2147483647,i32*%M,align 4
%N=load i8*,i8**%d,align 8
%O=getelementptr inbounds i8,i8*%N,i64 8
%P=bitcast i8*%O to i32*
%Q=load i32,i32*%P,align 4
store i8*null,i8**%d,align 8
%R=getelementptr inbounds i8,i8*%N,i64 12
%S=bitcast i8*%R to i32*
%T=load i32,i32*%S,align 4
%U=call i8*@sml_alloc(i32 inreg 20)#0
%V=getelementptr inbounds i8,i8*%U,i64 -4
%W=bitcast i8*%V to i32*
store i32 1342177296,i32*%W,align 4
store i8*%U,i8**%c,align 8
%X=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%Y=bitcast i8*%U to i8**
store i8*%X,i8**%Y,align 8
%Z=getelementptr inbounds i8,i8*%U,i64 8
%aa=bitcast i8*%Z to i32*
store i32%Q,i32*%aa,align 4
%ab=getelementptr inbounds i8,i8*%U,i64 12
%ac=bitcast i8*%ab to i32*
store i32%T,i32*%ac,align 4
%ad=getelementptr inbounds i8,i8*%U,i64 16
%ae=bitcast i8*%ad to i32*
store i32 1,i32*%ae,align 4
%af=call i8*@sml_alloc(i32 inreg 28)#0
%ag=getelementptr inbounds i8,i8*%af,i64 -4
%ah=bitcast i8*%ag to i32*
store i32 1342177304,i32*%ah,align 4
%ai=load i8*,i8**%c,align 8
%aj=bitcast i8*%af to i8**
store i8*%ai,i8**%aj,align 8
%ak=getelementptr inbounds i8,i8*%af,i64 8
%al=bitcast i8*%ak to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat20formatBtvEnvWithTypeE_769 to void(...)*),void(...)**%al,align 8
%am=getelementptr inbounds i8,i8*%af,i64 16
%an=bitcast i8*%am to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat20formatBtvEnvWithTypeE_769 to void(...)*),void(...)**%an,align 8
%ao=getelementptr inbounds i8,i8*%af,i64 24
%ap=bitcast i8*%ao to i32*
store i32 -2147483647,i32*%ap,align 4
ret i8*%af
}
define internal fastcc i8*@_SMLLLN10TermFormat20formatBtvEnvWithTypeE_771(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat20formatBtvEnvWithTypeE_770 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat20formatBtvEnvWithTypeE_770 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6begin__E_772(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6begin__E_774(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6begin__E_777(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=getelementptr inbounds i8,i8*%h,i64 16
%k=bitcast i8*%j to i8*(i8*,i8*)**
%l=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%k,align 8
%m=bitcast i8*%h to i8**
%n=load i8*,i8**%m,align 8
%o=tail call fastcc i8*%l(i8*inreg%n,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,i8*,i32}>,<{[4x i8],i32,i8*,i8*,i32}>*@bO,i64 0,i32 2)to i8*))
ret i8*%o
}
define fastcc i8*@_SMLFN10TermFormat10FormatComb6begin__E(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
ret i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bP,i64 0,i32 2)to i8*)
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb4end__E_781(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=bitcast i8*%h to i8**
%k=load i8*,i8**%j,align 8
%l=getelementptr inbounds i8,i8*%h,i64 8
%m=bitcast i8*%l to i8**
%n=load i8*,i8**%m,align 8
%o=getelementptr inbounds i8,i8*%n,i64 16
%p=bitcast i8*%o to i8*(i8*,i8*)**
%q=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%p,align 8
%r=bitcast i8*%n to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%b,align 8
%t=getelementptr inbounds i8,i8*%k,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%k to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
%A=tail call fastcc i8*%q(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define fastcc i8*@_SMLFN10TermFormat10FormatComb4end__E(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
ret i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bR,i64 0,i32 2)to i8*)
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb4textE_785(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=bitcast i8**%d to i8***
%m=load i8**,i8***%l,align 8
%n=bitcast i8**%m to i8*
br label%o
o:
%p=phi i8*[%n,%k],[%a,%i]
%q=phi i8**[%m,%k],[%j,%i]
%r=load i8*,i8**%q,align 8
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%f,align 8
%x=getelementptr inbounds i8,i8*%p,i64 8
%y=bitcast i8*%x to i8**
%z=load i8*,i8**%y,align 8
%A=getelementptr inbounds i8,i8*%z,i64 -4
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=and i32%C,268435455
%E=add nsw i32%D,-1
store i8*%z,i8**%d,align 8
%F=call i8*@sml_alloc(i32 inreg 20)#0
%G=getelementptr inbounds i8,i8*%F,i64 -4
%H=bitcast i8*%G to i32*
store i32 1342177296,i32*%H,align 4
store i8*%F,i8**%e,align 8
%I=getelementptr inbounds i8,i8*%F,i64 4
%J=bitcast i8*%I to i32*
store i32 0,i32*%J,align 1
%K=bitcast i8*%F to i32*
store i32%E,i32*%K,align 4
%L=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%M=getelementptr inbounds i8,i8*%F,i64 8
%N=bitcast i8*%M to i8**
store i8*%L,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%F,i64 16
%P=bitcast i8*%O to i32*
store i32 2,i32*%P,align 4
%Q=call i8*@sml_alloc(i32 inreg 20)#0
%R=getelementptr inbounds i8,i8*%Q,i64 -4
%S=bitcast i8*%R to i32*
store i32 1342177296,i32*%S,align 4
store i8*%Q,i8**%d,align 8
%T=getelementptr inbounds i8,i8*%Q,i64 4
%U=bitcast i8*%T to i32*
store i32 0,i32*%U,align 1
%V=bitcast i8*%Q to i32*
store i32 6,i32*%V,align 4
%W=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%X=getelementptr inbounds i8,i8*%Q,i64 8
%Y=bitcast i8*%X to i8**
store i8*%W,i8**%Y,align 8
%Z=getelementptr inbounds i8,i8*%Q,i64 16
%aa=bitcast i8*%Z to i32*
store i32 2,i32*%aa,align 4
%ab=call i8*@sml_alloc(i32 inreg 20)#0
%ac=getelementptr inbounds i8,i8*%ab,i64 -4
%ad=bitcast i8*%ac to i32*
store i32 1342177296,i32*%ad,align 4
%ae=load i8*,i8**%d,align 8
%af=bitcast i8*%ab to i8**
store i8*%ae,i8**%af,align 8
%ag=load i8*,i8**%c,align 8
%ah=getelementptr inbounds i8,i8*%ab,i64 8
%ai=bitcast i8*%ah to i8**
store i8*%ag,i8**%ai,align 8
%aj=getelementptr inbounds i8,i8*%ab,i64 16
%ak=bitcast i8*%aj to i32*
store i32 3,i32*%ak,align 4
%al=load i8*,i8**%f,align 8
%am=tail call fastcc i8*%u(i8*inreg%al,i8*inreg%ab)
ret i8*%am
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb4textE_786(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8**
br label%p
l:
call void@sml_check(i32 inreg%h)
%m=load i8*,i8**%d,align 8
%n=bitcast i8**%c to i8***
%o=load i8**,i8***%n,align 8
br label%p
p:
%q=phi i8**[%o,%l],[%k,%j]
%r=phi i8*[%m,%l],[%b,%j]
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%f,align 8
%x=load i8*,i8**%q,align 8
store i8*%x,i8**%d,align 8
%y=getelementptr inbounds i8*,i8**%q,i64 2
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%e,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%g,align 8
%D=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%E=bitcast i8*%A to i8**
store i8*%D,i8**%E,align 8
%F=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%G=getelementptr inbounds i8,i8*%A,i64 8
%H=bitcast i8*%G to i8**
store i8*%F,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%A,i64 16
%J=bitcast i8*%I to i32*
store i32 3,i32*%J,align 4
%K=call i8*@sml_alloc(i32 inreg 28)#0
%L=getelementptr inbounds i8,i8*%K,i64 -4
%M=bitcast i8*%L to i32*
store i32 1342177304,i32*%M,align 4
store i8*%K,i8**%d,align 8
%N=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%O=bitcast i8*%K to i8**
store i8*%N,i8**%O,align 8
%P=getelementptr inbounds i8,i8*%K,i64 8
%Q=bitcast i8*%P to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb4textE_785 to void(...)*),void(...)**%Q,align 8
%R=getelementptr inbounds i8,i8*%K,i64 16
%S=bitcast i8*%R to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb4textE_785 to void(...)*),void(...)**%S,align 8
%T=getelementptr inbounds i8,i8*%K,i64 24
%U=bitcast i8*%T to i32*
store i32 -2147483647,i32*%U,align 4
%V=load i8*,i8**%c,align 8
%W=getelementptr inbounds i8,i8*%V,i64 8
%X=bitcast i8*%W to i8**
%Y=load i8*,i8**%X,align 8
store i8*%Y,i8**%c,align 8
%Z=call i8*@sml_alloc(i32 inreg 20)#0
%aa=getelementptr inbounds i8,i8*%Z,i64 -4
%ab=bitcast i8*%aa to i32*
store i32 1342177296,i32*%ab,align 4
%ac=load i8*,i8**%d,align 8
%ad=bitcast i8*%Z to i8**
store i8*%ac,i8**%ad,align 8
%ae=load i8*,i8**%c,align 8
%af=getelementptr inbounds i8,i8*%Z,i64 8
%ag=bitcast i8*%af to i8**
store i8*%ae,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%Z,i64 16
%ai=bitcast i8*%ah to i32*
store i32 3,i32*%ai,align 4
%aj=load i8*,i8**%f,align 8
%ak=tail call fastcc i8*%u(i8*inreg%aj,i8*inreg%Z)
ret i8*%ak
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb4textE_787(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
store i8*%l,i8**%f,align 8
%o=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%r=getelementptr inbounds i8,i8*%l,i64 8
%s=bitcast i8*%r to i8**
store i8*%q,i8**%s,align 8
%t=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%u=getelementptr inbounds i8,i8*%l,i64 16
%v=bitcast i8*%u to i8**
store i8*%t,i8**%v,align 8
%w=getelementptr inbounds i8,i8*%l,i64 24
%x=bitcast i8*%w to i32*
store i32 7,i32*%x,align 4
%y=call i8*@sml_alloc(i32 inreg 28)#0
%z=getelementptr inbounds i8,i8*%y,i64 -4
%A=bitcast i8*%z to i32*
store i32 1342177304,i32*%A,align 4
%B=load i8*,i8**%f,align 8
%C=bitcast i8*%y to i8**
store i8*%B,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%y,i64 8
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb4textE_786 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%y,i64 16
%G=bitcast i8*%F to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb4textE_786 to void(...)*),void(...)**%G,align 8
%H=getelementptr inbounds i8,i8*%y,i64 24
%I=bitcast i8*%H to i32*
store i32 1,i32*%I,align 4
ret i8*%y
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb4textE_788(i8*inreg%a)#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i8**
%f=load i8*,i8**%e,align 8
store i8*%f,i8**%b,align 8
%g=getelementptr inbounds i8,i8*%a,i64 8
%h=bitcast i8*%g to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%c,align 8
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i8**
store i8*%o,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%j,i64 16
%s=bitcast i8*%r to i32*
store i32 3,i32*%s,align 4
%t=call i8*@sml_alloc(i32 inreg 28)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177304,i32*%v,align 4
%w=load i8*,i8**%d,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb4textE_787 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%t,i64 16
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb4textE_787 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%t,i64 24
%D=bitcast i8*%C to i32*
store i32 -2147483647,i32*%D,align 4
ret i8*%t
}
define fastcc i8*@_SMLFN10TermFormat10FormatComb4textE(i32 inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d)#4 gc"smlsharp"{
ret i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bT,i64 0,i32 2)to i8*)
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb5spaceE_792(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%l
i:
call void@sml_check(i32 inreg%e)
%j=bitcast i8**%d to i8***
%k=load i8**,i8***%j,align 8
br label%l
l:
%m=phi i8**[%k,%i],[%h,%g]
%n=load i8*,i8**%m,align 8
%o=getelementptr inbounds i8,i8*%n,i64 16
%p=bitcast i8*%o to i8*(i8*,i8*)**
%q=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%p,align 8
%r=bitcast i8*%n to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%d,align 8
%t=call i8*@sml_alloc(i32 inreg 20)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177296,i32*%v,align 4
%w=bitcast i8*%t to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@e,i64 0,i32 2)to i8*),i8**%w,align 8
%x=load i8*,i8**%c,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to i8**
store i8*%x,i8**%z,align 8
%A=getelementptr inbounds i8,i8*%t,i64 16
%B=bitcast i8*%A to i32*
store i32 3,i32*%B,align 4
%C=load i8*,i8**%d,align 8
%D=tail call fastcc i8*%q(i8*inreg%C,i8*inreg%t)
ret i8*%D
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb5spaceE_793(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=load i8*,i8**%d,align 8
%m=bitcast i8**%c to i8***
%n=load i8**,i8***%m,align 8
br label%o
o:
%p=phi i8**[%n,%k],[%j,%i]
%q=phi i8*[%l,%k],[%b,%i]
%r=getelementptr inbounds i8,i8*%q,i64 16
%s=bitcast i8*%r to i8*(i8*,i8*)**
%t=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%s,align 8
%u=bitcast i8*%q to i8**
%v=load i8*,i8**%u,align 8
store i8*%v,i8**%e,align 8
%w=load i8*,i8**%p,align 8
store i8*%w,i8**%d,align 8
%x=call i8*@sml_alloc(i32 inreg 12)#0
%y=getelementptr inbounds i8,i8*%x,i64 -4
%z=bitcast i8*%y to i32*
store i32 1342177288,i32*%z,align 4
store i8*%x,i8**%f,align 8
%A=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%B=bitcast i8*%x to i8**
store i8*%A,i8**%B,align 8
%C=getelementptr inbounds i8,i8*%x,i64 8
%D=bitcast i8*%C to i32*
store i32 1,i32*%D,align 4
%E=call i8*@sml_alloc(i32 inreg 28)#0
%F=getelementptr inbounds i8,i8*%E,i64 -4
%G=bitcast i8*%F to i32*
store i32 1342177304,i32*%G,align 4
store i8*%E,i8**%d,align 8
%H=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%I=bitcast i8*%E to i8**
store i8*%H,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%E,i64 8
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb5spaceE_792 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%E,i64 16
%M=bitcast i8*%L to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb5spaceE_792 to void(...)*),void(...)**%M,align 8
%N=getelementptr inbounds i8,i8*%E,i64 24
%O=bitcast i8*%N to i32*
store i32 -2147483647,i32*%O,align 4
%P=load i8*,i8**%c,align 8
%Q=getelementptr inbounds i8,i8*%P,i64 8
%R=bitcast i8*%Q to i8**
%S=load i8*,i8**%R,align 8
store i8*%S,i8**%c,align 8
%T=call i8*@sml_alloc(i32 inreg 20)#0
%U=getelementptr inbounds i8,i8*%T,i64 -4
%V=bitcast i8*%U to i32*
store i32 1342177296,i32*%V,align 4
%W=load i8*,i8**%d,align 8
%X=bitcast i8*%T to i8**
store i8*%W,i8**%X,align 8
%Y=load i8*,i8**%c,align 8
%Z=getelementptr inbounds i8,i8*%T,i64 8
%aa=bitcast i8*%Z to i8**
store i8*%Y,i8**%aa,align 8
%ab=getelementptr inbounds i8,i8*%T,i64 16
%ac=bitcast i8*%ab to i32*
store i32 3,i32*%ac,align 4
%ad=load i8*,i8**%e,align 8
%ae=tail call fastcc i8*%t(i8*inreg%ad,i8*inreg%T)
ret i8*%ae
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb5spaceE_794(i8*inreg%a)#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i8**
%f=load i8*,i8**%e,align 8
store i8*%f,i8**%b,align 8
%g=getelementptr inbounds i8,i8*%a,i64 8
%h=bitcast i8*%g to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%c,align 8
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i8**
store i8*%o,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%j,i64 16
%s=bitcast i8*%r to i32*
store i32 3,i32*%s,align 4
%t=call i8*@sml_alloc(i32 inreg 28)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177304,i32*%v,align 4
%w=load i8*,i8**%d,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb5spaceE_793 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%t,i64 16
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb5spaceE_793 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%t,i64 24
%D=bitcast i8*%C to i32*
store i32 1,i32*%D,align 4
ret i8*%t
}
define fastcc i8*@_SMLFN10TermFormat10FormatComb5spaceE(i32 inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d)#4 gc"smlsharp"{
ret i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bV,i64 0,i32 2)to i8*)
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6dspaceE_798(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%l
i:
call void@sml_check(i32 inreg%e)
%j=bitcast i8**%d to i8***
%k=load i8**,i8***%j,align 8
br label%l
l:
%m=phi i8**[%k,%i],[%h,%g]
%n=load i8*,i8**%m,align 8
%o=getelementptr inbounds i8,i8*%n,i64 16
%p=bitcast i8*%o to i8*(i8*,i8*)**
%q=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%p,align 8
%r=bitcast i8*%n to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%d,align 8
%t=call i8*@sml_alloc(i32 inreg 20)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177296,i32*%v,align 4
%w=bitcast i8*%t to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@i,i64 0,i32 2)to i8*),i8**%w,align 8
%x=load i8*,i8**%c,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to i8**
store i8*%x,i8**%z,align 8
%A=getelementptr inbounds i8,i8*%t,i64 16
%B=bitcast i8*%A to i32*
store i32 3,i32*%B,align 4
%C=load i8*,i8**%d,align 8
%D=tail call fastcc i8*%q(i8*inreg%C,i8*inreg%t)
ret i8*%D
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6dspaceE_799(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=load i8*,i8**%d,align 8
%m=bitcast i8**%c to i8***
%n=load i8**,i8***%m,align 8
br label%o
o:
%p=phi i8**[%n,%k],[%j,%i]
%q=phi i8*[%l,%k],[%b,%i]
%r=getelementptr inbounds i8,i8*%q,i64 16
%s=bitcast i8*%r to i8*(i8*,i8*)**
%t=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%s,align 8
%u=bitcast i8*%q to i8**
%v=load i8*,i8**%u,align 8
store i8*%v,i8**%e,align 8
%w=load i8*,i8**%p,align 8
store i8*%w,i8**%d,align 8
%x=call i8*@sml_alloc(i32 inreg 12)#0
%y=getelementptr inbounds i8,i8*%x,i64 -4
%z=bitcast i8*%y to i32*
store i32 1342177288,i32*%z,align 4
store i8*%x,i8**%f,align 8
%A=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%B=bitcast i8*%x to i8**
store i8*%A,i8**%B,align 8
%C=getelementptr inbounds i8,i8*%x,i64 8
%D=bitcast i8*%C to i32*
store i32 1,i32*%D,align 4
%E=call i8*@sml_alloc(i32 inreg 28)#0
%F=getelementptr inbounds i8,i8*%E,i64 -4
%G=bitcast i8*%F to i32*
store i32 1342177304,i32*%G,align 4
store i8*%E,i8**%d,align 8
%H=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%I=bitcast i8*%E to i8**
store i8*%H,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%E,i64 8
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6dspaceE_798 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%E,i64 16
%M=bitcast i8*%L to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6dspaceE_798 to void(...)*),void(...)**%M,align 8
%N=getelementptr inbounds i8,i8*%E,i64 24
%O=bitcast i8*%N to i32*
store i32 -2147483647,i32*%O,align 4
%P=load i8*,i8**%c,align 8
%Q=getelementptr inbounds i8,i8*%P,i64 8
%R=bitcast i8*%Q to i8**
%S=load i8*,i8**%R,align 8
store i8*%S,i8**%c,align 8
%T=call i8*@sml_alloc(i32 inreg 20)#0
%U=getelementptr inbounds i8,i8*%T,i64 -4
%V=bitcast i8*%U to i32*
store i32 1342177296,i32*%V,align 4
%W=load i8*,i8**%d,align 8
%X=bitcast i8*%T to i8**
store i8*%W,i8**%X,align 8
%Y=load i8*,i8**%c,align 8
%Z=getelementptr inbounds i8,i8*%T,i64 8
%aa=bitcast i8*%Z to i8**
store i8*%Y,i8**%aa,align 8
%ab=getelementptr inbounds i8,i8*%T,i64 16
%ac=bitcast i8*%ab to i32*
store i32 3,i32*%ac,align 4
%ad=load i8*,i8**%e,align 8
%ae=tail call fastcc i8*%t(i8*inreg%ad,i8*inreg%T)
ret i8*%ae
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6dspaceE_800(i8*inreg%a)#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i8**
%f=load i8*,i8**%e,align 8
store i8*%f,i8**%b,align 8
%g=getelementptr inbounds i8,i8*%a,i64 8
%h=bitcast i8*%g to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%c,align 8
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i8**
store i8*%o,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%j,i64 16
%s=bitcast i8*%r to i32*
store i32 3,i32*%s,align 4
%t=call i8*@sml_alloc(i32 inreg 28)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177304,i32*%v,align 4
%w=load i8*,i8**%d,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6dspaceE_799 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%t,i64 16
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6dspaceE_799 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%t,i64 24
%D=bitcast i8*%C to i32*
store i32 1,i32*%D,align 4
ret i8*%t
}
define fastcc i8*@_SMLFN10TermFormat10FormatComb6dspaceE(i32 inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d)#4 gc"smlsharp"{
ret i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bX,i64 0,i32 2)to i8*)
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb7newlineE_805(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%l
i:
call void@sml_check(i32 inreg%e)
%j=bitcast i8**%d to i8***
%k=load i8**,i8***%j,align 8
br label%l
l:
%m=phi i8**[%k,%i],[%h,%g]
%n=load i8*,i8**%m,align 8
%o=getelementptr inbounds i8,i8*%n,i64 16
%p=bitcast i8*%o to i8*(i8*,i8*)**
%q=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%p,align 8
%r=bitcast i8*%n to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%d,align 8
%t=call i8*@sml_alloc(i32 inreg 20)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177296,i32*%v,align 4
%w=bitcast i8*%t to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i32}>,<{[4x i8],i32,i32,[4x i8],i32}>*@bZ,i64 0,i32 2)to i8*),i8**%w,align 8
%x=load i8*,i8**%c,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to i8**
store i8*%x,i8**%z,align 8
%A=getelementptr inbounds i8,i8*%t,i64 16
%B=bitcast i8*%A to i32*
store i32 3,i32*%B,align 4
%C=load i8*,i8**%d,align 8
%D=tail call fastcc i8*%q(i8*inreg%C,i8*inreg%t)
ret i8*%D
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb7newlineE_806(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=load i8*,i8**%d,align 8
%m=bitcast i8**%c to i8***
%n=load i8**,i8***%m,align 8
br label%o
o:
%p=phi i8**[%n,%k],[%j,%i]
%q=phi i8*[%l,%k],[%b,%i]
%r=getelementptr inbounds i8,i8*%q,i64 16
%s=bitcast i8*%r to i8*(i8*,i8*)**
%t=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%s,align 8
%u=bitcast i8*%q to i8**
%v=load i8*,i8**%u,align 8
store i8*%v,i8**%e,align 8
%w=load i8*,i8**%p,align 8
store i8*%w,i8**%d,align 8
%x=call i8*@sml_alloc(i32 inreg 12)#0
%y=getelementptr inbounds i8,i8*%x,i64 -4
%z=bitcast i8*%y to i32*
store i32 1342177288,i32*%z,align 4
store i8*%x,i8**%f,align 8
%A=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%B=bitcast i8*%x to i8**
store i8*%A,i8**%B,align 8
%C=getelementptr inbounds i8,i8*%x,i64 8
%D=bitcast i8*%C to i32*
store i32 1,i32*%D,align 4
%E=call i8*@sml_alloc(i32 inreg 28)#0
%F=getelementptr inbounds i8,i8*%E,i64 -4
%G=bitcast i8*%F to i32*
store i32 1342177304,i32*%G,align 4
store i8*%E,i8**%d,align 8
%H=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%I=bitcast i8*%E to i8**
store i8*%H,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%E,i64 8
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb7newlineE_805 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%E,i64 16
%M=bitcast i8*%L to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb7newlineE_805 to void(...)*),void(...)**%M,align 8
%N=getelementptr inbounds i8,i8*%E,i64 24
%O=bitcast i8*%N to i32*
store i32 -2147483647,i32*%O,align 4
%P=load i8*,i8**%c,align 8
%Q=getelementptr inbounds i8,i8*%P,i64 8
%R=bitcast i8*%Q to i8**
%S=load i8*,i8**%R,align 8
store i8*%S,i8**%c,align 8
%T=call i8*@sml_alloc(i32 inreg 20)#0
%U=getelementptr inbounds i8,i8*%T,i64 -4
%V=bitcast i8*%U to i32*
store i32 1342177296,i32*%V,align 4
%W=load i8*,i8**%d,align 8
%X=bitcast i8*%T to i8**
store i8*%W,i8**%X,align 8
%Y=load i8*,i8**%c,align 8
%Z=getelementptr inbounds i8,i8*%T,i64 8
%aa=bitcast i8*%Z to i8**
store i8*%Y,i8**%aa,align 8
%ab=getelementptr inbounds i8,i8*%T,i64 16
%ac=bitcast i8*%ab to i32*
store i32 3,i32*%ac,align 4
%ad=load i8*,i8**%e,align 8
%ae=tail call fastcc i8*%t(i8*inreg%ad,i8*inreg%T)
ret i8*%ae
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb7newlineE_807(i8*inreg%a)#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i8**
%f=load i8*,i8**%e,align 8
store i8*%f,i8**%b,align 8
%g=getelementptr inbounds i8,i8*%a,i64 8
%h=bitcast i8*%g to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%c,align 8
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i8**
store i8*%o,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%j,i64 16
%s=bitcast i8*%r to i32*
store i32 3,i32*%s,align 4
%t=call i8*@sml_alloc(i32 inreg 28)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177304,i32*%v,align 4
%w=load i8*,i8**%d,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb7newlineE_806 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%t,i64 16
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb7newlineE_806 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%t,i64 24
%D=bitcast i8*%C to i32*
store i32 1,i32*%D,align 4
ret i8*%t
}
define fastcc i8*@_SMLFN10TermFormat10FormatComb7newlineE(i32 inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d)#4 gc"smlsharp"{
ret i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@b0,i64 0,i32 2)to i8*)
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb1_DE_811(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=bitcast i8**%d to i8***
%m=load i8**,i8***%l,align 8
%n=bitcast i8**%m to i8*
br label%o
o:
%p=phi i8*[%n,%k],[%a,%i]
%q=phi i8**[%m,%k],[%j,%i]
%r=load i8*,i8**%q,align 8
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%e,align 8
%x=getelementptr inbounds i8,i8*%p,i64 8
%y=bitcast i8*%x to i8**
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%d,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%f,align 8
%D=getelementptr inbounds i8,i8*%A,i64 4
%E=bitcast i8*%D to i32*
store i32 0,i32*%E,align 1
%F=bitcast i8*%A to i32*
store i32 4,i32*%F,align 4
%G=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%H=getelementptr inbounds i8,i8*%A,i64 8
%I=bitcast i8*%H to i8**
store i8*%G,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%A,i64 16
%K=bitcast i8*%J to i32*
store i32 2,i32*%K,align 4
%L=call i8*@sml_alloc(i32 inreg 20)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32 1342177296,i32*%N,align 4
%O=load i8*,i8**%f,align 8
%P=bitcast i8*%L to i8**
store i8*%O,i8**%P,align 8
%Q=load i8*,i8**%c,align 8
%R=getelementptr inbounds i8,i8*%L,i64 8
%S=bitcast i8*%R to i8**
store i8*%Q,i8**%S,align 8
%T=getelementptr inbounds i8,i8*%L,i64 16
%U=bitcast i8*%T to i32*
store i32 3,i32*%U,align 4
%V=load i8*,i8**%e,align 8
%W=tail call fastcc i8*%u(i8*inreg%V,i8*inreg%L)
ret i8*%W
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb1_DE_812(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8**
br label%p
l:
call void@sml_check(i32 inreg%h)
%m=load i8*,i8**%d,align 8
%n=bitcast i8**%c to i8***
%o=load i8**,i8***%n,align 8
br label%p
p:
%q=phi i8**[%o,%l],[%k,%j]
%r=phi i8*[%m,%l],[%b,%j]
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%f,align 8
%x=load i8*,i8**%q,align 8
store i8*%x,i8**%d,align 8
%y=getelementptr inbounds i8*,i8**%q,i64 2
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%e,align 8
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%g,align 8
%D=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%E=bitcast i8*%A to i8**
store i8*%D,i8**%E,align 8
%F=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%G=getelementptr inbounds i8,i8*%A,i64 8
%H=bitcast i8*%G to i8**
store i8*%F,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%A,i64 16
%J=bitcast i8*%I to i32*
store i32 3,i32*%J,align 4
%K=call i8*@sml_alloc(i32 inreg 28)#0
%L=getelementptr inbounds i8,i8*%K,i64 -4
%M=bitcast i8*%L to i32*
store i32 1342177304,i32*%M,align 4
store i8*%K,i8**%d,align 8
%N=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%O=bitcast i8*%K to i8**
store i8*%N,i8**%O,align 8
%P=getelementptr inbounds i8,i8*%K,i64 8
%Q=bitcast i8*%P to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb1_DE_811 to void(...)*),void(...)**%Q,align 8
%R=getelementptr inbounds i8,i8*%K,i64 16
%S=bitcast i8*%R to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb1_DE_811 to void(...)*),void(...)**%S,align 8
%T=getelementptr inbounds i8,i8*%K,i64 24
%U=bitcast i8*%T to i32*
store i32 -2147483647,i32*%U,align 4
%V=load i8*,i8**%c,align 8
%W=getelementptr inbounds i8,i8*%V,i64 8
%X=bitcast i8*%W to i8**
%Y=load i8*,i8**%X,align 8
store i8*%Y,i8**%c,align 8
%Z=call i8*@sml_alloc(i32 inreg 20)#0
%aa=getelementptr inbounds i8,i8*%Z,i64 -4
%ab=bitcast i8*%aa to i32*
store i32 1342177296,i32*%ab,align 4
%ac=load i8*,i8**%d,align 8
%ad=bitcast i8*%Z to i8**
store i8*%ac,i8**%ad,align 8
%ae=load i8*,i8**%c,align 8
%af=getelementptr inbounds i8,i8*%Z,i64 8
%ag=bitcast i8*%af to i8**
store i8*%ae,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%Z,i64 16
%ai=bitcast i8*%ah to i32*
store i32 3,i32*%ai,align 4
%aj=load i8*,i8**%f,align 8
%ak=tail call fastcc i8*%u(i8*inreg%aj,i8*inreg%Z)
ret i8*%ak
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb1_DE_813(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
store i8*%l,i8**%f,align 8
%o=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%r=getelementptr inbounds i8,i8*%l,i64 8
%s=bitcast i8*%r to i8**
store i8*%q,i8**%s,align 8
%t=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%u=getelementptr inbounds i8,i8*%l,i64 16
%v=bitcast i8*%u to i8**
store i8*%t,i8**%v,align 8
%w=getelementptr inbounds i8,i8*%l,i64 24
%x=bitcast i8*%w to i32*
store i32 7,i32*%x,align 4
%y=call i8*@sml_alloc(i32 inreg 28)#0
%z=getelementptr inbounds i8,i8*%y,i64 -4
%A=bitcast i8*%z to i32*
store i32 1342177304,i32*%A,align 4
%B=load i8*,i8**%f,align 8
%C=bitcast i8*%y to i8**
store i8*%B,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%y,i64 8
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb1_DE_812 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%y,i64 16
%G=bitcast i8*%F to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb1_DE_812 to void(...)*),void(...)**%G,align 8
%H=getelementptr inbounds i8,i8*%y,i64 24
%I=bitcast i8*%H to i32*
store i32 1,i32*%I,align 4
ret i8*%y
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb1_DE_814(i8*inreg%a)#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i8**
%f=load i8*,i8**%e,align 8
store i8*%f,i8**%b,align 8
%g=getelementptr inbounds i8,i8*%a,i64 8
%h=bitcast i8*%g to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%c,align 8
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i8**
store i8*%o,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%j,i64 16
%s=bitcast i8*%r to i32*
store i32 3,i32*%s,align 4
%t=call i8*@sml_alloc(i32 inreg 28)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177304,i32*%v,align 4
%w=load i8*,i8**%d,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb1_DE_813 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%t,i64 16
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb1_DE_813 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%t,i64 24
%D=bitcast i8*%C to i32*
store i32 -2147483647,i32*%D,align 4
ret i8*%t
}
define fastcc i8*@_SMLFN10TermFormat10FormatComb1_DE(i32 inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d)#4 gc"smlsharp"{
ret i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@b2,i64 0,i32 2)to i8*)
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6guard__E_818(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8**
br label%p
l:
call void@sml_check(i32 inreg%h)
%m=bitcast i8**%d to i8***
%n=load i8**,i8***%m,align 8
%o=bitcast i8**%n to i8*
br label%p
p:
%q=phi i8*[%o,%l],[%a,%j]
%r=phi i8**[%n,%l],[%k,%j]
%s=load i8*,i8**%r,align 8
%t=getelementptr inbounds i8,i8*%s,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*,i8*,i8*,i8*)**
%v=load i8*(i8*,i8*,i8*,i8*,i8*)*,i8*(i8*,i8*,i8*,i8*,i8*)**%u,align 8
%w=bitcast i8*%s to i8**
%x=load i8*,i8**%w,align 8
store i8*%x,i8**%e,align 8
%y=getelementptr inbounds i8,i8*%q,i64 8
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=getelementptr inbounds i8,i8*%q,i64 12
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=getelementptr inbounds i8,i8*%q,i64 16
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
store i8*null,i8**%d,align 8
%H=getelementptr inbounds i8,i8*%q,i64 20
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
%K=call i8*@sml_alloc(i32 inreg 4)#0
%L=bitcast i8*%K to i32*
%M=getelementptr inbounds i8,i8*%K,i64 -4
%N=bitcast i8*%M to i32*
store i32 4,i32*%N,align 4
store i8*%K,i8**%d,align 8
store i32%A,i32*%L,align 4
%O=call i8*@sml_alloc(i32 inreg 4)#0
%P=bitcast i8*%O to i32*
%Q=getelementptr inbounds i8,i8*%O,i64 -4
%R=bitcast i8*%Q to i32*
store i32 4,i32*%R,align 4
store i8*%O,i8**%f,align 8
store i32%D,i32*%P,align 4
%S=call i8*@sml_alloc(i32 inreg 4)#0
%T=bitcast i8*%S to i32*
%U=getelementptr inbounds i8,i8*%S,i64 -4
%V=bitcast i8*%U to i32*
store i32 4,i32*%V,align 4
store i8*%S,i8**%g,align 8
store i32%G,i32*%T,align 4
%W=call i8*@sml_alloc(i32 inreg 4)#0
%X=bitcast i8*%W to i32*
%Y=getelementptr inbounds i8,i8*%W,i64 -4
%Z=bitcast i8*%Y to i32*
store i32 4,i32*%Z,align 4
store i32%J,i32*%X,align 4
%aa=load i8*,i8**%e,align 8
%ab=load i8*,i8**%d,align 8
%ac=load i8*,i8**%f,align 8
%ad=load i8*,i8**%g,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%d,align 8
store i8*null,i8**%f,align 8
store i8*null,i8**%g,align 8
%ae=call fastcc i8*%v(i8*inreg%aa,i8*inreg%ab,i8*inreg%ac,i8*inreg%ad,i8*inreg%W)
%af=getelementptr inbounds i8,i8*%ae,i64 16
%ag=bitcast i8*%af to i8*(i8*,i8*)**
%ah=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ag,align 8
%ai=bitcast i8*%ae to i8**
%aj=load i8*,i8**%ai,align 8
%ak=load i8*,i8**%c,align 8
%al=tail call fastcc i8*%ah(i8*inreg%aj,i8*inreg%ak)
ret i8*%al
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6guard__E_819(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%m
i:
call void@sml_check(i32 inreg%e)
%j=load i8*,i8**%c,align 8
%k=bitcast i8**%d to i8***
%l=load i8**,i8***%k,align 8
br label%m
m:
%n=phi i8**[%l,%i],[%h,%g]
%o=phi i8*[%j,%i],[%b,%g]
store i8*null,i8**%c,align 8
%p=load i8*,i8**%n,align 8
%q=getelementptr inbounds i8,i8*%p,i64 16
%r=bitcast i8*%q to i8*(i8*,i8*)**
%s=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%r,align 8
%t=bitcast i8*%p to i8**
%u=load i8*,i8**%t,align 8
%v=call fastcc i8*%s(i8*inreg%u,i8*inreg%o)
store i8*%v,i8**%c,align 8
%w=load i8*,i8**%d,align 8
%x=getelementptr inbounds i8,i8*%w,i64 8
%y=bitcast i8*%x to i32*
%z=load i32,i32*%y,align 4
%A=getelementptr inbounds i8,i8*%w,i64 12
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=getelementptr inbounds i8,i8*%w,i64 16
%E=bitcast i8*%D to i32*
%F=load i32,i32*%E,align 4
store i8*null,i8**%d,align 8
%G=getelementptr inbounds i8,i8*%w,i64 20
%H=bitcast i8*%G to i32*
%I=load i32,i32*%H,align 4
%J=call i8*@sml_alloc(i32 inreg 28)#0
%K=getelementptr inbounds i8,i8*%J,i64 -4
%L=bitcast i8*%K to i32*
store i32 1342177304,i32*%L,align 4
store i8*%J,i8**%d,align 8
%M=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%N=bitcast i8*%J to i8**
store i8*%M,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%J,i64 8
%P=bitcast i8*%O to i32*
store i32%z,i32*%P,align 4
%Q=getelementptr inbounds i8,i8*%J,i64 12
%R=bitcast i8*%Q to i32*
store i32%C,i32*%R,align 4
%S=getelementptr inbounds i8,i8*%J,i64 16
%T=bitcast i8*%S to i32*
store i32%F,i32*%T,align 4
%U=getelementptr inbounds i8,i8*%J,i64 20
%V=bitcast i8*%U to i32*
store i32%I,i32*%V,align 4
%W=getelementptr inbounds i8,i8*%J,i64 24
%X=bitcast i8*%W to i32*
store i32 1,i32*%X,align 4
%Y=call i8*@sml_alloc(i32 inreg 28)#0
%Z=getelementptr inbounds i8,i8*%Y,i64 -4
%aa=bitcast i8*%Z to i32*
store i32 1342177304,i32*%aa,align 4
%ab=load i8*,i8**%d,align 8
%ac=bitcast i8*%Y to i8**
store i8*%ab,i8**%ac,align 8
%ad=getelementptr inbounds i8,i8*%Y,i64 8
%ae=bitcast i8*%ad to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6guard__E_818 to void(...)*),void(...)**%ae,align 8
%af=getelementptr inbounds i8,i8*%Y,i64 16
%ag=bitcast i8*%af to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6guard__E_818 to void(...)*),void(...)**%ag,align 8
%ah=getelementptr inbounds i8,i8*%Y,i64 24
%ai=bitcast i8*%ah to i32*
store i32 1,i32*%ai,align 4
ret i8*%Y
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6guard__E_820(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%c,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%b,%k]
store i8*null,i8**%c,align 8
%l=call fastcc i8*@_SMLLLN10TermFormat10FormatComb6guard__E_186(i8*inreg%j)
store i8*%l,i8**%c,align 8
%m=load i8*,i8**%d,align 8
%n=getelementptr inbounds i8,i8*%m,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%m,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=getelementptr inbounds i8,i8*%m,i64 16
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
store i8*null,i8**%d,align 8
%w=getelementptr inbounds i8,i8*%m,i64 20
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=call i8*@sml_alloc(i32 inreg 28)#0
%A=getelementptr inbounds i8,i8*%z,i64 -4
%B=bitcast i8*%A to i32*
store i32 1342177304,i32*%B,align 4
store i8*%z,i8**%d,align 8
%C=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%D=bitcast i8*%z to i8**
store i8*%C,i8**%D,align 8
%E=getelementptr inbounds i8,i8*%z,i64 8
%F=bitcast i8*%E to i32*
store i32%p,i32*%F,align 4
%G=getelementptr inbounds i8,i8*%z,i64 12
%H=bitcast i8*%G to i32*
store i32%s,i32*%H,align 4
%I=getelementptr inbounds i8,i8*%z,i64 16
%J=bitcast i8*%I to i32*
store i32%v,i32*%J,align 4
%K=getelementptr inbounds i8,i8*%z,i64 20
%L=bitcast i8*%K to i32*
store i32%y,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%z,i64 24
%N=bitcast i8*%M to i32*
store i32 1,i32*%N,align 4
%O=call i8*@sml_alloc(i32 inreg 28)#0
%P=getelementptr inbounds i8,i8*%O,i64 -4
%Q=bitcast i8*%P to i32*
store i32 1342177304,i32*%Q,align 4
%R=load i8*,i8**%d,align 8
%S=bitcast i8*%O to i8**
store i8*%R,i8**%S,align 8
%T=getelementptr inbounds i8,i8*%O,i64 8
%U=bitcast i8*%T to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6guard__E_819 to void(...)*),void(...)**%U,align 8
%V=getelementptr inbounds i8,i8*%O,i64 16
%W=bitcast i8*%V to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6guard__E_819 to void(...)*),void(...)**%W,align 8
%X=getelementptr inbounds i8,i8*%O,i64 24
%Y=bitcast i8*%X to i32*
store i32 -2147483647,i32*%Y,align 4
ret i8*%O
}
define fastcc i8*@_SMLFN10TermFormat10FormatComb6guard__E(i32 inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e,i32 inreg%f)#4 gc"smlsharp"{
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%g,i8*null)#0
%h=call i8*@sml_alloc(i32 inreg 28)#0
%i=bitcast i8*%h to i32*
%j=getelementptr inbounds i8,i8*%h,i64 -4
%k=bitcast i8*%j to i32*
store i32 1342177304,i32*%k,align 4
store i8*%h,i8**%g,align 8
store i32%a,i32*%i,align 4
%l=getelementptr inbounds i8,i8*%h,i64 4
%m=bitcast i8*%l to i32*
store i32%b,i32*%m,align 4
%n=getelementptr inbounds i8,i8*%h,i64 8
%o=bitcast i8*%n to i32*
store i32%c,i32*%o,align 4
%p=getelementptr inbounds i8,i8*%h,i64 12
%q=bitcast i8*%p to i32*
store i32%d,i32*%q,align 4
%r=getelementptr inbounds i8,i8*%h,i64 16
%s=bitcast i8*%r to i32*
store i32%e,i32*%s,align 4
%t=getelementptr inbounds i8,i8*%h,i64 20
%u=bitcast i8*%t to i32*
store i32%f,i32*%u,align 4
%v=getelementptr inbounds i8,i8*%h,i64 24
%w=bitcast i8*%v to i32*
store i32 0,i32*%w,align 4
%x=call i8*@sml_alloc(i32 inreg 28)#0
%y=getelementptr inbounds i8,i8*%x,i64 -4
%z=bitcast i8*%y to i32*
store i32 1342177304,i32*%z,align 4
%A=load i8*,i8**%g,align 8
%B=bitcast i8*%x to i8**
store i8*%A,i8**%B,align 8
%C=getelementptr inbounds i8,i8*%x,i64 8
%D=bitcast i8*%C to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6guard__E_820 to void(...)*),void(...)**%D,align 8
%E=getelementptr inbounds i8,i8*%x,i64 16
%F=bitcast i8*%E to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb6guard__E_820 to void(...)*),void(...)**%F,align 8
%G=getelementptr inbounds i8,i8*%x,i64 24
%H=bitcast i8*%G to i32*
store i32 -2147483647,i32*%H,align 4
ret i8*%x
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb5nest__E_823(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8**
br label%p
l:
call void@sml_check(i32 inreg%h)
%m=bitcast i8**%d to i8***
%n=load i8**,i8***%m,align 8
%o=bitcast i8**%n to i8*
br label%p
p:
%q=phi i8*[%o,%l],[%a,%j]
%r=phi i8**[%n,%l],[%k,%j]
%s=load i8*,i8**%r,align 8
%t=getelementptr inbounds i8,i8*%s,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*,i8*,i8*,i8*)**
%v=load i8*(i8*,i8*,i8*,i8*,i8*)*,i8*(i8*,i8*,i8*,i8*,i8*)**%u,align 8
%w=bitcast i8*%s to i8**
%x=load i8*,i8**%w,align 8
store i8*%x,i8**%e,align 8
%y=getelementptr inbounds i8,i8*%q,i64 8
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=getelementptr inbounds i8,i8*%q,i64 12
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=getelementptr inbounds i8,i8*%q,i64 16
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
store i8*null,i8**%d,align 8
%H=getelementptr inbounds i8,i8*%q,i64 20
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
%K=call i8*@sml_alloc(i32 inreg 4)#0
%L=bitcast i8*%K to i32*
%M=getelementptr inbounds i8,i8*%K,i64 -4
%N=bitcast i8*%M to i32*
store i32 4,i32*%N,align 4
store i8*%K,i8**%d,align 8
store i32%A,i32*%L,align 4
%O=call i8*@sml_alloc(i32 inreg 4)#0
%P=bitcast i8*%O to i32*
%Q=getelementptr inbounds i8,i8*%O,i64 -4
%R=bitcast i8*%Q to i32*
store i32 4,i32*%R,align 4
store i8*%O,i8**%f,align 8
store i32%D,i32*%P,align 4
%S=call i8*@sml_alloc(i32 inreg 4)#0
%T=bitcast i8*%S to i32*
%U=getelementptr inbounds i8,i8*%S,i64 -4
%V=bitcast i8*%U to i32*
store i32 4,i32*%V,align 4
store i8*%S,i8**%g,align 8
store i32%G,i32*%T,align 4
%W=call i8*@sml_alloc(i32 inreg 4)#0
%X=bitcast i8*%W to i32*
%Y=getelementptr inbounds i8,i8*%W,i64 -4
%Z=bitcast i8*%Y to i32*
store i32 4,i32*%Z,align 4
store i32%J,i32*%X,align 4
%aa=load i8*,i8**%e,align 8
%ab=load i8*,i8**%d,align 8
%ac=load i8*,i8**%f,align 8
%ad=load i8*,i8**%g,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%d,align 8
store i8*null,i8**%f,align 8
store i8*null,i8**%g,align 8
%ae=call fastcc i8*%v(i8*inreg%aa,i8*inreg%ab,i8*inreg%ac,i8*inreg%ad,i8*inreg%W)
%af=getelementptr inbounds i8,i8*%ae,i64 16
%ag=bitcast i8*%af to i8*(i8*,i8*)**
%ah=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ag,align 8
%ai=bitcast i8*%ae to i8**
%aj=load i8*,i8**%ai,align 8
%ak=load i8*,i8**%c,align 8
%al=tail call fastcc i8*%ah(i8*inreg%aj,i8*inreg%ak)
ret i8*%al
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb5nest__E_824(i8*inreg%a,i32 inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%l
i:
call void@sml_check(i32 inreg%e)
%j=bitcast i8**%d to i8***
%k=load i8**,i8***%j,align 8
br label%l
l:
%m=phi i8**[%k,%i],[%h,%g]
%n=load i8*,i8**%m,align 8
%o=getelementptr inbounds i8,i8*%n,i64 16
%p=bitcast i8*%o to i8*(i8*,i8*)**
%q=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%p,align 8
%r=bitcast i8*%n to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%c,align 8
%t=call i8*@sml_alloc(i32 inreg 4)#0
%u=bitcast i8*%t to i32*
%v=getelementptr inbounds i8,i8*%t,i64 -4
%w=bitcast i8*%v to i32*
store i32 4,i32*%w,align 4
store i32%b,i32*%u,align 4
%x=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%y=call fastcc i8*%q(i8*inreg%x,i8*inreg%t)
store i8*%y,i8**%c,align 8
%z=load i8*,i8**%d,align 8
%A=getelementptr inbounds i8,i8*%z,i64 8
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=getelementptr inbounds i8,i8*%z,i64 12
%E=bitcast i8*%D to i32*
%F=load i32,i32*%E,align 4
%G=getelementptr inbounds i8,i8*%z,i64 16
%H=bitcast i8*%G to i32*
%I=load i32,i32*%H,align 4
store i8*null,i8**%d,align 8
%J=getelementptr inbounds i8,i8*%z,i64 20
%K=bitcast i8*%J to i32*
%L=load i32,i32*%K,align 4
%M=call i8*@sml_alloc(i32 inreg 28)#0
%N=getelementptr inbounds i8,i8*%M,i64 -4
%O=bitcast i8*%N to i32*
store i32 1342177304,i32*%O,align 4
store i8*%M,i8**%d,align 8
%P=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%Q=bitcast i8*%M to i8**
store i8*%P,i8**%Q,align 8
%R=getelementptr inbounds i8,i8*%M,i64 8
%S=bitcast i8*%R to i32*
store i32%C,i32*%S,align 4
%T=getelementptr inbounds i8,i8*%M,i64 12
%U=bitcast i8*%T to i32*
store i32%F,i32*%U,align 4
%V=getelementptr inbounds i8,i8*%M,i64 16
%W=bitcast i8*%V to i32*
store i32%I,i32*%W,align 4
%X=getelementptr inbounds i8,i8*%M,i64 20
%Y=bitcast i8*%X to i32*
store i32%L,i32*%Y,align 4
%Z=getelementptr inbounds i8,i8*%M,i64 24
%aa=bitcast i8*%Z to i32*
store i32 1,i32*%aa,align 4
%ab=call i8*@sml_alloc(i32 inreg 28)#0
%ac=getelementptr inbounds i8,i8*%ab,i64 -4
%ad=bitcast i8*%ac to i32*
store i32 1342177304,i32*%ad,align 4
%ae=load i8*,i8**%d,align 8
%af=bitcast i8*%ab to i8**
store i8*%ae,i8**%af,align 8
%ag=getelementptr inbounds i8,i8*%ab,i64 8
%ah=bitcast i8*%ag to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb5nest__E_823 to void(...)*),void(...)**%ah,align 8
%ai=getelementptr inbounds i8,i8*%ab,i64 16
%aj=bitcast i8*%ai to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb5nest__E_823 to void(...)*),void(...)**%aj,align 8
%ak=getelementptr inbounds i8,i8*%ab,i64 24
%al=bitcast i8*%ak to i32*
store i32 1,i32*%al,align 4
ret i8*%ab
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb5nest__E_825(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%c,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%b,%k]
store i8*null,i8**%c,align 8
%l=call fastcc i8*@_SMLLLN10TermFormat10FormatComb5nest__E_204(i8*inreg%j)
store i8*%l,i8**%c,align 8
%m=load i8*,i8**%d,align 8
%n=getelementptr inbounds i8,i8*%m,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%m,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=getelementptr inbounds i8,i8*%m,i64 16
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
store i8*null,i8**%d,align 8
%w=getelementptr inbounds i8,i8*%m,i64 20
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=call i8*@sml_alloc(i32 inreg 28)#0
%A=getelementptr inbounds i8,i8*%z,i64 -4
%B=bitcast i8*%A to i32*
store i32 1342177304,i32*%B,align 4
store i8*%z,i8**%d,align 8
%C=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%D=bitcast i8*%z to i8**
store i8*%C,i8**%D,align 8
%E=getelementptr inbounds i8,i8*%z,i64 8
%F=bitcast i8*%E to i32*
store i32%p,i32*%F,align 4
%G=getelementptr inbounds i8,i8*%z,i64 12
%H=bitcast i8*%G to i32*
store i32%s,i32*%H,align 4
%I=getelementptr inbounds i8,i8*%z,i64 16
%J=bitcast i8*%I to i32*
store i32%v,i32*%J,align 4
%K=getelementptr inbounds i8,i8*%z,i64 20
%L=bitcast i8*%K to i32*
store i32%y,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%z,i64 24
%N=bitcast i8*%M to i32*
store i32 1,i32*%N,align 4
%O=call i8*@sml_alloc(i32 inreg 28)#0
%P=getelementptr inbounds i8,i8*%O,i64 -4
%Q=bitcast i8*%P to i32*
store i32 1342177304,i32*%Q,align 4
%R=load i8*,i8**%d,align 8
%S=bitcast i8*%O to i8**
store i8*%R,i8**%S,align 8
%T=getelementptr inbounds i8,i8*%O,i64 8
%U=bitcast i8*%T to void(...)**
store void(...)*bitcast(i8*(i8*,i32)*@_SMLLLN10TermFormat10FormatComb5nest__E_824 to void(...)*),void(...)**%U,align 8
%V=getelementptr inbounds i8,i8*%O,i64 16
%W=bitcast i8*%V to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb5nest__E_977 to void(...)*),void(...)**%W,align 8
%X=getelementptr inbounds i8,i8*%O,i64 24
%Y=bitcast i8*%X to i32*
store i32 -2147483647,i32*%Y,align 4
ret i8*%O
}
define fastcc i8*@_SMLFN10TermFormat10FormatComb5nest__E(i32 inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e,i32 inreg%f)#4 gc"smlsharp"{
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%g,i8*null)#0
%h=call i8*@sml_alloc(i32 inreg 28)#0
%i=bitcast i8*%h to i32*
%j=getelementptr inbounds i8,i8*%h,i64 -4
%k=bitcast i8*%j to i32*
store i32 1342177304,i32*%k,align 4
store i8*%h,i8**%g,align 8
store i32%a,i32*%i,align 4
%l=getelementptr inbounds i8,i8*%h,i64 4
%m=bitcast i8*%l to i32*
store i32%b,i32*%m,align 4
%n=getelementptr inbounds i8,i8*%h,i64 8
%o=bitcast i8*%n to i32*
store i32%c,i32*%o,align 4
%p=getelementptr inbounds i8,i8*%h,i64 12
%q=bitcast i8*%p to i32*
store i32%d,i32*%q,align 4
%r=getelementptr inbounds i8,i8*%h,i64 16
%s=bitcast i8*%r to i32*
store i32%e,i32*%s,align 4
%t=getelementptr inbounds i8,i8*%h,i64 20
%u=bitcast i8*%t to i32*
store i32%f,i32*%u,align 4
%v=getelementptr inbounds i8,i8*%h,i64 24
%w=bitcast i8*%v to i32*
store i32 0,i32*%w,align 4
%x=call i8*@sml_alloc(i32 inreg 28)#0
%y=getelementptr inbounds i8,i8*%x,i64 -4
%z=bitcast i8*%y to i32*
store i32 1342177304,i32*%z,align 4
%A=load i8*,i8**%g,align 8
%B=bitcast i8*%x to i8**
store i8*%A,i8**%B,align 8
%C=getelementptr inbounds i8,i8*%x,i64 8
%D=bitcast i8*%C to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb5nest__E_825 to void(...)*),void(...)**%D,align 8
%E=getelementptr inbounds i8,i8*%x,i64 16
%F=bitcast i8*%E to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb5nest__E_825 to void(...)*),void(...)**%F,align 8
%G=getelementptr inbounds i8,i8*%x,i64 24
%H=bitcast i8*%G to i32*
store i32 -2147483647,i32*%H,align 4
ret i8*%x
}
define internal fastcc void@_SMLLLN10TermFormat10FormatComb4putsE_829(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
store i8*null,i8**%b,align 8
%j=call fastcc i8*@_SMLFN3Bug11prettyPrintE(i8*inreg%h)
store i8*%j,i8**%b,align 8
%k=call i8*@sml_alloc(i32 inreg 20)#0
%l=getelementptr inbounds i8,i8*%k,i64 -4
%m=bitcast i8*%l to i32*
store i32 1342177296,i32*%m,align 4
%n=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%o=bitcast i8*%k to i8**
store i8*%n,i8**%o,align 8
%p=getelementptr inbounds i8,i8*%k,i64 8
%q=bitcast i8*%p to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@b6,i64 0,i32 2,i64 0),i8**%q,align 8
%r=getelementptr inbounds i8,i8*%k,i64 16
%s=bitcast i8*%r to i32*
store i32 3,i32*%s,align 4
%t=call fastcc i8*@_SMLFN6String1_ZE(i8*inreg%k)
tail call fastcc void@_SMLFN6TextIO5printE(i8*inreg%t)
ret void
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb4putsE_831(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%m
i:
call void@sml_check(i32 inreg%e)
%j=load i8*,i8**%d,align 8
%k=bitcast i8**%c to i8***
%l=load i8**,i8***%k,align 8
br label%m
m:
%n=phi i8**[%l,%i],[%h,%g]
%o=phi i8*[%j,%i],[%b,%g]
%p=getelementptr inbounds i8,i8*%o,i64 16
%q=bitcast i8*%p to i8*(i8*,i8*)**
%r=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%q,align 8
%s=bitcast i8*%o to i8**
%t=load i8*,i8**%s,align 8
store i8*%t,i8**%d,align 8
%u=load i8*,i8**%n,align 8
store i8*%u,i8**%c,align 8
%v=call i8*@sml_alloc(i32 inreg 20)#0
%w=getelementptr inbounds i8,i8*%v,i64 -4
%x=bitcast i8*%w to i32*
store i32 1342177296,i32*%x,align 4
%y=load i8*,i8**%c,align 8
%z=bitcast i8*%v to i8**
store i8*%y,i8**%z,align 8
%A=getelementptr inbounds i8,i8*%v,i64 8
%B=bitcast i8*%A to i8**
store i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@b7,i64 0,i32 2)to i8*),i8**%B,align 8
%C=getelementptr inbounds i8,i8*%v,i64 16
%D=bitcast i8*%C to i32*
store i32 3,i32*%D,align 4
%E=load i8*,i8**%d,align 8
%F=tail call fastcc i8*%r(i8*inreg%E,i8*inreg%v)
ret i8*%F
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb4putsE_832(i8*inreg%a)#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=bitcast i8*%a to i8**
%e=load i8*,i8**%d,align 8
store i8*%e,i8**%b,align 8
%f=call i8*@sml_alloc(i32 inreg 12)#0
%g=getelementptr inbounds i8,i8*%f,i64 -4
%h=bitcast i8*%g to i32*
store i32 1342177288,i32*%h,align 4
store i8*%f,i8**%c,align 8
%i=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%j=bitcast i8*%f to i8**
store i8*%i,i8**%j,align 8
%k=getelementptr inbounds i8,i8*%f,i64 8
%l=bitcast i8*%k to i32*
store i32 1,i32*%l,align 4
%m=call i8*@sml_alloc(i32 inreg 28)#0
%n=getelementptr inbounds i8,i8*%m,i64 -4
%o=bitcast i8*%n to i32*
store i32 1342177304,i32*%o,align 4
%p=load i8*,i8**%c,align 8
%q=bitcast i8*%m to i8**
store i8*%p,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%m,i64 8
%s=bitcast i8*%r to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb4putsE_831 to void(...)*),void(...)**%s,align 8
%t=getelementptr inbounds i8,i8*%m,i64 16
%u=bitcast i8*%t to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLLN10TermFormat10FormatComb4putsE_831 to void(...)*),void(...)**%u,align 8
%v=getelementptr inbounds i8,i8*%m,i64 24
%w=bitcast i8*%v to i32*
store i32 1,i32*%w,align 4
ret i8*%m
}
define fastcc i8*@_SMLFN10TermFormat10FormatComb4putsE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
ret i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@b8,i64 0,i32 2)to i8*)
}
define fastcc i8*@_SMLFN10TermFormat12formatBtvEnvE(i32 inreg%a,i32 inreg%b)local_unnamed_addr#2 gc"smlsharp"{
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%f,label%e
e:
tail call void@sml_check(i32 inreg%c)
br label%f
f:
%g=load i8**,i8***bitcast(i8**getelementptr inbounds(<{[4x i8],i32,[2x i8*]}>,<{[4x i8],i32,[2x i8*]}>*@_SML_gvar3a6a3f6785231de5_TermFormat,i64 0,i32 2,i64 0)to i8***),align 8
%h=load i8*,i8**%g,align 8
%i=tail call fastcc i8*@_SMLLLN10TermFormat12formatBtvEnvE_753(i8*inreg%h,i32 inreg%a,i32 inreg%b)
ret i8*%i
}
define fastcc i8*@_SMLFN10TermFormat20formatBtvEnvWithTypeE(i32 inreg%a,i32 inreg%b)local_unnamed_addr#2 gc"smlsharp"{
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%f,label%e
e:
tail call void@sml_check(i32 inreg%c)
br label%f
f:
%g=load i8**,i8***bitcast(i8**getelementptr inbounds(<{[4x i8],i32,[2x i8*]}>,<{[4x i8],i32,[2x i8*]}>*@_SML_gvar3a6a3f6785231de5_TermFormat,i64 0,i32 2,i64 1)to i8***),align 8
%h=load i8*,i8**%g,align 8
%i=tail call fastcc i8*@_SMLLLN10TermFormat20formatBtvEnvWithTypeE_771(i8*inreg%h,i32 inreg%a,i32 inreg%b)
ret i8*%i
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6guard__E_838(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLLN10TermFormat10FormatComb6guard__E_176(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6guard__E_839(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6guard__E_840(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#4 gc"smlsharp"{
%f=bitcast i8*%b to i32*
%g=load i32,i32*%f,align 4
%h=bitcast i8*%c to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%d to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%e to i32*
%m=load i32,i32*%l,align 4
%n=tail call fastcc i8*@_SMLLLN10TermFormat10FormatComb6guard__E_184(i8*inreg%a,i32 inreg%g,i32 inreg%i,i32 inreg%k,i32 inreg%m)
ret i8*%n
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb5nest__E_842(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLLN10TermFormat10FormatComb5nest__E_192(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb5nest__E_843(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb5nest__E_844(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#4 gc"smlsharp"{
%f=bitcast i8*%b to i32*
%g=load i32,i32*%f,align 4
%h=bitcast i8*%c to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%d to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%e to i32*
%m=load i32,i32*%l,align 4
%n=tail call fastcc i8*@_SMLLLN10TermFormat10FormatComb5nest__E_202(i8*inreg%a,i32 inreg%g,i32 inreg%i,i32 inreg%k,i32 inreg%m)
ret i8*%n
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb5nest__E_845(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=bitcast i8*%b to i32*
%d=load i32,i32*%c,align 4
%e=tail call fastcc i8*@_SMLLLN10TermFormat10FormatComb5nest__E_203(i8*inreg%a,i32 inreg%d)
ret i8*%e
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_849(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_850(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_216(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_851(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_222(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_852(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_224(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_853(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_226(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat13formatAppListE_855(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat13formatAppListE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLLN10TermFormat13formatSeqListE_856(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat13formatSeqListE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatOptionalListE_857(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat18formatOptionalListE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatDeclListE_858(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat14formatDeclListE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatCaseListE_859(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat14formatCaseListE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLLN10TermFormat20formatEnclosedOptionE_860(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat20formatEnclosedOptionE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLLN10TermFormat20formatOptionalOptionE_861(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat20formatOptionalOptionE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLLN10TermFormat12formatOptionE_862(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat12formatOptionE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_863(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_864(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_865(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_279(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_866(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_284(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_867(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=bitcast i8*%b to i32*
%d=load i32,i32*%c,align 4
%e=tail call fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_286(i8*inreg%a,i32 inreg%d)
ret i8*%e
}
define internal fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_868(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_287(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_869(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_291(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_870(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_296(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_871(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_298(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_872(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_300(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_873(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat12keyValuePairE_302(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedSEnvE_875(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat18formatEnclosedSEnvE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLLN10TermFormat22formatEnclosedLabelMapE_876(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat22formatEnclosedLabelMapE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_878(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_879(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_324(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_880(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_330(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_881(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_332(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_882(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_334(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat18formatEnclosedListE_884(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat18formatEnclosedListE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_885(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_886(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_887(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_350(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_888(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_355(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_889(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_360(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_890(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_362(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_891(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_364(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat23formatEnclosedSEnvPlainE_892(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat23formatEnclosedSEnvPlainE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_893(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_894(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_895(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_380(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_896(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_385(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_897(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_390(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_898(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_392(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_899(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_394(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat28formatEnclosedSymbolEnvPlainE_900(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat28formatEnclosedSymbolEnvPlainE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb9assocListE_901(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#4 gc"smlsharp"{
%f=bitcast i8*%b to i32*
%g=load i32,i32*%f,align 4
%h=bitcast i8*%c to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%d to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%e to i32*
%m=load i32,i32*%l,align 4
%n=tail call fastcc i8*@_SMLFN10TermFormat10FormatComb9assocListE(i32 inreg%g,i32 inreg%i,i32 inreg%k,i32 inreg%m)
ret i8*%n
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6recordE_902(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat10FormatComb6recordE_423(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6recordE_903(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLFN10TermFormat10FormatComb6recordE(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat15formatRecordExpE_904(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat15formatRecordExpE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLLN10TermFormat21formatRecordExpToJsonE_905(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat21formatRecordExpToJsonE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatRecordTyE_906(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatRecordTyE_907(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatRecordTyE_908(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat14formatRecordTyE_474(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatRecordTyE_909(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat14formatRecordTyE_479(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatRecordTyE_912(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat14formatRecordTyE_499(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatRecordTyE_913(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat14formatRecordTyE_501(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatRecordTyE_914(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat14formatRecordTyE_503(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat14formatRecordTyE_915(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat14formatRecordTyE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLLN10TermFormat19formatDummyRecordTyE_916(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat19formatDummyRecordTyE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLLN10TermFormat7btvNameE_918(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=bitcast i8*%b to i32*
%d=load i32,i32*%c,align 4
%e=tail call fastcc i8*@_SMLFN10TermFormat7btvNameE(i32 inreg%d)
ret i8*%e
}
define internal fastcc i8*@_SMLLLN10TermFormat7ftvNameE_919(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=bitcast i8*%b to i32*
%d=load i32,i32*%c,align 4
%e=tail call fastcc i8*@_SMLFN10TermFormat7ftvNameE(i32 inreg%d)
ret i8*%e
}
define internal fastcc i8*@_SMLLLN10TermFormat15formatFreeTyvarE_920(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=bitcast i8*%b to i32*
%d=load i32,i32*%c,align 4
%e=tail call fastcc i8*@_SMLFN10TermFormat15formatFreeTyvarE(i32 inreg%d)
ret i8*%e
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb4listE_922(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat10FormatComb4listE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6tuple2E_923(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6tuple2E_924(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#4 gc"smlsharp"{
%f=bitcast i8*%b to i32*
%g=load i32,i32*%f,align 4
%h=bitcast i8*%c to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%d to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%e to i32*
%m=load i32,i32*%l,align 4
%n=tail call fastcc i8*@_SMLFN10TermFormat10FormatComb6tuple2E(i32 inreg%g,i32 inreg%i,i32 inreg%k,i32 inreg%m)
ret i8*%n
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6tuple3E_925(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6tuple3E_926(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e,i8*inreg%f,i8*inreg%g)#4 gc"smlsharp"{
%h=bitcast i8*%b to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%c to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%d to i32*
%m=load i32,i32*%l,align 4
%n=bitcast i8*%e to i32*
%o=load i32,i32*%n,align 4
%p=bitcast i8*%f to i32*
%q=load i32,i32*%p,align 4
%r=bitcast i8*%g to i32*
%s=load i32,i32*%r,align 4
%t=tail call fastcc i8*@_SMLFN10TermFormat10FormatComb6tuple3E(i32 inreg%i,i32 inreg%k,i32 inreg%m,i32 inreg%o,i32 inreg%q,i32 inreg%s)
ret i8*%t
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6tuple4E_927(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6tuple4E_928(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e,i8*inreg%f,i8*inreg%g,i8*inreg%h,i8*inreg%i)#4 gc"smlsharp"{
%j=bitcast i8*%b to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%c to i32*
%m=load i32,i32*%l,align 4
%n=bitcast i8*%d to i32*
%o=load i32,i32*%n,align 4
%p=bitcast i8*%e to i32*
%q=load i32,i32*%p,align 4
%r=bitcast i8*%f to i32*
%s=load i32,i32*%r,align 4
%t=bitcast i8*%g to i32*
%u=load i32,i32*%t,align 4
%v=bitcast i8*%h to i32*
%w=load i32,i32*%v,align 4
%x=bitcast i8*%i to i32*
%y=load i32,i32*%x,align 4
%z=tail call fastcc i8*@_SMLFN10TermFormat10FormatComb6tuple4E(i32 inreg%k,i32 inreg%m,i32 inreg%o,i32 inreg%q,i32 inreg%s,i32 inreg%u,i32 inreg%w,i32 inreg%y)
ret i8*%z
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb4termE_929(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLFN10TermFormat10FormatComb4termE(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat15formatFormatExpE_930(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLLN10TermFormat15formatFormatExpE_931(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat15formatFormatExpE_656(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat15formatFormatExpE_932(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat15formatFormatExpE_660(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat15formatFormatExpE_933(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat15formatFormatExpE_665(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat15formatFormatExpE_934(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat15formatFormatExpE_668(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat15formatFormatExpE_935(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat15formatFormatExpE_670(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat15formatFormatExpE_936(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat15formatFormatExpE_589(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat12formatFormatE_937(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLFN10TermFormat12formatFormatE(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat17formatEnclosedMapE_938(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e,i8*inreg%f,i8*inreg%g)#4 gc"smlsharp"{
%h=bitcast i8*%b to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%c to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%f to i32*
%m=load i32,i32*%l,align 4
%n=bitcast i8*%g to i32*
%o=load i32,i32*%n,align 4
%p=tail call fastcc i8*@_SMLFN10TermFormat17formatEnclosedMapE(i32 inreg%i,i32 inreg%k,i32 inreg undef,i32 inreg undef,i32 inreg%m,i32 inreg%o)
ret i8*%p
}
define internal fastcc i8*@_SMLLLN10TermFormat12formatIfConsE_939(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat12formatIfConsE_691(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat12formatIfConsE_940(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
ret i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@br,i64 0,i32 2)to i8*)
}
define internal fastcc i8*@_SMLLLN10TermFormat13formatIfEmptyE_941(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat13formatIfEmptyE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLLN10TermFormat19formatIfEmptyFormatE_942(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLFN10TermFormat19formatIfEmptyFormatE(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat22formatIfEmptySymbolMapE_943(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat22formatIfEmptySymbolMapE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLLN10TermFormat12formatIfListE_944(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%c to i32*
%e=load i32,i32*%d,align 4
%f=tail call fastcc i8*@_SMLFN10TermFormat12formatIfListE(i32 inreg undef,i32 inreg%e)
ret i8*%f
}
define internal fastcc i8*@_SMLLLN10TermFormat16formatIfNonEmptyE_945(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat16formatIfNonEmptyE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLLN10TermFormat25formatIfNonEmptySymbolMapE_946(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat25formatIfNonEmptySymbolMapE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLLN10TermFormat11emptyBtvEnvE_947(i8*inreg%a,i8*inreg%b,i8*inreg%c)#2 gc"smlsharp"{
%d=tail call fastcc i8*@_SMLFN10TermFormat11emptyBtvEnvE(i32 inreg undef,i32 inreg undef)
ret i8*%d
}
define internal fastcc i8*@_SMLLLN10TermFormat10makeBtvEnvE_948(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat10makeBtvEnvE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLLN10TermFormat12extendBtvEnvE_949(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat12extendBtvEnvE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLLN10TermFormat21extendBtvEnvWithOrderE_951(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat21extendBtvEnvWithOrderE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLLN10TermFormat16formatBoundTyvarE_952(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=bitcast i8*%b to i32*
%d=load i32,i32*%c,align 4
%e=tail call fastcc i8*@_SMLLLN10TermFormat16formatBoundTyvarE_736(i8*inreg%a,i32 inreg%d)
ret i8*%e
}
define internal fastcc i8*@_SMLLLN10TermFormat16formatBoundTyvarE_953(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat16formatBoundTyvarE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLL6tyvars_954(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i32@_SMLLL6tyvars_745(i8*inreg%b)
%d=tail call i8*@sml_alloc(i32 inreg 4)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 4,i32*%g,align 4
store i32%c,i32*%e,align 4
ret i8*%d
}
define internal fastcc i8*@_SMLLLN10TermFormat12formatBtvEnvE_955(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLLN10TermFormat12formatBtvEnvE_750(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLLN10TermFormat12formatBtvEnvE_956(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLLN10TermFormat12formatBtvEnvE_753(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLL6tyvars_957(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i32@_SMLLL6tyvars_758(i8*inreg%b)
%d=tail call i8*@sml_alloc(i32 inreg 4)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 4,i32*%g,align 4
store i32%c,i32*%e,align 4
ret i8*%d
}
define internal fastcc i8*@_SMLLLN10TermFormat20formatBtvEnvWithTypeE_958(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLLN10TermFormat20formatBtvEnvWithTypeE_768(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLLN10TermFormat20formatBtvEnvWithTypeE_959(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLLN10TermFormat20formatBtvEnvWithTypeE_771(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6begin__E_960(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6begin__E_961(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6begin__E_962(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat10FormatComb6begin__E_777(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6begin__E_963(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
ret i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bP,i64 0,i32 2)to i8*)
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb4end__E_964(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat10FormatComb4end__E_781(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb4end__E_965(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
ret i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bR,i64 0,i32 2)to i8*)
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb4textE_966(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat10FormatComb4textE_788(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb4textE_967(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#4 gc"smlsharp"{
ret i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bT,i64 0,i32 2)to i8*)
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb5spaceE_968(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat10FormatComb5spaceE_794(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb5spaceE_969(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#4 gc"smlsharp"{
ret i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bV,i64 0,i32 2)to i8*)
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6dspaceE_970(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat10FormatComb6dspaceE_800(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6dspaceE_971(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#4 gc"smlsharp"{
ret i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bX,i64 0,i32 2)to i8*)
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb7newlineE_972(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat10FormatComb7newlineE_807(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb7newlineE_973(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#4 gc"smlsharp"{
ret i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@b0,i64 0,i32 2)to i8*)
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb1_DE_974(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat10FormatComb1_DE_814(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb1_DE_975(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#4 gc"smlsharp"{
ret i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@b2,i64 0,i32 2)to i8*)
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb6guard__E_976(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e,i8*inreg%f,i8*inreg%g)#4 gc"smlsharp"{
%h=bitcast i8*%b to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%c to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%d to i32*
%m=load i32,i32*%l,align 4
%n=bitcast i8*%e to i32*
%o=load i32,i32*%n,align 4
%p=bitcast i8*%f to i32*
%q=load i32,i32*%p,align 4
%r=bitcast i8*%g to i32*
%s=load i32,i32*%r,align 4
%t=tail call fastcc i8*@_SMLFN10TermFormat10FormatComb6guard__E(i32 inreg%i,i32 inreg%k,i32 inreg%m,i32 inreg%o,i32 inreg%q,i32 inreg%s)
ret i8*%t
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb5nest__E_977(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=bitcast i8*%b to i32*
%d=load i32,i32*%c,align 4
%e=tail call fastcc i8*@_SMLLLN10TermFormat10FormatComb5nest__E_824(i8*inreg%a,i32 inreg%d)
ret i8*%e
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb5nest__E_978(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e,i8*inreg%f,i8*inreg%g)#4 gc"smlsharp"{
%h=bitcast i8*%b to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%c to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%d to i32*
%m=load i32,i32*%l,align 4
%n=bitcast i8*%e to i32*
%o=load i32,i32*%n,align 4
%p=bitcast i8*%f to i32*
%q=load i32,i32*%p,align 4
%r=bitcast i8*%g to i32*
%s=load i32,i32*%r,align 4
%t=tail call fastcc i8*@_SMLFN10TermFormat10FormatComb5nest__E(i32 inreg%i,i32 inreg%k,i32 inreg%m,i32 inreg%o,i32 inreg%q,i32 inreg%s)
ret i8*%t
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb4putsE_979(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
tail call fastcc void@_SMLLLN10TermFormat10FormatComb4putsE_829(i8*inreg%b)
%c=tail call i8*@sml_alloc(i32 inreg 4)#0
%d=bitcast i8*%c to i32*
%e=getelementptr inbounds i8,i8*%c,i64 -4
%f=bitcast i8*%e to i32*
store i32 4,i32*%f,align 4
store i32 0,i32*%d,align 4
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb4putsE_980(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLLN10TermFormat10FormatComb4putsE_832(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLLN10TermFormat10FormatComb4putsE_981(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
ret i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@b8,i64 0,i32 2)to i8*)
}
declare void@llvm.memcpy.p0i8.p0i8.i32(i8*,i8*,i32,i1)#0
declare void@llvm.memset.p0i8.i32(i8*,i8,i32,i1)#0
attributes#0={nounwind}
attributes#1={noreturn}
attributes#2={uwtable}
attributes#3={noreturn nounwind}
attributes#4={nounwind uwtable}
