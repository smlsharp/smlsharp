@sml_check_flag=external local_unnamed_addr global i32
@_SMLZN11RecordLabel12format__labelE=external local_unnamed_addr global i8*
@_SMLZN11RecordLabel16format__jsonLabelE=external local_unnamed_addr global i8*
@_SMLZ5Match=external unnamed_addr constant i8*
@_SMLZ3Chr=external unnamed_addr constant i8*
@a=private unnamed_addr constant<{[4x i8],i32,i32,[4x i8],i32}><{[4x i8]zeroinitializer,i32 -805306360,i32 1,[4x i8]zeroinitializer,i32 0}>,align 8
@b=private unnamed_addr constant<{[4x i8],i32,i8*,i32}><{[4x i8]zeroinitializer,i32 -805306360,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i32}>,<{[4x i8],i32,i32,[4x i8],i32}>*@a,i32 0,i32 0,i32 0),i32 8),i32 1}>,align 8
@c=private unnamed_addr constant<{[4x i8],i32,i8*,i32}><{[4x i8]zeroinitializer,i32 -805306360,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,i32}>,<{[4x i8],i32,i8*,i32}>*@b,i32 0,i32 0,i32 0),i32 8),i32 1}>,align 8
@d=private unnamed_addr constant<{[4x i8],i32,i8*,i32,[4x i8],i32}><{[4x i8]zeroinitializer,i32 -805306352,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,i32}>,<{[4x i8],i32,i8*,i32}>*@c,i32 0,i32 0,i32 0),i32 8),i32 1,[4x i8]zeroinitializer,i32 1}>,align 8
@e=private unnamed_addr constant<{[4x i8],i32,i32,[4x i8],i8*,i32}><{[4x i8]zeroinitializer,i32 -805306352,i32 2,[4x i8]zeroinitializer,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,i32,[4x i8],i32}>,<{[4x i8],i32,i8*,i32,[4x i8],i32}>*@d,i32 0,i32 0,i32 0),i32 8),i32 2}>,align 8
@f=private unnamed_addr constant<{[4x i8],i32,i8*,i32}><{[4x i8]zeroinitializer,i32 -805306360,i8*null,i32 1}>,align 8
@g=private unnamed_addr constant<{[4x i8],i32,i8*,i32}><{[4x i8]zeroinitializer,i32 -805306360,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,i32}>,<{[4x i8],i32,i8*,i32}>*@f,i32 0,i32 0,i32 0),i32 8),i32 1}>,align 8
@h=private unnamed_addr constant<{[4x i8],i32,i8*,i32,[4x i8],i32}><{[4x i8]zeroinitializer,i32 -805306352,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,i32}>,<{[4x i8],i32,i8*,i32}>*@g,i32 0,i32 0,i32 0),i32 8),i32 1,[4x i8]zeroinitializer,i32 1}>,align 8
@i=private unnamed_addr constant<{[4x i8],i32,i32,[4x i8],i8*,i32}><{[4x i8]zeroinitializer,i32 -805306352,i32 2,[4x i8]zeroinitializer,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,i32,[4x i8],i32}>,<{[4x i8],i32,i8*,i32,[4x i8],i32}>*@h,i32 0,i32 0,i32 0),i32 8),i32 2}>,align 8
@j=private unnamed_addr constant<{[4x i8],i32,i32,[4x i8],i32}><{[4x i8]zeroinitializer,i32 -805306360,i32 0,[4x i8]zeroinitializer,i32 0}>,align 8
@k=private unnamed_addr constant<{[4x i8],i32,i8*,i8*,i32}><{[4x i8]zeroinitializer,i32 -805306352,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i32}>,<{[4x i8],i32,i32,[4x i8],i32}>*@j,i32 0,i32 0,i32 0),i32 8),i8*null,i32 3}>,align 8
@l=private unnamed_addr constant<{[4x i8],i32,i32,[4x i8],i32}><{[4x i8]zeroinitializer,i32 -805306360,i32 3,[4x i8]zeroinitializer,i32 0}>,align 8
@m=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat10FormatComb6guard__E_240 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6guard__E_1009 to void(...)*),i32 -2147483647}>,align 8
@n=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat10FormatComb5nest__E_258 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb5nest__E_1016 to void(...)*),i32 -2147483647}>,align 8
@o=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat18formatEnclosedListE_269 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_1021 to void(...)*),i32 -2147483647}>,align 8
@p=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat18formatEnclosedListE_271 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_1022 to void(...)*),i32 -2147483647}>,align 8
@q=private unnamed_addr constant<{[4x i8],i32,i8*,i8*,i32}><{[4x i8]zeroinitializer,i32 -805306352,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@o,i32 0,i32 0,i32 0),i32 8),i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@p,i32 0,i32 0,i32 0),i32 8),i32 3}>,align 8
@r=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat18formatEnclosedListE_276 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_1023 to void(...)*),i32 -2147483647}>,align 8
@s=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat18formatEnclosedListE_281 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_1024 to void(...)*),i32 -2147483647}>,align 8
@t=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat18formatEnclosedListE_285 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_1025 to void(...)*),i32 -2147483647}>,align 8
@u=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat18formatEnclosedListE_287 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_1026 to void(...)*),i32 -2147483647}>,align 8
@v=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat18formatEnclosedListE_289 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_1027 to void(...)*),i32 -2147483647}>,align 8
@w=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat13formatAppListE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat13formatAppListE_1029 to void(...)*),i32 -2147483647}>,align 8
@x=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat13formatSeqListE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat13formatSeqListE_1030 to void(...)*),i32 -2147483647}>,align 8
@y=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat14formatDeclListE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat14formatDeclListE_1031 to void(...)*),i32 -2147483647}>,align 8
@z=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat14formatCaseListE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat14formatCaseListE_1032 to void(...)*),i32 -2147483647}>,align 8
@A=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat20formatEnclosedOptionE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat20formatEnclosedOptionE_1033 to void(...)*),i32 -2147483647}>,align 8
@B=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat20formatOptionalOptionE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat20formatOptionalOptionE_1034 to void(...)*),i32 -2147483647}>,align 8
@C=private unnamed_addr constant<{[4x i8],i32,[6x i8]}><{[4x i8]zeroinitializer,i32 -2147483642,[6x i8]c"SOME(\00"}>,align 8
@D=private unnamed_addr constant<{[4x i8],i32,[5x i8]}><{[4x i8]zeroinitializer,i32 -2147483643,[5x i8]c"NONE\00"}>,align 8
@E=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat12formatOptionE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat12formatOptionE_1035 to void(...)*),i32 -2147483647}>,align 8
@F=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat12keyValuePairE_331 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12keyValuePairE_1036 to void(...)*),i32 -2147483647}>,align 8
@G=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat12keyValuePairE_333 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12keyValuePairE_1037 to void(...)*),i32 -2147483647}>,align 8
@H=private unnamed_addr constant<{[4x i8],i32,i8*,i8*,i32}><{[4x i8]zeroinitializer,i32 -805306352,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@F,i32 0,i32 0,i32 0),i32 8),i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@G,i32 0,i32 0,i32 0),i32 8),i32 3}>,align 8
@I=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat12keyValuePairE_338 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12keyValuePairE_1038 to void(...)*),i32 -2147483647}>,align 8
@J=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat12keyValuePairE_341 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12keyValuePairE_1039 to void(...)*),i32 -2147483647}>,align 8
@K=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat12keyValuePairE_344 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12keyValuePairE_1041 to void(...)*),i32 -2147483647}>,align 8
@L=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat12keyValuePairE_346 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12keyValuePairE_1042 to void(...)*),i32 -2147483647}>,align 8
@M=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat12keyValuePairE_349 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12keyValuePairE_1043 to void(...)*),i32 -2147483647}>,align 8
@N=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat12keyValuePairE_351 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12keyValuePairE_1044 to void(...)*),i32 -2147483647}>,align 8
@O=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat12keyValuePairE_353 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12keyValuePairE_1045 to void(...)*),i32 -2147483647}>,align 8
@P=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat12keyValuePairE_355 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12keyValuePairE_1046 to void(...)*),i32 -2147483647}>,align 8
@Q=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat18formatEnclosedSEnvE_367 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedSEnvE_1050 to void(...)*),i32 -2147483647}>,align 8
@R=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat18formatEnclosedSEnvE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedSEnvE_1051 to void(...)*),i32 -2147483647}>,align 8
@S=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat18formatEnclosedListE_373 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_1052 to void(...)*),i32 -2147483647}>,align 8
@T=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat18formatEnclosedListE_375 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_1053 to void(...)*),i32 -2147483647}>,align 8
@U=private unnamed_addr constant<{[4x i8],i32,i8*,i8*,i32}><{[4x i8]zeroinitializer,i32 -805306352,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@S,i32 0,i32 0,i32 0),i32 8),i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@T,i32 0,i32 0,i32 0),i32 8),i32 3}>,align 8
@V=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat18formatEnclosedListE_380 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_1054 to void(...)*),i32 -2147483647}>,align 8
@W=private unnamed_addr constant<{[4x i8],i32,i32,i32,i32,[4x i8],i32}><{[4x i8]zeroinitializer,i32 -805306352,i32 1,i32 1,i32 0,[4x i8]zeroinitializer,i32 0}>,align 8
@X=private unnamed_addr constant<{[4x i8],i32,i8*,i32}><{[4x i8]zeroinitializer,i32 -805306360,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i32,i32,i32,[4x i8],i32}>,<{[4x i8],i32,i32,i32,i32,[4x i8],i32}>*@W,i32 0,i32 0,i32 0),i32 8),i32 1}>,align 8
@Y=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat18formatEnclosedListE_385 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_1055 to void(...)*),i32 -2147483647}>,align 8
@Z=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat18formatEnclosedListE_389 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_1056 to void(...)*),i32 -2147483647}>,align 8
@aa=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat18formatEnclosedListE_391 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_1057 to void(...)*),i32 -2147483647}>,align 8
@ab=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat18formatEnclosedListE_393 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_1058 to void(...)*),i32 -2147483647}>,align 8
@ac=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat18formatEnclosedListE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_1059 to void(...)*),i32 -2147483647}>,align 8
@ad=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_399 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_1060 to void(...)*),i32 -2147483647}>,align 8
@ae=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_401 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_1061 to void(...)*),i32 -2147483647}>,align 8
@af=private unnamed_addr constant<{[4x i8],i32,i8*,i8*,i32}><{[4x i8]zeroinitializer,i32 -805306352,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@ad,i32 0,i32 0,i32 0),i32 8),i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@ae,i32 0,i32 0,i32 0),i32 8),i32 3}>,align 8
@ag=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_406 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_1063 to void(...)*),i32 -2147483647}>,align 8
@ah=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_409 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_1064 to void(...)*),i32 -2147483647}>,align 8
@ai=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_412 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_1065 to void(...)*),i32 -2147483647}>,align 8
@aj=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_414 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_1066 to void(...)*),i32 -2147483647}>,align 8
@ak=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_416 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_1067 to void(...)*),i32 -2147483647}>,align 8
@al=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat23formatEnclosedSEnvPlainE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_1068 to void(...)*),i32 -2147483647}>,align 8
@am=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_423 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_1069 to void(...)*),i32 -2147483647}>,align 8
@an=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_425 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_1070 to void(...)*),i32 -2147483647}>,align 8
@ao=private unnamed_addr constant<{[4x i8],i32,i8*,i8*,i32}><{[4x i8]zeroinitializer,i32 -805306352,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@am,i32 0,i32 0,i32 0),i32 8),i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@an,i32 0,i32 0,i32 0),i32 8),i32 3}>,align 8
@ap=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_430 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_1072 to void(...)*),i32 -2147483647}>,align 8
@aq=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_433 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_1073 to void(...)*),i32 -2147483647}>,align 8
@ar=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_436 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_1074 to void(...)*),i32 -2147483647}>,align 8
@as=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_438 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_1075 to void(...)*),i32 -2147483647}>,align 8
@at=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_440 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_1076 to void(...)*),i32 -2147483647}>,align 8
@au=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat28formatEnclosedSymbolEnvPlainE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_1077 to void(...)*),i32 -2147483647}>,align 8
@av=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat10FormatComb9assocListE_447 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb9assocListE_1078 to void(...)*),i32 -2147483647}>,align 8
@aw=private unnamed_addr constant<{[4x i8],i32,[3x i8]}><{[4x i8]zeroinitializer,i32 -2147483645,[3x i8]c"=>\00"}>,align 8
@ax=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32,i32,i32)*@_SMLFN10TermFormat10FormatComb9assocListE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLLN10TermFormat10FormatComb9assocListE_1079 to void(...)*),i32 -2147483647}>,align 8
@ay=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat10FormatComb6recordE_469 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6recordE_1080 to void(...)*),i32 -2147483647}>,align 8
@az=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLFN10TermFormat10FormatComb6recordE to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6recordE_1081 to void(...)*),i32 -2147483647}>,align 8
@aA=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c"=\00"}>,align 8
@aB=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat15formatRecordExpE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat15formatRecordExpE_1082 to void(...)*),i32 -2147483647}>,align 8
@aC=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat21formatRecordExpToJsonE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat21formatRecordExpToJsonE_1083 to void(...)*),i32 -2147483647}>,align 8
@aD=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat14formatRecordTyE_514 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_1084 to void(...)*),i32 -2147483647}>,align 8
@aE=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat14formatRecordTyE_516 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_1085 to void(...)*),i32 -2147483647}>,align 8
@aF=private unnamed_addr constant<{[4x i8],i32,i8*,i8*,i32}><{[4x i8]zeroinitializer,i32 -805306352,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aD,i32 0,i32 0,i32 0),i32 8),i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aE,i32 0,i32 0,i32 0),i32 8),i32 3}>,align 8
@aG=private unnamed_addr constant<{[4x i8],i32,i32,i32,i32,[4x i8],i32}><{[4x i8]zeroinitializer,i32 -805306352,i32 0,i32 1,i32 5,[4x i8]zeroinitializer,i32 0}>,align 8
@aH=private unnamed_addr constant<{[4x i8],i32,i8*,i32}><{[4x i8]zeroinitializer,i32 -805306360,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i32,i32,i32,[4x i8],i32}>,<{[4x i8],i32,i32,i32,i32,[4x i8],i32}>*@aG,i32 0,i32 0,i32 0),i32 8),i32 1}>,align 8
@aI=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat14formatRecordTyE_523 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_1086 to void(...)*),i32 -2147483647}>,align 8
@aJ=private unnamed_addr constant<{[4x i8],i32,i32,i32,i32,[4x i8],i32}><{[4x i8]zeroinitializer,i32 -805306352,i32 1,i32 1,i32 6,[4x i8]zeroinitializer,i32 0}>,align 8
@aK=private unnamed_addr constant<{[4x i8],i32,i8*,i32}><{[4x i8]zeroinitializer,i32 -805306360,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i32,i32,i32,[4x i8],i32}>,<{[4x i8],i32,i32,i32,i32,[4x i8],i32}>*@aJ,i32 0,i32 0,i32 0),i32 8),i32 1}>,align 8
@aL=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat14formatRecordTyE_528 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_1087 to void(...)*),i32 -2147483647}>,align 8
@aM=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat14formatRecordTyE_530 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_1088 to void(...)*),i32 -2147483647}>,align 8
@aN=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat14formatRecordTyE_532 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_1089 to void(...)*),i32 -2147483647}>,align 8
@aO=private unnamed_addr constant<{[4x i8],i32,i8*,i8*,i32}><{[4x i8]zeroinitializer,i32 -805306352,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aM,i32 0,i32 0,i32 0),i32 8),i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aN,i32 0,i32 0,i32 0),i32 8),i32 3}>,align 8
@aP=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat14formatRecordTyE_536 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_1090 to void(...)*),i32 -2147483647}>,align 8
@aQ=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat14formatRecordTyE_539 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_1091 to void(...)*),i32 -2147483647}>,align 8
@aR=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c"*\00"}>,align 8
@aS=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat14formatRecordTyE_542 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_1092 to void(...)*),i32 -2147483647}>,align 8
@aT=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat14formatRecordTyE_545 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_1093 to void(...)*),i32 -2147483647}>,align 8
@aU=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat14formatRecordTyE_547 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_1094 to void(...)*),i32 -2147483647}>,align 8
@aV=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat14formatRecordTyE_550 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_1095 to void(...)*),i32 -2147483647}>,align 8
@aW=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat14formatRecordTyE_552 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_1096 to void(...)*),i32 -2147483647}>,align 8
@aX=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat14formatRecordTyE_554 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_1097 to void(...)*),i32 -2147483647}>,align 8
@aY=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat14formatRecordTyE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_1098 to void(...)*),i32 -2147483647}>,align 8
@aZ=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c":\00"}>,align 8
@a0=private unnamed_addr constant<{[4x i8],i32,[5x i8]}><{[4x i8]zeroinitializer,i32 -2147483643,[5x i8]c"...}\00"}>,align 8
@a1=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat19formatDummyRecordTyE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat19formatDummyRecordTyE_1099 to void(...)*),i32 -2147483647}>,align 8
@a2=private unnamed_addr constant<{[4x i8],i32,[57x i8]}><{[4x i8]zeroinitializer,i32 -2147483591,[57x i8]c"src/compiler/libs/util/main/TermFormat.sml:487.46(17139)\00"}>,align 8
@a3=private unnamed_addr constant<{[4x i8],i32,[57x i8]}><{[4x i8]zeroinitializer,i32 -2147483591,[57x i8]c"src/compiler/libs/util/main/TermFormat.sml:486.31(17069)\00"}>,align 8
@a4=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32)*@_SMLFN10TermFormat15formatFreeTyvarE to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat15formatFreeTyvarE_1116 to void(...)*),i32 -2147483647}>,align 8
@a5=private unnamed_addr constant<{[4x i8],i32,[57x i8]}><{[4x i8]zeroinitializer,i32 -2147483591,[57x i8]c"src/compiler/libs/util/main/TermFormat.sml:504.12(17668)\00"}>,align 8
@a6=private unnamed_addr constant<{[4x i8],i32,[9x i8]}><{[4x i8]zeroinitializer,i32 -2147483639,[9x i8]c"FREEBTV(\00"}>,align 8
@a7=private unnamed_addr constant<{[4x i8],i32,[57x i8]}><{[4x i8]zeroinitializer,i32 -2147483591,[57x i8]c"src/compiler/libs/util/main/TermFormat.sml:517.12(18044)\00"}>,align 8
@a8=private unnamed_addr constant<{[4x i8],i32,[57x i8]}><{[4x i8]zeroinitializer,i32 -2147483591,[57x i8]c"src/compiler/libs/util/main/TermFormat.sml:540.15(18846)\00"}>,align 8
@a9=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i32(i8*)*@_SMLL6tyvars_657 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6tyvars_1123 to void(...)*),i32 -2147483647}>,align 8
@ba=private unnamed_addr constant<{[4x i8],i32,[57x i8]}><{[4x i8]zeroinitializer,i32 -2147483591,[57x i8]c"src/compiler/libs/util/main/TermFormat.sml:563.15(19646)\00"}>,align 8
@bb=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i32(i8*)*@_SMLL6tyvars_668 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6tyvars_1126 to void(...)*),i32 -2147483647}>,align 8
@bc=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat10FormatComb4listE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat10FormatComb4listE_1129 to void(...)*),i32 -2147483647}>,align 8
@bd=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c",\00"}>,align 8
@be=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat10FormatComb6tuple2E_694 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6tuple2E_1131 to void(...)*),i32 -2147483647}>,align 8
@bf=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32,i32,i32)*@_SMLFN10TermFormat10FormatComb6tuple2E to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLLN10TermFormat10FormatComb6tuple2E_1132 to void(...)*),i32 -2147483647}>,align 8
@bg=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat10FormatComb6tuple3E_700 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6tuple3E_1133 to void(...)*),i32 -2147483647}>,align 8
@bh=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32,i32,i32,i32,i32)*@_SMLFN10TermFormat10FormatComb6tuple3E to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*,i8*,i8*)*@_SMLLN10TermFormat10FormatComb6tuple3E_1134 to void(...)*),i32 -2147483647}>,align 8
@bi=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat10FormatComb6tuple4E_706 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6tuple4E_1135 to void(...)*),i32 -2147483647}>,align 8
@bj=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32,i32,i32,i32,i32,i32,i32)*@_SMLFN10TermFormat10FormatComb6tuple4E to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*,i8*,i8*,i8*,i8*)*@_SMLLN10TermFormat10FormatComb6tuple4E_1136 to void(...)*),i32 -2147483647}>,align 8
@bk=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c"\0A\00"}>,align 8
@bl=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(void(i8*)*@_SMLLN10TermFormat10FormatComb4putsE_713 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb4putsE_1137 to void(...)*),i32 -2147483647}>,align 8
@bm=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLFN10TermFormat10FormatComb4termE to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb4termE_1140 to void(...)*),i32 -2147483647}>,align 8
@bn=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c"\22\00"}>,align 8
@bo=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c"(\00"}>,align 8
@bp=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c")\00"}>,align 8
@bq=private unnamed_addr constant<{[4x i8],i32,[3x i8]}><{[4x i8]zeroinitializer,i32 -2147483645,[3x i8]c"\5Cn\00"}>,align 8
@br=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat15formatFormatExpE_784 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat15formatFormatExpE_1141 to void(...)*),i32 -2147483647}>,align 8
@bs=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat15formatFormatExpE_786 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat15formatFormatExpE_1142 to void(...)*),i32 -2147483647}>,align 8
@bt=private unnamed_addr constant<{[4x i8],i32,i8*,i8*,i32}><{[4x i8]zeroinitializer,i32 -805306352,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@br,i32 0,i32 0,i32 0),i32 8),i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bs,i32 0,i32 0,i32 0),i32 8),i32 3}>,align 8
@bu=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat15formatFormatExpE_790 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat15formatFormatExpE_1143 to void(...)*),i32 -2147483647}>,align 8
@bv=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c"!\00"}>,align 8
@bw=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c"L\00"}>,align 8
@bx=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c"R\00"}>,align 8
@by=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c"N\00"}>,align 8
@bz=private unnamed_addr constant<{[4x i8],i32,[57x i8]}><{[4x i8]zeroinitializer,i32 -2147483591,[57x i8]c"src/compiler/libs/util/main/TermFormat.sml:610.24(21318)\00"}>,align 8
@bA=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat15formatFormatExpE_799 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat15formatFormatExpE_1144 to void(...)*),i32 -2147483647}>,align 8
@bB=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c"{\00"}>,align 8
@bC=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat15formatFormatExpE_802 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat15formatFormatExpE_1145 to void(...)*),i32 -2147483647}>,align 8
@bD=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat15formatFormatExpE_805 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat15formatFormatExpE_1146 to void(...)*),i32 -2147483647}>,align 8
@bE=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat15formatFormatExpE_808 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat15formatFormatExpE_1147 to void(...)*),i32 -2147483647}>,align 8
@bF=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat15formatFormatExpE_810 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat15formatFormatExpE_1148 to void(...)*),i32 -2147483647}>,align 8
@bG=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat15formatFormatExpE_813 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat15formatFormatExpE_1149 to void(...)*),i32 -2147483647}>,align 8
@bH=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c"}\00"}>,align 8
@bI=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat15formatFormatExpE_816 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat15formatFormatExpE_1150 to void(...)*),i32 -2147483647}>,align 8
@bJ=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat15formatFormatExpE_818 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat15formatFormatExpE_1151 to void(...)*),i32 -2147483647}>,align 8
@bK=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c"+\00"}>,align 8
@bL=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c"d\00"}>,align 8
@bM=private unnamed_addr constant<{[4x i8],i32,[1x i8]}><{[4x i8]zeroinitializer,i32 -2147483647,[1x i8]zeroinitializer}>,align 8
@bN=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c"[\00"}>,align 8
@bO=private unnamed_addr constant<{[4x i8],i32,[2x i8]}><{[4x i8]zeroinitializer,i32 -2147483646,[2x i8]c"]\00"}>,align 8
@bP=private unnamed_addr constant<{[4x i8],i32,i8*,i8*,i32}><{[4x i8]zeroinitializer,i32 -805306352,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@e,i32 0,i32 0,i32 0),i32 8),i8*null,i32 3}>,align 8
@bQ=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat15formatFormatExpE_828 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat15formatFormatExpE_1152 to void(...)*),i32 -2147483647}>,align 8
@bR=private unnamed_addr constant<{[4x i8],i32,[56x i8]}><{[4x i8]zeroinitializer,i32 -2147483592,[56x i8]c"src/compiler/libs/util/main/TermFormat.sml:598.6(20870)\00"}>,align 8
@bS=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat12formatFormatE_831 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12formatFormatE_1153 to void(...)*),i32 -2147483647}>,align 8
@bT=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32)*@_SMLFN10TermFormat7btvNameE to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat7btvNameE_1156 to void(...)*),i32 -2147483647}>,align 8
@bU=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat22formatEnclosedLabelMapE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat22formatEnclosedLabelMapE_1163 to void(...)*),i32 -2147483647}>,align 8
@bV=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32,i32,i32,i32,i32)*@_SMLFN10TermFormat17formatEnclosedMapE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*,i8*,i8*)*@_SMLLN10TermFormat17formatEnclosedMapE_1164 to void(...)*),i32 -2147483647}>,align 8
@bW=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLFN10TermFormat12formatFormatE to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12formatFormatE_1165 to void(...)*),i32 -2147483647}>,align 8
@bX=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat12formatIfConsE_864 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12formatIfConsE_1166 to void(...)*),i32 -2147483647}>,align 8
@bY=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat12formatIfConsE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat12formatIfConsE_1167 to void(...)*),i32 -2147483647}>,align 8
@bZ=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat13formatIfEmptyE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat13formatIfEmptyE_1168 to void(...)*),i32 -2147483647}>,align 8
@b0=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLFN10TermFormat19formatIfEmptyFormatE to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat19formatIfEmptyFormatE_1169 to void(...)*),i32 -2147483647}>,align 8
@b1=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat22formatIfEmptySymbolMapE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat22formatIfEmptySymbolMapE_1170 to void(...)*),i32 -2147483647}>,align 8
@b2=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat12formatIfListE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat12formatIfListE_1171 to void(...)*),i32 -2147483647}>,align 8
@b3=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat16formatIfNonEmptyE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat16formatIfNonEmptyE_1172 to void(...)*),i32 -2147483647}>,align 8
@b4=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat25formatIfNonEmptySymbolMapE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat25formatIfNonEmptySymbolMapE_1173 to void(...)*),i32 -2147483647}>,align 8
@b5=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat18formatOptionalListE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat18formatOptionalListE_1174 to void(...)*),i32 -2147483647}>,align 8
@b6=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32)*@_SMLFN10TermFormat7ftvNameE to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat7ftvNameE_1175 to void(...)*),i32 -2147483647}>,align 8
@b7=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat10FormatComb6begin__E_905 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6begin__E_1178 to void(...)*),i32 -2147483647}>,align 8
@b8=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat10FormatComb6begin__E_907 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6begin__E_1179 to void(...)*),i32 -2147483647}>,align 8
@b9=private unnamed_addr constant<{[4x i8],i32,i8*,i8*,i32}><{[4x i8]zeroinitializer,i32 -805306352,i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@b7,i32 0,i32 0,i32 0),i32 8),i8*getelementptr inbounds(i8,i8*getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@b8,i32 0,i32 0,i32 0),i32 8),i32 3}>,align 8
@ca=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i8*)*@_SMLLN10TermFormat10FormatComb4end__E_918 to void(...)*),void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb4end__E_1183 to void(...)*),i32 1}>,align 8
@_SMLZN10TermFormat18formatEnclosedListE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@ac,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat13formatAppListE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@w,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat13formatSeqListE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@x,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat18formatOptionalListE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@b5,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat14formatDeclListE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@y,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat14formatCaseListE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@z,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat20formatEnclosedOptionE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@A,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat20formatOptionalOptionE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@B,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat12formatOptionE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@E,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat17formatEnclosedMapE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bV,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat18formatEnclosedSEnvE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@R,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat22formatEnclosedLabelMapE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bU,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat23formatEnclosedSEnvPlainE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@al,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat28formatEnclosedSymbolEnvPlainE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@au,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat15formatRecordExpE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aB,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat21formatRecordExpToJsonE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aC,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat14formatRecordTyE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aY,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat19formatDummyRecordTyE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@a1,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat12formatIfConsE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bY,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat12formatIfListE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@b2,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat16formatIfNonEmptyE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@b3,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat13formatIfEmptyE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bZ,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat25formatIfNonEmptySymbolMapE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@b4,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat22formatIfEmptySymbolMapE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@b1,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat19formatIfEmptyFormatE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@b0,i64 0,i32 2)to i8*)
@cb=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat11emptyBtvEnvE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat11emptyBtvEnvE_1192 to void(...)*),i32 -2147483647}>,align 8
@_SMLZN10TermFormat11emptyBtvEnvE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@cb,i64 0,i32 2)to i8*)
@cc=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat10makeBtvEnvE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat10makeBtvEnvE_1193 to void(...)*),i32 -2147483647}>,align 8
@_SMLZN10TermFormat10makeBtvEnvE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@cc,i64 0,i32 2)to i8*)
@cd=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat12extendBtvEnvE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat12extendBtvEnvE_1194 to void(...)*),i32 -2147483647}>,align 8
@_SMLZN10TermFormat12extendBtvEnvE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@cd,i64 0,i32 2)to i8*)
@ce=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat21extendBtvEnvWithOrderE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat21extendBtvEnvWithOrderE_1195 to void(...)*),i32 -2147483647}>,align 8
@_SMLZN10TermFormat21extendBtvEnvWithOrderE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@ce,i64 0,i32 2)to i8*)
@cf=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat16formatBoundTyvarE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat16formatBoundTyvarE_1196 to void(...)*),i32 -2147483647}>,align 8
@_SMLZN10TermFormat16formatBoundTyvarE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@cf,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat7btvNameE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bT,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat15formatFreeTyvarE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@a4,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat7ftvNameE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@b6,i64 0,i32 2)to i8*)
@cg=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat10FormatComb6begin__E to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat10FormatComb6begin__E_1201 to void(...)*),i32 -2147483647}>,align 8
@_SMLZN10TermFormat10FormatComb6begin__E=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@cg,i64 0,i32 2)to i8*)
@ch=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat10FormatComb4end__E to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat10FormatComb4end__E_1202 to void(...)*),i32 -2147483647}>,align 8
@_SMLZN10TermFormat10FormatComb4end__E=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@ch,i64 0,i32 2)to i8*)
@ci=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32,i32,i32)*@_SMLFN10TermFormat10FormatComb4textE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLLN10TermFormat10FormatComb4textE_1203 to void(...)*),i32 -2147483647}>,align 8
@_SMLZN10TermFormat10FormatComb4textE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@ci,i64 0,i32 2)to i8*)
@cj=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32,i32,i32)*@_SMLFN10TermFormat10FormatComb5spaceE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLLN10TermFormat10FormatComb5spaceE_1204 to void(...)*),i32 -2147483647}>,align 8
@_SMLZN10TermFormat10FormatComb5spaceE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@cj,i64 0,i32 2)to i8*)
@ck=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32,i32,i32)*@_SMLFN10TermFormat10FormatComb6dspaceE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLLN10TermFormat10FormatComb6dspaceE_1205 to void(...)*),i32 -2147483647}>,align 8
@_SMLZN10TermFormat10FormatComb6dspaceE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@ck,i64 0,i32 2)to i8*)
@cl=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32,i32,i32)*@_SMLFN10TermFormat10FormatComb7newlineE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLLN10TermFormat10FormatComb7newlineE_1206 to void(...)*),i32 -2147483647}>,align 8
@_SMLZN10TermFormat10FormatComb7newlineE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@cl,i64 0,i32 2)to i8*)
@cm=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32,i32,i32)*@_SMLFN10TermFormat10FormatComb1_DE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLLN10TermFormat10FormatComb1_DE_1207 to void(...)*),i32 -2147483647}>,align 8
@_SMLZN10TermFormat10FormatComb1_DE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@cm,i64 0,i32 2)to i8*)
@cn=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32,i32,i32,i32,i32)*@_SMLFN10TermFormat10FormatComb6guard__E to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*,i8*,i8*)*@_SMLLN10TermFormat10FormatComb6guard__E_1208 to void(...)*),i32 -2147483647}>,align 8
@_SMLZN10TermFormat10FormatComb6guard__E=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@cn,i64 0,i32 2)to i8*)
@co=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32,i32,i32,i32,i32)*@_SMLFN10TermFormat10FormatComb5nest__E to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*,i8*,i8*)*@_SMLLN10TermFormat10FormatComb5nest__E_1209 to void(...)*),i32 -2147483647}>,align 8
@_SMLZN10TermFormat10FormatComb5nest__E=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@co,i64 0,i32 2)to i8*)
@cp=private unnamed_addr constant<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}><{[4x i8]zeroinitializer,i32 -805306344,i8*null,void(...)*bitcast(i8*(i32,i32)*@_SMLFN10TermFormat10FormatComb4putsE to void(...)*),void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat10FormatComb4putsE_1210 to void(...)*),i32 -2147483647}>,align 8
@_SMLZN10TermFormat10FormatComb4putsE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@cp,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat10FormatComb4termE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bm,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat10FormatComb4listE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bc,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat10FormatComb9assocListE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@ax,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat10FormatComb6recordE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@az,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat10FormatComb6tuple2E=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bf,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat10FormatComb6tuple3E=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bh,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat10FormatComb6tuple4E=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bj,i64 0,i32 2)to i8*)
@_SMLZN10TermFormat12formatFormatE=local_unnamed_addr constant i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bW,i64 0,i32 2)to i8*)
@_SML_gvar6f2b90f74b409277_TermFormat=private global<{[4x i8],i32,[2x i8*]}><{[4x i8]zeroinitializer,i32 -1342177264,[2x i8*]zeroinitializer}>,align 8
@cq=private unnamed_addr global[2x i64][i64 1,i64 sub(i64 ptrtoint(i8**getelementptr inbounds(<{[4x i8],i32,[2x i8*]}>,<{[4x i8],i32,[2x i8*]}>*@_SML_gvar6f2b90f74b409277_TermFormat,i32 0,i32 2,i32 0)to i64),i64 ptrtoint([2x i64]*@cq to i64))]
@_SML_ftab6f2b90f74b409277_TermFormat=external global i8
@cr=private unnamed_addr global i8 0
@_SMLZN10TermFormat12formatBtvEnvE=alias i8*,getelementptr inbounds(<{[4x i8],i32,[2x i8*]}>,<{[4x i8],i32,[2x i8*]}>*@_SML_gvar6f2b90f74b409277_TermFormat,i32 0,i32 2,i32 0)
@_SMLZN10TermFormat20formatBtvEnvWithTypeE=alias i8*,getelementptr inbounds(<{[4x i8],i32,[2x i8*]}>,<{[4x i8],i32,[2x i8*]}>*@_SML_gvar6f2b90f74b409277_TermFormat,i32 0,i32 2,i32 1)
declare void@llvm.gcroot(i8**,i8*)#0
declare i8*@sml_alloc(i32 inreg)local_unnamed_addr#0
declare void@sml_check(i32 inreg)local_unnamed_addr
declare void@sml_end()local_unnamed_addr#0
declare void@sml_gcroot(i8*,void()*,i8*,i8*)local_unnamed_addr#0
declare void@sml_matchcomp_bug()local_unnamed_addr
declare void@sml_raise(i8*inreg)local_unnamed_addr#1
declare void@sml_start(i8*inreg)local_unnamed_addr#0
declare void@sml_write(i8*inreg,i8**inreg,i8*inreg)local_unnamed_addr#0
declare i8*@_SMLFN10ListSorter4sortE(i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN11RecordLabel10isTupleMapE(i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN11RecordLabel3Map10listItemsiE(i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN11RecordLabel3Map5foldrE(i32 inreg,i32 inreg,i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN11RecordLabel3Map9listItemsE(i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i32@_SMLFN13FreeTypeVarID5toIntE(i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN14BoundTypeVarID3Map10listItemsiE(i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN14BoundTypeVarID3Map4findE(i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN14BoundTypeVarID3Map5emptyE(i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN14BoundTypeVarID3Map6foldliE(i32 inreg,i32 inreg,i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN14BoundTypeVarID3Map6insertE(i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN14BoundTypeVarID3Map6removeE(i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN14BoundTypeVarID3Map8inDomainE(i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i32@_SMLFN14BoundTypeVarID7compareE(i8*inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN14BoundTypeVarID8toStringE(i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN15BasicFormatters11format__listE(i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN3Bug11prettyPrintE(i8*inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN4List3mapE(i32 inreg,i32 inreg,i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN4List4nullE(i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN4List5foldlE(i32 inreg,i32 inreg,i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN4List5foldrE(i32 inreg,i32 inreg,i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN4List6concatE(i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN4SEnv10listItemsiE(i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN4SEnv7isEmptyE(i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i32@_SMLFN5Int327compareE(i8*inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN5Int328toStringE(i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN6String1_ZE(i8*inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN6String3strE(i8 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN6String8toStringE(i8*inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN6Symbol13format__symbolE(i8*inreg)local_unnamed_addr#2 gc"smlsharp"
declare void@_SMLFN6TextIO5printE(i8*inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN9SymbolEnv10listItemsiE(i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare i8*@_SMLFN9SymbolEnv7isEmptyE(i32 inreg,i32 inreg)local_unnamed_addr#2 gc"smlsharp"
declare void@_SML_main5148a836b3728be9_Int32()local_unnamed_addr#2 gc"smlsharp"
declare void@_SML_main03d87556ec7f64b2_List()local_unnamed_addr#2 gc"smlsharp"
declare void@_SML_main1ef93e13728790b1_String()local_unnamed_addr#2 gc"smlsharp"
declare void@_SML_main3446b7b079949ccf_text_io()local_unnamed_addr#2 gc"smlsharp"
declare void@_SML_main6ad4d8e473c26a9c_BasicFormatters()local_unnamed_addr#2 gc"smlsharp"
declare void@_SML_main44ca35c4c731682b_Symbol()local_unnamed_addr#2 gc"smlsharp"
declare void@_SML_main60e750412e2bb4fe_RecordLabel()local_unnamed_addr#2 gc"smlsharp"
declare void@_SML_maineaa0aca8fbe4101a_Bug()local_unnamed_addr#2 gc"smlsharp"
declare void@_SML_main7374574ddb619c6a_LocalID()local_unnamed_addr#2 gc"smlsharp"
declare void@_SML_maind12f270a309dc7dd_SEnv()local_unnamed_addr#2 gc"smlsharp"
declare void@_SML_main92a9fd50084b022c_ListSorter()local_unnamed_addr#2 gc"smlsharp"
declare void@_SML_load5148a836b3728be9_Int32(i8*)local_unnamed_addr
declare void@_SML_load03d87556ec7f64b2_List(i8*)local_unnamed_addr
declare void@_SML_load1ef93e13728790b1_String(i8*)local_unnamed_addr
declare void@_SML_load3446b7b079949ccf_text_io(i8*)local_unnamed_addr
declare void@_SML_load6ad4d8e473c26a9c_BasicFormatters(i8*)local_unnamed_addr
declare void@_SML_load44ca35c4c731682b_Symbol(i8*)local_unnamed_addr
declare void@_SML_load60e750412e2bb4fe_RecordLabel(i8*)local_unnamed_addr
declare void@_SML_loadeaa0aca8fbe4101a_Bug(i8*)local_unnamed_addr
declare void@_SML_load7374574ddb619c6a_LocalID(i8*)local_unnamed_addr
declare void@_SML_loadd12f270a309dc7dd_SEnv(i8*)local_unnamed_addr
declare void@_SML_load92a9fd50084b022c_ListSorter(i8*)local_unnamed_addr
define private void@_SML_tabb6f2b90f74b409277_TermFormat()#3{
unreachable
}
define void@_SML_load6f2b90f74b409277_TermFormat(i8*%a)local_unnamed_addr#0{
%b=load i8,i8*@cr,align 1
%c=icmp eq i8%b,0
br i1%c,label%e,label%d
d:
ret void
e:
store i8 1,i8*@cr,align 1
tail call void@_SML_load5148a836b3728be9_Int32(i8*%a)#0
tail call void@_SML_load03d87556ec7f64b2_List(i8*%a)#0
tail call void@_SML_load1ef93e13728790b1_String(i8*%a)#0
tail call void@_SML_load3446b7b079949ccf_text_io(i8*%a)#0
tail call void@_SML_load6ad4d8e473c26a9c_BasicFormatters(i8*%a)#0
tail call void@_SML_load44ca35c4c731682b_Symbol(i8*%a)#0
tail call void@_SML_load60e750412e2bb4fe_RecordLabel(i8*%a)#0
tail call void@_SML_loadeaa0aca8fbe4101a_Bug(i8*%a)#0
tail call void@_SML_load7374574ddb619c6a_LocalID(i8*%a)#0
tail call void@_SML_loadd12f270a309dc7dd_SEnv(i8*%a)#0
tail call void@_SML_load92a9fd50084b022c_ListSorter(i8*%a)#0
tail call void@sml_gcroot(i8*%a,void()*@_SML_tabb6f2b90f74b409277_TermFormat,i8*@_SML_ftab6f2b90f74b409277_TermFormat,i8*bitcast([2x i64]*@cq to i8*))#0
ret void
}
define void@_SML_main6f2b90f74b409277_TermFormat()local_unnamed_addr#2 gc"smlsharp"{
%a=alloca[3x i8*],align 8
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=load i8,i8*@cr,align 1
%f=and i8%e,2
%g=icmp eq i8%f,0
br i1%g,label%i,label%h
h:
ret void
i:
store i8 3,i8*@cr,align 1
tail call void@_SML_main5148a836b3728be9_Int32()#2
tail call void@_SML_main03d87556ec7f64b2_List()#2
tail call void@_SML_main1ef93e13728790b1_String()#2
tail call void@_SML_main3446b7b079949ccf_text_io()#2
tail call void@_SML_main6ad4d8e473c26a9c_BasicFormatters()#2
tail call void@_SML_main44ca35c4c731682b_Symbol()#2
tail call void@_SML_main60e750412e2bb4fe_RecordLabel()#2
tail call void@_SML_maineaa0aca8fbe4101a_Bug()#2
tail call void@_SML_main7374574ddb619c6a_LocalID()#2
tail call void@_SML_maind12f270a309dc7dd_SEnv()#2
tail call void@_SML_main92a9fd50084b022c_ListSorter()#2
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
%j=bitcast[3x i8*]*%a to i8*
call void@sml_start(i8*inreg%j)#0
%k=call i8*@sml_alloc(i32 inreg 20)#0
%l=getelementptr inbounds i8,i8*%k,i64 -4
%m=bitcast i8*%l to i32*
store i32 1342177296,i32*%m,align 4
store i8*%k,i8**%b,align 8
%n=getelementptr inbounds i8,i8*%k,i64 4
%o=bitcast i8*%n to i32*
store i32 0,i32*%o,align 1
%p=bitcast i8*%k to i32*
store i32 1,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%k,i64 8
%r=bitcast i8*%q to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bd,i64 0,i32 2,i64 0),i8**%r,align 8
%s=getelementptr inbounds i8,i8*%k,i64 16
%t=bitcast i8*%s to i32*
store i32 2,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 20)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177296,i32*%w,align 4
store i8*%u,i8**%c,align 8
%x=getelementptr inbounds i8,i8*%u,i64 4
%y=bitcast i8*%x to i32*
store i32 0,i32*%y,align 1
%z=bitcast i8*%u to i32*
store i32 6,i32*%z,align 4
%A=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%B=getelementptr inbounds i8,i8*%u,i64 8
%C=bitcast i8*%B to i8**
store i8*%A,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 16
%E=bitcast i8*%D to i32*
store i32 2,i32*%E,align 4
%F=call i8*@sml_alloc(i32 inreg 20)#0
%G=getelementptr inbounds i8,i8*%F,i64 -4
%H=bitcast i8*%G to i32*
store i32 1342177296,i32*%H,align 4
store i8*%F,i8**%d,align 8
%I=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%J=bitcast i8*%F to i8**
store i8*%I,i8**%J,align 8
%K=getelementptr inbounds i8,i8*%F,i64 8
%L=bitcast i8*%K to i8**
store i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,i8*,i32}>,<{[4x i8],i32,i8*,i8*,i32}>*@bP,i64 0,i32 2)to i8*),i8**%L,align 8
%M=getelementptr inbounds i8,i8*%F,i64 16
%N=bitcast i8*%M to i32*
store i32 3,i32*%N,align 4
%O=call i8*@sml_alloc(i32 inreg 20)#0
%P=getelementptr inbounds i8,i8*%O,i64 -4
%Q=bitcast i8*%P to i32*
store i32 1342177296,i32*%Q,align 4
store i8*%O,i8**%b,align 8
%R=getelementptr inbounds i8,i8*%O,i64 4
%S=bitcast i8*%R to i32*
store i32 0,i32*%S,align 1
%T=bitcast i8*%O to i32*
store i32 1,i32*%T,align 4
%U=getelementptr inbounds i8,i8*%O,i64 8
%V=bitcast i8*%U to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bd,i64 0,i32 2,i64 0),i8**%V,align 8
%W=getelementptr inbounds i8,i8*%O,i64 16
%X=bitcast i8*%W to i32*
store i32 2,i32*%X,align 4
%Y=call i8*@sml_alloc(i32 inreg 20)#0
%Z=getelementptr inbounds i8,i8*%Y,i64 -4
%aa=bitcast i8*%Z to i32*
store i32 1342177296,i32*%aa,align 4
store i8*%Y,i8**%c,align 8
%ab=getelementptr inbounds i8,i8*%Y,i64 4
%ac=bitcast i8*%ab to i32*
store i32 0,i32*%ac,align 1
%ad=bitcast i8*%Y to i32*
store i32 6,i32*%ad,align 4
%ae=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%af=getelementptr inbounds i8,i8*%Y,i64 8
%ag=bitcast i8*%af to i8**
store i8*%ae,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%Y,i64 16
%ai=bitcast i8*%ah to i32*
store i32 2,i32*%ai,align 4
%aj=call i8*@sml_alloc(i32 inreg 20)#0
%ak=getelementptr inbounds i8,i8*%aj,i64 -4
%al=bitcast i8*%ak to i32*
store i32 1342177296,i32*%al,align 4
%am=load i8*,i8**%c,align 8
%an=bitcast i8*%aj to i8**
store i8*%am,i8**%an,align 8
%ao=getelementptr inbounds i8,i8*%aj,i64 8
%ap=bitcast i8*%ao to i8**
store i8*null,i8**%ap,align 8
%aq=getelementptr inbounds i8,i8*%aj,i64 16
%ar=bitcast i8*%aq to i32*
store i32 3,i32*%ar,align 4
store i8*%am,i8**%b,align 8
store i8*null,i8**%c,align 8
%as=call i8*@sml_alloc(i32 inreg 20)#0
%at=getelementptr inbounds i8,i8*%as,i64 -4
%au=bitcast i8*%at to i32*
store i32 1342177296,i32*%au,align 4
%av=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%aw=bitcast i8*%as to i8**
store i8*%av,i8**%aw,align 8
%ax=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ay=getelementptr inbounds i8,i8*%as,i64 8
%az=bitcast i8*%ay to i8**
store i8*%ax,i8**%az,align 8
%aA=getelementptr inbounds i8,i8*%as,i64 16
%aB=bitcast i8*%aA to i32*
store i32 3,i32*%aB,align 4
%aC=call i8*@sml_alloc(i32 inreg 12)#0
%aD=getelementptr inbounds i8,i8*%aC,i64 -4
%aE=bitcast i8*%aD to i32*
store i32 1342177288,i32*%aE,align 4
store i8*%aC,i8**%b,align 8
%aF=load i8*,i8**%d,align 8
%aG=bitcast i8*%aC to i8**
store i8*%aF,i8**%aG,align 8
%aH=getelementptr inbounds i8,i8*%aC,i64 8
%aI=bitcast i8*%aH to i32*
store i32 1,i32*%aI,align 4
%aJ=call i8*@sml_alloc(i32 inreg 28)#0
%aK=getelementptr inbounds i8,i8*%aJ,i64 -4
%aL=bitcast i8*%aK to i32*
store i32 1342177304,i32*%aL,align 4
%aM=load i8*,i8**%b,align 8
%aN=bitcast i8*%aJ to i8**
store i8*%aM,i8**%aN,align 8
%aO=getelementptr inbounds i8,i8*%aJ,i64 8
%aP=bitcast i8*%aO to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN10TermFormat12formatBtvEnvE_663 to void(...)*),void(...)**%aP,align 8
%aQ=getelementptr inbounds i8,i8*%aJ,i64 16
%aR=bitcast i8*%aQ to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat12formatBtvEnvE_1125 to void(...)*),void(...)**%aR,align 8
%aS=getelementptr inbounds i8,i8*%aJ,i64 24
%aT=bitcast i8*%aS to i32*
store i32 -2147483647,i32*%aT,align 4
%aU=call i8*@sml_alloc(i32 inreg 12)#0
%aV=getelementptr inbounds i8,i8*%aU,i64 -4
%aW=bitcast i8*%aV to i32*
store i32 1342177288,i32*%aW,align 4
store i8*%aU,i8**%c,align 8
%aX=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aY=bitcast i8*%aU to i8**
store i8*%aX,i8**%aY,align 8
%aZ=getelementptr inbounds i8,i8*%aU,i64 8
%a0=bitcast i8*%aZ to i32*
store i32 1,i32*%a0,align 4
%a1=call i8*@sml_alloc(i32 inreg 28)#0
%a2=getelementptr inbounds i8,i8*%a1,i64 -4
%a3=bitcast i8*%a2 to i32*
store i32 1342177304,i32*%a3,align 4
%a4=load i8*,i8**%c,align 8
%a5=bitcast i8*%a1 to i8**
store i8*%a4,i8**%a5,align 8
%a6=getelementptr inbounds i8,i8*%a1,i64 8
%a7=bitcast i8*%a6 to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_674 to void(...)*),void(...)**%a7,align 8
%a8=getelementptr inbounds i8,i8*%a1,i64 16
%a9=bitcast i8*%a8 to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_1128 to void(...)*),void(...)**%a9,align 8
%ba=getelementptr inbounds i8,i8*%a1,i64 24
%bb=bitcast i8*%ba to i32*
store i32 -2147483647,i32*%bb,align 4
%bc=call i8*@sml_alloc(i32 inreg 12)#0
%bd=getelementptr inbounds i8,i8*%bc,i64 -4
%be=bitcast i8*%bd to i32*
store i32 1342177288,i32*%be,align 4
store i8*%bc,i8**%d,align 8
%bf=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%bg=bitcast i8*%bc to i8**
store i8*%bf,i8**%bg,align 8
%bh=getelementptr inbounds i8,i8*%bc,i64 8
%bi=bitcast i8*%bh to i32*
store i32 1,i32*%bi,align 4
%bj=call i8*@sml_alloc(i32 inreg 28)#0
%bk=getelementptr inbounds i8,i8*%bj,i64 -4
%bl=bitcast i8*%bk to i32*
store i32 1342177304,i32*%bl,align 4
%bm=load i8*,i8**%d,align 8
%bn=bitcast i8*%bj to i8**
store i8*%bm,i8**%bn,align 8
%bo=getelementptr inbounds i8,i8*%bj,i64 8
%bp=bitcast i8*%bo to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN10TermFormat12formatBtvEnvE_849 to void(...)*),void(...)**%bp,align 8
%bq=getelementptr inbounds i8,i8*%bj,i64 16
%br=bitcast i8*%bq to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat12formatBtvEnvE_1161 to void(...)*),void(...)**%br,align 8
%bs=getelementptr inbounds i8,i8*%bj,i64 24
%bt=bitcast i8*%bs to i32*
store i32 -2147483647,i32*%bt,align 4
%bu=call i8*@sml_alloc(i32 inreg 12)#0
%bv=getelementptr inbounds i8,i8*%bu,i64 -4
%bw=bitcast i8*%bv to i32*
store i32 1342177288,i32*%bw,align 4
store i8*%bu,i8**%b,align 8
%bx=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%by=bitcast i8*%bu to i8**
store i8*%bx,i8**%by,align 8
%bz=getelementptr inbounds i8,i8*%bu,i64 8
%bA=bitcast i8*%bz to i32*
store i32 1,i32*%bA,align 4
%bB=call i8*@sml_alloc(i32 inreg 28)#0
%bC=getelementptr inbounds i8,i8*%bB,i64 -4
%bD=bitcast i8*%bC to i32*
store i32 1342177304,i32*%bD,align 4
%bE=load i8*,i8**%b,align 8
%bF=bitcast i8*%bB to i8**
store i8*%bE,i8**%bF,align 8
%bG=getelementptr inbounds i8,i8*%bB,i64 8
%bH=bitcast i8*%bG to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_852 to void(...)*),void(...)**%bH,align 8
%bI=getelementptr inbounds i8,i8*%bB,i64 16
%bJ=bitcast i8*%bI to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_1162 to void(...)*),void(...)**%bJ,align 8
%bK=getelementptr inbounds i8,i8*%bB,i64 24
%bL=bitcast i8*%bK to i32*
store i32 -2147483647,i32*%bL,align 4
%bM=call i8*@sml_alloc(i32 inreg 12)#0
%bN=getelementptr inbounds i8,i8*%bM,i64 -4
%bO=bitcast i8*%bN to i32*
store i32 1342177288,i32*%bO,align 4
store i8*%bM,i8**%c,align 8
%bP=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bQ=bitcast i8*%bM to i8**
store i8*%bP,i8**%bQ,align 8
%bR=getelementptr inbounds i8,i8*%bM,i64 8
%bS=bitcast i8*%bR to i32*
store i32 1,i32*%bS,align 4
%bT=call i8*@sml_alloc(i32 inreg 28)#0
%bU=getelementptr inbounds i8,i8*%bT,i64 -4
%bV=bitcast i8*%bU to i32*
store i32 1342177304,i32*%bV,align 4
%bW=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bX=bitcast i8*%bT to i8**
store i8*%bW,i8**%bX,align 8
%bY=getelementptr inbounds i8,i8*%bT,i64 8
%bZ=bitcast i8*%bY to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN10TermFormat12formatBtvEnvE_964 to void(...)*),void(...)**%bZ,align 8
%b0=getelementptr inbounds i8,i8*%bT,i64 16
%b1=bitcast i8*%b0 to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat12formatBtvEnvE_1197 to void(...)*),void(...)**%b1,align 8
%b2=getelementptr inbounds i8,i8*%bT,i64 24
%b3=bitcast i8*%b2 to i32*
store i32 -2147483647,i32*%b3,align 4
call void@sml_write(i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,[2x i8*]}>,<{[4x i8],i32,[2x i8*]}>*@_SML_gvar6f2b90f74b409277_TermFormat,i64 0,i32 2,i64 0)to i8*),i8**inreg getelementptr inbounds(<{[4x i8],i32,[2x i8*]}>,<{[4x i8],i32,[2x i8*]}>*@_SML_gvar6f2b90f74b409277_TermFormat,i64 0,i32 2,i64 0),i8*inreg%bT)#0
%b4=call i8*@sml_alloc(i32 inreg 12)#0
%b5=getelementptr inbounds i8,i8*%b4,i64 -4
%b6=bitcast i8*%b5 to i32*
store i32 1342177288,i32*%b6,align 4
store i8*%b4,i8**%c,align 8
%b7=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%b8=bitcast i8*%b4 to i8**
store i8*%b7,i8**%b8,align 8
%b9=getelementptr inbounds i8,i8*%b4,i64 8
%ca=bitcast i8*%b9 to i32*
store i32 1,i32*%ca,align 4
%cb=call i8*@sml_alloc(i32 inreg 28)#0
%cc=getelementptr inbounds i8,i8*%cb,i64 -4
%cd=bitcast i8*%cc to i32*
store i32 1342177304,i32*%cd,align 4
%ce=load i8*,i8**%c,align 8
%cf=bitcast i8*%cb to i8**
store i8*%ce,i8**%cf,align 8
%cg=getelementptr inbounds i8,i8*%cb,i64 8
%ch=bitcast i8*%cg to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_967 to void(...)*),void(...)**%ch,align 8
%ci=getelementptr inbounds i8,i8*%cb,i64 16
%cj=bitcast i8*%ci to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_1199 to void(...)*),void(...)**%cj,align 8
%ck=getelementptr inbounds i8,i8*%cb,i64 24
%cl=bitcast i8*%ck to i32*
store i32 -2147483647,i32*%cl,align 4
call void@sml_write(i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,[2x i8*]}>,<{[4x i8],i32,[2x i8*]}>*@_SML_gvar6f2b90f74b409277_TermFormat,i64 0,i32 2,i64 0)to i8*),i8**inreg getelementptr inbounds(<{[4x i8],i32,[2x i8*]}>,<{[4x i8],i32,[2x i8*]}>*@_SML_gvar6f2b90f74b409277_TermFormat,i64 0,i32 2,i64 1),i8*inreg%cb)#0
call void@sml_end()#0
ret void
}
define internal fastcc i8*@_SMLLN10TermFormat4nestE_190(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%b,i8**%c,align 8
%f=bitcast i8*%a to i32*
%g=load i32,i32*%f,align 4
%h=call i8*@sml_alloc(i32 inreg 12)#0
%i=bitcast i8*%h to i32*
%j=getelementptr inbounds i8,i8*%h,i64 -4
%k=bitcast i8*%j to i32*
store i32 1342177288,i32*%k,align 4
store i8*%h,i8**%d,align 8
store i32 5,i32*%i,align 4
%l=getelementptr inbounds i8,i8*%h,i64 4
%m=bitcast i8*%l to i32*
store i32%g,i32*%m,align 4
%n=getelementptr inbounds i8,i8*%h,i64 8
%o=bitcast i8*%n to i32*
store i32 0,i32*%o,align 4
%p=call i8*@sml_alloc(i32 inreg 20)#0
%q=getelementptr inbounds i8,i8*%p,i64 -4
%r=bitcast i8*%q to i32*
store i32 1342177296,i32*%r,align 4
store i8*%p,i8**%e,align 8
%s=getelementptr inbounds i8,i8*%p,i64 4
%t=bitcast i8*%s to i32*
store i32 0,i32*%t,align 1
%u=bitcast i8*%p to i32*
store i32 4,i32*%u,align 4
%v=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%w=getelementptr inbounds i8,i8*%p,i64 8
%x=bitcast i8*%w to i8**
store i8*%v,i8**%x,align 8
%y=getelementptr inbounds i8,i8*%p,i64 16
%z=bitcast i8*%y to i32*
store i32 2,i32*%z,align 4
%A=call i8*@sml_alloc(i32 inreg 20)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177296,i32*%C,align 4
store i8*%A,i8**%c,align 8
%D=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%E=bitcast i8*%A to i8**
store i8*%D,i8**%E,align 8
%F=getelementptr inbounds i8,i8*%A,i64 8
%G=bitcast i8*%F to i8**
store i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,i8*,i32}>,<{[4x i8],i32,i8*,i8*,i32}>*@k,i64 0,i32 2)to i8*),i8**%G,align 8
%H=getelementptr inbounds i8,i8*%A,i64 16
%I=bitcast i8*%H to i32*
store i32 3,i32*%I,align 4
%J=call i8*@sml_alloc(i32 inreg 20)#0
%K=getelementptr inbounds i8,i8*%J,i64 -4
%L=bitcast i8*%K to i32*
store i32 1342177296,i32*%L,align 4
%M=load i8*,i8**%d,align 8
%N=bitcast i8*%J to i8**
store i8*%M,i8**%N,align 8
%O=load i8*,i8**%c,align 8
%P=getelementptr inbounds i8,i8*%J,i64 8
%Q=bitcast i8*%P to i8**
store i8*%O,i8**%Q,align 8
%R=getelementptr inbounds i8,i8*%J,i64 16
%S=bitcast i8*%R to i32*
store i32 3,i32*%S,align 4
ret i8*%J
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb4textE_193(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
m:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%k,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%d,align 8
br label%k
k:
%l=phi i8*[%j,%i],[%a,%m]
%n=bitcast i8*%l to i8**
%o=getelementptr inbounds i8,i8*%l,i64 8
%p=bitcast i8*%o to i8***
%q=load i8**,i8***%p,align 8
%r=load i8*,i8**%q,align 8
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%f,align 8
%x=load i8*,i8**%n,align 8
%y=getelementptr inbounds i8,i8*%x,i64 -4
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=and i32%A,268435455
%C=add nsw i32%B,-1
store i8*%x,i8**%d,align 8
%D=call i8*@sml_alloc(i32 inreg 20)#0
%E=getelementptr inbounds i8,i8*%D,i64 -4
%F=bitcast i8*%E to i32*
store i32 1342177296,i32*%F,align 4
store i8*%D,i8**%e,align 8
%G=getelementptr inbounds i8,i8*%D,i64 4
%H=bitcast i8*%G to i32*
store i32 0,i32*%H,align 1
%I=bitcast i8*%D to i32*
store i32%C,i32*%I,align 4
%J=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%K=getelementptr inbounds i8,i8*%D,i64 8
%L=bitcast i8*%K to i8**
store i8*%J,i8**%L,align 8
%M=getelementptr inbounds i8,i8*%D,i64 16
%N=bitcast i8*%M to i32*
store i32 2,i32*%N,align 4
%O=call i8*@sml_alloc(i32 inreg 20)#0
%P=getelementptr inbounds i8,i8*%O,i64 -4
%Q=bitcast i8*%P to i32*
store i32 1342177296,i32*%Q,align 4
store i8*%O,i8**%d,align 8
%R=getelementptr inbounds i8,i8*%O,i64 4
%S=bitcast i8*%R to i32*
store i32 0,i32*%S,align 1
%T=bitcast i8*%O to i32*
store i32 6,i32*%T,align 4
%U=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%V=getelementptr inbounds i8,i8*%O,i64 8
%W=bitcast i8*%V to i8**
store i8*%U,i8**%W,align 8
%X=getelementptr inbounds i8,i8*%O,i64 16
%Y=bitcast i8*%X to i32*
store i32 2,i32*%Y,align 4
%Z=call i8*@sml_alloc(i32 inreg 20)#0
%aa=getelementptr inbounds i8,i8*%Z,i64 -4
%ab=bitcast i8*%aa to i32*
store i32 1342177296,i32*%ab,align 4
%ac=load i8*,i8**%d,align 8
%ad=bitcast i8*%Z to i8**
store i8*%ac,i8**%ad,align 8
%ae=load i8*,i8**%c,align 8
%af=getelementptr inbounds i8,i8*%Z,i64 8
%ag=bitcast i8*%af to i8**
store i8*%ae,i8**%ag,align 8
%ah=getelementptr inbounds i8,i8*%Z,i64 16
%ai=bitcast i8*%ah to i32*
store i32 3,i32*%ai,align 4
%aj=load i8*,i8**%f,align 8
%ak=tail call fastcc i8*%u(i8*inreg%aj,i8*inreg%Z)
ret i8*%ak
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb4textE_194(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8**
br label%q
l:
call void@sml_check(i32 inreg%h)
%m=load i8*,i8**%c,align 8
%n=bitcast i8**%d to i8***
%o=load i8**,i8***%n,align 8
%p=bitcast i8**%o to i8*
br label%q
q:
%r=phi i8*[%p,%l],[%a,%j]
%s=phi i8**[%o,%l],[%k,%j]
%t=phi i8*[%m,%l],[%b,%j]
%u=load i8*,i8**%s,align 8
store i8*%u,i8**%f,align 8
%v=getelementptr inbounds i8,i8*%u,i64 8
%w=bitcast i8*%v to i8**
%x=load i8*,i8**%w,align 8
store i8*%x,i8**%c,align 8
%y=getelementptr inbounds i8,i8*%t,i64 16
%z=bitcast i8*%y to i8*(i8*,i8*)**
%A=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%z,align 8
%B=bitcast i8*%t to i8**
%C=load i8*,i8**%B,align 8
store i8*%C,i8**%e,align 8
%D=getelementptr inbounds i8,i8*%r,i64 8
%E=bitcast i8*%D to i8**
%F=load i8*,i8**%E,align 8
store i8*%F,i8**%d,align 8
%G=call i8*@sml_alloc(i32 inreg 20)#0
%H=getelementptr inbounds i8,i8*%G,i64 -4
%I=bitcast i8*%H to i32*
store i32 1342177296,i32*%I,align 4
store i8*%G,i8**%g,align 8
%J=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%K=bitcast i8*%G to i8**
store i8*%J,i8**%K,align 8
%L=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%M=getelementptr inbounds i8,i8*%G,i64 8
%N=bitcast i8*%M to i8**
store i8*%L,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%G,i64 16
%P=bitcast i8*%O to i32*
store i32 3,i32*%P,align 4
%Q=call i8*@sml_alloc(i32 inreg 28)#0
%R=getelementptr inbounds i8,i8*%Q,i64 -4
%S=bitcast i8*%R to i32*
store i32 1342177304,i32*%S,align 4
store i8*%Q,i8**%d,align 8
%T=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%U=bitcast i8*%Q to i8**
store i8*%T,i8**%U,align 8
%V=getelementptr inbounds i8,i8*%Q,i64 8
%W=bitcast i8*%V to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb4textE_193 to void(...)*),void(...)**%W,align 8
%X=getelementptr inbounds i8,i8*%Q,i64 16
%Y=bitcast i8*%X to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb4textE_193 to void(...)*),void(...)**%Y,align 8
%Z=getelementptr inbounds i8,i8*%Q,i64 24
%aa=bitcast i8*%Z to i32*
store i32 -2147483647,i32*%aa,align 4
%ab=call i8*@sml_alloc(i32 inreg 20)#0
%ac=getelementptr inbounds i8,i8*%ab,i64 -4
%ad=bitcast i8*%ac to i32*
store i32 1342177296,i32*%ad,align 4
%ae=load i8*,i8**%d,align 8
%af=bitcast i8*%ab to i8**
store i8*%ae,i8**%af,align 8
%ag=load i8*,i8**%c,align 8
%ah=getelementptr inbounds i8,i8*%ab,i64 8
%ai=bitcast i8*%ah to i8**
store i8*%ag,i8**%ai,align 8
%aj=getelementptr inbounds i8,i8*%ab,i64 16
%ak=bitcast i8*%aj to i32*
store i32 3,i32*%ak,align 4
%al=load i8*,i8**%e,align 8
%am=tail call fastcc i8*%A(i8*inreg%al,i8*inreg%ab)
ret i8*%am
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb4textE_195(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=call i8*@sml_alloc(i32 inreg 20)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177296,i32*%n,align 4
store i8*%l,i8**%f,align 8
%o=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%r=getelementptr inbounds i8,i8*%l,i64 8
%s=bitcast i8*%r to i8**
store i8*%q,i8**%s,align 8
%t=getelementptr inbounds i8,i8*%l,i64 16
%u=bitcast i8*%t to i32*
store i32 3,i32*%u,align 4
%v=call i8*@sml_alloc(i32 inreg 28)#0
%w=getelementptr inbounds i8,i8*%v,i64 -4
%x=bitcast i8*%w to i32*
store i32 1342177304,i32*%x,align 4
%y=load i8*,i8**%f,align 8
%z=bitcast i8*%v to i8**
store i8*%y,i8**%z,align 8
%A=getelementptr inbounds i8,i8*%v,i64 8
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb4textE_194 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%v,i64 16
%D=bitcast i8*%C to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb4textE_194 to void(...)*),void(...)**%D,align 8
%E=getelementptr inbounds i8,i8*%v,i64 24
%F=bitcast i8*%E to i32*
store i32 1,i32*%F,align 4
ret i8*%v
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb4textE_196(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%b,i8**%c,align 8
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=getelementptr inbounds i8,i8*%h,i64 8
%o=bitcast i8*%n to i8**
store i8*%m,i8**%o,align 8
%p=getelementptr inbounds i8,i8*%h,i64 16
%q=bitcast i8*%p to i32*
store i32 3,i32*%q,align 4
%r=call i8*@sml_alloc(i32 inreg 28)#0
%s=getelementptr inbounds i8,i8*%r,i64 -4
%t=bitcast i8*%s to i32*
store i32 1342177304,i32*%t,align 4
%u=load i8*,i8**%e,align 8
%v=bitcast i8*%r to i8**
store i8*%u,i8**%v,align 8
%w=getelementptr inbounds i8,i8*%r,i64 8
%x=bitcast i8*%w to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN10TermFormat10FormatComb4textE_195 to void(...)*),void(...)**%x,align 8
%y=getelementptr inbounds i8,i8*%r,i64 16
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat10FormatComb4textE_991 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%r,i64 24
%B=bitcast i8*%A to i32*
store i32 -2147483647,i32*%B,align 4
ret i8*%r
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb4textE_197(i8*inreg%a)unnamed_addr#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=getelementptr inbounds i8,i8*%d,i64 -4
%f=bitcast i8*%e to i32*
store i32 1342177288,i32*%f,align 4
store i8*%d,i8**%c,align 8
%g=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%h=bitcast i8*%d to i8**
store i8*%g,i8**%h,align 8
%i=getelementptr inbounds i8,i8*%d,i64 8
%j=bitcast i8*%i to i32*
store i32 1,i32*%j,align 4
%k=call i8*@sml_alloc(i32 inreg 28)#0
%l=getelementptr inbounds i8,i8*%k,i64 -4
%m=bitcast i8*%l to i32*
store i32 1342177304,i32*%m,align 4
%n=load i8*,i8**%c,align 8
%o=bitcast i8*%k to i8**
store i8*%n,i8**%o,align 8
%p=getelementptr inbounds i8,i8*%k,i64 8
%q=bitcast i8*%p to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb4textE_196 to void(...)*),void(...)**%q,align 8
%r=getelementptr inbounds i8,i8*%k,i64 16
%s=bitcast i8*%r to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb4textE_196 to void(...)*),void(...)**%s,align 8
%t=getelementptr inbounds i8,i8*%k,i64 24
%u=bitcast i8*%t to i32*
store i32 -2147483647,i32*%u,align 4
ret i8*%k
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb5spaceE_201(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8***
br label%l
i:
call void@sml_check(i32 inreg%e)
%j=bitcast i8**%d to i8****
%k=load i8***,i8****%j,align 8
br label%l
l:
%m=phi i8***[%k,%i],[%h,%g]
%n=load i8**,i8***%m,align 8
%o=load i8*,i8**%n,align 8
%p=getelementptr inbounds i8,i8*%o,i64 16
%q=bitcast i8*%p to i8*(i8*,i8*)**
%r=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%q,align 8
%s=bitcast i8*%o to i8**
%t=load i8*,i8**%s,align 8
store i8*%t,i8**%d,align 8
%u=call i8*@sml_alloc(i32 inreg 20)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177296,i32*%w,align 4
%x=bitcast i8*%u to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@e,i64 0,i32 2)to i8*),i8**%x,align 8
%y=load i8*,i8**%c,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to i8**
store i8*%y,i8**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to i32*
store i32 3,i32*%C,align 4
%D=load i8*,i8**%d,align 8
%E=tail call fastcc i8*%r(i8*inreg%D,i8*inreg%u)
ret i8*%E
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb5spaceE_202(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=load i8*,i8**%d,align 8
%m=bitcast i8**%c to i8***
%n=load i8**,i8***%m,align 8
br label%o
o:
%p=phi i8**[%n,%k],[%j,%i]
%q=phi i8*[%l,%k],[%b,%i]
%r=load i8*,i8**%p,align 8
store i8*%r,i8**%e,align 8
%s=getelementptr inbounds i8,i8*%r,i64 8
%t=bitcast i8*%s to i8**
%u=load i8*,i8**%t,align 8
store i8*%u,i8**%c,align 8
%v=getelementptr inbounds i8,i8*%q,i64 16
%w=bitcast i8*%v to i8*(i8*,i8*)**
%x=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%w,align 8
%y=bitcast i8*%q to i8**
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%d,align 8
%A=call i8*@sml_alloc(i32 inreg 12)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177288,i32*%C,align 4
store i8*%A,i8**%f,align 8
%D=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%E=bitcast i8*%A to i8**
store i8*%D,i8**%E,align 8
%F=getelementptr inbounds i8,i8*%A,i64 8
%G=bitcast i8*%F to i32*
store i32 1,i32*%G,align 4
%H=call i8*@sml_alloc(i32 inreg 28)#0
%I=getelementptr inbounds i8,i8*%H,i64 -4
%J=bitcast i8*%I to i32*
store i32 1342177304,i32*%J,align 4
store i8*%H,i8**%e,align 8
%K=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%L=bitcast i8*%H to i8**
store i8*%K,i8**%L,align 8
%M=getelementptr inbounds i8,i8*%H,i64 8
%N=bitcast i8*%M to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb5spaceE_201 to void(...)*),void(...)**%N,align 8
%O=getelementptr inbounds i8,i8*%H,i64 16
%P=bitcast i8*%O to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb5spaceE_201 to void(...)*),void(...)**%P,align 8
%Q=getelementptr inbounds i8,i8*%H,i64 24
%R=bitcast i8*%Q to i32*
store i32 -2147483647,i32*%R,align 4
%S=call i8*@sml_alloc(i32 inreg 20)#0
%T=getelementptr inbounds i8,i8*%S,i64 -4
%U=bitcast i8*%T to i32*
store i32 1342177296,i32*%U,align 4
%V=load i8*,i8**%e,align 8
%W=bitcast i8*%S to i8**
store i8*%V,i8**%W,align 8
%X=load i8*,i8**%c,align 8
%Y=getelementptr inbounds i8,i8*%S,i64 8
%Z=bitcast i8*%Y to i8**
store i8*%X,i8**%Z,align 8
%aa=getelementptr inbounds i8,i8*%S,i64 16
%ab=bitcast i8*%aa to i32*
store i32 3,i32*%ab,align 4
%ac=load i8*,i8**%d,align 8
%ad=tail call fastcc i8*%x(i8*inreg%ac,i8*inreg%S)
ret i8*%ad
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb5spaceE_203(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 12)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177288,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32 1,i32*%n,align 4
%o=call i8*@sml_alloc(i32 inreg 28)#0
%p=getelementptr inbounds i8,i8*%o,i64 -4
%q=bitcast i8*%p to i32*
store i32 1342177304,i32*%q,align 4
%r=load i8*,i8**%e,align 8
%s=bitcast i8*%o to i8**
store i8*%r,i8**%s,align 8
%t=getelementptr inbounds i8,i8*%o,i64 8
%u=bitcast i8*%t to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb5spaceE_202 to void(...)*),void(...)**%u,align 8
%v=getelementptr inbounds i8,i8*%o,i64 16
%w=bitcast i8*%v to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb5spaceE_202 to void(...)*),void(...)**%w,align 8
%x=getelementptr inbounds i8,i8*%o,i64 24
%y=bitcast i8*%x to i32*
store i32 1,i32*%y,align 4
ret i8*%o
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb5spaceE_204(i8*inreg%a)unnamed_addr#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=getelementptr inbounds i8,i8*%d,i64 -4
%f=bitcast i8*%e to i32*
store i32 1342177288,i32*%f,align 4
store i8*%d,i8**%c,align 8
%g=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%h=bitcast i8*%d to i8**
store i8*%g,i8**%h,align 8
%i=getelementptr inbounds i8,i8*%d,i64 8
%j=bitcast i8*%i to i32*
store i32 1,i32*%j,align 4
%k=call i8*@sml_alloc(i32 inreg 28)#0
%l=getelementptr inbounds i8,i8*%k,i64 -4
%m=bitcast i8*%l to i32*
store i32 1342177304,i32*%m,align 4
%n=load i8*,i8**%c,align 8
%o=bitcast i8*%k to i8**
store i8*%n,i8**%o,align 8
%p=getelementptr inbounds i8,i8*%k,i64 8
%q=bitcast i8*%p to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN10TermFormat10FormatComb5spaceE_203 to void(...)*),void(...)**%q,align 8
%r=getelementptr inbounds i8,i8*%k,i64 16
%s=bitcast i8*%r to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat10FormatComb5spaceE_994 to void(...)*),void(...)**%s,align 8
%t=getelementptr inbounds i8,i8*%k,i64 24
%u=bitcast i8*%t to i32*
store i32 -2147483647,i32*%u,align 4
ret i8*%k
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6dspaceE_208(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8***
br label%l
i:
call void@sml_check(i32 inreg%e)
%j=bitcast i8**%d to i8****
%k=load i8***,i8****%j,align 8
br label%l
l:
%m=phi i8***[%k,%i],[%h,%g]
%n=load i8**,i8***%m,align 8
%o=load i8*,i8**%n,align 8
%p=getelementptr inbounds i8,i8*%o,i64 16
%q=bitcast i8*%p to i8*(i8*,i8*)**
%r=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%q,align 8
%s=bitcast i8*%o to i8**
%t=load i8*,i8**%s,align 8
store i8*%t,i8**%d,align 8
%u=call i8*@sml_alloc(i32 inreg 20)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177296,i32*%w,align 4
%x=bitcast i8*%u to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@i,i64 0,i32 2)to i8*),i8**%x,align 8
%y=load i8*,i8**%c,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to i8**
store i8*%y,i8**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to i32*
store i32 3,i32*%C,align 4
%D=load i8*,i8**%d,align 8
%E=tail call fastcc i8*%r(i8*inreg%D,i8*inreg%u)
ret i8*%E
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6dspaceE_209(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=load i8*,i8**%d,align 8
%m=bitcast i8**%c to i8***
%n=load i8**,i8***%m,align 8
br label%o
o:
%p=phi i8**[%n,%k],[%j,%i]
%q=phi i8*[%l,%k],[%b,%i]
%r=load i8*,i8**%p,align 8
store i8*%r,i8**%e,align 8
%s=getelementptr inbounds i8,i8*%r,i64 8
%t=bitcast i8*%s to i8**
%u=load i8*,i8**%t,align 8
store i8*%u,i8**%c,align 8
%v=getelementptr inbounds i8,i8*%q,i64 16
%w=bitcast i8*%v to i8*(i8*,i8*)**
%x=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%w,align 8
%y=bitcast i8*%q to i8**
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%d,align 8
%A=call i8*@sml_alloc(i32 inreg 12)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177288,i32*%C,align 4
store i8*%A,i8**%f,align 8
%D=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%E=bitcast i8*%A to i8**
store i8*%D,i8**%E,align 8
%F=getelementptr inbounds i8,i8*%A,i64 8
%G=bitcast i8*%F to i32*
store i32 1,i32*%G,align 4
%H=call i8*@sml_alloc(i32 inreg 28)#0
%I=getelementptr inbounds i8,i8*%H,i64 -4
%J=bitcast i8*%I to i32*
store i32 1342177304,i32*%J,align 4
store i8*%H,i8**%e,align 8
%K=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%L=bitcast i8*%H to i8**
store i8*%K,i8**%L,align 8
%M=getelementptr inbounds i8,i8*%H,i64 8
%N=bitcast i8*%M to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6dspaceE_208 to void(...)*),void(...)**%N,align 8
%O=getelementptr inbounds i8,i8*%H,i64 16
%P=bitcast i8*%O to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6dspaceE_208 to void(...)*),void(...)**%P,align 8
%Q=getelementptr inbounds i8,i8*%H,i64 24
%R=bitcast i8*%Q to i32*
store i32 -2147483647,i32*%R,align 4
%S=call i8*@sml_alloc(i32 inreg 20)#0
%T=getelementptr inbounds i8,i8*%S,i64 -4
%U=bitcast i8*%T to i32*
store i32 1342177296,i32*%U,align 4
%V=load i8*,i8**%e,align 8
%W=bitcast i8*%S to i8**
store i8*%V,i8**%W,align 8
%X=load i8*,i8**%c,align 8
%Y=getelementptr inbounds i8,i8*%S,i64 8
%Z=bitcast i8*%Y to i8**
store i8*%X,i8**%Z,align 8
%aa=getelementptr inbounds i8,i8*%S,i64 16
%ab=bitcast i8*%aa to i32*
store i32 3,i32*%ab,align 4
%ac=load i8*,i8**%d,align 8
%ad=tail call fastcc i8*%x(i8*inreg%ac,i8*inreg%S)
ret i8*%ad
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6dspaceE_210(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 12)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177288,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32 1,i32*%n,align 4
%o=call i8*@sml_alloc(i32 inreg 28)#0
%p=getelementptr inbounds i8,i8*%o,i64 -4
%q=bitcast i8*%p to i32*
store i32 1342177304,i32*%q,align 4
%r=load i8*,i8**%e,align 8
%s=bitcast i8*%o to i8**
store i8*%r,i8**%s,align 8
%t=getelementptr inbounds i8,i8*%o,i64 8
%u=bitcast i8*%t to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6dspaceE_209 to void(...)*),void(...)**%u,align 8
%v=getelementptr inbounds i8,i8*%o,i64 16
%w=bitcast i8*%v to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6dspaceE_209 to void(...)*),void(...)**%w,align 8
%x=getelementptr inbounds i8,i8*%o,i64 24
%y=bitcast i8*%x to i32*
store i32 1,i32*%y,align 4
ret i8*%o
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6dspaceE_211(i8*inreg%a)unnamed_addr#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=getelementptr inbounds i8,i8*%d,i64 -4
%f=bitcast i8*%e to i32*
store i32 1342177288,i32*%f,align 4
store i8*%d,i8**%c,align 8
%g=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%h=bitcast i8*%d to i8**
store i8*%g,i8**%h,align 8
%i=getelementptr inbounds i8,i8*%d,i64 8
%j=bitcast i8*%i to i32*
store i32 1,i32*%j,align 4
%k=call i8*@sml_alloc(i32 inreg 28)#0
%l=getelementptr inbounds i8,i8*%k,i64 -4
%m=bitcast i8*%l to i32*
store i32 1342177304,i32*%m,align 4
%n=load i8*,i8**%c,align 8
%o=bitcast i8*%k to i8**
store i8*%n,i8**%o,align 8
%p=getelementptr inbounds i8,i8*%k,i64 8
%q=bitcast i8*%p to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN10TermFormat10FormatComb6dspaceE_210 to void(...)*),void(...)**%q,align 8
%r=getelementptr inbounds i8,i8*%k,i64 16
%s=bitcast i8*%r to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat10FormatComb6dspaceE_997 to void(...)*),void(...)**%s,align 8
%t=getelementptr inbounds i8,i8*%k,i64 24
%u=bitcast i8*%t to i32*
store i32 -2147483647,i32*%u,align 4
ret i8*%k
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb7newlineE_216(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8***
br label%l
i:
call void@sml_check(i32 inreg%e)
%j=bitcast i8**%d to i8****
%k=load i8***,i8****%j,align 8
br label%l
l:
%m=phi i8***[%k,%i],[%h,%g]
%n=load i8**,i8***%m,align 8
%o=load i8*,i8**%n,align 8
%p=getelementptr inbounds i8,i8*%o,i64 16
%q=bitcast i8*%p to i8*(i8*,i8*)**
%r=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%q,align 8
%s=bitcast i8*%o to i8**
%t=load i8*,i8**%s,align 8
store i8*%t,i8**%d,align 8
%u=call i8*@sml_alloc(i32 inreg 20)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177296,i32*%w,align 4
%x=bitcast i8*%u to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i32}>,<{[4x i8],i32,i32,[4x i8],i32}>*@l,i64 0,i32 2)to i8*),i8**%x,align 8
%y=load i8*,i8**%c,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to i8**
store i8*%y,i8**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to i32*
store i32 3,i32*%C,align 4
%D=load i8*,i8**%d,align 8
%E=tail call fastcc i8*%r(i8*inreg%D,i8*inreg%u)
ret i8*%E
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb7newlineE_217(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=load i8*,i8**%d,align 8
%m=bitcast i8**%c to i8***
%n=load i8**,i8***%m,align 8
br label%o
o:
%p=phi i8**[%n,%k],[%j,%i]
%q=phi i8*[%l,%k],[%b,%i]
%r=load i8*,i8**%p,align 8
store i8*%r,i8**%e,align 8
%s=getelementptr inbounds i8,i8*%r,i64 8
%t=bitcast i8*%s to i8**
%u=load i8*,i8**%t,align 8
store i8*%u,i8**%c,align 8
%v=getelementptr inbounds i8,i8*%q,i64 16
%w=bitcast i8*%v to i8*(i8*,i8*)**
%x=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%w,align 8
%y=bitcast i8*%q to i8**
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%d,align 8
%A=call i8*@sml_alloc(i32 inreg 12)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177288,i32*%C,align 4
store i8*%A,i8**%f,align 8
%D=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%E=bitcast i8*%A to i8**
store i8*%D,i8**%E,align 8
%F=getelementptr inbounds i8,i8*%A,i64 8
%G=bitcast i8*%F to i32*
store i32 1,i32*%G,align 4
%H=call i8*@sml_alloc(i32 inreg 28)#0
%I=getelementptr inbounds i8,i8*%H,i64 -4
%J=bitcast i8*%I to i32*
store i32 1342177304,i32*%J,align 4
store i8*%H,i8**%e,align 8
%K=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%L=bitcast i8*%H to i8**
store i8*%K,i8**%L,align 8
%M=getelementptr inbounds i8,i8*%H,i64 8
%N=bitcast i8*%M to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb7newlineE_216 to void(...)*),void(...)**%N,align 8
%O=getelementptr inbounds i8,i8*%H,i64 16
%P=bitcast i8*%O to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb7newlineE_216 to void(...)*),void(...)**%P,align 8
%Q=getelementptr inbounds i8,i8*%H,i64 24
%R=bitcast i8*%Q to i32*
store i32 -2147483647,i32*%R,align 4
%S=call i8*@sml_alloc(i32 inreg 20)#0
%T=getelementptr inbounds i8,i8*%S,i64 -4
%U=bitcast i8*%T to i32*
store i32 1342177296,i32*%U,align 4
%V=load i8*,i8**%e,align 8
%W=bitcast i8*%S to i8**
store i8*%V,i8**%W,align 8
%X=load i8*,i8**%c,align 8
%Y=getelementptr inbounds i8,i8*%S,i64 8
%Z=bitcast i8*%Y to i8**
store i8*%X,i8**%Z,align 8
%aa=getelementptr inbounds i8,i8*%S,i64 16
%ab=bitcast i8*%aa to i32*
store i32 3,i32*%ab,align 4
%ac=load i8*,i8**%d,align 8
%ad=tail call fastcc i8*%x(i8*inreg%ac,i8*inreg%S)
ret i8*%ad
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb7newlineE_218(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 12)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177288,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32 1,i32*%n,align 4
%o=call i8*@sml_alloc(i32 inreg 28)#0
%p=getelementptr inbounds i8,i8*%o,i64 -4
%q=bitcast i8*%p to i32*
store i32 1342177304,i32*%q,align 4
%r=load i8*,i8**%e,align 8
%s=bitcast i8*%o to i8**
store i8*%r,i8**%s,align 8
%t=getelementptr inbounds i8,i8*%o,i64 8
%u=bitcast i8*%t to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb7newlineE_217 to void(...)*),void(...)**%u,align 8
%v=getelementptr inbounds i8,i8*%o,i64 16
%w=bitcast i8*%v to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb7newlineE_217 to void(...)*),void(...)**%w,align 8
%x=getelementptr inbounds i8,i8*%o,i64 24
%y=bitcast i8*%x to i32*
store i32 1,i32*%y,align 4
ret i8*%o
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb7newlineE_219(i8*inreg%a)unnamed_addr#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=getelementptr inbounds i8,i8*%d,i64 -4
%f=bitcast i8*%e to i32*
store i32 1342177288,i32*%f,align 4
store i8*%d,i8**%c,align 8
%g=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%h=bitcast i8*%d to i8**
store i8*%g,i8**%h,align 8
%i=getelementptr inbounds i8,i8*%d,i64 8
%j=bitcast i8*%i to i32*
store i32 1,i32*%j,align 4
%k=call i8*@sml_alloc(i32 inreg 28)#0
%l=getelementptr inbounds i8,i8*%k,i64 -4
%m=bitcast i8*%l to i32*
store i32 1342177304,i32*%m,align 4
%n=load i8*,i8**%c,align 8
%o=bitcast i8*%k to i8**
store i8*%n,i8**%o,align 8
%p=getelementptr inbounds i8,i8*%k,i64 8
%q=bitcast i8*%p to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN10TermFormat10FormatComb7newlineE_218 to void(...)*),void(...)**%q,align 8
%r=getelementptr inbounds i8,i8*%k,i64 16
%s=bitcast i8*%r to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat10FormatComb7newlineE_1000 to void(...)*),void(...)**%s,align 8
%t=getelementptr inbounds i8,i8*%k,i64 24
%u=bitcast i8*%t to i32*
store i32 -2147483647,i32*%u,align 4
ret i8*%k
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb1_DE_223(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
m:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%k,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%d,align 8
br label%k
k:
%l=phi i8*[%j,%i],[%a,%m]
%n=bitcast i8*%l to i8**
%o=getelementptr inbounds i8,i8*%l,i64 8
%p=bitcast i8*%o to i8***
%q=load i8**,i8***%p,align 8
%r=load i8*,i8**%q,align 8
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%e,align 8
%x=load i8*,i8**%n,align 8
store i8*%x,i8**%d,align 8
%y=call i8*@sml_alloc(i32 inreg 20)#0
%z=getelementptr inbounds i8,i8*%y,i64 -4
%A=bitcast i8*%z to i32*
store i32 1342177296,i32*%A,align 4
store i8*%y,i8**%f,align 8
%B=getelementptr inbounds i8,i8*%y,i64 4
%C=bitcast i8*%B to i32*
store i32 0,i32*%C,align 1
%D=bitcast i8*%y to i32*
store i32 4,i32*%D,align 4
%E=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%F=getelementptr inbounds i8,i8*%y,i64 8
%G=bitcast i8*%F to i8**
store i8*%E,i8**%G,align 8
%H=getelementptr inbounds i8,i8*%y,i64 16
%I=bitcast i8*%H to i32*
store i32 2,i32*%I,align 4
%J=call i8*@sml_alloc(i32 inreg 20)#0
%K=getelementptr inbounds i8,i8*%J,i64 -4
%L=bitcast i8*%K to i32*
store i32 1342177296,i32*%L,align 4
%M=load i8*,i8**%f,align 8
%N=bitcast i8*%J to i8**
store i8*%M,i8**%N,align 8
%O=load i8*,i8**%c,align 8
%P=getelementptr inbounds i8,i8*%J,i64 8
%Q=bitcast i8*%P to i8**
store i8*%O,i8**%Q,align 8
%R=getelementptr inbounds i8,i8*%J,i64 16
%S=bitcast i8*%R to i32*
store i32 3,i32*%S,align 4
%T=load i8*,i8**%e,align 8
%U=tail call fastcc i8*%u(i8*inreg%T,i8*inreg%J)
ret i8*%U
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb1_DE_224(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8**
br label%q
l:
call void@sml_check(i32 inreg%h)
%m=load i8*,i8**%c,align 8
%n=bitcast i8**%d to i8***
%o=load i8**,i8***%n,align 8
%p=bitcast i8**%o to i8*
br label%q
q:
%r=phi i8*[%p,%l],[%a,%j]
%s=phi i8**[%o,%l],[%k,%j]
%t=phi i8*[%m,%l],[%b,%j]
%u=load i8*,i8**%s,align 8
store i8*%u,i8**%f,align 8
%v=getelementptr inbounds i8,i8*%u,i64 8
%w=bitcast i8*%v to i8**
%x=load i8*,i8**%w,align 8
store i8*%x,i8**%c,align 8
%y=getelementptr inbounds i8,i8*%t,i64 16
%z=bitcast i8*%y to i8*(i8*,i8*)**
%A=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%z,align 8
%B=bitcast i8*%t to i8**
%C=load i8*,i8**%B,align 8
store i8*%C,i8**%e,align 8
%D=getelementptr inbounds i8,i8*%r,i64 8
%E=bitcast i8*%D to i8**
%F=load i8*,i8**%E,align 8
store i8*%F,i8**%d,align 8
%G=call i8*@sml_alloc(i32 inreg 20)#0
%H=getelementptr inbounds i8,i8*%G,i64 -4
%I=bitcast i8*%H to i32*
store i32 1342177296,i32*%I,align 4
store i8*%G,i8**%g,align 8
%J=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%K=bitcast i8*%G to i8**
store i8*%J,i8**%K,align 8
%L=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%M=getelementptr inbounds i8,i8*%G,i64 8
%N=bitcast i8*%M to i8**
store i8*%L,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%G,i64 16
%P=bitcast i8*%O to i32*
store i32 3,i32*%P,align 4
%Q=call i8*@sml_alloc(i32 inreg 28)#0
%R=getelementptr inbounds i8,i8*%Q,i64 -4
%S=bitcast i8*%R to i32*
store i32 1342177304,i32*%S,align 4
store i8*%Q,i8**%d,align 8
%T=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%U=bitcast i8*%Q to i8**
store i8*%T,i8**%U,align 8
%V=getelementptr inbounds i8,i8*%Q,i64 8
%W=bitcast i8*%V to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb1_DE_223 to void(...)*),void(...)**%W,align 8
%X=getelementptr inbounds i8,i8*%Q,i64 16
%Y=bitcast i8*%X to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb1_DE_223 to void(...)*),void(...)**%Y,align 8
%Z=getelementptr inbounds i8,i8*%Q,i64 24
%aa=bitcast i8*%Z to i32*
store i32 -2147483647,i32*%aa,align 4
%ab=call i8*@sml_alloc(i32 inreg 20)#0
%ac=getelementptr inbounds i8,i8*%ab,i64 -4
%ad=bitcast i8*%ac to i32*
store i32 1342177296,i32*%ad,align 4
%ae=load i8*,i8**%d,align 8
%af=bitcast i8*%ab to i8**
store i8*%ae,i8**%af,align 8
%ag=load i8*,i8**%c,align 8
%ah=getelementptr inbounds i8,i8*%ab,i64 8
%ai=bitcast i8*%ah to i8**
store i8*%ag,i8**%ai,align 8
%aj=getelementptr inbounds i8,i8*%ab,i64 16
%ak=bitcast i8*%aj to i32*
store i32 3,i32*%ak,align 4
%al=load i8*,i8**%e,align 8
%am=tail call fastcc i8*%A(i8*inreg%al,i8*inreg%ab)
ret i8*%am
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb1_DE_225(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=call i8*@sml_alloc(i32 inreg 20)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177296,i32*%n,align 4
store i8*%l,i8**%f,align 8
%o=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%r=getelementptr inbounds i8,i8*%l,i64 8
%s=bitcast i8*%r to i8**
store i8*%q,i8**%s,align 8
%t=getelementptr inbounds i8,i8*%l,i64 16
%u=bitcast i8*%t to i32*
store i32 3,i32*%u,align 4
%v=call i8*@sml_alloc(i32 inreg 28)#0
%w=getelementptr inbounds i8,i8*%v,i64 -4
%x=bitcast i8*%w to i32*
store i32 1342177304,i32*%x,align 4
%y=load i8*,i8**%f,align 8
%z=bitcast i8*%v to i8**
store i8*%y,i8**%z,align 8
%A=getelementptr inbounds i8,i8*%v,i64 8
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb1_DE_224 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%v,i64 16
%D=bitcast i8*%C to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb1_DE_224 to void(...)*),void(...)**%D,align 8
%E=getelementptr inbounds i8,i8*%v,i64 24
%F=bitcast i8*%E to i32*
store i32 1,i32*%F,align 4
ret i8*%v
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb1_DE_226(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%b,i8**%c,align 8
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=getelementptr inbounds i8,i8*%h,i64 8
%o=bitcast i8*%n to i8**
store i8*%m,i8**%o,align 8
%p=getelementptr inbounds i8,i8*%h,i64 16
%q=bitcast i8*%p to i32*
store i32 3,i32*%q,align 4
%r=call i8*@sml_alloc(i32 inreg 28)#0
%s=getelementptr inbounds i8,i8*%r,i64 -4
%t=bitcast i8*%s to i32*
store i32 1342177304,i32*%t,align 4
%u=load i8*,i8**%e,align 8
%v=bitcast i8*%r to i8**
store i8*%u,i8**%v,align 8
%w=getelementptr inbounds i8,i8*%r,i64 8
%x=bitcast i8*%w to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN10TermFormat10FormatComb1_DE_225 to void(...)*),void(...)**%x,align 8
%y=getelementptr inbounds i8,i8*%r,i64 16
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat10FormatComb1_DE_1003 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%r,i64 24
%B=bitcast i8*%A to i32*
store i32 -2147483647,i32*%B,align 4
ret i8*%r
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb1_DE_227(i8*inreg%a)unnamed_addr#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=getelementptr inbounds i8,i8*%d,i64 -4
%f=bitcast i8*%e to i32*
store i32 1342177288,i32*%f,align 4
store i8*%d,i8**%c,align 8
%g=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%h=bitcast i8*%d to i8**
store i8*%g,i8**%h,align 8
%i=getelementptr inbounds i8,i8*%d,i64 8
%j=bitcast i8*%i to i32*
store i32 1,i32*%j,align 4
%k=call i8*@sml_alloc(i32 inreg 28)#0
%l=getelementptr inbounds i8,i8*%k,i64 -4
%m=bitcast i8*%l to i32*
store i32 1342177304,i32*%m,align 4
%n=load i8*,i8**%c,align 8
%o=bitcast i8*%k to i8**
store i8*%n,i8**%o,align 8
%p=getelementptr inbounds i8,i8*%k,i64 8
%q=bitcast i8*%p to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb1_DE_226 to void(...)*),void(...)**%q,align 8
%r=getelementptr inbounds i8,i8*%k,i64 16
%s=bitcast i8*%r to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb1_DE_226 to void(...)*),void(...)**%s,align 8
%t=getelementptr inbounds i8,i8*%k,i64 24
%u=bitcast i8*%t to i32*
store i32 -2147483647,i32*%u,align 4
ret i8*%k
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb8guardEndE_231(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
n:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%l,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%d,align 8
br label%l
l:
%m=phi i8*[%k,%j],[%a,%n]
%o=bitcast i8*%m to i8**
%p=getelementptr inbounds i8,i8*%m,i64 16
%q=bitcast i8*%p to i8***
%r=load i8**,i8***%q,align 8
%s=load i8*,i8**%r,align 8
%t=getelementptr inbounds i8,i8*%s,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%s to i8**
%x=load i8*,i8**%w,align 8
store i8*%x,i8**%g,align 8
%y=load i8*,i8**%o,align 8
store i8*%y,i8**%e,align 8
%z=getelementptr inbounds i8,i8*%m,i64 8
%A=bitcast i8*%z to i8**
%B=load i8*,i8**%A,align 8
store i8*%B,i8**%d,align 8
%C=call i8*@sml_alloc(i32 inreg 20)#0
%D=getelementptr inbounds i8,i8*%C,i64 -4
%E=bitcast i8*%D to i32*
store i32 1342177296,i32*%E,align 4
store i8*%C,i8**%f,align 8
%F=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%G=bitcast i8*%C to i8**
store i8*%F,i8**%G,align 8
%H=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%I=getelementptr inbounds i8,i8*%C,i64 8
%J=bitcast i8*%I to i8**
store i8*%H,i8**%J,align 8
%K=getelementptr inbounds i8,i8*%C,i64 16
%L=bitcast i8*%K to i32*
store i32 3,i32*%L,align 4
%M=call i8*@sml_alloc(i32 inreg 20)#0
%N=getelementptr inbounds i8,i8*%M,i64 -4
%O=bitcast i8*%N to i32*
store i32 1342177296,i32*%O,align 4
store i8*%M,i8**%d,align 8
%P=getelementptr inbounds i8,i8*%M,i64 4
%Q=bitcast i8*%P to i32*
store i32 0,i32*%Q,align 1
%R=bitcast i8*%M to i32*
store i32 1,i32*%R,align 4
%S=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%T=getelementptr inbounds i8,i8*%M,i64 8
%U=bitcast i8*%T to i8**
store i8*%S,i8**%U,align 8
%V=getelementptr inbounds i8,i8*%M,i64 16
%W=bitcast i8*%V to i32*
store i32 2,i32*%W,align 4
%X=call i8*@sml_alloc(i32 inreg 20)#0
%Y=getelementptr inbounds i8,i8*%X,i64 -4
%Z=bitcast i8*%Y to i32*
store i32 1342177296,i32*%Z,align 4
%aa=load i8*,i8**%d,align 8
%ab=bitcast i8*%X to i8**
store i8*%aa,i8**%ab,align 8
%ac=load i8*,i8**%c,align 8
%ad=getelementptr inbounds i8,i8*%X,i64 8
%ae=bitcast i8*%ad to i8**
store i8*%ac,i8**%ae,align 8
%af=getelementptr inbounds i8,i8*%X,i64 16
%ag=bitcast i8*%af to i32*
store i32 3,i32*%ag,align 4
%ah=load i8*,i8**%g,align 8
%ai=tail call fastcc i8*%v(i8*inreg%ah,i8*inreg%X)
ret i8*%ai
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb8guardEndE_232(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%k,label%m
k:
%l=bitcast i8*%a to i8**
br label%r
m:
call void@sml_check(i32 inreg%i)
%n=load i8*,i8**%c,align 8
%o=bitcast i8**%d to i8***
%p=load i8**,i8***%o,align 8
%q=bitcast i8**%p to i8*
br label%r
r:
%s=phi i8*[%q,%m],[%a,%k]
%t=phi i8**[%p,%m],[%l,%k]
%u=phi i8*[%n,%m],[%b,%k]
%v=load i8*,i8**%t,align 8
store i8*%v,i8**%g,align 8
%w=getelementptr inbounds i8,i8*%v,i64 8
%x=bitcast i8*%w to i8**
%y=load i8*,i8**%x,align 8
store i8*%y,i8**%c,align 8
%z=getelementptr inbounds i8,i8*%u,i64 16
%A=bitcast i8*%z to i8*(i8*,i8*)**
%B=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%A,align 8
%C=bitcast i8*%u to i8**
%D=load i8*,i8**%C,align 8
store i8*%D,i8**%f,align 8
%E=getelementptr inbounds i8,i8*%s,i64 8
%F=bitcast i8*%E to i8**
%G=load i8*,i8**%F,align 8
store i8*%G,i8**%e,align 8
%H=getelementptr inbounds i8,i8*%s,i64 16
%I=bitcast i8*%H to i8**
%J=load i8*,i8**%I,align 8
store i8*%J,i8**%d,align 8
%K=call i8*@sml_alloc(i32 inreg 28)#0
%L=getelementptr inbounds i8,i8*%K,i64 -4
%M=bitcast i8*%L to i32*
store i32 1342177304,i32*%M,align 4
store i8*%K,i8**%h,align 8
%N=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%O=bitcast i8*%K to i8**
store i8*%N,i8**%O,align 8
%P=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%Q=getelementptr inbounds i8,i8*%K,i64 8
%R=bitcast i8*%Q to i8**
store i8*%P,i8**%R,align 8
%S=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%T=getelementptr inbounds i8,i8*%K,i64 16
%U=bitcast i8*%T to i8**
store i8*%S,i8**%U,align 8
%V=getelementptr inbounds i8,i8*%K,i64 24
%W=bitcast i8*%V to i32*
store i32 7,i32*%W,align 4
%X=call i8*@sml_alloc(i32 inreg 28)#0
%Y=getelementptr inbounds i8,i8*%X,i64 -4
%Z=bitcast i8*%Y to i32*
store i32 1342177304,i32*%Z,align 4
store i8*%X,i8**%d,align 8
%aa=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%ab=bitcast i8*%X to i8**
store i8*%aa,i8**%ab,align 8
%ac=getelementptr inbounds i8,i8*%X,i64 8
%ad=bitcast i8*%ac to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb8guardEndE_231 to void(...)*),void(...)**%ad,align 8
%ae=getelementptr inbounds i8,i8*%X,i64 16
%af=bitcast i8*%ae to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb8guardEndE_231 to void(...)*),void(...)**%af,align 8
%ag=getelementptr inbounds i8,i8*%X,i64 24
%ah=bitcast i8*%ag to i32*
store i32 -2147483647,i32*%ah,align 4
%ai=call i8*@sml_alloc(i32 inreg 20)#0
%aj=getelementptr inbounds i8,i8*%ai,i64 -4
%ak=bitcast i8*%aj to i32*
store i32 1342177296,i32*%ak,align 4
%al=load i8*,i8**%d,align 8
%am=bitcast i8*%ai to i8**
store i8*%al,i8**%am,align 8
%an=load i8*,i8**%c,align 8
%ao=getelementptr inbounds i8,i8*%ai,i64 8
%ap=bitcast i8*%ao to i8**
store i8*%an,i8**%ap,align 8
%aq=getelementptr inbounds i8,i8*%ai,i64 16
%ar=bitcast i8*%aq to i32*
store i32 3,i32*%ar,align 4
%as=load i8*,i8**%f,align 8
%at=tail call fastcc i8*%B(i8*inreg%as,i8*inreg%ai)
ret i8*%at
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb8guardEndE_233(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%d,align 8
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
store i8*%l,i8**%e,align 8
%m=getelementptr inbounds i8,i8*%a,i64 16
%n=bitcast i8*%m to i8**
%o=load i8*,i8**%n,align 8
store i8*%o,i8**%f,align 8
%p=call i8*@sml_alloc(i32 inreg 28)#0
%q=getelementptr inbounds i8,i8*%p,i64 -4
%r=bitcast i8*%q to i32*
store i32 1342177304,i32*%r,align 4
store i8*%p,i8**%g,align 8
%s=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%t=bitcast i8*%p to i8**
store i8*%s,i8**%t,align 8
%u=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%v=getelementptr inbounds i8,i8*%p,i64 8
%w=bitcast i8*%v to i8**
store i8*%u,i8**%w,align 8
%x=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%y=getelementptr inbounds i8,i8*%p,i64 16
%z=bitcast i8*%y to i8**
store i8*%x,i8**%z,align 8
%A=getelementptr inbounds i8,i8*%p,i64 24
%B=bitcast i8*%A to i32*
store i32 7,i32*%B,align 4
%C=call i8*@sml_alloc(i32 inreg 28)#0
%D=getelementptr inbounds i8,i8*%C,i64 -4
%E=bitcast i8*%D to i32*
store i32 1342177304,i32*%E,align 4
%F=load i8*,i8**%g,align 8
%G=bitcast i8*%C to i8**
store i8*%F,i8**%G,align 8
%H=getelementptr inbounds i8,i8*%C,i64 8
%I=bitcast i8*%H to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb8guardEndE_232 to void(...)*),void(...)**%I,align 8
%J=getelementptr inbounds i8,i8*%C,i64 16
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb8guardEndE_232 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%C,i64 24
%M=bitcast i8*%L to i32*
store i32 1,i32*%M,align 4
ret i8*%C
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb8guardEndE_234(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
store i8*%l,i8**%f,align 8
%o=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%r=getelementptr inbounds i8,i8*%l,i64 8
%s=bitcast i8*%r to i8**
store i8*%q,i8**%s,align 8
%t=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%u=getelementptr inbounds i8,i8*%l,i64 16
%v=bitcast i8*%u to i8**
store i8*%t,i8**%v,align 8
%w=getelementptr inbounds i8,i8*%l,i64 24
%x=bitcast i8*%w to i32*
store i32 7,i32*%x,align 4
%y=call i8*@sml_alloc(i32 inreg 28)#0
%z=getelementptr inbounds i8,i8*%y,i64 -4
%A=bitcast i8*%z to i32*
store i32 1342177304,i32*%A,align 4
%B=load i8*,i8**%f,align 8
%C=bitcast i8*%y to i8**
store i8*%B,i8**%C,align 8
%D=getelementptr inbounds i8,i8*%y,i64 8
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN10TermFormat10FormatComb8guardEndE_233 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%y,i64 16
%G=bitcast i8*%F to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat10FormatComb8guardEndE_1006 to void(...)*),void(...)**%G,align 8
%H=getelementptr inbounds i8,i8*%y,i64 24
%I=bitcast i8*%H to i32*
store i32 -2147483647,i32*%I,align 4
ret i8*%y
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb8guardEndE_235(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%b,i8**%c,align 8
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=getelementptr inbounds i8,i8*%h,i64 8
%o=bitcast i8*%n to i8**
store i8*%m,i8**%o,align 8
%p=getelementptr inbounds i8,i8*%h,i64 16
%q=bitcast i8*%p to i32*
store i32 3,i32*%q,align 4
%r=call i8*@sml_alloc(i32 inreg 28)#0
%s=getelementptr inbounds i8,i8*%r,i64 -4
%t=bitcast i8*%s to i32*
store i32 1342177304,i32*%t,align 4
%u=load i8*,i8**%e,align 8
%v=bitcast i8*%r to i8**
store i8*%u,i8**%v,align 8
%w=getelementptr inbounds i8,i8*%r,i64 8
%x=bitcast i8*%w to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb8guardEndE_234 to void(...)*),void(...)**%x,align 8
%y=getelementptr inbounds i8,i8*%r,i64 16
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb8guardEndE_234 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%r,i64 24
%B=bitcast i8*%A to i32*
store i32 -2147483647,i32*%B,align 4
ret i8*%r
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb8guardEndE_236(i8*inreg%a)unnamed_addr#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=getelementptr inbounds i8,i8*%d,i64 -4
%f=bitcast i8*%e to i32*
store i32 1342177288,i32*%f,align 4
store i8*%d,i8**%c,align 8
%g=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%h=bitcast i8*%d to i8**
store i8*%g,i8**%h,align 8
%i=getelementptr inbounds i8,i8*%d,i64 8
%j=bitcast i8*%i to i32*
store i32 1,i32*%j,align 4
%k=call i8*@sml_alloc(i32 inreg 28)#0
%l=getelementptr inbounds i8,i8*%k,i64 -4
%m=bitcast i8*%l to i32*
store i32 1342177304,i32*%m,align 4
%n=load i8*,i8**%c,align 8
%o=bitcast i8*%k to i8**
store i8*%n,i8**%o,align 8
%p=getelementptr inbounds i8,i8*%k,i64 8
%q=bitcast i8*%p to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb8guardEndE_235 to void(...)*),void(...)**%q,align 8
%r=getelementptr inbounds i8,i8*%k,i64 16
%s=bitcast i8*%r to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb8guardEndE_235 to void(...)*),void(...)**%s,align 8
%t=getelementptr inbounds i8,i8*%k,i64 24
%u=bitcast i8*%t to i32*
store i32 -2147483647,i32*%u,align 4
ret i8*%k
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6guard__E_240(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6guard__E_242(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%m
i:
call void@sml_check(i32 inreg%e)
%j=load i8*,i8**%d,align 8
%k=bitcast i8**%c to i8***
%l=load i8**,i8***%k,align 8
br label%m
m:
%n=phi i8**[%l,%i],[%h,%g]
%o=phi i8*[%j,%i],[%b,%g]
store i8*null,i8**%d,align 8
%p=load i8*,i8**%n,align 8
%q=getelementptr inbounds i8,i8*%p,i64 8
%r=bitcast i8*%q to i8**
%s=load i8*,i8**%r,align 8
%t=getelementptr inbounds i8,i8*%s,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%s to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg%o)
%z=getelementptr inbounds i8,i8*%y,i64 16
%A=bitcast i8*%z to i8*(i8*,i8*,i8*)**
%B=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%A,align 8
%C=bitcast i8*%y to i8**
%D=load i8*,i8**%C,align 8
store i8*%D,i8**%d,align 8
%E=load i8*,i8**%c,align 8
%F=getelementptr inbounds i8,i8*%E,i64 8
%G=bitcast i8*%F to i32*
%H=load i32,i32*%G,align 4
store i8*null,i8**%c,align 8
%I=getelementptr inbounds i8,i8*%E,i64 12
%J=bitcast i8*%I to i32*
%K=load i32,i32*%J,align 4
%L=call i8*@sml_alloc(i32 inreg 4)#0
%M=bitcast i8*%L to i32*
%N=getelementptr inbounds i8,i8*%L,i64 -4
%O=bitcast i8*%N to i32*
store i32 4,i32*%O,align 4
store i8*%L,i8**%c,align 8
store i32%H,i32*%M,align 4
%P=call i8*@sml_alloc(i32 inreg 4)#0
%Q=bitcast i8*%P to i32*
%R=getelementptr inbounds i8,i8*%P,i64 -4
%S=bitcast i8*%R to i32*
store i32 4,i32*%S,align 4
store i32%K,i32*%Q,align 4
%T=load i8*,i8**%d,align 8
%U=load i8*,i8**%c,align 8
%V=tail call fastcc i8*%B(i8*inreg%T,i8*inreg%U,i8*inreg%P)
ret i8*%V
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6guard__E_243(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=load i8*,i8**%c,align 8
%m=bitcast i8**%e to i8***
%n=load i8**,i8***%m,align 8
br label%o
o:
%p=phi i8**[%n,%k],[%j,%i]
%q=phi i8*[%l,%k],[%b,%i]
store i8*null,i8**%c,align 8
%r=getelementptr inbounds i8,i8*%q,i64 16
%s=bitcast i8*%r to i8*(i8*,i8*)**
%t=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%s,align 8
%u=bitcast i8*%q to i8**
%v=load i8*,i8**%u,align 8
store i8*%v,i8**%f,align 8
%w=load i8*,i8**%p,align 8
%x=call fastcc i8*@_SMLLN10TermFormat10FormatComb8guardEndE_236(i8*inreg%w)#0
%y=getelementptr inbounds i8,i8*%x,i64 16
%z=bitcast i8*%y to i8*(i8*,i8*)**
%A=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%z,align 8
%B=bitcast i8*%x to i8**
%C=load i8*,i8**%B,align 8
%D=load i8*,i8**%e,align 8
%E=getelementptr inbounds i8,i8*%D,i64 8
%F=bitcast i8*%E to i8**
%G=load i8*,i8**%F,align 8
%H=call fastcc i8*%A(i8*inreg%C,i8*inreg%G)
store i8*%H,i8**%c,align 8
%I=call i8*@sml_alloc(i32 inreg 20)#0
%J=getelementptr inbounds i8,i8*%I,i64 -4
%K=bitcast i8*%J to i32*
store i32 1342177296,i32*%K,align 4
store i8*%I,i8**%d,align 8
%L=bitcast i8*%I to i8**
store i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@m,i64 0,i32 2)to i8*),i8**%L,align 8
%M=load i8*,i8**%c,align 8
%N=getelementptr inbounds i8,i8*%I,i64 8
%O=bitcast i8*%N to i8**
store i8*%M,i8**%O,align 8
%P=getelementptr inbounds i8,i8*%I,i64 16
%Q=bitcast i8*%P to i32*
store i32 3,i32*%Q,align 4
store i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@m,i64 0,i32 2)to i8*),i8**%c,align 8
%R=load i8*,i8**%e,align 8
%S=getelementptr inbounds i8,i8*%R,i64 24
%T=bitcast i8*%S to i32*
%U=load i32,i32*%T,align 4
store i8*null,i8**%e,align 8
%V=getelementptr inbounds i8,i8*%R,i64 28
%W=bitcast i8*%V to i32*
%X=load i32,i32*%W,align 4
%Y=call i8*@sml_alloc(i32 inreg 20)#0
%Z=getelementptr inbounds i8,i8*%Y,i64 -4
%aa=bitcast i8*%Z to i32*
store i32 1342177296,i32*%aa,align 4
store i8*%Y,i8**%e,align 8
%ab=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ac=bitcast i8*%Y to i8**
store i8*%ab,i8**%ac,align 8
%ad=getelementptr inbounds i8,i8*%Y,i64 8
%ae=bitcast i8*%ad to i32*
store i32%U,i32*%ae,align 4
%af=getelementptr inbounds i8,i8*%Y,i64 12
%ag=bitcast i8*%af to i32*
store i32%X,i32*%ag,align 4
%ah=getelementptr inbounds i8,i8*%Y,i64 16
%ai=bitcast i8*%ah to i32*
store i32 1,i32*%ai,align 4
%aj=call i8*@sml_alloc(i32 inreg 28)#0
%ak=getelementptr inbounds i8,i8*%aj,i64 -4
%al=bitcast i8*%ak to i32*
store i32 1342177304,i32*%al,align 4
store i8*%aj,i8**%d,align 8
%am=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%an=bitcast i8*%aj to i8**
store i8*%am,i8**%an,align 8
%ao=getelementptr inbounds i8,i8*%aj,i64 8
%ap=bitcast i8*%ao to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6guard__E_242 to void(...)*),void(...)**%ap,align 8
%aq=getelementptr inbounds i8,i8*%aj,i64 16
%ar=bitcast i8*%aq to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6guard__E_242 to void(...)*),void(...)**%ar,align 8
%as=getelementptr inbounds i8,i8*%aj,i64 24
%at=bitcast i8*%as to i32*
store i32 -2147483647,i32*%at,align 4
%au=call i8*@sml_alloc(i32 inreg 20)#0
%av=getelementptr inbounds i8,i8*%au,i64 -4
%aw=bitcast i8*%av to i32*
store i32 1342177296,i32*%aw,align 4
%ax=load i8*,i8**%c,align 8
%ay=bitcast i8*%au to i8**
store i8*%ax,i8**%ay,align 8
%az=load i8*,i8**%d,align 8
%aA=getelementptr inbounds i8,i8*%au,i64 8
%aB=bitcast i8*%aA to i8**
store i8*%az,i8**%aB,align 8
%aC=getelementptr inbounds i8,i8*%au,i64 16
%aD=bitcast i8*%aC to i32*
store i32 3,i32*%aD,align 4
%aE=load i8*,i8**%f,align 8
%aF=tail call fastcc i8*%t(i8*inreg%aE,i8*inreg%au)
ret i8*%aF
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6guard__E_244(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e)#4 gc"smlsharp"{
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
%i=bitcast i8*%a to i8**
%j=load i8*,i8**%i,align 8
store i8*%j,i8**%f,align 8
%k=getelementptr inbounds i8,i8*%a,i64 8
%l=bitcast i8*%k to i8**
%m=load i8*,i8**%l,align 8
store i8*%m,i8**%g,align 8
%n=getelementptr inbounds i8,i8*%a,i64 16
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%a,i64 20
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call i8*@sml_alloc(i32 inreg 36)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177312,i32*%v,align 4
store i8*%t,i8**%h,align 8
%w=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%z=getelementptr inbounds i8,i8*%t,i64 8
%A=bitcast i8*%z to i8**
store i8*%y,i8**%A,align 8
%B=getelementptr inbounds i8,i8*%t,i64 16
%C=bitcast i8*%B to i32*
store i32%p,i32*%C,align 4
%D=getelementptr inbounds i8,i8*%t,i64 20
%E=bitcast i8*%D to i32*
store i32%s,i32*%E,align 4
%F=getelementptr inbounds i8,i8*%t,i64 24
%G=bitcast i8*%F to i32*
store i32%b,i32*%G,align 4
%H=getelementptr inbounds i8,i8*%t,i64 28
%I=bitcast i8*%H to i32*
store i32%c,i32*%I,align 4
%J=getelementptr inbounds i8,i8*%t,i64 32
%K=bitcast i8*%J to i32*
store i32 3,i32*%K,align 4
%L=call i8*@sml_alloc(i32 inreg 28)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32 1342177304,i32*%N,align 4
%O=load i8*,i8**%h,align 8
%P=bitcast i8*%L to i8**
store i8*%O,i8**%P,align 8
%Q=getelementptr inbounds i8,i8*%L,i64 8
%R=bitcast i8*%Q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6guard__E_243 to void(...)*),void(...)**%R,align 8
%S=getelementptr inbounds i8,i8*%L,i64 16
%T=bitcast i8*%S to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6guard__E_243 to void(...)*),void(...)**%T,align 8
%U=getelementptr inbounds i8,i8*%L,i64 24
%V=bitcast i8*%U to i32*
store i32 1,i32*%V,align 4
ret i8*%L
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6guard__E_245(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%b,i8**%c,align 8
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=getelementptr inbounds i8,i8*%a,i64 8
%i=bitcast i8*%h to i32*
%j=load i32,i32*%i,align 4
%k=getelementptr inbounds i8,i8*%a,i64 12
%l=bitcast i8*%k to i32*
%m=load i32,i32*%l,align 4
%n=call i8*@sml_alloc(i32 inreg 28)#0
%o=getelementptr inbounds i8,i8*%n,i64 -4
%p=bitcast i8*%o to i32*
store i32 1342177304,i32*%p,align 4
store i8*%n,i8**%e,align 8
%q=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%r=bitcast i8*%n to i8**
store i8*%q,i8**%r,align 8
%s=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%t=getelementptr inbounds i8,i8*%n,i64 8
%u=bitcast i8*%t to i8**
store i8*%s,i8**%u,align 8
%v=getelementptr inbounds i8,i8*%n,i64 16
%w=bitcast i8*%v to i32*
store i32%j,i32*%w,align 4
%x=getelementptr inbounds i8,i8*%n,i64 20
%y=bitcast i8*%x to i32*
store i32%m,i32*%y,align 4
%z=getelementptr inbounds i8,i8*%n,i64 24
%A=bitcast i8*%z to i32*
store i32 3,i32*%A,align 4
%B=call i8*@sml_alloc(i32 inreg 28)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177304,i32*%D,align 4
%E=load i8*,i8**%e,align 8
%F=bitcast i8*%B to i8**
store i8*%E,i8**%F,align 8
%G=getelementptr inbounds i8,i8*%B,i64 8
%H=bitcast i8*%G to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32)*@_SMLLN10TermFormat10FormatComb6guard__E_244 to void(...)*),void(...)**%H,align 8
%I=getelementptr inbounds i8,i8*%B,i64 16
%J=bitcast i8*%I to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLLN10TermFormat10FormatComb6guard__E_1010 to void(...)*),void(...)**%J,align 8
%K=getelementptr inbounds i8,i8*%B,i64 24
%L=bitcast i8*%K to i32*
store i32 -2147483647,i32*%L,align 4
ret i8*%B
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6guard__E_246(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6guard__E_245 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6guard__E_245 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6guard__E_247(i32 inreg%a,i32 inreg%b)unnamed_addr#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6guard__E_246 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6guard__E_246 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb7nestEndE_249(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
n:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%d,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%l,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%e,align 8
br label%l
l:
%m=phi i8*[%k,%j],[%a,%n]
%o=getelementptr inbounds i8,i8*%m,i64 8
%p=bitcast i8*%o to i8***
%q=load i8**,i8***%p,align 8
%r=load i8*,i8**%q,align 8
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%f,align 8
%x=getelementptr inbounds i8,i8*%m,i64 16
%y=bitcast i8*%x to i32*
%z=load i32,i32*%y,align 4
%A=bitcast i8**%c to i8*
call void@llvm.lifetime.start.p0i8(i64 8,i8*%A)
call void@llvm.gcroot(i8**%c,i8*null)#0
%B=call i8*@sml_alloc(i32 inreg 12)#0
%C=bitcast i8*%B to i32*
%D=getelementptr inbounds i8,i8*%B,i64 -4
%E=bitcast i8*%D to i32*
store i32 1342177288,i32*%E,align 4
store i8*%B,i8**%c,align 8
store i32%z,i32*%C,align 4
%F=getelementptr inbounds i8,i8*%B,i64 8
%G=bitcast i8*%F to i32*
store i32 0,i32*%G,align 4
%H=call i8*@sml_alloc(i32 inreg 28)#0
%I=getelementptr inbounds i8,i8*%H,i64 -4
%J=bitcast i8*%I to i32*
store i32 1342177304,i32*%J,align 4
%K=load i8*,i8**%c,align 8
%L=bitcast i8*%H to i8**
store i8*%K,i8**%L,align 8
%M=getelementptr inbounds i8,i8*%H,i64 8
%N=bitcast i8*%M to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat4nestE_190 to void(...)*),void(...)**%N,align 8
%O=getelementptr inbounds i8,i8*%H,i64 16
%P=bitcast i8*%O to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat4nestE_190 to void(...)*),void(...)**%P,align 8
%Q=getelementptr inbounds i8,i8*%H,i64 24
%R=bitcast i8*%Q to i32*
store i32 -2147483647,i32*%R,align 4
call void@llvm.lifetime.end.p0i8(i64 8,i8*%A)
%S=bitcast i8**%e to i8***
%T=load i8**,i8***%S,align 8
store i8*null,i8**%e,align 8
%U=load i8*,i8**%T,align 8
%V=call fastcc i8*@_SMLLN10TermFormat4nestE_190(i8*inreg%K,i8*inreg%U)
store i8*%V,i8**%e,align 8
%W=call i8*@sml_alloc(i32 inreg 20)#0
%X=getelementptr inbounds i8,i8*%W,i64 -4
%Y=bitcast i8*%X to i32*
store i32 1342177296,i32*%Y,align 4
store i8*%W,i8**%g,align 8
%Z=getelementptr inbounds i8,i8*%W,i64 4
%aa=bitcast i8*%Z to i32*
store i32 0,i32*%aa,align 1
%ab=bitcast i8*%W to i32*
store i32 4,i32*%ab,align 4
%ac=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%ad=getelementptr inbounds i8,i8*%W,i64 8
%ae=bitcast i8*%ad to i8**
store i8*%ac,i8**%ae,align 8
%af=getelementptr inbounds i8,i8*%W,i64 16
%ag=bitcast i8*%af to i32*
store i32 2,i32*%ag,align 4
%ah=call i8*@sml_alloc(i32 inreg 20)#0
%ai=getelementptr inbounds i8,i8*%ah,i64 -4
%aj=bitcast i8*%ai to i32*
store i32 1342177296,i32*%aj,align 4
%ak=load i8*,i8**%g,align 8
%al=bitcast i8*%ah to i8**
store i8*%ak,i8**%al,align 8
%am=load i8*,i8**%d,align 8
%an=getelementptr inbounds i8,i8*%ah,i64 8
%ao=bitcast i8*%an to i8**
store i8*%am,i8**%ao,align 8
%ap=getelementptr inbounds i8,i8*%ah,i64 16
%aq=bitcast i8*%ap to i32*
store i32 3,i32*%aq,align 4
%ar=load i8*,i8**%f,align 8
%as=tail call fastcc i8*%u(i8*inreg%ar,i8*inreg%ah)
ret i8*%as
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb7nestEndE_250(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8**
br label%q
l:
call void@sml_check(i32 inreg%h)
%m=load i8*,i8**%c,align 8
%n=bitcast i8**%d to i8***
%o=load i8**,i8***%n,align 8
%p=bitcast i8**%o to i8*
br label%q
q:
%r=phi i8*[%p,%l],[%a,%j]
%s=phi i8**[%o,%l],[%k,%j]
%t=phi i8*[%m,%l],[%b,%j]
%u=load i8*,i8**%s,align 8
store i8*%u,i8**%g,align 8
%v=getelementptr inbounds i8,i8*%u,i64 8
%w=bitcast i8*%v to i8**
%x=load i8*,i8**%w,align 8
store i8*%x,i8**%c,align 8
%y=getelementptr inbounds i8,i8*%t,i64 16
%z=bitcast i8*%y to i8*(i8*,i8*)**
%A=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%z,align 8
%B=bitcast i8*%t to i8**
%C=load i8*,i8**%B,align 8
store i8*%C,i8**%f,align 8
%D=getelementptr inbounds i8,i8*%r,i64 8
%E=bitcast i8*%D to i8**
%F=load i8*,i8**%E,align 8
store i8*%F,i8**%e,align 8
store i8*null,i8**%d,align 8
%G=getelementptr inbounds i8,i8*%r,i64 16
%H=bitcast i8*%G to i32*
%I=load i32,i32*%H,align 4
%J=call i8*@sml_alloc(i32 inreg 28)#0
%K=getelementptr inbounds i8,i8*%J,i64 -4
%L=bitcast i8*%K to i32*
store i32 1342177304,i32*%L,align 4
store i8*%J,i8**%d,align 8
%M=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%N=bitcast i8*%J to i8**
store i8*%M,i8**%N,align 8
%O=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%P=getelementptr inbounds i8,i8*%J,i64 8
%Q=bitcast i8*%P to i8**
store i8*%O,i8**%Q,align 8
%R=getelementptr inbounds i8,i8*%J,i64 16
%S=bitcast i8*%R to i32*
store i32%I,i32*%S,align 4
%T=getelementptr inbounds i8,i8*%J,i64 24
%U=bitcast i8*%T to i32*
store i32 3,i32*%U,align 4
%V=call i8*@sml_alloc(i32 inreg 28)#0
%W=getelementptr inbounds i8,i8*%V,i64 -4
%X=bitcast i8*%W to i32*
store i32 1342177304,i32*%X,align 4
store i8*%V,i8**%e,align 8
%Y=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%Z=bitcast i8*%V to i8**
store i8*%Y,i8**%Z,align 8
%aa=getelementptr inbounds i8,i8*%V,i64 8
%ab=bitcast i8*%aa to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb7nestEndE_249 to void(...)*),void(...)**%ab,align 8
%ac=getelementptr inbounds i8,i8*%V,i64 16
%ad=bitcast i8*%ac to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb7nestEndE_249 to void(...)*),void(...)**%ad,align 8
%ae=getelementptr inbounds i8,i8*%V,i64 24
%af=bitcast i8*%ae to i32*
store i32 -2147483647,i32*%af,align 4
%ag=call i8*@sml_alloc(i32 inreg 20)#0
%ah=getelementptr inbounds i8,i8*%ag,i64 -4
%ai=bitcast i8*%ah to i32*
store i32 1342177296,i32*%ai,align 4
%aj=load i8*,i8**%e,align 8
%ak=bitcast i8*%ag to i8**
store i8*%aj,i8**%ak,align 8
%al=load i8*,i8**%c,align 8
%am=getelementptr inbounds i8,i8*%ag,i64 8
%an=bitcast i8*%am to i8**
store i8*%al,i8**%an,align 8
%ao=getelementptr inbounds i8,i8*%ag,i64 16
%ap=bitcast i8*%ao to i32*
store i32 3,i32*%ap,align 4
%aq=load i8*,i8**%f,align 8
%ar=tail call fastcc i8*%A(i8*inreg%aq,i8*inreg%ag)
ret i8*%ar
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb7nestEndE_251(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=getelementptr inbounds i8,i8*%a,i64 16
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=call i8*@sml_alloc(i32 inreg 28)#0
%p=getelementptr inbounds i8,i8*%o,i64 -4
%q=bitcast i8*%p to i32*
store i32 1342177304,i32*%q,align 4
store i8*%o,i8**%f,align 8
%r=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%s=bitcast i8*%o to i8**
store i8*%r,i8**%s,align 8
%t=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%u=getelementptr inbounds i8,i8*%o,i64 8
%v=bitcast i8*%u to i8**
store i8*%t,i8**%v,align 8
%w=getelementptr inbounds i8,i8*%o,i64 16
%x=bitcast i8*%w to i32*
store i32%n,i32*%x,align 4
%y=getelementptr inbounds i8,i8*%o,i64 24
%z=bitcast i8*%y to i32*
store i32 3,i32*%z,align 4
%A=call i8*@sml_alloc(i32 inreg 28)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177304,i32*%C,align 4
%D=load i8*,i8**%f,align 8
%E=bitcast i8*%A to i8**
store i8*%D,i8**%E,align 8
%F=getelementptr inbounds i8,i8*%A,i64 8
%G=bitcast i8*%F to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb7nestEndE_250 to void(...)*),void(...)**%G,align 8
%H=getelementptr inbounds i8,i8*%A,i64 16
%I=bitcast i8*%H to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb7nestEndE_250 to void(...)*),void(...)**%I,align 8
%J=getelementptr inbounds i8,i8*%A,i64 24
%K=bitcast i8*%J to i32*
store i32 1,i32*%K,align 4
ret i8*%A
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb7nestEndE_252(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%b,i8**%c,align 8
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=getelementptr inbounds i8,i8*%a,i64 8
%i=bitcast i8*%h to i32*
%j=load i32,i32*%i,align 4
%k=call i8*@sml_alloc(i32 inreg 28)#0
%l=getelementptr inbounds i8,i8*%k,i64 -4
%m=bitcast i8*%l to i32*
store i32 1342177304,i32*%m,align 4
store i8*%k,i8**%e,align 8
%n=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%o=bitcast i8*%k to i8**
store i8*%n,i8**%o,align 8
%p=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%q=getelementptr inbounds i8,i8*%k,i64 8
%r=bitcast i8*%q to i8**
store i8*%p,i8**%r,align 8
%s=getelementptr inbounds i8,i8*%k,i64 16
%t=bitcast i8*%s to i32*
store i32%j,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%k,i64 24
%v=bitcast i8*%u to i32*
store i32 3,i32*%v,align 4
%w=call i8*@sml_alloc(i32 inreg 28)#0
%x=getelementptr inbounds i8,i8*%w,i64 -4
%y=bitcast i8*%x to i32*
store i32 1342177304,i32*%y,align 4
%z=load i8*,i8**%e,align 8
%A=bitcast i8*%w to i8**
store i8*%z,i8**%A,align 8
%B=getelementptr inbounds i8,i8*%w,i64 8
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN10TermFormat10FormatComb7nestEndE_251 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%w,i64 16
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat10FormatComb7nestEndE_1012 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%w,i64 24
%G=bitcast i8*%F to i32*
store i32 -2147483647,i32*%G,align 4
ret i8*%w
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb7nestEndE_253(i8*inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i8**
%f=load i8*,i8**%e,align 8
store i8*%f,i8**%c,align 8
%g=call i8*@sml_alloc(i32 inreg 20)#0
%h=getelementptr inbounds i8,i8*%g,i64 -4
%i=bitcast i8*%h to i32*
store i32 1342177296,i32*%i,align 4
store i8*%g,i8**%d,align 8
%j=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%k=bitcast i8*%g to i8**
store i8*%j,i8**%k,align 8
%l=getelementptr inbounds i8,i8*%g,i64 8
%m=bitcast i8*%l to i32*
store i32%b,i32*%m,align 4
%n=getelementptr inbounds i8,i8*%g,i64 16
%o=bitcast i8*%n to i32*
store i32 1,i32*%o,align 4
%p=call i8*@sml_alloc(i32 inreg 28)#0
%q=getelementptr inbounds i8,i8*%p,i64 -4
%r=bitcast i8*%q to i32*
store i32 1342177304,i32*%r,align 4
%s=load i8*,i8**%d,align 8
%t=bitcast i8*%p to i8**
store i8*%s,i8**%t,align 8
%u=getelementptr inbounds i8,i8*%p,i64 8
%v=bitcast i8*%u to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb7nestEndE_252 to void(...)*),void(...)**%v,align 8
%w=getelementptr inbounds i8,i8*%p,i64 16
%x=bitcast i8*%w to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb7nestEndE_252 to void(...)*),void(...)**%x,align 8
%y=getelementptr inbounds i8,i8*%p,i64 24
%z=bitcast i8*%y to i32*
store i32 -2147483647,i32*%z,align 4
ret i8*%p
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb7nestEndE_254(i8*inreg%a)unnamed_addr#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=getelementptr inbounds i8,i8*%d,i64 -4
%f=bitcast i8*%e to i32*
store i32 1342177288,i32*%f,align 4
store i8*%d,i8**%c,align 8
%g=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%h=bitcast i8*%d to i8**
store i8*%g,i8**%h,align 8
%i=getelementptr inbounds i8,i8*%d,i64 8
%j=bitcast i8*%i to i32*
store i32 1,i32*%j,align 4
%k=call i8*@sml_alloc(i32 inreg 28)#0
%l=getelementptr inbounds i8,i8*%k,i64 -4
%m=bitcast i8*%l to i32*
store i32 1342177304,i32*%m,align 4
%n=load i8*,i8**%c,align 8
%o=bitcast i8*%k to i8**
store i8*%n,i8**%o,align 8
%p=getelementptr inbounds i8,i8*%k,i64 8
%q=bitcast i8*%p to void(...)**
store void(...)*bitcast(i8*(i8*,i32)*@_SMLLN10TermFormat10FormatComb7nestEndE_253 to void(...)*),void(...)**%q,align 8
%r=getelementptr inbounds i8,i8*%k,i64 16
%s=bitcast i8*%r to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb7nestEndE_1013 to void(...)*),void(...)**%s,align 8
%t=getelementptr inbounds i8,i8*%k,i64 24
%u=bitcast i8*%t to i32*
store i32 -2147483647,i32*%u,align 4
ret i8*%k
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb5nest__E_258(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb5nest__E_260(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%m
i:
call void@sml_check(i32 inreg%e)
%j=load i8*,i8**%d,align 8
%k=bitcast i8**%c to i8***
%l=load i8**,i8***%k,align 8
br label%m
m:
%n=phi i8**[%l,%i],[%h,%g]
%o=phi i8*[%j,%i],[%b,%g]
store i8*null,i8**%d,align 8
%p=load i8*,i8**%n,align 8
%q=getelementptr inbounds i8,i8*%p,i64 8
%r=bitcast i8*%q to i8**
%s=load i8*,i8**%r,align 8
%t=getelementptr inbounds i8,i8*%s,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%s to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg%o)
%z=getelementptr inbounds i8,i8*%y,i64 16
%A=bitcast i8*%z to i8*(i8*,i8*,i8*)**
%B=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%A,align 8
%C=bitcast i8*%y to i8**
%D=load i8*,i8**%C,align 8
store i8*%D,i8**%d,align 8
%E=load i8*,i8**%c,align 8
%F=getelementptr inbounds i8,i8*%E,i64 8
%G=bitcast i8*%F to i32*
%H=load i32,i32*%G,align 4
store i8*null,i8**%c,align 8
%I=getelementptr inbounds i8,i8*%E,i64 12
%J=bitcast i8*%I to i32*
%K=load i32,i32*%J,align 4
%L=call i8*@sml_alloc(i32 inreg 4)#0
%M=bitcast i8*%L to i32*
%N=getelementptr inbounds i8,i8*%L,i64 -4
%O=bitcast i8*%N to i32*
store i32 4,i32*%O,align 4
store i8*%L,i8**%c,align 8
store i32%H,i32*%M,align 4
%P=call i8*@sml_alloc(i32 inreg 4)#0
%Q=bitcast i8*%P to i32*
%R=getelementptr inbounds i8,i8*%P,i64 -4
%S=bitcast i8*%R to i32*
store i32 4,i32*%S,align 4
store i32%K,i32*%Q,align 4
%T=load i8*,i8**%d,align 8
%U=load i8*,i8**%c,align 8
%V=tail call fastcc i8*%B(i8*inreg%T,i8*inreg%U,i8*inreg%P)
ret i8*%V
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb5nest__E_261(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=load i8*,i8**%c,align 8
%m=bitcast i8**%e to i8***
%n=load i8**,i8***%m,align 8
br label%o
o:
%p=phi i8**[%n,%k],[%j,%i]
%q=phi i8*[%l,%k],[%b,%i]
store i8*null,i8**%c,align 8
%r=getelementptr inbounds i8,i8*%q,i64 16
%s=bitcast i8*%r to i8*(i8*,i8*)**
%t=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%s,align 8
%u=bitcast i8*%q to i8**
%v=load i8*,i8**%u,align 8
store i8*%v,i8**%f,align 8
%w=load i8*,i8**%p,align 8
%x=call fastcc i8*@_SMLLN10TermFormat10FormatComb7nestEndE_254(i8*inreg%w)#0
%y=getelementptr inbounds i8,i8*%x,i64 16
%z=bitcast i8*%y to i8*(i8*,i8*)**
%A=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%z,align 8
%B=bitcast i8*%x to i8**
%C=load i8*,i8**%B,align 8
store i8*%C,i8**%c,align 8
%D=load i8*,i8**%e,align 8
%E=getelementptr inbounds i8,i8*%D,i64 8
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
%H=call i8*@sml_alloc(i32 inreg 4)#0
%I=bitcast i8*%H to i32*
%J=getelementptr inbounds i8,i8*%H,i64 -4
%K=bitcast i8*%J to i32*
store i32 4,i32*%K,align 4
store i32%G,i32*%I,align 4
%L=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%M=call fastcc i8*%A(i8*inreg%L,i8*inreg%H)
store i8*%M,i8**%c,align 8
%N=call i8*@sml_alloc(i32 inreg 20)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32 1342177296,i32*%P,align 4
store i8*%N,i8**%d,align 8
%Q=bitcast i8*%N to i8**
store i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@n,i64 0,i32 2)to i8*),i8**%Q,align 8
%R=load i8*,i8**%c,align 8
%S=getelementptr inbounds i8,i8*%N,i64 8
%T=bitcast i8*%S to i8**
store i8*%R,i8**%T,align 8
%U=getelementptr inbounds i8,i8*%N,i64 16
%V=bitcast i8*%U to i32*
store i32 3,i32*%V,align 4
store i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@n,i64 0,i32 2)to i8*),i8**%c,align 8
%W=load i8*,i8**%e,align 8
%X=getelementptr inbounds i8,i8*%W,i64 20
%Y=bitcast i8*%X to i32*
%Z=load i32,i32*%Y,align 4
store i8*null,i8**%e,align 8
%aa=getelementptr inbounds i8,i8*%W,i64 24
%ab=bitcast i8*%aa to i32*
%ac=load i32,i32*%ab,align 4
%ad=call i8*@sml_alloc(i32 inreg 20)#0
%ae=getelementptr inbounds i8,i8*%ad,i64 -4
%af=bitcast i8*%ae to i32*
store i32 1342177296,i32*%af,align 4
store i8*%ad,i8**%e,align 8
%ag=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ah=bitcast i8*%ad to i8**
store i8*%ag,i8**%ah,align 8
%ai=getelementptr inbounds i8,i8*%ad,i64 8
%aj=bitcast i8*%ai to i32*
store i32%Z,i32*%aj,align 4
%ak=getelementptr inbounds i8,i8*%ad,i64 12
%al=bitcast i8*%ak to i32*
store i32%ac,i32*%al,align 4
%am=getelementptr inbounds i8,i8*%ad,i64 16
%an=bitcast i8*%am to i32*
store i32 1,i32*%an,align 4
%ao=call i8*@sml_alloc(i32 inreg 28)#0
%ap=getelementptr inbounds i8,i8*%ao,i64 -4
%aq=bitcast i8*%ap to i32*
store i32 1342177304,i32*%aq,align 4
store i8*%ao,i8**%d,align 8
%ar=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%as=bitcast i8*%ao to i8**
store i8*%ar,i8**%as,align 8
%at=getelementptr inbounds i8,i8*%ao,i64 8
%au=bitcast i8*%at to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb5nest__E_260 to void(...)*),void(...)**%au,align 8
%av=getelementptr inbounds i8,i8*%ao,i64 16
%aw=bitcast i8*%av to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb5nest__E_260 to void(...)*),void(...)**%aw,align 8
%ax=getelementptr inbounds i8,i8*%ao,i64 24
%ay=bitcast i8*%ax to i32*
store i32 -2147483647,i32*%ay,align 4
%az=call i8*@sml_alloc(i32 inreg 20)#0
%aA=getelementptr inbounds i8,i8*%az,i64 -4
%aB=bitcast i8*%aA to i32*
store i32 1342177296,i32*%aB,align 4
%aC=load i8*,i8**%c,align 8
%aD=bitcast i8*%az to i8**
store i8*%aC,i8**%aD,align 8
%aE=load i8*,i8**%d,align 8
%aF=getelementptr inbounds i8,i8*%az,i64 8
%aG=bitcast i8*%aF to i8**
store i8*%aE,i8**%aG,align 8
%aH=getelementptr inbounds i8,i8*%az,i64 16
%aI=bitcast i8*%aH to i32*
store i32 3,i32*%aI,align 4
%aJ=load i8*,i8**%f,align 8
%aK=tail call fastcc i8*%t(i8*inreg%aJ,i8*inreg%az)
ret i8*%aK
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb5nest__E_262(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e)#4 gc"smlsharp"{
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%f,align 8
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i32*
%l=load i32,i32*%k,align 4
%m=getelementptr inbounds i8,i8*%a,i64 12
%n=bitcast i8*%m to i32*
%o=load i32,i32*%n,align 4
%p=getelementptr inbounds i8,i8*%a,i64 16
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=call i8*@sml_alloc(i32 inreg 36)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177312,i32*%u,align 4
store i8*%s,i8**%g,align 8
%v=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to i32*
store i32%l,i32*%y,align 4
%z=getelementptr inbounds i8,i8*%s,i64 12
%A=bitcast i8*%z to i32*
store i32%o,i32*%A,align 4
%B=getelementptr inbounds i8,i8*%s,i64 16
%C=bitcast i8*%B to i32*
store i32%r,i32*%C,align 4
%D=getelementptr inbounds i8,i8*%s,i64 20
%E=bitcast i8*%D to i32*
store i32%b,i32*%E,align 4
%F=getelementptr inbounds i8,i8*%s,i64 24
%G=bitcast i8*%F to i32*
store i32%c,i32*%G,align 4
%H=getelementptr inbounds i8,i8*%s,i64 32
%I=bitcast i8*%H to i32*
store i32 1,i32*%I,align 4
%J=call i8*@sml_alloc(i32 inreg 28)#0
%K=getelementptr inbounds i8,i8*%J,i64 -4
%L=bitcast i8*%K to i32*
store i32 1342177304,i32*%L,align 4
%M=load i8*,i8**%g,align 8
%N=bitcast i8*%J to i8**
store i8*%M,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%J,i64 8
%P=bitcast i8*%O to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb5nest__E_261 to void(...)*),void(...)**%P,align 8
%Q=getelementptr inbounds i8,i8*%J,i64 16
%R=bitcast i8*%Q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb5nest__E_261 to void(...)*),void(...)**%R,align 8
%S=getelementptr inbounds i8,i8*%J,i64 24
%T=bitcast i8*%S to i32*
store i32 1,i32*%T,align 4
ret i8*%J
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb5nest__E_263(i8*inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=bitcast i8*%a to i8**
%f=load i8*,i8**%e,align 8
store i8*%f,i8**%c,align 8
%g=getelementptr inbounds i8,i8*%a,i64 8
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=getelementptr inbounds i8,i8*%a,i64 12
%k=bitcast i8*%j to i32*
%l=load i32,i32*%k,align 4
%m=call i8*@sml_alloc(i32 inreg 28)#0
%n=getelementptr inbounds i8,i8*%m,i64 -4
%o=bitcast i8*%n to i32*
store i32 1342177304,i32*%o,align 4
store i8*%m,i8**%d,align 8
%p=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%q=bitcast i8*%m to i8**
store i8*%p,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%m,i64 8
%s=bitcast i8*%r to i32*
store i32%b,i32*%s,align 4
%t=getelementptr inbounds i8,i8*%m,i64 12
%u=bitcast i8*%t to i32*
store i32%i,i32*%u,align 4
%v=getelementptr inbounds i8,i8*%m,i64 16
%w=bitcast i8*%v to i32*
store i32%l,i32*%w,align 4
%x=getelementptr inbounds i8,i8*%m,i64 24
%y=bitcast i8*%x to i32*
store i32 1,i32*%y,align 4
%z=call i8*@sml_alloc(i32 inreg 28)#0
%A=getelementptr inbounds i8,i8*%z,i64 -4
%B=bitcast i8*%A to i32*
store i32 1342177304,i32*%B,align 4
%C=load i8*,i8**%d,align 8
%D=bitcast i8*%z to i8**
store i8*%C,i8**%D,align 8
%E=getelementptr inbounds i8,i8*%z,i64 8
%F=bitcast i8*%E to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32)*@_SMLLN10TermFormat10FormatComb5nest__E_262 to void(...)*),void(...)**%F,align 8
%G=getelementptr inbounds i8,i8*%z,i64 16
%H=bitcast i8*%G to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLLN10TermFormat10FormatComb5nest__E_1017 to void(...)*),void(...)**%H,align 8
%I=getelementptr inbounds i8,i8*%z,i64 24
%J=bitcast i8*%I to i32*
store i32 -2147483647,i32*%J,align 4
ret i8*%z
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb5nest__E_264(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i32)*@_SMLLN10TermFormat10FormatComb5nest__E_263 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb5nest__E_1018 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb5nest__E_265(i32 inreg%a,i32 inreg%b)unnamed_addr#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb5nest__E_264 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb5nest__E_264 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLN10TermFormat11intersperseE_267(i8*inreg%a,i8*inreg%b)unnamed_addr#2 gc"smlsharp"{
n:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%l,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%d,align 8
%k=load i8*,i8**%c,align 8
br label%l
l:
%m=phi i8*[%k,%i],[%a,%n]
%o=phi i8*[%j,%i],[%b,%n]
store i8*null,i8**%c,align 8
store i8*%m,i8**%e,align 8
%p=icmp eq i8*%o,null
br i1%p,label%q,label%r
q:
ret i8*null
r:
%s=getelementptr inbounds i8,i8*%o,i64 8
%t=bitcast i8*%s to i8**
%u=load i8*,i8**%t,align 8
%v=icmp eq i8*%u,null
br i1%v,label%w,label%z
w:
%x=bitcast i8*%o to i8**
%y=load i8*,i8**%x,align 8
ret i8*%y
z:
%A=call fastcc i8*@_SMLLN10TermFormat11intersperseE_267(i8*inreg%m,i8*inreg%u)
store i8*%A,i8**%c,align 8
%B=call i8*@sml_alloc(i32 inreg 20)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177296,i32*%D,align 4
store i8*%B,i8**%f,align 8
%E=getelementptr inbounds i8,i8*%B,i64 4
%F=bitcast i8*%E to i32*
store i32 0,i32*%F,align 1
%G=bitcast i8*%B to i32*
store i32 4,i32*%G,align 4
%H=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%I=getelementptr inbounds i8,i8*%B,i64 8
%J=bitcast i8*%I to i8**
store i8*%H,i8**%J,align 8
%K=getelementptr inbounds i8,i8*%B,i64 16
%L=bitcast i8*%K to i32*
store i32 2,i32*%L,align 4
%M=call i8*@sml_alloc(i32 inreg 20)#0
%N=getelementptr inbounds i8,i8*%M,i64 -4
%O=bitcast i8*%N to i32*
store i32 1342177296,i32*%O,align 4
store i8*%M,i8**%e,align 8
%P=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%Q=bitcast i8*%M to i8**
store i8*%P,i8**%Q,align 8
%R=load i8*,i8**%c,align 8
%S=getelementptr inbounds i8,i8*%M,i64 8
%T=bitcast i8*%S to i8**
store i8*%R,i8**%T,align 8
%U=getelementptr inbounds i8,i8*%M,i64 16
%V=bitcast i8*%U to i32*
store i32 3,i32*%V,align 4
%W=bitcast i8**%d to i8***
%X=load i8**,i8***%W,align 8
store i8*null,i8**%d,align 8
%Y=load i8*,i8**%X,align 8
store i8*%Y,i8**%c,align 8
%Z=call i8*@sml_alloc(i32 inreg 20)#0
%aa=getelementptr inbounds i8,i8*%Z,i64 -4
%ab=bitcast i8*%aa to i32*
store i32 1342177296,i32*%ab,align 4
store i8*%Z,i8**%d,align 8
%ac=getelementptr inbounds i8,i8*%Z,i64 4
%ad=bitcast i8*%ac to i32*
store i32 0,i32*%ad,align 1
%ae=bitcast i8*%Z to i32*
store i32 4,i32*%ae,align 4
%af=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ag=getelementptr inbounds i8,i8*%Z,i64 8
%ah=bitcast i8*%ag to i8**
store i8*%af,i8**%ah,align 8
%ai=getelementptr inbounds i8,i8*%Z,i64 16
%aj=bitcast i8*%ai to i32*
store i32 2,i32*%aj,align 4
%ak=call i8*@sml_alloc(i32 inreg 20)#0
%al=getelementptr inbounds i8,i8*%ak,i64 -4
%am=bitcast i8*%al to i32*
store i32 1342177296,i32*%am,align 4
%an=load i8*,i8**%d,align 8
%ao=bitcast i8*%ak to i8**
store i8*%an,i8**%ao,align 8
%ap=load i8*,i8**%e,align 8
%aq=getelementptr inbounds i8,i8*%ak,i64 8
%ar=bitcast i8*%aq to i8**
store i8*%ap,i8**%ar,align 8
%as=getelementptr inbounds i8,i8*%ak,i64 16
%at=bitcast i8*%as to i32*
store i32 3,i32*%at,align 4
ret i8*%ak
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_269(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_271(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_274(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%m
i:
call void@sml_check(i32 inreg%e)
%j=load i8*,i8**%d,align 8
%k=bitcast i8**%c to i8***
%l=load i8**,i8***%k,align 8
br label%m
m:
%n=phi i8**[%l,%i],[%h,%g]
%o=phi i8*[%j,%i],[%b,%g]
store i8*null,i8**%d,align 8
%p=load i8*,i8**%n,align 8
%q=getelementptr inbounds i8,i8*%p,i64 16
%r=bitcast i8*%q to i8*(i8*,i8*)**
%s=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%r,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8**%n to i8***
%u=load i8**,i8***%t,align 8
%v=load i8*,i8**%u,align 8
%w=call fastcc i8*%s(i8*inreg%v,i8*inreg%o)
%x=getelementptr inbounds i8,i8*%w,i64 16
%y=bitcast i8*%x to i8*(i8*,i8*,i8*)**
%z=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%y,align 8
%A=bitcast i8*%w to i8**
%B=load i8*,i8**%A,align 8
store i8*%B,i8**%c,align 8
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%d,align 8
store i32 1,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32 8,i32*%H,align 4
%K=load i8*,i8**%c,align 8
%L=load i8*,i8**%d,align 8
%M=tail call fastcc i8*%z(i8*inreg%K,i8*inreg%L,i8*inreg%G)
ret i8*%M
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_275(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=load i8*,i8**%d,align 8
%m=bitcast i8**%c to i8***
%n=load i8**,i8***%m,align 8
br label%o
o:
%p=phi i8**[%n,%k],[%j,%i]
%q=phi i8*[%l,%k],[%b,%i]
store i8*null,i8**%d,align 8
%r=load i8*,i8**%p,align 8
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
store i8*null,i8**%c,align 8
%v=bitcast i8**%p to i8***
%w=load i8**,i8***%v,align 8
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%u(i8*inreg%x,i8*inreg%q)
%z=getelementptr inbounds i8,i8*%y,i64 16
%A=bitcast i8*%z to i8*(i8*,i8*,i8*,i8*,i8*)**
%B=load i8*(i8*,i8*,i8*,i8*,i8*)*,i8*(i8*,i8*,i8*,i8*,i8*)**%A,align 8
%C=bitcast i8*%y to i8**
%D=load i8*,i8**%C,align 8
store i8*%D,i8**%c,align 8
%E=call i8*@sml_alloc(i32 inreg 4)#0
%F=bitcast i8*%E to i32*
%G=getelementptr inbounds i8,i8*%E,i64 -4
%H=bitcast i8*%G to i32*
store i32 4,i32*%H,align 4
store i8*%E,i8**%d,align 8
store i32 1,i32*%F,align 4
%I=call i8*@sml_alloc(i32 inreg 4)#0
%J=bitcast i8*%I to i32*
%K=getelementptr inbounds i8,i8*%I,i64 -4
%L=bitcast i8*%K to i32*
store i32 4,i32*%L,align 4
store i8*%I,i8**%e,align 8
store i32 8,i32*%J,align 4
%M=call i8*@sml_alloc(i32 inreg 4)#0
%N=bitcast i8*%M to i32*
%O=getelementptr inbounds i8,i8*%M,i64 -4
%P=bitcast i8*%O to i32*
store i32 4,i32*%P,align 4
store i8*%M,i8**%f,align 8
store i32 1,i32*%N,align 4
%Q=call i8*@sml_alloc(i32 inreg 4)#0
%R=bitcast i8*%Q to i32*
%S=getelementptr inbounds i8,i8*%Q,i64 -4
%T=bitcast i8*%S to i32*
store i32 4,i32*%T,align 4
store i32 8,i32*%R,align 4
%U=load i8*,i8**%c,align 8
%V=load i8*,i8**%d,align 8
%W=load i8*,i8**%e,align 8
%X=load i8*,i8**%f,align 8
%Y=call fastcc i8*%B(i8*inreg%U,i8*inreg%V,i8*inreg%W,i8*inreg%X,i8*inreg%Q)
ret i8*%Y
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_276(i8*inreg%a)#2 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%g,label%f
f:
call void@sml_check(i32 inreg%d)
br label%g
g:
%h=call fastcc i8*@_SMLLN10TermFormat10FormatComb6guard__E_247(i32 inreg 1,i32 inreg 8)
%i=getelementptr inbounds i8,i8*%h,i64 16
%j=bitcast i8*%i to i8*(i8*,i8*)**
%k=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%j,align 8
%l=bitcast i8*%h to i8**
%m=load i8*,i8**%l,align 8
%n=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%o=call fastcc i8*%k(i8*inreg%m,i8*inreg%n)
store i8*%o,i8**%b,align 8
%p=call i8*@sml_alloc(i32 inreg 12)#0
%q=getelementptr inbounds i8,i8*%p,i64 -4
%r=bitcast i8*%q to i32*
store i32 1342177288,i32*%r,align 4
store i8*%p,i8**%c,align 8
%s=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%t=bitcast i8*%p to i8**
store i8*%s,i8**%t,align 8
%u=getelementptr inbounds i8,i8*%p,i64 8
%v=bitcast i8*%u to i32*
store i32 1,i32*%v,align 4
%w=call i8*@sml_alloc(i32 inreg 28)#0
%x=getelementptr inbounds i8,i8*%w,i64 -4
%y=bitcast i8*%x to i32*
store i32 1342177304,i32*%y,align 4
%z=load i8*,i8**%c,align 8
%A=bitcast i8*%w to i8**
store i8*%z,i8**%A,align 8
%B=getelementptr inbounds i8,i8*%w,i64 8
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_275 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%w,i64 16
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_275 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%w,i64 24
%G=bitcast i8*%F to i32*
store i32 -2147483647,i32*%G,align 4
ret i8*%w
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_280(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%m
i:
call void@sml_check(i32 inreg%e)
%j=load i8*,i8**%d,align 8
%k=bitcast i8**%c to i8***
%l=load i8**,i8***%k,align 8
br label%m
m:
%n=phi i8**[%l,%i],[%h,%g]
%o=phi i8*[%j,%i],[%b,%g]
store i8*null,i8**%d,align 8
%p=load i8*,i8**%n,align 8
%q=getelementptr inbounds i8,i8*%p,i64 16
%r=bitcast i8*%q to i8*(i8*,i8*)**
%s=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%r,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8**%n to i8***
%u=load i8**,i8***%t,align 8
%v=load i8*,i8**%u,align 8
%w=call fastcc i8*%s(i8*inreg%v,i8*inreg%o)
%x=getelementptr inbounds i8,i8*%w,i64 16
%y=bitcast i8*%x to i8*(i8*,i8*,i8*)**
%z=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%y,align 8
%A=bitcast i8*%w to i8**
%B=load i8*,i8**%A,align 8
store i8*%B,i8**%c,align 8
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%d,align 8
store i32 1,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32 8,i32*%H,align 4
%K=load i8*,i8**%c,align 8
%L=load i8*,i8**%d,align 8
%M=tail call fastcc i8*%z(i8*inreg%K,i8*inreg%L,i8*inreg%G)
ret i8*%M
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_281(i8*inreg%a)#2 gc"smlsharp"{
j:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%h,label%f
f:
call void@sml_check(i32 inreg%d)
%g=load i8*,i8**%b,align 8
br label%h
h:
%i=phi i8*[%g,%f],[%a,%j]
store i8*null,i8**%b,align 8
%k=call fastcc i8*@_SMLLN10TermFormat10FormatComb1_DE_227(i8*inreg%i)#0
store i8*%k,i8**%b,align 8
%l=call i8*@sml_alloc(i32 inreg 12)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177288,i32*%n,align 4
store i8*%l,i8**%c,align 8
%o=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%c,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_280 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_280 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_284(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%m
i:
call void@sml_check(i32 inreg%e)
%j=load i8*,i8**%d,align 8
%k=bitcast i8**%c to i8***
%l=load i8**,i8***%k,align 8
br label%m
m:
%n=phi i8**[%l,%i],[%h,%g]
%o=phi i8*[%j,%i],[%b,%g]
store i8*null,i8**%d,align 8
%p=load i8*,i8**%n,align 8
%q=getelementptr inbounds i8,i8*%p,i64 16
%r=bitcast i8*%q to i8*(i8*,i8*)**
%s=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%r,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8**%n to i8***
%u=load i8**,i8***%t,align 8
%v=load i8*,i8**%u,align 8
%w=call fastcc i8*%s(i8*inreg%v,i8*inreg%o)
%x=getelementptr inbounds i8,i8*%w,i64 16
%y=bitcast i8*%x to i8*(i8*,i8*,i8*)**
%z=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%y,align 8
%A=bitcast i8*%w to i8**
%B=load i8*,i8**%A,align 8
store i8*%B,i8**%c,align 8
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%d,align 8
store i32 1,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32 8,i32*%H,align 4
%K=load i8*,i8**%c,align 8
%L=load i8*,i8**%d,align 8
%M=tail call fastcc i8*%z(i8*inreg%K,i8*inreg%L,i8*inreg%G)
ret i8*%M
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_285(i8*inreg%a)#2 gc"smlsharp"{
j:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%h,label%f
f:
call void@sml_check(i32 inreg%d)
%g=load i8*,i8**%b,align 8
br label%h
h:
%i=phi i8*[%g,%f],[%a,%j]
store i8*null,i8**%b,align 8
%k=call fastcc i8*@_SMLLN10TermFormat10FormatComb1_DE_227(i8*inreg%i)#0
store i8*%k,i8**%b,align 8
%l=call i8*@sml_alloc(i32 inreg 12)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177288,i32*%n,align 4
store i8*%l,i8**%c,align 8
%o=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%c,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_284 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_284 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_287(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=getelementptr inbounds i8,i8*%h,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
%m=getelementptr inbounds i8,i8*%l,i64 16
%n=bitcast i8*%m to i8*(i8*,i8*)**
%o=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%n,align 8
%p=bitcast i8*%l to i8**
%q=load i8*,i8**%p,align 8
store i8*%q,i8**%b,align 8
%r=bitcast i8*%h to i8**
%s=load i8*,i8**%r,align 8
%t=getelementptr inbounds i8,i8*%s,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%s to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
%A=tail call fastcc i8*%o(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_289(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=getelementptr inbounds i8,i8*%h,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
%m=getelementptr inbounds i8,i8*%l,i64 16
%n=bitcast i8*%m to i8*(i8*,i8*)**
%o=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%n,align 8
%p=bitcast i8*%l to i8**
%q=load i8*,i8**%p,align 8
store i8*%q,i8**%b,align 8
%r=bitcast i8*%h to i8**
%s=load i8*,i8**%r,align 8
%t=getelementptr inbounds i8,i8*%s,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%s to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
%A=tail call fastcc i8*%o(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_291(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%k,label%j
j:
call void@sml_check(i32 inreg%h)
br label%k
k:
%l=call fastcc i8*@_SMLLN10TermFormat10FormatComb1_DE_227(i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,i8*,i32}>,<{[4x i8],i32,i8*,i8*,i32}>*@q,i64 0,i32 2)to i8*))#0
store i8*%l,i8**%d,align 8
%m=call i8*@sml_alloc(i32 inreg 12)#0
%n=getelementptr inbounds i8,i8*%m,i64 -4
%o=bitcast i8*%n to i32*
store i32 1342177288,i32*%o,align 4
store i8*%m,i8**%f,align 8
%p=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%q=bitcast i8*%m to i8**
store i8*%p,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%m,i64 8
%s=bitcast i8*%r to i32*
store i32 1,i32*%s,align 4
%t=call i8*@sml_alloc(i32 inreg 28)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177304,i32*%v,align 4
%w=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_274 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%t,i64 16
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_274 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%t,i64 24
%D=bitcast i8*%C to i32*
store i32 -2147483647,i32*%D,align 4
%E=bitcast i8**%e to i8***
%F=load i8**,i8***%E,align 8
%G=load i8*,i8**%F,align 8
%H=getelementptr inbounds i8,i8*%G,i64 8
%I=bitcast i8*%H to i8**
%J=load i8*,i8**%I,align 8
%K=call fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_274(i8*inreg%w,i8*inreg%J)
%L=getelementptr inbounds i8,i8*%K,i64 16
%M=bitcast i8*%L to i8*(i8*,i8*)**
%N=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%M,align 8
%O=bitcast i8*%K to i8**
%P=load i8*,i8**%O,align 8
%Q=call fastcc i8*%N(i8*inreg%P,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@r,i64 0,i32 2)to i8*))
%R=getelementptr inbounds i8,i8*%Q,i64 16
%S=bitcast i8*%R to i8*(i8*,i8*)**
%T=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%S,align 8
%U=bitcast i8*%Q to i8**
%V=load i8*,i8**%U,align 8
%W=call fastcc i8*%T(i8*inreg%V,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,i32}>,<{[4x i8],i32,i8*,i32}>*@X,i64 0,i32 2)to i8*))
%X=getelementptr inbounds i8,i8*%W,i64 16
%Y=bitcast i8*%X to i8*(i8*,i8*)**
%Z=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%Y,align 8
%aa=bitcast i8*%W to i8**
%ab=load i8*,i8**%aa,align 8
%ac=call fastcc i8*%Z(i8*inreg%ab,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@s,i64 0,i32 2)to i8*))
%ad=getelementptr inbounds i8,i8*%ac,i64 16
%ae=bitcast i8*%ad to i8*(i8*,i8*)**
%af=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ae,align 8
%ag=bitcast i8*%ac to i8**
%ah=load i8*,i8**%ag,align 8
store i8*%ah,i8**%f,align 8
%ai=load i8**,i8***%E,align 8
%aj=load i8*,i8**%ai,align 8
%ak=getelementptr inbounds i8,i8*%aj,i64 16
%al=bitcast i8*%ak to i8**
%am=load i8*,i8**%al,align 8
store i8*%am,i8**%d,align 8
%an=call i8*@sml_alloc(i32 inreg 20)#0
%ao=getelementptr inbounds i8,i8*%an,i64 -4
%ap=bitcast i8*%ao to i32*
store i32 1342177296,i32*%ap,align 4
store i8*%an,i8**%g,align 8
%aq=getelementptr inbounds i8,i8*%an,i64 4
%ar=bitcast i8*%aq to i32*
store i32 0,i32*%ar,align 1
%as=bitcast i8*%an to i32*
store i32 4,i32*%as,align 4
%at=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%au=getelementptr inbounds i8,i8*%an,i64 8
%av=bitcast i8*%au to i8**
store i8*%at,i8**%av,align 8
%aw=getelementptr inbounds i8,i8*%an,i64 16
%ax=bitcast i8*%aw to i32*
store i32 2,i32*%ax,align 4
%ay=call i8*@sml_alloc(i32 inreg 20)#0
%az=getelementptr inbounds i8,i8*%ay,i64 -4
%aA=bitcast i8*%az to i32*
store i32 1342177296,i32*%aA,align 4
store i8*%ay,i8**%d,align 8
%aB=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%aC=bitcast i8*%ay to i8**
store i8*%aB,i8**%aC,align 8
%aD=getelementptr inbounds i8,i8*%ay,i64 8
%aE=bitcast i8*%aD to i8**
store i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,i8*,i32}>,<{[4x i8],i32,i8*,i8*,i32}>*@bP,i64 0,i32 2)to i8*),i8**%aE,align 8
%aF=getelementptr inbounds i8,i8*%ay,i64 16
%aG=bitcast i8*%aF to i32*
store i32 3,i32*%aG,align 4
%aH=load i8*,i8**%e,align 8
%aI=getelementptr inbounds i8,i8*%aH,i64 8
%aJ=bitcast i8*%aI to i32*
%aK=load i32,i32*%aJ,align 4
%aL=getelementptr inbounds i8,i8*%aH,i64 12
%aM=bitcast i8*%aL to i32*
%aN=load i32,i32*%aM,align 4
%aO=call fastcc i8*@_SMLFN4List3mapE(i32 inreg%aK,i32 inreg%aN,i32 inreg 1,i32 inreg 8)
%aP=getelementptr inbounds i8,i8*%aO,i64 16
%aQ=bitcast i8*%aP to i8*(i8*,i8*)**
%aR=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aQ,align 8
%aS=bitcast i8*%aO to i8**
%aT=load i8*,i8**%aS,align 8
%aU=bitcast i8**%e to i8****
%aV=load i8***,i8****%aU,align 8
%aW=load i8**,i8***%aV,align 8
%aX=load i8*,i8**%aW,align 8
%aY=call fastcc i8*%aR(i8*inreg%aT,i8*inreg%aX)
%aZ=getelementptr inbounds i8,i8*%aY,i64 16
%a0=bitcast i8*%aZ to i8*(i8*,i8*)**
%a1=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a0,align 8
%a2=bitcast i8*%aY to i8**
%a3=load i8*,i8**%a2,align 8
%a4=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%a5=call fastcc i8*%a1(i8*inreg%a3,i8*inreg%a4)
%a6=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%a7=call fastcc i8*@_SMLLN10TermFormat11intersperseE_267(i8*inreg%a6,i8*inreg%a5)
%a8=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%a9=call fastcc i8*%af(i8*inreg%a8,i8*inreg%a7)
%ba=getelementptr inbounds i8,i8*%a9,i64 16
%bb=bitcast i8*%ba to i8*(i8*,i8*)**
%bc=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bb,align 8
%bd=bitcast i8*%a9 to i8**
%be=load i8*,i8**%bd,align 8
%bf=call fastcc i8*%bc(i8*inreg%be,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@t,i64 0,i32 2)to i8*))
%bg=getelementptr inbounds i8,i8*%bf,i64 16
%bh=bitcast i8*%bg to i8*(i8*,i8*)**
%bi=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bh,align 8
%bj=bitcast i8*%bf to i8**
%bk=load i8*,i8**%bj,align 8
%bl=load i8**,i8***%E,align 8
store i8*null,i8**%e,align 8
%bm=load i8*,i8**%bl,align 8
%bn=getelementptr inbounds i8,i8*%bm,i64 24
%bo=bitcast i8*%bn to i8**
%bp=load i8*,i8**%bo,align 8
%bq=call fastcc i8*%bi(i8*inreg%bk,i8*inreg%bp)
%br=getelementptr inbounds i8,i8*%bq,i64 16
%bs=bitcast i8*%br to i8*(i8*,i8*)**
%bt=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bs,align 8
%bu=bitcast i8*%bq to i8**
%bv=load i8*,i8**%bu,align 8
%bw=call fastcc i8*%bt(i8*inreg%bv,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@u,i64 0,i32 2)to i8*))
%bx=getelementptr inbounds i8,i8*%bw,i64 16
%by=bitcast i8*%bx to i8*(i8*,i8*)**
%bz=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%by,align 8
%bA=bitcast i8*%bw to i8**
%bB=load i8*,i8**%bA,align 8
%bC=tail call fastcc i8*%bz(i8*inreg%bB,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@v,i64 0,i32 2)to i8*))
ret i8*%bC
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_292(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_291 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_291 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_293(i32 inreg%a,i32 inreg%b)unnamed_addr#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_292 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_292 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLN10TermFormat13formatAppListE_295(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
m:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%k,label%h
h:
call void@sml_check(i32 inreg%f)
%i=load i8*,i8**%e,align 8
%j=load i8*,i8**%c,align 8
br label%k
k:
%l=phi i8*[%i,%h],[%a,%m]
%n=phi i8*[%j,%h],[%b,%m]
%o=bitcast i8*%l to i8**
%p=getelementptr inbounds i8,i8*%l,i64 12
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=add i32%r,-1
%t=sub i32 0,%r
%u=and i32%s,%t
%v=load i8*,i8**%o,align 8
%w=getelementptr inbounds i8,i8*%v,i64 24
%x=bitcast i8*%w to i8**
%y=load i8*,i8**%x,align 8
store i8*%y,i8**%d,align 8
%z=icmp eq i8*%n,null
br i1%z,label%A,label%aa
A:
store i8*null,i8**%e,align 8
%B=load i8*,i8**%o,align 8
%C=getelementptr inbounds i8,i8*%B,i64 8
%D=bitcast i8*%C to i8**
%E=load i8*,i8**%D,align 8
store i8*%E,i8**%c,align 8
%F=call i8*@sml_alloc(i32 inreg 20)#0
%G=getelementptr inbounds i8,i8*%F,i64 -4
%H=bitcast i8*%G to i32*
store i32 1342177296,i32*%H,align 4
store i8*%F,i8**%e,align 8
%I=getelementptr inbounds i8,i8*%F,i64 4
%J=bitcast i8*%I to i32*
store i32 0,i32*%J,align 1
%K=bitcast i8*%F to i32*
store i32 4,i32*%K,align 4
%L=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%M=getelementptr inbounds i8,i8*%F,i64 8
%N=bitcast i8*%M to i8**
store i8*%L,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%F,i64 16
%P=bitcast i8*%O to i32*
store i32 2,i32*%P,align 4
%Q=call i8*@sml_alloc(i32 inreg 20)#0
%R=getelementptr inbounds i8,i8*%Q,i64 -4
%S=bitcast i8*%R to i32*
store i32 1342177296,i32*%S,align 4
%T=load i8*,i8**%e,align 8
%U=bitcast i8*%Q to i8**
store i8*%T,i8**%U,align 8
%V=load i8*,i8**%d,align 8
%W=getelementptr inbounds i8,i8*%Q,i64 8
%X=bitcast i8*%W to i8**
store i8*%V,i8**%X,align 8
%Y=getelementptr inbounds i8,i8*%Q,i64 16
%Z=bitcast i8*%Y to i32*
store i32 3,i32*%Z,align 4
ret i8*%Q
aa:
%ab=add i32%r,7
%ac=add i32%ab,%u
%ad=and i32%ac,-8
%ae=sext i32%ad to i64
%af=getelementptr inbounds i8,i8*%n,i64%ae
%ag=bitcast i8*%af to i8**
%ah=load i8*,i8**%ag,align 8
%ai=icmp eq i8*%ah,null
br i1%ai,label%aj,label%aN
aj:
%ak=bitcast i8*%l to i8***
%al=load i8**,i8***%ak,align 8
%am=load i8*,i8**%al,align 8
%an=getelementptr inbounds i8,i8*%am,i64 16
%ao=bitcast i8*%an to i8*(i8*,i8*)**
%ap=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ao,align 8
%aq=bitcast i8*%am to i8**
%ar=load i8*,i8**%aq,align 8
store i8*%ar,i8**%d,align 8
%as=getelementptr inbounds i8,i8*%l,i64 8
%at=bitcast i8*%as to i32*
%au=load i32,i32*%at,align 4
%av=icmp eq i32%au,0
br i1%av,label%aB,label%aw
aw:
%ax=sext i32%u to i64
%ay=getelementptr inbounds i8,i8*%n,i64%ax
%az=bitcast i8*%ay to i8**
%aA=load i8*,i8**%az,align 8
br label%aJ
aB:
store i8*null,i8**%e,align 8
%aC=call i8*@sml_alloc(i32 inreg%r)#0
%aD=getelementptr inbounds i8,i8*%aC,i64 -4
%aE=bitcast i8*%aD to i32*
store i32%r,i32*%aE,align 4
%aF=load i8*,i8**%c,align 8
%aG=sext i32%u to i64
%aH=getelementptr inbounds i8,i8*%aF,i64%aG
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aC,i8*%aH,i32%r,i1 false)
%aI=load i8*,i8**%d,align 8
br label%aJ
aJ:
%aK=phi i8*[%ar,%aw],[%aI,%aB]
%aL=phi i8*[%aA,%aw],[%aC,%aB]
%aM=tail call fastcc i8*%ap(i8*inreg%aK,i8*inreg%aL)
ret i8*%aM
aN:
%aO=getelementptr inbounds i8,i8*%l,i64 8
%aP=bitcast i8*%aO to i32*
%aQ=load i32,i32*%aP,align 4
%aR=call fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_293(i32 inreg%aQ,i32 inreg%r)
%aS=getelementptr inbounds i8,i8*%aR,i64 16
%aT=bitcast i8*%aS to i8*(i8*,i8*)**
%aU=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aT,align 8
%aV=bitcast i8*%aR to i8**
%aW=load i8*,i8**%aV,align 8
%aX=bitcast i8**%e to i8***
%aY=load i8**,i8***%aX,align 8
store i8*null,i8**%e,align 8
%aZ=load i8*,i8**%aY,align 8
%a0=call fastcc i8*%aU(i8*inreg%aW,i8*inreg%aZ)
%a1=getelementptr inbounds i8,i8*%a0,i64 16
%a2=bitcast i8*%a1 to i8*(i8*,i8*)**
%a3=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a2,align 8
%a4=bitcast i8*%a0 to i8**
%a5=load i8*,i8**%a4,align 8
%a6=load i8*,i8**%c,align 8
%a7=tail call fastcc i8*%a3(i8*inreg%a5,i8*inreg%a6)
ret i8*%a7
}
define internal fastcc i8*@_SMLLN10TermFormat13formatAppListE_296(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat13formatAppListE_295 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat13formatAppListE_295 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat13formatAppListE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat13formatAppListE_296 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat13formatAppListE_296 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLN10TermFormat13formatSeqListE_299(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
m:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%k,label%h
h:
call void@sml_check(i32 inreg%f)
%i=load i8*,i8**%c,align 8
%j=load i8*,i8**%d,align 8
br label%k
k:
%l=phi i8*[%j,%h],[%a,%m]
%n=phi i8*[%i,%h],[%b,%m]
%o=getelementptr inbounds i8,i8*%l,i64 12
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=add i32%q,-1
%s=sub i32 0,%q
%t=and i32%r,%s
%u=icmp eq i8*%n,null
br i1%u,label%v,label%w
v:
ret i8*null
w:
%x=add i32%q,7
%y=add i32%x,%t
%z=and i32%y,-8
%A=sext i32%z to i64
%B=getelementptr inbounds i8,i8*%n,i64%A
%C=bitcast i8*%B to i8**
%D=load i8*,i8**%C,align 8
%E=icmp eq i8*%D,null
br i1%E,label%F,label%aj
F:
%G=bitcast i8*%l to i8***
%H=load i8**,i8***%G,align 8
%I=load i8*,i8**%H,align 8
%J=getelementptr inbounds i8,i8*%I,i64 16
%K=bitcast i8*%J to i8*(i8*,i8*)**
%L=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%K,align 8
%M=bitcast i8*%I to i8**
%N=load i8*,i8**%M,align 8
store i8*%N,i8**%e,align 8
%O=getelementptr inbounds i8,i8*%l,i64 8
%P=bitcast i8*%O to i32*
%Q=load i32,i32*%P,align 4
%R=icmp eq i32%Q,0
br i1%R,label%X,label%S
S:
%T=sext i32%t to i64
%U=getelementptr inbounds i8,i8*%n,i64%T
%V=bitcast i8*%U to i8**
%W=load i8*,i8**%V,align 8
br label%af
X:
store i8*null,i8**%d,align 8
%Y=call i8*@sml_alloc(i32 inreg%q)#0
%Z=getelementptr inbounds i8,i8*%Y,i64 -4
%aa=bitcast i8*%Z to i32*
store i32%q,i32*%aa,align 4
%ab=load i8*,i8**%c,align 8
%ac=sext i32%t to i64
%ad=getelementptr inbounds i8,i8*%ab,i64%ac
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%Y,i8*%ad,i32%q,i1 false)
%ae=load i8*,i8**%e,align 8
br label%af
af:
%ag=phi i8*[%N,%S],[%ae,%X]
%ah=phi i8*[%W,%S],[%Y,%X]
%ai=tail call fastcc i8*%L(i8*inreg%ag,i8*inreg%ah)
ret i8*%ai
aj:
%ak=getelementptr inbounds i8,i8*%l,i64 8
%al=bitcast i8*%ak to i32*
%am=load i32,i32*%al,align 4
%an=call fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_293(i32 inreg%am,i32 inreg%q)
%ao=getelementptr inbounds i8,i8*%an,i64 16
%ap=bitcast i8*%ao to i8*(i8*,i8*)**
%aq=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ap,align 8
%ar=bitcast i8*%an to i8**
%as=load i8*,i8**%ar,align 8
%at=bitcast i8**%d to i8***
%au=load i8**,i8***%at,align 8
store i8*null,i8**%d,align 8
%av=load i8*,i8**%au,align 8
%aw=call fastcc i8*%aq(i8*inreg%as,i8*inreg%av)
%ax=getelementptr inbounds i8,i8*%aw,i64 16
%ay=bitcast i8*%ax to i8*(i8*,i8*)**
%az=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ay,align 8
%aA=bitcast i8*%aw to i8**
%aB=load i8*,i8**%aA,align 8
%aC=load i8*,i8**%c,align 8
%aD=tail call fastcc i8*%az(i8*inreg%aB,i8*inreg%aC)
ret i8*%aD
}
define internal fastcc i8*@_SMLLN10TermFormat13formatSeqListE_300(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat13formatSeqListE_299 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat13formatSeqListE_299 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat13formatSeqListE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat13formatSeqListE_300 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat13formatSeqListE_300 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLN10TermFormat14formatDeclListE_303(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%h,label%j
h:
%i=bitcast i8*%a to i8***
br label%n
j:
call void@sml_check(i32 inreg%f)
%k=bitcast i8**%d to i8****
%l=load i8***,i8****%k,align 8
%m=load i8*,i8**%c,align 8
br label%n
n:
%o=phi i8*[%m,%j],[%b,%h]
%p=phi i8***[%l,%j],[%i,%h]
%q=load i8**,i8***%p,align 8
%r=load i8*,i8**%q,align 8
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*null,i8**%c,align 8
%x=call fastcc i8*%u(i8*inreg%w,i8*inreg%o)
store i8*%x,i8**%c,align 8
%y=bitcast i8**%d to i8***
%z=load i8**,i8***%y,align 8
%A=load i8*,i8**%z,align 8
%B=getelementptr inbounds i8,i8*%A,i64 16
%C=bitcast i8*%B to i8**
%D=load i8*,i8**%C,align 8
store i8*%D,i8**%d,align 8
%E=call i8*@sml_alloc(i32 inreg 20)#0
%F=getelementptr inbounds i8,i8*%E,i64 -4
%G=bitcast i8*%F to i32*
store i32 1342177296,i32*%G,align 4
store i8*%E,i8**%e,align 8
%H=getelementptr inbounds i8,i8*%E,i64 4
%I=bitcast i8*%H to i32*
store i32 0,i32*%I,align 1
%J=bitcast i8*%E to i32*
store i32 4,i32*%J,align 4
%K=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%L=getelementptr inbounds i8,i8*%E,i64 8
%M=bitcast i8*%L to i8**
store i8*%K,i8**%M,align 8
%N=getelementptr inbounds i8,i8*%E,i64 16
%O=bitcast i8*%N to i32*
store i32 2,i32*%O,align 4
%P=call i8*@sml_alloc(i32 inreg 20)#0
%Q=getelementptr inbounds i8,i8*%P,i64 -4
%R=bitcast i8*%Q to i32*
store i32 1342177296,i32*%R,align 4
store i8*%P,i8**%d,align 8
%S=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%T=bitcast i8*%P to i8**
store i8*%S,i8**%T,align 8
%U=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%V=getelementptr inbounds i8,i8*%P,i64 8
%W=bitcast i8*%V to i8**
store i8*%U,i8**%W,align 8
%X=getelementptr inbounds i8,i8*%P,i64 16
%Y=bitcast i8*%X to i32*
store i32 3,i32*%Y,align 4
%Z=call i8*@sml_alloc(i32 inreg 20)#0
%aa=bitcast i8*%Z to i32*
%ab=getelementptr inbounds i8,i8*%Z,i64 -4
%ac=bitcast i8*%ab to i32*
store i32 1342177296,i32*%ac,align 4
%ad=getelementptr inbounds i8,i8*%Z,i64 4
%ae=bitcast i8*%ad to i32*
store i32 0,i32*%ae,align 1
store i32 4,i32*%aa,align 4
%af=load i8*,i8**%d,align 8
%ag=getelementptr inbounds i8,i8*%Z,i64 8
%ah=bitcast i8*%ag to i8**
store i8*%af,i8**%ah,align 8
%ai=getelementptr inbounds i8,i8*%Z,i64 16
%aj=bitcast i8*%ai to i32*
store i32 2,i32*%aj,align 4
ret i8*%Z
}
define internal fastcc i8*@_SMLLN10TermFormat14formatDeclListE_304(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
p:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%n,label%k
k:
call void@sml_check(i32 inreg%i)
%l=load i8*,i8**%c,align 8
%m=load i8*,i8**%d,align 8
br label%n
n:
%o=phi i8*[%m,%k],[%a,%p]
%q=phi i8*[%l,%k],[%b,%p]
%r=getelementptr inbounds i8,i8*%o,i64 12
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=add i32%t,-1
%v=sub i32 0,%t
%w=and i32%u,%v
%x=add i32%t,7
%y=add i32%x,%w
%z=and i32%y,-8
%A=icmp eq i8*%q,null
br i1%A,label%B,label%C
B:
ret i8*null
C:
%D=bitcast i8*%o to i8***
%E=load i8**,i8***%D,align 8
%F=load i8*,i8**%E,align 8
%G=getelementptr inbounds i8,i8*%F,i64 16
%H=bitcast i8*%G to i8*(i8*,i8*)**
%I=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%H,align 8
%J=bitcast i8*%F to i8**
%K=load i8*,i8**%J,align 8
store i8*%K,i8**%e,align 8
%L=getelementptr inbounds i8,i8*%o,i64 8
%M=bitcast i8*%L to i32*
%N=load i32,i32*%M,align 4
%O=icmp eq i32%N,0
br i1%O,label%U,label%P
P:
%Q=sext i32%w to i64
%R=getelementptr inbounds i8,i8*%q,i64%Q
%S=bitcast i8*%R to i8**
%T=load i8*,i8**%S,align 8
br label%ac
U:
%V=call i8*@sml_alloc(i32 inreg%t)#0
%W=getelementptr inbounds i8,i8*%V,i64 -4
%X=bitcast i8*%W to i32*
store i32%t,i32*%X,align 4
%Y=load i8*,i8**%c,align 8
%Z=sext i32%w to i64
%aa=getelementptr inbounds i8,i8*%Y,i64%Z
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%V,i8*%aa,i32%t,i1 false)
%ab=load i8*,i8**%e,align 8
br label%ac
ac:
%ad=phi i8*[%K,%P],[%ab,%U]
%ae=phi i8*[%T,%P],[%V,%U]
store i8*null,i8**%e,align 8
%af=call fastcc i8*%I(i8*inreg%ad,i8*inreg%ae)
store i8*%af,i8**%e,align 8
%ag=call i8*@sml_alloc(i32 inreg 20)#0
%ah=getelementptr inbounds i8,i8*%ag,i64 -4
%ai=bitcast i8*%ah to i32*
store i32 1342177296,i32*%ai,align 4
store i8*%ag,i8**%g,align 8
%aj=getelementptr inbounds i8,i8*%ag,i64 4
%ak=bitcast i8*%aj to i32*
store i32 0,i32*%ak,align 1
%al=bitcast i8*%ag to i32*
store i32 4,i32*%al,align 4
%am=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%an=getelementptr inbounds i8,i8*%ag,i64 8
%ao=bitcast i8*%an to i8**
store i8*%am,i8**%ao,align 8
%ap=getelementptr inbounds i8,i8*%ag,i64 16
%aq=bitcast i8*%ap to i32*
store i32 2,i32*%aq,align 4
%ar=load i8*,i8**%d,align 8
%as=getelementptr inbounds i8,i8*%ar,i64 8
%at=bitcast i8*%as to i32*
%au=load i32,i32*%at,align 4
%av=getelementptr inbounds i8,i8*%ar,i64 12
%aw=bitcast i8*%av to i32*
%ax=load i32,i32*%aw,align 4
%ay=call fastcc i8*@_SMLFN4List3mapE(i32 inreg%au,i32 inreg%ax,i32 inreg 1,i32 inreg 8)
%az=getelementptr inbounds i8,i8*%ay,i64 16
%aA=bitcast i8*%az to i8*(i8*,i8*)**
%aB=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aA,align 8
%aC=bitcast i8*%ay to i8**
%aD=load i8*,i8**%aC,align 8
store i8*%aD,i8**%f,align 8
%aE=bitcast i8**%d to i8***
%aF=load i8**,i8***%aE,align 8
%aG=load i8*,i8**%aF,align 8
store i8*%aG,i8**%e,align 8
%aH=call i8*@sml_alloc(i32 inreg 12)#0
%aI=getelementptr inbounds i8,i8*%aH,i64 -4
%aJ=bitcast i8*%aI to i32*
store i32 1342177288,i32*%aJ,align 4
store i8*%aH,i8**%h,align 8
%aK=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aL=bitcast i8*%aH to i8**
store i8*%aK,i8**%aL,align 8
%aM=getelementptr inbounds i8,i8*%aH,i64 8
%aN=bitcast i8*%aM to i32*
store i32 1,i32*%aN,align 4
%aO=call i8*@sml_alloc(i32 inreg 28)#0
%aP=getelementptr inbounds i8,i8*%aO,i64 -4
%aQ=bitcast i8*%aP to i32*
store i32 1342177304,i32*%aQ,align 4
%aR=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%aS=bitcast i8*%aO to i8**
store i8*%aR,i8**%aS,align 8
%aT=getelementptr inbounds i8,i8*%aO,i64 8
%aU=bitcast i8*%aT to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatDeclListE_303 to void(...)*),void(...)**%aU,align 8
%aV=getelementptr inbounds i8,i8*%aO,i64 16
%aW=bitcast i8*%aV to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatDeclListE_303 to void(...)*),void(...)**%aW,align 8
%aX=getelementptr inbounds i8,i8*%aO,i64 24
%aY=bitcast i8*%aX to i32*
store i32 1,i32*%aY,align 4
%aZ=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%a0=call fastcc i8*%aB(i8*inreg%aZ,i8*inreg%aO)
%a1=getelementptr inbounds i8,i8*%a0,i64 16
%a2=bitcast i8*%a1 to i8*(i8*,i8*)**
%a3=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a2,align 8
%a4=bitcast i8*%a0 to i8**
%a5=load i8*,i8**%a4,align 8
%a6=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%a7=sext i32%z to i64
%a8=getelementptr inbounds i8,i8*%a6,i64%a7
%a9=bitcast i8*%a8 to i8**
%ba=load i8*,i8**%a9,align 8
%bb=call fastcc i8*%a3(i8*inreg%a5,i8*inreg%ba)
store i8*%bb,i8**%c,align 8
%bc=call i8*@sml_alloc(i32 inreg 20)#0
%bd=getelementptr inbounds i8,i8*%bc,i64 -4
%be=bitcast i8*%bd to i32*
store i32 1342177296,i32*%be,align 4
store i8*%bc,i8**%e,align 8
%bf=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%bg=bitcast i8*%bc to i8**
store i8*%bf,i8**%bg,align 8
%bh=load i8*,i8**%c,align 8
%bi=getelementptr inbounds i8,i8*%bc,i64 8
%bj=bitcast i8*%bi to i8**
store i8*%bh,i8**%bj,align 8
%bk=getelementptr inbounds i8,i8*%bc,i64 16
%bl=bitcast i8*%bk to i32*
store i32 3,i32*%bl,align 4
%bm=load i8**,i8***%aE,align 8
store i8*null,i8**%d,align 8
%bn=load i8*,i8**%bm,align 8
%bo=getelementptr inbounds i8,i8*%bn,i64 8
%bp=bitcast i8*%bo to i8**
%bq=load i8*,i8**%bp,align 8
store i8*%bq,i8**%c,align 8
%br=call i8*@sml_alloc(i32 inreg 20)#0
%bs=getelementptr inbounds i8,i8*%br,i64 -4
%bt=bitcast i8*%bs to i32*
store i32 1342177296,i32*%bt,align 4
store i8*%br,i8**%d,align 8
%bu=getelementptr inbounds i8,i8*%br,i64 4
%bv=bitcast i8*%bu to i32*
store i32 0,i32*%bv,align 1
%bw=bitcast i8*%br to i32*
store i32 4,i32*%bw,align 4
%bx=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%by=getelementptr inbounds i8,i8*%br,i64 8
%bz=bitcast i8*%by to i8**
store i8*%bx,i8**%bz,align 8
%bA=getelementptr inbounds i8,i8*%br,i64 16
%bB=bitcast i8*%bA to i32*
store i32 2,i32*%bB,align 4
%bC=call i8*@sml_alloc(i32 inreg 20)#0
%bD=getelementptr inbounds i8,i8*%bC,i64 -4
%bE=bitcast i8*%bD to i32*
store i32 1342177296,i32*%bE,align 4
%bF=load i8*,i8**%d,align 8
%bG=bitcast i8*%bC to i8**
store i8*%bF,i8**%bG,align 8
%bH=load i8*,i8**%e,align 8
%bI=getelementptr inbounds i8,i8*%bC,i64 8
%bJ=bitcast i8*%bI to i8**
store i8*%bH,i8**%bJ,align 8
%bK=getelementptr inbounds i8,i8*%bC,i64 16
%bL=bitcast i8*%bK to i32*
store i32 3,i32*%bL,align 4
ret i8*%bC
}
define internal fastcc i8*@_SMLLN10TermFormat14formatDeclListE_305(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatDeclListE_304 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatDeclListE_304 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat14formatDeclListE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatDeclListE_305 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatDeclListE_305 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLN10TermFormat14formatCaseListE_308(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
n:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%l,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%c,align 8
%k=load i8*,i8**%e,align 8
br label%l
l:
%m=phi i8*[%k,%i],[%a,%n]
%o=phi i8*[%j,%i],[%b,%n]
%p=bitcast i8*%m to i8***
%q=getelementptr inbounds i8,i8*%m,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=add i32%s,-1
%u=sub i32 0,%s
%v=and i32%t,%u
%w=add i32%s,7
%x=add i32%w,%v
%y=and i32%x,-8
%z=sext i32%y to i64
%A=getelementptr inbounds i8,i8*%o,i64%z
%B=bitcast i8*%A to i8**
%C=load i8*,i8**%B,align 8
store i8*%C,i8**%d,align 8
%D=load i8**,i8***%p,align 8
%E=load i8*,i8**%D,align 8
%F=getelementptr inbounds i8,i8*%E,i64 16
%G=bitcast i8*%F to i8*(i8*,i8*)**
%H=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%G,align 8
%I=bitcast i8*%E to i8**
%J=load i8*,i8**%I,align 8
store i8*%J,i8**%f,align 8
%K=getelementptr inbounds i8,i8*%m,i64 8
%L=bitcast i8*%K to i32*
%M=load i32,i32*%L,align 4
%N=icmp eq i32%M,0
br i1%N,label%T,label%O
O:
store i8*null,i8**%c,align 8
%P=sext i32%v to i64
%Q=getelementptr inbounds i8,i8*%o,i64%P
%R=bitcast i8*%Q to i8**
%S=load i8*,i8**%R,align 8
br label%ab
T:
%U=call i8*@sml_alloc(i32 inreg%s)#0
%V=getelementptr inbounds i8,i8*%U,i64 -4
%W=bitcast i8*%V to i32*
store i32%s,i32*%W,align 4
%X=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%Y=sext i32%v to i64
%Z=getelementptr inbounds i8,i8*%X,i64%Y
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%U,i8*%Z,i32%s,i1 false)
%aa=load i8*,i8**%f,align 8
br label%ab
ab:
%ac=phi i8*[%J,%O],[%aa,%T]
%ad=phi i8*[%S,%O],[%U,%T]
store i8*null,i8**%f,align 8
%ae=call fastcc i8*%H(i8*inreg%ac,i8*inreg%ad)
store i8*%ae,i8**%c,align 8
%af=call i8*@sml_alloc(i32 inreg 20)#0
%ag=getelementptr inbounds i8,i8*%af,i64 -4
%ah=bitcast i8*%ag to i32*
store i32 1342177296,i32*%ah,align 4
store i8*%af,i8**%f,align 8
%ai=getelementptr inbounds i8,i8*%af,i64 4
%aj=bitcast i8*%ai to i32*
store i32 0,i32*%aj,align 1
%ak=bitcast i8*%af to i32*
store i32 4,i32*%ak,align 4
%al=load i8*,i8**%c,align 8
%am=getelementptr inbounds i8,i8*%af,i64 8
%an=bitcast i8*%am to i8**
store i8*%al,i8**%an,align 8
%ao=getelementptr inbounds i8,i8*%af,i64 16
%ap=bitcast i8*%ao to i32*
store i32 2,i32*%ap,align 4
%aq=bitcast i8**%e to i8***
%ar=load i8**,i8***%aq,align 8
store i8*null,i8**%e,align 8
%as=load i8*,i8**%ar,align 8
%at=getelementptr inbounds i8,i8*%as,i64 16
%au=bitcast i8*%at to i8**
%av=load i8*,i8**%au,align 8
store i8*%av,i8**%c,align 8
%aw=call i8*@sml_alloc(i32 inreg 20)#0
%ax=getelementptr inbounds i8,i8*%aw,i64 -4
%ay=bitcast i8*%ax to i32*
store i32 1342177296,i32*%ay,align 4
store i8*%aw,i8**%e,align 8
%az=getelementptr inbounds i8,i8*%aw,i64 4
%aA=bitcast i8*%az to i32*
store i32 0,i32*%aA,align 1
%aB=bitcast i8*%aw to i32*
store i32 4,i32*%aB,align 4
%aC=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aD=getelementptr inbounds i8,i8*%aw,i64 8
%aE=bitcast i8*%aD to i8**
store i8*%aC,i8**%aE,align 8
%aF=getelementptr inbounds i8,i8*%aw,i64 16
%aG=bitcast i8*%aF to i32*
store i32 2,i32*%aG,align 4
%aH=call i8*@sml_alloc(i32 inreg 20)#0
%aI=getelementptr inbounds i8,i8*%aH,i64 -4
%aJ=bitcast i8*%aI to i32*
store i32 1342177296,i32*%aJ,align 4
store i8*%aH,i8**%c,align 8
%aK=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aL=bitcast i8*%aH to i8**
store i8*%aK,i8**%aL,align 8
%aM=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aN=getelementptr inbounds i8,i8*%aH,i64 8
%aO=bitcast i8*%aN to i8**
store i8*%aM,i8**%aO,align 8
%aP=getelementptr inbounds i8,i8*%aH,i64 16
%aQ=bitcast i8*%aP to i32*
store i32 3,i32*%aQ,align 4
%aR=call i8*@sml_alloc(i32 inreg 20)#0
%aS=getelementptr inbounds i8,i8*%aR,i64 -4
%aT=bitcast i8*%aS to i32*
store i32 1342177296,i32*%aT,align 4
%aU=load i8*,i8**%f,align 8
%aV=bitcast i8*%aR to i8**
store i8*%aU,i8**%aV,align 8
%aW=load i8*,i8**%c,align 8
%aX=getelementptr inbounds i8,i8*%aR,i64 8
%aY=bitcast i8*%aX to i8**
store i8*%aW,i8**%aY,align 8
%aZ=getelementptr inbounds i8,i8*%aR,i64 16
%a0=bitcast i8*%aZ to i32*
store i32 3,i32*%a0,align 4
ret i8*%aR
}
define internal fastcc i8*@_SMLLN10TermFormat14formatCaseListE_309(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%k,label%n
k:
%l=bitcast i8*%a to i8**
%m=bitcast i8**%e to i8***
br label%s
n:
call void@sml_check(i32 inreg%i)
%o=bitcast i8**%e to i8***
%p=load i8**,i8***%o,align 8
%q=load i8*,i8**%c,align 8
%r=bitcast i8**%p to i8*
br label%s
s:
%t=phi i8***[%m,%k],[%o,%n]
%u=phi i8*[%a,%k],[%r,%n]
%v=phi i8*[%b,%k],[%q,%n]
%w=phi i8**[%l,%k],[%p,%n]
%x=load i8*,i8**%w,align 8
%y=getelementptr inbounds i8,i8*%x,i64 24
%z=bitcast i8*%y to i8**
%A=load i8*,i8**%z,align 8
store i8*%A,i8**%d,align 8
%B=icmp eq i8*%v,null
br i1%B,label%C,label%ad
C:
store i8*null,i8**%e,align 8
%D=bitcast i8*%u to i8**
%E=load i8*,i8**%D,align 8
%F=getelementptr inbounds i8,i8*%E,i64 8
%G=bitcast i8*%F to i8**
%H=load i8*,i8**%G,align 8
store i8*%H,i8**%c,align 8
%I=call i8*@sml_alloc(i32 inreg 20)#0
%J=getelementptr inbounds i8,i8*%I,i64 -4
%K=bitcast i8*%J to i32*
store i32 1342177296,i32*%K,align 4
store i8*%I,i8**%e,align 8
%L=getelementptr inbounds i8,i8*%I,i64 4
%M=bitcast i8*%L to i32*
store i32 0,i32*%M,align 1
%N=bitcast i8*%I to i32*
store i32 4,i32*%N,align 4
%O=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%P=getelementptr inbounds i8,i8*%I,i64 8
%Q=bitcast i8*%P to i8**
store i8*%O,i8**%Q,align 8
%R=getelementptr inbounds i8,i8*%I,i64 16
%S=bitcast i8*%R to i32*
store i32 2,i32*%S,align 4
%T=call i8*@sml_alloc(i32 inreg 20)#0
%U=getelementptr inbounds i8,i8*%T,i64 -4
%V=bitcast i8*%U to i32*
store i32 1342177296,i32*%V,align 4
%W=load i8*,i8**%e,align 8
%X=bitcast i8*%T to i8**
store i8*%W,i8**%X,align 8
%Y=load i8*,i8**%d,align 8
%Z=getelementptr inbounds i8,i8*%T,i64 8
%aa=bitcast i8*%Z to i8**
store i8*%Y,i8**%aa,align 8
%ab=getelementptr inbounds i8,i8*%T,i64 16
%ac=bitcast i8*%ab to i32*
store i32 3,i32*%ac,align 4
ret i8*%T
ad:
%ae=getelementptr inbounds i8,i8*%u,i64 8
%af=bitcast i8*%ae to i32*
%ag=load i32,i32*%af,align 4
%ah=getelementptr inbounds i8,i8*%u,i64 12
%ai=bitcast i8*%ah to i32*
%aj=load i32,i32*%ai,align 4
%ak=call fastcc i8*@_SMLFN4List5foldrE(i32 inreg%ag,i32 inreg%aj,i32 inreg 1,i32 inreg 8)
%al=getelementptr inbounds i8,i8*%ak,i64 16
%am=bitcast i8*%al to i8*(i8*,i8*)**
%an=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%am,align 8
%ao=bitcast i8*%ak to i8**
%ap=load i8*,i8**%ao,align 8
store i8*%ap,i8**%g,align 8
%aq=load i8**,i8***%t,align 8
%ar=load i8*,i8**%aq,align 8
store i8*%ar,i8**%f,align 8
%as=bitcast i8**%aq to i8*
%at=getelementptr inbounds i8*,i8**%aq,i64 1
%au=bitcast i8**%at to i32*
%av=load i32,i32*%au,align 4
%aw=getelementptr inbounds i8,i8*%as,i64 12
%ax=bitcast i8*%aw to i32*
%ay=load i32,i32*%ax,align 4
%az=call i8*@sml_alloc(i32 inreg 20)#0
%aA=getelementptr inbounds i8,i8*%az,i64 -4
%aB=bitcast i8*%aA to i32*
store i32 1342177296,i32*%aB,align 4
store i8*%az,i8**%h,align 8
%aC=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%aD=bitcast i8*%az to i8**
store i8*%aC,i8**%aD,align 8
%aE=getelementptr inbounds i8,i8*%az,i64 8
%aF=bitcast i8*%aE to i32*
store i32%av,i32*%aF,align 4
%aG=getelementptr inbounds i8,i8*%az,i64 12
%aH=bitcast i8*%aG to i32*
store i32%ay,i32*%aH,align 4
%aI=getelementptr inbounds i8,i8*%az,i64 16
%aJ=bitcast i8*%aI to i32*
store i32 1,i32*%aJ,align 4
%aK=call i8*@sml_alloc(i32 inreg 28)#0
%aL=getelementptr inbounds i8,i8*%aK,i64 -4
%aM=bitcast i8*%aL to i32*
store i32 1342177304,i32*%aM,align 4
%aN=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%aO=bitcast i8*%aK to i8**
store i8*%aN,i8**%aO,align 8
%aP=getelementptr inbounds i8,i8*%aK,i64 8
%aQ=bitcast i8*%aP to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatCaseListE_308 to void(...)*),void(...)**%aQ,align 8
%aR=getelementptr inbounds i8,i8*%aK,i64 16
%aS=bitcast i8*%aR to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatCaseListE_308 to void(...)*),void(...)**%aS,align 8
%aT=getelementptr inbounds i8,i8*%aK,i64 24
%aU=bitcast i8*%aT to i32*
store i32 -2147483647,i32*%aU,align 4
%aV=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%aW=call fastcc i8*%an(i8*inreg%aV,i8*inreg%aK)
%aX=getelementptr inbounds i8,i8*%aW,i64 16
%aY=bitcast i8*%aX to i8*(i8*,i8*)**
%aZ=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aY,align 8
%a0=bitcast i8*%aW to i8**
%a1=load i8*,i8**%a0,align 8
%a2=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%a3=call fastcc i8*%aZ(i8*inreg%a1,i8*inreg%a2)
%a4=getelementptr inbounds i8,i8*%a3,i64 16
%a5=bitcast i8*%a4 to i8*(i8*,i8*)**
%a6=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a5,align 8
%a7=bitcast i8*%a3 to i8**
%a8=load i8*,i8**%a7,align 8
%a9=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ba=call fastcc i8*%a6(i8*inreg%a8,i8*inreg%a9)
store i8*%ba,i8**%c,align 8
%bb=load i8**,i8***%t,align 8
store i8*null,i8**%e,align 8
%bc=load i8*,i8**%bb,align 8
%bd=getelementptr inbounds i8,i8*%bc,i64 8
%be=bitcast i8*%bd to i8**
%bf=load i8*,i8**%be,align 8
store i8*%bf,i8**%d,align 8
%bg=call i8*@sml_alloc(i32 inreg 20)#0
%bh=getelementptr inbounds i8,i8*%bg,i64 -4
%bi=bitcast i8*%bh to i32*
store i32 1342177296,i32*%bi,align 4
store i8*%bg,i8**%e,align 8
%bj=getelementptr inbounds i8,i8*%bg,i64 4
%bk=bitcast i8*%bj to i32*
store i32 0,i32*%bk,align 1
%bl=bitcast i8*%bg to i32*
store i32 4,i32*%bl,align 4
%bm=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bn=getelementptr inbounds i8,i8*%bg,i64 8
%bo=bitcast i8*%bn to i8**
store i8*%bm,i8**%bo,align 8
%bp=getelementptr inbounds i8,i8*%bg,i64 16
%bq=bitcast i8*%bp to i32*
store i32 2,i32*%bq,align 4
%br=call i8*@sml_alloc(i32 inreg 20)#0
%bs=getelementptr inbounds i8,i8*%br,i64 -4
%bt=bitcast i8*%bs to i32*
store i32 1342177296,i32*%bt,align 4
%bu=load i8*,i8**%e,align 8
%bv=bitcast i8*%br to i8**
store i8*%bu,i8**%bv,align 8
%bw=load i8*,i8**%c,align 8
%bx=getelementptr inbounds i8,i8*%br,i64 8
%by=bitcast i8*%bx to i8**
store i8*%bw,i8**%by,align 8
%bz=getelementptr inbounds i8,i8*%br,i64 16
%bA=bitcast i8*%bz to i32*
store i32 3,i32*%bA,align 4
ret i8*%br
}
define internal fastcc i8*@_SMLLN10TermFormat14formatCaseListE_310(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatCaseListE_309 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatCaseListE_309 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat14formatCaseListE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatCaseListE_310 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatCaseListE_310 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLN10TermFormat20formatEnclosedOptionE_313(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
o:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%m,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%e,align 8
%l=load i8*,i8**%c,align 8
br label%m
m:
%n=phi i8*[%k,%j],[%a,%o]
%p=phi i8*[%l,%j],[%b,%o]
%q=bitcast i8*%n to i8***
%r=getelementptr inbounds i8,i8*%n,i64 12
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=add i32%t,-1
%v=sub i32 0,%t
%w=and i32%u,%v
%x=bitcast i8*%n to i8**
%y=load i8*,i8**%x,align 8
%z=getelementptr inbounds i8,i8*%y,i64 16
%A=bitcast i8*%z to i8**
%B=load i8*,i8**%A,align 8
store i8*%B,i8**%d,align 8
%C=icmp eq i8*%p,null
br i1%C,label%D,label%ad
D:
store i8*null,i8**%e,align 8
%E=load i8*,i8**%x,align 8
%F=getelementptr inbounds i8,i8*%E,i64 8
%G=bitcast i8*%F to i8**
%H=load i8*,i8**%G,align 8
store i8*%H,i8**%c,align 8
%I=call i8*@sml_alloc(i32 inreg 20)#0
%J=getelementptr inbounds i8,i8*%I,i64 -4
%K=bitcast i8*%J to i32*
store i32 1342177296,i32*%K,align 4
store i8*%I,i8**%e,align 8
%L=getelementptr inbounds i8,i8*%I,i64 4
%M=bitcast i8*%L to i32*
store i32 0,i32*%M,align 1
%N=bitcast i8*%I to i32*
store i32 4,i32*%N,align 4
%O=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%P=getelementptr inbounds i8,i8*%I,i64 8
%Q=bitcast i8*%P to i8**
store i8*%O,i8**%Q,align 8
%R=getelementptr inbounds i8,i8*%I,i64 16
%S=bitcast i8*%R to i32*
store i32 2,i32*%S,align 4
%T=call i8*@sml_alloc(i32 inreg 20)#0
%U=getelementptr inbounds i8,i8*%T,i64 -4
%V=bitcast i8*%U to i32*
store i32 1342177296,i32*%V,align 4
%W=load i8*,i8**%e,align 8
%X=bitcast i8*%T to i8**
store i8*%W,i8**%X,align 8
%Y=load i8*,i8**%d,align 8
%Z=getelementptr inbounds i8,i8*%T,i64 8
%aa=bitcast i8*%Z to i8**
store i8*%Y,i8**%aa,align 8
%ab=getelementptr inbounds i8,i8*%T,i64 16
%ac=bitcast i8*%ab to i32*
store i32 3,i32*%ac,align 4
ret i8*%T
ad:
%ae=getelementptr inbounds i8,i8*%n,i64 8
%af=bitcast i8*%ae to i32*
%ag=load i32,i32*%af,align 4
%ah=icmp eq i32%ag,0
br i1%ah,label%an,label%ai
ai:
store i8*null,i8**%c,align 8
%aj=sext i32%w to i64
%ak=getelementptr inbounds i8,i8*%p,i64%aj
%al=bitcast i8*%ak to i8**
%am=load i8*,i8**%al,align 8
br label%aw
an:
%ao=call i8*@sml_alloc(i32 inreg%t)#0
%ap=getelementptr inbounds i8,i8*%ao,i64 -4
%aq=bitcast i8*%ap to i32*
store i32%t,i32*%aq,align 4
%ar=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%as=sext i32%w to i64
%at=getelementptr inbounds i8,i8*%ar,i64%as
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ao,i8*%at,i32%t,i1 false)
%au=bitcast i8**%e to i8****
%av=load i8***,i8****%au,align 8
br label%aw
aw:
%ax=phi i8***[%q,%ai],[%av,%an]
%ay=phi i8*[%am,%ai],[%ao,%an]
%az=load i8**,i8***%ax,align 8
%aA=load i8*,i8**%az,align 8
%aB=getelementptr inbounds i8,i8*%aA,i64 16
%aC=bitcast i8*%aB to i8*(i8*,i8*)**
%aD=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aC,align 8
%aE=bitcast i8*%aA to i8**
%aF=load i8*,i8**%aE,align 8
%aG=call fastcc i8*%aD(i8*inreg%aF,i8*inreg%ay)
store i8*%aG,i8**%c,align 8
%aH=call i8*@sml_alloc(i32 inreg 20)#0
%aI=getelementptr inbounds i8,i8*%aH,i64 -4
%aJ=bitcast i8*%aI to i32*
store i32 1342177296,i32*%aJ,align 4
store i8*%aH,i8**%f,align 8
%aK=getelementptr inbounds i8,i8*%aH,i64 4
%aL=bitcast i8*%aK to i32*
store i32 0,i32*%aL,align 1
%aM=bitcast i8*%aH to i32*
store i32 4,i32*%aM,align 4
%aN=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aO=getelementptr inbounds i8,i8*%aH,i64 8
%aP=bitcast i8*%aO to i8**
store i8*%aN,i8**%aP,align 8
%aQ=getelementptr inbounds i8,i8*%aH,i64 16
%aR=bitcast i8*%aQ to i32*
store i32 2,i32*%aR,align 4
%aS=call i8*@sml_alloc(i32 inreg 20)#0
%aT=getelementptr inbounds i8,i8*%aS,i64 -4
%aU=bitcast i8*%aT to i32*
store i32 1342177296,i32*%aU,align 4
store i8*%aS,i8**%g,align 8
%aV=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%aW=bitcast i8*%aS to i8**
store i8*%aV,i8**%aW,align 8
%aX=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aY=getelementptr inbounds i8,i8*%aS,i64 8
%aZ=bitcast i8*%aY to i8**
store i8*%aX,i8**%aZ,align 8
%a0=getelementptr inbounds i8,i8*%aS,i64 16
%a1=bitcast i8*%a0 to i32*
store i32 3,i32*%a1,align 4
%a2=bitcast i8**%e to i8***
%a3=load i8**,i8***%a2,align 8
store i8*null,i8**%e,align 8
%a4=load i8*,i8**%a3,align 8
%a5=getelementptr inbounds i8,i8*%a4,i64 8
%a6=bitcast i8*%a5 to i8**
%a7=load i8*,i8**%a6,align 8
store i8*%a7,i8**%c,align 8
%a8=call i8*@sml_alloc(i32 inreg 20)#0
%a9=getelementptr inbounds i8,i8*%a8,i64 -4
%ba=bitcast i8*%a9 to i32*
store i32 1342177296,i32*%ba,align 4
store i8*%a8,i8**%d,align 8
%bb=getelementptr inbounds i8,i8*%a8,i64 4
%bc=bitcast i8*%bb to i32*
store i32 0,i32*%bc,align 1
%bd=bitcast i8*%a8 to i32*
store i32 4,i32*%bd,align 4
%be=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bf=getelementptr inbounds i8,i8*%a8,i64 8
%bg=bitcast i8*%bf to i8**
store i8*%be,i8**%bg,align 8
%bh=getelementptr inbounds i8,i8*%a8,i64 16
%bi=bitcast i8*%bh to i32*
store i32 2,i32*%bi,align 4
%bj=call i8*@sml_alloc(i32 inreg 20)#0
%bk=getelementptr inbounds i8,i8*%bj,i64 -4
%bl=bitcast i8*%bk to i32*
store i32 1342177296,i32*%bl,align 4
%bm=load i8*,i8**%d,align 8
%bn=bitcast i8*%bj to i8**
store i8*%bm,i8**%bn,align 8
%bo=load i8*,i8**%g,align 8
%bp=getelementptr inbounds i8,i8*%bj,i64 8
%bq=bitcast i8*%bp to i8**
store i8*%bo,i8**%bq,align 8
%br=getelementptr inbounds i8,i8*%bj,i64 16
%bs=bitcast i8*%br to i32*
store i32 3,i32*%bs,align 4
ret i8*%bj
}
define internal fastcc i8*@_SMLLN10TermFormat20formatEnclosedOptionE_314(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat20formatEnclosedOptionE_313 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat20formatEnclosedOptionE_313 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat20formatEnclosedOptionE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat20formatEnclosedOptionE_314 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat20formatEnclosedOptionE_314 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLN10TermFormat20formatOptionalOptionE_317(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
o:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%m,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%e,align 8
%l=load i8*,i8**%c,align 8
br label%m
m:
%n=phi i8*[%k,%j],[%a,%o]
%p=phi i8*[%l,%j],[%b,%o]
%q=bitcast i8*%n to i8***
%r=getelementptr inbounds i8,i8*%n,i64 12
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=add i32%t,-1
%v=sub i32 0,%t
%w=and i32%u,%v
%x=bitcast i8*%n to i8**
%y=load i8*,i8**%x,align 8
%z=getelementptr inbounds i8,i8*%y,i64 16
%A=bitcast i8*%z to i8**
%B=load i8*,i8**%A,align 8
store i8*%B,i8**%d,align 8
%C=icmp eq i8*%p,null
br i1%C,label%D,label%E
D:
ret i8*null
E:
%F=getelementptr inbounds i8,i8*%n,i64 8
%G=bitcast i8*%F to i32*
%H=load i32,i32*%G,align 4
%I=icmp eq i32%H,0
br i1%I,label%O,label%J
J:
store i8*null,i8**%c,align 8
%K=sext i32%w to i64
%L=getelementptr inbounds i8,i8*%p,i64%K
%M=bitcast i8*%L to i8**
%N=load i8*,i8**%M,align 8
br label%X
O:
%P=call i8*@sml_alloc(i32 inreg%t)#0
%Q=getelementptr inbounds i8,i8*%P,i64 -4
%R=bitcast i8*%Q to i32*
store i32%t,i32*%R,align 4
%S=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%T=sext i32%w to i64
%U=getelementptr inbounds i8,i8*%S,i64%T
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%P,i8*%U,i32%t,i1 false)
%V=bitcast i8**%e to i8****
%W=load i8***,i8****%V,align 8
br label%X
X:
%Y=phi i8***[%q,%J],[%W,%O]
%Z=phi i8*[%N,%J],[%P,%O]
%aa=load i8**,i8***%Y,align 8
%ab=load i8*,i8**%aa,align 8
%ac=getelementptr inbounds i8,i8*%ab,i64 16
%ad=bitcast i8*%ac to i8*(i8*,i8*)**
%ae=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ad,align 8
%af=bitcast i8*%ab to i8**
%ag=load i8*,i8**%af,align 8
%ah=call fastcc i8*%ae(i8*inreg%ag,i8*inreg%Z)
store i8*%ah,i8**%c,align 8
%ai=call i8*@sml_alloc(i32 inreg 20)#0
%aj=getelementptr inbounds i8,i8*%ai,i64 -4
%ak=bitcast i8*%aj to i32*
store i32 1342177296,i32*%ak,align 4
store i8*%ai,i8**%f,align 8
%al=getelementptr inbounds i8,i8*%ai,i64 4
%am=bitcast i8*%al to i32*
store i32 0,i32*%am,align 1
%an=bitcast i8*%ai to i32*
store i32 4,i32*%an,align 4
%ao=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ap=getelementptr inbounds i8,i8*%ai,i64 8
%aq=bitcast i8*%ap to i8**
store i8*%ao,i8**%aq,align 8
%ar=getelementptr inbounds i8,i8*%ai,i64 16
%as=bitcast i8*%ar to i32*
store i32 2,i32*%as,align 4
%at=call i8*@sml_alloc(i32 inreg 20)#0
%au=getelementptr inbounds i8,i8*%at,i64 -4
%av=bitcast i8*%au to i32*
store i32 1342177296,i32*%av,align 4
store i8*%at,i8**%g,align 8
%aw=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%ax=bitcast i8*%at to i8**
store i8*%aw,i8**%ax,align 8
%ay=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%az=getelementptr inbounds i8,i8*%at,i64 8
%aA=bitcast i8*%az to i8**
store i8*%ay,i8**%aA,align 8
%aB=getelementptr inbounds i8,i8*%at,i64 16
%aC=bitcast i8*%aB to i32*
store i32 3,i32*%aC,align 4
%aD=bitcast i8**%e to i8***
%aE=load i8**,i8***%aD,align 8
store i8*null,i8**%e,align 8
%aF=load i8*,i8**%aE,align 8
%aG=getelementptr inbounds i8,i8*%aF,i64 8
%aH=bitcast i8*%aG to i8**
%aI=load i8*,i8**%aH,align 8
store i8*%aI,i8**%c,align 8
%aJ=call i8*@sml_alloc(i32 inreg 20)#0
%aK=getelementptr inbounds i8,i8*%aJ,i64 -4
%aL=bitcast i8*%aK to i32*
store i32 1342177296,i32*%aL,align 4
store i8*%aJ,i8**%d,align 8
%aM=getelementptr inbounds i8,i8*%aJ,i64 4
%aN=bitcast i8*%aM to i32*
store i32 0,i32*%aN,align 1
%aO=bitcast i8*%aJ to i32*
store i32 4,i32*%aO,align 4
%aP=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aQ=getelementptr inbounds i8,i8*%aJ,i64 8
%aR=bitcast i8*%aQ to i8**
store i8*%aP,i8**%aR,align 8
%aS=getelementptr inbounds i8,i8*%aJ,i64 16
%aT=bitcast i8*%aS to i32*
store i32 2,i32*%aT,align 4
%aU=call i8*@sml_alloc(i32 inreg 20)#0
%aV=getelementptr inbounds i8,i8*%aU,i64 -4
%aW=bitcast i8*%aV to i32*
store i32 1342177296,i32*%aW,align 4
%aX=load i8*,i8**%d,align 8
%aY=bitcast i8*%aU to i8**
store i8*%aX,i8**%aY,align 8
%aZ=load i8*,i8**%g,align 8
%a0=getelementptr inbounds i8,i8*%aU,i64 8
%a1=bitcast i8*%a0 to i8**
store i8*%aZ,i8**%a1,align 8
%a2=getelementptr inbounds i8,i8*%aU,i64 16
%a3=bitcast i8*%a2 to i32*
store i32 3,i32*%a3,align 4
ret i8*%aU
}
define internal fastcc i8*@_SMLLN10TermFormat20formatOptionalOptionE_318(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat20formatOptionalOptionE_317 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat20formatOptionalOptionE_317 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat20formatOptionalOptionE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat20formatOptionalOptionE_318 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat20formatOptionalOptionE_318 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLN10TermFormat12formatOptionE_327(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
p:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%n,label%k
k:
call void@sml_check(i32 inreg%i)
%l=load i8*,i8**%c,align 8
%m=load i8*,i8**%e,align 8
br label%n
n:
%o=phi i8*[%m,%k],[%a,%p]
%q=phi i8*[%l,%k],[%b,%p]
%r=getelementptr inbounds i8,i8*%o,i64 12
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=add i32%t,-1
%v=sub i32 0,%t
%w=and i32%u,%v
%x=icmp eq i8*%q,null
br i1%x,label%y,label%an
y:
store i8*null,i8**%c,align 8
store i8*null,i8**%e,align 8
%z=call i8*@sml_alloc(i32 inreg 20)#0
%A=getelementptr inbounds i8,i8*%z,i64 -4
%B=bitcast i8*%A to i32*
store i32 1342177296,i32*%B,align 4
store i8*%z,i8**%c,align 8
%C=getelementptr inbounds i8,i8*%z,i64 4
%D=bitcast i8*%C to i32*
store i32 0,i32*%D,align 1
%E=bitcast i8*%z to i32*
store i32 4,i32*%E,align 4
%F=getelementptr inbounds i8,i8*%z,i64 8
%G=bitcast i8*%F to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[5x i8]}>,<{[4x i8],i32,[5x i8]}>*@D,i64 0,i32 2,i64 0),i8**%G,align 8
%H=getelementptr inbounds i8,i8*%z,i64 16
%I=bitcast i8*%H to i32*
store i32 2,i32*%I,align 4
%J=call i8*@sml_alloc(i32 inreg 20)#0
%K=getelementptr inbounds i8,i8*%J,i64 -4
%L=bitcast i8*%K to i32*
store i32 1342177296,i32*%L,align 4
store i8*%J,i8**%d,align 8
%M=getelementptr inbounds i8,i8*%J,i64 4
%N=bitcast i8*%M to i32*
store i32 0,i32*%N,align 1
%O=bitcast i8*%J to i32*
store i32 6,i32*%O,align 4
%P=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%Q=getelementptr inbounds i8,i8*%J,i64 8
%R=bitcast i8*%Q to i8**
store i8*%P,i8**%R,align 8
%S=getelementptr inbounds i8,i8*%J,i64 16
%T=bitcast i8*%S to i32*
store i32 2,i32*%T,align 4
%U=call i8*@sml_alloc(i32 inreg 20)#0
%V=getelementptr inbounds i8,i8*%U,i64 -4
%W=bitcast i8*%V to i32*
store i32 1342177296,i32*%W,align 4
%X=load i8*,i8**%d,align 8
%Y=bitcast i8*%U to i8**
store i8*%X,i8**%Y,align 8
%Z=getelementptr inbounds i8,i8*%U,i64 8
%aa=bitcast i8*%Z to i8**
store i8*null,i8**%aa,align 8
%ab=getelementptr inbounds i8,i8*%U,i64 16
%ac=bitcast i8*%ab to i32*
store i32 3,i32*%ac,align 4
store i8*%X,i8**%c,align 8
store i8*null,i8**%d,align 8
%ad=call i8*@sml_alloc(i32 inreg 20)#0
%ae=getelementptr inbounds i8,i8*%ad,i64 -4
%af=bitcast i8*%ae to i32*
store i32 1342177296,i32*%af,align 4
%ag=load i8*,i8**%c,align 8
%ah=bitcast i8*%ad to i8**
store i8*%ag,i8**%ah,align 8
%ai=load i8*,i8**%d,align 8
%aj=getelementptr inbounds i8,i8*%ad,i64 8
%ak=bitcast i8*%aj to i8**
store i8*%ai,i8**%ak,align 8
%al=getelementptr inbounds i8,i8*%ad,i64 16
%am=bitcast i8*%al to i32*
store i32 3,i32*%am,align 4
ret i8*%ad
an:
%ao=getelementptr inbounds i8,i8*%o,i64 8
%ap=bitcast i8*%ao to i32*
%aq=load i32,i32*%ap,align 4
%ar=icmp eq i32%aq,0
br i1%ar,label%ax,label%as
as:
store i8*null,i8**%c,align 8
%at=sext i32%w to i64
%au=getelementptr inbounds i8,i8*%q,i64%at
%av=bitcast i8*%au to i8**
%aw=load i8*,i8**%av,align 8
br label%aE
ax:
%ay=call i8*@sml_alloc(i32 inreg%t)#0
%az=getelementptr inbounds i8,i8*%ay,i64 -4
%aA=bitcast i8*%az to i32*
store i32%t,i32*%aA,align 4
%aB=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aC=sext i32%w to i64
%aD=getelementptr inbounds i8,i8*%aB,i64%aC
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ay,i8*%aD,i32%t,i1 false)
br label%aE
aE:
%aF=phi i8*[%ay,%ax],[%aw,%as]
store i8*%aF,i8**%c,align 8
%aG=call i8*@sml_alloc(i32 inreg 20)#0
%aH=getelementptr inbounds i8,i8*%aG,i64 -4
%aI=bitcast i8*%aH to i32*
store i32 1342177296,i32*%aI,align 4
store i8*%aG,i8**%d,align 8
%aJ=getelementptr inbounds i8,i8*%aG,i64 4
%aK=bitcast i8*%aJ to i32*
store i32 0,i32*%aK,align 1
%aL=bitcast i8*%aG to i32*
store i32 5,i32*%aL,align 4
%aM=getelementptr inbounds i8,i8*%aG,i64 8
%aN=bitcast i8*%aM to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[6x i8]}>,<{[4x i8],i32,[6x i8]}>*@C,i64 0,i32 2,i64 0),i8**%aN,align 8
%aO=getelementptr inbounds i8,i8*%aG,i64 16
%aP=bitcast i8*%aO to i32*
store i32 2,i32*%aP,align 4
%aQ=call i8*@sml_alloc(i32 inreg 20)#0
%aR=getelementptr inbounds i8,i8*%aQ,i64 -4
%aS=bitcast i8*%aR to i32*
store i32 1342177296,i32*%aS,align 4
store i8*%aQ,i8**%f,align 8
%aT=getelementptr inbounds i8,i8*%aQ,i64 4
%aU=bitcast i8*%aT to i32*
store i32 0,i32*%aU,align 1
%aV=bitcast i8*%aQ to i32*
store i32 6,i32*%aV,align 4
%aW=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aX=getelementptr inbounds i8,i8*%aQ,i64 8
%aY=bitcast i8*%aX to i8**
store i8*%aW,i8**%aY,align 8
%aZ=getelementptr inbounds i8,i8*%aQ,i64 16
%a0=bitcast i8*%aZ to i32*
store i32 2,i32*%a0,align 4
%a1=bitcast i8**%e to i8****
%a2=load i8***,i8****%a1,align 8
%a3=load i8**,i8***%a2,align 8
%a4=load i8*,i8**%a3,align 8
%a5=getelementptr inbounds i8,i8*%a4,i64 16
%a6=bitcast i8*%a5 to i8*(i8*,i8*)**
%a7=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a6,align 8
%a8=bitcast i8*%a4 to i8**
%a9=load i8*,i8**%a8,align 8
%ba=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bb=call fastcc i8*%a7(i8*inreg%a9,i8*inreg%ba)
store i8*%bb,i8**%c,align 8
%bc=call i8*@sml_alloc(i32 inreg 20)#0
%bd=getelementptr inbounds i8,i8*%bc,i64 -4
%be=bitcast i8*%bd to i32*
store i32 1342177296,i32*%be,align 4
store i8*%bc,i8**%g,align 8
%bf=getelementptr inbounds i8,i8*%bc,i64 4
%bg=bitcast i8*%bf to i32*
store i32 0,i32*%bg,align 1
%bh=bitcast i8*%bc to i32*
store i32 4,i32*%bh,align 4
%bi=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bj=getelementptr inbounds i8,i8*%bc,i64 8
%bk=bitcast i8*%bj to i8**
store i8*%bi,i8**%bk,align 8
%bl=getelementptr inbounds i8,i8*%bc,i64 16
%bm=bitcast i8*%bl to i32*
store i32 2,i32*%bm,align 4
%bn=call i8*@sml_alloc(i32 inreg 20)#0
%bo=getelementptr inbounds i8,i8*%bn,i64 -4
%bp=bitcast i8*%bo to i32*
store i32 1342177296,i32*%bp,align 4
store i8*%bn,i8**%c,align 8
%bq=getelementptr inbounds i8,i8*%bn,i64 4
%br=bitcast i8*%bq to i32*
store i32 0,i32*%br,align 1
%bs=bitcast i8*%bn to i32*
store i32 1,i32*%bs,align 4
%bt=getelementptr inbounds i8,i8*%bn,i64 8
%bu=bitcast i8*%bt to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bp,i64 0,i32 2,i64 0),i8**%bu,align 8
%bv=getelementptr inbounds i8,i8*%bn,i64 16
%bw=bitcast i8*%bv to i32*
store i32 2,i32*%bw,align 4
%bx=call i8*@sml_alloc(i32 inreg 20)#0
%by=getelementptr inbounds i8,i8*%bx,i64 -4
%bz=bitcast i8*%by to i32*
store i32 1342177296,i32*%bz,align 4
store i8*%bx,i8**%d,align 8
%bA=getelementptr inbounds i8,i8*%bx,i64 4
%bB=bitcast i8*%bA to i32*
store i32 0,i32*%bB,align 1
%bC=bitcast i8*%bx to i32*
store i32 6,i32*%bC,align 4
%bD=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bE=getelementptr inbounds i8,i8*%bx,i64 8
%bF=bitcast i8*%bE to i8**
store i8*%bD,i8**%bF,align 8
%bG=getelementptr inbounds i8,i8*%bx,i64 16
%bH=bitcast i8*%bG to i32*
store i32 2,i32*%bH,align 4
%bI=call i8*@sml_alloc(i32 inreg 20)#0
%bJ=getelementptr inbounds i8,i8*%bI,i64 -4
%bK=bitcast i8*%bJ to i32*
store i32 1342177296,i32*%bK,align 4
%bL=load i8*,i8**%d,align 8
%bM=bitcast i8*%bI to i8**
store i8*%bL,i8**%bM,align 8
%bN=getelementptr inbounds i8,i8*%bI,i64 8
%bO=bitcast i8*%bN to i8**
store i8*null,i8**%bO,align 8
%bP=getelementptr inbounds i8,i8*%bI,i64 16
%bQ=bitcast i8*%bP to i32*
store i32 3,i32*%bQ,align 4
store i8*%bL,i8**%c,align 8
store i8*null,i8**%d,align 8
%bR=call i8*@sml_alloc(i32 inreg 20)#0
%bS=getelementptr inbounds i8,i8*%bR,i64 -4
%bT=bitcast i8*%bS to i32*
store i32 1342177296,i32*%bT,align 4
store i8*%bR,i8**%h,align 8
%bU=load i8*,i8**%c,align 8
%bV=bitcast i8*%bR to i8**
store i8*%bU,i8**%bV,align 8
%bW=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bX=getelementptr inbounds i8,i8*%bR,i64 8
%bY=bitcast i8*%bX to i8**
store i8*%bW,i8**%bY,align 8
%bZ=getelementptr inbounds i8,i8*%bR,i64 16
%b0=bitcast i8*%bZ to i32*
store i32 3,i32*%b0,align 4
%b1=bitcast i8**%e to i8***
%b2=load i8**,i8***%b1,align 8
%b3=load i8*,i8**%b2,align 8
%b4=getelementptr inbounds i8,i8*%b3,i64 16
%b5=bitcast i8*%b4 to i8**
%b6=load i8*,i8**%b5,align 8
store i8*%b6,i8**%c,align 8
%b7=call i8*@sml_alloc(i32 inreg 20)#0
%b8=getelementptr inbounds i8,i8*%b7,i64 -4
%b9=bitcast i8*%b8 to i32*
store i32 1342177296,i32*%b9,align 4
store i8*%b7,i8**%d,align 8
%ca=getelementptr inbounds i8,i8*%b7,i64 4
%cb=bitcast i8*%ca to i32*
store i32 0,i32*%cb,align 1
%cc=bitcast i8*%b7 to i32*
store i32 4,i32*%cc,align 4
%cd=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ce=getelementptr inbounds i8,i8*%b7,i64 8
%cf=bitcast i8*%ce to i8**
store i8*%cd,i8**%cf,align 8
%cg=getelementptr inbounds i8,i8*%b7,i64 16
%ch=bitcast i8*%cg to i32*
store i32 2,i32*%ch,align 4
%ci=call i8*@sml_alloc(i32 inreg 20)#0
%cj=getelementptr inbounds i8,i8*%ci,i64 -4
%ck=bitcast i8*%cj to i32*
store i32 1342177296,i32*%ck,align 4
store i8*%ci,i8**%c,align 8
%cl=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%cm=bitcast i8*%ci to i8**
store i8*%cl,i8**%cm,align 8
%cn=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%co=getelementptr inbounds i8,i8*%ci,i64 8
%cp=bitcast i8*%co to i8**
store i8*%cn,i8**%cp,align 8
%cq=getelementptr inbounds i8,i8*%ci,i64 16
%cr=bitcast i8*%cq to i32*
store i32 3,i32*%cr,align 4
%cs=call i8*@sml_alloc(i32 inreg 20)#0
%ct=getelementptr inbounds i8,i8*%cs,i64 -4
%cu=bitcast i8*%ct to i32*
store i32 1342177296,i32*%cu,align 4
store i8*%cs,i8**%d,align 8
%cv=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%cw=bitcast i8*%cs to i8**
store i8*%cv,i8**%cw,align 8
%cx=load i8*,i8**%c,align 8
%cy=getelementptr inbounds i8,i8*%cs,i64 8
%cz=bitcast i8*%cy to i8**
store i8*%cx,i8**%cz,align 8
%cA=getelementptr inbounds i8,i8*%cs,i64 16
%cB=bitcast i8*%cA to i32*
store i32 3,i32*%cB,align 4
%cC=load i8**,i8***%b1,align 8
store i8*null,i8**%e,align 8
%cD=load i8*,i8**%cC,align 8
%cE=getelementptr inbounds i8,i8*%cD,i64 8
%cF=bitcast i8*%cE to i8**
%cG=load i8*,i8**%cF,align 8
store i8*%cG,i8**%c,align 8
%cH=call i8*@sml_alloc(i32 inreg 20)#0
%cI=getelementptr inbounds i8,i8*%cH,i64 -4
%cJ=bitcast i8*%cI to i32*
store i32 1342177296,i32*%cJ,align 4
store i8*%cH,i8**%e,align 8
%cK=getelementptr inbounds i8,i8*%cH,i64 4
%cL=bitcast i8*%cK to i32*
store i32 0,i32*%cL,align 1
%cM=bitcast i8*%cH to i32*
store i32 4,i32*%cM,align 4
%cN=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cO=getelementptr inbounds i8,i8*%cH,i64 8
%cP=bitcast i8*%cO to i8**
store i8*%cN,i8**%cP,align 8
%cQ=getelementptr inbounds i8,i8*%cH,i64 16
%cR=bitcast i8*%cQ to i32*
store i32 2,i32*%cR,align 4
%cS=call i8*@sml_alloc(i32 inreg 20)#0
%cT=getelementptr inbounds i8,i8*%cS,i64 -4
%cU=bitcast i8*%cT to i32*
store i32 1342177296,i32*%cU,align 4
store i8*%cS,i8**%c,align 8
%cV=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%cW=bitcast i8*%cS to i8**
store i8*%cV,i8**%cW,align 8
%cX=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%cY=getelementptr inbounds i8,i8*%cS,i64 8
%cZ=bitcast i8*%cY to i8**
store i8*%cX,i8**%cZ,align 8
%c0=getelementptr inbounds i8,i8*%cS,i64 16
%c1=bitcast i8*%c0 to i32*
store i32 3,i32*%c1,align 4
%c2=call i8*@sml_alloc(i32 inreg 20)#0
%c3=getelementptr inbounds i8,i8*%c2,i64 -4
%c4=bitcast i8*%c3 to i32*
store i32 1342177296,i32*%c4,align 4
%c5=load i8*,i8**%f,align 8
%c6=bitcast i8*%c2 to i8**
store i8*%c5,i8**%c6,align 8
%c7=load i8*,i8**%c,align 8
%c8=getelementptr inbounds i8,i8*%c2,i64 8
%c9=bitcast i8*%c8 to i8**
store i8*%c7,i8**%c9,align 8
%da=getelementptr inbounds i8,i8*%c2,i64 16
%db=bitcast i8*%da to i32*
store i32 3,i32*%db,align 4
ret i8*%c2
}
define internal fastcc i8*@_SMLLN10TermFormat12formatOptionE_328(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12formatOptionE_327 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12formatOptionE_327 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat12formatOptionE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12formatOptionE_328 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12formatOptionE_328 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLN10TermFormat12keyValuePairE_331(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLN10TermFormat12keyValuePairE_333(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLN10TermFormat12keyValuePairE_336(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=load i8*,i8**%d,align 8
%m=bitcast i8**%c to i8***
%n=load i8**,i8***%m,align 8
br label%o
o:
%p=phi i8**[%n,%k],[%j,%i]
%q=phi i8*[%l,%k],[%b,%i]
store i8*null,i8**%d,align 8
%r=load i8*,i8**%p,align 8
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
store i8*null,i8**%c,align 8
%v=bitcast i8**%p to i8***
%w=load i8**,i8***%v,align 8
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%u(i8*inreg%x,i8*inreg%q)
%z=getelementptr inbounds i8,i8*%y,i64 16
%A=bitcast i8*%z to i8*(i8*,i8*,i8*,i8*,i8*)**
%B=load i8*(i8*,i8*,i8*,i8*,i8*)*,i8*(i8*,i8*,i8*,i8*,i8*)**%A,align 8
%C=bitcast i8*%y to i8**
%D=load i8*,i8**%C,align 8
store i8*%D,i8**%c,align 8
%E=call i8*@sml_alloc(i32 inreg 4)#0
%F=bitcast i8*%E to i32*
%G=getelementptr inbounds i8,i8*%E,i64 -4
%H=bitcast i8*%G to i32*
store i32 4,i32*%H,align 4
store i8*%E,i8**%d,align 8
store i32 1,i32*%F,align 4
%I=call i8*@sml_alloc(i32 inreg 4)#0
%J=bitcast i8*%I to i32*
%K=getelementptr inbounds i8,i8*%I,i64 -4
%L=bitcast i8*%K to i32*
store i32 4,i32*%L,align 4
store i8*%I,i8**%e,align 8
store i32 8,i32*%J,align 4
%M=call i8*@sml_alloc(i32 inreg 4)#0
%N=bitcast i8*%M to i32*
%O=getelementptr inbounds i8,i8*%M,i64 -4
%P=bitcast i8*%O to i32*
store i32 4,i32*%P,align 4
store i8*%M,i8**%f,align 8
store i32 1,i32*%N,align 4
%Q=call i8*@sml_alloc(i32 inreg 4)#0
%R=bitcast i8*%Q to i32*
%S=getelementptr inbounds i8,i8*%Q,i64 -4
%T=bitcast i8*%S to i32*
store i32 4,i32*%T,align 4
store i32 8,i32*%R,align 4
%U=load i8*,i8**%c,align 8
%V=load i8*,i8**%d,align 8
%W=load i8*,i8**%e,align 8
%X=load i8*,i8**%f,align 8
%Y=call fastcc i8*%B(i8*inreg%U,i8*inreg%V,i8*inreg%W,i8*inreg%X,i8*inreg%Q)
ret i8*%Y
}
define internal fastcc i8*@_SMLLN10TermFormat12keyValuePairE_337(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%m
i:
call void@sml_check(i32 inreg%e)
%j=load i8*,i8**%d,align 8
%k=bitcast i8**%c to i8***
%l=load i8**,i8***%k,align 8
br label%m
m:
%n=phi i8**[%l,%i],[%h,%g]
%o=phi i8*[%j,%i],[%b,%g]
store i8*null,i8**%d,align 8
%p=load i8*,i8**%n,align 8
%q=getelementptr inbounds i8,i8*%p,i64 16
%r=bitcast i8*%q to i8*(i8*,i8*)**
%s=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%r,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8**%n to i8***
%u=load i8**,i8***%t,align 8
%v=load i8*,i8**%u,align 8
%w=call fastcc i8*%s(i8*inreg%v,i8*inreg%o)
%x=getelementptr inbounds i8,i8*%w,i64 16
%y=bitcast i8*%x to i8*(i8*,i8*,i8*)**
%z=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%y,align 8
%A=bitcast i8*%w to i8**
%B=load i8*,i8**%A,align 8
store i8*%B,i8**%c,align 8
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%d,align 8
store i32 1,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32 8,i32*%H,align 4
%K=load i8*,i8**%c,align 8
%L=load i8*,i8**%d,align 8
%M=tail call fastcc i8*%z(i8*inreg%K,i8*inreg%L,i8*inreg%G)
ret i8*%M
}
define internal fastcc i8*@_SMLLN10TermFormat12keyValuePairE_338(i8*inreg%a)#2 gc"smlsharp"{
j:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%h,label%f
f:
call void@sml_check(i32 inreg%d)
%g=load i8*,i8**%b,align 8
br label%h
h:
%i=phi i8*[%g,%f],[%a,%j]
store i8*null,i8**%b,align 8
%k=call fastcc i8*@_SMLLN10TermFormat10FormatComb1_DE_227(i8*inreg%i)#0
store i8*%k,i8**%b,align 8
%l=call i8*@sml_alloc(i32 inreg 12)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177288,i32*%n,align 4
store i8*%l,i8**%c,align 8
%o=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%c,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12keyValuePairE_337 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12keyValuePairE_337 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN10TermFormat12keyValuePairE_340(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%m
i:
call void@sml_check(i32 inreg%e)
%j=load i8*,i8**%d,align 8
%k=bitcast i8**%c to i8***
%l=load i8**,i8***%k,align 8
br label%m
m:
%n=phi i8**[%l,%i],[%h,%g]
%o=phi i8*[%j,%i],[%b,%g]
store i8*null,i8**%d,align 8
%p=load i8*,i8**%n,align 8
%q=getelementptr inbounds i8,i8*%p,i64 16
%r=bitcast i8*%q to i8*(i8*,i8*)**
%s=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%r,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8**%n to i8***
%u=load i8**,i8***%t,align 8
%v=load i8*,i8**%u,align 8
%w=call fastcc i8*%s(i8*inreg%v,i8*inreg%o)
%x=getelementptr inbounds i8,i8*%w,i64 16
%y=bitcast i8*%x to i8*(i8*,i8*,i8*)**
%z=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%y,align 8
%A=bitcast i8*%w to i8**
%B=load i8*,i8**%A,align 8
store i8*%B,i8**%c,align 8
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%d,align 8
store i32 1,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32 8,i32*%H,align 4
%K=load i8*,i8**%c,align 8
%L=load i8*,i8**%d,align 8
%M=tail call fastcc i8*%z(i8*inreg%K,i8*inreg%L,i8*inreg%G)
ret i8*%M
}
define internal fastcc i8*@_SMLLN10TermFormat12keyValuePairE_341(i8*inreg%a)#2 gc"smlsharp"{
j:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%h,label%f
f:
call void@sml_check(i32 inreg%d)
%g=load i8*,i8**%b,align 8
br label%h
h:
%i=phi i8*[%g,%f],[%a,%j]
store i8*null,i8**%b,align 8
%k=call fastcc i8*@_SMLLN10TermFormat10FormatComb1_DE_227(i8*inreg%i)#0
store i8*%k,i8**%b,align 8
%l=call i8*@sml_alloc(i32 inreg 12)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177288,i32*%n,align 4
store i8*%l,i8**%c,align 8
%o=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%c,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12keyValuePairE_340 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12keyValuePairE_340 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN10TermFormat12keyValuePairE_343(i8*inreg%a,i32 inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%n
k:
call void@sml_check(i32 inreg%g)
%l=bitcast i8**%c to i8***
%m=load i8**,i8***%l,align 8
br label%n
n:
%o=phi i8**[%m,%k],[%j,%i]
%p=load i8*,i8**%o,align 8
%q=getelementptr inbounds i8,i8*%p,i64 16
%r=bitcast i8*%q to i8*(i8*,i8*)**
%s=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%r,align 8
%t=bitcast i8*%p to i8**
%u=load i8*,i8**%t,align 8
store i8*%u,i8**%c,align 8
%v=call i8*@sml_alloc(i32 inreg 4)#0
%w=bitcast i8*%v to i32*
%x=getelementptr inbounds i8,i8*%v,i64 -4
%y=bitcast i8*%x to i32*
store i32 4,i32*%y,align 4
store i32%b,i32*%w,align 4
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%s(i8*inreg%z,i8*inreg%v)
%B=getelementptr inbounds i8,i8*%A,i64 16
%C=bitcast i8*%B to i8*(i8*,i8*,i8*,i8*,i8*)**
%D=load i8*(i8*,i8*,i8*,i8*,i8*)*,i8*(i8*,i8*,i8*,i8*,i8*)**%C,align 8
%E=bitcast i8*%A to i8**
%F=load i8*,i8**%E,align 8
store i8*%F,i8**%c,align 8
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i8*%G,i8**%d,align 8
store i32 1,i32*%H,align 4
%K=call i8*@sml_alloc(i32 inreg 4)#0
%L=bitcast i8*%K to i32*
%M=getelementptr inbounds i8,i8*%K,i64 -4
%N=bitcast i8*%M to i32*
store i32 4,i32*%N,align 4
store i8*%K,i8**%e,align 8
store i32 8,i32*%L,align 4
%O=call i8*@sml_alloc(i32 inreg 4)#0
%P=bitcast i8*%O to i32*
%Q=getelementptr inbounds i8,i8*%O,i64 -4
%R=bitcast i8*%Q to i32*
store i32 4,i32*%R,align 4
store i8*%O,i8**%f,align 8
store i32 1,i32*%P,align 4
%S=call i8*@sml_alloc(i32 inreg 4)#0
%T=bitcast i8*%S to i32*
%U=getelementptr inbounds i8,i8*%S,i64 -4
%V=bitcast i8*%U to i32*
store i32 4,i32*%V,align 4
store i32 8,i32*%T,align 4
%W=load i8*,i8**%c,align 8
%X=load i8*,i8**%d,align 8
%Y=load i8*,i8**%e,align 8
%Z=load i8*,i8**%f,align 8
%aa=call fastcc i8*%D(i8*inreg%W,i8*inreg%X,i8*inreg%Y,i8*inreg%Z,i8*inreg%S)
ret i8*%aa
}
define internal fastcc i8*@_SMLLN10TermFormat12keyValuePairE_344(i8*inreg%a)#2 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%g,label%f
f:
call void@sml_check(i32 inreg%d)
br label%g
g:
%h=call fastcc i8*@_SMLLN10TermFormat10FormatComb5nest__E_265(i32 inreg 1,i32 inreg 8)
%i=getelementptr inbounds i8,i8*%h,i64 16
%j=bitcast i8*%i to i8*(i8*,i8*)**
%k=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%j,align 8
%l=bitcast i8*%h to i8**
%m=load i8*,i8**%l,align 8
%n=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%o=call fastcc i8*%k(i8*inreg%m,i8*inreg%n)
store i8*%o,i8**%b,align 8
%p=call i8*@sml_alloc(i32 inreg 12)#0
%q=getelementptr inbounds i8,i8*%p,i64 -4
%r=bitcast i8*%q to i32*
store i32 1342177288,i32*%r,align 4
store i8*%p,i8**%c,align 8
%s=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%t=bitcast i8*%p to i8**
store i8*%s,i8**%t,align 8
%u=getelementptr inbounds i8,i8*%p,i64 8
%v=bitcast i8*%u to i32*
store i32 1,i32*%v,align 4
%w=call i8*@sml_alloc(i32 inreg 28)#0
%x=getelementptr inbounds i8,i8*%w,i64 -4
%y=bitcast i8*%x to i32*
store i32 1342177304,i32*%y,align 4
%z=load i8*,i8**%c,align 8
%A=bitcast i8*%w to i8**
store i8*%z,i8**%A,align 8
%B=getelementptr inbounds i8,i8*%w,i64 8
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i32)*@_SMLLN10TermFormat12keyValuePairE_343 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%w,i64 16
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12keyValuePairE_1040 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%w,i64 24
%G=bitcast i8*%F to i32*
store i32 -2147483647,i32*%G,align 4
ret i8*%w
}
define internal fastcc i8*@_SMLLN10TermFormat12keyValuePairE_346(i8*inreg%a)#2 gc"smlsharp"{
j:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%h,label%f
f:
call void@sml_check(i32 inreg%d)
%g=load i8*,i8**%b,align 8
br label%h
h:
%i=phi i8*[%g,%f],[%a,%j]
store i8*null,i8**%b,align 8
%k=call fastcc i8*@_SMLLN10TermFormat10FormatComb5spaceE_204(i8*inreg%i)#0
%l=getelementptr inbounds i8,i8*%k,i64 16
%m=bitcast i8*%l to i8*(i8*,i8*,i8*)**
%n=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%m,align 8
%o=bitcast i8*%k to i8**
%p=load i8*,i8**%o,align 8
store i8*%p,i8**%b,align 8
%q=call i8*@sml_alloc(i32 inreg 4)#0
%r=bitcast i8*%q to i32*
%s=getelementptr inbounds i8,i8*%q,i64 -4
%t=bitcast i8*%s to i32*
store i32 4,i32*%t,align 4
store i8*%q,i8**%c,align 8
store i32 1,i32*%r,align 4
%u=call i8*@sml_alloc(i32 inreg 4)#0
%v=bitcast i8*%u to i32*
%w=getelementptr inbounds i8,i8*%u,i64 -4
%x=bitcast i8*%w to i32*
store i32 4,i32*%x,align 4
store i32 8,i32*%v,align 4
%y=load i8*,i8**%b,align 8
%z=load i8*,i8**%c,align 8
%A=tail call fastcc i8*%n(i8*inreg%y,i8*inreg%z,i8*inreg%u)
ret i8*%A
}
define internal fastcc i8*@_SMLLN10TermFormat12keyValuePairE_348(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%m
i:
call void@sml_check(i32 inreg%e)
%j=load i8*,i8**%d,align 8
%k=bitcast i8**%c to i8***
%l=load i8**,i8***%k,align 8
br label%m
m:
%n=phi i8**[%l,%i],[%h,%g]
%o=phi i8*[%j,%i],[%b,%g]
store i8*null,i8**%d,align 8
%p=load i8*,i8**%n,align 8
%q=getelementptr inbounds i8,i8*%p,i64 16
%r=bitcast i8*%q to i8*(i8*,i8*)**
%s=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%r,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8**%n to i8***
%u=load i8**,i8***%t,align 8
%v=load i8*,i8**%u,align 8
%w=call fastcc i8*%s(i8*inreg%v,i8*inreg%o)
%x=getelementptr inbounds i8,i8*%w,i64 16
%y=bitcast i8*%x to i8*(i8*,i8*,i8*)**
%z=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%y,align 8
%A=bitcast i8*%w to i8**
%B=load i8*,i8**%A,align 8
store i8*%B,i8**%c,align 8
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%d,align 8
store i32 1,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32 8,i32*%H,align 4
%K=load i8*,i8**%c,align 8
%L=load i8*,i8**%d,align 8
%M=tail call fastcc i8*%z(i8*inreg%K,i8*inreg%L,i8*inreg%G)
ret i8*%M
}
define internal fastcc i8*@_SMLLN10TermFormat12keyValuePairE_349(i8*inreg%a)#2 gc"smlsharp"{
j:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%h,label%f
f:
call void@sml_check(i32 inreg%d)
%g=load i8*,i8**%b,align 8
br label%h
h:
%i=phi i8*[%g,%f],[%a,%j]
store i8*null,i8**%b,align 8
%k=call fastcc i8*@_SMLLN10TermFormat10FormatComb1_DE_227(i8*inreg%i)#0
store i8*%k,i8**%b,align 8
%l=call i8*@sml_alloc(i32 inreg 12)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177288,i32*%n,align 4
store i8*%l,i8**%c,align 8
%o=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%c,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12keyValuePairE_348 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12keyValuePairE_348 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN10TermFormat12keyValuePairE_351(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=getelementptr inbounds i8,i8*%h,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
%m=getelementptr inbounds i8,i8*%l,i64 16
%n=bitcast i8*%m to i8*(i8*,i8*)**
%o=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%n,align 8
%p=bitcast i8*%l to i8**
%q=load i8*,i8**%p,align 8
store i8*%q,i8**%b,align 8
%r=bitcast i8*%h to i8**
%s=load i8*,i8**%r,align 8
%t=getelementptr inbounds i8,i8*%s,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%s to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
%A=tail call fastcc i8*%o(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define internal fastcc i8*@_SMLLN10TermFormat12keyValuePairE_353(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=getelementptr inbounds i8,i8*%h,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
%m=getelementptr inbounds i8,i8*%l,i64 16
%n=bitcast i8*%m to i8*(i8*,i8*)**
%o=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%n,align 8
%p=bitcast i8*%l to i8**
%q=load i8*,i8**%p,align 8
store i8*%q,i8**%b,align 8
%r=bitcast i8*%h to i8**
%s=load i8*,i8**%r,align 8
%t=getelementptr inbounds i8,i8*%s,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%s to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
%A=tail call fastcc i8*%o(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define internal fastcc i8*@_SMLLN10TermFormat12keyValuePairE_355(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=getelementptr inbounds i8,i8*%h,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
%m=getelementptr inbounds i8,i8*%l,i64 16
%n=bitcast i8*%m to i8*(i8*,i8*)**
%o=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%n,align 8
%p=bitcast i8*%l to i8**
%q=load i8*,i8**%p,align 8
store i8*%q,i8**%b,align 8
%r=bitcast i8*%h to i8**
%s=load i8*,i8**%r,align 8
%t=getelementptr inbounds i8,i8*%s,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%s to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
%A=tail call fastcc i8*%o(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define internal fastcc i8*@_SMLLN10TermFormat12keyValuePairE_357(i8*inreg%a)unnamed_addr#2 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%b,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%h,label%g
g:
call void@sml_check(i32 inreg%e)
br label%h
h:
%i=call fastcc i8*@_SMLLN10TermFormat10FormatComb6guard__E_247(i32 inreg 1,i32 inreg 8)
%j=getelementptr inbounds i8,i8*%i,i64 16
%k=bitcast i8*%j to i8*(i8*,i8*)**
%l=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%k,align 8
%m=bitcast i8*%i to i8**
%n=load i8*,i8**%m,align 8
%o=call fastcc i8*%l(i8*inreg%n,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,i8*,i32}>,<{[4x i8],i32,i8*,i8*,i32}>*@H,i64 0,i32 2)to i8*))
store i8*%o,i8**%c,align 8
%p=call i8*@sml_alloc(i32 inreg 12)#0
%q=getelementptr inbounds i8,i8*%p,i64 -4
%r=bitcast i8*%q to i32*
store i32 1342177288,i32*%r,align 4
store i8*%p,i8**%d,align 8
%s=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8*%p to i8**
store i8*%s,i8**%t,align 8
%u=getelementptr inbounds i8,i8*%p,i64 8
%v=bitcast i8*%u to i32*
store i32 1,i32*%v,align 4
%w=call i8*@sml_alloc(i32 inreg 28)#0
%x=getelementptr inbounds i8,i8*%w,i64 -4
%y=bitcast i8*%x to i32*
store i32 1342177304,i32*%y,align 4
%z=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%A=bitcast i8*%w to i8**
store i8*%z,i8**%A,align 8
%B=getelementptr inbounds i8,i8*%w,i64 8
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12keyValuePairE_336 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%w,i64 16
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12keyValuePairE_336 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%w,i64 24
%G=bitcast i8*%F to i32*
store i32 -2147483647,i32*%G,align 4
%H=call fastcc i8*@_SMLLN10TermFormat12keyValuePairE_336(i8*inreg%z,i8*inreg null)
%I=getelementptr inbounds i8,i8*%H,i64 16
%J=bitcast i8*%I to i8*(i8*,i8*)**
%K=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%J,align 8
%L=bitcast i8*%H to i8**
%M=load i8*,i8**%L,align 8
%N=call fastcc i8*%K(i8*inreg%M,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@I,i64 0,i32 2)to i8*))
%O=getelementptr inbounds i8,i8*%N,i64 16
%P=bitcast i8*%O to i8*(i8*,i8*)**
%Q=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%P,align 8
%R=bitcast i8*%N to i8**
%S=load i8*,i8**%R,align 8
%T=bitcast i8**%b to i8***
%U=load i8**,i8***%T,align 8
%V=load i8*,i8**%U,align 8
%W=call fastcc i8*%Q(i8*inreg%S,i8*inreg%V)
%X=getelementptr inbounds i8,i8*%W,i64 16
%Y=bitcast i8*%X to i8*(i8*,i8*)**
%Z=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%Y,align 8
%aa=bitcast i8*%W to i8**
%ab=load i8*,i8**%aa,align 8
%ac=call fastcc i8*%Z(i8*inreg%ab,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@J,i64 0,i32 2)to i8*))
%ad=getelementptr inbounds i8,i8*%ac,i64 16
%ae=bitcast i8*%ad to i8*(i8*,i8*)**
%af=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ae,align 8
%ag=bitcast i8*%ac to i8**
%ah=load i8*,i8**%ag,align 8
%ai=load i8*,i8**%b,align 8
%aj=getelementptr inbounds i8,i8*%ai,i64 8
%ak=bitcast i8*%aj to i8**
%al=load i8*,i8**%ak,align 8
%am=call fastcc i8*%af(i8*inreg%ah,i8*inreg%al)
%an=getelementptr inbounds i8,i8*%am,i64 16
%ao=bitcast i8*%an to i8*(i8*,i8*)**
%ap=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ao,align 8
%aq=bitcast i8*%am to i8**
%ar=load i8*,i8**%aq,align 8
%as=call fastcc i8*%ap(i8*inreg%ar,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@K,i64 0,i32 2)to i8*))
%at=getelementptr inbounds i8,i8*%as,i64 16
%au=bitcast i8*%at to i8*(i8*,i8*)**
%av=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%au,align 8
%aw=bitcast i8*%as to i8**
%ax=load i8*,i8**%aw,align 8
store i8*%ax,i8**%c,align 8
%ay=call i8*@sml_alloc(i32 inreg 4)#0
%az=bitcast i8*%ay to i32*
%aA=getelementptr inbounds i8,i8*%ay,i64 -4
%aB=bitcast i8*%aA to i32*
store i32 4,i32*%aB,align 4
store i32 2,i32*%az,align 4
%aC=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aD=call fastcc i8*%av(i8*inreg%aC,i8*inreg%ay)
%aE=getelementptr inbounds i8,i8*%aD,i64 16
%aF=bitcast i8*%aE to i8*(i8*,i8*)**
%aG=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aF,align 8
%aH=bitcast i8*%aD to i8**
%aI=load i8*,i8**%aH,align 8
%aJ=call fastcc i8*%aG(i8*inreg%aI,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@L,i64 0,i32 2)to i8*))
%aK=getelementptr inbounds i8,i8*%aJ,i64 16
%aL=bitcast i8*%aK to i8*(i8*,i8*)**
%aM=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aL,align 8
%aN=bitcast i8*%aJ to i8**
%aO=load i8*,i8**%aN,align 8
%aP=call fastcc i8*%aM(i8*inreg%aO,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@M,i64 0,i32 2)to i8*))
%aQ=getelementptr inbounds i8,i8*%aP,i64 16
%aR=bitcast i8*%aQ to i8*(i8*,i8*)**
%aS=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aR,align 8
%aT=bitcast i8*%aP to i8**
%aU=load i8*,i8**%aT,align 8
%aV=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%aW=getelementptr inbounds i8,i8*%aV,i64 16
%aX=bitcast i8*%aW to i8**
%aY=load i8*,i8**%aX,align 8
%aZ=call fastcc i8*%aS(i8*inreg%aU,i8*inreg%aY)
%a0=getelementptr inbounds i8,i8*%aZ,i64 16
%a1=bitcast i8*%a0 to i8*(i8*,i8*)**
%a2=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a1,align 8
%a3=bitcast i8*%aZ to i8**
%a4=load i8*,i8**%a3,align 8
%a5=call fastcc i8*%a2(i8*inreg%a4,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@N,i64 0,i32 2)to i8*))
%a6=getelementptr inbounds i8,i8*%a5,i64 16
%a7=bitcast i8*%a6 to i8*(i8*,i8*)**
%a8=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a7,align 8
%a9=bitcast i8*%a5 to i8**
%ba=load i8*,i8**%a9,align 8
%bb=call fastcc i8*%a8(i8*inreg%ba,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@O,i64 0,i32 2)to i8*))
%bc=getelementptr inbounds i8,i8*%bb,i64 16
%bd=bitcast i8*%bc to i8*(i8*,i8*)**
%be=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bd,align 8
%bf=bitcast i8*%bb to i8**
%bg=load i8*,i8**%bf,align 8
%bh=tail call fastcc i8*%be(i8*inreg%bg,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@P,i64 0,i32 2)to i8*))
ret i8*%bh
}
define internal fastcc i8*@_SMLLN10TermFormat17formatEnclosedMapE_359(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
m:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%k,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%e,align 8
br label%k
k:
%l=phi i8*[%j,%i],[%a,%m]
%n=getelementptr inbounds i8,i8*%l,i64 28
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=add i32%p,-1
%r=sub i32 0,%p
%s=and i32%q,%r
%t=getelementptr inbounds i8,i8*%l,i64 36
%u=bitcast i8*%t to i32*
%v=load i32,i32*%u,align 4
%w=add i32%q,%v
%x=add i32%w,%s
%y=sub i32 0,%v
%z=and i32%x,%y
%A=bitcast i8*%l to i8**
%B=load i8*,i8**%A,align 8
%C=getelementptr inbounds i8,i8*%B,i64 16
%D=bitcast i8*%C to i8*(i8*,i8*)**
%E=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%D,align 8
%F=bitcast i8*%B to i8**
%G=load i8*,i8**%F,align 8
store i8*%G,i8**%d,align 8
%H=getelementptr inbounds i8,i8*%l,i64 24
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
%K=icmp eq i32%J,0
br i1%K,label%R,label%L
L:
%M=load i8*,i8**%c,align 8
%N=sext i32%s to i64
%O=getelementptr inbounds i8,i8*%M,i64%N
%P=bitcast i8*%O to i8**
%Q=load i8*,i8**%P,align 8
br label%Z
R:
%S=call i8*@sml_alloc(i32 inreg%p)#0
%T=getelementptr inbounds i8,i8*%S,i64 -4
%U=bitcast i8*%T to i32*
store i32%p,i32*%U,align 4
%V=load i8*,i8**%c,align 8
%W=sext i32%s to i64
%X=getelementptr inbounds i8,i8*%V,i64%W
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%S,i8*%X,i32%p,i1 false)
%Y=load i8*,i8**%d,align 8
br label%Z
Z:
%aa=phi i8*[%G,%L],[%Y,%R]
%ab=phi i8*[%Q,%L],[%S,%R]
store i8*null,i8**%d,align 8
%ac=call fastcc i8*%E(i8*inreg%aa,i8*inreg%ab)
store i8*%ac,i8**%d,align 8
%ad=load i8*,i8**%e,align 8
%ae=getelementptr inbounds i8,i8*%ad,i64 8
%af=bitcast i8*%ae to i8***
%ag=load i8**,i8***%af,align 8
%ah=load i8*,i8**%ag,align 8
%ai=getelementptr inbounds i8,i8*%ah,i64 16
%aj=bitcast i8*%ai to i8*(i8*,i8*)**
%ak=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aj,align 8
%al=bitcast i8*%ah to i8**
%am=load i8*,i8**%al,align 8
store i8*%am,i8**%f,align 8
%an=getelementptr inbounds i8,i8*%ad,i64 32
%ao=bitcast i8*%an to i32*
%ap=load i32,i32*%ao,align 4
%aq=icmp eq i32%ap,0
br i1%aq,label%ax,label%ar
ar:
%as=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%at=sext i32%z to i64
%au=getelementptr inbounds i8,i8*%as,i64%at
%av=bitcast i8*%au to i8**
%aw=load i8*,i8**%av,align 8
br label%aI
ax:
%ay=getelementptr inbounds i8,i8*%ad,i64 36
%az=bitcast i8*%ay to i32*
%aA=load i32,i32*%az,align 4
%aB=call i8*@sml_alloc(i32 inreg%aA)#0
%aC=getelementptr inbounds i8,i8*%aB,i64 -4
%aD=bitcast i8*%aC to i32*
store i32%aA,i32*%aD,align 4
%aE=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aF=sext i32%z to i64
%aG=getelementptr inbounds i8,i8*%aE,i64%aF
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aB,i8*%aG,i32%aA,i1 false)
%aH=load i8*,i8**%f,align 8
br label%aI
aI:
%aJ=phi i8*[%am,%ar],[%aH,%ax]
%aK=phi i8*[%aw,%ar],[%aB,%ax]
store i8*null,i8**%f,align 8
%aL=call fastcc i8*%ak(i8*inreg%aJ,i8*inreg%aK)
store i8*%aL,i8**%c,align 8
%aM=load i8*,i8**%e,align 8
%aN=getelementptr inbounds i8,i8*%aM,i64 16
%aO=bitcast i8*%aN to i8**
%aP=load i8*,i8**%aO,align 8
store i8*%aP,i8**%e,align 8
%aQ=call i8*@sml_alloc(i32 inreg 28)#0
%aR=getelementptr inbounds i8,i8*%aQ,i64 -4
%aS=bitcast i8*%aR to i32*
store i32 1342177304,i32*%aS,align 4
%aT=load i8*,i8**%d,align 8
%aU=bitcast i8*%aQ to i8**
store i8*%aT,i8**%aU,align 8
%aV=load i8*,i8**%e,align 8
%aW=getelementptr inbounds i8,i8*%aQ,i64 8
%aX=bitcast i8*%aW to i8**
store i8*%aV,i8**%aX,align 8
%aY=load i8*,i8**%c,align 8
%aZ=getelementptr inbounds i8,i8*%aQ,i64 16
%a0=bitcast i8*%aZ to i8**
store i8*%aY,i8**%a0,align 8
%a1=getelementptr inbounds i8,i8*%aQ,i64 24
%a2=bitcast i8*%a1 to i32*
store i32 7,i32*%a2,align 4
%a3=tail call fastcc i8*@_SMLLN10TermFormat12keyValuePairE_357(i8*inreg%aQ)
ret i8*%a3
}
define internal fastcc i8*@_SMLLN10TermFormat17formatEnclosedMapE_360(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
s:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
%k=alloca i8*,align 8
%l=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
call void@llvm.gcroot(i8**%k,i8*null)#0
call void@llvm.gcroot(i8**%l,i8*null)#0
store i8*%a,i8**%g,align 8
store i8*%b,i8**%h,align 8
%m=load atomic i32,i32*@sml_check_flag unordered,align 4
%n=icmp eq i32%m,0
br i1%n,label%q,label%o
o:
call void@sml_check(i32 inreg%m)
%p=load i8*,i8**%g,align 8
br label%q
q:
%r=phi i8*[%p,%o],[%a,%s]
%t=getelementptr inbounds i8,i8*%r,i64 16
%u=bitcast i8*%t to i8**
%v=load i8*,i8**%u,align 8
%w=getelementptr inbounds i8,i8*%v,i64 8
%x=bitcast i8*%w to i8**
%y=load i8*,i8**%x,align 8
store i8*%y,i8**%c,align 8
%z=getelementptr inbounds i8,i8*%v,i64 16
%A=bitcast i8*%z to i8**
%B=load i8*,i8**%A,align 8
store i8*%B,i8**%d,align 8
%C=getelementptr inbounds i8,i8*%v,i64 24
%D=bitcast i8*%C to i8**
%E=load i8*,i8**%D,align 8
store i8*%E,i8**%e,align 8
%F=getelementptr inbounds i8,i8*%v,i64 32
%G=bitcast i8*%F to i8**
%H=load i8*,i8**%G,align 8
store i8*%H,i8**%f,align 8
%I=call fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_293(i32 inreg 1,i32 inreg 8)
%J=getelementptr inbounds i8,i8*%I,i64 16
%K=bitcast i8*%J to i8*(i8*,i8*)**
%L=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%K,align 8
%M=bitcast i8*%I to i8**
%N=load i8*,i8**%M,align 8
store i8*%N,i8**%k,align 8
%O=bitcast i8**%g to i8***
%P=load i8**,i8***%O,align 8
%Q=load i8*,i8**%P,align 8
store i8*%Q,i8**%i,align 8
%R=getelementptr inbounds i8*,i8**%P,i64 2
%S=load i8*,i8**%R,align 8
store i8*%S,i8**%j,align 8
%T=bitcast i8**%P to i8*
%U=getelementptr inbounds i8*,i8**%P,i64 3
%V=bitcast i8**%U to i32*
%W=load i32,i32*%V,align 4
%X=getelementptr inbounds i8,i8*%T,i64 28
%Y=bitcast i8*%X to i32*
%Z=load i32,i32*%Y,align 4
%aa=getelementptr inbounds i8*,i8**%P,i64 4
%ab=bitcast i8**%aa to i32*
%ac=load i32,i32*%ab,align 4
%ad=getelementptr inbounds i8,i8*%T,i64 36
%ae=bitcast i8*%ad to i32*
%af=load i32,i32*%ae,align 4
%ag=call i8*@sml_alloc(i32 inreg 44)#0
%ah=getelementptr inbounds i8,i8*%ag,i64 -4
%ai=bitcast i8*%ah to i32*
store i32 1342177320,i32*%ai,align 4
store i8*%ag,i8**%l,align 8
%aj=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%ak=bitcast i8*%ag to i8**
store i8*%aj,i8**%ak,align 8
%al=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%am=getelementptr inbounds i8,i8*%ag,i64 8
%an=bitcast i8*%am to i8**
store i8*%al,i8**%an,align 8
%ao=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%ap=getelementptr inbounds i8,i8*%ag,i64 16
%aq=bitcast i8*%ap to i8**
store i8*%ao,i8**%aq,align 8
%ar=getelementptr inbounds i8,i8*%ag,i64 24
%as=bitcast i8*%ar to i32*
store i32%W,i32*%as,align 4
%at=getelementptr inbounds i8,i8*%ag,i64 28
%au=bitcast i8*%at to i32*
store i32%Z,i32*%au,align 4
%av=getelementptr inbounds i8,i8*%ag,i64 32
%aw=bitcast i8*%av to i32*
store i32%ac,i32*%aw,align 4
%ax=getelementptr inbounds i8,i8*%ag,i64 36
%ay=bitcast i8*%ax to i32*
store i32%af,i32*%ay,align 4
%az=getelementptr inbounds i8,i8*%ag,i64 40
%aA=bitcast i8*%az to i32*
store i32 7,i32*%aA,align 4
%aB=call i8*@sml_alloc(i32 inreg 28)#0
%aC=getelementptr inbounds i8,i8*%aB,i64 -4
%aD=bitcast i8*%aC to i32*
store i32 1342177304,i32*%aD,align 4
store i8*%aB,i8**%e,align 8
%aE=load i8*,i8**%l,align 8
store i8*null,i8**%l,align 8
%aF=bitcast i8*%aB to i8**
store i8*%aE,i8**%aF,align 8
%aG=getelementptr inbounds i8,i8*%aB,i64 8
%aH=bitcast i8*%aG to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat17formatEnclosedMapE_359 to void(...)*),void(...)**%aH,align 8
%aI=getelementptr inbounds i8,i8*%aB,i64 16
%aJ=bitcast i8*%aI to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat17formatEnclosedMapE_359 to void(...)*),void(...)**%aJ,align 8
%aK=getelementptr inbounds i8,i8*%aB,i64 24
%aL=bitcast i8*%aK to i32*
store i32 -2147483647,i32*%aL,align 4
%aM=call i8*@sml_alloc(i32 inreg 36)#0
%aN=getelementptr inbounds i8,i8*%aM,i64 -4
%aO=bitcast i8*%aN to i32*
store i32 1342177312,i32*%aO,align 4
%aP=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aQ=bitcast i8*%aM to i8**
store i8*%aP,i8**%aQ,align 8
%aR=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aS=getelementptr inbounds i8,i8*%aM,i64 8
%aT=bitcast i8*%aS to i8**
store i8*%aR,i8**%aT,align 8
%aU=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aV=getelementptr inbounds i8,i8*%aM,i64 16
%aW=bitcast i8*%aV to i8**
store i8*%aU,i8**%aW,align 8
%aX=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%aY=getelementptr inbounds i8,i8*%aM,i64 24
%aZ=bitcast i8*%aY to i8**
store i8*%aX,i8**%aZ,align 8
%a0=getelementptr inbounds i8,i8*%aM,i64 32
%a1=bitcast i8*%a0 to i32*
store i32 15,i32*%a1,align 4
%a2=load i8*,i8**%k,align 8
store i8*null,i8**%k,align 8
%a3=call fastcc i8*%L(i8*inreg%a2,i8*inreg%aM)
%a4=getelementptr inbounds i8,i8*%a3,i64 16
%a5=bitcast i8*%a4 to i8*(i8*,i8*)**
%a6=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a5,align 8
%a7=bitcast i8*%a3 to i8**
%a8=load i8*,i8**%a7,align 8
store i8*%a8,i8**%c,align 8
%a9=load i8*,i8**%g,align 8
%ba=getelementptr inbounds i8,i8*%a9,i64 8
%bb=bitcast i8*%ba to i8**
%bc=load i8*,i8**%bb,align 8
%bd=getelementptr inbounds i8,i8*%bc,i64 16
%be=bitcast i8*%bd to i8*(i8*,i8*)**
%bf=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%be,align 8
store i8*null,i8**%g,align 8
%bg=bitcast i8*%bc to i8**
%bh=load i8*,i8**%bg,align 8
%bi=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%bj=call fastcc i8*%bf(i8*inreg%bh,i8*inreg%bi)
%bk=load i8*,i8**%c,align 8
%bl=tail call fastcc i8*%a6(i8*inreg%bk,i8*inreg%bj)
ret i8*%bl
}
define internal fastcc i8*@_SMLLN10TermFormat17formatEnclosedMapE_361(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=getelementptr inbounds i8,i8*%a,i64 16
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%a,i64 20
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=getelementptr inbounds i8,i8*%a,i64 24
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=getelementptr inbounds i8,i8*%a,i64 28
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=call i8*@sml_alloc(i32 inreg 44)#0
%y=getelementptr inbounds i8,i8*%x,i64 -4
%z=bitcast i8*%y to i32*
store i32 1342177320,i32*%z,align 4
store i8*%x,i8**%f,align 8
%A=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%B=bitcast i8*%x to i8**
store i8*%A,i8**%B,align 8
%C=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%D=getelementptr inbounds i8,i8*%x,i64 8
%E=bitcast i8*%D to i8**
store i8*%C,i8**%E,align 8
%F=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%G=getelementptr inbounds i8,i8*%x,i64 16
%H=bitcast i8*%G to i8**
store i8*%F,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%x,i64 24
%J=bitcast i8*%I to i32*
store i32%n,i32*%J,align 4
%K=getelementptr inbounds i8,i8*%x,i64 28
%L=bitcast i8*%K to i32*
store i32%q,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%x,i64 32
%N=bitcast i8*%M to i32*
store i32%t,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%x,i64 36
%P=bitcast i8*%O to i32*
store i32%w,i32*%P,align 4
%Q=getelementptr inbounds i8,i8*%x,i64 40
%R=bitcast i8*%Q to i32*
store i32 7,i32*%R,align 4
%S=call i8*@sml_alloc(i32 inreg 28)#0
%T=getelementptr inbounds i8,i8*%S,i64 -4
%U=bitcast i8*%T to i32*
store i32 1342177304,i32*%U,align 4
%V=load i8*,i8**%f,align 8
%W=bitcast i8*%S to i8**
store i8*%V,i8**%W,align 8
%X=getelementptr inbounds i8,i8*%S,i64 8
%Y=bitcast i8*%X to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat17formatEnclosedMapE_360 to void(...)*),void(...)**%Y,align 8
%Z=getelementptr inbounds i8,i8*%S,i64 16
%aa=bitcast i8*%Z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat17formatEnclosedMapE_360 to void(...)*),void(...)**%aa,align 8
%ab=getelementptr inbounds i8,i8*%S,i64 24
%ac=bitcast i8*%ab to i32*
store i32 1,i32*%ac,align 4
ret i8*%S
}
define internal fastcc i8*@_SMLLN10TermFormat17formatEnclosedMapE_362(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%b,i8**%c,align 8
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=getelementptr inbounds i8,i8*%a,i64 8
%i=bitcast i8*%h to i32*
%j=load i32,i32*%i,align 4
%k=getelementptr inbounds i8,i8*%a,i64 12
%l=bitcast i8*%k to i32*
%m=load i32,i32*%l,align 4
%n=getelementptr inbounds i8,i8*%a,i64 16
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%a,i64 20
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call i8*@sml_alloc(i32 inreg 36)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177312,i32*%v,align 4
store i8*%t,i8**%e,align 8
%w=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%z=getelementptr inbounds i8,i8*%t,i64 8
%A=bitcast i8*%z to i8**
store i8*%y,i8**%A,align 8
%B=getelementptr inbounds i8,i8*%t,i64 16
%C=bitcast i8*%B to i32*
store i32%j,i32*%C,align 4
%D=getelementptr inbounds i8,i8*%t,i64 20
%E=bitcast i8*%D to i32*
store i32%m,i32*%E,align 4
%F=getelementptr inbounds i8,i8*%t,i64 24
%G=bitcast i8*%F to i32*
store i32%p,i32*%G,align 4
%H=getelementptr inbounds i8,i8*%t,i64 28
%I=bitcast i8*%H to i32*
store i32%s,i32*%I,align 4
%J=getelementptr inbounds i8,i8*%t,i64 32
%K=bitcast i8*%J to i32*
store i32 3,i32*%K,align 4
%L=call i8*@sml_alloc(i32 inreg 28)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32 1342177304,i32*%N,align 4
%O=load i8*,i8**%e,align 8
%P=bitcast i8*%L to i8**
store i8*%O,i8**%P,align 8
%Q=getelementptr inbounds i8,i8*%L,i64 8
%R=bitcast i8*%Q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat17formatEnclosedMapE_361 to void(...)*),void(...)**%R,align 8
%S=getelementptr inbounds i8,i8*%L,i64 16
%T=bitcast i8*%S to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat17formatEnclosedMapE_361 to void(...)*),void(...)**%T,align 8
%U=getelementptr inbounds i8,i8*%L,i64 24
%V=bitcast i8*%U to i32*
store i32 -2147483647,i32*%V,align 4
ret i8*%L
}
define internal fastcc i8*@_SMLLN10TermFormat17formatEnclosedMapE_363(i8*inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e)#4 gc"smlsharp"{
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
%h=bitcast i8*%a to i8**
%i=load i8*,i8**%h,align 8
store i8*%i,i8**%f,align 8
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i32*
%l=load i32,i32*%k,align 4
%m=getelementptr inbounds i8,i8*%a,i64 12
%n=bitcast i8*%m to i32*
%o=load i32,i32*%n,align 4
%p=call i8*@sml_alloc(i32 inreg 28)#0
%q=getelementptr inbounds i8,i8*%p,i64 -4
%r=bitcast i8*%q to i32*
store i32 1342177304,i32*%r,align 4
store i8*%p,i8**%g,align 8
%s=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%t=bitcast i8*%p to i8**
store i8*%s,i8**%t,align 8
%u=getelementptr inbounds i8,i8*%p,i64 8
%v=bitcast i8*%u to i32*
store i32%l,i32*%v,align 4
%w=getelementptr inbounds i8,i8*%p,i64 12
%x=bitcast i8*%w to i32*
store i32%o,i32*%x,align 4
%y=getelementptr inbounds i8,i8*%p,i64 16
%z=bitcast i8*%y to i32*
store i32%d,i32*%z,align 4
%A=getelementptr inbounds i8,i8*%p,i64 20
%B=bitcast i8*%A to i32*
store i32%e,i32*%B,align 4
%C=getelementptr inbounds i8,i8*%p,i64 24
%D=bitcast i8*%C to i32*
store i32 1,i32*%D,align 4
%E=call i8*@sml_alloc(i32 inreg 28)#0
%F=getelementptr inbounds i8,i8*%E,i64 -4
%G=bitcast i8*%F to i32*
store i32 1342177304,i32*%G,align 4
%H=load i8*,i8**%g,align 8
%I=bitcast i8*%E to i8**
store i8*%H,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%E,i64 8
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat17formatEnclosedMapE_362 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%E,i64 16
%M=bitcast i8*%L to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat17formatEnclosedMapE_362 to void(...)*),void(...)**%M,align 8
%N=getelementptr inbounds i8,i8*%E,i64 24
%O=bitcast i8*%N to i32*
store i32 -2147483647,i32*%O,align 4
ret i8*%E
}
define internal fastcc i8*@_SMLLN10TermFormat17formatEnclosedMapE_364(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32,i32,i32)*@_SMLLN10TermFormat17formatEnclosedMapE_363 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*,i8*,i8*)*@_SMLLN10TermFormat17formatEnclosedMapE_1048 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define internal fastcc i8*@_SMLLN10TermFormat17formatEnclosedMapE_365(i32 inreg%a,i32 inreg%b)unnamed_addr#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat17formatEnclosedMapE_364 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat17formatEnclosedMapE_364 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedSEnvE_367(i8*inreg%a)#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=getelementptr inbounds i8,i8*%a,i64 -4
%e=bitcast i8*%d to i32*
%f=load i32,i32*%e,align 4
%g=and i32%f,268435455
%h=add nsw i32%g,-1
%i=call i8*@sml_alloc(i32 inreg 20)#0
%j=getelementptr inbounds i8,i8*%i,i64 -4
%k=bitcast i8*%j to i32*
store i32 1342177296,i32*%k,align 4
store i8*%i,i8**%c,align 8
%l=getelementptr inbounds i8,i8*%i,i64 4
%m=bitcast i8*%l to i32*
store i32 0,i32*%m,align 1
%n=bitcast i8*%i to i32*
store i32%h,i32*%n,align 4
%o=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%p=getelementptr inbounds i8,i8*%i,i64 8
%q=bitcast i8*%p to i8**
store i8*%o,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%i,i64 16
%s=bitcast i8*%r to i32*
store i32 2,i32*%s,align 4
%t=call i8*@sml_alloc(i32 inreg 20)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177296,i32*%v,align 4
store i8*%t,i8**%b,align 8
%w=getelementptr inbounds i8,i8*%t,i64 4
%x=bitcast i8*%w to i32*
store i32 0,i32*%x,align 1
%y=bitcast i8*%t to i32*
store i32 6,i32*%y,align 4
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=getelementptr inbounds i8,i8*%t,i64 8
%B=bitcast i8*%A to i8**
store i8*%z,i8**%B,align 8
%C=getelementptr inbounds i8,i8*%t,i64 16
%D=bitcast i8*%C to i32*
store i32 2,i32*%D,align 4
%E=call i8*@sml_alloc(i32 inreg 20)#0
%F=getelementptr inbounds i8,i8*%E,i64 -4
%G=bitcast i8*%F to i32*
store i32 1342177296,i32*%G,align 4
%H=load i8*,i8**%b,align 8
%I=bitcast i8*%E to i8**
store i8*%H,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%E,i64 8
%K=bitcast i8*%J to i8**
store i8*null,i8**%K,align 8
%L=getelementptr inbounds i8,i8*%E,i64 16
%M=bitcast i8*%L to i32*
store i32 3,i32*%M,align 4
store i8*null,i8**%c,align 8
%N=call i8*@sml_alloc(i32 inreg 20)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32 1342177296,i32*%P,align 4
%Q=load i8*,i8**%b,align 8
%R=bitcast i8*%N to i8**
store i8*%Q,i8**%R,align 8
%S=load i8*,i8**%c,align 8
%T=getelementptr inbounds i8,i8*%N,i64 8
%U=bitcast i8*%T to i8**
store i8*%S,i8**%U,align 8
%V=getelementptr inbounds i8,i8*%N,i64 16
%W=bitcast i8*%V to i32*
store i32 3,i32*%W,align 4
ret i8*%N
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedSEnvE_369(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%l,label%k
k:
call void@sml_check(i32 inreg%i)
br label%l
l:
%m=call fastcc i8*@_SMLLN10TermFormat17formatEnclosedMapE_365(i32 inreg 1,i32 inreg 8)
%n=getelementptr inbounds i8,i8*%m,i64 16
%o=bitcast i8*%n to i8*(i8*,i8*)**
%p=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%o,align 8
%q=bitcast i8*%m to i8**
%r=load i8*,i8**%q,align 8
%s=call fastcc i8*%p(i8*inreg%r,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@Q,i64 0,i32 2)to i8*))
%t=getelementptr inbounds i8,i8*%s,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*,i8*,i8*,i8*)**
%v=load i8*(i8*,i8*,i8*,i8*,i8*)*,i8*(i8*,i8*,i8*,i8*,i8*)**%u,align 8
%w=bitcast i8*%s to i8**
%x=load i8*,i8**%w,align 8
store i8*%x,i8**%e,align 8
%y=load i8*,i8**%c,align 8
%z=getelementptr inbounds i8,i8*%y,i64 8
%A=bitcast i8*%z to i32*
%B=load i32,i32*%A,align 4
%C=getelementptr inbounds i8,i8*%y,i64 12
%D=bitcast i8*%C to i32*
%E=load i32,i32*%D,align 4
%F=call i8*@sml_alloc(i32 inreg 4)#0
%G=bitcast i8*%F to i32*
%H=getelementptr inbounds i8,i8*%F,i64 -4
%I=bitcast i8*%H to i32*
store i32 4,i32*%I,align 4
store i8*%F,i8**%f,align 8
store i32 1,i32*%G,align 4
%J=call i8*@sml_alloc(i32 inreg 4)#0
%K=bitcast i8*%J to i32*
%L=getelementptr inbounds i8,i8*%J,i64 -4
%M=bitcast i8*%L to i32*
store i32 4,i32*%M,align 4
store i8*%J,i8**%g,align 8
store i32 8,i32*%K,align 4
%N=call i8*@sml_alloc(i32 inreg 4)#0
%O=bitcast i8*%N to i32*
%P=getelementptr inbounds i8,i8*%N,i64 -4
%Q=bitcast i8*%P to i32*
store i32 4,i32*%Q,align 4
store i8*%N,i8**%h,align 8
store i32%B,i32*%O,align 4
%R=call i8*@sml_alloc(i32 inreg 4)#0
%S=bitcast i8*%R to i32*
%T=getelementptr inbounds i8,i8*%R,i64 -4
%U=bitcast i8*%T to i32*
store i32 4,i32*%U,align 4
store i32%E,i32*%S,align 4
%V=load i8*,i8**%e,align 8
%W=load i8*,i8**%f,align 8
%X=load i8*,i8**%g,align 8
%Y=load i8*,i8**%h,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%f,align 8
store i8*null,i8**%g,align 8
store i8*null,i8**%h,align 8
%Z=call fastcc i8*%v(i8*inreg%V,i8*inreg%W,i8*inreg%X,i8*inreg%Y,i8*inreg%R)
%aa=getelementptr inbounds i8,i8*%Z,i64 16
%ab=bitcast i8*%aa to i8*(i8*,i8*)**
%ac=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ab,align 8
%ad=bitcast i8*%Z to i8**
%ae=load i8*,i8**%ad,align 8
store i8*%ae,i8**%e,align 8
%af=load i8*,i8**%c,align 8
%ag=getelementptr inbounds i8,i8*%af,i64 8
%ah=bitcast i8*%ag to i32*
%ai=load i32,i32*%ah,align 4
%aj=getelementptr inbounds i8,i8*%af,i64 12
%ak=bitcast i8*%aj to i32*
%al=load i32,i32*%ak,align 4
%am=call fastcc i8*@_SMLFN4SEnv10listItemsiE(i32 inreg%ai,i32 inreg%al)
%an=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%ao=call fastcc i8*%ac(i8*inreg%an,i8*inreg%am)
%ap=getelementptr inbounds i8,i8*%ao,i64 16
%aq=bitcast i8*%ap to i8*(i8*,i8*)**
%ar=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aq,align 8
%as=bitcast i8*%ao to i8**
%at=load i8*,i8**%as,align 8
%au=bitcast i8**%c to i8***
%av=load i8**,i8***%au,align 8
store i8*null,i8**%c,align 8
%aw=load i8*,i8**%av,align 8
%ax=call fastcc i8*%ar(i8*inreg%at,i8*inreg%aw)
%ay=getelementptr inbounds i8,i8*%ax,i64 16
%az=bitcast i8*%ay to i8*(i8*,i8*)**
%aA=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%az,align 8
%aB=bitcast i8*%ax to i8**
%aC=load i8*,i8**%aB,align 8
%aD=load i8*,i8**%d,align 8
%aE=tail call fastcc i8*%aA(i8*inreg%aC,i8*inreg%aD)
ret i8*%aE
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedSEnvE_370(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedSEnvE_369 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedSEnvE_369 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat18formatEnclosedSEnvE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedSEnvE_370 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedSEnvE_370 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_373(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_375(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_378(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%m
i:
call void@sml_check(i32 inreg%e)
%j=load i8*,i8**%d,align 8
%k=bitcast i8**%c to i8***
%l=load i8**,i8***%k,align 8
br label%m
m:
%n=phi i8**[%l,%i],[%h,%g]
%o=phi i8*[%j,%i],[%b,%g]
store i8*null,i8**%d,align 8
%p=load i8*,i8**%n,align 8
%q=getelementptr inbounds i8,i8*%p,i64 16
%r=bitcast i8*%q to i8*(i8*,i8*)**
%s=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%r,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8**%n to i8***
%u=load i8**,i8***%t,align 8
%v=load i8*,i8**%u,align 8
%w=call fastcc i8*%s(i8*inreg%v,i8*inreg%o)
%x=getelementptr inbounds i8,i8*%w,i64 16
%y=bitcast i8*%x to i8*(i8*,i8*,i8*)**
%z=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%y,align 8
%A=bitcast i8*%w to i8**
%B=load i8*,i8**%A,align 8
store i8*%B,i8**%c,align 8
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%d,align 8
store i32 1,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32 8,i32*%H,align 4
%K=load i8*,i8**%c,align 8
%L=load i8*,i8**%d,align 8
%M=tail call fastcc i8*%z(i8*inreg%K,i8*inreg%L,i8*inreg%G)
ret i8*%M
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_379(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=load i8*,i8**%d,align 8
%m=bitcast i8**%c to i8***
%n=load i8**,i8***%m,align 8
br label%o
o:
%p=phi i8**[%n,%k],[%j,%i]
%q=phi i8*[%l,%k],[%b,%i]
store i8*null,i8**%d,align 8
%r=load i8*,i8**%p,align 8
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
store i8*null,i8**%c,align 8
%v=bitcast i8**%p to i8***
%w=load i8**,i8***%v,align 8
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%u(i8*inreg%x,i8*inreg%q)
%z=getelementptr inbounds i8,i8*%y,i64 16
%A=bitcast i8*%z to i8*(i8*,i8*,i8*,i8*,i8*)**
%B=load i8*(i8*,i8*,i8*,i8*,i8*)*,i8*(i8*,i8*,i8*,i8*,i8*)**%A,align 8
%C=bitcast i8*%y to i8**
%D=load i8*,i8**%C,align 8
store i8*%D,i8**%c,align 8
%E=call i8*@sml_alloc(i32 inreg 4)#0
%F=bitcast i8*%E to i32*
%G=getelementptr inbounds i8,i8*%E,i64 -4
%H=bitcast i8*%G to i32*
store i32 4,i32*%H,align 4
store i8*%E,i8**%d,align 8
store i32 1,i32*%F,align 4
%I=call i8*@sml_alloc(i32 inreg 4)#0
%J=bitcast i8*%I to i32*
%K=getelementptr inbounds i8,i8*%I,i64 -4
%L=bitcast i8*%K to i32*
store i32 4,i32*%L,align 4
store i8*%I,i8**%e,align 8
store i32 8,i32*%J,align 4
%M=call i8*@sml_alloc(i32 inreg 4)#0
%N=bitcast i8*%M to i32*
%O=getelementptr inbounds i8,i8*%M,i64 -4
%P=bitcast i8*%O to i32*
store i32 4,i32*%P,align 4
store i8*%M,i8**%f,align 8
store i32 1,i32*%N,align 4
%Q=call i8*@sml_alloc(i32 inreg 4)#0
%R=bitcast i8*%Q to i32*
%S=getelementptr inbounds i8,i8*%Q,i64 -4
%T=bitcast i8*%S to i32*
store i32 4,i32*%T,align 4
store i32 8,i32*%R,align 4
%U=load i8*,i8**%c,align 8
%V=load i8*,i8**%d,align 8
%W=load i8*,i8**%e,align 8
%X=load i8*,i8**%f,align 8
%Y=call fastcc i8*%B(i8*inreg%U,i8*inreg%V,i8*inreg%W,i8*inreg%X,i8*inreg%Q)
ret i8*%Y
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_380(i8*inreg%a)#2 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%g,label%f
f:
call void@sml_check(i32 inreg%d)
br label%g
g:
%h=call fastcc i8*@_SMLLN10TermFormat10FormatComb6guard__E_247(i32 inreg 1,i32 inreg 8)
%i=getelementptr inbounds i8,i8*%h,i64 16
%j=bitcast i8*%i to i8*(i8*,i8*)**
%k=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%j,align 8
%l=bitcast i8*%h to i8**
%m=load i8*,i8**%l,align 8
%n=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%o=call fastcc i8*%k(i8*inreg%m,i8*inreg%n)
store i8*%o,i8**%b,align 8
%p=call i8*@sml_alloc(i32 inreg 12)#0
%q=getelementptr inbounds i8,i8*%p,i64 -4
%r=bitcast i8*%q to i32*
store i32 1342177288,i32*%r,align 4
store i8*%p,i8**%c,align 8
%s=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%t=bitcast i8*%p to i8**
store i8*%s,i8**%t,align 8
%u=getelementptr inbounds i8,i8*%p,i64 8
%v=bitcast i8*%u to i32*
store i32 1,i32*%v,align 4
%w=call i8*@sml_alloc(i32 inreg 28)#0
%x=getelementptr inbounds i8,i8*%w,i64 -4
%y=bitcast i8*%x to i32*
store i32 1342177304,i32*%y,align 4
%z=load i8*,i8**%c,align 8
%A=bitcast i8*%w to i8**
store i8*%z,i8**%A,align 8
%B=getelementptr inbounds i8,i8*%w,i64 8
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_379 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%w,i64 16
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_379 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%w,i64 24
%G=bitcast i8*%F to i32*
store i32 -2147483647,i32*%G,align 4
ret i8*%w
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_384(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%m
i:
call void@sml_check(i32 inreg%e)
%j=load i8*,i8**%d,align 8
%k=bitcast i8**%c to i8***
%l=load i8**,i8***%k,align 8
br label%m
m:
%n=phi i8**[%l,%i],[%h,%g]
%o=phi i8*[%j,%i],[%b,%g]
store i8*null,i8**%d,align 8
%p=load i8*,i8**%n,align 8
%q=getelementptr inbounds i8,i8*%p,i64 16
%r=bitcast i8*%q to i8*(i8*,i8*)**
%s=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%r,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8**%n to i8***
%u=load i8**,i8***%t,align 8
%v=load i8*,i8**%u,align 8
%w=call fastcc i8*%s(i8*inreg%v,i8*inreg%o)
%x=getelementptr inbounds i8,i8*%w,i64 16
%y=bitcast i8*%x to i8*(i8*,i8*,i8*)**
%z=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%y,align 8
%A=bitcast i8*%w to i8**
%B=load i8*,i8**%A,align 8
store i8*%B,i8**%c,align 8
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%d,align 8
store i32 1,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32 8,i32*%H,align 4
%K=load i8*,i8**%c,align 8
%L=load i8*,i8**%d,align 8
%M=tail call fastcc i8*%z(i8*inreg%K,i8*inreg%L,i8*inreg%G)
ret i8*%M
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_385(i8*inreg%a)#2 gc"smlsharp"{
j:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%h,label%f
f:
call void@sml_check(i32 inreg%d)
%g=load i8*,i8**%b,align 8
br label%h
h:
%i=phi i8*[%g,%f],[%a,%j]
store i8*null,i8**%b,align 8
%k=call fastcc i8*@_SMLLN10TermFormat10FormatComb1_DE_227(i8*inreg%i)#0
store i8*%k,i8**%b,align 8
%l=call i8*@sml_alloc(i32 inreg 12)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177288,i32*%n,align 4
store i8*%l,i8**%c,align 8
%o=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%c,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_384 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_384 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_388(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%m
i:
call void@sml_check(i32 inreg%e)
%j=load i8*,i8**%d,align 8
%k=bitcast i8**%c to i8***
%l=load i8**,i8***%k,align 8
br label%m
m:
%n=phi i8**[%l,%i],[%h,%g]
%o=phi i8*[%j,%i],[%b,%g]
store i8*null,i8**%d,align 8
%p=load i8*,i8**%n,align 8
%q=getelementptr inbounds i8,i8*%p,i64 16
%r=bitcast i8*%q to i8*(i8*,i8*)**
%s=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%r,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8**%n to i8***
%u=load i8**,i8***%t,align 8
%v=load i8*,i8**%u,align 8
%w=call fastcc i8*%s(i8*inreg%v,i8*inreg%o)
%x=getelementptr inbounds i8,i8*%w,i64 16
%y=bitcast i8*%x to i8*(i8*,i8*,i8*)**
%z=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%y,align 8
%A=bitcast i8*%w to i8**
%B=load i8*,i8**%A,align 8
store i8*%B,i8**%c,align 8
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%d,align 8
store i32 1,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32 8,i32*%H,align 4
%K=load i8*,i8**%c,align 8
%L=load i8*,i8**%d,align 8
%M=tail call fastcc i8*%z(i8*inreg%K,i8*inreg%L,i8*inreg%G)
ret i8*%M
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_389(i8*inreg%a)#2 gc"smlsharp"{
j:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%h,label%f
f:
call void@sml_check(i32 inreg%d)
%g=load i8*,i8**%b,align 8
br label%h
h:
%i=phi i8*[%g,%f],[%a,%j]
store i8*null,i8**%b,align 8
%k=call fastcc i8*@_SMLLN10TermFormat10FormatComb1_DE_227(i8*inreg%i)#0
store i8*%k,i8**%b,align 8
%l=call i8*@sml_alloc(i32 inreg 12)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177288,i32*%n,align 4
store i8*%l,i8**%c,align 8
%o=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%c,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_388 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_388 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_391(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=getelementptr inbounds i8,i8*%h,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
%m=getelementptr inbounds i8,i8*%l,i64 16
%n=bitcast i8*%m to i8*(i8*,i8*)**
%o=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%n,align 8
%p=bitcast i8*%l to i8**
%q=load i8*,i8**%p,align 8
store i8*%q,i8**%b,align 8
%r=bitcast i8*%h to i8**
%s=load i8*,i8**%r,align 8
%t=getelementptr inbounds i8,i8*%s,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%s to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
%A=tail call fastcc i8*%o(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_393(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=getelementptr inbounds i8,i8*%h,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
%m=getelementptr inbounds i8,i8*%l,i64 16
%n=bitcast i8*%m to i8*(i8*,i8*)**
%o=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%n,align 8
%p=bitcast i8*%l to i8**
%q=load i8*,i8**%p,align 8
store i8*%q,i8**%b,align 8
%r=bitcast i8*%h to i8**
%s=load i8*,i8**%r,align 8
%t=getelementptr inbounds i8,i8*%s,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%s to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
%A=tail call fastcc i8*%o(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_395(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%k,label%j
j:
call void@sml_check(i32 inreg%h)
br label%k
k:
%l=call fastcc i8*@_SMLLN10TermFormat10FormatComb1_DE_227(i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,i8*,i32}>,<{[4x i8],i32,i8*,i8*,i32}>*@U,i64 0,i32 2)to i8*))#0
store i8*%l,i8**%d,align 8
%m=call i8*@sml_alloc(i32 inreg 12)#0
%n=getelementptr inbounds i8,i8*%m,i64 -4
%o=bitcast i8*%n to i32*
store i32 1342177288,i32*%o,align 4
store i8*%m,i8**%f,align 8
%p=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%q=bitcast i8*%m to i8**
store i8*%p,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%m,i64 8
%s=bitcast i8*%r to i32*
store i32 1,i32*%s,align 4
%t=call i8*@sml_alloc(i32 inreg 28)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177304,i32*%v,align 4
%w=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_378 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%t,i64 16
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_378 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%t,i64 24
%D=bitcast i8*%C to i32*
store i32 -2147483647,i32*%D,align 4
%E=bitcast i8**%e to i8***
%F=load i8**,i8***%E,align 8
%G=load i8*,i8**%F,align 8
%H=getelementptr inbounds i8,i8*%G,i64 8
%I=bitcast i8*%H to i8**
%J=load i8*,i8**%I,align 8
%K=call fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_378(i8*inreg%w,i8*inreg%J)
%L=getelementptr inbounds i8,i8*%K,i64 16
%M=bitcast i8*%L to i8*(i8*,i8*)**
%N=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%M,align 8
%O=bitcast i8*%K to i8**
%P=load i8*,i8**%O,align 8
%Q=call fastcc i8*%N(i8*inreg%P,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@V,i64 0,i32 2)to i8*))
%R=getelementptr inbounds i8,i8*%Q,i64 16
%S=bitcast i8*%R to i8*(i8*,i8*)**
%T=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%S,align 8
%U=bitcast i8*%Q to i8**
%V=load i8*,i8**%U,align 8
%W=call fastcc i8*%T(i8*inreg%V,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,i32}>,<{[4x i8],i32,i8*,i32}>*@X,i64 0,i32 2)to i8*))
%X=getelementptr inbounds i8,i8*%W,i64 16
%Y=bitcast i8*%X to i8*(i8*,i8*)**
%Z=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%Y,align 8
%aa=bitcast i8*%W to i8**
%ab=load i8*,i8**%aa,align 8
%ac=call fastcc i8*%Z(i8*inreg%ab,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@Y,i64 0,i32 2)to i8*))
%ad=getelementptr inbounds i8,i8*%ac,i64 16
%ae=bitcast i8*%ad to i8*(i8*,i8*)**
%af=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ae,align 8
%ag=bitcast i8*%ac to i8**
%ah=load i8*,i8**%ag,align 8
store i8*%ah,i8**%f,align 8
%ai=load i8**,i8***%E,align 8
%aj=load i8*,i8**%ai,align 8
%ak=getelementptr inbounds i8,i8*%aj,i64 16
%al=bitcast i8*%ak to i8**
%am=load i8*,i8**%al,align 8
store i8*%am,i8**%d,align 8
%an=call i8*@sml_alloc(i32 inreg 20)#0
%ao=getelementptr inbounds i8,i8*%an,i64 -4
%ap=bitcast i8*%ao to i32*
store i32 1342177296,i32*%ap,align 4
store i8*%an,i8**%g,align 8
%aq=getelementptr inbounds i8,i8*%an,i64 4
%ar=bitcast i8*%aq to i32*
store i32 0,i32*%ar,align 1
%as=bitcast i8*%an to i32*
store i32 4,i32*%as,align 4
%at=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%au=getelementptr inbounds i8,i8*%an,i64 8
%av=bitcast i8*%au to i8**
store i8*%at,i8**%av,align 8
%aw=getelementptr inbounds i8,i8*%an,i64 16
%ax=bitcast i8*%aw to i32*
store i32 2,i32*%ax,align 4
%ay=call i8*@sml_alloc(i32 inreg 20)#0
%az=getelementptr inbounds i8,i8*%ay,i64 -4
%aA=bitcast i8*%az to i32*
store i32 1342177296,i32*%aA,align 4
store i8*%ay,i8**%d,align 8
%aB=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%aC=bitcast i8*%ay to i8**
store i8*%aB,i8**%aC,align 8
%aD=getelementptr inbounds i8,i8*%ay,i64 8
%aE=bitcast i8*%aD to i8**
store i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,i8*,i32}>,<{[4x i8],i32,i8*,i8*,i32}>*@bP,i64 0,i32 2)to i8*),i8**%aE,align 8
%aF=getelementptr inbounds i8,i8*%ay,i64 16
%aG=bitcast i8*%aF to i32*
store i32 3,i32*%aG,align 4
%aH=load i8*,i8**%e,align 8
%aI=getelementptr inbounds i8,i8*%aH,i64 8
%aJ=bitcast i8*%aI to i32*
%aK=load i32,i32*%aJ,align 4
%aL=getelementptr inbounds i8,i8*%aH,i64 12
%aM=bitcast i8*%aL to i32*
%aN=load i32,i32*%aM,align 4
%aO=call fastcc i8*@_SMLFN4List3mapE(i32 inreg%aK,i32 inreg%aN,i32 inreg 1,i32 inreg 8)
%aP=getelementptr inbounds i8,i8*%aO,i64 16
%aQ=bitcast i8*%aP to i8*(i8*,i8*)**
%aR=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aQ,align 8
%aS=bitcast i8*%aO to i8**
%aT=load i8*,i8**%aS,align 8
%aU=bitcast i8**%e to i8****
%aV=load i8***,i8****%aU,align 8
%aW=load i8**,i8***%aV,align 8
%aX=load i8*,i8**%aW,align 8
%aY=call fastcc i8*%aR(i8*inreg%aT,i8*inreg%aX)
%aZ=getelementptr inbounds i8,i8*%aY,i64 16
%a0=bitcast i8*%aZ to i8*(i8*,i8*)**
%a1=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a0,align 8
%a2=bitcast i8*%aY to i8**
%a3=load i8*,i8**%a2,align 8
%a4=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%a5=call fastcc i8*%a1(i8*inreg%a3,i8*inreg%a4)
%a6=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%a7=call fastcc i8*@_SMLLN10TermFormat11intersperseE_267(i8*inreg%a6,i8*inreg%a5)
%a8=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%a9=call fastcc i8*%af(i8*inreg%a8,i8*inreg%a7)
%ba=getelementptr inbounds i8,i8*%a9,i64 16
%bb=bitcast i8*%ba to i8*(i8*,i8*)**
%bc=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bb,align 8
%bd=bitcast i8*%a9 to i8**
%be=load i8*,i8**%bd,align 8
%bf=call fastcc i8*%bc(i8*inreg%be,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@Z,i64 0,i32 2)to i8*))
%bg=getelementptr inbounds i8,i8*%bf,i64 16
%bh=bitcast i8*%bg to i8*(i8*,i8*)**
%bi=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bh,align 8
%bj=bitcast i8*%bf to i8**
%bk=load i8*,i8**%bj,align 8
%bl=load i8**,i8***%E,align 8
store i8*null,i8**%e,align 8
%bm=load i8*,i8**%bl,align 8
%bn=getelementptr inbounds i8,i8*%bm,i64 24
%bo=bitcast i8*%bn to i8**
%bp=load i8*,i8**%bo,align 8
%bq=call fastcc i8*%bi(i8*inreg%bk,i8*inreg%bp)
%br=getelementptr inbounds i8,i8*%bq,i64 16
%bs=bitcast i8*%br to i8*(i8*,i8*)**
%bt=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bs,align 8
%bu=bitcast i8*%bq to i8**
%bv=load i8*,i8**%bu,align 8
%bw=call fastcc i8*%bt(i8*inreg%bv,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aa,i64 0,i32 2)to i8*))
%bx=getelementptr inbounds i8,i8*%bw,i64 16
%by=bitcast i8*%bx to i8*(i8*,i8*)**
%bz=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%by,align 8
%bA=bitcast i8*%bw to i8**
%bB=load i8*,i8**%bA,align 8
%bC=tail call fastcc i8*%bz(i8*inreg%bB,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@ab,i64 0,i32 2)to i8*))
ret i8*%bC
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_396(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_395 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_395 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat18formatEnclosedListE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_396 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatEnclosedListE_396 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_399(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_401(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_404(i8*inreg%a,i32 inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%n
k:
call void@sml_check(i32 inreg%g)
%l=bitcast i8**%c to i8***
%m=load i8**,i8***%l,align 8
br label%n
n:
%o=phi i8**[%m,%k],[%j,%i]
%p=load i8*,i8**%o,align 8
%q=getelementptr inbounds i8,i8*%p,i64 16
%r=bitcast i8*%q to i8*(i8*,i8*)**
%s=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%r,align 8
%t=bitcast i8*%p to i8**
%u=load i8*,i8**%t,align 8
store i8*%u,i8**%c,align 8
%v=call i8*@sml_alloc(i32 inreg 4)#0
%w=bitcast i8*%v to i32*
%x=getelementptr inbounds i8,i8*%v,i64 -4
%y=bitcast i8*%x to i32*
store i32 4,i32*%y,align 4
store i32%b,i32*%w,align 4
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%s(i8*inreg%z,i8*inreg%v)
%B=getelementptr inbounds i8,i8*%A,i64 16
%C=bitcast i8*%B to i8*(i8*,i8*,i8*,i8*,i8*)**
%D=load i8*(i8*,i8*,i8*,i8*,i8*)*,i8*(i8*,i8*,i8*,i8*,i8*)**%C,align 8
%E=bitcast i8*%A to i8**
%F=load i8*,i8**%E,align 8
store i8*%F,i8**%c,align 8
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i8*%G,i8**%d,align 8
store i32 1,i32*%H,align 4
%K=call i8*@sml_alloc(i32 inreg 4)#0
%L=bitcast i8*%K to i32*
%M=getelementptr inbounds i8,i8*%K,i64 -4
%N=bitcast i8*%M to i32*
store i32 4,i32*%N,align 4
store i8*%K,i8**%e,align 8
store i32 8,i32*%L,align 4
%O=call i8*@sml_alloc(i32 inreg 4)#0
%P=bitcast i8*%O to i32*
%Q=getelementptr inbounds i8,i8*%O,i64 -4
%R=bitcast i8*%Q to i32*
store i32 4,i32*%R,align 4
store i8*%O,i8**%f,align 8
store i32 1,i32*%P,align 4
%S=call i8*@sml_alloc(i32 inreg 4)#0
%T=bitcast i8*%S to i32*
%U=getelementptr inbounds i8,i8*%S,i64 -4
%V=bitcast i8*%U to i32*
store i32 4,i32*%V,align 4
store i32 8,i32*%T,align 4
%W=load i8*,i8**%c,align 8
%X=load i8*,i8**%d,align 8
%Y=load i8*,i8**%e,align 8
%Z=load i8*,i8**%f,align 8
%aa=call fastcc i8*%D(i8*inreg%W,i8*inreg%X,i8*inreg%Y,i8*inreg%Z,i8*inreg%S)
ret i8*%aa
}
define internal fastcc i8*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_405(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%m
i:
call void@sml_check(i32 inreg%e)
%j=load i8*,i8**%d,align 8
%k=bitcast i8**%c to i8***
%l=load i8**,i8***%k,align 8
br label%m
m:
%n=phi i8**[%l,%i],[%h,%g]
%o=phi i8*[%j,%i],[%b,%g]
store i8*null,i8**%d,align 8
%p=load i8*,i8**%n,align 8
%q=getelementptr inbounds i8,i8*%p,i64 16
%r=bitcast i8*%q to i8*(i8*,i8*)**
%s=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%r,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8**%n to i8***
%u=load i8**,i8***%t,align 8
%v=load i8*,i8**%u,align 8
%w=call fastcc i8*%s(i8*inreg%v,i8*inreg%o)
%x=getelementptr inbounds i8,i8*%w,i64 16
%y=bitcast i8*%x to i8*(i8*,i8*,i8*)**
%z=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%y,align 8
%A=bitcast i8*%w to i8**
%B=load i8*,i8**%A,align 8
store i8*%B,i8**%c,align 8
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%d,align 8
store i32 1,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32 8,i32*%H,align 4
%K=load i8*,i8**%c,align 8
%L=load i8*,i8**%d,align 8
%M=tail call fastcc i8*%z(i8*inreg%K,i8*inreg%L,i8*inreg%G)
ret i8*%M
}
define internal fastcc i8*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_406(i8*inreg%a)#2 gc"smlsharp"{
j:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%h,label%f
f:
call void@sml_check(i32 inreg%d)
%g=load i8*,i8**%b,align 8
br label%h
h:
%i=phi i8*[%g,%f],[%a,%j]
store i8*null,i8**%b,align 8
%k=call fastcc i8*@_SMLLN10TermFormat10FormatComb1_DE_227(i8*inreg%i)#0
store i8*%k,i8**%b,align 8
%l=call i8*@sml_alloc(i32 inreg 12)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177288,i32*%n,align 4
store i8*%l,i8**%c,align 8
%o=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%c,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_405 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_405 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_408(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%m
i:
call void@sml_check(i32 inreg%e)
%j=load i8*,i8**%d,align 8
%k=bitcast i8**%c to i8***
%l=load i8**,i8***%k,align 8
br label%m
m:
%n=phi i8**[%l,%i],[%h,%g]
%o=phi i8*[%j,%i],[%b,%g]
store i8*null,i8**%d,align 8
%p=load i8*,i8**%n,align 8
%q=getelementptr inbounds i8,i8*%p,i64 16
%r=bitcast i8*%q to i8*(i8*,i8*)**
%s=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%r,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8**%n to i8***
%u=load i8**,i8***%t,align 8
%v=load i8*,i8**%u,align 8
%w=call fastcc i8*%s(i8*inreg%v,i8*inreg%o)
%x=getelementptr inbounds i8,i8*%w,i64 16
%y=bitcast i8*%x to i8*(i8*,i8*,i8*)**
%z=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%y,align 8
%A=bitcast i8*%w to i8**
%B=load i8*,i8**%A,align 8
store i8*%B,i8**%c,align 8
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%d,align 8
store i32 1,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32 8,i32*%H,align 4
%K=load i8*,i8**%c,align 8
%L=load i8*,i8**%d,align 8
%M=tail call fastcc i8*%z(i8*inreg%K,i8*inreg%L,i8*inreg%G)
ret i8*%M
}
define internal fastcc i8*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_409(i8*inreg%a)#2 gc"smlsharp"{
j:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%h,label%f
f:
call void@sml_check(i32 inreg%d)
%g=load i8*,i8**%b,align 8
br label%h
h:
%i=phi i8*[%g,%f],[%a,%j]
store i8*null,i8**%b,align 8
%k=call fastcc i8*@_SMLLN10TermFormat10FormatComb1_DE_227(i8*inreg%i)#0
store i8*%k,i8**%b,align 8
%l=call i8*@sml_alloc(i32 inreg 12)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177288,i32*%n,align 4
store i8*%l,i8**%c,align 8
%o=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%c,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_408 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_408 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_411(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%m
i:
call void@sml_check(i32 inreg%e)
%j=load i8*,i8**%d,align 8
%k=bitcast i8**%c to i8***
%l=load i8**,i8***%k,align 8
br label%m
m:
%n=phi i8**[%l,%i],[%h,%g]
%o=phi i8*[%j,%i],[%b,%g]
store i8*null,i8**%d,align 8
%p=load i8*,i8**%n,align 8
%q=getelementptr inbounds i8,i8*%p,i64 16
%r=bitcast i8*%q to i8*(i8*,i8*)**
%s=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%r,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8**%n to i8***
%u=load i8**,i8***%t,align 8
%v=load i8*,i8**%u,align 8
%w=call fastcc i8*%s(i8*inreg%v,i8*inreg%o)
%x=getelementptr inbounds i8,i8*%w,i64 16
%y=bitcast i8*%x to i8*(i8*,i8*,i8*)**
%z=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%y,align 8
%A=bitcast i8*%w to i8**
%B=load i8*,i8**%A,align 8
store i8*%B,i8**%c,align 8
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%d,align 8
store i32 1,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32 8,i32*%H,align 4
%K=load i8*,i8**%c,align 8
%L=load i8*,i8**%d,align 8
%M=tail call fastcc i8*%z(i8*inreg%K,i8*inreg%L,i8*inreg%G)
ret i8*%M
}
define internal fastcc i8*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_412(i8*inreg%a)#2 gc"smlsharp"{
j:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%h,label%f
f:
call void@sml_check(i32 inreg%d)
%g=load i8*,i8**%b,align 8
br label%h
h:
%i=phi i8*[%g,%f],[%a,%j]
store i8*null,i8**%b,align 8
%k=call fastcc i8*@_SMLLN10TermFormat10FormatComb1_DE_227(i8*inreg%i)#0
store i8*%k,i8**%b,align 8
%l=call i8*@sml_alloc(i32 inreg 12)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177288,i32*%n,align 4
store i8*%l,i8**%c,align 8
%o=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%c,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_411 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_411 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_414(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=getelementptr inbounds i8,i8*%h,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
%m=getelementptr inbounds i8,i8*%l,i64 16
%n=bitcast i8*%m to i8*(i8*,i8*)**
%o=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%n,align 8
%p=bitcast i8*%l to i8**
%q=load i8*,i8**%p,align 8
store i8*%q,i8**%b,align 8
%r=bitcast i8*%h to i8**
%s=load i8*,i8**%r,align 8
%t=getelementptr inbounds i8,i8*%s,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%s to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
%A=tail call fastcc i8*%o(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define internal fastcc i8*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_416(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=getelementptr inbounds i8,i8*%h,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
%m=getelementptr inbounds i8,i8*%l,i64 16
%n=bitcast i8*%m to i8*(i8*,i8*)**
%o=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%n,align 8
%p=bitcast i8*%l to i8**
%q=load i8*,i8**%p,align 8
store i8*%q,i8**%b,align 8
%r=bitcast i8*%h to i8**
%s=load i8*,i8**%r,align 8
%t=getelementptr inbounds i8,i8*%s,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%s to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
%A=tail call fastcc i8*%o(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define internal fastcc i8*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_418(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
n:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%f,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%l,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%f,align 8
br label%l
l:
%m=phi i8*[%k,%j],[%a,%n]
%o=getelementptr inbounds i8,i8*%m,i64 12
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=add i32%q,7
%s=sub i32 0,%q
%t=and i32%r,%s
%u=call fastcc i8*@_SMLLN10TermFormat10FormatComb5nest__E_265(i32 inreg 1,i32 inreg 8)
%v=getelementptr inbounds i8,i8*%u,i64 16
%w=bitcast i8*%v to i8*(i8*,i8*)**
%x=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%w,align 8
%y=bitcast i8*%u to i8**
%z=load i8*,i8**%y,align 8
%A=call fastcc i8*%x(i8*inreg%z,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,i8*,i32}>,<{[4x i8],i32,i8*,i8*,i32}>*@af,i64 0,i32 2)to i8*))
store i8*%A,i8**%d,align 8
%B=call i8*@sml_alloc(i32 inreg 12)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177288,i32*%D,align 4
store i8*%B,i8**%e,align 8
%E=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%F=bitcast i8*%B to i8**
store i8*%E,i8**%F,align 8
%G=getelementptr inbounds i8,i8*%B,i64 8
%H=bitcast i8*%G to i32*
store i32 1,i32*%H,align 4
%I=call i8*@sml_alloc(i32 inreg 28)#0
%J=getelementptr inbounds i8,i8*%I,i64 -4
%K=bitcast i8*%J to i32*
store i32 1342177304,i32*%K,align 4
%L=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%M=bitcast i8*%I to i8**
store i8*%L,i8**%M,align 8
%N=getelementptr inbounds i8,i8*%I,i64 8
%O=bitcast i8*%N to void(...)**
store void(...)*bitcast(i8*(i8*,i32)*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_404 to void(...)*),void(...)**%O,align 8
%P=getelementptr inbounds i8,i8*%I,i64 16
%Q=bitcast i8*%P to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_1062 to void(...)*),void(...)**%Q,align 8
%R=getelementptr inbounds i8,i8*%I,i64 24
%S=bitcast i8*%R to i32*
store i32 -2147483647,i32*%S,align 4
store i8*%L,i8**%d,align 8
%T=call i8*@sml_alloc(i32 inreg 4)#0
%U=bitcast i8*%T to i32*
%V=getelementptr inbounds i8,i8*%T,i64 -4
%W=bitcast i8*%V to i32*
store i32 4,i32*%W,align 4
store i32 1,i32*%U,align 4
%X=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%Y=call fastcc i8*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_404(i8*inreg%X,i32 inreg 1)
%Z=getelementptr inbounds i8,i8*%Y,i64 16
%aa=bitcast i8*%Z to i8*(i8*,i8*)**
%ab=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aa,align 8
%ac=bitcast i8*%Y to i8**
%ad=load i8*,i8**%ac,align 8
%ae=call fastcc i8*%ab(i8*inreg%ad,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@ag,i64 0,i32 2)to i8*))
%af=getelementptr inbounds i8,i8*%ae,i64 16
%ag=bitcast i8*%af to i8*(i8*,i8*)**
%ah=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ag,align 8
%ai=bitcast i8*%ae to i8**
%aj=load i8*,i8**%ai,align 8
store i8*%aj,i8**%g,align 8
%ak=bitcast i8**%c to i8***
%al=load i8**,i8***%ak,align 8
%am=load i8*,i8**%al,align 8
%an=getelementptr inbounds i8,i8*%am,i64 -4
%ao=bitcast i8*%an to i32*
%ap=load i32,i32*%ao,align 4
%aq=and i32%ap,268435455
%ar=add nsw i32%aq,-1
store i8*%am,i8**%d,align 8
%as=call i8*@sml_alloc(i32 inreg 20)#0
%at=getelementptr inbounds i8,i8*%as,i64 -4
%au=bitcast i8*%at to i32*
store i32 1342177296,i32*%au,align 4
store i8*%as,i8**%e,align 8
%av=getelementptr inbounds i8,i8*%as,i64 4
%aw=bitcast i8*%av to i32*
store i32 0,i32*%aw,align 1
%ax=bitcast i8*%as to i32*
store i32%ar,i32*%ax,align 4
%ay=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%az=getelementptr inbounds i8,i8*%as,i64 8
%aA=bitcast i8*%az to i8**
store i8*%ay,i8**%aA,align 8
%aB=getelementptr inbounds i8,i8*%as,i64 16
%aC=bitcast i8*%aB to i32*
store i32 2,i32*%aC,align 4
%aD=call i8*@sml_alloc(i32 inreg 20)#0
%aE=getelementptr inbounds i8,i8*%aD,i64 -4
%aF=bitcast i8*%aE to i32*
store i32 1342177296,i32*%aF,align 4
store i8*%aD,i8**%d,align 8
%aG=getelementptr inbounds i8,i8*%aD,i64 4
%aH=bitcast i8*%aG to i32*
store i32 0,i32*%aH,align 1
%aI=bitcast i8*%aD to i32*
store i32 6,i32*%aI,align 4
%aJ=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aK=getelementptr inbounds i8,i8*%aD,i64 8
%aL=bitcast i8*%aK to i8**
store i8*%aJ,i8**%aL,align 8
%aM=getelementptr inbounds i8,i8*%aD,i64 16
%aN=bitcast i8*%aM to i32*
store i32 2,i32*%aN,align 4
%aO=call i8*@sml_alloc(i32 inreg 20)#0
%aP=getelementptr inbounds i8,i8*%aO,i64 -4
%aQ=bitcast i8*%aP to i32*
store i32 1342177296,i32*%aQ,align 4
%aR=load i8*,i8**%d,align 8
%aS=bitcast i8*%aO to i8**
store i8*%aR,i8**%aS,align 8
%aT=getelementptr inbounds i8,i8*%aO,i64 8
%aU=bitcast i8*%aT to i8**
store i8*null,i8**%aU,align 8
%aV=getelementptr inbounds i8,i8*%aO,i64 16
%aW=bitcast i8*%aV to i32*
store i32 3,i32*%aW,align 4
store i8*null,i8**%e,align 8
%aX=call i8*@sml_alloc(i32 inreg 20)#0
%aY=getelementptr inbounds i8,i8*%aX,i64 -4
%aZ=bitcast i8*%aY to i32*
store i32 1342177296,i32*%aZ,align 4
%a0=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%a1=bitcast i8*%aX to i8**
store i8*%a0,i8**%a1,align 8
%a2=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%a3=getelementptr inbounds i8,i8*%aX,i64 8
%a4=bitcast i8*%a3 to i8**
store i8*%a2,i8**%a4,align 8
%a5=getelementptr inbounds i8,i8*%aX,i64 16
%a6=bitcast i8*%a5 to i32*
store i32 3,i32*%a6,align 4
%a7=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%a8=call fastcc i8*%ah(i8*inreg%a7,i8*inreg%aX)
%a9=getelementptr inbounds i8,i8*%a8,i64 16
%ba=bitcast i8*%a9 to i8*(i8*,i8*)**
%bb=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ba,align 8
%bc=bitcast i8*%a8 to i8**
%bd=load i8*,i8**%bc,align 8
%be=call fastcc i8*%bb(i8*inreg%bd,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@ah,i64 0,i32 2)to i8*))
%bf=getelementptr inbounds i8,i8*%be,i64 16
%bg=bitcast i8*%bf to i8*(i8*,i8*)**
%bh=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bg,align 8
%bi=bitcast i8*%be to i8**
%bj=load i8*,i8**%bi,align 8
%bk=bitcast i8**%f to i8***
%bl=load i8**,i8***%bk,align 8
%bm=load i8*,i8**%bl,align 8
%bn=getelementptr inbounds i8,i8*%bm,i64 16
%bo=bitcast i8*%bn to i8**
%bp=load i8*,i8**%bo,align 8
%bq=call fastcc i8*%bh(i8*inreg%bj,i8*inreg%bp)
%br=getelementptr inbounds i8,i8*%bq,i64 16
%bs=bitcast i8*%br to i8*(i8*,i8*)**
%bt=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bs,align 8
%bu=bitcast i8*%bq to i8**
%bv=load i8*,i8**%bu,align 8
%bw=call fastcc i8*%bt(i8*inreg%bv,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@ai,i64 0,i32 2)to i8*))
%bx=getelementptr inbounds i8,i8*%bw,i64 16
%by=bitcast i8*%bx to i8*(i8*,i8*)**
%bz=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%by,align 8
%bA=bitcast i8*%bw to i8**
%bB=load i8*,i8**%bA,align 8
store i8*%bB,i8**%e,align 8
%bC=bitcast i8**%f to i8****
%bD=load i8***,i8****%bC,align 8
%bE=load i8**,i8***%bD,align 8
%bF=load i8*,i8**%bE,align 8
%bG=getelementptr inbounds i8,i8*%bF,i64 16
%bH=bitcast i8*%bG to i8*(i8*,i8*)**
%bI=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bH,align 8
%bJ=bitcast i8*%bF to i8**
%bK=load i8*,i8**%bJ,align 8
store i8*%bK,i8**%d,align 8
%bL=getelementptr inbounds i8**,i8***%bD,i64 1
%bM=bitcast i8***%bL to i32*
%bN=load i32,i32*%bM,align 4
%bO=icmp eq i32%bN,0
store i8*null,i8**%f,align 8
br i1%bO,label%bV,label%bP
bP:
%bQ=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bR=sext i32%t to i64
%bS=getelementptr inbounds i8,i8*%bQ,i64%bR
%bT=bitcast i8*%bS to i8**
%bU=load i8*,i8**%bT,align 8
br label%b7
bV:
%bW=bitcast i8***%bD to i8*
%bX=getelementptr inbounds i8,i8*%bW,i64 12
%bY=bitcast i8*%bX to i32*
%bZ=load i32,i32*%bY,align 4
%b0=call i8*@sml_alloc(i32 inreg%bZ)#0
%b1=getelementptr inbounds i8,i8*%b0,i64 -4
%b2=bitcast i8*%b1 to i32*
store i32%bZ,i32*%b2,align 4
%b3=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%b4=sext i32%t to i64
%b5=getelementptr inbounds i8,i8*%b3,i64%b4
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%b0,i8*%b5,i32%bZ,i1 false)
%b6=load i8*,i8**%d,align 8
br label%b7
b7:
%b8=phi i8*[%bK,%bP],[%b6,%bV]
%b9=phi i8*[%bU,%bP],[%b0,%bV]
store i8*null,i8**%d,align 8
%ca=call fastcc i8*%bI(i8*inreg%b8,i8*inreg%b9)
%cb=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%cc=call fastcc i8*%bz(i8*inreg%cb,i8*inreg%ca)
%cd=getelementptr inbounds i8,i8*%cc,i64 16
%ce=bitcast i8*%cd to i8*(i8*,i8*)**
%cf=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ce,align 8
%cg=bitcast i8*%cc to i8**
%ch=load i8*,i8**%cg,align 8
%ci=call fastcc i8*%cf(i8*inreg%ch,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aj,i64 0,i32 2)to i8*))
%cj=getelementptr inbounds i8,i8*%ci,i64 16
%ck=bitcast i8*%cj to i8*(i8*,i8*)**
%cl=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ck,align 8
%cm=bitcast i8*%ci to i8**
%cn=load i8*,i8**%cm,align 8
%co=tail call fastcc i8*%cl(i8*inreg%cn,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@ak,i64 0,i32 2)to i8*))
ret i8*%co
}
define internal fastcc i8*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_419(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%e,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%k,label%n
k:
%l=bitcast i8*%a to i8**
%m=bitcast i8**%d to i8***
br label%q
n:
call void@sml_check(i32 inreg%i)
%o=bitcast i8**%d to i8***
%p=load i8**,i8***%o,align 8
br label%q
q:
%r=phi i8***[%m,%k],[%o,%n]
%s=phi i8**[%l,%k],[%p,%n]
%t=load i8*,i8**%s,align 8
%u=getelementptr inbounds i8,i8*%t,i64 8
%v=bitcast i8*%u to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%c,align 8
%x=call fastcc i8*@_SMLFN10TermFormat14formatDeclListE(i32 inreg 1,i32 inreg 8)
%y=getelementptr inbounds i8,i8*%x,i64 16
%z=bitcast i8*%y to i8*(i8*,i8*)**
%A=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%z,align 8
%B=bitcast i8*%x to i8**
%C=load i8*,i8**%B,align 8
store i8*%C,i8**%g,align 8
%D=load i8**,i8***%r,align 8
%E=load i8*,i8**%D,align 8
store i8*%E,i8**%f,align 8
%F=bitcast i8**%D to i8*
%G=getelementptr inbounds i8*,i8**%D,i64 1
%H=bitcast i8**%G to i32*
%I=load i32,i32*%H,align 4
%J=getelementptr inbounds i8,i8*%F,i64 12
%K=bitcast i8*%J to i32*
%L=load i32,i32*%K,align 4
%M=call i8*@sml_alloc(i32 inreg 20)#0
%N=getelementptr inbounds i8,i8*%M,i64 -4
%O=bitcast i8*%N to i32*
store i32 1342177296,i32*%O,align 4
store i8*%M,i8**%h,align 8
%P=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%Q=bitcast i8*%M to i8**
store i8*%P,i8**%Q,align 8
%R=getelementptr inbounds i8,i8*%M,i64 8
%S=bitcast i8*%R to i32*
store i32%I,i32*%S,align 4
%T=getelementptr inbounds i8,i8*%M,i64 12
%U=bitcast i8*%T to i32*
store i32%L,i32*%U,align 4
%V=getelementptr inbounds i8,i8*%M,i64 16
%W=bitcast i8*%V to i32*
store i32 1,i32*%W,align 4
%X=call i8*@sml_alloc(i32 inreg 28)#0
%Y=getelementptr inbounds i8,i8*%X,i64 -4
%Z=bitcast i8*%Y to i32*
store i32 1342177304,i32*%Z,align 4
store i8*%X,i8**%f,align 8
%aa=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%ab=bitcast i8*%X to i8**
store i8*%aa,i8**%ab,align 8
%ac=getelementptr inbounds i8,i8*%X,i64 8
%ad=bitcast i8*%ac to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_418 to void(...)*),void(...)**%ad,align 8
%ae=getelementptr inbounds i8,i8*%X,i64 16
%af=bitcast i8*%ae to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_418 to void(...)*),void(...)**%af,align 8
%ag=getelementptr inbounds i8,i8*%X,i64 24
%ah=bitcast i8*%ag to i32*
store i32 -2147483647,i32*%ah,align 4
%ai=call i8*@sml_alloc(i32 inreg 28)#0
%aj=getelementptr inbounds i8,i8*%ai,i64 -4
%ak=bitcast i8*%aj to i32*
store i32 1342177304,i32*%ak,align 4
%al=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%am=bitcast i8*%ai to i8**
store i8*%al,i8**%am,align 8
%an=load i8*,i8**%c,align 8
%ao=getelementptr inbounds i8,i8*%ai,i64 8
%ap=bitcast i8*%ao to i8**
store i8*%an,i8**%ap,align 8
store i8*null,i8**%c,align 8
%aq=getelementptr inbounds i8,i8*%ai,i64 16
%ar=bitcast i8*%aq to i8**
store i8*%an,i8**%ar,align 8
%as=getelementptr inbounds i8,i8*%ai,i64 24
%at=bitcast i8*%as to i32*
store i32 7,i32*%at,align 4
%au=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%av=call fastcc i8*%A(i8*inreg%au,i8*inreg%ai)
%aw=getelementptr inbounds i8,i8*%av,i64 16
%ax=bitcast i8*%aw to i8*(i8*,i8*)**
%ay=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ax,align 8
%az=bitcast i8*%av to i8**
%aA=load i8*,i8**%az,align 8
store i8*%aA,i8**%c,align 8
%aB=load i8*,i8**%d,align 8
%aC=getelementptr inbounds i8,i8*%aB,i64 8
%aD=bitcast i8*%aC to i32*
%aE=load i32,i32*%aD,align 4
store i8*null,i8**%d,align 8
%aF=getelementptr inbounds i8,i8*%aB,i64 12
%aG=bitcast i8*%aF to i32*
%aH=load i32,i32*%aG,align 4
%aI=call fastcc i8*@_SMLFN4SEnv10listItemsiE(i32 inreg%aE,i32 inreg%aH)
%aJ=getelementptr inbounds i8,i8*%aI,i64 16
%aK=bitcast i8*%aJ to i8*(i8*,i8*)**
%aL=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aK,align 8
%aM=bitcast i8*%aI to i8**
%aN=load i8*,i8**%aM,align 8
%aO=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aP=call fastcc i8*%aL(i8*inreg%aN,i8*inreg%aO)
%aQ=load i8*,i8**%c,align 8
%aR=tail call fastcc i8*%ay(i8*inreg%aQ,i8*inreg%aP)
ret i8*%aR
}
define internal fastcc i8*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_420(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_419 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_419 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat23formatEnclosedSEnvPlainE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_420 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_420 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_423(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_425(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_428(i8*inreg%a,i32 inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%n
k:
call void@sml_check(i32 inreg%g)
%l=bitcast i8**%c to i8***
%m=load i8**,i8***%l,align 8
br label%n
n:
%o=phi i8**[%m,%k],[%j,%i]
%p=load i8*,i8**%o,align 8
%q=getelementptr inbounds i8,i8*%p,i64 16
%r=bitcast i8*%q to i8*(i8*,i8*)**
%s=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%r,align 8
%t=bitcast i8*%p to i8**
%u=load i8*,i8**%t,align 8
store i8*%u,i8**%c,align 8
%v=call i8*@sml_alloc(i32 inreg 4)#0
%w=bitcast i8*%v to i32*
%x=getelementptr inbounds i8,i8*%v,i64 -4
%y=bitcast i8*%x to i32*
store i32 4,i32*%y,align 4
store i32%b,i32*%w,align 4
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%s(i8*inreg%z,i8*inreg%v)
%B=getelementptr inbounds i8,i8*%A,i64 16
%C=bitcast i8*%B to i8*(i8*,i8*,i8*,i8*,i8*)**
%D=load i8*(i8*,i8*,i8*,i8*,i8*)*,i8*(i8*,i8*,i8*,i8*,i8*)**%C,align 8
%E=bitcast i8*%A to i8**
%F=load i8*,i8**%E,align 8
store i8*%F,i8**%c,align 8
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i8*%G,i8**%d,align 8
store i32 1,i32*%H,align 4
%K=call i8*@sml_alloc(i32 inreg 4)#0
%L=bitcast i8*%K to i32*
%M=getelementptr inbounds i8,i8*%K,i64 -4
%N=bitcast i8*%M to i32*
store i32 4,i32*%N,align 4
store i8*%K,i8**%e,align 8
store i32 8,i32*%L,align 4
%O=call i8*@sml_alloc(i32 inreg 4)#0
%P=bitcast i8*%O to i32*
%Q=getelementptr inbounds i8,i8*%O,i64 -4
%R=bitcast i8*%Q to i32*
store i32 4,i32*%R,align 4
store i8*%O,i8**%f,align 8
store i32 1,i32*%P,align 4
%S=call i8*@sml_alloc(i32 inreg 4)#0
%T=bitcast i8*%S to i32*
%U=getelementptr inbounds i8,i8*%S,i64 -4
%V=bitcast i8*%U to i32*
store i32 4,i32*%V,align 4
store i32 8,i32*%T,align 4
%W=load i8*,i8**%c,align 8
%X=load i8*,i8**%d,align 8
%Y=load i8*,i8**%e,align 8
%Z=load i8*,i8**%f,align 8
%aa=call fastcc i8*%D(i8*inreg%W,i8*inreg%X,i8*inreg%Y,i8*inreg%Z,i8*inreg%S)
ret i8*%aa
}
define internal fastcc i8*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_429(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%m
i:
call void@sml_check(i32 inreg%e)
%j=load i8*,i8**%d,align 8
%k=bitcast i8**%c to i8***
%l=load i8**,i8***%k,align 8
br label%m
m:
%n=phi i8**[%l,%i],[%h,%g]
%o=phi i8*[%j,%i],[%b,%g]
store i8*null,i8**%d,align 8
%p=load i8*,i8**%n,align 8
%q=getelementptr inbounds i8,i8*%p,i64 16
%r=bitcast i8*%q to i8*(i8*,i8*)**
%s=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%r,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8**%n to i8***
%u=load i8**,i8***%t,align 8
%v=load i8*,i8**%u,align 8
%w=call fastcc i8*%s(i8*inreg%v,i8*inreg%o)
%x=getelementptr inbounds i8,i8*%w,i64 16
%y=bitcast i8*%x to i8*(i8*,i8*,i8*)**
%z=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%y,align 8
%A=bitcast i8*%w to i8**
%B=load i8*,i8**%A,align 8
store i8*%B,i8**%c,align 8
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%d,align 8
store i32 1,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32 8,i32*%H,align 4
%K=load i8*,i8**%c,align 8
%L=load i8*,i8**%d,align 8
%M=tail call fastcc i8*%z(i8*inreg%K,i8*inreg%L,i8*inreg%G)
ret i8*%M
}
define internal fastcc i8*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_430(i8*inreg%a)#2 gc"smlsharp"{
j:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%h,label%f
f:
call void@sml_check(i32 inreg%d)
%g=load i8*,i8**%b,align 8
br label%h
h:
%i=phi i8*[%g,%f],[%a,%j]
store i8*null,i8**%b,align 8
%k=call fastcc i8*@_SMLLN10TermFormat10FormatComb1_DE_227(i8*inreg%i)#0
store i8*%k,i8**%b,align 8
%l=call i8*@sml_alloc(i32 inreg 12)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177288,i32*%n,align 4
store i8*%l,i8**%c,align 8
%o=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%c,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_429 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_429 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_432(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%m
i:
call void@sml_check(i32 inreg%e)
%j=load i8*,i8**%d,align 8
%k=bitcast i8**%c to i8***
%l=load i8**,i8***%k,align 8
br label%m
m:
%n=phi i8**[%l,%i],[%h,%g]
%o=phi i8*[%j,%i],[%b,%g]
store i8*null,i8**%d,align 8
%p=load i8*,i8**%n,align 8
%q=getelementptr inbounds i8,i8*%p,i64 16
%r=bitcast i8*%q to i8*(i8*,i8*)**
%s=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%r,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8**%n to i8***
%u=load i8**,i8***%t,align 8
%v=load i8*,i8**%u,align 8
%w=call fastcc i8*%s(i8*inreg%v,i8*inreg%o)
%x=getelementptr inbounds i8,i8*%w,i64 16
%y=bitcast i8*%x to i8*(i8*,i8*,i8*)**
%z=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%y,align 8
%A=bitcast i8*%w to i8**
%B=load i8*,i8**%A,align 8
store i8*%B,i8**%c,align 8
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%d,align 8
store i32 1,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32 8,i32*%H,align 4
%K=load i8*,i8**%c,align 8
%L=load i8*,i8**%d,align 8
%M=tail call fastcc i8*%z(i8*inreg%K,i8*inreg%L,i8*inreg%G)
ret i8*%M
}
define internal fastcc i8*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_433(i8*inreg%a)#2 gc"smlsharp"{
j:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%h,label%f
f:
call void@sml_check(i32 inreg%d)
%g=load i8*,i8**%b,align 8
br label%h
h:
%i=phi i8*[%g,%f],[%a,%j]
store i8*null,i8**%b,align 8
%k=call fastcc i8*@_SMLLN10TermFormat10FormatComb1_DE_227(i8*inreg%i)#0
store i8*%k,i8**%b,align 8
%l=call i8*@sml_alloc(i32 inreg 12)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177288,i32*%n,align 4
store i8*%l,i8**%c,align 8
%o=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%c,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_432 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_432 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_435(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%m
i:
call void@sml_check(i32 inreg%e)
%j=load i8*,i8**%d,align 8
%k=bitcast i8**%c to i8***
%l=load i8**,i8***%k,align 8
br label%m
m:
%n=phi i8**[%l,%i],[%h,%g]
%o=phi i8*[%j,%i],[%b,%g]
store i8*null,i8**%d,align 8
%p=load i8*,i8**%n,align 8
%q=getelementptr inbounds i8,i8*%p,i64 16
%r=bitcast i8*%q to i8*(i8*,i8*)**
%s=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%r,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8**%n to i8***
%u=load i8**,i8***%t,align 8
%v=load i8*,i8**%u,align 8
%w=call fastcc i8*%s(i8*inreg%v,i8*inreg%o)
%x=getelementptr inbounds i8,i8*%w,i64 16
%y=bitcast i8*%x to i8*(i8*,i8*,i8*)**
%z=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%y,align 8
%A=bitcast i8*%w to i8**
%B=load i8*,i8**%A,align 8
store i8*%B,i8**%c,align 8
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%d,align 8
store i32 1,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32 8,i32*%H,align 4
%K=load i8*,i8**%c,align 8
%L=load i8*,i8**%d,align 8
%M=tail call fastcc i8*%z(i8*inreg%K,i8*inreg%L,i8*inreg%G)
ret i8*%M
}
define internal fastcc i8*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_436(i8*inreg%a)#2 gc"smlsharp"{
j:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%h,label%f
f:
call void@sml_check(i32 inreg%d)
%g=load i8*,i8**%b,align 8
br label%h
h:
%i=phi i8*[%g,%f],[%a,%j]
store i8*null,i8**%b,align 8
%k=call fastcc i8*@_SMLLN10TermFormat10FormatComb1_DE_227(i8*inreg%i)#0
store i8*%k,i8**%b,align 8
%l=call i8*@sml_alloc(i32 inreg 12)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177288,i32*%n,align 4
store i8*%l,i8**%c,align 8
%o=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%c,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_435 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_435 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_438(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=getelementptr inbounds i8,i8*%h,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
%m=getelementptr inbounds i8,i8*%l,i64 16
%n=bitcast i8*%m to i8*(i8*,i8*)**
%o=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%n,align 8
%p=bitcast i8*%l to i8**
%q=load i8*,i8**%p,align 8
store i8*%q,i8**%b,align 8
%r=bitcast i8*%h to i8**
%s=load i8*,i8**%r,align 8
%t=getelementptr inbounds i8,i8*%s,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%s to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
%A=tail call fastcc i8*%o(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define internal fastcc i8*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_440(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=getelementptr inbounds i8,i8*%h,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
%m=getelementptr inbounds i8,i8*%l,i64 16
%n=bitcast i8*%m to i8*(i8*,i8*)**
%o=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%n,align 8
%p=bitcast i8*%l to i8**
%q=load i8*,i8**%p,align 8
store i8*%q,i8**%b,align 8
%r=bitcast i8*%h to i8**
%s=load i8*,i8**%r,align 8
%t=getelementptr inbounds i8,i8*%s,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%s to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
%A=tail call fastcc i8*%o(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define internal fastcc i8*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_442(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
m:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%k,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%e,align 8
br label%k
k:
%l=phi i8*[%j,%i],[%a,%m]
%n=getelementptr inbounds i8,i8*%l,i64 12
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=add i32%p,7
%r=sub i32 0,%p
%s=and i32%q,%r
%t=call fastcc i8*@_SMLLN10TermFormat10FormatComb5nest__E_265(i32 inreg 1,i32 inreg 8)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=call fastcc i8*%w(i8*inreg%y,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,i8*,i32}>,<{[4x i8],i32,i8*,i8*,i32}>*@ao,i64 0,i32 2)to i8*))
store i8*%z,i8**%d,align 8
%A=call i8*@sml_alloc(i32 inreg 12)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177288,i32*%C,align 4
store i8*%A,i8**%f,align 8
%D=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%E=bitcast i8*%A to i8**
store i8*%D,i8**%E,align 8
%F=getelementptr inbounds i8,i8*%A,i64 8
%G=bitcast i8*%F to i32*
store i32 1,i32*%G,align 4
%H=call i8*@sml_alloc(i32 inreg 28)#0
%I=getelementptr inbounds i8,i8*%H,i64 -4
%J=bitcast i8*%I to i32*
store i32 1342177304,i32*%J,align 4
%K=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%L=bitcast i8*%H to i8**
store i8*%K,i8**%L,align 8
%M=getelementptr inbounds i8,i8*%H,i64 8
%N=bitcast i8*%M to void(...)**
store void(...)*bitcast(i8*(i8*,i32)*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_428 to void(...)*),void(...)**%N,align 8
%O=getelementptr inbounds i8,i8*%H,i64 16
%P=bitcast i8*%O to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_1071 to void(...)*),void(...)**%P,align 8
%Q=getelementptr inbounds i8,i8*%H,i64 24
%R=bitcast i8*%Q to i32*
store i32 -2147483647,i32*%R,align 4
store i8*%K,i8**%d,align 8
%S=call i8*@sml_alloc(i32 inreg 4)#0
%T=bitcast i8*%S to i32*
%U=getelementptr inbounds i8,i8*%S,i64 -4
%V=bitcast i8*%U to i32*
store i32 4,i32*%V,align 4
store i32 1,i32*%T,align 4
%W=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%X=call fastcc i8*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_428(i8*inreg%W,i32 inreg 1)
%Y=getelementptr inbounds i8,i8*%X,i64 16
%Z=bitcast i8*%Y to i8*(i8*,i8*)**
%aa=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%Z,align 8
%ab=bitcast i8*%X to i8**
%ac=load i8*,i8**%ab,align 8
%ad=call fastcc i8*%aa(i8*inreg%ac,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@ap,i64 0,i32 2)to i8*))
%ae=getelementptr inbounds i8,i8*%ad,i64 16
%af=bitcast i8*%ae to i8*(i8*,i8*)**
%ag=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%af,align 8
%ah=bitcast i8*%ad to i8**
%ai=load i8*,i8**%ah,align 8
store i8*%ai,i8**%d,align 8
%aj=bitcast i8**%c to i8***
%ak=load i8**,i8***%aj,align 8
%al=load i8*,i8**%ak,align 8
%am=call fastcc i8*@_SMLFN6Symbol13format__symbolE(i8*inreg%al)
%an=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ao=call fastcc i8*%ag(i8*inreg%an,i8*inreg%am)
%ap=getelementptr inbounds i8,i8*%ao,i64 16
%aq=bitcast i8*%ap to i8*(i8*,i8*)**
%ar=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aq,align 8
%as=bitcast i8*%ao to i8**
%at=load i8*,i8**%as,align 8
%au=call fastcc i8*%ar(i8*inreg%at,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aq,i64 0,i32 2)to i8*))
%av=getelementptr inbounds i8,i8*%au,i64 16
%aw=bitcast i8*%av to i8*(i8*,i8*)**
%ax=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aw,align 8
%ay=bitcast i8*%au to i8**
%az=load i8*,i8**%ay,align 8
%aA=bitcast i8**%e to i8***
%aB=load i8**,i8***%aA,align 8
%aC=load i8*,i8**%aB,align 8
%aD=getelementptr inbounds i8,i8*%aC,i64 16
%aE=bitcast i8*%aD to i8**
%aF=load i8*,i8**%aE,align 8
%aG=call fastcc i8*%ax(i8*inreg%az,i8*inreg%aF)
%aH=getelementptr inbounds i8,i8*%aG,i64 16
%aI=bitcast i8*%aH to i8*(i8*,i8*)**
%aJ=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aI,align 8
%aK=bitcast i8*%aG to i8**
%aL=load i8*,i8**%aK,align 8
%aM=call fastcc i8*%aJ(i8*inreg%aL,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@ar,i64 0,i32 2)to i8*))
%aN=getelementptr inbounds i8,i8*%aM,i64 16
%aO=bitcast i8*%aN to i8*(i8*,i8*)**
%aP=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aO,align 8
%aQ=bitcast i8*%aM to i8**
%aR=load i8*,i8**%aQ,align 8
store i8*%aR,i8**%f,align 8
%aS=bitcast i8**%e to i8****
%aT=load i8***,i8****%aS,align 8
%aU=load i8**,i8***%aT,align 8
%aV=load i8*,i8**%aU,align 8
%aW=getelementptr inbounds i8,i8*%aV,i64 16
%aX=bitcast i8*%aW to i8*(i8*,i8*)**
%aY=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aX,align 8
%aZ=bitcast i8*%aV to i8**
%a0=load i8*,i8**%aZ,align 8
store i8*%a0,i8**%d,align 8
%a1=getelementptr inbounds i8**,i8***%aT,i64 1
%a2=bitcast i8***%a1 to i32*
%a3=load i32,i32*%a2,align 4
%a4=icmp eq i32%a3,0
store i8*null,i8**%e,align 8
br i1%a4,label%bb,label%a5
a5:
%a6=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%a7=sext i32%s to i64
%a8=getelementptr inbounds i8,i8*%a6,i64%a7
%a9=bitcast i8*%a8 to i8**
%ba=load i8*,i8**%a9,align 8
br label%bn
bb:
%bc=bitcast i8***%aT to i8*
%bd=getelementptr inbounds i8,i8*%bc,i64 12
%be=bitcast i8*%bd to i32*
%bf=load i32,i32*%be,align 4
%bg=call i8*@sml_alloc(i32 inreg%bf)#0
%bh=getelementptr inbounds i8,i8*%bg,i64 -4
%bi=bitcast i8*%bh to i32*
store i32%bf,i32*%bi,align 4
%bj=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bk=sext i32%s to i64
%bl=getelementptr inbounds i8,i8*%bj,i64%bk
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bg,i8*%bl,i32%bf,i1 false)
%bm=load i8*,i8**%d,align 8
br label%bn
bn:
%bo=phi i8*[%a0,%a5],[%bm,%bb]
%bp=phi i8*[%ba,%a5],[%bg,%bb]
store i8*null,i8**%d,align 8
%bq=call fastcc i8*%aY(i8*inreg%bo,i8*inreg%bp)
%br=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%bs=call fastcc i8*%aP(i8*inreg%br,i8*inreg%bq)
%bt=getelementptr inbounds i8,i8*%bs,i64 16
%bu=bitcast i8*%bt to i8*(i8*,i8*)**
%bv=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bu,align 8
%bw=bitcast i8*%bs to i8**
%bx=load i8*,i8**%bw,align 8
%by=call fastcc i8*%bv(i8*inreg%bx,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@as,i64 0,i32 2)to i8*))
%bz=getelementptr inbounds i8,i8*%by,i64 16
%bA=bitcast i8*%bz to i8*(i8*,i8*)**
%bB=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bA,align 8
%bC=bitcast i8*%by to i8**
%bD=load i8*,i8**%bC,align 8
%bE=tail call fastcc i8*%bB(i8*inreg%bD,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@at,i64 0,i32 2)to i8*))
ret i8*%bE
}
define internal fastcc i8*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_443(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%e,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%k,label%n
k:
%l=bitcast i8*%a to i8**
%m=bitcast i8**%d to i8***
br label%q
n:
call void@sml_check(i32 inreg%i)
%o=bitcast i8**%d to i8***
%p=load i8**,i8***%o,align 8
br label%q
q:
%r=phi i8***[%m,%k],[%o,%n]
%s=phi i8**[%l,%k],[%p,%n]
%t=load i8*,i8**%s,align 8
%u=getelementptr inbounds i8,i8*%t,i64 8
%v=bitcast i8*%u to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%c,align 8
%x=call fastcc i8*@_SMLFN10TermFormat14formatDeclListE(i32 inreg 1,i32 inreg 8)
%y=getelementptr inbounds i8,i8*%x,i64 16
%z=bitcast i8*%y to i8*(i8*,i8*)**
%A=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%z,align 8
%B=bitcast i8*%x to i8**
%C=load i8*,i8**%B,align 8
store i8*%C,i8**%g,align 8
%D=load i8**,i8***%r,align 8
%E=load i8*,i8**%D,align 8
store i8*%E,i8**%f,align 8
%F=bitcast i8**%D to i8*
%G=getelementptr inbounds i8*,i8**%D,i64 1
%H=bitcast i8**%G to i32*
%I=load i32,i32*%H,align 4
%J=getelementptr inbounds i8,i8*%F,i64 12
%K=bitcast i8*%J to i32*
%L=load i32,i32*%K,align 4
%M=call i8*@sml_alloc(i32 inreg 20)#0
%N=getelementptr inbounds i8,i8*%M,i64 -4
%O=bitcast i8*%N to i32*
store i32 1342177296,i32*%O,align 4
store i8*%M,i8**%h,align 8
%P=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%Q=bitcast i8*%M to i8**
store i8*%P,i8**%Q,align 8
%R=getelementptr inbounds i8,i8*%M,i64 8
%S=bitcast i8*%R to i32*
store i32%I,i32*%S,align 4
%T=getelementptr inbounds i8,i8*%M,i64 12
%U=bitcast i8*%T to i32*
store i32%L,i32*%U,align 4
%V=getelementptr inbounds i8,i8*%M,i64 16
%W=bitcast i8*%V to i32*
store i32 1,i32*%W,align 4
%X=call i8*@sml_alloc(i32 inreg 28)#0
%Y=getelementptr inbounds i8,i8*%X,i64 -4
%Z=bitcast i8*%Y to i32*
store i32 1342177304,i32*%Z,align 4
store i8*%X,i8**%f,align 8
%aa=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%ab=bitcast i8*%X to i8**
store i8*%aa,i8**%ab,align 8
%ac=getelementptr inbounds i8,i8*%X,i64 8
%ad=bitcast i8*%ac to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_442 to void(...)*),void(...)**%ad,align 8
%ae=getelementptr inbounds i8,i8*%X,i64 16
%af=bitcast i8*%ae to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_442 to void(...)*),void(...)**%af,align 8
%ag=getelementptr inbounds i8,i8*%X,i64 24
%ah=bitcast i8*%ag to i32*
store i32 -2147483647,i32*%ah,align 4
%ai=call i8*@sml_alloc(i32 inreg 28)#0
%aj=getelementptr inbounds i8,i8*%ai,i64 -4
%ak=bitcast i8*%aj to i32*
store i32 1342177304,i32*%ak,align 4
%al=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%am=bitcast i8*%ai to i8**
store i8*%al,i8**%am,align 8
%an=load i8*,i8**%c,align 8
%ao=getelementptr inbounds i8,i8*%ai,i64 8
%ap=bitcast i8*%ao to i8**
store i8*%an,i8**%ap,align 8
store i8*null,i8**%c,align 8
%aq=getelementptr inbounds i8,i8*%ai,i64 16
%ar=bitcast i8*%aq to i8**
store i8*%an,i8**%ar,align 8
%as=getelementptr inbounds i8,i8*%ai,i64 24
%at=bitcast i8*%as to i32*
store i32 7,i32*%at,align 4
%au=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%av=call fastcc i8*%A(i8*inreg%au,i8*inreg%ai)
%aw=getelementptr inbounds i8,i8*%av,i64 16
%ax=bitcast i8*%aw to i8*(i8*,i8*)**
%ay=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ax,align 8
%az=bitcast i8*%av to i8**
%aA=load i8*,i8**%az,align 8
store i8*%aA,i8**%c,align 8
%aB=load i8*,i8**%d,align 8
%aC=getelementptr inbounds i8,i8*%aB,i64 8
%aD=bitcast i8*%aC to i32*
%aE=load i32,i32*%aD,align 4
store i8*null,i8**%d,align 8
%aF=getelementptr inbounds i8,i8*%aB,i64 12
%aG=bitcast i8*%aF to i32*
%aH=load i32,i32*%aG,align 4
%aI=call fastcc i8*@_SMLFN9SymbolEnv10listItemsiE(i32 inreg%aE,i32 inreg%aH)
%aJ=getelementptr inbounds i8,i8*%aI,i64 16
%aK=bitcast i8*%aJ to i8*(i8*,i8*)**
%aL=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aK,align 8
%aM=bitcast i8*%aI to i8**
%aN=load i8*,i8**%aM,align 8
%aO=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aP=call fastcc i8*%aL(i8*inreg%aN,i8*inreg%aO)
%aQ=load i8*,i8**%c,align 8
%aR=tail call fastcc i8*%ay(i8*inreg%aQ,i8*inreg%aP)
ret i8*%aR
}
define internal fastcc i8*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_444(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_443 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_443 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat28formatEnclosedSymbolEnvPlainE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_444 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_444 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb9assocListE_447(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb9assocListE_457(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
%k=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
call void@llvm.gcroot(i8**%k,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%l=load atomic i32,i32*@sml_check_flag unordered,align 4
%m=icmp eq i32%l,0
br i1%m,label%n,label%p
n:
%o=bitcast i8*%a to i8**
br label%t
p:
call void@sml_check(i32 inreg%l)
%q=bitcast i8**%d to i8***
%r=load i8**,i8***%q,align 8
%s=bitcast i8**%r to i8*
br label%t
t:
%u=phi i8*[%s,%p],[%a,%n]
%v=phi i8**[%r,%p],[%o,%n]
%w=load i8*,i8**%v,align 8
%x=getelementptr inbounds i8,i8*%w,i64 8
%y=bitcast i8*%x to i8**
%z=load i8*,i8**%y,align 8
store i8*%z,i8**%f,align 8
%A=getelementptr inbounds i8*,i8**%v,i64 1
%B=bitcast i8**%A to i32*
%C=load i32,i32*%B,align 4
%D=getelementptr inbounds i8,i8*%u,i64 12
%E=bitcast i8*%D to i32*
%F=load i32,i32*%E,align 4
%G=call fastcc i8*@_SMLLN10TermFormat17formatEnclosedMapE_365(i32 inreg%C,i32 inreg%F)
%H=getelementptr inbounds i8,i8*%G,i64 16
%I=bitcast i8*%H to i8*(i8*,i8*)**
%J=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%I,align 8
%K=bitcast i8*%G to i8**
%L=load i8*,i8**%K,align 8
%M=bitcast i8**%d to i8****
%N=load i8***,i8****%M,align 8
%O=load i8**,i8***%N,align 8
%P=load i8*,i8**%O,align 8
%Q=call fastcc i8*%J(i8*inreg%L,i8*inreg%P)
%R=getelementptr inbounds i8,i8*%Q,i64 16
%S=bitcast i8*%R to i8*(i8*,i8*,i8*,i8*,i8*)**
%T=load i8*(i8*,i8*,i8*,i8*,i8*)*,i8*(i8*,i8*,i8*,i8*,i8*)**%S,align 8
%U=bitcast i8*%Q to i8**
%V=load i8*,i8**%U,align 8
store i8*%V,i8**%e,align 8
%W=load i8*,i8**%d,align 8
%X=getelementptr inbounds i8,i8*%W,i64 16
%Y=bitcast i8*%X to i32*
%Z=load i32,i32*%Y,align 4
store i8*null,i8**%d,align 8
%aa=getelementptr inbounds i8,i8*%W,i64 20
%ab=bitcast i8*%aa to i32*
%ac=load i32,i32*%ab,align 4
%ad=call i8*@sml_alloc(i32 inreg 4)#0
%ae=bitcast i8*%ad to i32*
%af=getelementptr inbounds i8,i8*%ad,i64 -4
%ag=bitcast i8*%af to i32*
store i32 4,i32*%ag,align 4
store i8*%ad,i8**%d,align 8
store i32 1,i32*%ae,align 4
%ah=call i8*@sml_alloc(i32 inreg 4)#0
%ai=bitcast i8*%ah to i32*
%aj=getelementptr inbounds i8,i8*%ah,i64 -4
%ak=bitcast i8*%aj to i32*
store i32 4,i32*%ak,align 4
store i8*%ah,i8**%g,align 8
store i32 8,i32*%ai,align 4
%al=call i8*@sml_alloc(i32 inreg 4)#0
%am=bitcast i8*%al to i32*
%an=getelementptr inbounds i8,i8*%al,i64 -4
%ao=bitcast i8*%an to i32*
store i32 4,i32*%ao,align 4
store i8*%al,i8**%h,align 8
store i32%Z,i32*%am,align 4
%ap=call i8*@sml_alloc(i32 inreg 4)#0
%aq=bitcast i8*%ap to i32*
%ar=getelementptr inbounds i8,i8*%ap,i64 -4
%as=bitcast i8*%ar to i32*
store i32 4,i32*%as,align 4
store i32%ac,i32*%aq,align 4
%at=load i8*,i8**%e,align 8
%au=load i8*,i8**%d,align 8
%av=load i8*,i8**%g,align 8
%aw=load i8*,i8**%h,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%d,align 8
store i8*null,i8**%g,align 8
store i8*null,i8**%h,align 8
%ax=call fastcc i8*%T(i8*inreg%at,i8*inreg%au,i8*inreg%av,i8*inreg%aw,i8*inreg%ap)
%ay=getelementptr inbounds i8,i8*%ax,i64 16
%az=bitcast i8*%ay to i8*(i8*,i8*)**
%aA=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%az,align 8
%aB=bitcast i8*%ax to i8**
%aC=load i8*,i8**%aB,align 8
%aD=call fastcc i8*%aA(i8*inreg%aC,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@av,i64 0,i32 2)to i8*))
%aE=getelementptr inbounds i8,i8*%aD,i64 16
%aF=bitcast i8*%aE to i8*(i8*,i8*)**
%aG=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aF,align 8
%aH=bitcast i8*%aD to i8**
%aI=load i8*,i8**%aH,align 8
store i8*%aI,i8**%g,align 8
%aJ=call i8*@sml_alloc(i32 inreg 20)#0
%aK=getelementptr inbounds i8,i8*%aJ,i64 -4
%aL=bitcast i8*%aK to i32*
store i32 1342177296,i32*%aL,align 4
store i8*%aJ,i8**%d,align 8
%aM=getelementptr inbounds i8,i8*%aJ,i64 4
%aN=bitcast i8*%aM to i32*
store i32 0,i32*%aN,align 1
%aO=bitcast i8*%aJ to i32*
store i32 1,i32*%aO,align 4
%aP=getelementptr inbounds i8,i8*%aJ,i64 8
%aQ=bitcast i8*%aP to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bB,i64 0,i32 2,i64 0),i8**%aQ,align 8
%aR=getelementptr inbounds i8,i8*%aJ,i64 16
%aS=bitcast i8*%aR to i32*
store i32 2,i32*%aS,align 4
%aT=call i8*@sml_alloc(i32 inreg 20)#0
%aU=getelementptr inbounds i8,i8*%aT,i64 -4
%aV=bitcast i8*%aU to i32*
store i32 1342177296,i32*%aV,align 4
store i8*%aT,i8**%e,align 8
%aW=getelementptr inbounds i8,i8*%aT,i64 4
%aX=bitcast i8*%aW to i32*
store i32 0,i32*%aX,align 1
%aY=bitcast i8*%aT to i32*
store i32 6,i32*%aY,align 4
%aZ=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%a0=getelementptr inbounds i8,i8*%aT,i64 8
%a1=bitcast i8*%a0 to i8**
store i8*%aZ,i8**%a1,align 8
%a2=getelementptr inbounds i8,i8*%aT,i64 16
%a3=bitcast i8*%a2 to i32*
store i32 2,i32*%a3,align 4
%a4=call i8*@sml_alloc(i32 inreg 20)#0
%a5=getelementptr inbounds i8,i8*%a4,i64 -4
%a6=bitcast i8*%a5 to i32*
store i32 1342177296,i32*%a6,align 4
%a7=load i8*,i8**%e,align 8
%a8=bitcast i8*%a4 to i8**
store i8*%a7,i8**%a8,align 8
%a9=getelementptr inbounds i8,i8*%a4,i64 8
%ba=bitcast i8*%a9 to i8**
store i8*null,i8**%ba,align 8
%bb=getelementptr inbounds i8,i8*%a4,i64 16
%bc=bitcast i8*%bb to i32*
store i32 3,i32*%bc,align 4
store i8*%a7,i8**%d,align 8
store i8*null,i8**%e,align 8
%bd=call i8*@sml_alloc(i32 inreg 20)#0
%be=getelementptr inbounds i8,i8*%bd,i64 -4
%bf=bitcast i8*%be to i32*
store i32 1342177296,i32*%bf,align 4
store i8*%bd,i8**%h,align 8
%bg=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bh=bitcast i8*%bd to i8**
store i8*%bg,i8**%bh,align 8
%bi=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bj=getelementptr inbounds i8,i8*%bd,i64 8
%bk=bitcast i8*%bj to i8**
store i8*%bi,i8**%bk,align 8
%bl=getelementptr inbounds i8,i8*%bd,i64 16
%bm=bitcast i8*%bl to i32*
store i32 3,i32*%bm,align 4
%bn=call i8*@sml_alloc(i32 inreg 20)#0
%bo=getelementptr inbounds i8,i8*%bn,i64 -4
%bp=bitcast i8*%bo to i32*
store i32 1342177296,i32*%bp,align 4
store i8*%bn,i8**%d,align 8
%bq=getelementptr inbounds i8,i8*%bn,i64 4
%br=bitcast i8*%bq to i32*
store i32 0,i32*%br,align 1
%bs=bitcast i8*%bn to i32*
store i32 1,i32*%bs,align 4
%bt=getelementptr inbounds i8,i8*%bn,i64 8
%bu=bitcast i8*%bt to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bd,i64 0,i32 2,i64 0),i8**%bu,align 8
%bv=getelementptr inbounds i8,i8*%bn,i64 16
%bw=bitcast i8*%bv to i32*
store i32 2,i32*%bw,align 4
%bx=call i8*@sml_alloc(i32 inreg 20)#0
%by=getelementptr inbounds i8,i8*%bx,i64 -4
%bz=bitcast i8*%by to i32*
store i32 1342177296,i32*%bz,align 4
store i8*%bx,i8**%e,align 8
%bA=getelementptr inbounds i8,i8*%bx,i64 4
%bB=bitcast i8*%bA to i32*
store i32 0,i32*%bB,align 1
%bC=bitcast i8*%bx to i32*
store i32 6,i32*%bC,align 4
%bD=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bE=getelementptr inbounds i8,i8*%bx,i64 8
%bF=bitcast i8*%bE to i8**
store i8*%bD,i8**%bF,align 8
%bG=getelementptr inbounds i8,i8*%bx,i64 16
%bH=bitcast i8*%bG to i32*
store i32 2,i32*%bH,align 4
%bI=call i8*@sml_alloc(i32 inreg 20)#0
%bJ=getelementptr inbounds i8,i8*%bI,i64 -4
%bK=bitcast i8*%bJ to i32*
store i32 1342177296,i32*%bK,align 4
%bL=load i8*,i8**%e,align 8
%bM=bitcast i8*%bI to i8**
store i8*%bL,i8**%bM,align 8
%bN=getelementptr inbounds i8,i8*%bI,i64 8
%bO=bitcast i8*%bN to i8**
store i8*null,i8**%bO,align 8
%bP=getelementptr inbounds i8,i8*%bI,i64 16
%bQ=bitcast i8*%bP to i32*
store i32 3,i32*%bQ,align 4
store i8*%bL,i8**%d,align 8
store i8*null,i8**%e,align 8
%bR=call i8*@sml_alloc(i32 inreg 20)#0
%bS=getelementptr inbounds i8,i8*%bR,i64 -4
%bT=bitcast i8*%bS to i32*
store i32 1342177296,i32*%bT,align 4
store i8*%bR,i8**%i,align 8
%bU=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bV=bitcast i8*%bR to i8**
store i8*%bU,i8**%bV,align 8
%bW=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bX=getelementptr inbounds i8,i8*%bR,i64 8
%bY=bitcast i8*%bX to i8**
store i8*%bW,i8**%bY,align 8
%bZ=getelementptr inbounds i8,i8*%bR,i64 16
%b0=bitcast i8*%bZ to i32*
store i32 3,i32*%b0,align 4
%b1=call i8*@sml_alloc(i32 inreg 20)#0
%b2=getelementptr inbounds i8,i8*%b1,i64 -4
%b3=bitcast i8*%b2 to i32*
store i32 1342177296,i32*%b3,align 4
store i8*%b1,i8**%d,align 8
%b4=getelementptr inbounds i8,i8*%b1,i64 4
%b5=bitcast i8*%b4 to i32*
store i32 0,i32*%b5,align 1
%b6=bitcast i8*%b1 to i32*
store i32 2,i32*%b6,align 4
%b7=getelementptr inbounds i8,i8*%b1,i64 8
%b8=bitcast i8*%b7 to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[3x i8]}>,<{[4x i8],i32,[3x i8]}>*@aw,i64 0,i32 2,i64 0),i8**%b8,align 8
%b9=getelementptr inbounds i8,i8*%b1,i64 16
%ca=bitcast i8*%b9 to i32*
store i32 2,i32*%ca,align 4
%cb=call i8*@sml_alloc(i32 inreg 20)#0
%cc=getelementptr inbounds i8,i8*%cb,i64 -4
%cd=bitcast i8*%cc to i32*
store i32 1342177296,i32*%cd,align 4
store i8*%cb,i8**%e,align 8
%ce=getelementptr inbounds i8,i8*%cb,i64 4
%cf=bitcast i8*%ce to i32*
store i32 0,i32*%cf,align 1
%cg=bitcast i8*%cb to i32*
store i32 6,i32*%cg,align 4
%ch=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ci=getelementptr inbounds i8,i8*%cb,i64 8
%cj=bitcast i8*%ci to i8**
store i8*%ch,i8**%cj,align 8
%ck=getelementptr inbounds i8,i8*%cb,i64 16
%cl=bitcast i8*%ck to i32*
store i32 2,i32*%cl,align 4
%cm=call i8*@sml_alloc(i32 inreg 20)#0
%cn=getelementptr inbounds i8,i8*%cm,i64 -4
%co=bitcast i8*%cn to i32*
store i32 1342177296,i32*%co,align 4
%cp=load i8*,i8**%e,align 8
%cq=bitcast i8*%cm to i8**
store i8*%cp,i8**%cq,align 8
%cr=getelementptr inbounds i8,i8*%cm,i64 8
%cs=bitcast i8*%cr to i8**
store i8*null,i8**%cs,align 8
%ct=getelementptr inbounds i8,i8*%cm,i64 16
%cu=bitcast i8*%ct to i32*
store i32 3,i32*%cu,align 4
store i8*%cp,i8**%d,align 8
store i8*null,i8**%e,align 8
%cv=call i8*@sml_alloc(i32 inreg 20)#0
%cw=getelementptr inbounds i8,i8*%cv,i64 -4
%cx=bitcast i8*%cw to i32*
store i32 1342177296,i32*%cx,align 4
store i8*%cv,i8**%j,align 8
%cy=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%cz=bitcast i8*%cv to i8**
store i8*%cy,i8**%cz,align 8
%cA=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%cB=getelementptr inbounds i8,i8*%cv,i64 8
%cC=bitcast i8*%cB to i8**
store i8*%cA,i8**%cC,align 8
%cD=getelementptr inbounds i8,i8*%cv,i64 16
%cE=bitcast i8*%cD to i32*
store i32 3,i32*%cE,align 4
%cF=call i8*@sml_alloc(i32 inreg 20)#0
%cG=getelementptr inbounds i8,i8*%cF,i64 -4
%cH=bitcast i8*%cG to i32*
store i32 1342177296,i32*%cH,align 4
store i8*%cF,i8**%k,align 8
%cI=bitcast i8*%cF to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@i,i64 0,i32 2)to i8*),i8**%cI,align 8
%cJ=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%cK=getelementptr inbounds i8,i8*%cF,i64 8
%cL=bitcast i8*%cK to i8**
store i8*%cJ,i8**%cL,align 8
%cM=getelementptr inbounds i8,i8*%cF,i64 16
%cN=bitcast i8*%cM to i32*
store i32 3,i32*%cN,align 4
%cO=call i8*@sml_alloc(i32 inreg 20)#0
%cP=getelementptr inbounds i8,i8*%cO,i64 -4
%cQ=bitcast i8*%cP to i32*
store i32 1342177296,i32*%cQ,align 4
store i8*%cO,i8**%d,align 8
%cR=getelementptr inbounds i8,i8*%cO,i64 4
%cS=bitcast i8*%cR to i32*
store i32 0,i32*%cS,align 1
%cT=bitcast i8*%cO to i32*
store i32 1,i32*%cT,align 4
%cU=getelementptr inbounds i8,i8*%cO,i64 8
%cV=bitcast i8*%cU to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bH,i64 0,i32 2,i64 0),i8**%cV,align 8
%cW=getelementptr inbounds i8,i8*%cO,i64 16
%cX=bitcast i8*%cW to i32*
store i32 2,i32*%cX,align 4
%cY=call i8*@sml_alloc(i32 inreg 20)#0
%cZ=getelementptr inbounds i8,i8*%cY,i64 -4
%c0=bitcast i8*%cZ to i32*
store i32 1342177296,i32*%c0,align 4
store i8*%cY,i8**%e,align 8
%c1=getelementptr inbounds i8,i8*%cY,i64 4
%c2=bitcast i8*%c1 to i32*
store i32 0,i32*%c2,align 1
%c3=bitcast i8*%cY to i32*
store i32 6,i32*%c3,align 4
%c4=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%c5=getelementptr inbounds i8,i8*%cY,i64 8
%c6=bitcast i8*%c5 to i8**
store i8*%c4,i8**%c6,align 8
%c7=getelementptr inbounds i8,i8*%cY,i64 16
%c8=bitcast i8*%c7 to i32*
store i32 2,i32*%c8,align 4
%c9=call i8*@sml_alloc(i32 inreg 20)#0
%da=getelementptr inbounds i8,i8*%c9,i64 -4
%db=bitcast i8*%da to i32*
store i32 1342177296,i32*%db,align 4
%dc=load i8*,i8**%e,align 8
%dd=bitcast i8*%c9 to i8**
store i8*%dc,i8**%dd,align 8
%de=getelementptr inbounds i8,i8*%c9,i64 8
%df=bitcast i8*%de to i8**
store i8*null,i8**%df,align 8
%dg=getelementptr inbounds i8,i8*%c9,i64 16
%dh=bitcast i8*%dg to i32*
store i32 3,i32*%dh,align 4
store i8*%dc,i8**%d,align 8
store i8*null,i8**%e,align 8
%di=call i8*@sml_alloc(i32 inreg 20)#0
%dj=getelementptr inbounds i8,i8*%di,i64 -4
%dk=bitcast i8*%dj to i32*
store i32 1342177296,i32*%dk,align 4
store i8*%di,i8**%j,align 8
%dl=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%dm=bitcast i8*%di to i8**
store i8*%dl,i8**%dm,align 8
%dn=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%do=getelementptr inbounds i8,i8*%di,i64 8
%dp=bitcast i8*%do to i8**
store i8*%dn,i8**%dp,align 8
%dq=getelementptr inbounds i8,i8*%di,i64 16
%dr=bitcast i8*%dq to i32*
store i32 3,i32*%dr,align 4
%ds=call i8*@sml_alloc(i32 inreg 44)#0
%dt=getelementptr inbounds i8,i8*%ds,i64 -4
%du=bitcast i8*%dt to i32*
store i32 1342177320,i32*%du,align 4
%dv=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%dw=bitcast i8*%ds to i8**
store i8*%dv,i8**%dw,align 8
%dx=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%dy=getelementptr inbounds i8,i8*%ds,i64 8
%dz=bitcast i8*%dy to i8**
store i8*%dx,i8**%dz,align 8
%dA=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%dB=getelementptr inbounds i8,i8*%ds,i64 16
%dC=bitcast i8*%dB to i8**
store i8*%dA,i8**%dC,align 8
%dD=load i8*,i8**%k,align 8
store i8*null,i8**%k,align 8
%dE=getelementptr inbounds i8,i8*%ds,i64 24
%dF=bitcast i8*%dE to i8**
store i8*%dD,i8**%dF,align 8
%dG=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%dH=getelementptr inbounds i8,i8*%ds,i64 32
%dI=bitcast i8*%dH to i8**
store i8*%dG,i8**%dI,align 8
%dJ=getelementptr inbounds i8,i8*%ds,i64 40
%dK=bitcast i8*%dJ to i32*
store i32 31,i32*%dK,align 4
%dL=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%dM=call fastcc i8*%aG(i8*inreg%dL,i8*inreg%ds)
%dN=getelementptr inbounds i8,i8*%dM,i64 16
%dO=bitcast i8*%dN to i8*(i8*,i8*)**
%dP=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%dO,align 8
%dQ=bitcast i8*%dM to i8**
%dR=load i8*,i8**%dQ,align 8
%dS=load i8*,i8**%c,align 8
%dT=tail call fastcc i8*%dP(i8*inreg%dR,i8*inreg%dS)
ret i8*%dT
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb9assocListE_458(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i32*
%l=load i32,i32*%k,align 4
%m=getelementptr inbounds i8,i8*%a,i64 12
%n=bitcast i8*%m to i32*
%o=load i32,i32*%n,align 4
%p=call i8*@sml_alloc(i32 inreg 28)#0
%q=getelementptr inbounds i8,i8*%p,i64 -4
%r=bitcast i8*%q to i32*
store i32 1342177304,i32*%r,align 4
store i8*%p,i8**%d,align 8
%s=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8*%p to i8**
store i8*%s,i8**%t,align 8
%u=getelementptr inbounds i8,i8*%p,i64 8
%v=bitcast i8*%u to i32*
store i32%f,i32*%v,align 4
%w=getelementptr inbounds i8,i8*%p,i64 12
%x=bitcast i8*%w to i32*
store i32%i,i32*%x,align 4
%y=getelementptr inbounds i8,i8*%p,i64 16
%z=bitcast i8*%y to i32*
store i32%l,i32*%z,align 4
%A=getelementptr inbounds i8,i8*%p,i64 20
%B=bitcast i8*%A to i32*
store i32%o,i32*%B,align 4
%C=getelementptr inbounds i8,i8*%p,i64 24
%D=bitcast i8*%C to i32*
store i32 1,i32*%D,align 4
%E=call i8*@sml_alloc(i32 inreg 28)#0
%F=getelementptr inbounds i8,i8*%E,i64 -4
%G=bitcast i8*%F to i32*
store i32 1342177304,i32*%G,align 4
%H=load i8*,i8**%d,align 8
%I=bitcast i8*%E to i8**
store i8*%H,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%E,i64 8
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb9assocListE_457 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%E,i64 16
%M=bitcast i8*%L to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb9assocListE_457 to void(...)*),void(...)**%M,align 8
%N=getelementptr inbounds i8,i8*%E,i64 24
%O=bitcast i8*%N to i32*
store i32 -2147483647,i32*%O,align 4
ret i8*%E
}
define fastcc i8*@_SMLFN10TermFormat10FormatComb9assocListE(i32 inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d)#4 gc"smlsharp"{
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=call i8*@sml_alloc(i32 inreg 20)#0
%g=bitcast i8*%f to i32*
%h=getelementptr inbounds i8,i8*%f,i64 -4
%i=bitcast i8*%h to i32*
store i32 1342177296,i32*%i,align 4
store i8*%f,i8**%e,align 8
store i32%a,i32*%g,align 4
%j=getelementptr inbounds i8,i8*%f,i64 4
%k=bitcast i8*%j to i32*
store i32%b,i32*%k,align 4
%l=getelementptr inbounds i8,i8*%f,i64 8
%m=bitcast i8*%l to i32*
store i32%c,i32*%m,align 4
%n=getelementptr inbounds i8,i8*%f,i64 12
%o=bitcast i8*%n to i32*
store i32%d,i32*%o,align 4
%p=getelementptr inbounds i8,i8*%f,i64 16
%q=bitcast i8*%p to i32*
store i32 0,i32*%q,align 4
%r=call i8*@sml_alloc(i32 inreg 28)#0
%s=getelementptr inbounds i8,i8*%r,i64 -4
%t=bitcast i8*%s to i32*
store i32 1342177304,i32*%t,align 4
%u=load i8*,i8**%e,align 8
%v=bitcast i8*%r to i8**
store i8*%u,i8**%v,align 8
%w=getelementptr inbounds i8,i8*%r,i64 8
%x=bitcast i8*%w to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb9assocListE_458 to void(...)*),void(...)**%x,align 8
%y=getelementptr inbounds i8,i8*%r,i64 16
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb9assocListE_458 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%r,i64 24
%B=bitcast i8*%A to i32*
store i32 -2147483647,i32*%B,align 4
ret i8*%r
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6recordE_469(i8*inreg%a)#2 gc"smlsharp"{
m:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%b,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%k,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%b,align 8
br label%k
k:
%l=phi i8*[%j,%i],[%a,%m]
%n=getelementptr inbounds i8,i8*%l,i64 8
%o=bitcast i8*%n to i8**
%p=load i8*,i8**%o,align 8
store i8*%p,i8**%d,align 8
%q=bitcast i8*%l to i8**
%r=load i8*,i8**%q,align 8
%s=getelementptr inbounds i8,i8*%r,i64 -4
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=and i32%u,268435455
%w=add nsw i32%v,-1
store i8*%r,i8**%b,align 8
%x=call i8*@sml_alloc(i32 inreg 20)#0
%y=getelementptr inbounds i8,i8*%x,i64 -4
%z=bitcast i8*%y to i32*
store i32 1342177296,i32*%z,align 4
store i8*%x,i8**%c,align 8
%A=getelementptr inbounds i8,i8*%x,i64 4
%B=bitcast i8*%A to i32*
store i32 0,i32*%B,align 1
%C=bitcast i8*%x to i32*
store i32%w,i32*%C,align 4
%D=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%E=getelementptr inbounds i8,i8*%x,i64 8
%F=bitcast i8*%E to i8**
store i8*%D,i8**%F,align 8
%G=getelementptr inbounds i8,i8*%x,i64 16
%H=bitcast i8*%G to i32*
store i32 2,i32*%H,align 4
%I=call i8*@sml_alloc(i32 inreg 20)#0
%J=getelementptr inbounds i8,i8*%I,i64 -4
%K=bitcast i8*%J to i32*
store i32 1342177296,i32*%K,align 4
store i8*%I,i8**%b,align 8
%L=getelementptr inbounds i8,i8*%I,i64 4
%M=bitcast i8*%L to i32*
store i32 0,i32*%M,align 1
%N=bitcast i8*%I to i32*
store i32 6,i32*%N,align 4
%O=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%P=getelementptr inbounds i8,i8*%I,i64 8
%Q=bitcast i8*%P to i8**
store i8*%O,i8**%Q,align 8
%R=getelementptr inbounds i8,i8*%I,i64 16
%S=bitcast i8*%R to i32*
store i32 2,i32*%S,align 4
%T=call i8*@sml_alloc(i32 inreg 20)#0
%U=getelementptr inbounds i8,i8*%T,i64 -4
%V=bitcast i8*%U to i32*
store i32 1342177296,i32*%V,align 4
%W=load i8*,i8**%b,align 8
%X=bitcast i8*%T to i8**
store i8*%W,i8**%X,align 8
%Y=getelementptr inbounds i8,i8*%T,i64 8
%Z=bitcast i8*%Y to i8**
store i8*null,i8**%Z,align 8
%aa=getelementptr inbounds i8,i8*%T,i64 16
%ab=bitcast i8*%aa to i32*
store i32 3,i32*%ab,align 4
store i8*null,i8**%c,align 8
%ac=call i8*@sml_alloc(i32 inreg 20)#0
%ad=getelementptr inbounds i8,i8*%ac,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 1342177296,i32*%ae,align 4
store i8*%ac,i8**%e,align 8
%af=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%ag=bitcast i8*%ac to i8**
store i8*%af,i8**%ag,align 8
%ah=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ai=getelementptr inbounds i8,i8*%ac,i64 8
%aj=bitcast i8*%ai to i8**
store i8*%ah,i8**%aj,align 8
%ak=getelementptr inbounds i8,i8*%ac,i64 16
%al=bitcast i8*%ak to i32*
store i32 3,i32*%al,align 4
%am=call i8*@sml_alloc(i32 inreg 20)#0
%an=getelementptr inbounds i8,i8*%am,i64 -4
%ao=bitcast i8*%an to i32*
store i32 1342177296,i32*%ao,align 4
store i8*%am,i8**%b,align 8
%ap=getelementptr inbounds i8,i8*%am,i64 4
%aq=bitcast i8*%ap to i32*
store i32 0,i32*%aq,align 1
%ar=bitcast i8*%am to i32*
store i32 1,i32*%ar,align 4
%as=getelementptr inbounds i8,i8*%am,i64 8
%at=bitcast i8*%as to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@aA,i64 0,i32 2,i64 0),i8**%at,align 8
%au=getelementptr inbounds i8,i8*%am,i64 16
%av=bitcast i8*%au to i32*
store i32 2,i32*%av,align 4
%aw=call i8*@sml_alloc(i32 inreg 20)#0
%ax=getelementptr inbounds i8,i8*%aw,i64 -4
%ay=bitcast i8*%ax to i32*
store i32 1342177296,i32*%ay,align 4
store i8*%aw,i8**%c,align 8
%az=getelementptr inbounds i8,i8*%aw,i64 4
%aA=bitcast i8*%az to i32*
store i32 0,i32*%aA,align 1
%aB=bitcast i8*%aw to i32*
store i32 6,i32*%aB,align 4
%aC=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%aD=getelementptr inbounds i8,i8*%aw,i64 8
%aE=bitcast i8*%aD to i8**
store i8*%aC,i8**%aE,align 8
%aF=getelementptr inbounds i8,i8*%aw,i64 16
%aG=bitcast i8*%aF to i32*
store i32 2,i32*%aG,align 4
%aH=call i8*@sml_alloc(i32 inreg 20)#0
%aI=getelementptr inbounds i8,i8*%aH,i64 -4
%aJ=bitcast i8*%aI to i32*
store i32 1342177296,i32*%aJ,align 4
%aK=load i8*,i8**%c,align 8
%aL=bitcast i8*%aH to i8**
store i8*%aK,i8**%aL,align 8
%aM=getelementptr inbounds i8,i8*%aH,i64 8
%aN=bitcast i8*%aM to i8**
store i8*null,i8**%aN,align 8
%aO=getelementptr inbounds i8,i8*%aH,i64 16
%aP=bitcast i8*%aO to i32*
store i32 3,i32*%aP,align 4
store i8*%aK,i8**%b,align 8
store i8*null,i8**%c,align 8
%aQ=call i8*@sml_alloc(i32 inreg 20)#0
%aR=getelementptr inbounds i8,i8*%aQ,i64 -4
%aS=bitcast i8*%aR to i32*
store i32 1342177296,i32*%aS,align 4
store i8*%aQ,i8**%f,align 8
%aT=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%aU=bitcast i8*%aQ to i8**
store i8*%aT,i8**%aU,align 8
%aV=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aW=getelementptr inbounds i8,i8*%aQ,i64 8
%aX=bitcast i8*%aW to i8**
store i8*%aV,i8**%aX,align 8
%aY=getelementptr inbounds i8,i8*%aQ,i64 16
%aZ=bitcast i8*%aY to i32*
store i32 3,i32*%aZ,align 4
%a0=call i8*@sml_alloc(i32 inreg 20)#0
%a1=getelementptr inbounds i8,i8*%a0,i64 -4
%a2=bitcast i8*%a1 to i32*
store i32 1342177296,i32*%a2,align 4
store i8*%a0,i8**%b,align 8
%a3=bitcast i8*%a0 to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@i,i64 0,i32 2)to i8*),i8**%a3,align 8
%a4=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%a5=getelementptr inbounds i8,i8*%a0,i64 8
%a6=bitcast i8*%a5 to i8**
store i8*%a4,i8**%a6,align 8
%a7=getelementptr inbounds i8,i8*%a0,i64 16
%a8=bitcast i8*%a7 to i32*
store i32 3,i32*%a8,align 4
%a9=call i8*@sml_alloc(i32 inreg 28)#0
%ba=getelementptr inbounds i8,i8*%a9,i64 -4
%bb=bitcast i8*%ba to i32*
store i32 1342177304,i32*%bb,align 4
%bc=load i8*,i8**%e,align 8
%bd=bitcast i8*%a9 to i8**
store i8*%bc,i8**%bd,align 8
%be=load i8*,i8**%b,align 8
%bf=getelementptr inbounds i8,i8*%a9,i64 8
%bg=bitcast i8*%bf to i8**
store i8*%be,i8**%bg,align 8
%bh=load i8*,i8**%d,align 8
%bi=getelementptr inbounds i8,i8*%a9,i64 16
%bj=bitcast i8*%bi to i8**
store i8*%bh,i8**%bj,align 8
%bk=getelementptr inbounds i8,i8*%a9,i64 24
%bl=bitcast i8*%bk to i32*
store i32 7,i32*%bl,align 4
%bm=tail call fastcc i8*@_SMLLN10TermFormat12keyValuePairE_357(i8*inreg%a9)
ret i8*%bm
}
define fastcc i8*@_SMLFN10TermFormat10FormatComb6recordE(i8*inreg%a)#2 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%b,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%l,label%k
k:
call void@sml_check(i32 inreg%i)
br label%l
l:
%m=call fastcc i8*@_SMLFN10TermFormat18formatEnclosedListE(i32 inreg 1,i32 inreg 8)
%n=getelementptr inbounds i8,i8*%m,i64 16
%o=bitcast i8*%n to i8*(i8*,i8*)**
%p=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%o,align 8
%q=bitcast i8*%m to i8**
%r=load i8*,i8**%q,align 8
store i8*%r,i8**%e,align 8
%s=call i8*@sml_alloc(i32 inreg 20)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177296,i32*%u,align 4
store i8*%s,i8**%c,align 8
%v=getelementptr inbounds i8,i8*%s,i64 4
%w=bitcast i8*%v to i32*
store i32 0,i32*%w,align 1
%x=bitcast i8*%s to i32*
store i32 1,i32*%x,align 4
%y=getelementptr inbounds i8,i8*%s,i64 8
%z=bitcast i8*%y to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bB,i64 0,i32 2,i64 0),i8**%z,align 8
%A=getelementptr inbounds i8,i8*%s,i64 16
%B=bitcast i8*%A to i32*
store i32 2,i32*%B,align 4
%C=call i8*@sml_alloc(i32 inreg 20)#0
%D=getelementptr inbounds i8,i8*%C,i64 -4
%E=bitcast i8*%D to i32*
store i32 1342177296,i32*%E,align 4
store i8*%C,i8**%d,align 8
%F=getelementptr inbounds i8,i8*%C,i64 4
%G=bitcast i8*%F to i32*
store i32 0,i32*%G,align 1
%H=bitcast i8*%C to i32*
store i32 6,i32*%H,align 4
%I=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%J=getelementptr inbounds i8,i8*%C,i64 8
%K=bitcast i8*%J to i8**
store i8*%I,i8**%K,align 8
%L=getelementptr inbounds i8,i8*%C,i64 16
%M=bitcast i8*%L to i32*
store i32 2,i32*%M,align 4
%N=call i8*@sml_alloc(i32 inreg 20)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32 1342177296,i32*%P,align 4
%Q=load i8*,i8**%d,align 8
%R=bitcast i8*%N to i8**
store i8*%Q,i8**%R,align 8
%S=getelementptr inbounds i8,i8*%N,i64 8
%T=bitcast i8*%S to i8**
store i8*null,i8**%T,align 8
%U=getelementptr inbounds i8,i8*%N,i64 16
%V=bitcast i8*%U to i32*
store i32 3,i32*%V,align 4
store i8*%Q,i8**%c,align 8
store i8*null,i8**%d,align 8
%W=call i8*@sml_alloc(i32 inreg 20)#0
%X=getelementptr inbounds i8,i8*%W,i64 -4
%Y=bitcast i8*%X to i32*
store i32 1342177296,i32*%Y,align 4
store i8*%W,i8**%f,align 8
%Z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aa=bitcast i8*%W to i8**
store i8*%Z,i8**%aa,align 8
%ab=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ac=getelementptr inbounds i8,i8*%W,i64 8
%ad=bitcast i8*%ac to i8**
store i8*%ab,i8**%ad,align 8
%ae=getelementptr inbounds i8,i8*%W,i64 16
%af=bitcast i8*%ae to i32*
store i32 3,i32*%af,align 4
%ag=call i8*@sml_alloc(i32 inreg 20)#0
%ah=getelementptr inbounds i8,i8*%ag,i64 -4
%ai=bitcast i8*%ah to i32*
store i32 1342177296,i32*%ai,align 4
store i8*%ag,i8**%c,align 8
%aj=getelementptr inbounds i8,i8*%ag,i64 4
%ak=bitcast i8*%aj to i32*
store i32 0,i32*%ak,align 1
%al=bitcast i8*%ag to i32*
store i32 1,i32*%al,align 4
%am=getelementptr inbounds i8,i8*%ag,i64 8
%an=bitcast i8*%am to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bd,i64 0,i32 2,i64 0),i8**%an,align 8
%ao=getelementptr inbounds i8,i8*%ag,i64 16
%ap=bitcast i8*%ao to i32*
store i32 2,i32*%ap,align 4
%aq=call i8*@sml_alloc(i32 inreg 20)#0
%ar=getelementptr inbounds i8,i8*%aq,i64 -4
%as=bitcast i8*%ar to i32*
store i32 1342177296,i32*%as,align 4
store i8*%aq,i8**%d,align 8
%at=getelementptr inbounds i8,i8*%aq,i64 4
%au=bitcast i8*%at to i32*
store i32 0,i32*%au,align 1
%av=bitcast i8*%aq to i32*
store i32 6,i32*%av,align 4
%aw=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ax=getelementptr inbounds i8,i8*%aq,i64 8
%ay=bitcast i8*%ax to i8**
store i8*%aw,i8**%ay,align 8
%az=getelementptr inbounds i8,i8*%aq,i64 16
%aA=bitcast i8*%az to i32*
store i32 2,i32*%aA,align 4
%aB=call i8*@sml_alloc(i32 inreg 20)#0
%aC=getelementptr inbounds i8,i8*%aB,i64 -4
%aD=bitcast i8*%aC to i32*
store i32 1342177296,i32*%aD,align 4
%aE=load i8*,i8**%d,align 8
%aF=bitcast i8*%aB to i8**
store i8*%aE,i8**%aF,align 8
%aG=getelementptr inbounds i8,i8*%aB,i64 8
%aH=bitcast i8*%aG to i8**
store i8*null,i8**%aH,align 8
%aI=getelementptr inbounds i8,i8*%aB,i64 16
%aJ=bitcast i8*%aI to i32*
store i32 3,i32*%aJ,align 4
store i8*%aE,i8**%c,align 8
store i8*null,i8**%d,align 8
%aK=call i8*@sml_alloc(i32 inreg 20)#0
%aL=getelementptr inbounds i8,i8*%aK,i64 -4
%aM=bitcast i8*%aL to i32*
store i32 1342177296,i32*%aM,align 4
store i8*%aK,i8**%g,align 8
%aN=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aO=bitcast i8*%aK to i8**
store i8*%aN,i8**%aO,align 8
%aP=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aQ=getelementptr inbounds i8,i8*%aK,i64 8
%aR=bitcast i8*%aQ to i8**
store i8*%aP,i8**%aR,align 8
%aS=getelementptr inbounds i8,i8*%aK,i64 16
%aT=bitcast i8*%aS to i32*
store i32 3,i32*%aT,align 4
%aU=call i8*@sml_alloc(i32 inreg 20)#0
%aV=getelementptr inbounds i8,i8*%aU,i64 -4
%aW=bitcast i8*%aV to i32*
store i32 1342177296,i32*%aW,align 4
store i8*%aU,i8**%c,align 8
%aX=getelementptr inbounds i8,i8*%aU,i64 4
%aY=bitcast i8*%aX to i32*
store i32 0,i32*%aY,align 1
%aZ=bitcast i8*%aU to i32*
store i32 1,i32*%aZ,align 4
%a0=getelementptr inbounds i8,i8*%aU,i64 8
%a1=bitcast i8*%a0 to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bH,i64 0,i32 2,i64 0),i8**%a1,align 8
%a2=getelementptr inbounds i8,i8*%aU,i64 16
%a3=bitcast i8*%a2 to i32*
store i32 2,i32*%a3,align 4
%a4=call i8*@sml_alloc(i32 inreg 20)#0
%a5=getelementptr inbounds i8,i8*%a4,i64 -4
%a6=bitcast i8*%a5 to i32*
store i32 1342177296,i32*%a6,align 4
store i8*%a4,i8**%d,align 8
%a7=getelementptr inbounds i8,i8*%a4,i64 4
%a8=bitcast i8*%a7 to i32*
store i32 0,i32*%a8,align 1
%a9=bitcast i8*%a4 to i32*
store i32 6,i32*%a9,align 4
%ba=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bb=getelementptr inbounds i8,i8*%a4,i64 8
%bc=bitcast i8*%bb to i8**
store i8*%ba,i8**%bc,align 8
%bd=getelementptr inbounds i8,i8*%a4,i64 16
%be=bitcast i8*%bd to i32*
store i32 2,i32*%be,align 4
%bf=call i8*@sml_alloc(i32 inreg 20)#0
%bg=getelementptr inbounds i8,i8*%bf,i64 -4
%bh=bitcast i8*%bg to i32*
store i32 1342177296,i32*%bh,align 4
%bi=load i8*,i8**%d,align 8
%bj=bitcast i8*%bf to i8**
store i8*%bi,i8**%bj,align 8
%bk=getelementptr inbounds i8,i8*%bf,i64 8
%bl=bitcast i8*%bk to i8**
store i8*null,i8**%bl,align 8
%bm=getelementptr inbounds i8,i8*%bf,i64 16
%bn=bitcast i8*%bm to i32*
store i32 3,i32*%bn,align 4
store i8*%bi,i8**%c,align 8
store i8*null,i8**%d,align 8
%bo=call i8*@sml_alloc(i32 inreg 20)#0
%bp=getelementptr inbounds i8,i8*%bo,i64 -4
%bq=bitcast i8*%bp to i32*
store i32 1342177296,i32*%bq,align 4
store i8*%bo,i8**%h,align 8
%br=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bs=bitcast i8*%bo to i8**
store i8*%br,i8**%bs,align 8
%bt=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bu=getelementptr inbounds i8,i8*%bo,i64 8
%bv=bitcast i8*%bu to i8**
store i8*%bt,i8**%bv,align 8
%bw=getelementptr inbounds i8,i8*%bo,i64 16
%bx=bitcast i8*%bw to i32*
store i32 3,i32*%bx,align 4
%by=call i8*@sml_alloc(i32 inreg 36)#0
%bz=getelementptr inbounds i8,i8*%by,i64 -4
%bA=bitcast i8*%bz to i32*
store i32 1342177312,i32*%bA,align 4
%bB=bitcast i8*%by to i8**
store i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@ay,i64 0,i32 2)to i8*),i8**%bB,align 8
%bC=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%bD=getelementptr inbounds i8,i8*%by,i64 8
%bE=bitcast i8*%bD to i8**
store i8*%bC,i8**%bE,align 8
%bF=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%bG=getelementptr inbounds i8,i8*%by,i64 16
%bH=bitcast i8*%bG to i8**
store i8*%bF,i8**%bH,align 8
%bI=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%bJ=getelementptr inbounds i8,i8*%by,i64 24
%bK=bitcast i8*%bJ to i8**
store i8*%bI,i8**%bK,align 8
%bL=getelementptr inbounds i8,i8*%by,i64 32
%bM=bitcast i8*%bL to i32*
store i32 15,i32*%bM,align 4
%bN=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bO=call fastcc i8*%p(i8*inreg%bN,i8*inreg%by)
%bP=getelementptr inbounds i8,i8*%bO,i64 16
%bQ=bitcast i8*%bP to i8*(i8*,i8*)**
%bR=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bQ,align 8
%bS=bitcast i8*%bO to i8**
%bT=load i8*,i8**%bS,align 8
%bU=load i8*,i8**%b,align 8
%bV=tail call fastcc i8*%bR(i8*inreg%bT,i8*inreg%bU)
ret i8*%bV
}
define internal fastcc i8*@_SMLLN10TermFormat15formatRecordExpE_481(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%l,label%k
k:
call void@sml_check(i32 inreg%i)
br label%l
l:
%m=call fastcc i8*@_SMLLN10TermFormat17formatEnclosedMapE_365(i32 inreg 1,i32 inreg 8)
%n=getelementptr inbounds i8,i8*%m,i64 16
%o=bitcast i8*%n to i8*(i8*,i8*)**
%p=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%o,align 8
%q=bitcast i8*%m to i8**
%r=load i8*,i8**%q,align 8
%s=load i8*,i8**@_SMLZN11RecordLabel12format__labelE,align 8
%t=call fastcc i8*%p(i8*inreg%r,i8*inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*,i8*,i8*,i8*)**
%w=load i8*(i8*,i8*,i8*,i8*,i8*)*,i8*(i8*,i8*,i8*,i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
store i8*%y,i8**%e,align 8
%z=load i8*,i8**%c,align 8
%A=getelementptr inbounds i8,i8*%z,i64 8
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=getelementptr inbounds i8,i8*%z,i64 12
%E=bitcast i8*%D to i32*
%F=load i32,i32*%E,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i8*%G,i8**%f,align 8
store i32 1,i32*%H,align 4
%K=call i8*@sml_alloc(i32 inreg 4)#0
%L=bitcast i8*%K to i32*
%M=getelementptr inbounds i8,i8*%K,i64 -4
%N=bitcast i8*%M to i32*
store i32 4,i32*%N,align 4
store i8*%K,i8**%g,align 8
store i32 8,i32*%L,align 4
%O=call i8*@sml_alloc(i32 inreg 4)#0
%P=bitcast i8*%O to i32*
%Q=getelementptr inbounds i8,i8*%O,i64 -4
%R=bitcast i8*%Q to i32*
store i32 4,i32*%R,align 4
store i8*%O,i8**%h,align 8
store i32%C,i32*%P,align 4
%S=call i8*@sml_alloc(i32 inreg 4)#0
%T=bitcast i8*%S to i32*
%U=getelementptr inbounds i8,i8*%S,i64 -4
%V=bitcast i8*%U to i32*
store i32 4,i32*%V,align 4
store i32%F,i32*%T,align 4
%W=load i8*,i8**%e,align 8
%X=load i8*,i8**%f,align 8
%Y=load i8*,i8**%g,align 8
%Z=load i8*,i8**%h,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%f,align 8
store i8*null,i8**%g,align 8
store i8*null,i8**%h,align 8
%aa=call fastcc i8*%w(i8*inreg%W,i8*inreg%X,i8*inreg%Y,i8*inreg%Z,i8*inreg%S)
%ab=getelementptr inbounds i8,i8*%aa,i64 16
%ac=bitcast i8*%ab to i8*(i8*,i8*)**
%ad=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ac,align 8
%ae=bitcast i8*%aa to i8**
%af=load i8*,i8**%ae,align 8
store i8*%af,i8**%e,align 8
%ag=load i8*,i8**%c,align 8
%ah=getelementptr inbounds i8,i8*%ag,i64 8
%ai=bitcast i8*%ah to i32*
%aj=load i32,i32*%ai,align 4
%ak=getelementptr inbounds i8,i8*%ag,i64 12
%al=bitcast i8*%ak to i32*
%am=load i32,i32*%al,align 4
%an=call fastcc i8*@_SMLFN11RecordLabel3Map10listItemsiE(i32 inreg%aj,i32 inreg%am)
%ao=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%ap=call fastcc i8*%ad(i8*inreg%ao,i8*inreg%an)
%aq=getelementptr inbounds i8,i8*%ap,i64 16
%ar=bitcast i8*%aq to i8*(i8*,i8*)**
%as=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ar,align 8
%at=bitcast i8*%ap to i8**
%au=load i8*,i8**%at,align 8
%av=bitcast i8**%c to i8***
%aw=load i8**,i8***%av,align 8
store i8*null,i8**%c,align 8
%ax=load i8*,i8**%aw,align 8
%ay=call fastcc i8*%as(i8*inreg%au,i8*inreg%ax)
%az=getelementptr inbounds i8,i8*%ay,i64 16
%aA=bitcast i8*%az to i8*(i8*,i8*)**
%aB=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aA,align 8
%aC=bitcast i8*%ay to i8**
%aD=load i8*,i8**%aC,align 8
%aE=load i8*,i8**%d,align 8
%aF=tail call fastcc i8*%aB(i8*inreg%aD,i8*inreg%aE)
ret i8*%aF
}
define internal fastcc i8*@_SMLLN10TermFormat15formatRecordExpE_488(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
q:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%f,align 8
%k=load atomic i32,i32*@sml_check_flag unordered,align 4
%l=icmp eq i32%k,0
br i1%l,label%o,label%m
m:
call void@sml_check(i32 inreg%k)
%n=load i8*,i8**%e,align 8
br label%o
o:
%p=phi i8*[%n,%m],[%a,%q]
%r=getelementptr inbounds i8,i8*%p,i64 8
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=getelementptr inbounds i8,i8*%p,i64 12
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=call fastcc i8*@_SMLFN11RecordLabel10isTupleMapE(i32 inreg%t,i32 inreg%w)
%y=getelementptr inbounds i8,i8*%x,i64 16
%z=bitcast i8*%y to i8*(i8*,i8*)**
%A=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%z,align 8
%B=bitcast i8*%x to i8**
%C=load i8*,i8**%B,align 8
%D=load i8*,i8**%f,align 8
%E=call fastcc i8*%A(i8*inreg%C,i8*inreg%D)
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
%H=icmp eq i32%G,0
br i1%H,label%cJ,label%I
I:
%J=load i8*,i8**%e,align 8
%K=getelementptr inbounds i8,i8*%J,i64 8
%L=bitcast i8*%K to i32*
%M=load i32,i32*%L,align 4
%N=getelementptr inbounds i8,i8*%J,i64 12
%O=bitcast i8*%N to i32*
%P=load i32,i32*%O,align 4
%Q=call fastcc i8*@_SMLFN10TermFormat18formatEnclosedListE(i32 inreg%M,i32 inreg%P)
%R=getelementptr inbounds i8,i8*%Q,i64 16
%S=bitcast i8*%R to i8*(i8*,i8*)**
%T=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%S,align 8
%U=bitcast i8*%Q to i8**
%V=load i8*,i8**%U,align 8
store i8*%V,i8**%g,align 8
%W=call i8*@sml_alloc(i32 inreg 20)#0
%X=getelementptr inbounds i8,i8*%W,i64 -4
%Y=bitcast i8*%X to i32*
store i32 1342177296,i32*%Y,align 4
store i8*%W,i8**%c,align 8
%Z=getelementptr inbounds i8,i8*%W,i64 4
%aa=bitcast i8*%Z to i32*
store i32 0,i32*%aa,align 1
%ab=bitcast i8*%W to i32*
store i32 1,i32*%ab,align 4
%ac=getelementptr inbounds i8,i8*%W,i64 8
%ad=bitcast i8*%ac to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bo,i64 0,i32 2,i64 0),i8**%ad,align 8
%ae=getelementptr inbounds i8,i8*%W,i64 16
%af=bitcast i8*%ae to i32*
store i32 2,i32*%af,align 4
%ag=call i8*@sml_alloc(i32 inreg 20)#0
%ah=getelementptr inbounds i8,i8*%ag,i64 -4
%ai=bitcast i8*%ah to i32*
store i32 1342177296,i32*%ai,align 4
store i8*%ag,i8**%d,align 8
%aj=getelementptr inbounds i8,i8*%ag,i64 4
%ak=bitcast i8*%aj to i32*
store i32 0,i32*%ak,align 1
%al=bitcast i8*%ag to i32*
store i32 6,i32*%al,align 4
%am=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%an=getelementptr inbounds i8,i8*%ag,i64 8
%ao=bitcast i8*%an to i8**
store i8*%am,i8**%ao,align 8
%ap=getelementptr inbounds i8,i8*%ag,i64 16
%aq=bitcast i8*%ap to i32*
store i32 2,i32*%aq,align 4
%ar=call i8*@sml_alloc(i32 inreg 20)#0
%as=getelementptr inbounds i8,i8*%ar,i64 -4
%at=bitcast i8*%as to i32*
store i32 1342177296,i32*%at,align 4
%au=load i8*,i8**%d,align 8
%av=bitcast i8*%ar to i8**
store i8*%au,i8**%av,align 8
%aw=getelementptr inbounds i8,i8*%ar,i64 8
%ax=bitcast i8*%aw to i8**
store i8*null,i8**%ax,align 8
%ay=getelementptr inbounds i8,i8*%ar,i64 16
%az=bitcast i8*%ay to i32*
store i32 3,i32*%az,align 4
store i8*%au,i8**%c,align 8
store i8*null,i8**%d,align 8
%aA=call i8*@sml_alloc(i32 inreg 20)#0
%aB=getelementptr inbounds i8,i8*%aA,i64 -4
%aC=bitcast i8*%aB to i32*
store i32 1342177296,i32*%aC,align 4
store i8*%aA,i8**%h,align 8
%aD=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aE=bitcast i8*%aA to i8**
store i8*%aD,i8**%aE,align 8
%aF=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aG=getelementptr inbounds i8,i8*%aA,i64 8
%aH=bitcast i8*%aG to i8**
store i8*%aF,i8**%aH,align 8
%aI=getelementptr inbounds i8,i8*%aA,i64 16
%aJ=bitcast i8*%aI to i32*
store i32 3,i32*%aJ,align 4
%aK=call i8*@sml_alloc(i32 inreg 20)#0
%aL=getelementptr inbounds i8,i8*%aK,i64 -4
%aM=bitcast i8*%aL to i32*
store i32 1342177296,i32*%aM,align 4
store i8*%aK,i8**%c,align 8
%aN=getelementptr inbounds i8,i8*%aK,i64 4
%aO=bitcast i8*%aN to i32*
store i32 0,i32*%aO,align 1
%aP=bitcast i8*%aK to i32*
store i32 1,i32*%aP,align 4
%aQ=getelementptr inbounds i8,i8*%aK,i64 8
%aR=bitcast i8*%aQ to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bd,i64 0,i32 2,i64 0),i8**%aR,align 8
%aS=getelementptr inbounds i8,i8*%aK,i64 16
%aT=bitcast i8*%aS to i32*
store i32 2,i32*%aT,align 4
%aU=call i8*@sml_alloc(i32 inreg 20)#0
%aV=getelementptr inbounds i8,i8*%aU,i64 -4
%aW=bitcast i8*%aV to i32*
store i32 1342177296,i32*%aW,align 4
store i8*%aU,i8**%d,align 8
%aX=getelementptr inbounds i8,i8*%aU,i64 4
%aY=bitcast i8*%aX to i32*
store i32 0,i32*%aY,align 1
%aZ=bitcast i8*%aU to i32*
store i32 6,i32*%aZ,align 4
%a0=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%a1=getelementptr inbounds i8,i8*%aU,i64 8
%a2=bitcast i8*%a1 to i8**
store i8*%a0,i8**%a2,align 8
%a3=getelementptr inbounds i8,i8*%aU,i64 16
%a4=bitcast i8*%a3 to i32*
store i32 2,i32*%a4,align 4
%a5=call i8*@sml_alloc(i32 inreg 20)#0
%a6=getelementptr inbounds i8,i8*%a5,i64 -4
%a7=bitcast i8*%a6 to i32*
store i32 1342177296,i32*%a7,align 4
%a8=load i8*,i8**%d,align 8
%a9=bitcast i8*%a5 to i8**
store i8*%a8,i8**%a9,align 8
%ba=getelementptr inbounds i8,i8*%a5,i64 8
%bb=bitcast i8*%ba to i8**
store i8*null,i8**%bb,align 8
%bc=getelementptr inbounds i8,i8*%a5,i64 16
%bd=bitcast i8*%bc to i32*
store i32 3,i32*%bd,align 4
store i8*%a8,i8**%c,align 8
store i8*null,i8**%d,align 8
%be=call i8*@sml_alloc(i32 inreg 20)#0
%bf=getelementptr inbounds i8,i8*%be,i64 -4
%bg=bitcast i8*%bf to i32*
store i32 1342177296,i32*%bg,align 4
store i8*%be,i8**%i,align 8
%bh=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bi=bitcast i8*%be to i8**
store i8*%bh,i8**%bi,align 8
%bj=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bk=getelementptr inbounds i8,i8*%be,i64 8
%bl=bitcast i8*%bk to i8**
store i8*%bj,i8**%bl,align 8
%bm=getelementptr inbounds i8,i8*%be,i64 16
%bn=bitcast i8*%bm to i32*
store i32 3,i32*%bn,align 4
%bo=call i8*@sml_alloc(i32 inreg 20)#0
%bp=getelementptr inbounds i8,i8*%bo,i64 -4
%bq=bitcast i8*%bp to i32*
store i32 1342177296,i32*%bq,align 4
store i8*%bo,i8**%c,align 8
%br=getelementptr inbounds i8,i8*%bo,i64 4
%bs=bitcast i8*%br to i32*
store i32 0,i32*%bs,align 1
%bt=bitcast i8*%bo to i32*
store i32 1,i32*%bt,align 4
%bu=getelementptr inbounds i8,i8*%bo,i64 8
%bv=bitcast i8*%bu to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bp,i64 0,i32 2,i64 0),i8**%bv,align 8
%bw=getelementptr inbounds i8,i8*%bo,i64 16
%bx=bitcast i8*%bw to i32*
store i32 2,i32*%bx,align 4
%by=call i8*@sml_alloc(i32 inreg 20)#0
%bz=getelementptr inbounds i8,i8*%by,i64 -4
%bA=bitcast i8*%bz to i32*
store i32 1342177296,i32*%bA,align 4
store i8*%by,i8**%d,align 8
%bB=getelementptr inbounds i8,i8*%by,i64 4
%bC=bitcast i8*%bB to i32*
store i32 0,i32*%bC,align 1
%bD=bitcast i8*%by to i32*
store i32 6,i32*%bD,align 4
%bE=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bF=getelementptr inbounds i8,i8*%by,i64 8
%bG=bitcast i8*%bF to i8**
store i8*%bE,i8**%bG,align 8
%bH=getelementptr inbounds i8,i8*%by,i64 16
%bI=bitcast i8*%bH to i32*
store i32 2,i32*%bI,align 4
%bJ=call i8*@sml_alloc(i32 inreg 20)#0
%bK=getelementptr inbounds i8,i8*%bJ,i64 -4
%bL=bitcast i8*%bK to i32*
store i32 1342177296,i32*%bL,align 4
%bM=load i8*,i8**%d,align 8
%bN=bitcast i8*%bJ to i8**
store i8*%bM,i8**%bN,align 8
%bO=getelementptr inbounds i8,i8*%bJ,i64 8
%bP=bitcast i8*%bO to i8**
store i8*null,i8**%bP,align 8
%bQ=getelementptr inbounds i8,i8*%bJ,i64 16
%bR=bitcast i8*%bQ to i32*
store i32 3,i32*%bR,align 4
store i8*%bM,i8**%c,align 8
store i8*null,i8**%d,align 8
%bS=call i8*@sml_alloc(i32 inreg 20)#0
%bT=getelementptr inbounds i8,i8*%bS,i64 -4
%bU=bitcast i8*%bT to i32*
store i32 1342177296,i32*%bU,align 4
store i8*%bS,i8**%j,align 8
%bV=load i8*,i8**%c,align 8
%bW=bitcast i8*%bS to i8**
store i8*%bV,i8**%bW,align 8
%bX=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bY=getelementptr inbounds i8,i8*%bS,i64 8
%bZ=bitcast i8*%bY to i8**
store i8*%bX,i8**%bZ,align 8
%b0=getelementptr inbounds i8,i8*%bS,i64 16
%b1=bitcast i8*%b0 to i32*
store i32 3,i32*%b1,align 4
%b2=bitcast i8**%e to i8***
%b3=load i8**,i8***%b2,align 8
%b4=load i8*,i8**%b3,align 8
store i8*%b4,i8**%c,align 8
%b5=call i8*@sml_alloc(i32 inreg 36)#0
%b6=getelementptr inbounds i8,i8*%b5,i64 -4
%b7=bitcast i8*%b6 to i32*
store i32 1342177312,i32*%b7,align 4
%b8=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%b9=bitcast i8*%b5 to i8**
store i8*%b8,i8**%b9,align 8
%ca=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%cb=getelementptr inbounds i8,i8*%b5,i64 8
%cc=bitcast i8*%cb to i8**
store i8*%ca,i8**%cc,align 8
%cd=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%ce=getelementptr inbounds i8,i8*%b5,i64 16
%cf=bitcast i8*%ce to i8**
store i8*%cd,i8**%cf,align 8
%cg=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%ch=getelementptr inbounds i8,i8*%b5,i64 24
%ci=bitcast i8*%ch to i8**
store i8*%cg,i8**%ci,align 8
%cj=getelementptr inbounds i8,i8*%b5,i64 32
%ck=bitcast i8*%cj to i32*
store i32 15,i32*%ck,align 4
%cl=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%cm=call fastcc i8*%T(i8*inreg%cl,i8*inreg%b5)
%cn=getelementptr inbounds i8,i8*%cm,i64 16
%co=bitcast i8*%cn to i8*(i8*,i8*)**
%cp=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%co,align 8
%cq=bitcast i8*%cm to i8**
%cr=load i8*,i8**%cq,align 8
store i8*%cr,i8**%c,align 8
%cs=load i8*,i8**%e,align 8
%ct=getelementptr inbounds i8,i8*%cs,i64 8
%cu=bitcast i8*%ct to i32*
%cv=load i32,i32*%cu,align 4
store i8*null,i8**%e,align 8
%cw=getelementptr inbounds i8,i8*%cs,i64 12
%cx=bitcast i8*%cw to i32*
%cy=load i32,i32*%cx,align 4
%cz=call fastcc i8*@_SMLFN11RecordLabel3Map9listItemsE(i32 inreg%cv,i32 inreg%cy)
%cA=getelementptr inbounds i8,i8*%cz,i64 16
%cB=bitcast i8*%cA to i8*(i8*,i8*)**
%cC=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%cB,align 8
%cD=bitcast i8*%cz to i8**
%cE=load i8*,i8**%cD,align 8
%cF=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%cG=call fastcc i8*%cC(i8*inreg%cE,i8*inreg%cF)
%cH=load i8*,i8**%c,align 8
%cI=tail call fastcc i8*%cp(i8*inreg%cH,i8*inreg%cG)
ret i8*%cI
cJ:
%cK=call i8*@sml_alloc(i32 inreg 20)#0
%cL=getelementptr inbounds i8,i8*%cK,i64 -4
%cM=bitcast i8*%cL to i32*
store i32 1342177296,i32*%cM,align 4
store i8*%cK,i8**%c,align 8
%cN=getelementptr inbounds i8,i8*%cK,i64 4
%cO=bitcast i8*%cN to i32*
store i32 0,i32*%cO,align 1
%cP=bitcast i8*%cK to i32*
store i32 1,i32*%cP,align 4
%cQ=getelementptr inbounds i8,i8*%cK,i64 8
%cR=bitcast i8*%cQ to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bB,i64 0,i32 2,i64 0),i8**%cR,align 8
%cS=getelementptr inbounds i8,i8*%cK,i64 16
%cT=bitcast i8*%cS to i32*
store i32 2,i32*%cT,align 4
%cU=call i8*@sml_alloc(i32 inreg 20)#0
%cV=getelementptr inbounds i8,i8*%cU,i64 -4
%cW=bitcast i8*%cV to i32*
store i32 1342177296,i32*%cW,align 4
store i8*%cU,i8**%d,align 8
%cX=getelementptr inbounds i8,i8*%cU,i64 4
%cY=bitcast i8*%cX to i32*
store i32 0,i32*%cY,align 1
%cZ=bitcast i8*%cU to i32*
store i32 6,i32*%cZ,align 4
%c0=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%c1=getelementptr inbounds i8,i8*%cU,i64 8
%c2=bitcast i8*%c1 to i8**
store i8*%c0,i8**%c2,align 8
%c3=getelementptr inbounds i8,i8*%cU,i64 16
%c4=bitcast i8*%c3 to i32*
store i32 2,i32*%c4,align 4
%c5=call i8*@sml_alloc(i32 inreg 20)#0
%c6=getelementptr inbounds i8,i8*%c5,i64 -4
%c7=bitcast i8*%c6 to i32*
store i32 1342177296,i32*%c7,align 4
%c8=load i8*,i8**%d,align 8
%c9=bitcast i8*%c5 to i8**
store i8*%c8,i8**%c9,align 8
%da=getelementptr inbounds i8,i8*%c5,i64 8
%db=bitcast i8*%da to i8**
store i8*null,i8**%db,align 8
%dc=getelementptr inbounds i8,i8*%c5,i64 16
%dd=bitcast i8*%dc to i32*
store i32 3,i32*%dd,align 4
store i8*%c8,i8**%c,align 8
store i8*null,i8**%d,align 8
%de=call i8*@sml_alloc(i32 inreg 20)#0
%df=getelementptr inbounds i8,i8*%de,i64 -4
%dg=bitcast i8*%df to i32*
store i32 1342177296,i32*%dg,align 4
store i8*%de,i8**%g,align 8
%dh=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%di=bitcast i8*%de to i8**
store i8*%dh,i8**%di,align 8
%dj=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%dk=getelementptr inbounds i8,i8*%de,i64 8
%dl=bitcast i8*%dk to i8**
store i8*%dj,i8**%dl,align 8
%dm=getelementptr inbounds i8,i8*%de,i64 16
%dn=bitcast i8*%dm to i32*
store i32 3,i32*%dn,align 4
%do=call i8*@sml_alloc(i32 inreg 20)#0
%dp=getelementptr inbounds i8,i8*%do,i64 -4
%dq=bitcast i8*%dp to i32*
store i32 1342177296,i32*%dq,align 4
store i8*%do,i8**%c,align 8
%dr=getelementptr inbounds i8,i8*%do,i64 4
%ds=bitcast i8*%dr to i32*
store i32 0,i32*%ds,align 1
%dt=bitcast i8*%do to i32*
store i32 1,i32*%dt,align 4
%du=getelementptr inbounds i8,i8*%do,i64 8
%dv=bitcast i8*%du to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bd,i64 0,i32 2,i64 0),i8**%dv,align 8
%dw=getelementptr inbounds i8,i8*%do,i64 16
%dx=bitcast i8*%dw to i32*
store i32 2,i32*%dx,align 4
%dy=call i8*@sml_alloc(i32 inreg 20)#0
%dz=getelementptr inbounds i8,i8*%dy,i64 -4
%dA=bitcast i8*%dz to i32*
store i32 1342177296,i32*%dA,align 4
store i8*%dy,i8**%d,align 8
%dB=getelementptr inbounds i8,i8*%dy,i64 4
%dC=bitcast i8*%dB to i32*
store i32 0,i32*%dC,align 1
%dD=bitcast i8*%dy to i32*
store i32 6,i32*%dD,align 4
%dE=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%dF=getelementptr inbounds i8,i8*%dy,i64 8
%dG=bitcast i8*%dF to i8**
store i8*%dE,i8**%dG,align 8
%dH=getelementptr inbounds i8,i8*%dy,i64 16
%dI=bitcast i8*%dH to i32*
store i32 2,i32*%dI,align 4
%dJ=call i8*@sml_alloc(i32 inreg 20)#0
%dK=getelementptr inbounds i8,i8*%dJ,i64 -4
%dL=bitcast i8*%dK to i32*
store i32 1342177296,i32*%dL,align 4
%dM=load i8*,i8**%d,align 8
%dN=bitcast i8*%dJ to i8**
store i8*%dM,i8**%dN,align 8
%dO=getelementptr inbounds i8,i8*%dJ,i64 8
%dP=bitcast i8*%dO to i8**
store i8*null,i8**%dP,align 8
%dQ=getelementptr inbounds i8,i8*%dJ,i64 16
%dR=bitcast i8*%dQ to i32*
store i32 3,i32*%dR,align 4
store i8*%dM,i8**%c,align 8
store i8*null,i8**%d,align 8
%dS=call i8*@sml_alloc(i32 inreg 20)#0
%dT=getelementptr inbounds i8,i8*%dS,i64 -4
%dU=bitcast i8*%dT to i32*
store i32 1342177296,i32*%dU,align 4
store i8*%dS,i8**%h,align 8
%dV=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%dW=bitcast i8*%dS to i8**
store i8*%dV,i8**%dW,align 8
%dX=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%dY=getelementptr inbounds i8,i8*%dS,i64 8
%dZ=bitcast i8*%dY to i8**
store i8*%dX,i8**%dZ,align 8
%d0=getelementptr inbounds i8,i8*%dS,i64 16
%d1=bitcast i8*%d0 to i32*
store i32 3,i32*%d1,align 4
%d2=call i8*@sml_alloc(i32 inreg 20)#0
%d3=getelementptr inbounds i8,i8*%d2,i64 -4
%d4=bitcast i8*%d3 to i32*
store i32 1342177296,i32*%d4,align 4
store i8*%d2,i8**%c,align 8
%d5=getelementptr inbounds i8,i8*%d2,i64 4
%d6=bitcast i8*%d5 to i32*
store i32 0,i32*%d6,align 1
%d7=bitcast i8*%d2 to i32*
store i32 1,i32*%d7,align 4
%d8=getelementptr inbounds i8,i8*%d2,i64 8
%d9=bitcast i8*%d8 to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@aA,i64 0,i32 2,i64 0),i8**%d9,align 8
%ea=getelementptr inbounds i8,i8*%d2,i64 16
%eb=bitcast i8*%ea to i32*
store i32 2,i32*%eb,align 4
%ec=call i8*@sml_alloc(i32 inreg 20)#0
%ed=getelementptr inbounds i8,i8*%ec,i64 -4
%ee=bitcast i8*%ed to i32*
store i32 1342177296,i32*%ee,align 4
store i8*%ec,i8**%d,align 8
%ef=getelementptr inbounds i8,i8*%ec,i64 4
%eg=bitcast i8*%ef to i32*
store i32 0,i32*%eg,align 1
%eh=bitcast i8*%ec to i32*
store i32 6,i32*%eh,align 4
%ei=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ej=getelementptr inbounds i8,i8*%ec,i64 8
%ek=bitcast i8*%ej to i8**
store i8*%ei,i8**%ek,align 8
%el=getelementptr inbounds i8,i8*%ec,i64 16
%em=bitcast i8*%el to i32*
store i32 2,i32*%em,align 4
%en=call i8*@sml_alloc(i32 inreg 20)#0
%eo=getelementptr inbounds i8,i8*%en,i64 -4
%ep=bitcast i8*%eo to i32*
store i32 1342177296,i32*%ep,align 4
%eq=load i8*,i8**%d,align 8
%er=bitcast i8*%en to i8**
store i8*%eq,i8**%er,align 8
%es=getelementptr inbounds i8,i8*%en,i64 8
%et=bitcast i8*%es to i8**
store i8*null,i8**%et,align 8
%eu=getelementptr inbounds i8,i8*%en,i64 16
%ev=bitcast i8*%eu to i32*
store i32 3,i32*%ev,align 4
store i8*%eq,i8**%c,align 8
store i8*null,i8**%d,align 8
%ew=call i8*@sml_alloc(i32 inreg 20)#0
%ex=getelementptr inbounds i8,i8*%ew,i64 -4
%ey=bitcast i8*%ex to i32*
store i32 1342177296,i32*%ey,align 4
store i8*%ew,i8**%i,align 8
%ez=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%eA=bitcast i8*%ew to i8**
store i8*%ez,i8**%eA,align 8
%eB=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%eC=getelementptr inbounds i8,i8*%ew,i64 8
%eD=bitcast i8*%eC to i8**
store i8*%eB,i8**%eD,align 8
%eE=getelementptr inbounds i8,i8*%ew,i64 16
%eF=bitcast i8*%eE to i32*
store i32 3,i32*%eF,align 4
%eG=call i8*@sml_alloc(i32 inreg 20)#0
%eH=getelementptr inbounds i8,i8*%eG,i64 -4
%eI=bitcast i8*%eH to i32*
store i32 1342177296,i32*%eI,align 4
store i8*%eG,i8**%j,align 8
%eJ=bitcast i8*%eG to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@i,i64 0,i32 2)to i8*),i8**%eJ,align 8
%eK=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%eL=getelementptr inbounds i8,i8*%eG,i64 8
%eM=bitcast i8*%eL to i8**
store i8*%eK,i8**%eM,align 8
%eN=getelementptr inbounds i8,i8*%eG,i64 16
%eO=bitcast i8*%eN to i32*
store i32 3,i32*%eO,align 4
%eP=call i8*@sml_alloc(i32 inreg 20)#0
%eQ=getelementptr inbounds i8,i8*%eP,i64 -4
%eR=bitcast i8*%eQ to i32*
store i32 1342177296,i32*%eR,align 4
store i8*%eP,i8**%c,align 8
%eS=getelementptr inbounds i8,i8*%eP,i64 4
%eT=bitcast i8*%eS to i32*
store i32 0,i32*%eT,align 1
%eU=bitcast i8*%eP to i32*
store i32 1,i32*%eU,align 4
%eV=getelementptr inbounds i8,i8*%eP,i64 8
%eW=bitcast i8*%eV to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bH,i64 0,i32 2,i64 0),i8**%eW,align 8
%eX=getelementptr inbounds i8,i8*%eP,i64 16
%eY=bitcast i8*%eX to i32*
store i32 2,i32*%eY,align 4
%eZ=call i8*@sml_alloc(i32 inreg 20)#0
%e0=getelementptr inbounds i8,i8*%eZ,i64 -4
%e1=bitcast i8*%e0 to i32*
store i32 1342177296,i32*%e1,align 4
store i8*%eZ,i8**%d,align 8
%e2=getelementptr inbounds i8,i8*%eZ,i64 4
%e3=bitcast i8*%e2 to i32*
store i32 0,i32*%e3,align 1
%e4=bitcast i8*%eZ to i32*
store i32 6,i32*%e4,align 4
%e5=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%e6=getelementptr inbounds i8,i8*%eZ,i64 8
%e7=bitcast i8*%e6 to i8**
store i8*%e5,i8**%e7,align 8
%e8=getelementptr inbounds i8,i8*%eZ,i64 16
%e9=bitcast i8*%e8 to i32*
store i32 2,i32*%e9,align 4
%fa=call i8*@sml_alloc(i32 inreg 20)#0
%fb=getelementptr inbounds i8,i8*%fa,i64 -4
%fc=bitcast i8*%fb to i32*
store i32 1342177296,i32*%fc,align 4
%fd=load i8*,i8**%d,align 8
%fe=bitcast i8*%fa to i8**
store i8*%fd,i8**%fe,align 8
%ff=getelementptr inbounds i8,i8*%fa,i64 8
%fg=bitcast i8*%ff to i8**
store i8*null,i8**%fg,align 8
%fh=getelementptr inbounds i8,i8*%fa,i64 16
%fi=bitcast i8*%fh to i32*
store i32 3,i32*%fi,align 4
store i8*%fd,i8**%c,align 8
store i8*null,i8**%d,align 8
%fj=call i8*@sml_alloc(i32 inreg 20)#0
%fk=getelementptr inbounds i8,i8*%fj,i64 -4
%fl=bitcast i8*%fk to i32*
store i32 1342177296,i32*%fl,align 4
store i8*%fj,i8**%i,align 8
%fm=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%fn=bitcast i8*%fj to i8**
store i8*%fm,i8**%fn,align 8
%fo=load i8*,i8**%d,align 8
%fp=getelementptr inbounds i8,i8*%fj,i64 8
%fq=bitcast i8*%fp to i8**
store i8*%fo,i8**%fq,align 8
%fr=getelementptr inbounds i8,i8*%fj,i64 16
%fs=bitcast i8*%fr to i32*
store i32 3,i32*%fs,align 4
%ft=bitcast i8**%e to i8***
%fu=load i8**,i8***%ft,align 8
%fv=load i8*,i8**%fu,align 8
store i8*%fv,i8**%d,align 8
%fw=call i8*@sml_alloc(i32 inreg 44)#0
%fx=getelementptr inbounds i8,i8*%fw,i64 -4
%fy=bitcast i8*%fx to i32*
store i32 1342177320,i32*%fy,align 4
store i8*%fw,i8**%c,align 8
%fz=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%fA=bitcast i8*%fw to i8**
store i8*%fz,i8**%fA,align 8
%fB=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%fC=getelementptr inbounds i8,i8*%fw,i64 8
%fD=bitcast i8*%fC to i8**
store i8*%fB,i8**%fD,align 8
%fE=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%fF=getelementptr inbounds i8,i8*%fw,i64 16
%fG=bitcast i8*%fF to i8**
store i8*%fE,i8**%fG,align 8
%fH=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%fI=getelementptr inbounds i8,i8*%fw,i64 24
%fJ=bitcast i8*%fI to i8**
store i8*%fH,i8**%fJ,align 8
%fK=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%fL=getelementptr inbounds i8,i8*%fw,i64 32
%fM=bitcast i8*%fL to i8**
store i8*%fK,i8**%fM,align 8
%fN=getelementptr inbounds i8,i8*%fw,i64 40
%fO=bitcast i8*%fN to i32*
store i32 31,i32*%fO,align 4
%fP=load i8*,i8**%e,align 8
%fQ=getelementptr inbounds i8,i8*%fP,i64 8
%fR=bitcast i8*%fQ to i32*
%fS=load i32,i32*%fR,align 4
store i8*null,i8**%e,align 8
%fT=getelementptr inbounds i8,i8*%fP,i64 12
%fU=bitcast i8*%fT to i32*
%fV=load i32,i32*%fU,align 4
%fW=call i8*@sml_alloc(i32 inreg 20)#0
%fX=getelementptr inbounds i8,i8*%fW,i64 -4
%fY=bitcast i8*%fX to i32*
store i32 1342177296,i32*%fY,align 4
store i8*%fW,i8**%d,align 8
%fZ=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%f0=bitcast i8*%fW to i8**
store i8*%fZ,i8**%f0,align 8
%f1=getelementptr inbounds i8,i8*%fW,i64 8
%f2=bitcast i8*%f1 to i32*
store i32%fS,i32*%f2,align 4
%f3=getelementptr inbounds i8,i8*%fW,i64 12
%f4=bitcast i8*%f3 to i32*
store i32%fV,i32*%f4,align 4
%f5=getelementptr inbounds i8,i8*%fW,i64 16
%f6=bitcast i8*%f5 to i32*
store i32 1,i32*%f6,align 4
%f7=call i8*@sml_alloc(i32 inreg 28)#0
%f8=getelementptr inbounds i8,i8*%f7,i64 -4
%f9=bitcast i8*%f8 to i32*
store i32 1342177304,i32*%f9,align 4
%ga=load i8*,i8**%d,align 8
%gb=bitcast i8*%f7 to i8**
store i8*%ga,i8**%gb,align 8
%gc=getelementptr inbounds i8,i8*%f7,i64 8
%gd=bitcast i8*%gc to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat15formatRecordExpE_481 to void(...)*),void(...)**%gd,align 8
%ge=getelementptr inbounds i8,i8*%f7,i64 16
%gf=bitcast i8*%ge to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat15formatRecordExpE_481 to void(...)*),void(...)**%gf,align 8
%gg=getelementptr inbounds i8,i8*%f7,i64 24
%gh=bitcast i8*%gg to i32*
store i32 -2147483647,i32*%gh,align 4
%gi=load i8*,i8**%f,align 8
%gj=tail call fastcc i8*@_SMLLN10TermFormat15formatRecordExpE_481(i8*inreg%ga,i8*inreg%gi)
ret i8*%gj
}
define internal fastcc i8*@_SMLLN10TermFormat15formatRecordExpE_489(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat15formatRecordExpE_488 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat15formatRecordExpE_488 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat15formatRecordExpE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat15formatRecordExpE_489 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat15formatRecordExpE_489 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLN10TermFormat21formatRecordExpToJsonE_500(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%l,label%k
k:
call void@sml_check(i32 inreg%i)
br label%l
l:
%m=call fastcc i8*@_SMLLN10TermFormat17formatEnclosedMapE_365(i32 inreg 1,i32 inreg 8)
%n=getelementptr inbounds i8,i8*%m,i64 16
%o=bitcast i8*%n to i8*(i8*,i8*)**
%p=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%o,align 8
%q=bitcast i8*%m to i8**
%r=load i8*,i8**%q,align 8
%s=load i8*,i8**@_SMLZN11RecordLabel16format__jsonLabelE,align 8
%t=call fastcc i8*%p(i8*inreg%r,i8*inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*,i8*,i8*,i8*)**
%w=load i8*(i8*,i8*,i8*,i8*,i8*)*,i8*(i8*,i8*,i8*,i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
store i8*%y,i8**%e,align 8
%z=load i8*,i8**%c,align 8
%A=getelementptr inbounds i8,i8*%z,i64 8
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=getelementptr inbounds i8,i8*%z,i64 12
%E=bitcast i8*%D to i32*
%F=load i32,i32*%E,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i8*%G,i8**%f,align 8
store i32 1,i32*%H,align 4
%K=call i8*@sml_alloc(i32 inreg 4)#0
%L=bitcast i8*%K to i32*
%M=getelementptr inbounds i8,i8*%K,i64 -4
%N=bitcast i8*%M to i32*
store i32 4,i32*%N,align 4
store i8*%K,i8**%g,align 8
store i32 8,i32*%L,align 4
%O=call i8*@sml_alloc(i32 inreg 4)#0
%P=bitcast i8*%O to i32*
%Q=getelementptr inbounds i8,i8*%O,i64 -4
%R=bitcast i8*%Q to i32*
store i32 4,i32*%R,align 4
store i8*%O,i8**%h,align 8
store i32%C,i32*%P,align 4
%S=call i8*@sml_alloc(i32 inreg 4)#0
%T=bitcast i8*%S to i32*
%U=getelementptr inbounds i8,i8*%S,i64 -4
%V=bitcast i8*%U to i32*
store i32 4,i32*%V,align 4
store i32%F,i32*%T,align 4
%W=load i8*,i8**%e,align 8
%X=load i8*,i8**%f,align 8
%Y=load i8*,i8**%g,align 8
%Z=load i8*,i8**%h,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%f,align 8
store i8*null,i8**%g,align 8
store i8*null,i8**%h,align 8
%aa=call fastcc i8*%w(i8*inreg%W,i8*inreg%X,i8*inreg%Y,i8*inreg%Z,i8*inreg%S)
%ab=getelementptr inbounds i8,i8*%aa,i64 16
%ac=bitcast i8*%ab to i8*(i8*,i8*)**
%ad=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ac,align 8
%ae=bitcast i8*%aa to i8**
%af=load i8*,i8**%ae,align 8
store i8*%af,i8**%e,align 8
%ag=load i8*,i8**%c,align 8
%ah=getelementptr inbounds i8,i8*%ag,i64 8
%ai=bitcast i8*%ah to i32*
%aj=load i32,i32*%ai,align 4
%ak=getelementptr inbounds i8,i8*%ag,i64 12
%al=bitcast i8*%ak to i32*
%am=load i32,i32*%al,align 4
%an=call fastcc i8*@_SMLFN11RecordLabel3Map10listItemsiE(i32 inreg%aj,i32 inreg%am)
%ao=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%ap=call fastcc i8*%ad(i8*inreg%ao,i8*inreg%an)
%aq=getelementptr inbounds i8,i8*%ap,i64 16
%ar=bitcast i8*%aq to i8*(i8*,i8*)**
%as=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ar,align 8
%at=bitcast i8*%ap to i8**
%au=load i8*,i8**%at,align 8
%av=bitcast i8**%c to i8***
%aw=load i8**,i8***%av,align 8
store i8*null,i8**%c,align 8
%ax=load i8*,i8**%aw,align 8
%ay=call fastcc i8*%as(i8*inreg%au,i8*inreg%ax)
%az=getelementptr inbounds i8,i8*%ay,i64 16
%aA=bitcast i8*%az to i8*(i8*,i8*)**
%aB=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aA,align 8
%aC=bitcast i8*%ay to i8**
%aD=load i8*,i8**%aC,align 8
%aE=load i8*,i8**%d,align 8
%aF=tail call fastcc i8*%aB(i8*inreg%aD,i8*inreg%aE)
ret i8*%aF
}
define internal fastcc i8*@_SMLLN10TermFormat21formatRecordExpToJsonE_501(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%f,align 8
%k=load atomic i32,i32*@sml_check_flag unordered,align 4
%l=icmp eq i32%k,0
br i1%l,label%n,label%m
m:
call void@sml_check(i32 inreg%k)
br label%n
n:
%o=call i8*@sml_alloc(i32 inreg 20)#0
%p=getelementptr inbounds i8,i8*%o,i64 -4
%q=bitcast i8*%p to i32*
store i32 1342177296,i32*%q,align 4
store i8*%o,i8**%c,align 8
%r=getelementptr inbounds i8,i8*%o,i64 4
%s=bitcast i8*%r to i32*
store i32 0,i32*%s,align 1
%t=bitcast i8*%o to i32*
store i32 1,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%o,i64 8
%v=bitcast i8*%u to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bB,i64 0,i32 2,i64 0),i8**%v,align 8
%w=getelementptr inbounds i8,i8*%o,i64 16
%x=bitcast i8*%w to i32*
store i32 2,i32*%x,align 4
%y=call i8*@sml_alloc(i32 inreg 20)#0
%z=getelementptr inbounds i8,i8*%y,i64 -4
%A=bitcast i8*%z to i32*
store i32 1342177296,i32*%A,align 4
store i8*%y,i8**%d,align 8
%B=getelementptr inbounds i8,i8*%y,i64 4
%C=bitcast i8*%B to i32*
store i32 0,i32*%C,align 1
%D=bitcast i8*%y to i32*
store i32 6,i32*%D,align 4
%E=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%F=getelementptr inbounds i8,i8*%y,i64 8
%G=bitcast i8*%F to i8**
store i8*%E,i8**%G,align 8
%H=getelementptr inbounds i8,i8*%y,i64 16
%I=bitcast i8*%H to i32*
store i32 2,i32*%I,align 4
%J=call i8*@sml_alloc(i32 inreg 20)#0
%K=getelementptr inbounds i8,i8*%J,i64 -4
%L=bitcast i8*%K to i32*
store i32 1342177296,i32*%L,align 4
%M=load i8*,i8**%d,align 8
%N=bitcast i8*%J to i8**
store i8*%M,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%J,i64 8
%P=bitcast i8*%O to i8**
store i8*null,i8**%P,align 8
%Q=getelementptr inbounds i8,i8*%J,i64 16
%R=bitcast i8*%Q to i32*
store i32 3,i32*%R,align 4
store i8*%M,i8**%c,align 8
store i8*null,i8**%d,align 8
%S=call i8*@sml_alloc(i32 inreg 20)#0
%T=getelementptr inbounds i8,i8*%S,i64 -4
%U=bitcast i8*%T to i32*
store i32 1342177296,i32*%U,align 4
store i8*%S,i8**%g,align 8
%V=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%W=bitcast i8*%S to i8**
store i8*%V,i8**%W,align 8
%X=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%Y=getelementptr inbounds i8,i8*%S,i64 8
%Z=bitcast i8*%Y to i8**
store i8*%X,i8**%Z,align 8
%aa=getelementptr inbounds i8,i8*%S,i64 16
%ab=bitcast i8*%aa to i32*
store i32 3,i32*%ab,align 4
%ac=call i8*@sml_alloc(i32 inreg 20)#0
%ad=getelementptr inbounds i8,i8*%ac,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 1342177296,i32*%ae,align 4
store i8*%ac,i8**%c,align 8
%af=getelementptr inbounds i8,i8*%ac,i64 4
%ag=bitcast i8*%af to i32*
store i32 0,i32*%ag,align 1
%ah=bitcast i8*%ac to i32*
store i32 1,i32*%ah,align 4
%ai=getelementptr inbounds i8,i8*%ac,i64 8
%aj=bitcast i8*%ai to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bd,i64 0,i32 2,i64 0),i8**%aj,align 8
%ak=getelementptr inbounds i8,i8*%ac,i64 16
%al=bitcast i8*%ak to i32*
store i32 2,i32*%al,align 4
%am=call i8*@sml_alloc(i32 inreg 20)#0
%an=getelementptr inbounds i8,i8*%am,i64 -4
%ao=bitcast i8*%an to i32*
store i32 1342177296,i32*%ao,align 4
store i8*%am,i8**%d,align 8
%ap=getelementptr inbounds i8,i8*%am,i64 4
%aq=bitcast i8*%ap to i32*
store i32 0,i32*%aq,align 1
%ar=bitcast i8*%am to i32*
store i32 6,i32*%ar,align 4
%as=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%at=getelementptr inbounds i8,i8*%am,i64 8
%au=bitcast i8*%at to i8**
store i8*%as,i8**%au,align 8
%av=getelementptr inbounds i8,i8*%am,i64 16
%aw=bitcast i8*%av to i32*
store i32 2,i32*%aw,align 4
%ax=call i8*@sml_alloc(i32 inreg 20)#0
%ay=getelementptr inbounds i8,i8*%ax,i64 -4
%az=bitcast i8*%ay to i32*
store i32 1342177296,i32*%az,align 4
%aA=load i8*,i8**%d,align 8
%aB=bitcast i8*%ax to i8**
store i8*%aA,i8**%aB,align 8
%aC=getelementptr inbounds i8,i8*%ax,i64 8
%aD=bitcast i8*%aC to i8**
store i8*null,i8**%aD,align 8
%aE=getelementptr inbounds i8,i8*%ax,i64 16
%aF=bitcast i8*%aE to i32*
store i32 3,i32*%aF,align 4
store i8*%aA,i8**%c,align 8
store i8*null,i8**%d,align 8
%aG=call i8*@sml_alloc(i32 inreg 20)#0
%aH=getelementptr inbounds i8,i8*%aG,i64 -4
%aI=bitcast i8*%aH to i32*
store i32 1342177296,i32*%aI,align 4
store i8*%aG,i8**%h,align 8
%aJ=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aK=bitcast i8*%aG to i8**
store i8*%aJ,i8**%aK,align 8
%aL=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aM=getelementptr inbounds i8,i8*%aG,i64 8
%aN=bitcast i8*%aM to i8**
store i8*%aL,i8**%aN,align 8
%aO=getelementptr inbounds i8,i8*%aG,i64 16
%aP=bitcast i8*%aO to i32*
store i32 3,i32*%aP,align 4
%aQ=call i8*@sml_alloc(i32 inreg 20)#0
%aR=getelementptr inbounds i8,i8*%aQ,i64 -4
%aS=bitcast i8*%aR to i32*
store i32 1342177296,i32*%aS,align 4
store i8*%aQ,i8**%c,align 8
%aT=getelementptr inbounds i8,i8*%aQ,i64 4
%aU=bitcast i8*%aT to i32*
store i32 0,i32*%aU,align 1
%aV=bitcast i8*%aQ to i32*
store i32 1,i32*%aV,align 4
%aW=getelementptr inbounds i8,i8*%aQ,i64 8
%aX=bitcast i8*%aW to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@aZ,i64 0,i32 2,i64 0),i8**%aX,align 8
%aY=getelementptr inbounds i8,i8*%aQ,i64 16
%aZ=bitcast i8*%aY to i32*
store i32 2,i32*%aZ,align 4
%a0=call i8*@sml_alloc(i32 inreg 20)#0
%a1=getelementptr inbounds i8,i8*%a0,i64 -4
%a2=bitcast i8*%a1 to i32*
store i32 1342177296,i32*%a2,align 4
store i8*%a0,i8**%d,align 8
%a3=getelementptr inbounds i8,i8*%a0,i64 4
%a4=bitcast i8*%a3 to i32*
store i32 0,i32*%a4,align 1
%a5=bitcast i8*%a0 to i32*
store i32 6,i32*%a5,align 4
%a6=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%a7=getelementptr inbounds i8,i8*%a0,i64 8
%a8=bitcast i8*%a7 to i8**
store i8*%a6,i8**%a8,align 8
%a9=getelementptr inbounds i8,i8*%a0,i64 16
%ba=bitcast i8*%a9 to i32*
store i32 2,i32*%ba,align 4
%bb=call i8*@sml_alloc(i32 inreg 20)#0
%bc=getelementptr inbounds i8,i8*%bb,i64 -4
%bd=bitcast i8*%bc to i32*
store i32 1342177296,i32*%bd,align 4
%be=load i8*,i8**%d,align 8
%bf=bitcast i8*%bb to i8**
store i8*%be,i8**%bf,align 8
%bg=getelementptr inbounds i8,i8*%bb,i64 8
%bh=bitcast i8*%bg to i8**
store i8*null,i8**%bh,align 8
%bi=getelementptr inbounds i8,i8*%bb,i64 16
%bj=bitcast i8*%bi to i32*
store i32 3,i32*%bj,align 4
store i8*%be,i8**%c,align 8
store i8*null,i8**%d,align 8
%bk=call i8*@sml_alloc(i32 inreg 20)#0
%bl=getelementptr inbounds i8,i8*%bk,i64 -4
%bm=bitcast i8*%bl to i32*
store i32 1342177296,i32*%bm,align 4
store i8*%bk,i8**%i,align 8
%bn=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bo=bitcast i8*%bk to i8**
store i8*%bn,i8**%bo,align 8
%bp=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bq=getelementptr inbounds i8,i8*%bk,i64 8
%br=bitcast i8*%bq to i8**
store i8*%bp,i8**%br,align 8
%bs=getelementptr inbounds i8,i8*%bk,i64 16
%bt=bitcast i8*%bs to i32*
store i32 3,i32*%bt,align 4
%bu=call i8*@sml_alloc(i32 inreg 20)#0
%bv=getelementptr inbounds i8,i8*%bu,i64 -4
%bw=bitcast i8*%bv to i32*
store i32 1342177296,i32*%bw,align 4
store i8*%bu,i8**%j,align 8
%bx=bitcast i8*%bu to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@i,i64 0,i32 2)to i8*),i8**%bx,align 8
%by=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%bz=getelementptr inbounds i8,i8*%bu,i64 8
%bA=bitcast i8*%bz to i8**
store i8*%by,i8**%bA,align 8
%bB=getelementptr inbounds i8,i8*%bu,i64 16
%bC=bitcast i8*%bB to i32*
store i32 3,i32*%bC,align 4
%bD=call i8*@sml_alloc(i32 inreg 20)#0
%bE=getelementptr inbounds i8,i8*%bD,i64 -4
%bF=bitcast i8*%bE to i32*
store i32 1342177296,i32*%bF,align 4
store i8*%bD,i8**%c,align 8
%bG=getelementptr inbounds i8,i8*%bD,i64 4
%bH=bitcast i8*%bG to i32*
store i32 0,i32*%bH,align 1
%bI=bitcast i8*%bD to i32*
store i32 1,i32*%bI,align 4
%bJ=getelementptr inbounds i8,i8*%bD,i64 8
%bK=bitcast i8*%bJ to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bH,i64 0,i32 2,i64 0),i8**%bK,align 8
%bL=getelementptr inbounds i8,i8*%bD,i64 16
%bM=bitcast i8*%bL to i32*
store i32 2,i32*%bM,align 4
%bN=call i8*@sml_alloc(i32 inreg 20)#0
%bO=getelementptr inbounds i8,i8*%bN,i64 -4
%bP=bitcast i8*%bO to i32*
store i32 1342177296,i32*%bP,align 4
store i8*%bN,i8**%d,align 8
%bQ=getelementptr inbounds i8,i8*%bN,i64 4
%bR=bitcast i8*%bQ to i32*
store i32 0,i32*%bR,align 1
%bS=bitcast i8*%bN to i32*
store i32 6,i32*%bS,align 4
%bT=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bU=getelementptr inbounds i8,i8*%bN,i64 8
%bV=bitcast i8*%bU to i8**
store i8*%bT,i8**%bV,align 8
%bW=getelementptr inbounds i8,i8*%bN,i64 16
%bX=bitcast i8*%bW to i32*
store i32 2,i32*%bX,align 4
%bY=call i8*@sml_alloc(i32 inreg 20)#0
%bZ=getelementptr inbounds i8,i8*%bY,i64 -4
%b0=bitcast i8*%bZ to i32*
store i32 1342177296,i32*%b0,align 4
%b1=load i8*,i8**%d,align 8
%b2=bitcast i8*%bY to i8**
store i8*%b1,i8**%b2,align 8
%b3=getelementptr inbounds i8,i8*%bY,i64 8
%b4=bitcast i8*%b3 to i8**
store i8*null,i8**%b4,align 8
%b5=getelementptr inbounds i8,i8*%bY,i64 16
%b6=bitcast i8*%b5 to i32*
store i32 3,i32*%b6,align 4
store i8*%b1,i8**%c,align 8
store i8*null,i8**%d,align 8
%b7=call i8*@sml_alloc(i32 inreg 20)#0
%b8=getelementptr inbounds i8,i8*%b7,i64 -4
%b9=bitcast i8*%b8 to i32*
store i32 1342177296,i32*%b9,align 4
store i8*%b7,i8**%i,align 8
%ca=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cb=bitcast i8*%b7 to i8**
store i8*%ca,i8**%cb,align 8
%cc=load i8*,i8**%d,align 8
%cd=getelementptr inbounds i8,i8*%b7,i64 8
%ce=bitcast i8*%cd to i8**
store i8*%cc,i8**%ce,align 8
%cf=getelementptr inbounds i8,i8*%b7,i64 16
%cg=bitcast i8*%cf to i32*
store i32 3,i32*%cg,align 4
%ch=bitcast i8**%e to i8***
%ci=load i8**,i8***%ch,align 8
%cj=load i8*,i8**%ci,align 8
store i8*%cj,i8**%d,align 8
%ck=call i8*@sml_alloc(i32 inreg 44)#0
%cl=getelementptr inbounds i8,i8*%ck,i64 -4
%cm=bitcast i8*%cl to i32*
store i32 1342177320,i32*%cm,align 4
store i8*%ck,i8**%c,align 8
%cn=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%co=bitcast i8*%ck to i8**
store i8*%cn,i8**%co,align 8
%cp=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%cq=getelementptr inbounds i8,i8*%ck,i64 8
%cr=bitcast i8*%cq to i8**
store i8*%cp,i8**%cr,align 8
%cs=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%ct=getelementptr inbounds i8,i8*%ck,i64 16
%cu=bitcast i8*%ct to i8**
store i8*%cs,i8**%cu,align 8
%cv=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%cw=getelementptr inbounds i8,i8*%ck,i64 24
%cx=bitcast i8*%cw to i8**
store i8*%cv,i8**%cx,align 8
%cy=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%cz=getelementptr inbounds i8,i8*%ck,i64 32
%cA=bitcast i8*%cz to i8**
store i8*%cy,i8**%cA,align 8
%cB=getelementptr inbounds i8,i8*%ck,i64 40
%cC=bitcast i8*%cB to i32*
store i32 31,i32*%cC,align 4
%cD=load i8*,i8**%e,align 8
%cE=getelementptr inbounds i8,i8*%cD,i64 8
%cF=bitcast i8*%cE to i32*
%cG=load i32,i32*%cF,align 4
store i8*null,i8**%e,align 8
%cH=getelementptr inbounds i8,i8*%cD,i64 12
%cI=bitcast i8*%cH to i32*
%cJ=load i32,i32*%cI,align 4
%cK=call i8*@sml_alloc(i32 inreg 20)#0
%cL=getelementptr inbounds i8,i8*%cK,i64 -4
%cM=bitcast i8*%cL to i32*
store i32 1342177296,i32*%cM,align 4
store i8*%cK,i8**%d,align 8
%cN=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cO=bitcast i8*%cK to i8**
store i8*%cN,i8**%cO,align 8
%cP=getelementptr inbounds i8,i8*%cK,i64 8
%cQ=bitcast i8*%cP to i32*
store i32%cG,i32*%cQ,align 4
%cR=getelementptr inbounds i8,i8*%cK,i64 12
%cS=bitcast i8*%cR to i32*
store i32%cJ,i32*%cS,align 4
%cT=getelementptr inbounds i8,i8*%cK,i64 16
%cU=bitcast i8*%cT to i32*
store i32 1,i32*%cU,align 4
%cV=call i8*@sml_alloc(i32 inreg 28)#0
%cW=getelementptr inbounds i8,i8*%cV,i64 -4
%cX=bitcast i8*%cW to i32*
store i32 1342177304,i32*%cX,align 4
%cY=load i8*,i8**%d,align 8
%cZ=bitcast i8*%cV to i8**
store i8*%cY,i8**%cZ,align 8
%c0=getelementptr inbounds i8,i8*%cV,i64 8
%c1=bitcast i8*%c0 to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat21formatRecordExpToJsonE_500 to void(...)*),void(...)**%c1,align 8
%c2=getelementptr inbounds i8,i8*%cV,i64 16
%c3=bitcast i8*%c2 to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat21formatRecordExpToJsonE_500 to void(...)*),void(...)**%c3,align 8
%c4=getelementptr inbounds i8,i8*%cV,i64 24
%c5=bitcast i8*%c4 to i32*
store i32 -2147483647,i32*%c5,align 4
%c6=load i8*,i8**%f,align 8
%c7=tail call fastcc i8*@_SMLLN10TermFormat21formatRecordExpToJsonE_500(i8*inreg%cY,i8*inreg%c6)
ret i8*%c7
}
define internal fastcc i8*@_SMLLN10TermFormat21formatRecordExpToJsonE_502(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat21formatRecordExpToJsonE_501 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat21formatRecordExpToJsonE_501 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat21formatRecordExpToJsonE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat21formatRecordExpToJsonE_502 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat21formatRecordExpToJsonE_502 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_513(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%l,label%k
k:
call void@sml_check(i32 inreg%i)
br label%l
l:
%m=call fastcc i8*@_SMLLN10TermFormat17formatEnclosedMapE_365(i32 inreg 1,i32 inreg 8)
%n=getelementptr inbounds i8,i8*%m,i64 16
%o=bitcast i8*%n to i8*(i8*,i8*)**
%p=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%o,align 8
%q=bitcast i8*%m to i8**
%r=load i8*,i8**%q,align 8
%s=load i8*,i8**@_SMLZN11RecordLabel12format__labelE,align 8
%t=call fastcc i8*%p(i8*inreg%r,i8*inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*,i8*,i8*,i8*)**
%w=load i8*(i8*,i8*,i8*,i8*,i8*)*,i8*(i8*,i8*,i8*,i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
store i8*%y,i8**%e,align 8
%z=load i8*,i8**%c,align 8
%A=getelementptr inbounds i8,i8*%z,i64 8
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=getelementptr inbounds i8,i8*%z,i64 12
%E=bitcast i8*%D to i32*
%F=load i32,i32*%E,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i8*%G,i8**%f,align 8
store i32 1,i32*%H,align 4
%K=call i8*@sml_alloc(i32 inreg 4)#0
%L=bitcast i8*%K to i32*
%M=getelementptr inbounds i8,i8*%K,i64 -4
%N=bitcast i8*%M to i32*
store i32 4,i32*%N,align 4
store i8*%K,i8**%g,align 8
store i32 8,i32*%L,align 4
%O=call i8*@sml_alloc(i32 inreg 4)#0
%P=bitcast i8*%O to i32*
%Q=getelementptr inbounds i8,i8*%O,i64 -4
%R=bitcast i8*%Q to i32*
store i32 4,i32*%R,align 4
store i8*%O,i8**%h,align 8
store i32%C,i32*%P,align 4
%S=call i8*@sml_alloc(i32 inreg 4)#0
%T=bitcast i8*%S to i32*
%U=getelementptr inbounds i8,i8*%S,i64 -4
%V=bitcast i8*%U to i32*
store i32 4,i32*%V,align 4
store i32%F,i32*%T,align 4
%W=load i8*,i8**%e,align 8
%X=load i8*,i8**%f,align 8
%Y=load i8*,i8**%g,align 8
%Z=load i8*,i8**%h,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%f,align 8
store i8*null,i8**%g,align 8
store i8*null,i8**%h,align 8
%aa=call fastcc i8*%w(i8*inreg%W,i8*inreg%X,i8*inreg%Y,i8*inreg%Z,i8*inreg%S)
%ab=getelementptr inbounds i8,i8*%aa,i64 16
%ac=bitcast i8*%ab to i8*(i8*,i8*)**
%ad=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ac,align 8
%ae=bitcast i8*%aa to i8**
%af=load i8*,i8**%ae,align 8
store i8*%af,i8**%e,align 8
%ag=load i8*,i8**%c,align 8
%ah=getelementptr inbounds i8,i8*%ag,i64 8
%ai=bitcast i8*%ah to i32*
%aj=load i32,i32*%ai,align 4
%ak=getelementptr inbounds i8,i8*%ag,i64 12
%al=bitcast i8*%ak to i32*
%am=load i32,i32*%al,align 4
%an=call fastcc i8*@_SMLFN11RecordLabel3Map10listItemsiE(i32 inreg%aj,i32 inreg%am)
%ao=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%ap=call fastcc i8*%ad(i8*inreg%ao,i8*inreg%an)
%aq=getelementptr inbounds i8,i8*%ap,i64 16
%ar=bitcast i8*%aq to i8*(i8*,i8*)**
%as=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ar,align 8
%at=bitcast i8*%ap to i8**
%au=load i8*,i8**%at,align 8
%av=bitcast i8**%c to i8***
%aw=load i8**,i8***%av,align 8
store i8*null,i8**%c,align 8
%ax=load i8*,i8**%aw,align 8
%ay=call fastcc i8*%as(i8*inreg%au,i8*inreg%ax)
%az=getelementptr inbounds i8,i8*%ay,i64 16
%aA=bitcast i8*%az to i8*(i8*,i8*)**
%aB=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aA,align 8
%aC=bitcast i8*%ay to i8**
%aD=load i8*,i8**%aC,align 8
%aE=load i8*,i8**%d,align 8
%aF=tail call fastcc i8*%aB(i8*inreg%aD,i8*inreg%aE)
ret i8*%aF
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_514(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_516(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_519(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=load i8*,i8**%d,align 8
%m=bitcast i8**%c to i8***
%n=load i8**,i8***%m,align 8
br label%o
o:
%p=phi i8**[%n,%k],[%j,%i]
%q=phi i8*[%l,%k],[%b,%i]
store i8*null,i8**%d,align 8
%r=load i8*,i8**%p,align 8
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
store i8*null,i8**%c,align 8
%v=bitcast i8**%p to i8***
%w=load i8**,i8***%v,align 8
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%u(i8*inreg%x,i8*inreg%q)
%z=getelementptr inbounds i8,i8*%y,i64 16
%A=bitcast i8*%z to i8*(i8*,i8*,i8*,i8*,i8*)**
%B=load i8*(i8*,i8*,i8*,i8*,i8*)*,i8*(i8*,i8*,i8*,i8*,i8*)**%A,align 8
%C=bitcast i8*%y to i8**
%D=load i8*,i8**%C,align 8
store i8*%D,i8**%c,align 8
%E=call i8*@sml_alloc(i32 inreg 4)#0
%F=bitcast i8*%E to i32*
%G=getelementptr inbounds i8,i8*%E,i64 -4
%H=bitcast i8*%G to i32*
store i32 4,i32*%H,align 4
store i8*%E,i8**%d,align 8
store i32 1,i32*%F,align 4
%I=call i8*@sml_alloc(i32 inreg 4)#0
%J=bitcast i8*%I to i32*
%K=getelementptr inbounds i8,i8*%I,i64 -4
%L=bitcast i8*%K to i32*
store i32 4,i32*%L,align 4
store i8*%I,i8**%e,align 8
store i32 8,i32*%J,align 4
%M=call i8*@sml_alloc(i32 inreg 4)#0
%N=bitcast i8*%M to i32*
%O=getelementptr inbounds i8,i8*%M,i64 -4
%P=bitcast i8*%O to i32*
store i32 4,i32*%P,align 4
store i8*%M,i8**%f,align 8
store i32 1,i32*%N,align 4
%Q=call i8*@sml_alloc(i32 inreg 4)#0
%R=bitcast i8*%Q to i32*
%S=getelementptr inbounds i8,i8*%Q,i64 -4
%T=bitcast i8*%S to i32*
store i32 4,i32*%T,align 4
store i32 8,i32*%R,align 4
%U=load i8*,i8**%c,align 8
%V=load i8*,i8**%d,align 8
%W=load i8*,i8**%e,align 8
%X=load i8*,i8**%f,align 8
%Y=call fastcc i8*%B(i8*inreg%U,i8*inreg%V,i8*inreg%W,i8*inreg%X,i8*inreg%Q)
ret i8*%Y
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_522(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=load i8*,i8**%d,align 8
%m=bitcast i8**%c to i8***
%n=load i8**,i8***%m,align 8
br label%o
o:
%p=phi i8**[%n,%k],[%j,%i]
%q=phi i8*[%l,%k],[%b,%i]
store i8*null,i8**%d,align 8
%r=load i8*,i8**%p,align 8
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
store i8*null,i8**%c,align 8
%v=bitcast i8**%p to i8***
%w=load i8**,i8***%v,align 8
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%u(i8*inreg%x,i8*inreg%q)
%z=getelementptr inbounds i8,i8*%y,i64 16
%A=bitcast i8*%z to i8*(i8*,i8*,i8*,i8*,i8*)**
%B=load i8*(i8*,i8*,i8*,i8*,i8*)*,i8*(i8*,i8*,i8*,i8*,i8*)**%A,align 8
%C=bitcast i8*%y to i8**
%D=load i8*,i8**%C,align 8
store i8*%D,i8**%c,align 8
%E=call i8*@sml_alloc(i32 inreg 4)#0
%F=bitcast i8*%E to i32*
%G=getelementptr inbounds i8,i8*%E,i64 -4
%H=bitcast i8*%G to i32*
store i32 4,i32*%H,align 4
store i8*%E,i8**%d,align 8
store i32 1,i32*%F,align 4
%I=call i8*@sml_alloc(i32 inreg 4)#0
%J=bitcast i8*%I to i32*
%K=getelementptr inbounds i8,i8*%I,i64 -4
%L=bitcast i8*%K to i32*
store i32 4,i32*%L,align 4
store i8*%I,i8**%e,align 8
store i32 8,i32*%J,align 4
%M=call i8*@sml_alloc(i32 inreg 4)#0
%N=bitcast i8*%M to i32*
%O=getelementptr inbounds i8,i8*%M,i64 -4
%P=bitcast i8*%O to i32*
store i32 4,i32*%P,align 4
store i8*%M,i8**%f,align 8
store i32 1,i32*%N,align 4
%Q=call i8*@sml_alloc(i32 inreg 4)#0
%R=bitcast i8*%Q to i32*
%S=getelementptr inbounds i8,i8*%Q,i64 -4
%T=bitcast i8*%S to i32*
store i32 4,i32*%T,align 4
store i32 8,i32*%R,align 4
%U=load i8*,i8**%c,align 8
%V=load i8*,i8**%d,align 8
%W=load i8*,i8**%e,align 8
%X=load i8*,i8**%f,align 8
%Y=call fastcc i8*%B(i8*inreg%U,i8*inreg%V,i8*inreg%W,i8*inreg%X,i8*inreg%Q)
ret i8*%Y
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_523(i8*inreg%a)#2 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%g,label%f
f:
call void@sml_check(i32 inreg%d)
br label%g
g:
%h=call fastcc i8*@_SMLLN10TermFormat10FormatComb6guard__E_247(i32 inreg 1,i32 inreg 8)
%i=getelementptr inbounds i8,i8*%h,i64 16
%j=bitcast i8*%i to i8*(i8*,i8*)**
%k=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%j,align 8
%l=bitcast i8*%h to i8**
%m=load i8*,i8**%l,align 8
%n=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%o=call fastcc i8*%k(i8*inreg%m,i8*inreg%n)
store i8*%o,i8**%b,align 8
%p=call i8*@sml_alloc(i32 inreg 12)#0
%q=getelementptr inbounds i8,i8*%p,i64 -4
%r=bitcast i8*%q to i32*
store i32 1342177288,i32*%r,align 4
store i8*%p,i8**%c,align 8
%s=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%t=bitcast i8*%p to i8**
store i8*%s,i8**%t,align 8
%u=getelementptr inbounds i8,i8*%p,i64 8
%v=bitcast i8*%u to i32*
store i32 1,i32*%v,align 4
%w=call i8*@sml_alloc(i32 inreg 28)#0
%x=getelementptr inbounds i8,i8*%w,i64 -4
%y=bitcast i8*%x to i32*
store i32 1342177304,i32*%y,align 4
%z=load i8*,i8**%c,align 8
%A=bitcast i8*%w to i8**
store i8*%z,i8**%A,align 8
%B=getelementptr inbounds i8,i8*%w,i64 8
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_522 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%w,i64 16
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_522 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%w,i64 24
%G=bitcast i8*%F to i32*
store i32 -2147483647,i32*%G,align 4
ret i8*%w
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_527(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%m
i:
call void@sml_check(i32 inreg%e)
%j=load i8*,i8**%d,align 8
%k=bitcast i8**%c to i8***
%l=load i8**,i8***%k,align 8
br label%m
m:
%n=phi i8**[%l,%i],[%h,%g]
%o=phi i8*[%j,%i],[%b,%g]
store i8*null,i8**%d,align 8
%p=load i8*,i8**%n,align 8
%q=getelementptr inbounds i8,i8*%p,i64 16
%r=bitcast i8*%q to i8*(i8*,i8*)**
%s=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%r,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8**%n to i8***
%u=load i8**,i8***%t,align 8
%v=load i8*,i8**%u,align 8
%w=call fastcc i8*%s(i8*inreg%v,i8*inreg%o)
%x=getelementptr inbounds i8,i8*%w,i64 16
%y=bitcast i8*%x to i8*(i8*,i8*,i8*)**
%z=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%y,align 8
%A=bitcast i8*%w to i8**
%B=load i8*,i8**%A,align 8
store i8*%B,i8**%c,align 8
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%d,align 8
store i32 1,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32 8,i32*%H,align 4
%K=load i8*,i8**%c,align 8
%L=load i8*,i8**%d,align 8
%M=tail call fastcc i8*%z(i8*inreg%K,i8*inreg%L,i8*inreg%G)
ret i8*%M
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_528(i8*inreg%a)#2 gc"smlsharp"{
j:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%h,label%f
f:
call void@sml_check(i32 inreg%d)
%g=load i8*,i8**%b,align 8
br label%h
h:
%i=phi i8*[%g,%f],[%a,%j]
store i8*null,i8**%b,align 8
%k=call fastcc i8*@_SMLLN10TermFormat10FormatComb1_DE_227(i8*inreg%i)#0
store i8*%k,i8**%b,align 8
%l=call i8*@sml_alloc(i32 inreg 12)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177288,i32*%n,align 4
store i8*%l,i8**%c,align 8
%o=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%c,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_527 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_527 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_530(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_532(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_535(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%m
i:
call void@sml_check(i32 inreg%e)
%j=load i8*,i8**%d,align 8
%k=bitcast i8**%c to i8***
%l=load i8**,i8***%k,align 8
br label%m
m:
%n=phi i8**[%l,%i],[%h,%g]
%o=phi i8*[%j,%i],[%b,%g]
store i8*null,i8**%d,align 8
%p=load i8*,i8**%n,align 8
%q=getelementptr inbounds i8,i8*%p,i64 16
%r=bitcast i8*%q to i8*(i8*,i8*)**
%s=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%r,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8**%n to i8***
%u=load i8**,i8***%t,align 8
%v=load i8*,i8**%u,align 8
%w=call fastcc i8*%s(i8*inreg%v,i8*inreg%o)
%x=getelementptr inbounds i8,i8*%w,i64 16
%y=bitcast i8*%x to i8*(i8*,i8*,i8*)**
%z=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%y,align 8
%A=bitcast i8*%w to i8**
%B=load i8*,i8**%A,align 8
store i8*%B,i8**%c,align 8
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%d,align 8
store i32 1,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32 8,i32*%H,align 4
%K=load i8*,i8**%c,align 8
%L=load i8*,i8**%d,align 8
%M=tail call fastcc i8*%z(i8*inreg%K,i8*inreg%L,i8*inreg%G)
ret i8*%M
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_536(i8*inreg%a)#2 gc"smlsharp"{
j:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%h,label%f
f:
call void@sml_check(i32 inreg%d)
%g=load i8*,i8**%b,align 8
br label%h
h:
%i=phi i8*[%g,%f],[%a,%j]
store i8*null,i8**%b,align 8
%k=call fastcc i8*@_SMLLN10TermFormat10FormatComb5spaceE_204(i8*inreg%i)#0
%l=getelementptr inbounds i8,i8*%k,i64 16
%m=bitcast i8*%l to i8*(i8*,i8*,i8*)**
%n=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%m,align 8
%o=bitcast i8*%k to i8**
%p=load i8*,i8**%o,align 8
store i8*%p,i8**%b,align 8
%q=call i8*@sml_alloc(i32 inreg 4)#0
%r=bitcast i8*%q to i32*
%s=getelementptr inbounds i8,i8*%q,i64 -4
%t=bitcast i8*%s to i32*
store i32 4,i32*%t,align 4
store i8*%q,i8**%c,align 8
store i32 1,i32*%r,align 4
%u=call i8*@sml_alloc(i32 inreg 4)#0
%v=bitcast i8*%u to i32*
%w=getelementptr inbounds i8,i8*%u,i64 -4
%x=bitcast i8*%w to i32*
store i32 4,i32*%x,align 4
store i32 8,i32*%v,align 4
%y=load i8*,i8**%b,align 8
%z=load i8*,i8**%c,align 8
%A=tail call fastcc i8*%n(i8*inreg%y,i8*inreg%z,i8*inreg%u)
ret i8*%A
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_538(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%m
i:
call void@sml_check(i32 inreg%e)
%j=load i8*,i8**%d,align 8
%k=bitcast i8**%c to i8***
%l=load i8**,i8***%k,align 8
br label%m
m:
%n=phi i8**[%l,%i],[%h,%g]
%o=phi i8*[%j,%i],[%b,%g]
store i8*null,i8**%d,align 8
%p=load i8*,i8**%n,align 8
%q=getelementptr inbounds i8,i8*%p,i64 16
%r=bitcast i8*%q to i8*(i8*,i8*)**
%s=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%r,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8**%n to i8***
%u=load i8**,i8***%t,align 8
%v=load i8*,i8**%u,align 8
%w=call fastcc i8*%s(i8*inreg%v,i8*inreg%o)
%x=getelementptr inbounds i8,i8*%w,i64 16
%y=bitcast i8*%x to i8*(i8*,i8*,i8*)**
%z=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%y,align 8
%A=bitcast i8*%w to i8**
%B=load i8*,i8**%A,align 8
store i8*%B,i8**%c,align 8
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%d,align 8
store i32 1,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32 8,i32*%H,align 4
%K=load i8*,i8**%c,align 8
%L=load i8*,i8**%d,align 8
%M=tail call fastcc i8*%z(i8*inreg%K,i8*inreg%L,i8*inreg%G)
ret i8*%M
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_539(i8*inreg%a)#2 gc"smlsharp"{
j:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%h,label%f
f:
call void@sml_check(i32 inreg%d)
%g=load i8*,i8**%b,align 8
br label%h
h:
%i=phi i8*[%g,%f],[%a,%j]
store i8*null,i8**%b,align 8
%k=call fastcc i8*@_SMLLN10TermFormat10FormatComb4textE_197(i8*inreg%i)#0
store i8*%k,i8**%b,align 8
%l=call i8*@sml_alloc(i32 inreg 12)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177288,i32*%n,align 4
store i8*%l,i8**%c,align 8
%o=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%c,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_538 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_538 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_542(i8*inreg%a)#2 gc"smlsharp"{
j:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%h,label%f
f:
call void@sml_check(i32 inreg%d)
%g=load i8*,i8**%b,align 8
br label%h
h:
%i=phi i8*[%g,%f],[%a,%j]
store i8*null,i8**%b,align 8
%k=call fastcc i8*@_SMLLN10TermFormat10FormatComb6dspaceE_211(i8*inreg%i)#0
%l=getelementptr inbounds i8,i8*%k,i64 16
%m=bitcast i8*%l to i8*(i8*,i8*,i8*)**
%n=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%m,align 8
%o=bitcast i8*%k to i8**
%p=load i8*,i8**%o,align 8
store i8*%p,i8**%b,align 8
%q=call i8*@sml_alloc(i32 inreg 4)#0
%r=bitcast i8*%q to i32*
%s=getelementptr inbounds i8,i8*%q,i64 -4
%t=bitcast i8*%s to i32*
store i32 4,i32*%t,align 4
store i8*%q,i8**%c,align 8
store i32 1,i32*%r,align 4
%u=call i8*@sml_alloc(i32 inreg 4)#0
%v=bitcast i8*%u to i32*
%w=getelementptr inbounds i8,i8*%u,i64 -4
%x=bitcast i8*%w to i32*
store i32 4,i32*%x,align 4
store i32 8,i32*%v,align 4
%y=load i8*,i8**%b,align 8
%z=load i8*,i8**%c,align 8
%A=tail call fastcc i8*%n(i8*inreg%y,i8*inreg%z,i8*inreg%u)
ret i8*%A
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_544(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%m
i:
call void@sml_check(i32 inreg%e)
%j=load i8*,i8**%d,align 8
%k=bitcast i8**%c to i8***
%l=load i8**,i8***%k,align 8
br label%m
m:
%n=phi i8**[%l,%i],[%h,%g]
%o=phi i8*[%j,%i],[%b,%g]
store i8*null,i8**%d,align 8
%p=load i8*,i8**%n,align 8
%q=getelementptr inbounds i8,i8*%p,i64 16
%r=bitcast i8*%q to i8*(i8*,i8*)**
%s=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%r,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8**%n to i8***
%u=load i8**,i8***%t,align 8
%v=load i8*,i8**%u,align 8
%w=call fastcc i8*%s(i8*inreg%v,i8*inreg%o)
%x=getelementptr inbounds i8,i8*%w,i64 16
%y=bitcast i8*%x to i8*(i8*,i8*,i8*)**
%z=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%y,align 8
%A=bitcast i8*%w to i8**
%B=load i8*,i8**%A,align 8
store i8*%B,i8**%c,align 8
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%d,align 8
store i32 1,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32 8,i32*%H,align 4
%K=load i8*,i8**%c,align 8
%L=load i8*,i8**%d,align 8
%M=tail call fastcc i8*%z(i8*inreg%K,i8*inreg%L,i8*inreg%G)
ret i8*%M
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_545(i8*inreg%a)#2 gc"smlsharp"{
j:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%h,label%f
f:
call void@sml_check(i32 inreg%d)
%g=load i8*,i8**%b,align 8
br label%h
h:
%i=phi i8*[%g,%f],[%a,%j]
store i8*null,i8**%b,align 8
%k=call fastcc i8*@_SMLLN10TermFormat10FormatComb1_DE_227(i8*inreg%i)#0
store i8*%k,i8**%b,align 8
%l=call i8*@sml_alloc(i32 inreg 12)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177288,i32*%n,align 4
store i8*%l,i8**%c,align 8
%o=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%c,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_544 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_544 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_547(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=getelementptr inbounds i8,i8*%h,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
%m=getelementptr inbounds i8,i8*%l,i64 16
%n=bitcast i8*%m to i8*(i8*,i8*)**
%o=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%n,align 8
%p=bitcast i8*%l to i8**
%q=load i8*,i8**%p,align 8
store i8*%q,i8**%b,align 8
%r=bitcast i8*%h to i8**
%s=load i8*,i8**%r,align 8
%t=getelementptr inbounds i8,i8*%s,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%s to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
%A=tail call fastcc i8*%o(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_549(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
n:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%l,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%c,align 8
%k=load i8*,i8**%e,align 8
br label%l
l:
%m=phi i8*[%k,%i],[%a,%n]
%o=phi i8*[%j,%i],[%b,%n]
%p=getelementptr inbounds i8,i8*%m,i64 12
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=add i32%r,-1
%t=sub i32 0,%r
%u=and i32%s,%t
%v=add i32%r,7
%w=add i32%v,%u
%x=and i32%w,-8
%y=sext i32%x to i64
%z=getelementptr inbounds i8,i8*%o,i64%y
%A=bitcast i8*%z to i8**
%B=load i8*,i8**%A,align 8
%C=icmp eq i8*%B,null
br i1%C,label%D,label%ag
D:
%E=bitcast i8*%m to i8**
%F=load i8*,i8**%E,align 8
%G=getelementptr inbounds i8,i8*%F,i64 16
%H=bitcast i8*%G to i8*(i8*,i8*)**
%I=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%H,align 8
%J=bitcast i8*%F to i8**
%K=load i8*,i8**%J,align 8
store i8*%K,i8**%d,align 8
%L=getelementptr inbounds i8,i8*%m,i64 8
%M=bitcast i8*%L to i32*
%N=load i32,i32*%M,align 4
%O=icmp eq i32%N,0
br i1%O,label%U,label%P
P:
%Q=sext i32%u to i64
%R=getelementptr inbounds i8,i8*%o,i64%Q
%S=bitcast i8*%R to i8**
%T=load i8*,i8**%S,align 8
br label%ac
U:
store i8*null,i8**%e,align 8
%V=call i8*@sml_alloc(i32 inreg%r)#0
%W=getelementptr inbounds i8,i8*%V,i64 -4
%X=bitcast i8*%W to i32*
store i32%r,i32*%X,align 4
%Y=load i8*,i8**%c,align 8
%Z=sext i32%u to i64
%aa=getelementptr inbounds i8,i8*%Y,i64%Z
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%V,i8*%aa,i32%r,i1 false)
%ab=load i8*,i8**%d,align 8
br label%ac
ac:
%ad=phi i8*[%K,%P],[%ab,%U]
%ae=phi i8*[%T,%P],[%V,%U]
%af=tail call fastcc i8*%I(i8*inreg%ad,i8*inreg%ae)
ret i8*%af
ag:
%ah=call fastcc i8*@_SMLLN10TermFormat10FormatComb1_DE_227(i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,i8*,i32}>,<{[4x i8],i32,i8*,i8*,i32}>*@aO,i64 0,i32 2)to i8*))#0
store i8*%ah,i8**%d,align 8
%ai=call i8*@sml_alloc(i32 inreg 12)#0
%aj=getelementptr inbounds i8,i8*%ai,i64 -4
%ak=bitcast i8*%aj to i32*
store i32 1342177288,i32*%ak,align 4
store i8*%ai,i8**%f,align 8
%al=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%am=bitcast i8*%ai to i8**
store i8*%al,i8**%am,align 8
%an=getelementptr inbounds i8,i8*%ai,i64 8
%ao=bitcast i8*%an to i32*
store i32 1,i32*%ao,align 4
%ap=call i8*@sml_alloc(i32 inreg 28)#0
%aq=getelementptr inbounds i8,i8*%ap,i64 -4
%ar=bitcast i8*%aq to i32*
store i32 1342177304,i32*%ar,align 4
%as=load i8*,i8**%f,align 8
%at=bitcast i8*%ap to i8**
store i8*%as,i8**%at,align 8
%au=getelementptr inbounds i8,i8*%ap,i64 8
%av=bitcast i8*%au to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_535 to void(...)*),void(...)**%av,align 8
%aw=getelementptr inbounds i8,i8*%ap,i64 16
%ax=bitcast i8*%aw to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_535 to void(...)*),void(...)**%ax,align 8
%ay=getelementptr inbounds i8,i8*%ap,i64 24
%az=bitcast i8*%ay to i32*
store i32 -2147483647,i32*%az,align 4
%aA=bitcast i8**%e to i8***
%aB=load i8**,i8***%aA,align 8
%aC=load i8*,i8**%aB,align 8
%aD=getelementptr inbounds i8,i8*%aC,i64 16
%aE=bitcast i8*%aD to i8*(i8*,i8*)**
%aF=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aE,align 8
%aG=bitcast i8*%aC to i8**
%aH=load i8*,i8**%aG,align 8
store i8*%aH,i8**%d,align 8
%aI=getelementptr inbounds i8*,i8**%aB,i64 1
%aJ=bitcast i8**%aI to i32*
%aK=load i32,i32*%aJ,align 4
%aL=icmp eq i32%aK,0
store i8*null,i8**%e,align 8
br i1%aL,label%aS,label%aM
aM:
%aN=load i8*,i8**%c,align 8
%aO=sext i32%u to i64
%aP=getelementptr inbounds i8,i8*%aN,i64%aO
%aQ=bitcast i8*%aP to i8**
%aR=load i8*,i8**%aQ,align 8
br label%a4
aS:
%aT=bitcast i8**%aB to i8*
%aU=getelementptr inbounds i8,i8*%aT,i64 12
%aV=bitcast i8*%aU to i32*
%aW=load i32,i32*%aV,align 4
%aX=call i8*@sml_alloc(i32 inreg%aW)#0
%aY=getelementptr inbounds i8,i8*%aX,i64 -4
%aZ=bitcast i8*%aY to i32*
store i32%aW,i32*%aZ,align 4
%a0=load i8*,i8**%c,align 8
%a1=sext i32%u to i64
%a2=getelementptr inbounds i8,i8*%a0,i64%a1
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aX,i8*%a2,i32%aW,i1 false)
%a3=load i8*,i8**%d,align 8
br label%a4
a4:
%a5=phi i8*[%aH,%aM],[%a3,%aS]
%a6=phi i8*[%aR,%aM],[%aX,%aS]
store i8*null,i8**%d,align 8
%a7=call fastcc i8*%aF(i8*inreg%a5,i8*inreg%a6)
%a8=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%a9=call fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_535(i8*inreg%a8,i8*inreg%a7)
%ba=getelementptr inbounds i8,i8*%a9,i64 16
%bb=bitcast i8*%ba to i8*(i8*,i8*)**
%bc=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bb,align 8
%bd=bitcast i8*%a9 to i8**
%be=load i8*,i8**%bd,align 8
%bf=call fastcc i8*%bc(i8*inreg%be,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aP,i64 0,i32 2)to i8*))
%bg=getelementptr inbounds i8,i8*%bf,i64 16
%bh=bitcast i8*%bg to i8*(i8*,i8*)**
%bi=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bh,align 8
%bj=bitcast i8*%bf to i8**
%bk=load i8*,i8**%bj,align 8
%bl=call fastcc i8*%bi(i8*inreg%bk,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aQ,i64 0,i32 2)to i8*))
%bm=getelementptr inbounds i8,i8*%bl,i64 16
%bn=bitcast i8*%bm to i8*(i8*,i8*)**
%bo=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bn,align 8
%bp=bitcast i8*%bl to i8**
%bq=load i8*,i8**%bp,align 8
%br=call fastcc i8*%bo(i8*inreg%bq,i8*inreg getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@aR,i64 0,i32 2,i64 0))
%bs=getelementptr inbounds i8,i8*%br,i64 16
%bt=bitcast i8*%bs to i8*(i8*,i8*)**
%bu=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bt,align 8
%bv=bitcast i8*%br to i8**
%bw=load i8*,i8**%bv,align 8
%bx=call fastcc i8*%bu(i8*inreg%bw,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aS,i64 0,i32 2)to i8*))
%by=getelementptr inbounds i8,i8*%bx,i64 16
%bz=bitcast i8*%by to i8*(i8*,i8*)**
%bA=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bz,align 8
%bB=bitcast i8*%bx to i8**
%bC=load i8*,i8**%bB,align 8
%bD=call fastcc i8*%bA(i8*inreg%bC,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aT,i64 0,i32 2)to i8*))
%bE=getelementptr inbounds i8,i8*%bD,i64 16
%bF=bitcast i8*%bE to i8*(i8*,i8*)**
%bG=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bF,align 8
%bH=bitcast i8*%bD to i8**
%bI=load i8*,i8**%bH,align 8
%bJ=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bK=getelementptr inbounds i8,i8*%bJ,i64%y
%bL=bitcast i8*%bK to i8**
%bM=load i8*,i8**%bL,align 8
%bN=call fastcc i8*%bG(i8*inreg%bI,i8*inreg%bM)
%bO=getelementptr inbounds i8,i8*%bN,i64 16
%bP=bitcast i8*%bO to i8*(i8*,i8*)**
%bQ=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bP,align 8
%bR=bitcast i8*%bN to i8**
%bS=load i8*,i8**%bR,align 8
%bT=tail call fastcc i8*%bQ(i8*inreg%bS,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aU,i64 0,i32 2)to i8*))
ret i8*%bT
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_550(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=getelementptr inbounds i8,i8*%h,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
%m=getelementptr inbounds i8,i8*%l,i64 16
%n=bitcast i8*%m to i8*(i8*,i8*)**
%o=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%n,align 8
%p=bitcast i8*%l to i8**
%q=load i8*,i8**%p,align 8
store i8*%q,i8**%b,align 8
%r=bitcast i8*%h to i8**
%s=load i8*,i8**%r,align 8
%t=getelementptr inbounds i8,i8*%s,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%s to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
%A=tail call fastcc i8*%o(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_552(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=getelementptr inbounds i8,i8*%h,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
%m=getelementptr inbounds i8,i8*%l,i64 16
%n=bitcast i8*%m to i8*(i8*,i8*)**
%o=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%n,align 8
%p=bitcast i8*%l to i8**
%q=load i8*,i8**%p,align 8
store i8*%q,i8**%b,align 8
%r=bitcast i8*%h to i8**
%s=load i8*,i8**%r,align 8
%t=getelementptr inbounds i8,i8*%s,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%s to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
%A=tail call fastcc i8*%o(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_554(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=getelementptr inbounds i8,i8*%h,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
%m=getelementptr inbounds i8,i8*%l,i64 16
%n=bitcast i8*%m to i8*(i8*,i8*)**
%o=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%n,align 8
%p=bitcast i8*%l to i8**
%q=load i8*,i8**%p,align 8
store i8*%q,i8**%b,align 8
%r=bitcast i8*%h to i8**
%s=load i8*,i8**%r,align 8
%t=getelementptr inbounds i8,i8*%s,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%s to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
%A=tail call fastcc i8*%o(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_556(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
q:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%f,align 8
%k=load atomic i32,i32*@sml_check_flag unordered,align 4
%l=icmp eq i32%k,0
br i1%l,label%o,label%m
m:
call void@sml_check(i32 inreg%k)
%n=load i8*,i8**%e,align 8
br label%o
o:
%p=phi i8*[%n,%m],[%a,%q]
%r=getelementptr inbounds i8,i8*%p,i64 8
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=getelementptr inbounds i8,i8*%p,i64 12
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=call fastcc i8*@_SMLFN11RecordLabel10isTupleMapE(i32 inreg%t,i32 inreg%w)
%y=getelementptr inbounds i8,i8*%x,i64 16
%z=bitcast i8*%y to i8*(i8*,i8*)**
%A=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%z,align 8
%B=bitcast i8*%x to i8**
%C=load i8*,i8**%B,align 8
%D=load i8*,i8**%f,align 8
%E=call fastcc i8*%A(i8*inreg%C,i8*inreg%D)
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
%H=icmp eq i32%G,0
br i1%H,label%bY,label%I
I:
%J=call fastcc i8*@_SMLLN10TermFormat10FormatComb6guard__E_247(i32 inreg 1,i32 inreg 8)
%K=getelementptr inbounds i8,i8*%J,i64 16
%L=bitcast i8*%K to i8*(i8*,i8*)**
%M=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%L,align 8
%N=bitcast i8*%J to i8**
%O=load i8*,i8**%N,align 8
%P=call fastcc i8*%M(i8*inreg%O,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,i8*,i32}>,<{[4x i8],i32,i8*,i8*,i32}>*@aF,i64 0,i32 2)to i8*))
store i8*%P,i8**%c,align 8
%Q=call i8*@sml_alloc(i32 inreg 12)#0
%R=getelementptr inbounds i8,i8*%Q,i64 -4
%S=bitcast i8*%R to i32*
store i32 1342177288,i32*%S,align 4
store i8*%Q,i8**%d,align 8
%T=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%U=bitcast i8*%Q to i8**
store i8*%T,i8**%U,align 8
%V=getelementptr inbounds i8,i8*%Q,i64 8
%W=bitcast i8*%V to i32*
store i32 1,i32*%W,align 4
%X=call i8*@sml_alloc(i32 inreg 28)#0
%Y=getelementptr inbounds i8,i8*%X,i64 -4
%Z=bitcast i8*%Y to i32*
store i32 1342177304,i32*%Z,align 4
%aa=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ab=bitcast i8*%X to i8**
store i8*%aa,i8**%ab,align 8
%ac=getelementptr inbounds i8,i8*%X,i64 8
%ad=bitcast i8*%ac to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_519 to void(...)*),void(...)**%ad,align 8
%ae=getelementptr inbounds i8,i8*%X,i64 16
%af=bitcast i8*%ae to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_519 to void(...)*),void(...)**%af,align 8
%ag=getelementptr inbounds i8,i8*%X,i64 24
%ah=bitcast i8*%ag to i32*
store i32 -2147483647,i32*%ah,align 4
%ai=call fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_519(i8*inreg%aa,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,i32}>,<{[4x i8],i32,i8*,i32}>*@aH,i64 0,i32 2)to i8*))
%aj=getelementptr inbounds i8,i8*%ai,i64 16
%ak=bitcast i8*%aj to i8*(i8*,i8*)**
%al=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ak,align 8
%am=bitcast i8*%ai to i8**
%an=load i8*,i8**%am,align 8
%ao=call fastcc i8*%al(i8*inreg%an,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aI,i64 0,i32 2)to i8*))
%ap=getelementptr inbounds i8,i8*%ao,i64 16
%aq=bitcast i8*%ap to i8*(i8*,i8*)**
%ar=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aq,align 8
%as=bitcast i8*%ao to i8**
%at=load i8*,i8**%as,align 8
%au=call fastcc i8*%ar(i8*inreg%at,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,i32}>,<{[4x i8],i32,i8*,i32}>*@aK,i64 0,i32 2)to i8*))
%av=getelementptr inbounds i8,i8*%au,i64 16
%aw=bitcast i8*%av to i8*(i8*,i8*)**
%ax=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aw,align 8
%ay=bitcast i8*%au to i8**
%az=load i8*,i8**%ay,align 8
%aA=call fastcc i8*%ax(i8*inreg%az,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aL,i64 0,i32 2)to i8*))
%aB=getelementptr inbounds i8,i8*%aA,i64 16
%aC=bitcast i8*%aB to i8*(i8*,i8*)**
%aD=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aC,align 8
%aE=bitcast i8*%aA to i8**
%aF=load i8*,i8**%aE,align 8
store i8*%aF,i8**%g,align 8
%aG=load i8*,i8**%e,align 8
%aH=getelementptr inbounds i8,i8*%aG,i64 8
%aI=bitcast i8*%aH to i32*
%aJ=load i32,i32*%aI,align 4
%aK=getelementptr inbounds i8,i8*%aG,i64 12
%aL=bitcast i8*%aK to i32*
%aM=load i32,i32*%aL,align 4
%aN=call fastcc i8*@_SMLFN11RecordLabel3Map5foldrE(i32 inreg%aJ,i32 inreg%aM,i32 inreg 1,i32 inreg 8)
%aO=getelementptr inbounds i8,i8*%aN,i64 16
%aP=bitcast i8*%aO to i8*(i8*,i8*)**
%aQ=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aP,align 8
%aR=bitcast i8*%aN to i8**
%aS=load i8*,i8**%aR,align 8
store i8*%aS,i8**%d,align 8
%aT=bitcast i8**%e to i8***
%aU=load i8**,i8***%aT,align 8
%aV=load i8*,i8**%aU,align 8
store i8*%aV,i8**%c,align 8
%aW=bitcast i8**%aU to i8*
%aX=getelementptr inbounds i8*,i8**%aU,i64 1
%aY=bitcast i8**%aX to i32*
%aZ=load i32,i32*%aY,align 4
store i8*null,i8**%e,align 8
%a0=getelementptr inbounds i8,i8*%aW,i64 12
%a1=bitcast i8*%a0 to i32*
%a2=load i32,i32*%a1,align 4
%a3=call i8*@sml_alloc(i32 inreg 20)#0
%a4=getelementptr inbounds i8,i8*%a3,i64 -4
%a5=bitcast i8*%a4 to i32*
store i32 1342177296,i32*%a5,align 4
store i8*%a3,i8**%e,align 8
%a6=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%a7=bitcast i8*%a3 to i8**
store i8*%a6,i8**%a7,align 8
%a8=getelementptr inbounds i8,i8*%a3,i64 8
%a9=bitcast i8*%a8 to i32*
store i32%aZ,i32*%a9,align 4
%ba=getelementptr inbounds i8,i8*%a3,i64 12
%bb=bitcast i8*%ba to i32*
store i32%a2,i32*%bb,align 4
%bc=getelementptr inbounds i8,i8*%a3,i64 16
%bd=bitcast i8*%bc to i32*
store i32 1,i32*%bd,align 4
%be=call i8*@sml_alloc(i32 inreg 28)#0
%bf=getelementptr inbounds i8,i8*%be,i64 -4
%bg=bitcast i8*%bf to i32*
store i32 1342177304,i32*%bg,align 4
%bh=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bi=bitcast i8*%be to i8**
store i8*%bh,i8**%bi,align 8
%bj=getelementptr inbounds i8,i8*%be,i64 8
%bk=bitcast i8*%bj to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_549 to void(...)*),void(...)**%bk,align 8
%bl=getelementptr inbounds i8,i8*%be,i64 16
%bm=bitcast i8*%bl to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_549 to void(...)*),void(...)**%bm,align 8
%bn=getelementptr inbounds i8,i8*%be,i64 24
%bo=bitcast i8*%bn to i32*
store i32 -2147483647,i32*%bo,align 4
%bp=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bq=call fastcc i8*%aQ(i8*inreg%bp,i8*inreg%be)
%br=getelementptr inbounds i8,i8*%bq,i64 16
%bs=bitcast i8*%br to i8*(i8*,i8*)**
%bt=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bs,align 8
%bu=bitcast i8*%bq to i8**
%bv=load i8*,i8**%bu,align 8
%bw=call fastcc i8*%bt(i8*inreg%bv,i8*inreg null)
%bx=getelementptr inbounds i8,i8*%bw,i64 16
%by=bitcast i8*%bx to i8*(i8*,i8*)**
%bz=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%by,align 8
%bA=bitcast i8*%bw to i8**
%bB=load i8*,i8**%bA,align 8
%bC=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%bD=call fastcc i8*%bz(i8*inreg%bB,i8*inreg%bC)
%bE=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%bF=call fastcc i8*%aD(i8*inreg%bE,i8*inreg%bD)
%bG=getelementptr inbounds i8,i8*%bF,i64 16
%bH=bitcast i8*%bG to i8*(i8*,i8*)**
%bI=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bH,align 8
%bJ=bitcast i8*%bF to i8**
%bK=load i8*,i8**%bJ,align 8
%bL=call fastcc i8*%bI(i8*inreg%bK,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aV,i64 0,i32 2)to i8*))
%bM=getelementptr inbounds i8,i8*%bL,i64 16
%bN=bitcast i8*%bM to i8*(i8*,i8*)**
%bO=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bN,align 8
%bP=bitcast i8*%bL to i8**
%bQ=load i8*,i8**%bP,align 8
%bR=call fastcc i8*%bO(i8*inreg%bQ,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aW,i64 0,i32 2)to i8*))
%bS=getelementptr inbounds i8,i8*%bR,i64 16
%bT=bitcast i8*%bS to i8*(i8*,i8*)**
%bU=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bT,align 8
%bV=bitcast i8*%bR to i8**
%bW=load i8*,i8**%bV,align 8
%bX=tail call fastcc i8*%bU(i8*inreg%bW,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@aX,i64 0,i32 2)to i8*))
ret i8*%bX
bY:
%bZ=call i8*@sml_alloc(i32 inreg 20)#0
%b0=getelementptr inbounds i8,i8*%bZ,i64 -4
%b1=bitcast i8*%b0 to i32*
store i32 1342177296,i32*%b1,align 4
store i8*%bZ,i8**%c,align 8
%b2=getelementptr inbounds i8,i8*%bZ,i64 4
%b3=bitcast i8*%b2 to i32*
store i32 0,i32*%b3,align 1
%b4=bitcast i8*%bZ to i32*
store i32 1,i32*%b4,align 4
%b5=getelementptr inbounds i8,i8*%bZ,i64 8
%b6=bitcast i8*%b5 to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bB,i64 0,i32 2,i64 0),i8**%b6,align 8
%b7=getelementptr inbounds i8,i8*%bZ,i64 16
%b8=bitcast i8*%b7 to i32*
store i32 2,i32*%b8,align 4
%b9=call i8*@sml_alloc(i32 inreg 20)#0
%ca=getelementptr inbounds i8,i8*%b9,i64 -4
%cb=bitcast i8*%ca to i32*
store i32 1342177296,i32*%cb,align 4
store i8*%b9,i8**%d,align 8
%cc=getelementptr inbounds i8,i8*%b9,i64 4
%cd=bitcast i8*%cc to i32*
store i32 0,i32*%cd,align 1
%ce=bitcast i8*%b9 to i32*
store i32 6,i32*%ce,align 4
%cf=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cg=getelementptr inbounds i8,i8*%b9,i64 8
%ch=bitcast i8*%cg to i8**
store i8*%cf,i8**%ch,align 8
%ci=getelementptr inbounds i8,i8*%b9,i64 16
%cj=bitcast i8*%ci to i32*
store i32 2,i32*%cj,align 4
%ck=call i8*@sml_alloc(i32 inreg 20)#0
%cl=getelementptr inbounds i8,i8*%ck,i64 -4
%cm=bitcast i8*%cl to i32*
store i32 1342177296,i32*%cm,align 4
%cn=load i8*,i8**%d,align 8
%co=bitcast i8*%ck to i8**
store i8*%cn,i8**%co,align 8
%cp=getelementptr inbounds i8,i8*%ck,i64 8
%cq=bitcast i8*%cp to i8**
store i8*null,i8**%cq,align 8
%cr=getelementptr inbounds i8,i8*%ck,i64 16
%cs=bitcast i8*%cr to i32*
store i32 3,i32*%cs,align 4
store i8*%cn,i8**%c,align 8
store i8*null,i8**%d,align 8
%ct=call i8*@sml_alloc(i32 inreg 20)#0
%cu=getelementptr inbounds i8,i8*%ct,i64 -4
%cv=bitcast i8*%cu to i32*
store i32 1342177296,i32*%cv,align 4
store i8*%ct,i8**%g,align 8
%cw=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cx=bitcast i8*%ct to i8**
store i8*%cw,i8**%cx,align 8
%cy=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%cz=getelementptr inbounds i8,i8*%ct,i64 8
%cA=bitcast i8*%cz to i8**
store i8*%cy,i8**%cA,align 8
%cB=getelementptr inbounds i8,i8*%ct,i64 16
%cC=bitcast i8*%cB to i32*
store i32 3,i32*%cC,align 4
%cD=call i8*@sml_alloc(i32 inreg 20)#0
%cE=getelementptr inbounds i8,i8*%cD,i64 -4
%cF=bitcast i8*%cE to i32*
store i32 1342177296,i32*%cF,align 4
store i8*%cD,i8**%c,align 8
%cG=getelementptr inbounds i8,i8*%cD,i64 4
%cH=bitcast i8*%cG to i32*
store i32 0,i32*%cH,align 1
%cI=bitcast i8*%cD to i32*
store i32 1,i32*%cI,align 4
%cJ=getelementptr inbounds i8,i8*%cD,i64 8
%cK=bitcast i8*%cJ to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bd,i64 0,i32 2,i64 0),i8**%cK,align 8
%cL=getelementptr inbounds i8,i8*%cD,i64 16
%cM=bitcast i8*%cL to i32*
store i32 2,i32*%cM,align 4
%cN=call i8*@sml_alloc(i32 inreg 20)#0
%cO=getelementptr inbounds i8,i8*%cN,i64 -4
%cP=bitcast i8*%cO to i32*
store i32 1342177296,i32*%cP,align 4
store i8*%cN,i8**%d,align 8
%cQ=getelementptr inbounds i8,i8*%cN,i64 4
%cR=bitcast i8*%cQ to i32*
store i32 0,i32*%cR,align 1
%cS=bitcast i8*%cN to i32*
store i32 6,i32*%cS,align 4
%cT=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cU=getelementptr inbounds i8,i8*%cN,i64 8
%cV=bitcast i8*%cU to i8**
store i8*%cT,i8**%cV,align 8
%cW=getelementptr inbounds i8,i8*%cN,i64 16
%cX=bitcast i8*%cW to i32*
store i32 2,i32*%cX,align 4
%cY=call i8*@sml_alloc(i32 inreg 20)#0
%cZ=getelementptr inbounds i8,i8*%cY,i64 -4
%c0=bitcast i8*%cZ to i32*
store i32 1342177296,i32*%c0,align 4
%c1=load i8*,i8**%d,align 8
%c2=bitcast i8*%cY to i8**
store i8*%c1,i8**%c2,align 8
%c3=getelementptr inbounds i8,i8*%cY,i64 8
%c4=bitcast i8*%c3 to i8**
store i8*null,i8**%c4,align 8
%c5=getelementptr inbounds i8,i8*%cY,i64 16
%c6=bitcast i8*%c5 to i32*
store i32 3,i32*%c6,align 4
store i8*%c1,i8**%c,align 8
store i8*null,i8**%d,align 8
%c7=call i8*@sml_alloc(i32 inreg 20)#0
%c8=getelementptr inbounds i8,i8*%c7,i64 -4
%c9=bitcast i8*%c8 to i32*
store i32 1342177296,i32*%c9,align 4
store i8*%c7,i8**%h,align 8
%da=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%db=bitcast i8*%c7 to i8**
store i8*%da,i8**%db,align 8
%dc=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%dd=getelementptr inbounds i8,i8*%c7,i64 8
%de=bitcast i8*%dd to i8**
store i8*%dc,i8**%de,align 8
%df=getelementptr inbounds i8,i8*%c7,i64 16
%dg=bitcast i8*%df to i32*
store i32 3,i32*%dg,align 4
%dh=call i8*@sml_alloc(i32 inreg 20)#0
%di=getelementptr inbounds i8,i8*%dh,i64 -4
%dj=bitcast i8*%di to i32*
store i32 1342177296,i32*%dj,align 4
store i8*%dh,i8**%c,align 8
%dk=getelementptr inbounds i8,i8*%dh,i64 4
%dl=bitcast i8*%dk to i32*
store i32 0,i32*%dl,align 1
%dm=bitcast i8*%dh to i32*
store i32 1,i32*%dm,align 4
%dn=getelementptr inbounds i8,i8*%dh,i64 8
%do=bitcast i8*%dn to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@aZ,i64 0,i32 2,i64 0),i8**%do,align 8
%dp=getelementptr inbounds i8,i8*%dh,i64 16
%dq=bitcast i8*%dp to i32*
store i32 2,i32*%dq,align 4
%dr=call i8*@sml_alloc(i32 inreg 20)#0
%ds=getelementptr inbounds i8,i8*%dr,i64 -4
%dt=bitcast i8*%ds to i32*
store i32 1342177296,i32*%dt,align 4
store i8*%dr,i8**%d,align 8
%du=getelementptr inbounds i8,i8*%dr,i64 4
%dv=bitcast i8*%du to i32*
store i32 0,i32*%dv,align 1
%dw=bitcast i8*%dr to i32*
store i32 6,i32*%dw,align 4
%dx=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%dy=getelementptr inbounds i8,i8*%dr,i64 8
%dz=bitcast i8*%dy to i8**
store i8*%dx,i8**%dz,align 8
%dA=getelementptr inbounds i8,i8*%dr,i64 16
%dB=bitcast i8*%dA to i32*
store i32 2,i32*%dB,align 4
%dC=call i8*@sml_alloc(i32 inreg 20)#0
%dD=getelementptr inbounds i8,i8*%dC,i64 -4
%dE=bitcast i8*%dD to i32*
store i32 1342177296,i32*%dE,align 4
%dF=load i8*,i8**%d,align 8
%dG=bitcast i8*%dC to i8**
store i8*%dF,i8**%dG,align 8
%dH=getelementptr inbounds i8,i8*%dC,i64 8
%dI=bitcast i8*%dH to i8**
store i8*null,i8**%dI,align 8
%dJ=getelementptr inbounds i8,i8*%dC,i64 16
%dK=bitcast i8*%dJ to i32*
store i32 3,i32*%dK,align 4
store i8*%dF,i8**%c,align 8
store i8*null,i8**%d,align 8
%dL=call i8*@sml_alloc(i32 inreg 20)#0
%dM=getelementptr inbounds i8,i8*%dL,i64 -4
%dN=bitcast i8*%dM to i32*
store i32 1342177296,i32*%dN,align 4
store i8*%dL,i8**%i,align 8
%dO=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%dP=bitcast i8*%dL to i8**
store i8*%dO,i8**%dP,align 8
%dQ=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%dR=getelementptr inbounds i8,i8*%dL,i64 8
%dS=bitcast i8*%dR to i8**
store i8*%dQ,i8**%dS,align 8
%dT=getelementptr inbounds i8,i8*%dL,i64 16
%dU=bitcast i8*%dT to i32*
store i32 3,i32*%dU,align 4
%dV=call i8*@sml_alloc(i32 inreg 20)#0
%dW=getelementptr inbounds i8,i8*%dV,i64 -4
%dX=bitcast i8*%dW to i32*
store i32 1342177296,i32*%dX,align 4
store i8*%dV,i8**%c,align 8
%dY=getelementptr inbounds i8,i8*%dV,i64 4
%dZ=bitcast i8*%dY to i32*
store i32 0,i32*%dZ,align 1
%d0=bitcast i8*%dV to i32*
store i32 1,i32*%d0,align 4
%d1=getelementptr inbounds i8,i8*%dV,i64 8
%d2=bitcast i8*%d1 to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bH,i64 0,i32 2,i64 0),i8**%d2,align 8
%d3=getelementptr inbounds i8,i8*%dV,i64 16
%d4=bitcast i8*%d3 to i32*
store i32 2,i32*%d4,align 4
%d5=call i8*@sml_alloc(i32 inreg 20)#0
%d6=getelementptr inbounds i8,i8*%d5,i64 -4
%d7=bitcast i8*%d6 to i32*
store i32 1342177296,i32*%d7,align 4
store i8*%d5,i8**%d,align 8
%d8=getelementptr inbounds i8,i8*%d5,i64 4
%d9=bitcast i8*%d8 to i32*
store i32 0,i32*%d9,align 1
%ea=bitcast i8*%d5 to i32*
store i32 6,i32*%ea,align 4
%eb=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ec=getelementptr inbounds i8,i8*%d5,i64 8
%ed=bitcast i8*%ec to i8**
store i8*%eb,i8**%ed,align 8
%ee=getelementptr inbounds i8,i8*%d5,i64 16
%ef=bitcast i8*%ee to i32*
store i32 2,i32*%ef,align 4
%eg=call i8*@sml_alloc(i32 inreg 20)#0
%eh=getelementptr inbounds i8,i8*%eg,i64 -4
%ei=bitcast i8*%eh to i32*
store i32 1342177296,i32*%ei,align 4
%ej=load i8*,i8**%d,align 8
%ek=bitcast i8*%eg to i8**
store i8*%ej,i8**%ek,align 8
%el=getelementptr inbounds i8,i8*%eg,i64 8
%em=bitcast i8*%el to i8**
store i8*null,i8**%em,align 8
%en=getelementptr inbounds i8,i8*%eg,i64 16
%eo=bitcast i8*%en to i32*
store i32 3,i32*%eo,align 4
store i8*%ej,i8**%c,align 8
store i8*null,i8**%d,align 8
%ep=call i8*@sml_alloc(i32 inreg 20)#0
%eq=getelementptr inbounds i8,i8*%ep,i64 -4
%er=bitcast i8*%eq to i32*
store i32 1342177296,i32*%er,align 4
store i8*%ep,i8**%j,align 8
%es=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%et=bitcast i8*%ep to i8**
store i8*%es,i8**%et,align 8
%eu=load i8*,i8**%d,align 8
%ev=getelementptr inbounds i8,i8*%ep,i64 8
%ew=bitcast i8*%ev to i8**
store i8*%eu,i8**%ew,align 8
%ex=getelementptr inbounds i8,i8*%ep,i64 16
%ey=bitcast i8*%ex to i32*
store i32 3,i32*%ey,align 4
%ez=bitcast i8**%e to i8***
%eA=load i8**,i8***%ez,align 8
%eB=load i8*,i8**%eA,align 8
store i8*%eB,i8**%d,align 8
%eC=call i8*@sml_alloc(i32 inreg 44)#0
%eD=getelementptr inbounds i8,i8*%eC,i64 -4
%eE=bitcast i8*%eD to i32*
store i32 1342177320,i32*%eE,align 4
store i8*%eC,i8**%c,align 8
%eF=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%eG=bitcast i8*%eC to i8**
store i8*%eF,i8**%eG,align 8
%eH=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%eI=getelementptr inbounds i8,i8*%eC,i64 8
%eJ=bitcast i8*%eI to i8**
store i8*%eH,i8**%eJ,align 8
%eK=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%eL=getelementptr inbounds i8,i8*%eC,i64 16
%eM=bitcast i8*%eL to i8**
store i8*%eK,i8**%eM,align 8
%eN=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%eO=getelementptr inbounds i8,i8*%eC,i64 24
%eP=bitcast i8*%eO to i8**
store i8*%eN,i8**%eP,align 8
%eQ=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%eR=getelementptr inbounds i8,i8*%eC,i64 32
%eS=bitcast i8*%eR to i8**
store i8*%eQ,i8**%eS,align 8
%eT=getelementptr inbounds i8,i8*%eC,i64 40
%eU=bitcast i8*%eT to i32*
store i32 31,i32*%eU,align 4
%eV=load i8*,i8**%e,align 8
%eW=getelementptr inbounds i8,i8*%eV,i64 8
%eX=bitcast i8*%eW to i32*
%eY=load i32,i32*%eX,align 4
store i8*null,i8**%e,align 8
%eZ=getelementptr inbounds i8,i8*%eV,i64 12
%e0=bitcast i8*%eZ to i32*
%e1=load i32,i32*%e0,align 4
%e2=call i8*@sml_alloc(i32 inreg 20)#0
%e3=getelementptr inbounds i8,i8*%e2,i64 -4
%e4=bitcast i8*%e3 to i32*
store i32 1342177296,i32*%e4,align 4
store i8*%e2,i8**%d,align 8
%e5=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%e6=bitcast i8*%e2 to i8**
store i8*%e5,i8**%e6,align 8
%e7=getelementptr inbounds i8,i8*%e2,i64 8
%e8=bitcast i8*%e7 to i32*
store i32%eY,i32*%e8,align 4
%e9=getelementptr inbounds i8,i8*%e2,i64 12
%fa=bitcast i8*%e9 to i32*
store i32%e1,i32*%fa,align 4
%fb=getelementptr inbounds i8,i8*%e2,i64 16
%fc=bitcast i8*%fb to i32*
store i32 1,i32*%fc,align 4
%fd=call i8*@sml_alloc(i32 inreg 28)#0
%fe=getelementptr inbounds i8,i8*%fd,i64 -4
%ff=bitcast i8*%fe to i32*
store i32 1342177304,i32*%ff,align 4
%fg=load i8*,i8**%d,align 8
%fh=bitcast i8*%fd to i8**
store i8*%fg,i8**%fh,align 8
%fi=getelementptr inbounds i8,i8*%fd,i64 8
%fj=bitcast i8*%fi to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_513 to void(...)*),void(...)**%fj,align 8
%fk=getelementptr inbounds i8,i8*%fd,i64 16
%fl=bitcast i8*%fk to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_513 to void(...)*),void(...)**%fl,align 8
%fm=getelementptr inbounds i8,i8*%fd,i64 24
%fn=bitcast i8*%fm to i32*
store i32 -2147483647,i32*%fn,align 4
%fo=load i8*,i8**%f,align 8
%fp=tail call fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_513(i8*inreg%fg,i8*inreg%fo)
ret i8*%fp
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_557(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_556 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_556 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat14formatRecordTyE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_557 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat14formatRecordTyE_557 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLN10TermFormat19formatDummyRecordTyE_568(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%l,label%k
k:
call void@sml_check(i32 inreg%i)
br label%l
l:
%m=call fastcc i8*@_SMLLN10TermFormat17formatEnclosedMapE_365(i32 inreg 1,i32 inreg 8)
%n=getelementptr inbounds i8,i8*%m,i64 16
%o=bitcast i8*%n to i8*(i8*,i8*)**
%p=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%o,align 8
%q=bitcast i8*%m to i8**
%r=load i8*,i8**%q,align 8
%s=load i8*,i8**@_SMLZN11RecordLabel12format__labelE,align 8
%t=call fastcc i8*%p(i8*inreg%r,i8*inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*,i8*,i8*,i8*)**
%w=load i8*(i8*,i8*,i8*,i8*,i8*)*,i8*(i8*,i8*,i8*,i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
store i8*%y,i8**%e,align 8
%z=load i8*,i8**%c,align 8
%A=getelementptr inbounds i8,i8*%z,i64 8
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=getelementptr inbounds i8,i8*%z,i64 12
%E=bitcast i8*%D to i32*
%F=load i32,i32*%E,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i8*%G,i8**%f,align 8
store i32 1,i32*%H,align 4
%K=call i8*@sml_alloc(i32 inreg 4)#0
%L=bitcast i8*%K to i32*
%M=getelementptr inbounds i8,i8*%K,i64 -4
%N=bitcast i8*%M to i32*
store i32 4,i32*%N,align 4
store i8*%K,i8**%g,align 8
store i32 8,i32*%L,align 4
%O=call i8*@sml_alloc(i32 inreg 4)#0
%P=bitcast i8*%O to i32*
%Q=getelementptr inbounds i8,i8*%O,i64 -4
%R=bitcast i8*%Q to i32*
store i32 4,i32*%R,align 4
store i8*%O,i8**%h,align 8
store i32%C,i32*%P,align 4
%S=call i8*@sml_alloc(i32 inreg 4)#0
%T=bitcast i8*%S to i32*
%U=getelementptr inbounds i8,i8*%S,i64 -4
%V=bitcast i8*%U to i32*
store i32 4,i32*%V,align 4
store i32%F,i32*%T,align 4
%W=load i8*,i8**%e,align 8
%X=load i8*,i8**%f,align 8
%Y=load i8*,i8**%g,align 8
%Z=load i8*,i8**%h,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%f,align 8
store i8*null,i8**%g,align 8
store i8*null,i8**%h,align 8
%aa=call fastcc i8*%w(i8*inreg%W,i8*inreg%X,i8*inreg%Y,i8*inreg%Z,i8*inreg%S)
%ab=getelementptr inbounds i8,i8*%aa,i64 16
%ac=bitcast i8*%ab to i8*(i8*,i8*)**
%ad=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ac,align 8
%ae=bitcast i8*%aa to i8**
%af=load i8*,i8**%ae,align 8
store i8*%af,i8**%e,align 8
%ag=load i8*,i8**%c,align 8
%ah=getelementptr inbounds i8,i8*%ag,i64 8
%ai=bitcast i8*%ah to i32*
%aj=load i32,i32*%ai,align 4
%ak=getelementptr inbounds i8,i8*%ag,i64 12
%al=bitcast i8*%ak to i32*
%am=load i32,i32*%al,align 4
%an=call fastcc i8*@_SMLFN11RecordLabel3Map10listItemsiE(i32 inreg%aj,i32 inreg%am)
%ao=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%ap=call fastcc i8*%ad(i8*inreg%ao,i8*inreg%an)
%aq=getelementptr inbounds i8,i8*%ap,i64 16
%ar=bitcast i8*%aq to i8*(i8*,i8*)**
%as=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ar,align 8
%at=bitcast i8*%ap to i8**
%au=load i8*,i8**%at,align 8
%av=bitcast i8**%c to i8***
%aw=load i8**,i8***%av,align 8
store i8*null,i8**%c,align 8
%ax=load i8*,i8**%aw,align 8
%ay=call fastcc i8*%as(i8*inreg%au,i8*inreg%ax)
%az=getelementptr inbounds i8,i8*%ay,i64 16
%aA=bitcast i8*%az to i8*(i8*,i8*)**
%aB=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aA,align 8
%aC=bitcast i8*%ay to i8**
%aD=load i8*,i8**%aC,align 8
%aE=load i8*,i8**%d,align 8
%aF=tail call fastcc i8*%aB(i8*inreg%aD,i8*inreg%aE)
ret i8*%aF
}
define internal fastcc i8*@_SMLLN10TermFormat19formatDummyRecordTyE_569(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%f,align 8
%k=load atomic i32,i32*@sml_check_flag unordered,align 4
%l=icmp eq i32%k,0
br i1%l,label%n,label%m
m:
call void@sml_check(i32 inreg%k)
br label%n
n:
%o=call i8*@sml_alloc(i32 inreg 20)#0
%p=getelementptr inbounds i8,i8*%o,i64 -4
%q=bitcast i8*%p to i32*
store i32 1342177296,i32*%q,align 4
store i8*%o,i8**%c,align 8
%r=getelementptr inbounds i8,i8*%o,i64 4
%s=bitcast i8*%r to i32*
store i32 0,i32*%s,align 1
%t=bitcast i8*%o to i32*
store i32 1,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%o,i64 8
%v=bitcast i8*%u to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bB,i64 0,i32 2,i64 0),i8**%v,align 8
%w=getelementptr inbounds i8,i8*%o,i64 16
%x=bitcast i8*%w to i32*
store i32 2,i32*%x,align 4
%y=call i8*@sml_alloc(i32 inreg 20)#0
%z=getelementptr inbounds i8,i8*%y,i64 -4
%A=bitcast i8*%z to i32*
store i32 1342177296,i32*%A,align 4
store i8*%y,i8**%d,align 8
%B=getelementptr inbounds i8,i8*%y,i64 4
%C=bitcast i8*%B to i32*
store i32 0,i32*%C,align 1
%D=bitcast i8*%y to i32*
store i32 6,i32*%D,align 4
%E=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%F=getelementptr inbounds i8,i8*%y,i64 8
%G=bitcast i8*%F to i8**
store i8*%E,i8**%G,align 8
%H=getelementptr inbounds i8,i8*%y,i64 16
%I=bitcast i8*%H to i32*
store i32 2,i32*%I,align 4
%J=call i8*@sml_alloc(i32 inreg 20)#0
%K=getelementptr inbounds i8,i8*%J,i64 -4
%L=bitcast i8*%K to i32*
store i32 1342177296,i32*%L,align 4
%M=load i8*,i8**%d,align 8
%N=bitcast i8*%J to i8**
store i8*%M,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%J,i64 8
%P=bitcast i8*%O to i8**
store i8*null,i8**%P,align 8
%Q=getelementptr inbounds i8,i8*%J,i64 16
%R=bitcast i8*%Q to i32*
store i32 3,i32*%R,align 4
store i8*%M,i8**%c,align 8
store i8*null,i8**%d,align 8
%S=call i8*@sml_alloc(i32 inreg 20)#0
%T=getelementptr inbounds i8,i8*%S,i64 -4
%U=bitcast i8*%T to i32*
store i32 1342177296,i32*%U,align 4
store i8*%S,i8**%g,align 8
%V=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%W=bitcast i8*%S to i8**
store i8*%V,i8**%W,align 8
%X=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%Y=getelementptr inbounds i8,i8*%S,i64 8
%Z=bitcast i8*%Y to i8**
store i8*%X,i8**%Z,align 8
%aa=getelementptr inbounds i8,i8*%S,i64 16
%ab=bitcast i8*%aa to i32*
store i32 3,i32*%ab,align 4
%ac=call i8*@sml_alloc(i32 inreg 20)#0
%ad=getelementptr inbounds i8,i8*%ac,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 1342177296,i32*%ae,align 4
store i8*%ac,i8**%c,align 8
%af=getelementptr inbounds i8,i8*%ac,i64 4
%ag=bitcast i8*%af to i32*
store i32 0,i32*%ag,align 1
%ah=bitcast i8*%ac to i32*
store i32 1,i32*%ah,align 4
%ai=getelementptr inbounds i8,i8*%ac,i64 8
%aj=bitcast i8*%ai to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bd,i64 0,i32 2,i64 0),i8**%aj,align 8
%ak=getelementptr inbounds i8,i8*%ac,i64 16
%al=bitcast i8*%ak to i32*
store i32 2,i32*%al,align 4
%am=call i8*@sml_alloc(i32 inreg 20)#0
%an=getelementptr inbounds i8,i8*%am,i64 -4
%ao=bitcast i8*%an to i32*
store i32 1342177296,i32*%ao,align 4
store i8*%am,i8**%d,align 8
%ap=getelementptr inbounds i8,i8*%am,i64 4
%aq=bitcast i8*%ap to i32*
store i32 0,i32*%aq,align 1
%ar=bitcast i8*%am to i32*
store i32 6,i32*%ar,align 4
%as=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%at=getelementptr inbounds i8,i8*%am,i64 8
%au=bitcast i8*%at to i8**
store i8*%as,i8**%au,align 8
%av=getelementptr inbounds i8,i8*%am,i64 16
%aw=bitcast i8*%av to i32*
store i32 2,i32*%aw,align 4
%ax=call i8*@sml_alloc(i32 inreg 20)#0
%ay=getelementptr inbounds i8,i8*%ax,i64 -4
%az=bitcast i8*%ay to i32*
store i32 1342177296,i32*%az,align 4
%aA=load i8*,i8**%d,align 8
%aB=bitcast i8*%ax to i8**
store i8*%aA,i8**%aB,align 8
%aC=getelementptr inbounds i8,i8*%ax,i64 8
%aD=bitcast i8*%aC to i8**
store i8*null,i8**%aD,align 8
%aE=getelementptr inbounds i8,i8*%ax,i64 16
%aF=bitcast i8*%aE to i32*
store i32 3,i32*%aF,align 4
store i8*%aA,i8**%c,align 8
store i8*null,i8**%d,align 8
%aG=call i8*@sml_alloc(i32 inreg 20)#0
%aH=getelementptr inbounds i8,i8*%aG,i64 -4
%aI=bitcast i8*%aH to i32*
store i32 1342177296,i32*%aI,align 4
store i8*%aG,i8**%h,align 8
%aJ=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aK=bitcast i8*%aG to i8**
store i8*%aJ,i8**%aK,align 8
%aL=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aM=getelementptr inbounds i8,i8*%aG,i64 8
%aN=bitcast i8*%aM to i8**
store i8*%aL,i8**%aN,align 8
%aO=getelementptr inbounds i8,i8*%aG,i64 16
%aP=bitcast i8*%aO to i32*
store i32 3,i32*%aP,align 4
%aQ=call i8*@sml_alloc(i32 inreg 20)#0
%aR=getelementptr inbounds i8,i8*%aQ,i64 -4
%aS=bitcast i8*%aR to i32*
store i32 1342177296,i32*%aS,align 4
store i8*%aQ,i8**%c,align 8
%aT=getelementptr inbounds i8,i8*%aQ,i64 4
%aU=bitcast i8*%aT to i32*
store i32 0,i32*%aU,align 1
%aV=bitcast i8*%aQ to i32*
store i32 1,i32*%aV,align 4
%aW=getelementptr inbounds i8,i8*%aQ,i64 8
%aX=bitcast i8*%aW to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@aZ,i64 0,i32 2,i64 0),i8**%aX,align 8
%aY=getelementptr inbounds i8,i8*%aQ,i64 16
%aZ=bitcast i8*%aY to i32*
store i32 2,i32*%aZ,align 4
%a0=call i8*@sml_alloc(i32 inreg 20)#0
%a1=getelementptr inbounds i8,i8*%a0,i64 -4
%a2=bitcast i8*%a1 to i32*
store i32 1342177296,i32*%a2,align 4
store i8*%a0,i8**%d,align 8
%a3=getelementptr inbounds i8,i8*%a0,i64 4
%a4=bitcast i8*%a3 to i32*
store i32 0,i32*%a4,align 1
%a5=bitcast i8*%a0 to i32*
store i32 6,i32*%a5,align 4
%a6=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%a7=getelementptr inbounds i8,i8*%a0,i64 8
%a8=bitcast i8*%a7 to i8**
store i8*%a6,i8**%a8,align 8
%a9=getelementptr inbounds i8,i8*%a0,i64 16
%ba=bitcast i8*%a9 to i32*
store i32 2,i32*%ba,align 4
%bb=call i8*@sml_alloc(i32 inreg 20)#0
%bc=getelementptr inbounds i8,i8*%bb,i64 -4
%bd=bitcast i8*%bc to i32*
store i32 1342177296,i32*%bd,align 4
%be=load i8*,i8**%d,align 8
%bf=bitcast i8*%bb to i8**
store i8*%be,i8**%bf,align 8
%bg=getelementptr inbounds i8,i8*%bb,i64 8
%bh=bitcast i8*%bg to i8**
store i8*null,i8**%bh,align 8
%bi=getelementptr inbounds i8,i8*%bb,i64 16
%bj=bitcast i8*%bi to i32*
store i32 3,i32*%bj,align 4
store i8*%be,i8**%c,align 8
store i8*null,i8**%d,align 8
%bk=call i8*@sml_alloc(i32 inreg 20)#0
%bl=getelementptr inbounds i8,i8*%bk,i64 -4
%bm=bitcast i8*%bl to i32*
store i32 1342177296,i32*%bm,align 4
store i8*%bk,i8**%i,align 8
%bn=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bo=bitcast i8*%bk to i8**
store i8*%bn,i8**%bo,align 8
%bp=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bq=getelementptr inbounds i8,i8*%bk,i64 8
%br=bitcast i8*%bq to i8**
store i8*%bp,i8**%br,align 8
%bs=getelementptr inbounds i8,i8*%bk,i64 16
%bt=bitcast i8*%bs to i32*
store i32 3,i32*%bt,align 4
%bu=call i8*@sml_alloc(i32 inreg 20)#0
%bv=getelementptr inbounds i8,i8*%bu,i64 -4
%bw=bitcast i8*%bv to i32*
store i32 1342177296,i32*%bw,align 4
store i8*%bu,i8**%c,align 8
%bx=getelementptr inbounds i8,i8*%bu,i64 4
%by=bitcast i8*%bx to i32*
store i32 0,i32*%by,align 1
%bz=bitcast i8*%bu to i32*
store i32 4,i32*%bz,align 4
%bA=getelementptr inbounds i8,i8*%bu,i64 8
%bB=bitcast i8*%bA to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[5x i8]}>,<{[4x i8],i32,[5x i8]}>*@a0,i64 0,i32 2,i64 0),i8**%bB,align 8
%bC=getelementptr inbounds i8,i8*%bu,i64 16
%bD=bitcast i8*%bC to i32*
store i32 2,i32*%bD,align 4
%bE=call i8*@sml_alloc(i32 inreg 20)#0
%bF=getelementptr inbounds i8,i8*%bE,i64 -4
%bG=bitcast i8*%bF to i32*
store i32 1342177296,i32*%bG,align 4
store i8*%bE,i8**%d,align 8
%bH=getelementptr inbounds i8,i8*%bE,i64 4
%bI=bitcast i8*%bH to i32*
store i32 0,i32*%bI,align 1
%bJ=bitcast i8*%bE to i32*
store i32 6,i32*%bJ,align 4
%bK=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bL=getelementptr inbounds i8,i8*%bE,i64 8
%bM=bitcast i8*%bL to i8**
store i8*%bK,i8**%bM,align 8
%bN=getelementptr inbounds i8,i8*%bE,i64 16
%bO=bitcast i8*%bN to i32*
store i32 2,i32*%bO,align 4
%bP=call i8*@sml_alloc(i32 inreg 20)#0
%bQ=getelementptr inbounds i8,i8*%bP,i64 -4
%bR=bitcast i8*%bQ to i32*
store i32 1342177296,i32*%bR,align 4
%bS=load i8*,i8**%d,align 8
%bT=bitcast i8*%bP to i8**
store i8*%bS,i8**%bT,align 8
%bU=getelementptr inbounds i8,i8*%bP,i64 8
%bV=bitcast i8*%bU to i8**
store i8*null,i8**%bV,align 8
%bW=getelementptr inbounds i8,i8*%bP,i64 16
%bX=bitcast i8*%bW to i32*
store i32 3,i32*%bX,align 4
store i8*%bS,i8**%c,align 8
store i8*null,i8**%d,align 8
%bY=call i8*@sml_alloc(i32 inreg 20)#0
%bZ=getelementptr inbounds i8,i8*%bY,i64 -4
%b0=bitcast i8*%bZ to i32*
store i32 1342177296,i32*%b0,align 4
store i8*%bY,i8**%j,align 8
%b1=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%b2=bitcast i8*%bY to i8**
store i8*%b1,i8**%b2,align 8
%b3=load i8*,i8**%d,align 8
%b4=getelementptr inbounds i8,i8*%bY,i64 8
%b5=bitcast i8*%b4 to i8**
store i8*%b3,i8**%b5,align 8
%b6=getelementptr inbounds i8,i8*%bY,i64 16
%b7=bitcast i8*%b6 to i32*
store i32 3,i32*%b7,align 4
%b8=bitcast i8**%e to i8***
%b9=load i8**,i8***%b8,align 8
%ca=load i8*,i8**%b9,align 8
store i8*%ca,i8**%d,align 8
%cb=call i8*@sml_alloc(i32 inreg 44)#0
%cc=getelementptr inbounds i8,i8*%cb,i64 -4
%cd=bitcast i8*%cc to i32*
store i32 1342177320,i32*%cd,align 4
store i8*%cb,i8**%c,align 8
%ce=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%cf=bitcast i8*%cb to i8**
store i8*%ce,i8**%cf,align 8
%cg=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%ch=getelementptr inbounds i8,i8*%cb,i64 8
%ci=bitcast i8*%ch to i8**
store i8*%cg,i8**%ci,align 8
%cj=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%ck=getelementptr inbounds i8,i8*%cb,i64 16
%cl=bitcast i8*%ck to i8**
store i8*%cj,i8**%cl,align 8
%cm=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%cn=getelementptr inbounds i8,i8*%cb,i64 24
%co=bitcast i8*%cn to i8**
store i8*%cm,i8**%co,align 8
%cp=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%cq=getelementptr inbounds i8,i8*%cb,i64 32
%cr=bitcast i8*%cq to i8**
store i8*%cp,i8**%cr,align 8
%cs=getelementptr inbounds i8,i8*%cb,i64 40
%ct=bitcast i8*%cs to i32*
store i32 31,i32*%ct,align 4
%cu=load i8*,i8**%e,align 8
%cv=getelementptr inbounds i8,i8*%cu,i64 8
%cw=bitcast i8*%cv to i32*
%cx=load i32,i32*%cw,align 4
store i8*null,i8**%e,align 8
%cy=getelementptr inbounds i8,i8*%cu,i64 12
%cz=bitcast i8*%cy to i32*
%cA=load i32,i32*%cz,align 4
%cB=call i8*@sml_alloc(i32 inreg 20)#0
%cC=getelementptr inbounds i8,i8*%cB,i64 -4
%cD=bitcast i8*%cC to i32*
store i32 1342177296,i32*%cD,align 4
store i8*%cB,i8**%d,align 8
%cE=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cF=bitcast i8*%cB to i8**
store i8*%cE,i8**%cF,align 8
%cG=getelementptr inbounds i8,i8*%cB,i64 8
%cH=bitcast i8*%cG to i32*
store i32%cx,i32*%cH,align 4
%cI=getelementptr inbounds i8,i8*%cB,i64 12
%cJ=bitcast i8*%cI to i32*
store i32%cA,i32*%cJ,align 4
%cK=getelementptr inbounds i8,i8*%cB,i64 16
%cL=bitcast i8*%cK to i32*
store i32 1,i32*%cL,align 4
%cM=call i8*@sml_alloc(i32 inreg 28)#0
%cN=getelementptr inbounds i8,i8*%cM,i64 -4
%cO=bitcast i8*%cN to i32*
store i32 1342177304,i32*%cO,align 4
%cP=load i8*,i8**%d,align 8
%cQ=bitcast i8*%cM to i8**
store i8*%cP,i8**%cQ,align 8
%cR=getelementptr inbounds i8,i8*%cM,i64 8
%cS=bitcast i8*%cR to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat19formatDummyRecordTyE_568 to void(...)*),void(...)**%cS,align 8
%cT=getelementptr inbounds i8,i8*%cM,i64 16
%cU=bitcast i8*%cT to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat19formatDummyRecordTyE_568 to void(...)*),void(...)**%cU,align 8
%cV=getelementptr inbounds i8,i8*%cM,i64 24
%cW=bitcast i8*%cV to i32*
store i32 -2147483647,i32*%cW,align 4
%cX=load i8*,i8**%f,align 8
%cY=tail call fastcc i8*@_SMLLN10TermFormat19formatDummyRecordTyE_568(i8*inreg%cP,i8*inreg%cX)
ret i8*%cY
}
define internal fastcc i8*@_SMLLN10TermFormat19formatDummyRecordTyE_570(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat19formatDummyRecordTyE_569 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat19formatDummyRecordTyE_569 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat19formatDummyRecordTyE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat19formatDummyRecordTyE_570 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat19formatDummyRecordTyE_570 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLN10TermFormat16formatIfNonEmptyE_573(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%c,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=getelementptr inbounds i8,i8*%j,i64 8
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%j,i64 12
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=call fastcc i8*@_SMLFN4SEnv7isEmptyE(i32 inreg%n,i32 inreg%q)
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
%x=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%y=call fastcc i8*%u(i8*inreg%w,i8*inreg%x)
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=icmp eq i32%A,0
br i1%B,label%D,label%C
C:
ret i8*null
D:
%E=bitcast i8**%c to i8***
%F=load i8**,i8***%E,align 8
%G=load i8*,i8**%F,align 8
ret i8*%G
}
define internal fastcc i8*@_SMLLN10TermFormat16formatIfNonEmptyE_574(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat16formatIfNonEmptyE_573 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat16formatIfNonEmptyE_573 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN10TermFormat13formatIfEmptyE_577(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%c,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=getelementptr inbounds i8,i8*%j,i64 8
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%j,i64 12
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=call fastcc i8*@_SMLFN4SEnv7isEmptyE(i32 inreg%n,i32 inreg%q)
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
%x=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%y=call fastcc i8*%u(i8*inreg%w,i8*inreg%x)
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=icmp eq i32%A,0
br i1%B,label%G,label%C
C:
%D=bitcast i8**%c to i8***
%E=load i8**,i8***%D,align 8
%F=load i8*,i8**%E,align 8
ret i8*%F
G:
ret i8*null
}
define internal fastcc i8*@_SMLLN10TermFormat13formatIfEmptyE_578(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat13formatIfEmptyE_577 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat13formatIfEmptyE_577 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN10TermFormat25formatIfNonEmptySymbolMapE_581(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%c,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=getelementptr inbounds i8,i8*%j,i64 8
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%j,i64 12
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=call fastcc i8*@_SMLFN9SymbolEnv7isEmptyE(i32 inreg%n,i32 inreg%q)
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
%x=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%y=call fastcc i8*%u(i8*inreg%w,i8*inreg%x)
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=icmp eq i32%A,0
br i1%B,label%D,label%C
C:
ret i8*null
D:
%E=bitcast i8**%c to i8***
%F=load i8**,i8***%E,align 8
%G=load i8*,i8**%F,align 8
ret i8*%G
}
define internal fastcc i8*@_SMLLN10TermFormat25formatIfNonEmptySymbolMapE_582(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat25formatIfNonEmptySymbolMapE_581 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat25formatIfNonEmptySymbolMapE_581 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN10TermFormat22formatIfEmptySymbolMapE_585(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%c,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=getelementptr inbounds i8,i8*%j,i64 8
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%j,i64 12
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=call fastcc i8*@_SMLFN9SymbolEnv7isEmptyE(i32 inreg%n,i32 inreg%q)
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
%x=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%y=call fastcc i8*%u(i8*inreg%w,i8*inreg%x)
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=icmp eq i32%A,0
br i1%B,label%G,label%C
C:
%D=bitcast i8**%c to i8***
%E=load i8**,i8***%D,align 8
%F=load i8*,i8**%E,align 8
ret i8*%F
G:
ret i8*null
}
define internal fastcc i8*@_SMLLN10TermFormat22formatIfEmptySymbolMapE_586(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat22formatIfEmptySymbolMapE_585 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat22formatIfEmptySymbolMapE_585 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN10TermFormat19formatIfEmptyFormatE_589(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%h,label%g
g:
call void@sml_check(i32 inreg%e)
br label%h
h:
%i=call fastcc i8*@_SMLFN4List4nullE(i32 inreg 1,i32 inreg 8)
%j=getelementptr inbounds i8,i8*%i,i64 16
%k=bitcast i8*%j to i8*(i8*,i8*)**
%l=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%k,align 8
%m=bitcast i8*%i to i8**
%n=load i8*,i8**%m,align 8
%o=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%p=call fastcc i8*%l(i8*inreg%n,i8*inreg%o)
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=icmp eq i32%r,0
%t=bitcast i8**%d to i8***
%u=load i8**,i8***%t,align 8
%v=load i8*,i8**%u,align 8
br i1%s,label%z,label%w
w:
%x=bitcast i8*%v to i8**
%y=load i8*,i8**%x,align 8
ret i8*%y
z:
%A=getelementptr inbounds i8,i8*%v,i64 8
%B=bitcast i8*%A to i8**
%C=load i8*,i8**%B,align 8
ret i8*%C
}
define internal fastcc i8*@_SMLLN10TermFormat11emptyBtvEnvE_592()unnamed_addr#2 gc"smlsharp"{
%a=alloca i8*,align 8
call void@llvm.gcroot(i8**%a,i8*null)#0
%b=load atomic i32,i32*@sml_check_flag unordered,align 4
%c=icmp eq i32%b,0
br i1%c,label%e,label%d
d:
call void@sml_check(i32 inreg%b)
br label%e
e:
%f=call fastcc i8*@_SMLFN14BoundTypeVarID3Map5emptyE(i32 inreg 1,i32 inreg 8)
store i8*%f,i8**%a,align 8
%g=call i8*@sml_alloc(i32 inreg 20)#0
%h=getelementptr inbounds i8,i8*%g,i64 -4
%i=bitcast i8*%h to i32*
store i32 1342177296,i32*%i,align 4
%j=bitcast i8*%g to i64*
store i64 0,i64*%j,align 4
%k=load i8*,i8**%a,align 8
%l=getelementptr inbounds i8,i8*%g,i64 8
%m=bitcast i8*%l to i8**
store i8*%k,i8**%m,align 8
%n=getelementptr inbounds i8,i8*%g,i64 16
%o=bitcast i8*%n to i32*
store i32 2,i32*%o,align 4
ret i8*%g
}
define internal fastcc i8*@_SMLL4loop_594(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
i:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%f,align 8
br label%g
g:
%h=phi i8*[%b8,%b7],[%b,%i]
store i8*%h,i8**%c,align 8
%j=load atomic i32,i32*@sml_check_flag unordered,align 4
%k=icmp eq i32%j,0
br i1%k,label%n,label%l
l:
call void@sml_check(i32 inreg%j)
%m=load i8*,i8**%c,align 8
br label%n
n:
%o=phi i8*[%m,%l],[%h,%g]
%p=load i8*,i8**%f,align 8
%q=getelementptr inbounds i8,i8*%p,i64 4
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=bitcast i8*%p to i32*
%u=load i32,i32*%t,align 4
%v=bitcast i8*%o to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%c,align 8
%x=getelementptr inbounds i8,i8*%o,i64 8
%y=bitcast i8*%x to i8**
%z=load i8*,i8**%y,align 8
%A=icmp eq i8*%z,null
br i1%A,label%B,label%O
B:
%C=bitcast i8*%q to i32*
%D=bitcast i8*%p to i32*
%E=load i32,i32*%D,align 4
store i8*null,i8**%f,align 8
%F=load i32,i32*%C,align 4
%G=call fastcc i8*@_SMLFN14BoundTypeVarID3Map10listItemsiE(i32 inreg%E,i32 inreg%F)
%H=getelementptr inbounds i8,i8*%G,i64 16
%I=bitcast i8*%H to i8*(i8*,i8*)**
%J=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%I,align 8
%K=bitcast i8*%G to i8**
%L=load i8*,i8**%K,align 8
%M=load i8*,i8**%c,align 8
%N=tail call fastcc i8*%J(i8*inreg%L,i8*inreg%M)
ret i8*%N
O:
%P=bitcast i8*%z to i32*
%Q=load i32,i32*%P,align 4
%R=getelementptr inbounds i8,i8*%z,i64 8
%S=bitcast i8*%R to i8**
%T=load i8*,i8**%S,align 8
store i8*%T,i8**%e,align 8
%U=load i32,i32*%t,align 4
%V=load i32,i32*%r,align 4
%W=call fastcc i8*@_SMLFN14BoundTypeVarID3Map8inDomainE(i32 inreg%U,i32 inreg%V)
%X=getelementptr inbounds i8,i8*%W,i64 16
%Y=bitcast i8*%X to i8*(i8*,i8*)**
%Z=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%Y,align 8
%aa=bitcast i8*%W to i8**
%ab=load i8*,i8**%aa,align 8
store i8*%ab,i8**%d,align 8
%ac=call i8*@sml_alloc(i32 inreg 20)#0
%ad=getelementptr inbounds i8,i8*%ac,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 1342177296,i32*%ae,align 4
%af=getelementptr inbounds i8,i8*%ac,i64 12
%ag=bitcast i8*%af to i32*
store i32 0,i32*%ag,align 1
%ah=load i8*,i8**%c,align 8
%ai=bitcast i8*%ac to i8**
store i8*%ah,i8**%ai,align 8
%aj=getelementptr inbounds i8,i8*%ac,i64 8
%ak=bitcast i8*%aj to i32*
store i32%Q,i32*%ak,align 4
%al=getelementptr inbounds i8,i8*%ac,i64 16
%am=bitcast i8*%al to i32*
store i32 1,i32*%am,align 4
%an=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ao=call fastcc i8*%Z(i8*inreg%an,i8*inreg%ac)
%ap=bitcast i8*%ao to i32*
%aq=load i32,i32*%ap,align 4
%ar=icmp eq i32%aq,0
br i1%ar,label%b7,label%as
as:
%at=add i32%s,7
%au=sub i32 0,%s
%av=and i32%at,%au
%aw=add i32%s,3
%ax=and i32%aw,%au
%ay=add i32%at,%ax
%az=and i32%ay,-8
%aA=lshr i32%ax,3
%aB=shl i32%u,%aA
%aC=or i32%az,4
%aD=load i8*,i8**%f,align 8
%aE=bitcast i8*%aD to i32*
%aF=load i32,i32*%aE,align 4
%aG=getelementptr inbounds i8,i8*%aD,i64 4
%aH=bitcast i8*%aG to i32*
%aI=load i32,i32*%aH,align 4
%aJ=call fastcc i8*@_SMLFN14BoundTypeVarID3Map6removeE(i32 inreg%aF,i32 inreg%aI)
%aK=getelementptr inbounds i8,i8*%aJ,i64 16
%aL=bitcast i8*%aK to i8*(i8*,i8*)**
%aM=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aL,align 8
%aN=bitcast i8*%aJ to i8**
%aO=load i8*,i8**%aN,align 8
store i8*%aO,i8**%d,align 8
%aP=call i8*@sml_alloc(i32 inreg 20)#0
%aQ=getelementptr inbounds i8,i8*%aP,i64 -4
%aR=bitcast i8*%aQ to i32*
store i32 1342177296,i32*%aR,align 4
%aS=getelementptr inbounds i8,i8*%aP,i64 12
%aT=bitcast i8*%aS to i32*
store i32 0,i32*%aT,align 1
%aU=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aV=bitcast i8*%aP to i8**
store i8*%aU,i8**%aV,align 8
%aW=getelementptr inbounds i8,i8*%aP,i64 8
%aX=bitcast i8*%aW to i32*
store i32%Q,i32*%aX,align 4
%aY=getelementptr inbounds i8,i8*%aP,i64 16
%aZ=bitcast i8*%aY to i32*
store i32 1,i32*%aZ,align 4
%a0=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%a1=call fastcc i8*%aM(i8*inreg%a0,i8*inreg%aP)
store i8*%a1,i8**%d,align 8
%a2=bitcast i8*%a1 to i8**
%a3=load i8*,i8**%a2,align 8
store i8*%a3,i8**%c,align 8
%a4=load i8*,i8**%f,align 8
%a5=bitcast i8*%a4 to i32*
%a6=load i32,i32*%a5,align 4
%a7=icmp eq i32%a6,0
br i1%a7,label%bd,label%a8
a8:
store i8*null,i8**%d,align 8
%a9=sext i32%av to i64
%ba=getelementptr inbounds i8,i8*%a1,i64%a9
%bb=bitcast i8*%ba to i8**
%bc=load i8*,i8**%bb,align 8
br label%bn
bd:
%be=getelementptr inbounds i8,i8*%a4,i64 4
%bf=bitcast i8*%be to i32*
%bg=load i32,i32*%bf,align 4
%bh=call i8*@sml_alloc(i32 inreg%bg)#0
%bi=getelementptr inbounds i8,i8*%bh,i64 -4
%bj=bitcast i8*%bi to i32*
store i32%bg,i32*%bj,align 4
%bk=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bl=sext i32%av to i64
%bm=getelementptr inbounds i8,i8*%bk,i64%bl
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bh,i8*%bm,i32%bg,i1 false)
br label%bn
bn:
%bo=phi i8*[%bh,%bd],[%bc,%a8]
store i8*%bo,i8**%d,align 8
%bp=call i8*@sml_alloc(i32 inreg 20)#0
%bq=getelementptr inbounds i8,i8*%bp,i64 -4
%br=bitcast i8*%bq to i32*
store i32 1342177296,i32*%br,align 4
%bs=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bt=bitcast i8*%bp to i8**
store i8*%bs,i8**%bt,align 8
%bu=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bv=getelementptr inbounds i8,i8*%bp,i64 8
%bw=bitcast i8*%bv to i8**
store i8*%bu,i8**%bw,align 8
%bx=getelementptr inbounds i8,i8*%bp,i64 16
%by=bitcast i8*%bx to i32*
store i32 3,i32*%by,align 4
%bz=load i8*,i8**%f,align 8
%bA=call fastcc i8*@_SMLL4loop_594(i8*inreg%bz,i8*inreg%bp)
store i8*%bA,i8**%c,align 8
%bB=load i8*,i8**%f,align 8
%bC=getelementptr inbounds i8,i8*%bB,i64 4
%bD=bitcast i8*%bC to i32*
%bE=load i32,i32*%bD,align 4
store i8*null,i8**%f,align 8
%bF=bitcast i8*%bB to i32*
%bG=load i32,i32*%bF,align 4
%bH=call i8*@sml_alloc(i32 inreg%aC)#0
%bI=or i32%az,1342177280
%bJ=getelementptr inbounds i8,i8*%bH,i64 -4
%bK=bitcast i8*%bJ to i32*
store i32%bI,i32*%bK,align 4
store i8*%bH,i8**%e,align 8
call void@llvm.memset.p0i8.i32(i8*%bH,i8 0,i32%aC,i1 false)
%bL=bitcast i8*%bH to i32*
store i32%Q,i32*%bL,align 4
%bM=icmp eq i32%bG,0
%bN=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bO=sext i32%ax to i64
%bP=getelementptr inbounds i8,i8*%bH,i64%bO
br i1%bM,label%bS,label%bQ
bQ:
%bR=bitcast i8*%bP to i8**
store i8*%bN,i8**%bR,align 8
br label%bT
bS:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bP,i8*%bN,i32%bE,i1 false)
br label%bT
bT:
%bU=sext i32%az to i64
%bV=getelementptr inbounds i8,i8*%bH,i64%bU
%bW=bitcast i8*%bV to i32*
store i32%aB,i32*%bW,align 4
%bX=call i8*@sml_alloc(i32 inreg 20)#0
%bY=getelementptr inbounds i8,i8*%bX,i64 -4
%bZ=bitcast i8*%bY to i32*
store i32 1342177296,i32*%bZ,align 4
%b0=load i8*,i8**%e,align 8
%b1=bitcast i8*%bX to i8**
store i8*%b0,i8**%b1,align 8
%b2=load i8*,i8**%c,align 8
%b3=getelementptr inbounds i8,i8*%bX,i64 8
%b4=bitcast i8*%b3 to i8**
store i8*%b2,i8**%b4,align 8
%b5=getelementptr inbounds i8,i8*%bX,i64 16
%b6=bitcast i8*%b5 to i32*
store i32 3,i32*%b6,align 4
ret i8*%bX
b7:
%b8=call i8*@sml_alloc(i32 inreg 20)#0
%b9=getelementptr inbounds i8,i8*%b8,i64 -4
%ca=bitcast i8*%b9 to i32*
store i32 1342177296,i32*%ca,align 4
%cb=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cc=bitcast i8*%b8 to i8**
store i8*%cb,i8**%cc,align 8
%cd=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%ce=getelementptr inbounds i8,i8*%b8,i64 8
%cf=bitcast i8*%ce to i8**
store i8*%cd,i8**%cf,align 8
%cg=getelementptr inbounds i8,i8*%b8,i64 16
%ch=bitcast i8*%cg to i32*
store i32 3,i32*%ch,align 4
br label%g
}
define internal fastcc i8*@_SMLLN10TermFormat19listItemsiWithOrderE_597(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
n:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%f,align 8
store i8*%b,i8**%d,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%l,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%d,align 8
%k=load i8*,i8**%f,align 8
br label%l
l:
%m=phi i8*[%k,%i],[%a,%n]
%o=phi i8*[%j,%i],[%b,%n]
%p=bitcast i8*%o to i8**
%q=load i8*,i8**%p,align 8
store i8*%q,i8**%d,align 8
%r=getelementptr inbounds i8,i8*%o,i64 8
%s=bitcast i8*%r to i8**
%t=load i8*,i8**%s,align 8
store i8*%t,i8**%e,align 8
%u=bitcast i8*%m to i32*
%v=load i32,i32*%u,align 4
store i8*null,i8**%f,align 8
%w=getelementptr inbounds i8,i8*%m,i64 4
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=bitcast i8**%c to i8*
call void@llvm.lifetime.start.p0i8(i64 8,i8*%z)
call void@llvm.gcroot(i8**%c,i8*null)#0
%A=call i8*@sml_alloc(i32 inreg 12)#0
%B=bitcast i8*%A to i32*
%C=getelementptr inbounds i8,i8*%A,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177288,i32*%D,align 4
store i8*%A,i8**%c,align 8
store i32%v,i32*%B,align 4
%E=getelementptr inbounds i8,i8*%A,i64 4
%F=bitcast i8*%E to i32*
store i32%y,i32*%F,align 4
%G=getelementptr inbounds i8,i8*%A,i64 8
%H=bitcast i8*%G to i32*
store i32 0,i32*%H,align 4
%I=call i8*@sml_alloc(i32 inreg 28)#0
%J=getelementptr inbounds i8,i8*%I,i64 -4
%K=bitcast i8*%J to i32*
store i32 1342177304,i32*%K,align 4
%L=load i8*,i8**%c,align 8
%M=bitcast i8*%I to i8**
store i8*%L,i8**%M,align 8
%N=getelementptr inbounds i8,i8*%I,i64 8
%O=bitcast i8*%N to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL4loop_594 to void(...)*),void(...)**%O,align 8
%P=getelementptr inbounds i8,i8*%I,i64 16
%Q=bitcast i8*%P to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL4loop_594 to void(...)*),void(...)**%Q,align 8
%R=getelementptr inbounds i8,i8*%I,i64 24
%S=bitcast i8*%R to i32*
store i32 -2147483647,i32*%S,align 4
call void@llvm.lifetime.end.p0i8(i64 8,i8*%z)
store i8*%L,i8**%f,align 8
%T=call i8*@sml_alloc(i32 inreg 20)#0
%U=getelementptr inbounds i8,i8*%T,i64 -4
%V=bitcast i8*%U to i32*
store i32 1342177296,i32*%V,align 4
%W=load i8*,i8**%d,align 8
%X=bitcast i8*%T to i8**
store i8*%W,i8**%X,align 8
%Y=load i8*,i8**%e,align 8
%Z=getelementptr inbounds i8,i8*%T,i64 8
%aa=bitcast i8*%Z to i8**
store i8*%Y,i8**%aa,align 8
%ab=getelementptr inbounds i8,i8*%T,i64 16
%ac=bitcast i8*%ab to i32*
store i32 3,i32*%ac,align 4
%ad=load i8*,i8**%f,align 8
%ae=tail call fastcc i8*@_SMLL4loop_594(i8*inreg%ad,i8*inreg%T)
ret i8*%ae
}
define internal fastcc i8*@_SMLLN10TermFormat3addE_600(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
n:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%l,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%e,align 8
%k=load i8*,i8**%c,align 8
br label%l
l:
%m=phi i8*[%k,%i],[%b,%n]
%o=phi i8*[%j,%i],[%a,%n]
%p=getelementptr inbounds i8,i8*%o,i64 12
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=add i32%r,3
%t=sub i32 0,%r
%u=and i32%s,%t
%v=add i32%r,7
%w=add i32%v,%u
%x=and i32%w,-8
%y=lshr i32%u,3
%z=getelementptr inbounds i8,i8*%o,i64 8
%A=bitcast i8*%z to i32*
%B=load i32,i32*%A,align 4
%C=shl i32%B,%y
%D=or i32%x,4
%E=bitcast i8*%o to i8**
%F=load i8*,i8**%E,align 8
%G=bitcast i8*%F to i32*
%H=load i32,i32*%G,align 4
%I=getelementptr inbounds i8,i8*%F,i64 8
%J=bitcast i8*%I to i8**
%K=load i8*,i8**%J,align 8
store i8*%K,i8**%d,align 8
%L=bitcast i8*%m to i32*
%M=load i32,i32*%L,align 4
%N=icmp eq i32%B,0
br i1%N,label%T,label%O
O:
store i8*null,i8**%c,align 8
%P=sext i32%u to i64
%Q=getelementptr inbounds i8,i8*%m,i64%P
%R=bitcast i8*%Q to i8**
%S=load i8*,i8**%R,align 8
br label%aa
T:
%U=call i8*@sml_alloc(i32 inreg%r)#0
%V=getelementptr inbounds i8,i8*%U,i64 -4
%W=bitcast i8*%V to i32*
store i32%r,i32*%W,align 4
%X=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%Y=sext i32%u to i64
%Z=getelementptr inbounds i8,i8*%X,i64%Y
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%U,i8*%Z,i32%r,i1 false)
br label%aa
aa:
%ab=phi i64[%Y,%T],[%P,%O]
%ac=phi i8*[%U,%T],[%S,%O]
store i8*%ac,i8**%c,align 8
%ad=add nsw i32%H,1
%ae=call fastcc i8*@_SMLFN14BoundTypeVarID3Map6insertE(i32 inreg 1,i32 inreg 8)
%af=getelementptr inbounds i8,i8*%ae,i64 16
%ag=bitcast i8*%af to i8*(i8*,i8*)**
%ah=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ag,align 8
%ai=bitcast i8*%ae to i8**
%aj=load i8*,i8**%ai,align 8
store i8*%aj,i8**%f,align 8
%ak=load i8*,i8**%e,align 8
%al=getelementptr inbounds i8,i8*%ak,i64 12
%am=bitcast i8*%al to i32*
%an=load i32,i32*%am,align 4
store i8*null,i8**%e,align 8
%ao=getelementptr inbounds i8,i8*%ak,i64 8
%ap=bitcast i8*%ao to i32*
%aq=load i32,i32*%ap,align 4
%ar=call i8*@sml_alloc(i32 inreg%D)#0
%as=or i32%x,1342177280
%at=getelementptr inbounds i8,i8*%ar,i64 -4
%au=bitcast i8*%at to i32*
store i32%as,i32*%au,align 4
store i8*%ar,i8**%e,align 8
call void@llvm.memset.p0i8.i32(i8*%ar,i8 0,i32%D,i1 false)
%av=bitcast i8*%ar to i32*
store i32%H,i32*%av,align 4
%aw=icmp eq i32%aq,0
%ax=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ay=getelementptr inbounds i8,i8*%ar,i64%ab
br i1%aw,label%aB,label%az
az:
%aA=bitcast i8*%ay to i8**
store i8*%ax,i8**%aA,align 8
br label%aC
aB:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ay,i8*%ax,i32%an,i1 false)
br label%aC
aC:
%aD=sext i32%x to i64
%aE=getelementptr inbounds i8,i8*%ar,i64%aD
%aF=bitcast i8*%aE to i32*
store i32%C,i32*%aF,align 4
%aG=call i8*@sml_alloc(i32 inreg 28)#0
%aH=getelementptr inbounds i8,i8*%aG,i64 -4
%aI=bitcast i8*%aH to i32*
store i32 1342177304,i32*%aI,align 4
%aJ=getelementptr inbounds i8,i8*%aG,i64 12
%aK=bitcast i8*%aJ to i32*
store i32 0,i32*%aK,align 1
%aL=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aM=bitcast i8*%aG to i8**
store i8*%aL,i8**%aM,align 8
%aN=getelementptr inbounds i8,i8*%aG,i64 8
%aO=bitcast i8*%aN to i32*
store i32%M,i32*%aO,align 4
%aP=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aQ=getelementptr inbounds i8,i8*%aG,i64 16
%aR=bitcast i8*%aQ to i8**
store i8*%aP,i8**%aR,align 8
%aS=getelementptr inbounds i8,i8*%aG,i64 24
%aT=bitcast i8*%aS to i32*
store i32 5,i32*%aT,align 4
%aU=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%aV=call fastcc i8*%ah(i8*inreg%aU,i8*inreg%aG)
store i8*%aV,i8**%c,align 8
%aW=call i8*@sml_alloc(i32 inreg 20)#0
%aX=bitcast i8*%aW to i32*
%aY=getelementptr inbounds i8,i8*%aW,i64 -4
%aZ=bitcast i8*%aY to i32*
store i32 1342177296,i32*%aZ,align 4
%a0=getelementptr inbounds i8,i8*%aW,i64 4
%a1=bitcast i8*%a0 to i32*
store i32 0,i32*%a1,align 1
store i32%ad,i32*%aX,align 4
%a2=load i8*,i8**%c,align 8
%a3=getelementptr inbounds i8,i8*%aW,i64 8
%a4=bitcast i8*%a3 to i8**
store i8*%a2,i8**%a4,align 8
%a5=getelementptr inbounds i8,i8*%aW,i64 16
%a6=bitcast i8*%a5 to i32*
store i32 2,i32*%a6,align 4
ret i8*%aW
}
define internal fastcc i8*@_SMLLN10TermFormat3addE_601(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat3addE_600 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat3addE_600 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define internal fastcc i8*@_SMLLN10TermFormat3addE_602(i32 inreg%a,i32 inreg%b)unnamed_addr#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat3addE_601 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat3addE_601 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLN10TermFormat12extendBtvEnvE_604(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
m:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%k,label%h
h:
call void@sml_check(i32 inreg%f)
%i=load i8*,i8**%c,align 8
%j=load i8*,i8**%e,align 8
br label%k
k:
%l=phi i8*[%j,%h],[%a,%m]
%n=phi i8*[%i,%h],[%b,%m]
%o=getelementptr inbounds i8,i8*%l,i64 4
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=add i32%q,3
%s=sub i32 0,%q
%t=and i32%r,%s
%u=add i32%q,7
%v=add i32%u,%t
%w=and i32%v,-8
%x=lshr i32%t,3
%y=bitcast i8*%l to i32*
%z=load i32,i32*%y,align 4
%A=shl i32%z,%x
%B=or i32%w,4
%C=bitcast i8*%n to i32*
%D=load i32,i32*%C,align 4
%E=icmp eq i32%z,0
br i1%E,label%K,label%F
F:
%G=sext i32%t to i64
%H=getelementptr inbounds i8,i8*%n,i64%G
%I=bitcast i8*%H to i8**
%J=load i8*,i8**%I,align 8
br label%V
K:
%L=call i8*@sml_alloc(i32 inreg%q)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32%q,i32*%N,align 4
%O=load i8*,i8**%c,align 8
%P=sext i32%t to i64
%Q=getelementptr inbounds i8,i8*%O,i64%P
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%L,i8*%Q,i32%q,i1 false)
%R=load i8*,i8**%e,align 8
%S=bitcast i8*%R to i32*
%T=getelementptr inbounds i8,i8*%R,i64 4
%U=bitcast i8*%T to i32*
br label%V
V:
%W=phi i64[%P,%K],[%G,%F]
%X=phi i32*[%U,%K],[%p,%F]
%Y=phi i32*[%S,%K],[%y,%F]
%Z=phi i8*[%L,%K],[%J,%F]
store i8*%Z,i8**%d,align 8
%aa=load i32,i32*%Y,align 4
%ab=load i32,i32*%X,align 4
%ac=call fastcc i8*@_SMLLN10TermFormat3addE_602(i32 inreg%aa,i32 inreg%ab)
%ad=getelementptr inbounds i8,i8*%ac,i64 16
%ae=bitcast i8*%ad to i8*(i8*,i8*)**
%af=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ae,align 8
%ag=bitcast i8*%ac to i8**
%ah=load i8*,i8**%ag,align 8
%ai=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aj=sext i32%w to i64
%ak=getelementptr inbounds i8,i8*%ai,i64%aj
%al=bitcast i8*%ak to i8**
%am=load i8*,i8**%al,align 8
%an=call fastcc i8*%af(i8*inreg%ah,i8*inreg%am)
%ao=getelementptr inbounds i8,i8*%an,i64 16
%ap=bitcast i8*%ao to i8*(i8*,i8*)**
%aq=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ap,align 8
%ar=bitcast i8*%an to i8**
%as=load i8*,i8**%ar,align 8
store i8*%as,i8**%c,align 8
%at=load i8*,i8**%e,align 8
%au=getelementptr inbounds i8,i8*%at,i64 4
%av=bitcast i8*%au to i32*
%aw=load i32,i32*%av,align 4
store i8*null,i8**%e,align 8
%ax=bitcast i8*%at to i32*
%ay=load i32,i32*%ax,align 4
%az=call i8*@sml_alloc(i32 inreg%B)#0
%aA=or i32%w,1342177280
%aB=bitcast i8*%az to i32*
%aC=getelementptr inbounds i8,i8*%az,i64 -4
%aD=bitcast i8*%aC to i32*
store i32%aA,i32*%aD,align 4
call void@llvm.memset.p0i8.i32(i8*%az,i8 0,i32%B,i1 false)
store i32%D,i32*%aB,align 4
%aE=icmp eq i32%ay,0
%aF=load i8*,i8**%d,align 8
%aG=getelementptr inbounds i8,i8*%az,i64%W
br i1%aE,label%aJ,label%aH
aH:
%aI=bitcast i8*%aG to i8**
store i8*%aF,i8**%aI,align 8
br label%aK
aJ:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aG,i8*%aF,i32%aw,i1 false)
br label%aK
aK:
%aL=getelementptr inbounds i8,i8*%az,i64%aj
%aM=bitcast i8*%aL to i32*
store i32%A,i32*%aM,align 4
%aN=load i8*,i8**%c,align 8
%aO=tail call fastcc i8*%aq(i8*inreg%aN,i8*inreg%az)
ret i8*%aO
}
define internal fastcc i8*@_SMLLN10TermFormat12extendBtvEnvE_605(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
m:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%k,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%c,align 8
br label%k
k:
%l=phi i8*[%j,%i],[%a,%m]
%n=getelementptr inbounds i8,i8*%l,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%l,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLFN14BoundTypeVarID3Map6foldliE(i32 inreg%p,i32 inreg%s,i32 inreg 1,i32 inreg 8)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
store i8*%y,i8**%e,align 8
%z=load i8*,i8**%c,align 8
%A=getelementptr inbounds i8,i8*%z,i64 8
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=getelementptr inbounds i8,i8*%z,i64 12
%E=bitcast i8*%D to i32*
%F=load i32,i32*%E,align 4
%G=call i8*@sml_alloc(i32 inreg 12)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 1342177288,i32*%J,align 4
store i8*%G,i8**%f,align 8
store i32%C,i32*%H,align 4
%K=getelementptr inbounds i8,i8*%G,i64 4
%L=bitcast i8*%K to i32*
store i32%F,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%G,i64 8
%N=bitcast i8*%M to i32*
store i32 0,i32*%N,align 4
%O=call i8*@sml_alloc(i32 inreg 28)#0
%P=getelementptr inbounds i8,i8*%O,i64 -4
%Q=bitcast i8*%P to i32*
store i32 1342177304,i32*%Q,align 4
%R=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%S=bitcast i8*%O to i8**
store i8*%R,i8**%S,align 8
%T=getelementptr inbounds i8,i8*%O,i64 8
%U=bitcast i8*%T to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12extendBtvEnvE_604 to void(...)*),void(...)**%U,align 8
%V=getelementptr inbounds i8,i8*%O,i64 16
%W=bitcast i8*%V to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12extendBtvEnvE_604 to void(...)*),void(...)**%W,align 8
%X=getelementptr inbounds i8,i8*%O,i64 24
%Y=bitcast i8*%X to i32*
store i32 -2147483647,i32*%Y,align 4
%Z=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aa=call fastcc i8*%w(i8*inreg%Z,i8*inreg%O)
%ab=getelementptr inbounds i8,i8*%aa,i64 16
%ac=bitcast i8*%ab to i8*(i8*,i8*)**
%ad=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ac,align 8
%ae=bitcast i8*%aa to i8**
%af=load i8*,i8**%ae,align 8
%ag=bitcast i8**%c to i8***
%ah=load i8**,i8***%ag,align 8
store i8*null,i8**%c,align 8
%ai=load i8*,i8**%ah,align 8
%aj=call fastcc i8*%ad(i8*inreg%af,i8*inreg%ai)
%ak=getelementptr inbounds i8,i8*%aj,i64 16
%al=bitcast i8*%ak to i8*(i8*,i8*)**
%am=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%al,align 8
%an=bitcast i8*%aj to i8**
%ao=load i8*,i8**%an,align 8
%ap=load i8*,i8**%d,align 8
%aq=tail call fastcc i8*%am(i8*inreg%ao,i8*inreg%ap)
ret i8*%aq
}
define internal fastcc i8*@_SMLLN10TermFormat12extendBtvEnvE_606(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12extendBtvEnvE_605 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12extendBtvEnvE_605 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define internal fastcc i8*@_SMLLN10TermFormat12extendBtvEnvE_607(i32 inreg%a,i32 inreg%b)unnamed_addr#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12extendBtvEnvE_606 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12extendBtvEnvE_606 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLN10TermFormat21extendBtvEnvWithOrderE_609(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i32*
%m=load i32,i32*%l,align 4
store i8*null,i8**%d,align 8
%n=getelementptr inbounds i8,i8*%j,i64 4
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=call fastcc i8*@_SMLLN10TermFormat3addE_602(i32 inreg%m,i32 inreg%p)
%r=getelementptr inbounds i8,i8*%q,i64 16
%s=bitcast i8*%r to i8*(i8*,i8*)**
%t=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%s,align 8
%u=bitcast i8*%q to i8**
%v=load i8*,i8**%u,align 8
%w=load i8*,i8**%c,align 8
%x=getelementptr inbounds i8,i8*%w,i64 8
%y=bitcast i8*%x to i8**
%z=load i8*,i8**%y,align 8
%A=call fastcc i8*%t(i8*inreg%v,i8*inreg%z)
%B=getelementptr inbounds i8,i8*%A,i64 16
%C=bitcast i8*%B to i8*(i8*,i8*)**
%D=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%C,align 8
%E=bitcast i8*%A to i8**
%F=load i8*,i8**%E,align 8
%G=bitcast i8**%c to i8***
%H=load i8**,i8***%G,align 8
%I=load i8*,i8**%H,align 8
%J=tail call fastcc i8*%D(i8*inreg%F,i8*inreg%I)
ret i8*%J
}
define internal fastcc i8*@_SMLLN10TermFormat21extendBtvEnvWithOrderE_610(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%d,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%k,label%j
j:
call void@sml_check(i32 inreg%h)
br label%k
k:
%l=call fastcc i8*@_SMLFN4List5foldlE(i32 inreg 1,i32 inreg 8,i32 inreg 1,i32 inreg 8)
%m=getelementptr inbounds i8,i8*%l,i64 16
%n=bitcast i8*%m to i8*(i8*,i8*)**
%o=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%n,align 8
%p=bitcast i8*%l to i8**
%q=load i8*,i8**%p,align 8
store i8*%q,i8**%f,align 8
%r=load i8*,i8**%e,align 8
%s=getelementptr inbounds i8,i8*%r,i64 8
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=getelementptr inbounds i8,i8*%r,i64 12
%w=bitcast i8*%v to i32*
%x=load i32,i32*%w,align 4
%y=call i8*@sml_alloc(i32 inreg 12)#0
%z=bitcast i8*%y to i32*
%A=getelementptr inbounds i8,i8*%y,i64 -4
%B=bitcast i8*%A to i32*
store i32 1342177288,i32*%B,align 4
store i8*%y,i8**%g,align 8
store i32%u,i32*%z,align 4
%C=getelementptr inbounds i8,i8*%y,i64 4
%D=bitcast i8*%C to i32*
store i32%x,i32*%D,align 4
%E=getelementptr inbounds i8,i8*%y,i64 8
%F=bitcast i8*%E to i32*
store i32 0,i32*%F,align 4
%G=call i8*@sml_alloc(i32 inreg 28)#0
%H=getelementptr inbounds i8,i8*%G,i64 -4
%I=bitcast i8*%H to i32*
store i32 1342177304,i32*%I,align 4
%J=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%K=bitcast i8*%G to i8**
store i8*%J,i8**%K,align 8
%L=getelementptr inbounds i8,i8*%G,i64 8
%M=bitcast i8*%L to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat21extendBtvEnvWithOrderE_609 to void(...)*),void(...)**%M,align 8
%N=getelementptr inbounds i8,i8*%G,i64 16
%O=bitcast i8*%N to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat21extendBtvEnvWithOrderE_609 to void(...)*),void(...)**%O,align 8
%P=getelementptr inbounds i8,i8*%G,i64 24
%Q=bitcast i8*%P to i32*
store i32 -2147483647,i32*%Q,align 4
%R=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%S=call fastcc i8*%o(i8*inreg%R,i8*inreg%G)
%T=getelementptr inbounds i8,i8*%S,i64 16
%U=bitcast i8*%T to i8*(i8*,i8*)**
%V=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%U,align 8
%W=bitcast i8*%S to i8**
%X=load i8*,i8**%W,align 8
%Y=bitcast i8**%e to i8***
%Z=load i8**,i8***%Y,align 8
%aa=load i8*,i8**%Z,align 8
%ab=call fastcc i8*%V(i8*inreg%X,i8*inreg%aa)
%ac=getelementptr inbounds i8,i8*%ab,i64 16
%ad=bitcast i8*%ac to i8*(i8*,i8*)**
%ae=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ad,align 8
%af=bitcast i8*%ab to i8**
%ag=load i8*,i8**%af,align 8
store i8*%ag,i8**%f,align 8
%ah=load i8*,i8**%e,align 8
%ai=getelementptr inbounds i8,i8*%ah,i64 8
%aj=bitcast i8*%ai to i32*
%ak=load i32,i32*%aj,align 4
store i8*null,i8**%e,align 8
%al=getelementptr inbounds i8,i8*%ah,i64 12
%am=bitcast i8*%al to i32*
%an=load i32,i32*%am,align 4
%ao=bitcast i8**%c to i8*
call void@llvm.lifetime.start.p0i8(i64 8,i8*%ao)
call void@llvm.gcroot(i8**%c,i8*null)#0
%ap=call i8*@sml_alloc(i32 inreg 12)#0
%aq=bitcast i8*%ap to i32*
%ar=getelementptr inbounds i8,i8*%ap,i64 -4
%as=bitcast i8*%ar to i32*
store i32 1342177288,i32*%as,align 4
store i8*%ap,i8**%c,align 8
store i32%ak,i32*%aq,align 4
%at=getelementptr inbounds i8,i8*%ap,i64 4
%au=bitcast i8*%at to i32*
store i32%an,i32*%au,align 4
%av=getelementptr inbounds i8,i8*%ap,i64 8
%aw=bitcast i8*%av to i32*
store i32 0,i32*%aw,align 4
%ax=call i8*@sml_alloc(i32 inreg 28)#0
%ay=getelementptr inbounds i8,i8*%ax,i64 -4
%az=bitcast i8*%ay to i32*
store i32 1342177304,i32*%az,align 4
%aA=load i8*,i8**%c,align 8
%aB=bitcast i8*%ax to i8**
store i8*%aA,i8**%aB,align 8
%aC=getelementptr inbounds i8,i8*%ax,i64 8
%aD=bitcast i8*%aC to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat19listItemsiWithOrderE_597 to void(...)*),void(...)**%aD,align 8
%aE=getelementptr inbounds i8,i8*%ax,i64 16
%aF=bitcast i8*%aE to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat19listItemsiWithOrderE_597 to void(...)*),void(...)**%aF,align 8
%aG=getelementptr inbounds i8,i8*%ax,i64 24
%aH=bitcast i8*%aG to i32*
store i32 -2147483647,i32*%aH,align 4
call void@llvm.lifetime.end.p0i8(i64 8,i8*%ao)
%aI=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aJ=call fastcc i8*@_SMLLN10TermFormat19listItemsiWithOrderE_597(i8*inreg%aA,i8*inreg%aI)
%aK=load i8*,i8**%f,align 8
%aL=tail call fastcc i8*%ae(i8*inreg%aK,i8*inreg%aJ)
ret i8*%aL
}
define internal fastcc i8*@_SMLLN10TermFormat21extendBtvEnvWithOrderE_611(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat21extendBtvEnvWithOrderE_610 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat21extendBtvEnvWithOrderE_610 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define internal fastcc i8*@_SMLLN10TermFormat6tvNameE_614(i8 inreg%a,i32 inreg%b)unnamed_addr#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%h,label%g
g:
call void@sml_check(i32 inreg%e)
br label%h
h:
%i=icmp sgt i32%b,25
br i1%i,label%I,label%j
j:
%k=zext i8%a to i32
%l=add nsw i32%k,%b
%m=icmp ugt i32%l,255
br i1%m,label%q,label%n
n:
%o=trunc i32%l to i8
%p=tail call fastcc i8*@_SMLFN6String3strE(i8 inreg%o)
ret i8*%p
q:
%r=load i8*,i8**@_SMLZ3Chr,align 8
store i8*%r,i8**%c,align 8
%s=call i8*@sml_alloc(i32 inreg 20)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177296,i32*%u,align 4
store i8*%s,i8**%d,align 8
%v=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[57x i8]}>,<{[4x i8],i32,[57x i8]}>*@a3,i64 0,i32 2,i64 0),i8**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to i32*
store i32 3,i32*%A,align 4
%B=call i8*@sml_alloc(i32 inreg 60)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177336,i32*%D,align 4
%E=getelementptr inbounds i8,i8*%B,i64 56
%F=bitcast i8*%E to i32*
store i32 1,i32*%F,align 4
%G=load i8*,i8**%d,align 8
%H=bitcast i8*%B to i8**
store i8*%G,i8**%H,align 8
call void@sml_raise(i8*inreg%B)#1
unreachable
I:
%J=udiv i32%b,26
%K=urem i32%b,26
%L=lshr i32%b,31
%M=icmp ne i32%K,0
%N=zext i1%M to i32
%O=and i32%L,%N
%P=sub nsw i32%J,%O
%Q=call fastcc i8*@_SMLLN10TermFormat6tvNameE_614(i8 inreg%a,i32 inreg%P)
store i8*%Q,i8**%c,align 8
%R=zext i8%a to i32
%S=sub nsw i32 0,%O
%T=and i32%S,26
%U=add nuw nsw i32%K,%R
%V=add nuw nsw i32%U,%T
%W=icmp ugt i32%V,255
br i1%W,label%al,label%X
X:
%Y=trunc i32%V to i8
%Z=call fastcc i8*@_SMLFN6String3strE(i8 inreg%Y)
store i8*%Z,i8**%d,align 8
%aa=call i8*@sml_alloc(i32 inreg 20)#0
%ab=getelementptr inbounds i8,i8*%aa,i64 -4
%ac=bitcast i8*%ab to i32*
store i32 1342177296,i32*%ac,align 4
%ad=load i8*,i8**%c,align 8
%ae=bitcast i8*%aa to i8**
store i8*%ad,i8**%ae,align 8
%af=load i8*,i8**%d,align 8
%ag=getelementptr inbounds i8,i8*%aa,i64 8
%ah=bitcast i8*%ag to i8**
store i8*%af,i8**%ah,align 8
%ai=getelementptr inbounds i8,i8*%aa,i64 16
%aj=bitcast i8*%ai to i32*
store i32 3,i32*%aj,align 4
%ak=tail call fastcc i8*@_SMLFN6String1_ZE(i8*inreg%aa)
ret i8*%ak
al:
%am=load i8*,i8**@_SMLZ3Chr,align 8
store i8*%am,i8**%c,align 8
%an=call i8*@sml_alloc(i32 inreg 20)#0
%ao=getelementptr inbounds i8,i8*%an,i64 -4
%ap=bitcast i8*%ao to i32*
store i32 1342177296,i32*%ap,align 4
store i8*%an,i8**%d,align 8
%aq=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ar=bitcast i8*%an to i8**
store i8*%aq,i8**%ar,align 8
%as=getelementptr inbounds i8,i8*%an,i64 8
%at=bitcast i8*%as to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[57x i8]}>,<{[4x i8],i32,[57x i8]}>*@a2,i64 0,i32 2,i64 0),i8**%at,align 8
%au=getelementptr inbounds i8,i8*%an,i64 16
%av=bitcast i8*%au to i32*
store i32 3,i32*%av,align 4
%aw=call i8*@sml_alloc(i32 inreg 60)#0
%ax=getelementptr inbounds i8,i8*%aw,i64 -4
%ay=bitcast i8*%ax to i32*
store i32 1342177336,i32*%ay,align 4
%az=getelementptr inbounds i8,i8*%aw,i64 56
%aA=bitcast i8*%az to i32*
store i32 1,i32*%aA,align 4
%aB=load i8*,i8**%d,align 8
%aC=bitcast i8*%aw to i8**
store i8*%aB,i8**%aC,align 8
call void@sml_raise(i8*inreg%aw)#1
unreachable
}
define fastcc i8*@_SMLFN10TermFormat15formatFreeTyvarE(i32 inreg%a)#2 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%g,label%f
f:
call void@sml_check(i32 inreg%d)
br label%g
g:
%h=call fastcc i32@_SMLFN13FreeTypeVarID5toIntE(i32 inreg%a)
%i=call fastcc i8*@_SMLLN10TermFormat6tvNameE_614(i8 inreg 65,i32 inreg%h)
store i8*%i,i8**%b,align 8
%j=getelementptr inbounds i8,i8*%i,i64 -4
%k=bitcast i8*%j to i32*
%l=load i32,i32*%k,align 4
%m=and i32%l,268435455
%n=add nsw i32%m,-1
%o=call i8*@sml_alloc(i32 inreg 20)#0
%p=getelementptr inbounds i8,i8*%o,i64 -4
%q=bitcast i8*%p to i32*
store i32 1342177296,i32*%q,align 4
store i8*%o,i8**%c,align 8
%r=getelementptr inbounds i8,i8*%o,i64 4
%s=bitcast i8*%r to i32*
store i32 0,i32*%s,align 1
%t=bitcast i8*%o to i32*
store i32%n,i32*%t,align 4
%u=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%v=getelementptr inbounds i8,i8*%o,i64 8
%w=bitcast i8*%v to i8**
store i8*%u,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%o,i64 16
%y=bitcast i8*%x to i32*
store i32 2,i32*%y,align 4
%z=call i8*@sml_alloc(i32 inreg 20)#0
%A=getelementptr inbounds i8,i8*%z,i64 -4
%B=bitcast i8*%A to i32*
store i32 1342177296,i32*%B,align 4
store i8*%z,i8**%b,align 8
%C=getelementptr inbounds i8,i8*%z,i64 4
%D=bitcast i8*%C to i32*
store i32 0,i32*%D,align 1
%E=bitcast i8*%z to i32*
store i32 6,i32*%E,align 4
%F=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%G=getelementptr inbounds i8,i8*%z,i64 8
%H=bitcast i8*%G to i8**
store i8*%F,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%z,i64 16
%J=bitcast i8*%I to i32*
store i32 2,i32*%J,align 4
%K=call i8*@sml_alloc(i32 inreg 20)#0
%L=getelementptr inbounds i8,i8*%K,i64 -4
%M=bitcast i8*%L to i32*
store i32 1342177296,i32*%M,align 4
%N=load i8*,i8**%b,align 8
%O=bitcast i8*%K to i8**
store i8*%N,i8**%O,align 8
%P=getelementptr inbounds i8,i8*%K,i64 8
%Q=bitcast i8*%P to i8**
store i8*null,i8**%Q,align 8
%R=getelementptr inbounds i8,i8*%K,i64 16
%S=bitcast i8*%R to i32*
store i32 3,i32*%S,align 4
store i8*null,i8**%c,align 8
%T=call i8*@sml_alloc(i32 inreg 20)#0
%U=getelementptr inbounds i8,i8*%T,i64 -4
%V=bitcast i8*%U to i32*
store i32 1342177296,i32*%V,align 4
%W=load i8*,i8**%b,align 8
%X=bitcast i8*%T to i8**
store i8*%W,i8**%X,align 8
%Y=load i8*,i8**%c,align 8
%Z=getelementptr inbounds i8,i8*%T,i64 8
%aa=bitcast i8*%Z to i8**
store i8*%Y,i8**%aa,align 8
%ab=getelementptr inbounds i8,i8*%T,i64 16
%ac=bitcast i8*%ab to i32*
store i32 3,i32*%ac,align 4
ret i8*%T
}
define internal fastcc i8*@_SMLLN10TermFormat6lookupE_628(i8*inreg%a,i32 inreg%b)#2 gc"smlsharp"{
l:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%d,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%j,label%h
h:
call void@sml_check(i32 inreg%f)
%i=load i8*,i8**%d,align 8
br label%j
j:
%k=phi i8*[%i,%h],[%a,%l]
%m=getelementptr inbounds i8,i8*%k,i64 12
%n=bitcast i8*%m to i32*
%o=load i32,i32*%n,align 4
%p=add i32%o,3
%q=sub i32 0,%o
%r=and i32%p,%q
%s=add i32%o,-1
%t=and i32%s,%q
%u=add i32%o,7
%v=add i32%u,%t
%w=and i32%v,-8
%x=getelementptr inbounds i8,i8*%k,i64 8
%y=bitcast i8*%x to i32*
%z=load i32,i32*%y,align 4
%A=or i32%w,4
%B=call fastcc i8*@_SMLFN14BoundTypeVarID3Map4findE(i32 inreg 1,i32 inreg 8)
%C=getelementptr inbounds i8,i8*%B,i64 16
%D=bitcast i8*%C to i8*(i8*,i8*)**
%E=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%D,align 8
%F=bitcast i8*%B to i8**
%G=load i8*,i8**%F,align 8
store i8*%G,i8**%e,align 8
%H=bitcast i8**%d to i8***
%I=load i8**,i8***%H,align 8
%J=load i8*,i8**%I,align 8
%K=getelementptr inbounds i8,i8*%J,i64 8
%L=bitcast i8*%K to i8**
%M=load i8*,i8**%L,align 8
store i8*%M,i8**%c,align 8
%N=call i8*@sml_alloc(i32 inreg 20)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32 1342177296,i32*%P,align 4
%Q=getelementptr inbounds i8,i8*%N,i64 12
%R=bitcast i8*%Q to i32*
store i32 0,i32*%R,align 1
%S=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%T=bitcast i8*%N to i8**
store i8*%S,i8**%T,align 8
%U=getelementptr inbounds i8,i8*%N,i64 8
%V=bitcast i8*%U to i32*
store i32%b,i32*%V,align 4
%W=getelementptr inbounds i8,i8*%N,i64 16
%X=bitcast i8*%W to i32*
store i32 1,i32*%X,align 4
%Y=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%Z=call fastcc i8*%E(i8*inreg%Y,i8*inreg%N)
%aa=icmp eq i8*%Z,null
br i1%aa,label%ab,label%at
ab:
store i8*null,i8**%d,align 8
%ac=call i8*@sml_alloc(i32 inreg 12)#0
%ad=bitcast i8*%ac to i32*
%ae=getelementptr inbounds i8,i8*%ac,i64 -4
%af=bitcast i8*%ae to i32*
store i32 1342177288,i32*%af,align 4
store i8*%ac,i8**%c,align 8
store i32 1,i32*%ad,align 4
%ag=getelementptr inbounds i8,i8*%ac,i64 4
%ah=bitcast i8*%ag to i32*
store i32%b,i32*%ah,align 4
%ai=getelementptr inbounds i8,i8*%ac,i64 8
%aj=bitcast i8*%ai to i32*
store i32 0,i32*%aj,align 4
%ak=call i8*@sml_alloc(i32 inreg 20)#0
%al=getelementptr inbounds i8,i8*%ak,i64 -4
%am=bitcast i8*%al to i32*
store i32 1342177296,i32*%am,align 4
%an=load i8*,i8**%c,align 8
%ao=bitcast i8*%ak to i8**
store i8*%an,i8**%ao,align 8
%ap=getelementptr inbounds i8,i8*%ak,i64 8
%aq=bitcast i8*%ap to i8**
store i8*null,i8**%aq,align 8
%ar=getelementptr inbounds i8,i8*%ak,i64 16
%as=bitcast i8*%ar to i32*
store i32 3,i32*%as,align 4
ret i8*%ak
at:
%au=bitcast i8*%Z to i8**
%av=load i8*,i8**%au,align 8
store i8*%av,i8**%c,align 8
%aw=bitcast i8*%av to i32*
%ax=load i32,i32*%aw,align 4
%ay=call i8*@sml_alloc(i32 inreg 12)#0
%az=bitcast i8*%ay to i32*
%aA=getelementptr inbounds i8,i8*%ay,i64 -4
%aB=bitcast i8*%aA to i32*
store i32 1342177288,i32*%aB,align 4
store i8*%ay,i8**%e,align 8
store i32 0,i32*%az,align 4
%aC=getelementptr inbounds i8,i8*%ay,i64 4
%aD=bitcast i8*%aC to i32*
store i32%ax,i32*%aD,align 4
%aE=getelementptr inbounds i8,i8*%ay,i64 8
%aF=bitcast i8*%aE to i32*
store i32 0,i32*%aF,align 4
%aG=load i8*,i8**%d,align 8
%aH=getelementptr inbounds i8,i8*%aG,i64 8
%aI=bitcast i8*%aH to i32*
%aJ=load i32,i32*%aI,align 4
%aK=icmp eq i32%aJ,0
br i1%aK,label%aR,label%aL
aL:
%aM=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aN=sext i32%r to i64
%aO=getelementptr inbounds i8,i8*%aM,i64%aN
%aP=bitcast i8*%aO to i8**
%aQ=load i8*,i8**%aP,align 8
br label%a5
aR:
%aS=getelementptr inbounds i8,i8*%aG,i64 12
%aT=bitcast i8*%aS to i32*
%aU=load i32,i32*%aT,align 4
%aV=call i8*@sml_alloc(i32 inreg%aU)#0
%aW=getelementptr inbounds i8,i8*%aV,i64 -4
%aX=bitcast i8*%aW to i32*
store i32%aU,i32*%aX,align 4
%aY=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aZ=sext i32%r to i64
%a0=getelementptr inbounds i8,i8*%aY,i64%aZ
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aV,i8*%a0,i32%aU,i1 false)
%a1=load i8*,i8**%d,align 8
%a2=getelementptr inbounds i8,i8*%a1,i64 8
%a3=bitcast i8*%a2 to i32*
%a4=load i32,i32*%a3,align 4
br label%a5
a5:
%a6=phi i32[%a4,%aR],[%aJ,%aL]
%a7=phi i8*[%a1,%aR],[%aG,%aL]
%a8=phi i8*[%aV,%aR],[%aQ,%aL]
store i8*%a8,i8**%c,align 8
%a9=getelementptr inbounds i8,i8*%a7,i64 12
%ba=bitcast i8*%a9 to i32*
%bb=load i32,i32*%ba,align 4
store i8*null,i8**%d,align 8
%bc=call i8*@sml_alloc(i32 inreg%A)#0
%bd=or i32%w,1342177280
%be=getelementptr inbounds i8,i8*%bc,i64 -4
%bf=bitcast i8*%be to i32*
store i32%bd,i32*%bf,align 4
store i8*%bc,i8**%d,align 8
call void@llvm.memset.p0i8.i32(i8*%bc,i8 0,i32%A,i1 false)
%bg=icmp eq i32%a6,0
%bh=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bi=sext i32%t to i64
%bj=getelementptr inbounds i8,i8*%bc,i64%bi
br i1%bg,label%bm,label%bk
bk:
%bl=bitcast i8*%bj to i8**
store i8*%bh,i8**%bl,align 8
br label%bn
bm:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bj,i8*%bh,i32%bb,i1 false)
br label%bn
bn:
%bo=sext i32%w to i64
%bp=getelementptr inbounds i8,i8*%bc,i64%bo
%bq=bitcast i8*%bp to i32*
store i32%z,i32*%bq,align 4
%br=call i8*@sml_alloc(i32 inreg 20)#0
%bs=getelementptr inbounds i8,i8*%br,i64 -4
%bt=bitcast i8*%bs to i32*
store i32 1342177296,i32*%bt,align 4
%bu=load i8*,i8**%e,align 8
%bv=bitcast i8*%br to i8**
store i8*%bu,i8**%bv,align 8
%bw=load i8*,i8**%d,align 8
%bx=getelementptr inbounds i8,i8*%br,i64 8
%by=bitcast i8*%bx to i8**
store i8*%bw,i8**%by,align 8
%bz=getelementptr inbounds i8,i8*%br,i64 16
%bA=bitcast i8*%bz to i32*
store i32 3,i32*%bA,align 4
ret i8*%br
}
define internal fastcc i8*@_SMLLN10TermFormat6lookupE_629(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i32)*@_SMLLN10TermFormat6lookupE_628 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat6lookupE_1117 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define internal fastcc i8*@_SMLLN10TermFormat6lookupE_630(i32 inreg%a,i32 inreg%b)unnamed_addr#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat6lookupE_629 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat6lookupE_629 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLN10TermFormat9formatBtvE_635(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
o:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%f,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%m,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%c,align 8
%l=load i8*,i8**%f,align 8
br label%m
m:
%n=phi i8*[%l,%j],[%a,%o]
%p=phi i8*[%k,%j],[%b,%o]
store i8*%p,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%n,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=add i32%s,-1
%u=sub i32 0,%s
%v=and i32%t,%u
%w=bitcast i8*%p to i8***
%x=load i8**,i8***%w,align 8
%y=load i8*,i8**%x,align 8
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
switch i32%A,label%B[
i32 0,label%as
i32 1,label%T
]
B:
store i8*null,i8**%d,align 8
store i8*null,i8**%f,align 8
call void@sml_matchcomp_bug()
%C=load i8*,i8**@_SMLZ5Match,align 8
store i8*%C,i8**%c,align 8
%D=call i8*@sml_alloc(i32 inreg 20)#0
%E=getelementptr inbounds i8,i8*%D,i64 -4
%F=bitcast i8*%E to i32*
store i32 1342177296,i32*%F,align 4
store i8*%D,i8**%d,align 8
%G=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%H=bitcast i8*%D to i8**
store i8*%G,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%D,i64 8
%J=bitcast i8*%I to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[57x i8]}>,<{[4x i8],i32,[57x i8]}>*@a5,i64 0,i32 2,i64 0),i8**%J,align 8
%K=getelementptr inbounds i8,i8*%D,i64 16
%L=bitcast i8*%K to i32*
store i32 3,i32*%L,align 4
%M=call i8*@sml_alloc(i32 inreg 60)#0
%N=getelementptr inbounds i8,i8*%M,i64 -4
%O=bitcast i8*%N to i32*
store i32 1342177336,i32*%O,align 4
%P=getelementptr inbounds i8,i8*%M,i64 56
%Q=bitcast i8*%P to i32*
store i32 1,i32*%Q,align 4
%R=load i8*,i8**%d,align 8
%S=bitcast i8*%M to i8**
store i8*%R,i8**%S,align 8
call void@sml_raise(i8*inreg%M)#1
unreachable
T:
%U=getelementptr inbounds i8,i8*%y,i64 4
%V=bitcast i8*%U to i32*
%W=load i32,i32*%V,align 4
%X=call fastcc i8*@_SMLFN14BoundTypeVarID8toStringE(i32 inreg%W)
store i8*%X,i8**%c,align 8
%Y=call i8*@sml_alloc(i32 inreg 20)#0
%Z=getelementptr inbounds i8,i8*%Y,i64 -4
%aa=bitcast i8*%Z to i32*
store i32 1342177296,i32*%aa,align 4
%ab=bitcast i8*%Y to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[9x i8]}>,<{[4x i8],i32,[9x i8]}>*@a6,i64 0,i32 2,i64 0),i8**%ab,align 8
%ac=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ad=getelementptr inbounds i8,i8*%Y,i64 8
%ae=bitcast i8*%ad to i8**
store i8*%ac,i8**%ae,align 8
%af=getelementptr inbounds i8,i8*%Y,i64 16
%ag=bitcast i8*%af to i32*
store i32 3,i32*%ag,align 4
%ah=call fastcc i8*@_SMLFN6String1_ZE(i8*inreg%Y)
store i8*%ah,i8**%c,align 8
%ai=call i8*@sml_alloc(i32 inreg 20)#0
%aj=getelementptr inbounds i8,i8*%ai,i64 -4
%ak=bitcast i8*%aj to i32*
store i32 1342177296,i32*%ak,align 4
%al=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%am=bitcast i8*%ai to i8**
store i8*%al,i8**%am,align 8
%an=getelementptr inbounds i8,i8*%ai,i64 8
%ao=bitcast i8*%an to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bp,i64 0,i32 2,i64 0),i8**%ao,align 8
%ap=getelementptr inbounds i8,i8*%ai,i64 16
%aq=bitcast i8*%ap to i32*
store i32 3,i32*%aq,align 4
%ar=call fastcc i8*@_SMLFN6String1_ZE(i8*inreg%ai)
br label%ax
as:
%at=getelementptr inbounds i8,i8*%y,i64 4
%au=bitcast i8*%at to i32*
%av=load i32,i32*%au,align 4
%aw=call fastcc i8*@_SMLLN10TermFormat6tvNameE_614(i8 inreg 97,i32 inreg%av)
br label%ax
ax:
%ay=phi i8*[%aw,%as],[%ar,%T]
store i8*%ay,i8**%c,align 8
%az=getelementptr inbounds i8,i8*%ay,i64 -4
%aA=bitcast i8*%az to i32*
%aB=load i32,i32*%aA,align 4
%aC=and i32%aB,268435455
%aD=add nsw i32%aC,-1
%aE=call i8*@sml_alloc(i32 inreg 20)#0
%aF=getelementptr inbounds i8,i8*%aE,i64 -4
%aG=bitcast i8*%aF to i32*
store i32 1342177296,i32*%aG,align 4
store i8*%aE,i8**%e,align 8
%aH=getelementptr inbounds i8,i8*%aE,i64 4
%aI=bitcast i8*%aH to i32*
store i32 0,i32*%aI,align 1
%aJ=bitcast i8*%aE to i32*
store i32%aD,i32*%aJ,align 4
%aK=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aL=getelementptr inbounds i8,i8*%aE,i64 8
%aM=bitcast i8*%aL to i8**
store i8*%aK,i8**%aM,align 8
%aN=getelementptr inbounds i8,i8*%aE,i64 16
%aO=bitcast i8*%aN to i32*
store i32 2,i32*%aO,align 4
%aP=call i8*@sml_alloc(i32 inreg 20)#0
%aQ=getelementptr inbounds i8,i8*%aP,i64 -4
%aR=bitcast i8*%aQ to i32*
store i32 1342177296,i32*%aR,align 4
store i8*%aP,i8**%c,align 8
%aS=getelementptr inbounds i8,i8*%aP,i64 4
%aT=bitcast i8*%aS to i32*
store i32 0,i32*%aT,align 1
%aU=bitcast i8*%aP to i32*
store i32 6,i32*%aU,align 4
%aV=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aW=getelementptr inbounds i8,i8*%aP,i64 8
%aX=bitcast i8*%aW to i8**
store i8*%aV,i8**%aX,align 8
%aY=getelementptr inbounds i8,i8*%aP,i64 16
%aZ=bitcast i8*%aY to i32*
store i32 2,i32*%aZ,align 4
%a0=call i8*@sml_alloc(i32 inreg 20)#0
%a1=getelementptr inbounds i8,i8*%a0,i64 -4
%a2=bitcast i8*%a1 to i32*
store i32 1342177296,i32*%a2,align 4
%a3=load i8*,i8**%c,align 8
%a4=bitcast i8*%a0 to i8**
store i8*%a3,i8**%a4,align 8
%a5=getelementptr inbounds i8,i8*%a0,i64 8
%a6=bitcast i8*%a5 to i8**
store i8*null,i8**%a6,align 8
%a7=getelementptr inbounds i8,i8*%a0,i64 16
%a8=bitcast i8*%a7 to i32*
store i32 3,i32*%a8,align 4
store i8*null,i8**%e,align 8
%a9=call i8*@sml_alloc(i32 inreg 20)#0
%ba=getelementptr inbounds i8,i8*%a9,i64 -4
%bb=bitcast i8*%ba to i32*
store i32 1342177296,i32*%bb,align 4
store i8*%a9,i8**%g,align 8
%bc=load i8*,i8**%c,align 8
%bd=bitcast i8*%a9 to i8**
store i8*%bc,i8**%bd,align 8
%be=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bf=getelementptr inbounds i8,i8*%a9,i64 8
%bg=bitcast i8*%bf to i8**
store i8*%be,i8**%bg,align 8
%bh=getelementptr inbounds i8,i8*%a9,i64 16
%bi=bitcast i8*%bh to i32*
store i32 3,i32*%bi,align 4
%bj=bitcast i8**%d to i8***
%bk=load i8**,i8***%bj,align 8
%bl=load i8*,i8**%bk,align 8
%bm=getelementptr inbounds i8,i8*%bl,i64 8
%bn=bitcast i8*%bm to i8**
%bo=load i8*,i8**%bn,align 8
%bp=icmp eq i8*%bo,null
br i1%bp,label%bq,label%br
bq:
ret i8*%a9
br:
store i8*null,i8**%d,align 8
%bs=load i8*,i8**%bk,align 8
%bt=getelementptr inbounds i8,i8*%bs,i64 8
%bu=bitcast i8*%bt to i8**
%bv=load i8*,i8**%bu,align 8
store i8*%bv,i8**%c,align 8
%bw=load i8*,i8**%f,align 8
%bx=getelementptr inbounds i8,i8*%bw,i64 8
%by=bitcast i8*%bx to i32*
%bz=load i32,i32*%by,align 4
%bA=icmp eq i32%bz,0
br i1%bA,label%bH,label%bB
bB:
%bC=bitcast i8*%bw to i8**
store i8*null,i8**%c,align 8
%bD=sext i32%v to i64
%bE=getelementptr inbounds i8,i8*%bv,i64%bD
%bF=bitcast i8*%bE to i8**
%bG=load i8*,i8**%bF,align 8
br label%bU
bH:
%bI=getelementptr inbounds i8,i8*%bw,i64 12
%bJ=bitcast i8*%bI to i32*
%bK=load i32,i32*%bJ,align 4
%bL=call i8*@sml_alloc(i32 inreg%bK)#0
%bM=getelementptr inbounds i8,i8*%bL,i64 -4
%bN=bitcast i8*%bM to i32*
store i32%bK,i32*%bN,align 4
%bO=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bP=sext i32%v to i64
%bQ=getelementptr inbounds i8,i8*%bO,i64%bP
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bL,i8*%bQ,i32%bK,i1 false)
%bR=bitcast i8**%f to i8***
%bS=load i8**,i8***%bR,align 8
%bT=load i8*,i8**%g,align 8
br label%bU
bU:
%bV=phi i8*[%bT,%bH],[%a9,%bB]
%bW=phi i8**[%bS,%bH],[%bC,%bB]
%bX=phi i8*[%bL,%bH],[%bG,%bB]
store i8*%bX,i8**%c,align 8
%bY=load i8*,i8**%bW,align 8
%bZ=getelementptr inbounds i8,i8*%bY,i64 16
%b0=bitcast i8*%bZ to i8*(i8*,i8*)**
%b1=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%b0,align 8
store i8*null,i8**%f,align 8
%b2=bitcast i8**%bW to i8***
%b3=load i8**,i8***%b2,align 8
%b4=load i8*,i8**%b3,align 8
store i8*null,i8**%g,align 8
%b5=call fastcc i8*%b1(i8*inreg%b4,i8*inreg%bV)
%b6=getelementptr inbounds i8,i8*%b5,i64 16
%b7=bitcast i8*%b6 to i8*(i8*,i8*)**
%b8=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%b7,align 8
%b9=bitcast i8*%b5 to i8**
%ca=load i8*,i8**%b9,align 8
%cb=load i8*,i8**%c,align 8
%cc=tail call fastcc i8*%b8(i8*inreg%ca,i8*inreg%cb)
ret i8*%cc
}
define internal fastcc i8*@_SMLLN10TermFormat9formatBtvE_636(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat9formatBtvE_635 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat9formatBtvE_635 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define internal fastcc i8*@_SMLLN10TermFormat9formatBtvE_637(i32 inreg%a,i32 inreg%b)unnamed_addr#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat9formatBtvE_636 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat9formatBtvE_636 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLN10TermFormat17formatBtvWithTypeE_644(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
o:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%f,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%m,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%c,align 8
%l=load i8*,i8**%f,align 8
br label%m
m:
%n=phi i8*[%l,%j],[%a,%o]
%p=phi i8*[%k,%j],[%b,%o]
store i8*%p,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%n,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=add i32%s,-1
%u=sub i32 0,%s
%v=and i32%t,%u
%w=bitcast i8*%p to i8***
%x=load i8**,i8***%w,align 8
%y=load i8*,i8**%x,align 8
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
switch i32%A,label%B[
i32 0,label%al
i32 1,label%T
]
B:
store i8*null,i8**%d,align 8
store i8*null,i8**%f,align 8
call void@sml_matchcomp_bug()
%C=load i8*,i8**@_SMLZ5Match,align 8
store i8*%C,i8**%c,align 8
%D=call i8*@sml_alloc(i32 inreg 20)#0
%E=getelementptr inbounds i8,i8*%D,i64 -4
%F=bitcast i8*%E to i32*
store i32 1342177296,i32*%F,align 4
store i8*%D,i8**%d,align 8
%G=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%H=bitcast i8*%D to i8**
store i8*%G,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%D,i64 8
%J=bitcast i8*%I to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[57x i8]}>,<{[4x i8],i32,[57x i8]}>*@a7,i64 0,i32 2,i64 0),i8**%J,align 8
%K=getelementptr inbounds i8,i8*%D,i64 16
%L=bitcast i8*%K to i32*
store i32 3,i32*%L,align 4
%M=call i8*@sml_alloc(i32 inreg 60)#0
%N=getelementptr inbounds i8,i8*%M,i64 -4
%O=bitcast i8*%N to i32*
store i32 1342177336,i32*%O,align 4
%P=getelementptr inbounds i8,i8*%M,i64 56
%Q=bitcast i8*%P to i32*
store i32 1,i32*%Q,align 4
%R=load i8*,i8**%d,align 8
%S=bitcast i8*%M to i8**
store i8*%R,i8**%S,align 8
call void@sml_raise(i8*inreg%M)#1
unreachable
T:
%U=getelementptr inbounds i8,i8*%y,i64 4
%V=bitcast i8*%U to i32*
%W=load i32,i32*%V,align 4
%X=call fastcc i8*@_SMLFN14BoundTypeVarID8toStringE(i32 inreg%W)
store i8*%X,i8**%c,align 8
%Y=call i8*@sml_alloc(i32 inreg 20)#0
%Z=getelementptr inbounds i8,i8*%Y,i64 -4
%aa=bitcast i8*%Z to i32*
store i32 1342177296,i32*%aa,align 4
%ab=bitcast i8*%Y to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[9x i8]}>,<{[4x i8],i32,[9x i8]}>*@a6,i64 0,i32 2,i64 0),i8**%ab,align 8
%ac=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ad=getelementptr inbounds i8,i8*%Y,i64 8
%ae=bitcast i8*%ad to i8**
store i8*%ac,i8**%ae,align 8
%af=getelementptr inbounds i8,i8*%Y,i64 16
%ag=bitcast i8*%af to i32*
store i32 3,i32*%ag,align 4
%ah=call fastcc i8*@_SMLFN6String1_ZE(i8*inreg%Y)
store i8*%ah,i8**%c,align 8
%ai=call i8*@sml_alloc(i32 inreg 20)#0
%aj=getelementptr inbounds i8,i8*%ai,i64 -4
%ak=bitcast i8*%aj to i32*
store i32 1342177296,i32*%ak,align 4
br label%aT
al:
%am=getelementptr inbounds i8,i8*%y,i64 4
%an=bitcast i8*%am to i32*
%ao=load i32,i32*%an,align 4
%ap=call fastcc i8*@_SMLLN10TermFormat6tvNameE_614(i8 inreg 97,i32 inreg%ao)
store i8*%ap,i8**%c,align 8
%aq=call i8*@sml_alloc(i32 inreg 20)#0
%ar=getelementptr inbounds i8,i8*%aq,i64 -4
%as=bitcast i8*%ar to i32*
store i32 1342177296,i32*%as,align 4
%at=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%au=bitcast i8*%aq to i8**
store i8*%at,i8**%au,align 8
%av=getelementptr inbounds i8,i8*%aq,i64 8
%aw=bitcast i8*%av to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bo,i64 0,i32 2,i64 0),i8**%aw,align 8
%ax=getelementptr inbounds i8,i8*%aq,i64 16
%ay=bitcast i8*%ax to i32*
store i32 3,i32*%ay,align 4
%az=call fastcc i8*@_SMLFN6String1_ZE(i8*inreg%aq)
store i8*%az,i8**%c,align 8
%aA=load i8*,i8**%d,align 8
%aB=getelementptr inbounds i8,i8*%aA,i64 8
%aC=bitcast i8*%aB to i32*
%aD=load i32,i32*%aC,align 4
%aE=call fastcc i8*@_SMLFN14BoundTypeVarID8toStringE(i32 inreg%aD)
store i8*%aE,i8**%e,align 8
%aF=call i8*@sml_alloc(i32 inreg 20)#0
%aG=getelementptr inbounds i8,i8*%aF,i64 -4
%aH=bitcast i8*%aG to i32*
store i32 1342177296,i32*%aH,align 4
%aI=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aJ=bitcast i8*%aF to i8**
store i8*%aI,i8**%aJ,align 8
%aK=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aL=getelementptr inbounds i8,i8*%aF,i64 8
%aM=bitcast i8*%aL to i8**
store i8*%aK,i8**%aM,align 8
%aN=getelementptr inbounds i8,i8*%aF,i64 16
%aO=bitcast i8*%aN to i32*
store i32 3,i32*%aO,align 4
%aP=call fastcc i8*@_SMLFN6String1_ZE(i8*inreg%aF)
store i8*%aP,i8**%c,align 8
%aQ=call i8*@sml_alloc(i32 inreg 20)#0
%aR=getelementptr inbounds i8,i8*%aQ,i64 -4
%aS=bitcast i8*%aR to i32*
store i32 1342177296,i32*%aS,align 4
br label%aT
aT:
%aU=phi i8*[%aQ,%al],[%ai,%T]
%aV=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aW=bitcast i8*%aU to i8**
store i8*%aV,i8**%aW,align 8
%aX=getelementptr inbounds i8,i8*%aU,i64 8
%aY=bitcast i8*%aX to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bp,i64 0,i32 2,i64 0),i8**%aY,align 8
%aZ=getelementptr inbounds i8,i8*%aU,i64 16
%a0=bitcast i8*%aZ to i32*
store i32 3,i32*%a0,align 4
%a1=call fastcc i8*@_SMLFN6String1_ZE(i8*inreg%aU)
store i8*%a1,i8**%c,align 8
%a2=getelementptr inbounds i8,i8*%a1,i64 -4
%a3=bitcast i8*%a2 to i32*
%a4=load i32,i32*%a3,align 4
%a5=and i32%a4,268435455
%a6=add nsw i32%a5,-1
%a7=call i8*@sml_alloc(i32 inreg 20)#0
%a8=getelementptr inbounds i8,i8*%a7,i64 -4
%a9=bitcast i8*%a8 to i32*
store i32 1342177296,i32*%a9,align 4
store i8*%a7,i8**%e,align 8
%ba=getelementptr inbounds i8,i8*%a7,i64 4
%bb=bitcast i8*%ba to i32*
store i32 0,i32*%bb,align 1
%bc=bitcast i8*%a7 to i32*
store i32%a6,i32*%bc,align 4
%bd=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%be=getelementptr inbounds i8,i8*%a7,i64 8
%bf=bitcast i8*%be to i8**
store i8*%bd,i8**%bf,align 8
%bg=getelementptr inbounds i8,i8*%a7,i64 16
%bh=bitcast i8*%bg to i32*
store i32 2,i32*%bh,align 4
%bi=call i8*@sml_alloc(i32 inreg 20)#0
%bj=getelementptr inbounds i8,i8*%bi,i64 -4
%bk=bitcast i8*%bj to i32*
store i32 1342177296,i32*%bk,align 4
store i8*%bi,i8**%c,align 8
%bl=getelementptr inbounds i8,i8*%bi,i64 4
%bm=bitcast i8*%bl to i32*
store i32 0,i32*%bm,align 1
%bn=bitcast i8*%bi to i32*
store i32 6,i32*%bn,align 4
%bo=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bp=getelementptr inbounds i8,i8*%bi,i64 8
%bq=bitcast i8*%bp to i8**
store i8*%bo,i8**%bq,align 8
%br=getelementptr inbounds i8,i8*%bi,i64 16
%bs=bitcast i8*%br to i32*
store i32 2,i32*%bs,align 4
%bt=call i8*@sml_alloc(i32 inreg 20)#0
%bu=getelementptr inbounds i8,i8*%bt,i64 -4
%bv=bitcast i8*%bu to i32*
store i32 1342177296,i32*%bv,align 4
%bw=load i8*,i8**%c,align 8
%bx=bitcast i8*%bt to i8**
store i8*%bw,i8**%bx,align 8
%by=getelementptr inbounds i8,i8*%bt,i64 8
%bz=bitcast i8*%by to i8**
store i8*null,i8**%bz,align 8
%bA=getelementptr inbounds i8,i8*%bt,i64 16
%bB=bitcast i8*%bA to i32*
store i32 3,i32*%bB,align 4
store i8*null,i8**%e,align 8
%bC=call i8*@sml_alloc(i32 inreg 20)#0
%bD=getelementptr inbounds i8,i8*%bC,i64 -4
%bE=bitcast i8*%bD to i32*
store i32 1342177296,i32*%bE,align 4
store i8*%bC,i8**%g,align 8
%bF=load i8*,i8**%c,align 8
%bG=bitcast i8*%bC to i8**
store i8*%bF,i8**%bG,align 8
%bH=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bI=getelementptr inbounds i8,i8*%bC,i64 8
%bJ=bitcast i8*%bI to i8**
store i8*%bH,i8**%bJ,align 8
%bK=getelementptr inbounds i8,i8*%bC,i64 16
%bL=bitcast i8*%bK to i32*
store i32 3,i32*%bL,align 4
%bM=bitcast i8**%d to i8***
%bN=load i8**,i8***%bM,align 8
%bO=load i8*,i8**%bN,align 8
%bP=getelementptr inbounds i8,i8*%bO,i64 8
%bQ=bitcast i8*%bP to i8**
%bR=load i8*,i8**%bQ,align 8
%bS=icmp eq i8*%bR,null
br i1%bS,label%bT,label%bU
bT:
ret i8*%bC
bU:
store i8*null,i8**%d,align 8
%bV=load i8*,i8**%bN,align 8
%bW=getelementptr inbounds i8,i8*%bV,i64 8
%bX=bitcast i8*%bW to i8**
%bY=load i8*,i8**%bX,align 8
store i8*%bY,i8**%c,align 8
%bZ=load i8*,i8**%f,align 8
%b0=getelementptr inbounds i8,i8*%bZ,i64 8
%b1=bitcast i8*%b0 to i32*
%b2=load i32,i32*%b1,align 4
%b3=icmp eq i32%b2,0
br i1%b3,label%ca,label%b4
b4:
%b5=bitcast i8*%bZ to i8**
store i8*null,i8**%c,align 8
%b6=sext i32%v to i64
%b7=getelementptr inbounds i8,i8*%bY,i64%b6
%b8=bitcast i8*%b7 to i8**
%b9=load i8*,i8**%b8,align 8
br label%cn
ca:
%cb=getelementptr inbounds i8,i8*%bZ,i64 12
%cc=bitcast i8*%cb to i32*
%cd=load i32,i32*%cc,align 4
%ce=call i8*@sml_alloc(i32 inreg%cd)#0
%cf=getelementptr inbounds i8,i8*%ce,i64 -4
%cg=bitcast i8*%cf to i32*
store i32%cd,i32*%cg,align 4
%ch=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ci=sext i32%v to i64
%cj=getelementptr inbounds i8,i8*%ch,i64%ci
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ce,i8*%cj,i32%cd,i1 false)
%ck=bitcast i8**%f to i8***
%cl=load i8**,i8***%ck,align 8
%cm=load i8*,i8**%g,align 8
br label%cn
cn:
%co=phi i8*[%cm,%ca],[%bC,%b4]
%cp=phi i8**[%cl,%ca],[%b5,%b4]
%cq=phi i8*[%ce,%ca],[%b9,%b4]
store i8*%cq,i8**%c,align 8
%cr=load i8*,i8**%cp,align 8
%cs=getelementptr inbounds i8,i8*%cr,i64 16
%ct=bitcast i8*%cs to i8*(i8*,i8*)**
%cu=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ct,align 8
store i8*null,i8**%f,align 8
%cv=bitcast i8**%cp to i8***
%cw=load i8**,i8***%cv,align 8
%cx=load i8*,i8**%cw,align 8
store i8*null,i8**%g,align 8
%cy=call fastcc i8*%cu(i8*inreg%cx,i8*inreg%co)
%cz=getelementptr inbounds i8,i8*%cy,i64 16
%cA=bitcast i8*%cz to i8*(i8*,i8*)**
%cB=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%cA,align 8
%cC=bitcast i8*%cy to i8**
%cD=load i8*,i8**%cC,align 8
%cE=load i8*,i8**%c,align 8
%cF=tail call fastcc i8*%cB(i8*inreg%cD,i8*inreg%cE)
ret i8*%cF
}
define internal fastcc i8*@_SMLLN10TermFormat17formatBtvWithTypeE_645(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat17formatBtvWithTypeE_644 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat17formatBtvWithTypeE_644 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define internal fastcc i8*@_SMLLN10TermFormat16formatBoundTyvarE_648(i8*inreg%a,i32 inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%c,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=getelementptr inbounds i8,i8*%j,i64 16
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%j,i64 20
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=call fastcc i8*@_SMLLN10TermFormat9formatBtvE_637(i32 inreg%n,i32 inreg%q)
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
%x=bitcast i8**%c to i8***
%y=load i8**,i8***%x,align 8
%z=load i8*,i8**%y,align 8
%A=call fastcc i8*%u(i8*inreg%w,i8*inreg%z)
%B=getelementptr inbounds i8,i8*%A,i64 16
%C=bitcast i8*%B to i8*(i8*,i8*)**
%D=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%C,align 8
%E=bitcast i8*%A to i8**
%F=load i8*,i8**%E,align 8
store i8*%F,i8**%d,align 8
%G=load i8*,i8**%c,align 8
%H=getelementptr inbounds i8,i8*%G,i64 16
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
%K=getelementptr inbounds i8,i8*%G,i64 20
%L=bitcast i8*%K to i32*
%M=load i32,i32*%L,align 4
%N=call fastcc i8*@_SMLLN10TermFormat6lookupE_630(i32 inreg%J,i32 inreg%M)
%O=getelementptr inbounds i8,i8*%N,i64 16
%P=bitcast i8*%O to i8*(i8*,i8*)**
%Q=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%P,align 8
%R=bitcast i8*%N to i8**
%S=load i8*,i8**%R,align 8
%T=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%U=getelementptr inbounds i8,i8*%T,i64 8
%V=bitcast i8*%U to i8**
%W=load i8*,i8**%V,align 8
%X=call fastcc i8*%Q(i8*inreg%S,i8*inreg%W)
%Y=getelementptr inbounds i8,i8*%X,i64 16
%Z=bitcast i8*%Y to i8*(i8*,i8*)**
%aa=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%Z,align 8
%ab=bitcast i8*%X to i8**
%ac=load i8*,i8**%ab,align 8
store i8*%ac,i8**%c,align 8
%ad=call i8*@sml_alloc(i32 inreg 4)#0
%ae=bitcast i8*%ad to i32*
%af=getelementptr inbounds i8,i8*%ad,i64 -4
%ag=bitcast i8*%af to i32*
store i32 4,i32*%ag,align 4
store i32%b,i32*%ae,align 4
%ah=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ai=call fastcc i8*%aa(i8*inreg%ah,i8*inreg%ad)
store i8*%ai,i8**%c,align 8
%aj=call i8*@sml_alloc(i32 inreg 20)#0
%ak=getelementptr inbounds i8,i8*%aj,i64 -4
%al=bitcast i8*%ak to i32*
store i32 1342177296,i32*%al,align 4
%am=getelementptr inbounds i8,i8*%aj,i64 12
%an=bitcast i8*%am to i32*
store i32 0,i32*%an,align 1
%ao=load i8*,i8**%c,align 8
%ap=bitcast i8*%aj to i8**
store i8*%ao,i8**%ap,align 8
%aq=getelementptr inbounds i8,i8*%aj,i64 8
%ar=bitcast i8*%aq to i32*
store i32%b,i32*%ar,align 4
%as=getelementptr inbounds i8,i8*%aj,i64 16
%at=bitcast i8*%as to i32*
store i32 1,i32*%at,align 4
%au=load i8*,i8**%d,align 8
%av=tail call fastcc i8*%D(i8*inreg%au,i8*inreg%aj)
ret i8*%av
}
define internal fastcc i8*@_SMLLN10TermFormat16formatBoundTyvarE_649(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%b,i8**%c,align 8
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=getelementptr inbounds i8,i8*%a,i64 8
%i=bitcast i8*%h to i32*
%j=load i32,i32*%i,align 4
%k=getelementptr inbounds i8,i8*%a,i64 12
%l=bitcast i8*%k to i32*
%m=load i32,i32*%l,align 4
%n=call i8*@sml_alloc(i32 inreg 28)#0
%o=getelementptr inbounds i8,i8*%n,i64 -4
%p=bitcast i8*%o to i32*
store i32 1342177304,i32*%p,align 4
store i8*%n,i8**%e,align 8
%q=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%r=bitcast i8*%n to i8**
store i8*%q,i8**%r,align 8
%s=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%t=getelementptr inbounds i8,i8*%n,i64 8
%u=bitcast i8*%t to i8**
store i8*%s,i8**%u,align 8
%v=getelementptr inbounds i8,i8*%n,i64 16
%w=bitcast i8*%v to i32*
store i32%j,i32*%w,align 4
%x=getelementptr inbounds i8,i8*%n,i64 20
%y=bitcast i8*%x to i32*
store i32%m,i32*%y,align 4
%z=getelementptr inbounds i8,i8*%n,i64 24
%A=bitcast i8*%z to i32*
store i32 3,i32*%A,align 4
%B=call i8*@sml_alloc(i32 inreg 28)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177304,i32*%D,align 4
%E=load i8*,i8**%e,align 8
%F=bitcast i8*%B to i8**
store i8*%E,i8**%F,align 8
%G=getelementptr inbounds i8,i8*%B,i64 8
%H=bitcast i8*%G to void(...)**
store void(...)*bitcast(i8*(i8*,i32)*@_SMLLN10TermFormat16formatBoundTyvarE_648 to void(...)*),void(...)**%H,align 8
%I=getelementptr inbounds i8,i8*%B,i64 16
%J=bitcast i8*%I to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat16formatBoundTyvarE_1121 to void(...)*),void(...)**%J,align 8
%K=getelementptr inbounds i8,i8*%B,i64 24
%L=bitcast i8*%K to i32*
store i32 -2147483647,i32*%L,align 4
ret i8*%B
}
define internal fastcc i8*@_SMLLN10TermFormat16formatBoundTyvarE_650(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat16formatBoundTyvarE_649 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat16formatBoundTyvarE_649 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define internal fastcc i8*@_SMLL6tyvars_653(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%h,label%j
h:
%i=bitcast i8*%b to i32*
br label%n
j:
call void@sml_check(i32 inreg%f)
%k=bitcast i8**%c to i32**
%l=load i32*,i32**%k,align 8
%m=load i8*,i8**%e,align 8
br label%n
n:
%o=phi i8*[%m,%j],[%a,%h]
%p=phi i32*[%l,%j],[%i,%h]
%q=getelementptr inbounds i8,i8*%o,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=add i32%s,3
%u=sub i32 0,%s
%v=and i32%t,%u
%w=add i32%s,-1
%x=and i32%w,%u
%y=add i32%s,7
%z=add i32%y,%x
%A=and i32%z,-8
%B=getelementptr inbounds i8,i8*%o,i64 8
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=or i32%A,4
%F=load i32,i32*%p,align 4
%G=getelementptr inbounds i8,i8*%o,i64 16
%H=bitcast i8*%G to i32*
%I=load i32,i32*%H,align 4
%J=getelementptr inbounds i8,i8*%o,i64 20
%K=bitcast i8*%J to i32*
%L=load i32,i32*%K,align 4
%M=call fastcc i8*@_SMLLN10TermFormat6lookupE_630(i32 inreg%I,i32 inreg%L)
%N=getelementptr inbounds i8,i8*%M,i64 16
%O=bitcast i8*%N to i8*(i8*,i8*)**
%P=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%O,align 8
%Q=bitcast i8*%M to i8**
%R=load i8*,i8**%Q,align 8
%S=bitcast i8**%e to i8***
%T=load i8**,i8***%S,align 8
%U=load i8*,i8**%T,align 8
%V=call fastcc i8*%P(i8*inreg%R,i8*inreg%U)
%W=getelementptr inbounds i8,i8*%V,i64 16
%X=bitcast i8*%W to i8*(i8*,i8*)**
%Y=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%X,align 8
%Z=bitcast i8*%V to i8**
%aa=load i8*,i8**%Z,align 8
store i8*%aa,i8**%d,align 8
%ab=call i8*@sml_alloc(i32 inreg 4)#0
%ac=bitcast i8*%ab to i32*
%ad=getelementptr inbounds i8,i8*%ab,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 4,i32*%ae,align 4
store i32%F,i32*%ac,align 4
%af=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ag=call fastcc i8*%Y(i8*inreg%af,i8*inreg%ab)
%ah=bitcast i8*%ag to i8**
%ai=load i8*,i8**%ah,align 8
store i8*%ai,i8**%d,align 8
%aj=load i8*,i8**%e,align 8
%ak=getelementptr inbounds i8,i8*%aj,i64 8
%al=bitcast i8*%ak to i32*
%am=load i32,i32*%al,align 4
%an=icmp eq i32%am,0
br i1%an,label%au,label%ao
ao:
%ap=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aq=sext i32%v to i64
%ar=getelementptr inbounds i8,i8*%ap,i64%aq
%as=bitcast i8*%ar to i8**
%at=load i8*,i8**%as,align 8
br label%aI
au:
%av=getelementptr inbounds i8,i8*%aj,i64 12
%aw=bitcast i8*%av to i32*
%ax=load i32,i32*%aw,align 4
%ay=call i8*@sml_alloc(i32 inreg%ax)#0
%az=getelementptr inbounds i8,i8*%ay,i64 -4
%aA=bitcast i8*%az to i32*
store i32%ax,i32*%aA,align 4
%aB=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aC=sext i32%v to i64
%aD=getelementptr inbounds i8,i8*%aB,i64%aC
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ay,i8*%aD,i32%ax,i1 false)
%aE=load i8*,i8**%e,align 8
%aF=getelementptr inbounds i8,i8*%aE,i64 8
%aG=bitcast i8*%aF to i32*
%aH=load i32,i32*%aG,align 4
br label%aI
aI:
%aJ=phi i32[%aH,%au],[%am,%ao]
%aK=phi i8*[%aE,%au],[%aj,%ao]
%aL=phi i8*[%ay,%au],[%at,%ao]
store i8*%aL,i8**%c,align 8
%aM=getelementptr inbounds i8,i8*%aK,i64 12
%aN=bitcast i8*%aM to i32*
%aO=load i32,i32*%aN,align 4
store i8*null,i8**%e,align 8
%aP=call i8*@sml_alloc(i32 inreg%E)#0
%aQ=or i32%A,1342177280
%aR=getelementptr inbounds i8,i8*%aP,i64 -4
%aS=bitcast i8*%aR to i32*
store i32%aQ,i32*%aS,align 4
store i8*%aP,i8**%e,align 8
call void@llvm.memset.p0i8.i32(i8*%aP,i8 0,i32%E,i1 false)
%aT=icmp eq i32%aJ,0
%aU=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aV=sext i32%x to i64
%aW=getelementptr inbounds i8,i8*%aP,i64%aV
br i1%aT,label%aZ,label%aX
aX:
%aY=bitcast i8*%aW to i8**
store i8*%aU,i8**%aY,align 8
br label%a0
aZ:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aW,i8*%aU,i32%aO,i1 false)
br label%a0
a0:
%a1=sext i32%A to i64
%a2=getelementptr inbounds i8,i8*%aP,i64%a1
%a3=bitcast i8*%a2 to i32*
store i32%D,i32*%a3,align 4
%a4=call i8*@sml_alloc(i32 inreg 20)#0
%a5=getelementptr inbounds i8,i8*%a4,i64 -4
%a6=bitcast i8*%a5 to i32*
store i32 1342177296,i32*%a6,align 4
store i8*%a4,i8**%c,align 8
%a7=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%a8=bitcast i8*%a4 to i8**
store i8*%a7,i8**%a8,align 8
%a9=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%ba=getelementptr inbounds i8,i8*%a4,i64 8
%bb=bitcast i8*%ba to i8**
store i8*%a9,i8**%bb,align 8
%bc=getelementptr inbounds i8,i8*%a4,i64 16
%bd=bitcast i8*%bc to i32*
store i32 3,i32*%bd,align 4
%be=call i8*@sml_alloc(i32 inreg 20)#0
%bf=getelementptr inbounds i8,i8*%be,i64 -4
%bg=bitcast i8*%bf to i32*
store i32 1342177296,i32*%bg,align 4
%bh=getelementptr inbounds i8,i8*%be,i64 12
%bi=bitcast i8*%bh to i32*
store i32 0,i32*%bi,align 1
%bj=load i8*,i8**%c,align 8
%bk=bitcast i8*%be to i8**
store i8*%bj,i8**%bk,align 8
%bl=getelementptr inbounds i8,i8*%be,i64 8
%bm=bitcast i8*%bl to i32*
store i32%F,i32*%bm,align 4
%bn=getelementptr inbounds i8,i8*%be,i64 16
%bo=bitcast i8*%bn to i32*
store i32 1,i32*%bo,align 4
ret i8*%be
}
define internal fastcc i32@_SMLL6tyvars_657(i8*inreg%a)#2 gc"smlsharp"{
j:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%h,label%f
f:
call void@sml_check(i32 inreg%d)
%g=load i8*,i8**%b,align 8
br label%h
h:
%i=phi i8*[%g,%f],[%a,%j]
%k=bitcast i8*%i to i8****
%l=load i8***,i8****%k,align 8
%m=load i8**,i8***%l,align 8
%n=load i8*,i8**%m,align 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
switch i32%p,label%q[
i32 0,label%aA
i32 1,label%I
]
q:
call void@sml_matchcomp_bug()
%r=load i8*,i8**@_SMLZ5Match,align 8
store i8*%r,i8**%b,align 8
%s=call i8*@sml_alloc(i32 inreg 20)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177296,i32*%u,align 4
store i8*%s,i8**%c,align 8
%v=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[57x i8]}>,<{[4x i8],i32,[57x i8]}>*@a8,i64 0,i32 2,i64 0),i8**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to i32*
store i32 3,i32*%A,align 4
%B=call i8*@sml_alloc(i32 inreg 60)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177336,i32*%D,align 4
%E=getelementptr inbounds i8,i8*%B,i64 56
%F=bitcast i8*%E to i32*
store i32 1,i32*%F,align 4
%G=load i8*,i8**%c,align 8
%H=bitcast i8*%B to i8**
store i8*%G,i8**%H,align 8
call void@sml_raise(i8*inreg%B)#1
unreachable
I:
%J=getelementptr inbounds i8,i8*%i,i64 8
%K=bitcast i8*%J to i8****
%L=load i8***,i8****%K,align 8
%M=load i8**,i8***%L,align 8
%N=load i8*,i8**%M,align 8
%O=bitcast i8*%N to i32*
%P=load i32,i32*%O,align 4
switch i32%P,label%Q[
i32 0,label%ay
i32 1,label%ai
]
Q:
call void@sml_matchcomp_bug()
%R=load i8*,i8**@_SMLZ5Match,align 8
store i8*%R,i8**%b,align 8
%S=call i8*@sml_alloc(i32 inreg 20)#0
%T=getelementptr inbounds i8,i8*%S,i64 -4
%U=bitcast i8*%T to i32*
store i32 1342177296,i32*%U,align 4
store i8*%S,i8**%c,align 8
%V=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%W=bitcast i8*%S to i8**
store i8*%V,i8**%W,align 8
%X=getelementptr inbounds i8,i8*%S,i64 8
%Y=bitcast i8*%X to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[57x i8]}>,<{[4x i8],i32,[57x i8]}>*@a8,i64 0,i32 2,i64 0),i8**%Y,align 8
%Z=getelementptr inbounds i8,i8*%S,i64 16
%aa=bitcast i8*%Z to i32*
store i32 3,i32*%aa,align 4
%ab=call i8*@sml_alloc(i32 inreg 60)#0
%ac=getelementptr inbounds i8,i8*%ab,i64 -4
%ad=bitcast i8*%ac to i32*
store i32 1342177336,i32*%ad,align 4
%ae=getelementptr inbounds i8,i8*%ab,i64 56
%af=bitcast i8*%ae to i32*
store i32 1,i32*%af,align 4
%ag=load i8*,i8**%c,align 8
%ah=bitcast i8*%ab to i8**
store i8*%ag,i8**%ah,align 8
call void@sml_raise(i8*inreg%ab)#1
unreachable
ai:
%aj=getelementptr inbounds i8,i8*%n,i64 4
%ak=bitcast i8*%aj to i32*
%al=load i32,i32*%ak,align 4
%am=getelementptr inbounds i8,i8*%N,i64 4
%an=bitcast i8*%am to i32*
%ao=load i32,i32*%an,align 4
%ap=call i8*@sml_alloc(i32 inreg 12)#0
%aq=bitcast i8*%ap to i32*
%ar=getelementptr inbounds i8,i8*%ap,i64 -4
%as=bitcast i8*%ar to i32*
store i32 1342177288,i32*%as,align 4
store i32%al,i32*%aq,align 4
%at=getelementptr inbounds i8,i8*%ap,i64 4
%au=bitcast i8*%at to i32*
store i32%ao,i32*%au,align 4
%av=getelementptr inbounds i8,i8*%ap,i64 8
%aw=bitcast i8*%av to i32*
store i32 0,i32*%aw,align 4
%ax=tail call fastcc i32@_SMLFN14BoundTypeVarID7compareE(i8*inreg%ap)
ret i32%ax
ay:
%az=phi i32[1,%I],[2,%aA]
ret i32%az
aA:
%aB=getelementptr inbounds i8,i8*%i,i64 8
%aC=bitcast i8*%aB to i8****
%aD=load i8***,i8****%aC,align 8
%aE=load i8**,i8***%aD,align 8
%aF=load i8*,i8**%aE,align 8
%aG=bitcast i8*%aF to i32*
%aH=load i32,i32*%aG,align 4
switch i32%aH,label%aI[
i32 0,label%a0
i32 1,label%ay
]
aI:
call void@sml_matchcomp_bug()
%aJ=load i8*,i8**@_SMLZ5Match,align 8
store i8*%aJ,i8**%b,align 8
%aK=call i8*@sml_alloc(i32 inreg 20)#0
%aL=getelementptr inbounds i8,i8*%aK,i64 -4
%aM=bitcast i8*%aL to i32*
store i32 1342177296,i32*%aM,align 4
store i8*%aK,i8**%c,align 8
%aN=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%aO=bitcast i8*%aK to i8**
store i8*%aN,i8**%aO,align 8
%aP=getelementptr inbounds i8,i8*%aK,i64 8
%aQ=bitcast i8*%aP to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[57x i8]}>,<{[4x i8],i32,[57x i8]}>*@a8,i64 0,i32 2,i64 0),i8**%aQ,align 8
%aR=getelementptr inbounds i8,i8*%aK,i64 16
%aS=bitcast i8*%aR to i32*
store i32 3,i32*%aS,align 4
%aT=call i8*@sml_alloc(i32 inreg 60)#0
%aU=getelementptr inbounds i8,i8*%aT,i64 -4
%aV=bitcast i8*%aU to i32*
store i32 1342177336,i32*%aV,align 4
%aW=getelementptr inbounds i8,i8*%aT,i64 56
%aX=bitcast i8*%aW to i32*
store i32 1,i32*%aX,align 4
%aY=load i8*,i8**%c,align 8
%aZ=bitcast i8*%aT to i8**
store i8*%aY,i8**%aZ,align 8
call void@sml_raise(i8*inreg%aT)#1
unreachable
a0:
%a1=getelementptr inbounds i8,i8*%n,i64 4
%a2=bitcast i8*%a1 to i32*
%a3=load i32,i32*%a2,align 4
%a4=getelementptr inbounds i8,i8*%aF,i64 4
%a5=bitcast i8*%a4 to i32*
%a6=load i32,i32*%a5,align 4
%a7=call i8*@sml_alloc(i32 inreg 12)#0
%a8=bitcast i8*%a7 to i32*
%a9=getelementptr inbounds i8,i8*%a7,i64 -4
%ba=bitcast i8*%a9 to i32*
store i32 1342177288,i32*%ba,align 4
store i32%a3,i32*%a8,align 4
%bb=getelementptr inbounds i8,i8*%a7,i64 4
%bc=bitcast i8*%bb to i32*
store i32%a6,i32*%bc,align 4
%bd=getelementptr inbounds i8,i8*%a7,i64 8
%be=bitcast i8*%bd to i32*
store i32 0,i32*%be,align 4
%bf=tail call fastcc i32@_SMLFN5Int327compareE(i8*inreg%a7)
ret i32%bf
}
define internal fastcc i8*@_SMLLN10TermFormat12formatBtvEnvE_659(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%k,label%j
j:
call void@sml_check(i32 inreg%h)
br label%k
k:
%l=call fastcc i8*@_SMLFN4List3mapE(i32 inreg 1,i32 inreg 8,i32 inreg 1,i32 inreg 8)
%m=getelementptr inbounds i8,i8*%l,i64 16
%n=bitcast i8*%m to i8*(i8*,i8*)**
%o=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%n,align 8
%p=bitcast i8*%l to i8**
%q=load i8*,i8**%p,align 8
store i8*%q,i8**%f,align 8
%r=load i8*,i8**%e,align 8
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8**
%u=load i8*,i8**%t,align 8
store i8*%u,i8**%d,align 8
%v=getelementptr inbounds i8,i8*%r,i64 24
%w=bitcast i8*%v to i32*
%x=load i32,i32*%w,align 4
%y=getelementptr inbounds i8,i8*%r,i64 28
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=getelementptr inbounds i8,i8*%r,i64 32
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=getelementptr inbounds i8,i8*%r,i64 36
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
%H=call i8*@sml_alloc(i32 inreg 28)#0
%I=getelementptr inbounds i8,i8*%H,i64 -4
%J=bitcast i8*%I to i32*
store i32 1342177304,i32*%J,align 4
store i8*%H,i8**%g,align 8
%K=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%L=bitcast i8*%H to i8**
store i8*%K,i8**%L,align 8
%M=getelementptr inbounds i8,i8*%H,i64 8
%N=bitcast i8*%M to i32*
store i32%x,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%H,i64 12
%P=bitcast i8*%O to i32*
store i32%A,i32*%P,align 4
%Q=getelementptr inbounds i8,i8*%H,i64 16
%R=bitcast i8*%Q to i32*
store i32%D,i32*%R,align 4
%S=getelementptr inbounds i8,i8*%H,i64 20
%T=bitcast i8*%S to i32*
store i32%G,i32*%T,align 4
%U=getelementptr inbounds i8,i8*%H,i64 24
%V=bitcast i8*%U to i32*
store i32 1,i32*%V,align 4
%W=call i8*@sml_alloc(i32 inreg 28)#0
%X=getelementptr inbounds i8,i8*%W,i64 -4
%Y=bitcast i8*%X to i32*
store i32 1342177304,i32*%Y,align 4
%Z=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%aa=bitcast i8*%W to i8**
store i8*%Z,i8**%aa,align 8
%ab=getelementptr inbounds i8,i8*%W,i64 8
%ac=bitcast i8*%ab to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6tyvars_653 to void(...)*),void(...)**%ac,align 8
%ad=getelementptr inbounds i8,i8*%W,i64 16
%ae=bitcast i8*%ad to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6tyvars_653 to void(...)*),void(...)**%ae,align 8
%af=getelementptr inbounds i8,i8*%W,i64 24
%ag=bitcast i8*%af to i32*
store i32 -2147483647,i32*%ag,align 4
%ah=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%ai=call fastcc i8*%o(i8*inreg%ah,i8*inreg%W)
%aj=getelementptr inbounds i8,i8*%ai,i64 16
%ak=bitcast i8*%aj to i8*(i8*,i8*)**
%al=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ak,align 8
%am=bitcast i8*%ai to i8**
%an=load i8*,i8**%am,align 8
store i8*%an,i8**%d,align 8
%ao=load i8*,i8**%e,align 8
%ap=getelementptr inbounds i8,i8*%ao,i64 24
%aq=bitcast i8*%ap to i32*
%ar=load i32,i32*%aq,align 4
%as=getelementptr inbounds i8,i8*%ao,i64 28
%at=bitcast i8*%as to i32*
%au=load i32,i32*%at,align 4
%av=call fastcc i8*@_SMLFN14BoundTypeVarID3Map10listItemsiE(i32 inreg%ar,i32 inreg%au)
%aw=getelementptr inbounds i8,i8*%av,i64 16
%ax=bitcast i8*%aw to i8*(i8*,i8*)**
%ay=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ax,align 8
%az=bitcast i8*%av to i8**
%aA=load i8*,i8**%az,align 8
%aB=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aC=call fastcc i8*%ay(i8*inreg%aA,i8*inreg%aB)
%aD=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aE=call fastcc i8*%al(i8*inreg%aD,i8*inreg%aC)
store i8*%aE,i8**%c,align 8
%aF=call fastcc i8*@_SMLFN10ListSorter4sortE(i32 inreg 1,i32 inreg 8)
%aG=getelementptr inbounds i8,i8*%aF,i64 16
%aH=bitcast i8*%aG to i8*(i8*,i8*)**
%aI=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aH,align 8
%aJ=bitcast i8*%aF to i8**
%aK=load i8*,i8**%aJ,align 8
%aL=call fastcc i8*%aI(i8*inreg%aK,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@a9,i64 0,i32 2)to i8*))
%aM=getelementptr inbounds i8,i8*%aL,i64 16
%aN=bitcast i8*%aM to i8*(i8*,i8*)**
%aO=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aN,align 8
%aP=bitcast i8*%aL to i8**
%aQ=load i8*,i8**%aP,align 8
%aR=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aS=call fastcc i8*%aO(i8*inreg%aQ,i8*inreg%aR)
store i8*%aS,i8**%c,align 8
%aT=call fastcc i8*@_SMLFN15BasicFormatters11format__listE(i32 inreg 1,i32 inreg 8)
%aU=getelementptr inbounds i8,i8*%aT,i64 16
%aV=bitcast i8*%aU to i8*(i8*,i8*)**
%aW=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aV,align 8
%aX=bitcast i8*%aT to i8**
%aY=load i8*,i8**%aX,align 8
store i8*%aY,i8**%f,align 8
%aZ=load i8*,i8**%e,align 8
%a0=getelementptr inbounds i8,i8*%aZ,i64 24
%a1=bitcast i8*%a0 to i32*
%a2=load i32,i32*%a1,align 4
%a3=getelementptr inbounds i8,i8*%aZ,i64 28
%a4=bitcast i8*%a3 to i32*
%a5=load i32,i32*%a4,align 4
%a6=call fastcc i8*@_SMLLN10TermFormat9formatBtvE_637(i32 inreg%a2,i32 inreg%a5)
%a7=getelementptr inbounds i8,i8*%a6,i64 16
%a8=bitcast i8*%a7 to i8*(i8*,i8*)**
%a9=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%a8,align 8
%ba=bitcast i8*%a6 to i8**
%bb=load i8*,i8**%ba,align 8
%bc=load i8*,i8**%e,align 8
%bd=getelementptr inbounds i8,i8*%bc,i64 8
%be=bitcast i8*%bd to i8**
%bf=load i8*,i8**%be,align 8
%bg=call fastcc i8*%a9(i8*inreg%bb,i8*inreg%bf)
store i8*%bg,i8**%d,align 8
%bh=bitcast i8**%e to i8***
%bi=load i8**,i8***%bh,align 8
%bj=load i8*,i8**%bi,align 8
store i8*%bj,i8**%e,align 8
%bk=call i8*@sml_alloc(i32 inreg 20)#0
%bl=getelementptr inbounds i8,i8*%bk,i64 -4
%bm=bitcast i8*%bl to i32*
store i32 1342177296,i32*%bm,align 4
%bn=load i8*,i8**%d,align 8
%bo=bitcast i8*%bk to i8**
store i8*%bn,i8**%bo,align 8
%bp=load i8*,i8**%e,align 8
%bq=getelementptr inbounds i8,i8*%bk,i64 8
%br=bitcast i8*%bq to i8**
store i8*%bp,i8**%br,align 8
%bs=getelementptr inbounds i8,i8*%bk,i64 16
%bt=bitcast i8*%bs to i32*
store i32 3,i32*%bt,align 4
%bu=call i8*@sml_alloc(i32 inreg 20)#0
%bv=getelementptr inbounds i8,i8*%bu,i64 -4
%bw=bitcast i8*%bv to i32*
store i32 1342177296,i32*%bw,align 4
%bx=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%by=bitcast i8*%bu to i8**
store i8*%bx,i8**%by,align 8
%bz=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bA=getelementptr inbounds i8,i8*%bu,i64 8
%bB=bitcast i8*%bA to i8**
store i8*%bz,i8**%bB,align 8
%bC=getelementptr inbounds i8,i8*%bu,i64 16
%bD=bitcast i8*%bC to i32*
store i32 3,i32*%bD,align 4
%bE=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%bF=call fastcc i8*%aW(i8*inreg%bE,i8*inreg%bu)
%bG=getelementptr inbounds i8,i8*%bF,i64 16
%bH=bitcast i8*%bG to i8*(i8*,i8*)**
%bI=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bH,align 8
%bJ=bitcast i8*%bF to i8**
%bK=load i8*,i8**%bJ,align 8
%bL=load i8*,i8**%c,align 8
%bM=tail call fastcc i8*%bI(i8*inreg%bK,i8*inreg%bL)
ret i8*%bM
}
define internal fastcc i8*@_SMLLN10TermFormat12formatBtvEnvE_660(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=getelementptr inbounds i8,i8*%a,i64 16
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%a,i64 20
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=getelementptr inbounds i8,i8*%a,i64 24
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=getelementptr inbounds i8,i8*%a,i64 28
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=call i8*@sml_alloc(i32 inreg 44)#0
%y=getelementptr inbounds i8,i8*%x,i64 -4
%z=bitcast i8*%y to i32*
store i32 1342177320,i32*%z,align 4
store i8*%x,i8**%f,align 8
%A=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%B=bitcast i8*%x to i8**
store i8*%A,i8**%B,align 8
%C=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%D=getelementptr inbounds i8,i8*%x,i64 8
%E=bitcast i8*%D to i8**
store i8*%C,i8**%E,align 8
%F=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%G=getelementptr inbounds i8,i8*%x,i64 16
%H=bitcast i8*%G to i8**
store i8*%F,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%x,i64 24
%J=bitcast i8*%I to i32*
store i32%n,i32*%J,align 4
%K=getelementptr inbounds i8,i8*%x,i64 28
%L=bitcast i8*%K to i32*
store i32%q,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%x,i64 32
%N=bitcast i8*%M to i32*
store i32%t,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%x,i64 36
%P=bitcast i8*%O to i32*
store i32%w,i32*%P,align 4
%Q=getelementptr inbounds i8,i8*%x,i64 40
%R=bitcast i8*%Q to i32*
store i32 7,i32*%R,align 4
%S=call i8*@sml_alloc(i32 inreg 28)#0
%T=getelementptr inbounds i8,i8*%S,i64 -4
%U=bitcast i8*%T to i32*
store i32 1342177304,i32*%U,align 4
%V=load i8*,i8**%f,align 8
%W=bitcast i8*%S to i8**
store i8*%V,i8**%W,align 8
%X=getelementptr inbounds i8,i8*%S,i64 8
%Y=bitcast i8*%X to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12formatBtvEnvE_659 to void(...)*),void(...)**%Y,align 8
%Z=getelementptr inbounds i8,i8*%S,i64 16
%aa=bitcast i8*%Z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12formatBtvEnvE_659 to void(...)*),void(...)**%aa,align 8
%ab=getelementptr inbounds i8,i8*%S,i64 24
%ac=bitcast i8*%ab to i32*
store i32 -2147483647,i32*%ac,align 4
ret i8*%S
}
define internal fastcc i8*@_SMLLN10TermFormat12formatBtvEnvE_661(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=getelementptr inbounds i8,i8*%a,i64 16
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%a,i64 20
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=call i8*@sml_alloc(i32 inreg 36)#0
%s=getelementptr inbounds i8,i8*%r,i64 -4
%t=bitcast i8*%s to i32*
store i32 1342177312,i32*%t,align 4
store i8*%r,i8**%f,align 8
%u=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%v=bitcast i8*%r to i8**
store i8*%u,i8**%v,align 8
%w=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%x=getelementptr inbounds i8,i8*%r,i64 8
%y=bitcast i8*%x to i8**
store i8*%w,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%r,i64 16
%A=bitcast i8*%z to i32*
store i32%n,i32*%A,align 4
%B=getelementptr inbounds i8,i8*%r,i64 20
%C=bitcast i8*%B to i32*
store i32%q,i32*%C,align 4
%D=getelementptr inbounds i8,i8*%r,i64 24
%E=bitcast i8*%D to i32*
store i32%b,i32*%E,align 4
%F=getelementptr inbounds i8,i8*%r,i64 28
%G=bitcast i8*%F to i32*
store i32%c,i32*%G,align 4
%H=getelementptr inbounds i8,i8*%r,i64 32
%I=bitcast i8*%H to i32*
store i32 3,i32*%I,align 4
%J=call i8*@sml_alloc(i32 inreg 28)#0
%K=getelementptr inbounds i8,i8*%J,i64 -4
%L=bitcast i8*%K to i32*
store i32 1342177304,i32*%L,align 4
%M=load i8*,i8**%f,align 8
%N=bitcast i8*%J to i8**
store i8*%M,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%J,i64 8
%P=bitcast i8*%O to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12formatBtvEnvE_660 to void(...)*),void(...)**%P,align 8
%Q=getelementptr inbounds i8,i8*%J,i64 16
%R=bitcast i8*%Q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12formatBtvEnvE_660 to void(...)*),void(...)**%R,align 8
%S=getelementptr inbounds i8,i8*%J,i64 24
%T=bitcast i8*%S to i32*
store i32 -2147483647,i32*%T,align 4
ret i8*%J
}
define internal fastcc i8*@_SMLLN10TermFormat12formatBtvEnvE_662(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%b,i8**%c,align 8
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=getelementptr inbounds i8,i8*%a,i64 8
%i=bitcast i8*%h to i32*
%j=load i32,i32*%i,align 4
%k=getelementptr inbounds i8,i8*%a,i64 12
%l=bitcast i8*%k to i32*
%m=load i32,i32*%l,align 4
%n=call i8*@sml_alloc(i32 inreg 28)#0
%o=getelementptr inbounds i8,i8*%n,i64 -4
%p=bitcast i8*%o to i32*
store i32 1342177304,i32*%p,align 4
store i8*%n,i8**%e,align 8
%q=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%r=bitcast i8*%n to i8**
store i8*%q,i8**%r,align 8
%s=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%t=getelementptr inbounds i8,i8*%n,i64 8
%u=bitcast i8*%t to i8**
store i8*%s,i8**%u,align 8
%v=getelementptr inbounds i8,i8*%n,i64 16
%w=bitcast i8*%v to i32*
store i32%j,i32*%w,align 4
%x=getelementptr inbounds i8,i8*%n,i64 20
%y=bitcast i8*%x to i32*
store i32%m,i32*%y,align 4
%z=getelementptr inbounds i8,i8*%n,i64 24
%A=bitcast i8*%z to i32*
store i32 3,i32*%A,align 4
%B=call i8*@sml_alloc(i32 inreg 28)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177304,i32*%D,align 4
%E=load i8*,i8**%e,align 8
%F=bitcast i8*%B to i8**
store i8*%E,i8**%F,align 8
%G=getelementptr inbounds i8,i8*%B,i64 8
%H=bitcast i8*%G to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN10TermFormat12formatBtvEnvE_661 to void(...)*),void(...)**%H,align 8
%I=getelementptr inbounds i8,i8*%B,i64 16
%J=bitcast i8*%I to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat12formatBtvEnvE_1124 to void(...)*),void(...)**%J,align 8
%K=getelementptr inbounds i8,i8*%B,i64 24
%L=bitcast i8*%K to i32*
store i32 -2147483647,i32*%L,align 4
ret i8*%B
}
define internal fastcc i8*@_SMLLN10TermFormat12formatBtvEnvE_663(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12formatBtvEnvE_662 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12formatBtvEnvE_662 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLL6tyvars_664(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%c,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%h,label%j
h:
%i=bitcast i8*%b to i32*
br label%n
j:
call void@sml_check(i32 inreg%f)
%k=bitcast i8**%c to i32**
%l=load i32*,i32**%k,align 8
%m=load i8*,i8**%e,align 8
br label%n
n:
%o=phi i8*[%m,%j],[%a,%h]
%p=phi i32*[%l,%j],[%i,%h]
%q=getelementptr inbounds i8,i8*%o,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=add i32%s,3
%u=sub i32 0,%s
%v=and i32%t,%u
%w=add i32%s,-1
%x=and i32%w,%u
%y=add i32%s,7
%z=add i32%y,%x
%A=and i32%z,-8
%B=getelementptr inbounds i8,i8*%o,i64 8
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=or i32%A,4
%F=load i32,i32*%p,align 4
%G=getelementptr inbounds i8,i8*%o,i64 16
%H=bitcast i8*%G to i32*
%I=load i32,i32*%H,align 4
%J=getelementptr inbounds i8,i8*%o,i64 20
%K=bitcast i8*%J to i32*
%L=load i32,i32*%K,align 4
%M=call fastcc i8*@_SMLLN10TermFormat6lookupE_630(i32 inreg%I,i32 inreg%L)
%N=getelementptr inbounds i8,i8*%M,i64 16
%O=bitcast i8*%N to i8*(i8*,i8*)**
%P=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%O,align 8
%Q=bitcast i8*%M to i8**
%R=load i8*,i8**%Q,align 8
%S=bitcast i8**%e to i8***
%T=load i8**,i8***%S,align 8
%U=load i8*,i8**%T,align 8
%V=call fastcc i8*%P(i8*inreg%R,i8*inreg%U)
%W=getelementptr inbounds i8,i8*%V,i64 16
%X=bitcast i8*%W to i8*(i8*,i8*)**
%Y=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%X,align 8
%Z=bitcast i8*%V to i8**
%aa=load i8*,i8**%Z,align 8
store i8*%aa,i8**%d,align 8
%ab=call i8*@sml_alloc(i32 inreg 4)#0
%ac=bitcast i8*%ab to i32*
%ad=getelementptr inbounds i8,i8*%ab,i64 -4
%ae=bitcast i8*%ad to i32*
store i32 4,i32*%ae,align 4
store i32%F,i32*%ac,align 4
%af=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ag=call fastcc i8*%Y(i8*inreg%af,i8*inreg%ab)
%ah=bitcast i8*%ag to i8**
%ai=load i8*,i8**%ah,align 8
store i8*%ai,i8**%d,align 8
%aj=load i8*,i8**%e,align 8
%ak=getelementptr inbounds i8,i8*%aj,i64 8
%al=bitcast i8*%ak to i32*
%am=load i32,i32*%al,align 4
%an=icmp eq i32%am,0
br i1%an,label%au,label%ao
ao:
%ap=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aq=sext i32%v to i64
%ar=getelementptr inbounds i8,i8*%ap,i64%aq
%as=bitcast i8*%ar to i8**
%at=load i8*,i8**%as,align 8
br label%aI
au:
%av=getelementptr inbounds i8,i8*%aj,i64 12
%aw=bitcast i8*%av to i32*
%ax=load i32,i32*%aw,align 4
%ay=call i8*@sml_alloc(i32 inreg%ax)#0
%az=getelementptr inbounds i8,i8*%ay,i64 -4
%aA=bitcast i8*%az to i32*
store i32%ax,i32*%aA,align 4
%aB=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aC=sext i32%v to i64
%aD=getelementptr inbounds i8,i8*%aB,i64%aC
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ay,i8*%aD,i32%ax,i1 false)
%aE=load i8*,i8**%e,align 8
%aF=getelementptr inbounds i8,i8*%aE,i64 8
%aG=bitcast i8*%aF to i32*
%aH=load i32,i32*%aG,align 4
br label%aI
aI:
%aJ=phi i32[%aH,%au],[%am,%ao]
%aK=phi i8*[%aE,%au],[%aj,%ao]
%aL=phi i8*[%ay,%au],[%at,%ao]
store i8*%aL,i8**%c,align 8
%aM=getelementptr inbounds i8,i8*%aK,i64 12
%aN=bitcast i8*%aM to i32*
%aO=load i32,i32*%aN,align 4
store i8*null,i8**%e,align 8
%aP=call i8*@sml_alloc(i32 inreg%E)#0
%aQ=or i32%A,1342177280
%aR=getelementptr inbounds i8,i8*%aP,i64 -4
%aS=bitcast i8*%aR to i32*
store i32%aQ,i32*%aS,align 4
store i8*%aP,i8**%e,align 8
call void@llvm.memset.p0i8.i32(i8*%aP,i8 0,i32%E,i1 false)
%aT=icmp eq i32%aJ,0
%aU=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aV=sext i32%x to i64
%aW=getelementptr inbounds i8,i8*%aP,i64%aV
br i1%aT,label%aZ,label%aX
aX:
%aY=bitcast i8*%aW to i8**
store i8*%aU,i8**%aY,align 8
br label%a0
aZ:
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aW,i8*%aU,i32%aO,i1 false)
br label%a0
a0:
%a1=sext i32%A to i64
%a2=getelementptr inbounds i8,i8*%aP,i64%a1
%a3=bitcast i8*%a2 to i32*
store i32%D,i32*%a3,align 4
%a4=call i8*@sml_alloc(i32 inreg 20)#0
%a5=getelementptr inbounds i8,i8*%a4,i64 -4
%a6=bitcast i8*%a5 to i32*
store i32 1342177296,i32*%a6,align 4
store i8*%a4,i8**%c,align 8
%a7=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%a8=bitcast i8*%a4 to i8**
store i8*%a7,i8**%a8,align 8
%a9=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%ba=getelementptr inbounds i8,i8*%a4,i64 8
%bb=bitcast i8*%ba to i8**
store i8*%a9,i8**%bb,align 8
%bc=getelementptr inbounds i8,i8*%a4,i64 16
%bd=bitcast i8*%bc to i32*
store i32 3,i32*%bd,align 4
%be=call i8*@sml_alloc(i32 inreg 20)#0
%bf=getelementptr inbounds i8,i8*%be,i64 -4
%bg=bitcast i8*%bf to i32*
store i32 1342177296,i32*%bg,align 4
%bh=getelementptr inbounds i8,i8*%be,i64 12
%bi=bitcast i8*%bh to i32*
store i32 0,i32*%bi,align 1
%bj=load i8*,i8**%c,align 8
%bk=bitcast i8*%be to i8**
store i8*%bj,i8**%bk,align 8
%bl=getelementptr inbounds i8,i8*%be,i64 8
%bm=bitcast i8*%bl to i32*
store i32%F,i32*%bm,align 4
%bn=getelementptr inbounds i8,i8*%be,i64 16
%bo=bitcast i8*%bn to i32*
store i32 1,i32*%bo,align 4
ret i8*%be
}
define internal fastcc i32@_SMLL6tyvars_668(i8*inreg%a)#2 gc"smlsharp"{
j:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%h,label%f
f:
call void@sml_check(i32 inreg%d)
%g=load i8*,i8**%b,align 8
br label%h
h:
%i=phi i8*[%g,%f],[%a,%j]
%k=bitcast i8*%i to i8****
%l=load i8***,i8****%k,align 8
%m=load i8**,i8***%l,align 8
%n=load i8*,i8**%m,align 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
switch i32%p,label%q[
i32 0,label%aA
i32 1,label%I
]
q:
call void@sml_matchcomp_bug()
%r=load i8*,i8**@_SMLZ5Match,align 8
store i8*%r,i8**%b,align 8
%s=call i8*@sml_alloc(i32 inreg 20)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177296,i32*%u,align 4
store i8*%s,i8**%c,align 8
%v=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[57x i8]}>,<{[4x i8],i32,[57x i8]}>*@ba,i64 0,i32 2,i64 0),i8**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to i32*
store i32 3,i32*%A,align 4
%B=call i8*@sml_alloc(i32 inreg 60)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177336,i32*%D,align 4
%E=getelementptr inbounds i8,i8*%B,i64 56
%F=bitcast i8*%E to i32*
store i32 1,i32*%F,align 4
%G=load i8*,i8**%c,align 8
%H=bitcast i8*%B to i8**
store i8*%G,i8**%H,align 8
call void@sml_raise(i8*inreg%B)#1
unreachable
I:
%J=getelementptr inbounds i8,i8*%i,i64 8
%K=bitcast i8*%J to i8****
%L=load i8***,i8****%K,align 8
%M=load i8**,i8***%L,align 8
%N=load i8*,i8**%M,align 8
%O=bitcast i8*%N to i32*
%P=load i32,i32*%O,align 4
switch i32%P,label%Q[
i32 0,label%ay
i32 1,label%ai
]
Q:
call void@sml_matchcomp_bug()
%R=load i8*,i8**@_SMLZ5Match,align 8
store i8*%R,i8**%b,align 8
%S=call i8*@sml_alloc(i32 inreg 20)#0
%T=getelementptr inbounds i8,i8*%S,i64 -4
%U=bitcast i8*%T to i32*
store i32 1342177296,i32*%U,align 4
store i8*%S,i8**%c,align 8
%V=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%W=bitcast i8*%S to i8**
store i8*%V,i8**%W,align 8
%X=getelementptr inbounds i8,i8*%S,i64 8
%Y=bitcast i8*%X to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[57x i8]}>,<{[4x i8],i32,[57x i8]}>*@ba,i64 0,i32 2,i64 0),i8**%Y,align 8
%Z=getelementptr inbounds i8,i8*%S,i64 16
%aa=bitcast i8*%Z to i32*
store i32 3,i32*%aa,align 4
%ab=call i8*@sml_alloc(i32 inreg 60)#0
%ac=getelementptr inbounds i8,i8*%ab,i64 -4
%ad=bitcast i8*%ac to i32*
store i32 1342177336,i32*%ad,align 4
%ae=getelementptr inbounds i8,i8*%ab,i64 56
%af=bitcast i8*%ae to i32*
store i32 1,i32*%af,align 4
%ag=load i8*,i8**%c,align 8
%ah=bitcast i8*%ab to i8**
store i8*%ag,i8**%ah,align 8
call void@sml_raise(i8*inreg%ab)#1
unreachable
ai:
%aj=getelementptr inbounds i8,i8*%n,i64 4
%ak=bitcast i8*%aj to i32*
%al=load i32,i32*%ak,align 4
%am=getelementptr inbounds i8,i8*%N,i64 4
%an=bitcast i8*%am to i32*
%ao=load i32,i32*%an,align 4
%ap=call i8*@sml_alloc(i32 inreg 12)#0
%aq=bitcast i8*%ap to i32*
%ar=getelementptr inbounds i8,i8*%ap,i64 -4
%as=bitcast i8*%ar to i32*
store i32 1342177288,i32*%as,align 4
store i32%al,i32*%aq,align 4
%at=getelementptr inbounds i8,i8*%ap,i64 4
%au=bitcast i8*%at to i32*
store i32%ao,i32*%au,align 4
%av=getelementptr inbounds i8,i8*%ap,i64 8
%aw=bitcast i8*%av to i32*
store i32 0,i32*%aw,align 4
%ax=tail call fastcc i32@_SMLFN14BoundTypeVarID7compareE(i8*inreg%ap)
ret i32%ax
ay:
%az=phi i32[1,%I],[2,%aA]
ret i32%az
aA:
%aB=getelementptr inbounds i8,i8*%i,i64 8
%aC=bitcast i8*%aB to i8****
%aD=load i8***,i8****%aC,align 8
%aE=load i8**,i8***%aD,align 8
%aF=load i8*,i8**%aE,align 8
%aG=bitcast i8*%aF to i32*
%aH=load i32,i32*%aG,align 4
switch i32%aH,label%aI[
i32 0,label%a0
i32 1,label%ay
]
aI:
call void@sml_matchcomp_bug()
%aJ=load i8*,i8**@_SMLZ5Match,align 8
store i8*%aJ,i8**%b,align 8
%aK=call i8*@sml_alloc(i32 inreg 20)#0
%aL=getelementptr inbounds i8,i8*%aK,i64 -4
%aM=bitcast i8*%aL to i32*
store i32 1342177296,i32*%aM,align 4
store i8*%aK,i8**%c,align 8
%aN=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%aO=bitcast i8*%aK to i8**
store i8*%aN,i8**%aO,align 8
%aP=getelementptr inbounds i8,i8*%aK,i64 8
%aQ=bitcast i8*%aP to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[57x i8]}>,<{[4x i8],i32,[57x i8]}>*@ba,i64 0,i32 2,i64 0),i8**%aQ,align 8
%aR=getelementptr inbounds i8,i8*%aK,i64 16
%aS=bitcast i8*%aR to i32*
store i32 3,i32*%aS,align 4
%aT=call i8*@sml_alloc(i32 inreg 60)#0
%aU=getelementptr inbounds i8,i8*%aT,i64 -4
%aV=bitcast i8*%aU to i32*
store i32 1342177336,i32*%aV,align 4
%aW=getelementptr inbounds i8,i8*%aT,i64 56
%aX=bitcast i8*%aW to i32*
store i32 1,i32*%aX,align 4
%aY=load i8*,i8**%c,align 8
%aZ=bitcast i8*%aT to i8**
store i8*%aY,i8**%aZ,align 8
call void@sml_raise(i8*inreg%aT)#1
unreachable
a0:
%a1=getelementptr inbounds i8,i8*%n,i64 4
%a2=bitcast i8*%a1 to i32*
%a3=load i32,i32*%a2,align 4
%a4=getelementptr inbounds i8,i8*%aF,i64 4
%a5=bitcast i8*%a4 to i32*
%a6=load i32,i32*%a5,align 4
%a7=call i8*@sml_alloc(i32 inreg 12)#0
%a8=bitcast i8*%a7 to i32*
%a9=getelementptr inbounds i8,i8*%a7,i64 -4
%ba=bitcast i8*%a9 to i32*
store i32 1342177288,i32*%ba,align 4
store i32%a3,i32*%a8,align 4
%bb=getelementptr inbounds i8,i8*%a7,i64 4
%bc=bitcast i8*%bb to i32*
store i32%a6,i32*%bc,align 4
%bd=getelementptr inbounds i8,i8*%a7,i64 8
%be=bitcast i8*%bd to i32*
store i32 0,i32*%be,align 4
%bf=tail call fastcc i32@_SMLFN5Int327compareE(i8*inreg%a7)
ret i32%bf
}
define internal fastcc i8*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_670(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%f,align 8
store i8*%b,i8**%d,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%l,label%k
k:
call void@sml_check(i32 inreg%i)
br label%l
l:
%m=call fastcc i8*@_SMLFN4List3mapE(i32 inreg 1,i32 inreg 8,i32 inreg 1,i32 inreg 8)
%n=getelementptr inbounds i8,i8*%m,i64 16
%o=bitcast i8*%n to i8*(i8*,i8*)**
%p=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%o,align 8
%q=bitcast i8*%m to i8**
%r=load i8*,i8**%q,align 8
store i8*%r,i8**%g,align 8
%s=load i8*,i8**%f,align 8
%t=getelementptr inbounds i8,i8*%s,i64 16
%u=bitcast i8*%t to i8**
%v=load i8*,i8**%u,align 8
store i8*%v,i8**%e,align 8
%w=getelementptr inbounds i8,i8*%s,i64 24
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=getelementptr inbounds i8,i8*%s,i64 28
%A=bitcast i8*%z to i32*
%B=load i32,i32*%A,align 4
%C=getelementptr inbounds i8,i8*%s,i64 32
%D=bitcast i8*%C to i32*
%E=load i32,i32*%D,align 4
%F=getelementptr inbounds i8,i8*%s,i64 36
%G=bitcast i8*%F to i32*
%H=load i32,i32*%G,align 4
%I=call i8*@sml_alloc(i32 inreg 28)#0
%J=getelementptr inbounds i8,i8*%I,i64 -4
%K=bitcast i8*%J to i32*
store i32 1342177304,i32*%K,align 4
store i8*%I,i8**%h,align 8
%L=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%M=bitcast i8*%I to i8**
store i8*%L,i8**%M,align 8
%N=getelementptr inbounds i8,i8*%I,i64 8
%O=bitcast i8*%N to i32*
store i32%y,i32*%O,align 4
%P=getelementptr inbounds i8,i8*%I,i64 12
%Q=bitcast i8*%P to i32*
store i32%B,i32*%Q,align 4
%R=getelementptr inbounds i8,i8*%I,i64 16
%S=bitcast i8*%R to i32*
store i32%E,i32*%S,align 4
%T=getelementptr inbounds i8,i8*%I,i64 20
%U=bitcast i8*%T to i32*
store i32%H,i32*%U,align 4
%V=getelementptr inbounds i8,i8*%I,i64 24
%W=bitcast i8*%V to i32*
store i32 1,i32*%W,align 4
%X=call i8*@sml_alloc(i32 inreg 28)#0
%Y=getelementptr inbounds i8,i8*%X,i64 -4
%Z=bitcast i8*%Y to i32*
store i32 1342177304,i32*%Z,align 4
%aa=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%ab=bitcast i8*%X to i8**
store i8*%aa,i8**%ab,align 8
%ac=getelementptr inbounds i8,i8*%X,i64 8
%ad=bitcast i8*%ac to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6tyvars_664 to void(...)*),void(...)**%ad,align 8
%ae=getelementptr inbounds i8,i8*%X,i64 16
%af=bitcast i8*%ae to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLL6tyvars_664 to void(...)*),void(...)**%af,align 8
%ag=getelementptr inbounds i8,i8*%X,i64 24
%ah=bitcast i8*%ag to i32*
store i32 -2147483647,i32*%ah,align 4
%ai=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%aj=call fastcc i8*%p(i8*inreg%ai,i8*inreg%X)
%ak=getelementptr inbounds i8,i8*%aj,i64 16
%al=bitcast i8*%ak to i8*(i8*,i8*)**
%am=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%al,align 8
%an=bitcast i8*%aj to i8**
%ao=load i8*,i8**%an,align 8
store i8*%ao,i8**%e,align 8
%ap=load i8*,i8**%f,align 8
%aq=getelementptr inbounds i8,i8*%ap,i64 24
%ar=bitcast i8*%aq to i32*
%as=load i32,i32*%ar,align 4
%at=getelementptr inbounds i8,i8*%ap,i64 28
%au=bitcast i8*%at to i32*
%av=load i32,i32*%au,align 4
%aw=call fastcc i8*@_SMLFN14BoundTypeVarID3Map10listItemsiE(i32 inreg%as,i32 inreg%av)
%ax=getelementptr inbounds i8,i8*%aw,i64 16
%ay=bitcast i8*%ax to i8*(i8*,i8*)**
%az=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ay,align 8
%aA=bitcast i8*%aw to i8**
%aB=load i8*,i8**%aA,align 8
%aC=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aD=call fastcc i8*%az(i8*inreg%aB,i8*inreg%aC)
%aE=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aF=call fastcc i8*%am(i8*inreg%aE,i8*inreg%aD)
store i8*%aF,i8**%d,align 8
%aG=call fastcc i8*@_SMLFN10ListSorter4sortE(i32 inreg 1,i32 inreg 8)
%aH=getelementptr inbounds i8,i8*%aG,i64 16
%aI=bitcast i8*%aH to i8*(i8*,i8*)**
%aJ=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aI,align 8
%aK=bitcast i8*%aG to i8**
%aL=load i8*,i8**%aK,align 8
%aM=call fastcc i8*%aJ(i8*inreg%aL,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bb,i64 0,i32 2)to i8*))
%aN=getelementptr inbounds i8,i8*%aM,i64 16
%aO=bitcast i8*%aN to i8*(i8*,i8*)**
%aP=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aO,align 8
%aQ=bitcast i8*%aM to i8**
%aR=load i8*,i8**%aQ,align 8
%aS=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aT=call fastcc i8*%aP(i8*inreg%aR,i8*inreg%aS)
store i8*%aT,i8**%d,align 8
%aU=call fastcc i8*@_SMLFN15BasicFormatters11format__listE(i32 inreg 1,i32 inreg 8)
%aV=getelementptr inbounds i8,i8*%aU,i64 16
%aW=bitcast i8*%aV to i8*(i8*,i8*)**
%aX=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aW,align 8
%aY=bitcast i8*%aU to i8**
%aZ=load i8*,i8**%aY,align 8
store i8*%aZ,i8**%g,align 8
%a0=load i8*,i8**%f,align 8
%a1=getelementptr inbounds i8,i8*%a0,i64 24
%a2=bitcast i8*%a1 to i32*
%a3=load i32,i32*%a2,align 4
%a4=getelementptr inbounds i8,i8*%a0,i64 28
%a5=bitcast i8*%a4 to i32*
%a6=load i32,i32*%a5,align 4
%a7=bitcast i8**%c to i8*
call void@llvm.lifetime.start.p0i8(i64 8,i8*%a7)
call void@llvm.gcroot(i8**%c,i8*null)#0
%a8=call i8*@sml_alloc(i32 inreg 12)#0
%a9=bitcast i8*%a8 to i32*
%ba=getelementptr inbounds i8,i8*%a8,i64 -4
%bb=bitcast i8*%ba to i32*
store i32 1342177288,i32*%bb,align 4
store i8*%a8,i8**%c,align 8
store i32%a3,i32*%a9,align 4
%bc=getelementptr inbounds i8,i8*%a8,i64 4
%bd=bitcast i8*%bc to i32*
store i32%a6,i32*%bd,align 4
%be=getelementptr inbounds i8,i8*%a8,i64 8
%bf=bitcast i8*%be to i32*
store i32 0,i32*%bf,align 4
%bg=call i8*@sml_alloc(i32 inreg 28)#0
%bh=getelementptr inbounds i8,i8*%bg,i64 -4
%bi=bitcast i8*%bh to i32*
store i32 1342177304,i32*%bi,align 4
%bj=load i8*,i8**%c,align 8
%bk=bitcast i8*%bg to i8**
store i8*%bj,i8**%bk,align 8
%bl=getelementptr inbounds i8,i8*%bg,i64 8
%bm=bitcast i8*%bl to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat17formatBtvWithTypeE_645 to void(...)*),void(...)**%bm,align 8
%bn=getelementptr inbounds i8,i8*%bg,i64 16
%bo=bitcast i8*%bn to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat17formatBtvWithTypeE_645 to void(...)*),void(...)**%bo,align 8
%bp=getelementptr inbounds i8,i8*%bg,i64 24
%bq=bitcast i8*%bp to i32*
store i32 -2147483647,i32*%bq,align 4
call void@llvm.lifetime.end.p0i8(i64 8,i8*%a7)
%br=load i8*,i8**%f,align 8
%bs=getelementptr inbounds i8,i8*%br,i64 8
%bt=bitcast i8*%bs to i8**
%bu=load i8*,i8**%bt,align 8
%bv=call fastcc i8*@_SMLLN10TermFormat17formatBtvWithTypeE_645(i8*inreg%bj,i8*inreg%bu)
store i8*%bv,i8**%e,align 8
%bw=bitcast i8**%f to i8***
%bx=load i8**,i8***%bw,align 8
%by=load i8*,i8**%bx,align 8
store i8*%by,i8**%f,align 8
%bz=call i8*@sml_alloc(i32 inreg 20)#0
%bA=getelementptr inbounds i8,i8*%bz,i64 -4
%bB=bitcast i8*%bA to i32*
store i32 1342177296,i32*%bB,align 4
%bC=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bD=bitcast i8*%bz to i8**
store i8*%bC,i8**%bD,align 8
%bE=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%bF=getelementptr inbounds i8,i8*%bz,i64 8
%bG=bitcast i8*%bF to i8**
store i8*%bE,i8**%bG,align 8
%bH=getelementptr inbounds i8,i8*%bz,i64 16
%bI=bitcast i8*%bH to i32*
store i32 3,i32*%bI,align 4
%bJ=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%bK=call fastcc i8*%aX(i8*inreg%bJ,i8*inreg%bz)
%bL=getelementptr inbounds i8,i8*%bK,i64 16
%bM=bitcast i8*%bL to i8*(i8*,i8*)**
%bN=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bM,align 8
%bO=bitcast i8*%bK to i8**
%bP=load i8*,i8**%bO,align 8
%bQ=load i8*,i8**%d,align 8
%bR=tail call fastcc i8*%bN(i8*inreg%bP,i8*inreg%bQ)
ret i8*%bR
}
define internal fastcc i8*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_671(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%b,i8**%c,align 8
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=getelementptr inbounds i8,i8*%a,i64 16
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%a,i64 20
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=getelementptr inbounds i8,i8*%a,i64 24
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=getelementptr inbounds i8,i8*%a,i64 28
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=call i8*@sml_alloc(i32 inreg 44)#0
%y=getelementptr inbounds i8,i8*%x,i64 -4
%z=bitcast i8*%y to i32*
store i32 1342177320,i32*%z,align 4
store i8*%x,i8**%f,align 8
%A=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%B=bitcast i8*%x to i8**
store i8*%A,i8**%B,align 8
%C=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%D=getelementptr inbounds i8,i8*%x,i64 8
%E=bitcast i8*%D to i8**
store i8*%C,i8**%E,align 8
%F=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%G=getelementptr inbounds i8,i8*%x,i64 16
%H=bitcast i8*%G to i8**
store i8*%F,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%x,i64 24
%J=bitcast i8*%I to i32*
store i32%n,i32*%J,align 4
%K=getelementptr inbounds i8,i8*%x,i64 28
%L=bitcast i8*%K to i32*
store i32%q,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%x,i64 32
%N=bitcast i8*%M to i32*
store i32%t,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%x,i64 36
%P=bitcast i8*%O to i32*
store i32%w,i32*%P,align 4
%Q=getelementptr inbounds i8,i8*%x,i64 40
%R=bitcast i8*%Q to i32*
store i32 7,i32*%R,align 4
%S=call i8*@sml_alloc(i32 inreg 28)#0
%T=getelementptr inbounds i8,i8*%S,i64 -4
%U=bitcast i8*%T to i32*
store i32 1342177304,i32*%U,align 4
%V=load i8*,i8**%f,align 8
%W=bitcast i8*%S to i8**
store i8*%V,i8**%W,align 8
%X=getelementptr inbounds i8,i8*%S,i64 8
%Y=bitcast i8*%X to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_670 to void(...)*),void(...)**%Y,align 8
%Z=getelementptr inbounds i8,i8*%S,i64 16
%aa=bitcast i8*%Z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_670 to void(...)*),void(...)**%aa,align 8
%ab=getelementptr inbounds i8,i8*%S,i64 24
%ac=bitcast i8*%ab to i32*
store i32 -2147483647,i32*%ac,align 4
ret i8*%S
}
define internal fastcc i8*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_672(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
%g=bitcast i8*%a to i8**
%h=load i8*,i8**%g,align 8
store i8*%h,i8**%d,align 8
%i=getelementptr inbounds i8,i8*%a,i64 8
%j=bitcast i8*%i to i8**
%k=load i8*,i8**%j,align 8
store i8*%k,i8**%e,align 8
%l=getelementptr inbounds i8,i8*%a,i64 16
%m=bitcast i8*%l to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%a,i64 20
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=call i8*@sml_alloc(i32 inreg 36)#0
%s=getelementptr inbounds i8,i8*%r,i64 -4
%t=bitcast i8*%s to i32*
store i32 1342177312,i32*%t,align 4
store i8*%r,i8**%f,align 8
%u=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%v=bitcast i8*%r to i8**
store i8*%u,i8**%v,align 8
%w=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%x=getelementptr inbounds i8,i8*%r,i64 8
%y=bitcast i8*%x to i8**
store i8*%w,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%r,i64 16
%A=bitcast i8*%z to i32*
store i32%n,i32*%A,align 4
%B=getelementptr inbounds i8,i8*%r,i64 20
%C=bitcast i8*%B to i32*
store i32%q,i32*%C,align 4
%D=getelementptr inbounds i8,i8*%r,i64 24
%E=bitcast i8*%D to i32*
store i32%b,i32*%E,align 4
%F=getelementptr inbounds i8,i8*%r,i64 28
%G=bitcast i8*%F to i32*
store i32%c,i32*%G,align 4
%H=getelementptr inbounds i8,i8*%r,i64 32
%I=bitcast i8*%H to i32*
store i32 3,i32*%I,align 4
%J=call i8*@sml_alloc(i32 inreg 28)#0
%K=getelementptr inbounds i8,i8*%J,i64 -4
%L=bitcast i8*%K to i32*
store i32 1342177304,i32*%L,align 4
%M=load i8*,i8**%f,align 8
%N=bitcast i8*%J to i8**
store i8*%M,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%J,i64 8
%P=bitcast i8*%O to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_671 to void(...)*),void(...)**%P,align 8
%Q=getelementptr inbounds i8,i8*%J,i64 16
%R=bitcast i8*%Q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_671 to void(...)*),void(...)**%R,align 8
%S=getelementptr inbounds i8,i8*%J,i64 24
%T=bitcast i8*%S to i32*
store i32 -2147483647,i32*%T,align 4
ret i8*%J
}
define internal fastcc i8*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_673(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%b,i8**%c,align 8
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=getelementptr inbounds i8,i8*%a,i64 8
%i=bitcast i8*%h to i32*
%j=load i32,i32*%i,align 4
%k=getelementptr inbounds i8,i8*%a,i64 12
%l=bitcast i8*%k to i32*
%m=load i32,i32*%l,align 4
%n=call i8*@sml_alloc(i32 inreg 28)#0
%o=getelementptr inbounds i8,i8*%n,i64 -4
%p=bitcast i8*%o to i32*
store i32 1342177304,i32*%p,align 4
store i8*%n,i8**%e,align 8
%q=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%r=bitcast i8*%n to i8**
store i8*%q,i8**%r,align 8
%s=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%t=getelementptr inbounds i8,i8*%n,i64 8
%u=bitcast i8*%t to i8**
store i8*%s,i8**%u,align 8
%v=getelementptr inbounds i8,i8*%n,i64 16
%w=bitcast i8*%v to i32*
store i32%j,i32*%w,align 4
%x=getelementptr inbounds i8,i8*%n,i64 20
%y=bitcast i8*%x to i32*
store i32%m,i32*%y,align 4
%z=getelementptr inbounds i8,i8*%n,i64 24
%A=bitcast i8*%z to i32*
store i32 3,i32*%A,align 4
%B=call i8*@sml_alloc(i32 inreg 28)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177304,i32*%D,align 4
%E=load i8*,i8**%e,align 8
%F=bitcast i8*%B to i8**
store i8*%E,i8**%F,align 8
%G=getelementptr inbounds i8,i8*%B,i64 8
%H=bitcast i8*%G to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_672 to void(...)*),void(...)**%H,align 8
%I=getelementptr inbounds i8,i8*%B,i64 16
%J=bitcast i8*%I to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_1127 to void(...)*),void(...)**%J,align 8
%K=getelementptr inbounds i8,i8*%B,i64 24
%L=bitcast i8*%K to i32*
store i32 -2147483647,i32*%L,align 4
ret i8*%B
}
define internal fastcc i8*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_674(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_673 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_673 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb4listE_681(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
q:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
store i8*%a,i8**%f,align 8
store i8*%b,i8**%c,align 8
%k=load atomic i32,i32*@sml_check_flag unordered,align 4
%l=icmp eq i32%k,0
br i1%l,label%o,label%m
m:
call void@sml_check(i32 inreg%k)
%n=load i8*,i8**%f,align 8
br label%o
o:
%p=phi i8*[%n,%m],[%a,%q]
%r=getelementptr inbounds i8,i8*%p,i64 8
%s=bitcast i8*%r to i32*
%t=load i32,i32*%s,align 4
%u=getelementptr inbounds i8,i8*%p,i64 12
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=call fastcc i8*@_SMLFN10TermFormat18formatEnclosedListE(i32 inreg%t,i32 inreg%w)
%y=getelementptr inbounds i8,i8*%x,i64 16
%z=bitcast i8*%y to i8*(i8*,i8*)**
%A=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%z,align 8
%B=bitcast i8*%x to i8**
%C=load i8*,i8**%B,align 8
store i8*%C,i8**%g,align 8
%D=call i8*@sml_alloc(i32 inreg 20)#0
%E=getelementptr inbounds i8,i8*%D,i64 -4
%F=bitcast i8*%E to i32*
store i32 1342177296,i32*%F,align 4
store i8*%D,i8**%d,align 8
%G=getelementptr inbounds i8,i8*%D,i64 4
%H=bitcast i8*%G to i32*
store i32 0,i32*%H,align 1
%I=bitcast i8*%D to i32*
store i32 1,i32*%I,align 4
%J=getelementptr inbounds i8,i8*%D,i64 8
%K=bitcast i8*%J to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bN,i64 0,i32 2,i64 0),i8**%K,align 8
%L=getelementptr inbounds i8,i8*%D,i64 16
%M=bitcast i8*%L to i32*
store i32 2,i32*%M,align 4
%N=call i8*@sml_alloc(i32 inreg 20)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32 1342177296,i32*%P,align 4
store i8*%N,i8**%e,align 8
%Q=getelementptr inbounds i8,i8*%N,i64 4
%R=bitcast i8*%Q to i32*
store i32 0,i32*%R,align 1
%S=bitcast i8*%N to i32*
store i32 6,i32*%S,align 4
%T=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%U=getelementptr inbounds i8,i8*%N,i64 8
%V=bitcast i8*%U to i8**
store i8*%T,i8**%V,align 8
%W=getelementptr inbounds i8,i8*%N,i64 16
%X=bitcast i8*%W to i32*
store i32 2,i32*%X,align 4
%Y=call i8*@sml_alloc(i32 inreg 20)#0
%Z=getelementptr inbounds i8,i8*%Y,i64 -4
%aa=bitcast i8*%Z to i32*
store i32 1342177296,i32*%aa,align 4
%ab=load i8*,i8**%e,align 8
%ac=bitcast i8*%Y to i8**
store i8*%ab,i8**%ac,align 8
%ad=getelementptr inbounds i8,i8*%Y,i64 8
%ae=bitcast i8*%ad to i8**
store i8*null,i8**%ae,align 8
%af=getelementptr inbounds i8,i8*%Y,i64 16
%ag=bitcast i8*%af to i32*
store i32 3,i32*%ag,align 4
store i8*%ab,i8**%d,align 8
store i8*null,i8**%e,align 8
%ah=call i8*@sml_alloc(i32 inreg 20)#0
%ai=getelementptr inbounds i8,i8*%ah,i64 -4
%aj=bitcast i8*%ai to i32*
store i32 1342177296,i32*%aj,align 4
store i8*%ah,i8**%h,align 8
%ak=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%al=bitcast i8*%ah to i8**
store i8*%ak,i8**%al,align 8
%am=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%an=getelementptr inbounds i8,i8*%ah,i64 8
%ao=bitcast i8*%an to i8**
store i8*%am,i8**%ao,align 8
%ap=getelementptr inbounds i8,i8*%ah,i64 16
%aq=bitcast i8*%ap to i32*
store i32 3,i32*%aq,align 4
%ar=call i8*@sml_alloc(i32 inreg 20)#0
%as=getelementptr inbounds i8,i8*%ar,i64 -4
%at=bitcast i8*%as to i32*
store i32 1342177296,i32*%at,align 4
store i8*%ar,i8**%d,align 8
%au=getelementptr inbounds i8,i8*%ar,i64 4
%av=bitcast i8*%au to i32*
store i32 0,i32*%av,align 1
%aw=bitcast i8*%ar to i32*
store i32 1,i32*%aw,align 4
%ax=getelementptr inbounds i8,i8*%ar,i64 8
%ay=bitcast i8*%ax to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bd,i64 0,i32 2,i64 0),i8**%ay,align 8
%az=getelementptr inbounds i8,i8*%ar,i64 16
%aA=bitcast i8*%az to i32*
store i32 2,i32*%aA,align 4
%aB=call i8*@sml_alloc(i32 inreg 20)#0
%aC=getelementptr inbounds i8,i8*%aB,i64 -4
%aD=bitcast i8*%aC to i32*
store i32 1342177296,i32*%aD,align 4
store i8*%aB,i8**%e,align 8
%aE=getelementptr inbounds i8,i8*%aB,i64 4
%aF=bitcast i8*%aE to i32*
store i32 0,i32*%aF,align 1
%aG=bitcast i8*%aB to i32*
store i32 6,i32*%aG,align 4
%aH=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aI=getelementptr inbounds i8,i8*%aB,i64 8
%aJ=bitcast i8*%aI to i8**
store i8*%aH,i8**%aJ,align 8
%aK=getelementptr inbounds i8,i8*%aB,i64 16
%aL=bitcast i8*%aK to i32*
store i32 2,i32*%aL,align 4
%aM=call i8*@sml_alloc(i32 inreg 20)#0
%aN=getelementptr inbounds i8,i8*%aM,i64 -4
%aO=bitcast i8*%aN to i32*
store i32 1342177296,i32*%aO,align 4
%aP=load i8*,i8**%e,align 8
%aQ=bitcast i8*%aM to i8**
store i8*%aP,i8**%aQ,align 8
%aR=getelementptr inbounds i8,i8*%aM,i64 8
%aS=bitcast i8*%aR to i8**
store i8*null,i8**%aS,align 8
%aT=getelementptr inbounds i8,i8*%aM,i64 16
%aU=bitcast i8*%aT to i32*
store i32 3,i32*%aU,align 4
store i8*%aP,i8**%d,align 8
store i8*null,i8**%e,align 8
%aV=call i8*@sml_alloc(i32 inreg 20)#0
%aW=getelementptr inbounds i8,i8*%aV,i64 -4
%aX=bitcast i8*%aW to i32*
store i32 1342177296,i32*%aX,align 4
store i8*%aV,i8**%i,align 8
%aY=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aZ=bitcast i8*%aV to i8**
store i8*%aY,i8**%aZ,align 8
%a0=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%a1=getelementptr inbounds i8,i8*%aV,i64 8
%a2=bitcast i8*%a1 to i8**
store i8*%a0,i8**%a2,align 8
%a3=getelementptr inbounds i8,i8*%aV,i64 16
%a4=bitcast i8*%a3 to i32*
store i32 3,i32*%a4,align 4
%a5=call i8*@sml_alloc(i32 inreg 20)#0
%a6=getelementptr inbounds i8,i8*%a5,i64 -4
%a7=bitcast i8*%a6 to i32*
store i32 1342177296,i32*%a7,align 4
store i8*%a5,i8**%d,align 8
%a8=getelementptr inbounds i8,i8*%a5,i64 4
%a9=bitcast i8*%a8 to i32*
store i32 0,i32*%a9,align 1
%ba=bitcast i8*%a5 to i32*
store i32 1,i32*%ba,align 4
%bb=getelementptr inbounds i8,i8*%a5,i64 8
%bc=bitcast i8*%bb to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bO,i64 0,i32 2,i64 0),i8**%bc,align 8
%bd=getelementptr inbounds i8,i8*%a5,i64 16
%be=bitcast i8*%bd to i32*
store i32 2,i32*%be,align 4
%bf=call i8*@sml_alloc(i32 inreg 20)#0
%bg=getelementptr inbounds i8,i8*%bf,i64 -4
%bh=bitcast i8*%bg to i32*
store i32 1342177296,i32*%bh,align 4
store i8*%bf,i8**%e,align 8
%bi=getelementptr inbounds i8,i8*%bf,i64 4
%bj=bitcast i8*%bi to i32*
store i32 0,i32*%bj,align 1
%bk=bitcast i8*%bf to i32*
store i32 6,i32*%bk,align 4
%bl=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bm=getelementptr inbounds i8,i8*%bf,i64 8
%bn=bitcast i8*%bm to i8**
store i8*%bl,i8**%bn,align 8
%bo=getelementptr inbounds i8,i8*%bf,i64 16
%bp=bitcast i8*%bo to i32*
store i32 2,i32*%bp,align 4
%bq=call i8*@sml_alloc(i32 inreg 20)#0
%br=getelementptr inbounds i8,i8*%bq,i64 -4
%bs=bitcast i8*%br to i32*
store i32 1342177296,i32*%bs,align 4
%bt=load i8*,i8**%e,align 8
%bu=bitcast i8*%bq to i8**
store i8*%bt,i8**%bu,align 8
%bv=getelementptr inbounds i8,i8*%bq,i64 8
%bw=bitcast i8*%bv to i8**
store i8*null,i8**%bw,align 8
%bx=getelementptr inbounds i8,i8*%bq,i64 16
%by=bitcast i8*%bx to i32*
store i32 3,i32*%by,align 4
store i8*%bt,i8**%d,align 8
store i8*null,i8**%e,align 8
%bz=call i8*@sml_alloc(i32 inreg 20)#0
%bA=getelementptr inbounds i8,i8*%bz,i64 -4
%bB=bitcast i8*%bA to i32*
store i32 1342177296,i32*%bB,align 4
store i8*%bz,i8**%j,align 8
%bC=load i8*,i8**%d,align 8
%bD=bitcast i8*%bz to i8**
store i8*%bC,i8**%bD,align 8
%bE=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bF=getelementptr inbounds i8,i8*%bz,i64 8
%bG=bitcast i8*%bF to i8**
store i8*%bE,i8**%bG,align 8
%bH=getelementptr inbounds i8,i8*%bz,i64 16
%bI=bitcast i8*%bH to i32*
store i32 3,i32*%bI,align 4
%bJ=bitcast i8**%f to i8***
%bK=load i8**,i8***%bJ,align 8
store i8*null,i8**%f,align 8
%bL=load i8*,i8**%bK,align 8
store i8*%bL,i8**%d,align 8
%bM=call i8*@sml_alloc(i32 inreg 36)#0
%bN=getelementptr inbounds i8,i8*%bM,i64 -4
%bO=bitcast i8*%bN to i32*
store i32 1342177312,i32*%bO,align 4
%bP=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bQ=bitcast i8*%bM to i8**
store i8*%bP,i8**%bQ,align 8
%bR=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%bS=getelementptr inbounds i8,i8*%bM,i64 8
%bT=bitcast i8*%bS to i8**
store i8*%bR,i8**%bT,align 8
%bU=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%bV=getelementptr inbounds i8,i8*%bM,i64 16
%bW=bitcast i8*%bV to i8**
store i8*%bU,i8**%bW,align 8
%bX=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%bY=getelementptr inbounds i8,i8*%bM,i64 24
%bZ=bitcast i8*%bY to i8**
store i8*%bX,i8**%bZ,align 8
%b0=getelementptr inbounds i8,i8*%bM,i64 32
%b1=bitcast i8*%b0 to i32*
store i32 15,i32*%b1,align 4
%b2=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%b3=call fastcc i8*%A(i8*inreg%b2,i8*inreg%bM)
%b4=getelementptr inbounds i8,i8*%b3,i64 16
%b5=bitcast i8*%b4 to i8*(i8*,i8*)**
%b6=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%b5,align 8
%b7=bitcast i8*%b3 to i8**
%b8=load i8*,i8**%b7,align 8
%b9=load i8*,i8**%c,align 8
%ca=tail call fastcc i8*%b6(i8*inreg%b8,i8*inreg%b9)
ret i8*%ca
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb4listE_682(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb4listE_681 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb4listE_681 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat10FormatComb4listE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb4listE_682 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb4listE_682 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb5tupleE_691(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
%j=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
call void@llvm.gcroot(i8**%j,i8*null)#0
store i8*%a,i8**%f,align 8
store i8*%b,i8**%c,align 8
%k=load atomic i32,i32*@sml_check_flag unordered,align 4
%l=icmp eq i32%k,0
br i1%l,label%n,label%m
m:
call void@sml_check(i32 inreg%k)
br label%n
n:
%o=call fastcc i8*@_SMLFN10TermFormat18formatEnclosedListE(i32 inreg 1,i32 inreg 8)
%p=getelementptr inbounds i8,i8*%o,i64 16
%q=bitcast i8*%p to i8*(i8*,i8*)**
%r=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%q,align 8
%s=bitcast i8*%o to i8**
%t=load i8*,i8**%s,align 8
store i8*%t,i8**%g,align 8
%u=call i8*@sml_alloc(i32 inreg 20)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177296,i32*%w,align 4
store i8*%u,i8**%d,align 8
%x=getelementptr inbounds i8,i8*%u,i64 4
%y=bitcast i8*%x to i32*
store i32 0,i32*%y,align 1
%z=bitcast i8*%u to i32*
store i32 1,i32*%z,align 4
%A=getelementptr inbounds i8,i8*%u,i64 8
%B=bitcast i8*%A to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bo,i64 0,i32 2,i64 0),i8**%B,align 8
%C=getelementptr inbounds i8,i8*%u,i64 16
%D=bitcast i8*%C to i32*
store i32 2,i32*%D,align 4
%E=call i8*@sml_alloc(i32 inreg 20)#0
%F=getelementptr inbounds i8,i8*%E,i64 -4
%G=bitcast i8*%F to i32*
store i32 1342177296,i32*%G,align 4
store i8*%E,i8**%e,align 8
%H=getelementptr inbounds i8,i8*%E,i64 4
%I=bitcast i8*%H to i32*
store i32 0,i32*%I,align 1
%J=bitcast i8*%E to i32*
store i32 6,i32*%J,align 4
%K=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%L=getelementptr inbounds i8,i8*%E,i64 8
%M=bitcast i8*%L to i8**
store i8*%K,i8**%M,align 8
%N=getelementptr inbounds i8,i8*%E,i64 16
%O=bitcast i8*%N to i32*
store i32 2,i32*%O,align 4
%P=call i8*@sml_alloc(i32 inreg 20)#0
%Q=getelementptr inbounds i8,i8*%P,i64 -4
%R=bitcast i8*%Q to i32*
store i32 1342177296,i32*%R,align 4
%S=load i8*,i8**%e,align 8
%T=bitcast i8*%P to i8**
store i8*%S,i8**%T,align 8
%U=getelementptr inbounds i8,i8*%P,i64 8
%V=bitcast i8*%U to i8**
store i8*null,i8**%V,align 8
%W=getelementptr inbounds i8,i8*%P,i64 16
%X=bitcast i8*%W to i32*
store i32 3,i32*%X,align 4
store i8*%S,i8**%d,align 8
store i8*null,i8**%e,align 8
%Y=call i8*@sml_alloc(i32 inreg 20)#0
%Z=getelementptr inbounds i8,i8*%Y,i64 -4
%aa=bitcast i8*%Z to i32*
store i32 1342177296,i32*%aa,align 4
store i8*%Y,i8**%h,align 8
%ab=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%ac=bitcast i8*%Y to i8**
store i8*%ab,i8**%ac,align 8
%ad=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%ae=getelementptr inbounds i8,i8*%Y,i64 8
%af=bitcast i8*%ae to i8**
store i8*%ad,i8**%af,align 8
%ag=getelementptr inbounds i8,i8*%Y,i64 16
%ah=bitcast i8*%ag to i32*
store i32 3,i32*%ah,align 4
%ai=call i8*@sml_alloc(i32 inreg 20)#0
%aj=getelementptr inbounds i8,i8*%ai,i64 -4
%ak=bitcast i8*%aj to i32*
store i32 1342177296,i32*%ak,align 4
store i8*%ai,i8**%d,align 8
%al=getelementptr inbounds i8,i8*%ai,i64 4
%am=bitcast i8*%al to i32*
store i32 0,i32*%am,align 1
%an=bitcast i8*%ai to i32*
store i32 1,i32*%an,align 4
%ao=getelementptr inbounds i8,i8*%ai,i64 8
%ap=bitcast i8*%ao to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bd,i64 0,i32 2,i64 0),i8**%ap,align 8
%aq=getelementptr inbounds i8,i8*%ai,i64 16
%ar=bitcast i8*%aq to i32*
store i32 2,i32*%ar,align 4
%as=call i8*@sml_alloc(i32 inreg 20)#0
%at=getelementptr inbounds i8,i8*%as,i64 -4
%au=bitcast i8*%at to i32*
store i32 1342177296,i32*%au,align 4
store i8*%as,i8**%e,align 8
%av=getelementptr inbounds i8,i8*%as,i64 4
%aw=bitcast i8*%av to i32*
store i32 0,i32*%aw,align 1
%ax=bitcast i8*%as to i32*
store i32 6,i32*%ax,align 4
%ay=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%az=getelementptr inbounds i8,i8*%as,i64 8
%aA=bitcast i8*%az to i8**
store i8*%ay,i8**%aA,align 8
%aB=getelementptr inbounds i8,i8*%as,i64 16
%aC=bitcast i8*%aB to i32*
store i32 2,i32*%aC,align 4
%aD=call i8*@sml_alloc(i32 inreg 20)#0
%aE=getelementptr inbounds i8,i8*%aD,i64 -4
%aF=bitcast i8*%aE to i32*
store i32 1342177296,i32*%aF,align 4
%aG=load i8*,i8**%e,align 8
%aH=bitcast i8*%aD to i8**
store i8*%aG,i8**%aH,align 8
%aI=getelementptr inbounds i8,i8*%aD,i64 8
%aJ=bitcast i8*%aI to i8**
store i8*null,i8**%aJ,align 8
%aK=getelementptr inbounds i8,i8*%aD,i64 16
%aL=bitcast i8*%aK to i32*
store i32 3,i32*%aL,align 4
store i8*%aG,i8**%d,align 8
store i8*null,i8**%e,align 8
%aM=call i8*@sml_alloc(i32 inreg 20)#0
%aN=getelementptr inbounds i8,i8*%aM,i64 -4
%aO=bitcast i8*%aN to i32*
store i32 1342177296,i32*%aO,align 4
store i8*%aM,i8**%i,align 8
%aP=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%aQ=bitcast i8*%aM to i8**
store i8*%aP,i8**%aQ,align 8
%aR=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%aS=getelementptr inbounds i8,i8*%aM,i64 8
%aT=bitcast i8*%aS to i8**
store i8*%aR,i8**%aT,align 8
%aU=getelementptr inbounds i8,i8*%aM,i64 16
%aV=bitcast i8*%aU to i32*
store i32 3,i32*%aV,align 4
%aW=call i8*@sml_alloc(i32 inreg 20)#0
%aX=getelementptr inbounds i8,i8*%aW,i64 -4
%aY=bitcast i8*%aX to i32*
store i32 1342177296,i32*%aY,align 4
store i8*%aW,i8**%d,align 8
%aZ=getelementptr inbounds i8,i8*%aW,i64 4
%a0=bitcast i8*%aZ to i32*
store i32 0,i32*%a0,align 1
%a1=bitcast i8*%aW to i32*
store i32 1,i32*%a1,align 4
%a2=getelementptr inbounds i8,i8*%aW,i64 8
%a3=bitcast i8*%a2 to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bp,i64 0,i32 2,i64 0),i8**%a3,align 8
%a4=getelementptr inbounds i8,i8*%aW,i64 16
%a5=bitcast i8*%a4 to i32*
store i32 2,i32*%a5,align 4
%a6=call i8*@sml_alloc(i32 inreg 20)#0
%a7=getelementptr inbounds i8,i8*%a6,i64 -4
%a8=bitcast i8*%a7 to i32*
store i32 1342177296,i32*%a8,align 4
store i8*%a6,i8**%e,align 8
%a9=getelementptr inbounds i8,i8*%a6,i64 4
%ba=bitcast i8*%a9 to i32*
store i32 0,i32*%ba,align 1
%bb=bitcast i8*%a6 to i32*
store i32 6,i32*%bb,align 4
%bc=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bd=getelementptr inbounds i8,i8*%a6,i64 8
%be=bitcast i8*%bd to i8**
store i8*%bc,i8**%be,align 8
%bf=getelementptr inbounds i8,i8*%a6,i64 16
%bg=bitcast i8*%bf to i32*
store i32 2,i32*%bg,align 4
%bh=call i8*@sml_alloc(i32 inreg 20)#0
%bi=getelementptr inbounds i8,i8*%bh,i64 -4
%bj=bitcast i8*%bi to i32*
store i32 1342177296,i32*%bj,align 4
%bk=load i8*,i8**%e,align 8
%bl=bitcast i8*%bh to i8**
store i8*%bk,i8**%bl,align 8
%bm=getelementptr inbounds i8,i8*%bh,i64 8
%bn=bitcast i8*%bm to i8**
store i8*null,i8**%bn,align 8
%bo=getelementptr inbounds i8,i8*%bh,i64 16
%bp=bitcast i8*%bo to i32*
store i32 3,i32*%bp,align 4
store i8*%bk,i8**%d,align 8
store i8*null,i8**%e,align 8
%bq=call i8*@sml_alloc(i32 inreg 20)#0
%br=getelementptr inbounds i8,i8*%bq,i64 -4
%bs=bitcast i8*%br to i32*
store i32 1342177296,i32*%bs,align 4
store i8*%bq,i8**%j,align 8
%bt=load i8*,i8**%d,align 8
%bu=bitcast i8*%bq to i8**
store i8*%bt,i8**%bu,align 8
%bv=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%bw=getelementptr inbounds i8,i8*%bq,i64 8
%bx=bitcast i8*%bw to i8**
store i8*%bv,i8**%bx,align 8
%by=getelementptr inbounds i8,i8*%bq,i64 16
%bz=bitcast i8*%by to i32*
store i32 3,i32*%bz,align 4
%bA=bitcast i8**%f to i8***
%bB=load i8**,i8***%bA,align 8
store i8*null,i8**%f,align 8
%bC=load i8*,i8**%bB,align 8
store i8*%bC,i8**%d,align 8
%bD=call i8*@sml_alloc(i32 inreg 36)#0
%bE=getelementptr inbounds i8,i8*%bD,i64 -4
%bF=bitcast i8*%bE to i32*
store i32 1342177312,i32*%bF,align 4
%bG=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bH=bitcast i8*%bD to i8**
store i8*%bG,i8**%bH,align 8
%bI=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%bJ=getelementptr inbounds i8,i8*%bD,i64 8
%bK=bitcast i8*%bJ to i8**
store i8*%bI,i8**%bK,align 8
%bL=load i8*,i8**%i,align 8
store i8*null,i8**%i,align 8
%bM=getelementptr inbounds i8,i8*%bD,i64 16
%bN=bitcast i8*%bM to i8**
store i8*%bL,i8**%bN,align 8
%bO=load i8*,i8**%j,align 8
store i8*null,i8**%j,align 8
%bP=getelementptr inbounds i8,i8*%bD,i64 24
%bQ=bitcast i8*%bP to i8**
store i8*%bO,i8**%bQ,align 8
%bR=getelementptr inbounds i8,i8*%bD,i64 32
%bS=bitcast i8*%bR to i32*
store i32 15,i32*%bS,align 4
%bT=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%bU=call fastcc i8*%r(i8*inreg%bT,i8*inreg%bD)
%bV=getelementptr inbounds i8,i8*%bU,i64 16
%bW=bitcast i8*%bV to i8*(i8*,i8*)**
%bX=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bW,align 8
%bY=bitcast i8*%bU to i8**
%bZ=load i8*,i8**%bY,align 8
%b0=load i8*,i8**%c,align 8
%b1=tail call fastcc i8*%bX(i8*inreg%bZ,i8*inreg%b0)
ret i8*%b1
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb5tupleE_692(i8*inreg%a)unnamed_addr#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=getelementptr inbounds i8,i8*%d,i64 -4
%f=bitcast i8*%e to i32*
store i32 1342177288,i32*%f,align 4
store i8*%d,i8**%c,align 8
%g=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%h=bitcast i8*%d to i8**
store i8*%g,i8**%h,align 8
%i=getelementptr inbounds i8,i8*%d,i64 8
%j=bitcast i8*%i to i32*
store i32 1,i32*%j,align 4
%k=call i8*@sml_alloc(i32 inreg 28)#0
%l=getelementptr inbounds i8,i8*%k,i64 -4
%m=bitcast i8*%l to i32*
store i32 1342177304,i32*%m,align 4
%n=load i8*,i8**%c,align 8
%o=bitcast i8*%k to i8**
store i8*%n,i8**%o,align 8
%p=getelementptr inbounds i8,i8*%k,i64 8
%q=bitcast i8*%p to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb5tupleE_691 to void(...)*),void(...)**%q,align 8
%r=getelementptr inbounds i8,i8*%k,i64 16
%s=bitcast i8*%r to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb5tupleE_691 to void(...)*),void(...)**%s,align 8
%t=getelementptr inbounds i8,i8*%k,i64 24
%u=bitcast i8*%t to i32*
store i32 -2147483647,i32*%u,align 4
ret i8*%k
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6tuple2E_694(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6tuple2E_696(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
n:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%l,label%j
j:
call void@sml_check(i32 inreg%h)
%k=load i8*,i8**%d,align 8
br label%l
l:
%m=phi i8*[%k,%j],[%a,%n]
%o=getelementptr inbounds i8,i8*%m,i64 12
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=add i32%q,-1
%s=sub i32 0,%q
%t=and i32%r,%s
%u=getelementptr inbounds i8,i8*%m,i64 20
%v=bitcast i8*%u to i32*
%w=load i32,i32*%v,align 4
%x=add i32%r,%w
%y=add i32%x,%t
%z=sub i32 0,%w
%A=and i32%y,%z
%B=call fastcc i8*@_SMLLN10TermFormat10FormatComb5tupleE_692(i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@be,i64 0,i32 2)to i8*))
%C=getelementptr inbounds i8,i8*%B,i64 16
%D=bitcast i8*%C to i8*(i8*,i8*)**
%E=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%D,align 8
%F=bitcast i8*%B to i8**
%G=load i8*,i8**%F,align 8
store i8*%G,i8**%g,align 8
%H=bitcast i8**%d to i8****
%I=load i8***,i8****%H,align 8
%J=load i8**,i8***%I,align 8
%K=load i8*,i8**%J,align 8
%L=getelementptr inbounds i8,i8*%K,i64 16
%M=bitcast i8*%L to i8*(i8*,i8*)**
%N=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%M,align 8
%O=bitcast i8*%K to i8**
%P=load i8*,i8**%O,align 8
store i8*%P,i8**%e,align 8
%Q=getelementptr inbounds i8**,i8***%I,i64 1
%R=bitcast i8***%Q to i32*
%S=load i32,i32*%R,align 4
%T=icmp eq i32%S,0
br i1%T,label%aa,label%U
U:
%V=load i8*,i8**%c,align 8
%W=sext i32%t to i64
%X=getelementptr inbounds i8,i8*%V,i64%W
%Y=bitcast i8*%X to i8**
%Z=load i8*,i8**%Y,align 8
br label%am
aa:
%ab=bitcast i8***%I to i8*
%ac=getelementptr inbounds i8,i8*%ab,i64 12
%ad=bitcast i8*%ac to i32*
%ae=load i32,i32*%ad,align 4
%af=call i8*@sml_alloc(i32 inreg%ae)#0
%ag=getelementptr inbounds i8,i8*%af,i64 -4
%ah=bitcast i8*%ag to i32*
store i32%ae,i32*%ah,align 4
%ai=load i8*,i8**%c,align 8
%aj=sext i32%t to i64
%ak=getelementptr inbounds i8,i8*%ai,i64%aj
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%af,i8*%ak,i32%ae,i1 false)
%al=load i8*,i8**%e,align 8
br label%am
am:
%an=phi i8*[%P,%U],[%al,%aa]
%ao=phi i8*[%Z,%U],[%af,%aa]
store i8*null,i8**%e,align 8
%ap=call fastcc i8*%N(i8*inreg%an,i8*inreg%ao)
store i8*%ap,i8**%e,align 8
%aq=bitcast i8**%d to i8***
%ar=load i8**,i8***%aq,align 8
%as=load i8*,i8**%ar,align 8
%at=getelementptr inbounds i8,i8*%as,i64 8
%au=bitcast i8*%at to i8**
%av=load i8*,i8**%au,align 8
%aw=getelementptr inbounds i8,i8*%av,i64 16
%ax=bitcast i8*%aw to i8*(i8*,i8*)**
%ay=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ax,align 8
%az=bitcast i8*%av to i8**
%aA=load i8*,i8**%az,align 8
store i8*%aA,i8**%f,align 8
%aB=getelementptr inbounds i8*,i8**%ar,i64 2
%aC=bitcast i8**%aB to i32*
%aD=load i32,i32*%aC,align 4
%aE=icmp eq i32%aD,0
store i8*null,i8**%d,align 8
br i1%aE,label%aL,label%aF
aF:
%aG=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aH=sext i32%A to i64
%aI=getelementptr inbounds i8,i8*%aG,i64%aH
%aJ=bitcast i8*%aI to i8**
%aK=load i8*,i8**%aJ,align 8
br label%aX
aL:
%aM=bitcast i8**%ar to i8*
%aN=getelementptr inbounds i8,i8*%aM,i64 20
%aO=bitcast i8*%aN to i32*
%aP=load i32,i32*%aO,align 4
%aQ=call i8*@sml_alloc(i32 inreg%aP)#0
%aR=getelementptr inbounds i8,i8*%aQ,i64 -4
%aS=bitcast i8*%aR to i32*
store i32%aP,i32*%aS,align 4
%aT=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aU=sext i32%A to i64
%aV=getelementptr inbounds i8,i8*%aT,i64%aU
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aQ,i8*%aV,i32%aP,i1 false)
%aW=load i8*,i8**%f,align 8
br label%aX
aX:
%aY=phi i8*[%aA,%aF],[%aW,%aL]
%aZ=phi i8*[%aK,%aF],[%aQ,%aL]
store i8*null,i8**%f,align 8
%a0=call fastcc i8*%ay(i8*inreg%aY,i8*inreg%aZ)
store i8*%a0,i8**%c,align 8
%a1=call i8*@sml_alloc(i32 inreg 20)#0
%a2=getelementptr inbounds i8,i8*%a1,i64 -4
%a3=bitcast i8*%a2 to i32*
store i32 1342177296,i32*%a3,align 4
%a4=load i8*,i8**%c,align 8
%a5=bitcast i8*%a1 to i8**
store i8*%a4,i8**%a5,align 8
%a6=getelementptr inbounds i8,i8*%a1,i64 8
%a7=bitcast i8*%a6 to i8**
store i8*null,i8**%a7,align 8
%a8=getelementptr inbounds i8,i8*%a1,i64 16
%a9=bitcast i8*%a8 to i32*
store i32 3,i32*%a9,align 4
store i8*null,i8**%d,align 8
%ba=call i8*@sml_alloc(i32 inreg 20)#0
%bb=getelementptr inbounds i8,i8*%ba,i64 -4
%bc=bitcast i8*%bb to i32*
store i32 1342177296,i32*%bc,align 4
store i8*%ba,i8**%f,align 8
%bd=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%be=bitcast i8*%ba to i8**
store i8*%bd,i8**%be,align 8
%bf=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bg=getelementptr inbounds i8,i8*%ba,i64 8
%bh=bitcast i8*%bg to i8**
store i8*%bf,i8**%bh,align 8
%bi=getelementptr inbounds i8,i8*%ba,i64 16
%bj=bitcast i8*%bi to i32*
store i32 3,i32*%bj,align 4
%bk=call i8*@sml_alloc(i32 inreg 20)#0
%bl=getelementptr inbounds i8,i8*%bk,i64 -4
%bm=bitcast i8*%bl to i32*
store i32 1342177296,i32*%bm,align 4
%bn=load i8*,i8**%e,align 8
%bo=bitcast i8*%bk to i8**
store i8*%bn,i8**%bo,align 8
%bp=load i8*,i8**%f,align 8
%bq=getelementptr inbounds i8,i8*%bk,i64 8
%br=bitcast i8*%bq to i8**
store i8*%bp,i8**%br,align 8
%bs=getelementptr inbounds i8,i8*%bk,i64 16
%bt=bitcast i8*%bs to i32*
store i32 3,i32*%bt,align 4
%bu=load i8*,i8**%g,align 8
%bv=tail call fastcc i8*%E(i8*inreg%bu,i8*inreg%bk)
ret i8*%bv
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6tuple2E_697(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i32*
%l=load i32,i32*%k,align 4
%m=getelementptr inbounds i8,i8*%a,i64 12
%n=bitcast i8*%m to i32*
%o=load i32,i32*%n,align 4
%p=call i8*@sml_alloc(i32 inreg 28)#0
%q=getelementptr inbounds i8,i8*%p,i64 -4
%r=bitcast i8*%q to i32*
store i32 1342177304,i32*%r,align 4
store i8*%p,i8**%d,align 8
%s=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8*%p to i8**
store i8*%s,i8**%t,align 8
%u=getelementptr inbounds i8,i8*%p,i64 8
%v=bitcast i8*%u to i32*
store i32%f,i32*%v,align 4
%w=getelementptr inbounds i8,i8*%p,i64 12
%x=bitcast i8*%w to i32*
store i32%i,i32*%x,align 4
%y=getelementptr inbounds i8,i8*%p,i64 16
%z=bitcast i8*%y to i32*
store i32%l,i32*%z,align 4
%A=getelementptr inbounds i8,i8*%p,i64 20
%B=bitcast i8*%A to i32*
store i32%o,i32*%B,align 4
%C=getelementptr inbounds i8,i8*%p,i64 24
%D=bitcast i8*%C to i32*
store i32 1,i32*%D,align 4
%E=call i8*@sml_alloc(i32 inreg 28)#0
%F=getelementptr inbounds i8,i8*%E,i64 -4
%G=bitcast i8*%F to i32*
store i32 1342177304,i32*%G,align 4
%H=load i8*,i8**%d,align 8
%I=bitcast i8*%E to i8**
store i8*%H,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%E,i64 8
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6tuple2E_696 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%E,i64 16
%M=bitcast i8*%L to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6tuple2E_696 to void(...)*),void(...)**%M,align 8
%N=getelementptr inbounds i8,i8*%E,i64 24
%O=bitcast i8*%N to i32*
store i32 -2147483647,i32*%O,align 4
ret i8*%E
}
define fastcc i8*@_SMLFN10TermFormat10FormatComb6tuple2E(i32 inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d)#4 gc"smlsharp"{
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=call i8*@sml_alloc(i32 inreg 20)#0
%g=bitcast i8*%f to i32*
%h=getelementptr inbounds i8,i8*%f,i64 -4
%i=bitcast i8*%h to i32*
store i32 1342177296,i32*%i,align 4
store i8*%f,i8**%e,align 8
store i32%a,i32*%g,align 4
%j=getelementptr inbounds i8,i8*%f,i64 4
%k=bitcast i8*%j to i32*
store i32%b,i32*%k,align 4
%l=getelementptr inbounds i8,i8*%f,i64 8
%m=bitcast i8*%l to i32*
store i32%c,i32*%m,align 4
%n=getelementptr inbounds i8,i8*%f,i64 12
%o=bitcast i8*%n to i32*
store i32%d,i32*%o,align 4
%p=getelementptr inbounds i8,i8*%f,i64 16
%q=bitcast i8*%p to i32*
store i32 0,i32*%q,align 4
%r=call i8*@sml_alloc(i32 inreg 28)#0
%s=getelementptr inbounds i8,i8*%r,i64 -4
%t=bitcast i8*%s to i32*
store i32 1342177304,i32*%t,align 4
%u=load i8*,i8**%e,align 8
%v=bitcast i8*%r to i8**
store i8*%u,i8**%v,align 8
%w=getelementptr inbounds i8,i8*%r,i64 8
%x=bitcast i8*%w to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6tuple2E_697 to void(...)*),void(...)**%x,align 8
%y=getelementptr inbounds i8,i8*%r,i64 16
%z=bitcast i8*%y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6tuple2E_697 to void(...)*),void(...)**%z,align 8
%A=getelementptr inbounds i8,i8*%r,i64 24
%B=bitcast i8*%A to i32*
store i32 -2147483647,i32*%B,align 4
ret i8*%r
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6tuple3E_700(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6tuple3E_702(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
o:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%m,label%k
k:
call void@sml_check(i32 inreg%i)
%l=load i8*,i8**%d,align 8
br label%m
m:
%n=phi i8*[%l,%k],[%a,%o]
%p=getelementptr inbounds i8,i8*%n,i64 12
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=add i32%r,-1
%t=sub i32 0,%r
%u=and i32%s,%t
%v=getelementptr inbounds i8,i8*%n,i64 20
%w=bitcast i8*%v to i32*
%x=load i32,i32*%w,align 4
%y=add i32%s,%x
%z=add i32%y,%u
%A=sub i32 0,%x
%B=and i32%z,%A
%C=getelementptr inbounds i8,i8*%n,i64 28
%D=bitcast i8*%C to i32*
%E=load i32,i32*%D,align 4
%F=add i32%x,-1
%G=add i32%F,%E
%H=add i32%G,%B
%I=sub i32 0,%E
%J=and i32%H,%I
%K=call fastcc i8*@_SMLLN10TermFormat10FormatComb5tupleE_692(i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bg,i64 0,i32 2)to i8*))
%L=getelementptr inbounds i8,i8*%K,i64 16
%M=bitcast i8*%L to i8*(i8*,i8*)**
%N=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%M,align 8
%O=bitcast i8*%K to i8**
%P=load i8*,i8**%O,align 8
store i8*%P,i8**%h,align 8
%Q=bitcast i8**%d to i8****
%R=load i8***,i8****%Q,align 8
%S=load i8**,i8***%R,align 8
%T=load i8*,i8**%S,align 8
%U=getelementptr inbounds i8,i8*%T,i64 16
%V=bitcast i8*%U to i8*(i8*,i8*)**
%W=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%V,align 8
%X=bitcast i8*%T to i8**
%Y=load i8*,i8**%X,align 8
store i8*%Y,i8**%e,align 8
%Z=getelementptr inbounds i8**,i8***%R,i64 1
%aa=bitcast i8***%Z to i32*
%ab=load i32,i32*%aa,align 4
%ac=icmp eq i32%ab,0
br i1%ac,label%aj,label%ad
ad:
%ae=load i8*,i8**%c,align 8
%af=sext i32%u to i64
%ag=getelementptr inbounds i8,i8*%ae,i64%af
%ah=bitcast i8*%ag to i8**
%ai=load i8*,i8**%ah,align 8
br label%av
aj:
%ak=bitcast i8***%R to i8*
%al=getelementptr inbounds i8,i8*%ak,i64 12
%am=bitcast i8*%al to i32*
%an=load i32,i32*%am,align 4
%ao=call i8*@sml_alloc(i32 inreg%an)#0
%ap=getelementptr inbounds i8,i8*%ao,i64 -4
%aq=bitcast i8*%ap to i32*
store i32%an,i32*%aq,align 4
%ar=load i8*,i8**%c,align 8
%as=sext i32%u to i64
%at=getelementptr inbounds i8,i8*%ar,i64%as
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ao,i8*%at,i32%an,i1 false)
%au=load i8*,i8**%e,align 8
br label%av
av:
%aw=phi i8*[%Y,%ad],[%au,%aj]
%ax=phi i8*[%ai,%ad],[%ao,%aj]
store i8*null,i8**%e,align 8
%ay=call fastcc i8*%W(i8*inreg%aw,i8*inreg%ax)
store i8*%ay,i8**%f,align 8
%az=bitcast i8**%d to i8***
%aA=load i8**,i8***%az,align 8
%aB=load i8*,i8**%aA,align 8
%aC=getelementptr inbounds i8,i8*%aB,i64 8
%aD=bitcast i8*%aC to i8**
%aE=load i8*,i8**%aD,align 8
%aF=getelementptr inbounds i8,i8*%aE,i64 16
%aG=bitcast i8*%aF to i8*(i8*,i8*)**
%aH=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aG,align 8
%aI=bitcast i8*%aE to i8**
%aJ=load i8*,i8**%aI,align 8
store i8*%aJ,i8**%e,align 8
%aK=getelementptr inbounds i8*,i8**%aA,i64 2
%aL=bitcast i8**%aK to i32*
%aM=load i32,i32*%aL,align 4
%aN=icmp eq i32%aM,0
br i1%aN,label%aU,label%aO
aO:
%aP=load i8*,i8**%c,align 8
%aQ=sext i32%B to i64
%aR=getelementptr inbounds i8,i8*%aP,i64%aQ
%aS=bitcast i8*%aR to i8**
%aT=load i8*,i8**%aS,align 8
br label%a6
aU:
%aV=bitcast i8**%aA to i8*
%aW=getelementptr inbounds i8,i8*%aV,i64 20
%aX=bitcast i8*%aW to i32*
%aY=load i32,i32*%aX,align 4
%aZ=call i8*@sml_alloc(i32 inreg%aY)#0
%a0=getelementptr inbounds i8,i8*%aZ,i64 -4
%a1=bitcast i8*%a0 to i32*
store i32%aY,i32*%a1,align 4
%a2=load i8*,i8**%c,align 8
%a3=sext i32%B to i64
%a4=getelementptr inbounds i8,i8*%a2,i64%a3
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%aZ,i8*%a4,i32%aY,i1 false)
%a5=load i8*,i8**%e,align 8
br label%a6
a6:
%a7=phi i8*[%aJ,%aO],[%a5,%aU]
%a8=phi i8*[%aT,%aO],[%aZ,%aU]
store i8*null,i8**%e,align 8
%a9=call fastcc i8*%aH(i8*inreg%a7,i8*inreg%a8)
store i8*%a9,i8**%e,align 8
%ba=load i8**,i8***%az,align 8
%bb=load i8*,i8**%ba,align 8
%bc=getelementptr inbounds i8,i8*%bb,i64 16
%bd=bitcast i8*%bc to i8**
%be=load i8*,i8**%bd,align 8
%bf=getelementptr inbounds i8,i8*%be,i64 16
%bg=bitcast i8*%bf to i8*(i8*,i8*)**
%bh=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bg,align 8
%bi=bitcast i8*%be to i8**
%bj=load i8*,i8**%bi,align 8
store i8*%bj,i8**%g,align 8
%bk=getelementptr inbounds i8*,i8**%ba,i64 3
%bl=bitcast i8**%bk to i32*
%bm=load i32,i32*%bl,align 4
%bn=icmp eq i32%bm,0
store i8*null,i8**%d,align 8
br i1%bn,label%bu,label%bo
bo:
%bp=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bq=sext i32%J to i64
%br=getelementptr inbounds i8,i8*%bp,i64%bq
%bs=bitcast i8*%br to i8**
%bt=load i8*,i8**%bs,align 8
br label%bG
bu:
%bv=bitcast i8**%ba to i8*
%bw=getelementptr inbounds i8,i8*%bv,i64 28
%bx=bitcast i8*%bw to i32*
%by=load i32,i32*%bx,align 4
%bz=call i8*@sml_alloc(i32 inreg%by)#0
%bA=getelementptr inbounds i8,i8*%bz,i64 -4
%bB=bitcast i8*%bA to i32*
store i32%by,i32*%bB,align 4
%bC=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bD=sext i32%J to i64
%bE=getelementptr inbounds i8,i8*%bC,i64%bD
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bz,i8*%bE,i32%by,i1 false)
%bF=load i8*,i8**%g,align 8
br label%bG
bG:
%bH=phi i8*[%bj,%bo],[%bF,%bu]
%bI=phi i8*[%bt,%bo],[%bz,%bu]
store i8*null,i8**%g,align 8
%bJ=call fastcc i8*%bh(i8*inreg%bH,i8*inreg%bI)
store i8*%bJ,i8**%c,align 8
%bK=call i8*@sml_alloc(i32 inreg 20)#0
%bL=getelementptr inbounds i8,i8*%bK,i64 -4
%bM=bitcast i8*%bL to i32*
store i32 1342177296,i32*%bM,align 4
%bN=load i8*,i8**%c,align 8
%bO=bitcast i8*%bK to i8**
store i8*%bN,i8**%bO,align 8
%bP=getelementptr inbounds i8,i8*%bK,i64 8
%bQ=bitcast i8*%bP to i8**
store i8*null,i8**%bQ,align 8
%bR=getelementptr inbounds i8,i8*%bK,i64 16
%bS=bitcast i8*%bR to i32*
store i32 3,i32*%bS,align 4
store i8*null,i8**%d,align 8
%bT=call i8*@sml_alloc(i32 inreg 20)#0
%bU=getelementptr inbounds i8,i8*%bT,i64 -4
%bV=bitcast i8*%bU to i32*
store i32 1342177296,i32*%bV,align 4
store i8*%bT,i8**%g,align 8
%bW=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bX=bitcast i8*%bT to i8**
store i8*%bW,i8**%bX,align 8
%bY=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%bZ=getelementptr inbounds i8,i8*%bT,i64 8
%b0=bitcast i8*%bZ to i8**
store i8*%bY,i8**%b0,align 8
%b1=getelementptr inbounds i8,i8*%bT,i64 16
%b2=bitcast i8*%b1 to i32*
store i32 3,i32*%b2,align 4
%b3=call i8*@sml_alloc(i32 inreg 20)#0
%b4=getelementptr inbounds i8,i8*%b3,i64 -4
%b5=bitcast i8*%b4 to i32*
store i32 1342177296,i32*%b5,align 4
store i8*%b3,i8**%c,align 8
%b6=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%b7=bitcast i8*%b3 to i8**
store i8*%b6,i8**%b7,align 8
%b8=load i8*,i8**%g,align 8
store i8*null,i8**%g,align 8
%b9=getelementptr inbounds i8,i8*%b3,i64 8
%ca=bitcast i8*%b9 to i8**
store i8*%b8,i8**%ca,align 8
%cb=getelementptr inbounds i8,i8*%b3,i64 16
%cc=bitcast i8*%cb to i32*
store i32 3,i32*%cc,align 4
%cd=call i8*@sml_alloc(i32 inreg 20)#0
%ce=getelementptr inbounds i8,i8*%cd,i64 -4
%cf=bitcast i8*%ce to i32*
store i32 1342177296,i32*%cf,align 4
%cg=load i8*,i8**%f,align 8
%ch=bitcast i8*%cd to i8**
store i8*%cg,i8**%ch,align 8
%ci=load i8*,i8**%c,align 8
%cj=getelementptr inbounds i8,i8*%cd,i64 8
%ck=bitcast i8*%cj to i8**
store i8*%ci,i8**%ck,align 8
%cl=getelementptr inbounds i8,i8*%cd,i64 16
%cm=bitcast i8*%cl to i32*
store i32 3,i32*%cm,align 4
%cn=load i8*,i8**%h,align 8
%co=tail call fastcc i8*%N(i8*inreg%cn,i8*inreg%cd)
ret i8*%co
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6tuple3E_703(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i32*
%l=load i32,i32*%k,align 4
%m=getelementptr inbounds i8,i8*%a,i64 12
%n=bitcast i8*%m to i32*
%o=load i32,i32*%n,align 4
%p=getelementptr inbounds i8,i8*%a,i64 16
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=getelementptr inbounds i8,i8*%a,i64 20
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=call i8*@sml_alloc(i32 inreg 36)#0
%w=getelementptr inbounds i8,i8*%v,i64 -4
%x=bitcast i8*%w to i32*
store i32 1342177312,i32*%x,align 4
store i8*%v,i8**%d,align 8
%y=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%z=bitcast i8*%v to i8**
store i8*%y,i8**%z,align 8
%A=getelementptr inbounds i8,i8*%v,i64 8
%B=bitcast i8*%A to i32*
store i32%f,i32*%B,align 4
%C=getelementptr inbounds i8,i8*%v,i64 12
%D=bitcast i8*%C to i32*
store i32%i,i32*%D,align 4
%E=getelementptr inbounds i8,i8*%v,i64 16
%F=bitcast i8*%E to i32*
store i32%l,i32*%F,align 4
%G=getelementptr inbounds i8,i8*%v,i64 20
%H=bitcast i8*%G to i32*
store i32%o,i32*%H,align 4
%I=getelementptr inbounds i8,i8*%v,i64 24
%J=bitcast i8*%I to i32*
store i32%r,i32*%J,align 4
%K=getelementptr inbounds i8,i8*%v,i64 28
%L=bitcast i8*%K to i32*
store i32%u,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%v,i64 32
%N=bitcast i8*%M to i32*
store i32 1,i32*%N,align 4
%O=call i8*@sml_alloc(i32 inreg 28)#0
%P=getelementptr inbounds i8,i8*%O,i64 -4
%Q=bitcast i8*%P to i32*
store i32 1342177304,i32*%Q,align 4
%R=load i8*,i8**%d,align 8
%S=bitcast i8*%O to i8**
store i8*%R,i8**%S,align 8
%T=getelementptr inbounds i8,i8*%O,i64 8
%U=bitcast i8*%T to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6tuple3E_702 to void(...)*),void(...)**%U,align 8
%V=getelementptr inbounds i8,i8*%O,i64 16
%W=bitcast i8*%V to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6tuple3E_702 to void(...)*),void(...)**%W,align 8
%X=getelementptr inbounds i8,i8*%O,i64 24
%Y=bitcast i8*%X to i32*
store i32 -2147483647,i32*%Y,align 4
ret i8*%O
}
define fastcc i8*@_SMLFN10TermFormat10FormatComb6tuple3E(i32 inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e,i32 inreg%f)#4 gc"smlsharp"{
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%g,i8*null)#0
%h=call i8*@sml_alloc(i32 inreg 28)#0
%i=bitcast i8*%h to i32*
%j=getelementptr inbounds i8,i8*%h,i64 -4
%k=bitcast i8*%j to i32*
store i32 1342177304,i32*%k,align 4
store i8*%h,i8**%g,align 8
store i32%a,i32*%i,align 4
%l=getelementptr inbounds i8,i8*%h,i64 4
%m=bitcast i8*%l to i32*
store i32%b,i32*%m,align 4
%n=getelementptr inbounds i8,i8*%h,i64 8
%o=bitcast i8*%n to i32*
store i32%c,i32*%o,align 4
%p=getelementptr inbounds i8,i8*%h,i64 12
%q=bitcast i8*%p to i32*
store i32%d,i32*%q,align 4
%r=getelementptr inbounds i8,i8*%h,i64 16
%s=bitcast i8*%r to i32*
store i32%e,i32*%s,align 4
%t=getelementptr inbounds i8,i8*%h,i64 20
%u=bitcast i8*%t to i32*
store i32%f,i32*%u,align 4
%v=getelementptr inbounds i8,i8*%h,i64 24
%w=bitcast i8*%v to i32*
store i32 0,i32*%w,align 4
%x=call i8*@sml_alloc(i32 inreg 28)#0
%y=getelementptr inbounds i8,i8*%x,i64 -4
%z=bitcast i8*%y to i32*
store i32 1342177304,i32*%z,align 4
%A=load i8*,i8**%g,align 8
%B=bitcast i8*%x to i8**
store i8*%A,i8**%B,align 8
%C=getelementptr inbounds i8,i8*%x,i64 8
%D=bitcast i8*%C to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6tuple3E_703 to void(...)*),void(...)**%D,align 8
%E=getelementptr inbounds i8,i8*%x,i64 16
%F=bitcast i8*%E to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6tuple3E_703 to void(...)*),void(...)**%F,align 8
%G=getelementptr inbounds i8,i8*%x,i64 24
%H=bitcast i8*%G to i32*
store i32 -2147483647,i32*%H,align 4
ret i8*%x
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6tuple4E_706(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6tuple4E_708(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
p:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
%i=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
call void@llvm.gcroot(i8**%i,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%j=load atomic i32,i32*@sml_check_flag unordered,align 4
%k=icmp eq i32%j,0
br i1%k,label%n,label%l
l:
call void@sml_check(i32 inreg%j)
%m=load i8*,i8**%d,align 8
br label%n
n:
%o=phi i8*[%m,%l],[%a,%p]
%q=getelementptr inbounds i8,i8*%o,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=add i32%s,-1
%u=sub i32 0,%s
%v=and i32%t,%u
%w=getelementptr inbounds i8,i8*%o,i64 20
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
%z=add i32%t,%y
%A=add i32%z,%v
%B=sub i32 0,%y
%C=and i32%A,%B
%D=getelementptr inbounds i8,i8*%o,i64 28
%E=bitcast i8*%D to i32*
%F=load i32,i32*%E,align 4
%G=add i32%y,-1
%H=add i32%G,%F
%I=add i32%H,%C
%J=sub i32 0,%F
%K=and i32%I,%J
%L=getelementptr inbounds i8,i8*%o,i64 36
%M=bitcast i8*%L to i32*
%N=load i32,i32*%M,align 4
%O=add i32%F,-1
%P=add i32%O,%N
%Q=add i32%P,%K
%R=sub i32 0,%N
%S=and i32%Q,%R
%T=call fastcc i8*@_SMLLN10TermFormat10FormatComb5tupleE_692(i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bi,i64 0,i32 2)to i8*))
%U=getelementptr inbounds i8,i8*%T,i64 16
%V=bitcast i8*%U to i8*(i8*,i8*)**
%W=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%V,align 8
%X=bitcast i8*%T to i8**
%Y=load i8*,i8**%X,align 8
store i8*%Y,i8**%i,align 8
%Z=bitcast i8**%d to i8****
%aa=load i8***,i8****%Z,align 8
%ab=load i8**,i8***%aa,align 8
%ac=load i8*,i8**%ab,align 8
%ad=getelementptr inbounds i8,i8*%ac,i64 16
%ae=bitcast i8*%ad to i8*(i8*,i8*)**
%af=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ae,align 8
%ag=bitcast i8*%ac to i8**
%ah=load i8*,i8**%ag,align 8
store i8*%ah,i8**%e,align 8
%ai=getelementptr inbounds i8**,i8***%aa,i64 1
%aj=bitcast i8***%ai to i32*
%ak=load i32,i32*%aj,align 4
%al=icmp eq i32%ak,0
br i1%al,label%as,label%am
am:
%an=load i8*,i8**%c,align 8
%ao=sext i32%v to i64
%ap=getelementptr inbounds i8,i8*%an,i64%ao
%aq=bitcast i8*%ap to i8**
%ar=load i8*,i8**%aq,align 8
br label%aE
as:
%at=bitcast i8***%aa to i8*
%au=getelementptr inbounds i8,i8*%at,i64 12
%av=bitcast i8*%au to i32*
%aw=load i32,i32*%av,align 4
%ax=call i8*@sml_alloc(i32 inreg%aw)#0
%ay=getelementptr inbounds i8,i8*%ax,i64 -4
%az=bitcast i8*%ay to i32*
store i32%aw,i32*%az,align 4
%aA=load i8*,i8**%c,align 8
%aB=sext i32%v to i64
%aC=getelementptr inbounds i8,i8*%aA,i64%aB
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ax,i8*%aC,i32%aw,i1 false)
%aD=load i8*,i8**%e,align 8
br label%aE
aE:
%aF=phi i8*[%ah,%am],[%aD,%as]
%aG=phi i8*[%ar,%am],[%ax,%as]
store i8*null,i8**%e,align 8
%aH=call fastcc i8*%af(i8*inreg%aF,i8*inreg%aG)
store i8*%aH,i8**%g,align 8
%aI=bitcast i8**%d to i8***
%aJ=load i8**,i8***%aI,align 8
%aK=load i8*,i8**%aJ,align 8
%aL=getelementptr inbounds i8,i8*%aK,i64 8
%aM=bitcast i8*%aL to i8**
%aN=load i8*,i8**%aM,align 8
%aO=getelementptr inbounds i8,i8*%aN,i64 16
%aP=bitcast i8*%aO to i8*(i8*,i8*)**
%aQ=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aP,align 8
%aR=bitcast i8*%aN to i8**
%aS=load i8*,i8**%aR,align 8
store i8*%aS,i8**%e,align 8
%aT=getelementptr inbounds i8*,i8**%aJ,i64 2
%aU=bitcast i8**%aT to i32*
%aV=load i32,i32*%aU,align 4
%aW=icmp eq i32%aV,0
br i1%aW,label%a3,label%aX
aX:
%aY=load i8*,i8**%c,align 8
%aZ=sext i32%C to i64
%a0=getelementptr inbounds i8,i8*%aY,i64%aZ
%a1=bitcast i8*%a0 to i8**
%a2=load i8*,i8**%a1,align 8
br label%bf
a3:
%a4=bitcast i8**%aJ to i8*
%a5=getelementptr inbounds i8,i8*%a4,i64 20
%a6=bitcast i8*%a5 to i32*
%a7=load i32,i32*%a6,align 4
%a8=call i8*@sml_alloc(i32 inreg%a7)#0
%a9=getelementptr inbounds i8,i8*%a8,i64 -4
%ba=bitcast i8*%a9 to i32*
store i32%a7,i32*%ba,align 4
%bb=load i8*,i8**%c,align 8
%bc=sext i32%C to i64
%bd=getelementptr inbounds i8,i8*%bb,i64%bc
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%a8,i8*%bd,i32%a7,i1 false)
%be=load i8*,i8**%e,align 8
br label%bf
bf:
%bg=phi i8*[%aS,%aX],[%be,%a3]
%bh=phi i8*[%a2,%aX],[%a8,%a3]
store i8*null,i8**%e,align 8
%bi=call fastcc i8*%aQ(i8*inreg%bg,i8*inreg%bh)
store i8*%bi,i8**%f,align 8
%bj=load i8**,i8***%aI,align 8
%bk=load i8*,i8**%bj,align 8
%bl=getelementptr inbounds i8,i8*%bk,i64 16
%bm=bitcast i8*%bl to i8**
%bn=load i8*,i8**%bm,align 8
%bo=getelementptr inbounds i8,i8*%bn,i64 16
%bp=bitcast i8*%bo to i8*(i8*,i8*)**
%bq=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bp,align 8
%br=bitcast i8*%bn to i8**
%bs=load i8*,i8**%br,align 8
store i8*%bs,i8**%e,align 8
%bt=getelementptr inbounds i8*,i8**%bj,i64 3
%bu=bitcast i8**%bt to i32*
%bv=load i32,i32*%bu,align 4
%bw=icmp eq i32%bv,0
br i1%bw,label%bD,label%bx
bx:
%by=load i8*,i8**%c,align 8
%bz=sext i32%K to i64
%bA=getelementptr inbounds i8,i8*%by,i64%bz
%bB=bitcast i8*%bA to i8**
%bC=load i8*,i8**%bB,align 8
br label%bP
bD:
%bE=bitcast i8**%bj to i8*
%bF=getelementptr inbounds i8,i8*%bE,i64 28
%bG=bitcast i8*%bF to i32*
%bH=load i32,i32*%bG,align 4
%bI=call i8*@sml_alloc(i32 inreg%bH)#0
%bJ=getelementptr inbounds i8,i8*%bI,i64 -4
%bK=bitcast i8*%bJ to i32*
store i32%bH,i32*%bK,align 4
%bL=load i8*,i8**%c,align 8
%bM=sext i32%K to i64
%bN=getelementptr inbounds i8,i8*%bL,i64%bM
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%bI,i8*%bN,i32%bH,i1 false)
%bO=load i8*,i8**%e,align 8
br label%bP
bP:
%bQ=phi i8*[%bs,%bx],[%bO,%bD]
%bR=phi i8*[%bC,%bx],[%bI,%bD]
store i8*null,i8**%e,align 8
%bS=call fastcc i8*%bq(i8*inreg%bQ,i8*inreg%bR)
store i8*%bS,i8**%e,align 8
%bT=load i8**,i8***%aI,align 8
%bU=load i8*,i8**%bT,align 8
%bV=getelementptr inbounds i8,i8*%bU,i64 24
%bW=bitcast i8*%bV to i8**
%bX=load i8*,i8**%bW,align 8
%bY=getelementptr inbounds i8,i8*%bX,i64 16
%bZ=bitcast i8*%bY to i8*(i8*,i8*)**
%b0=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%bZ,align 8
%b1=bitcast i8*%bX to i8**
%b2=load i8*,i8**%b1,align 8
store i8*%b2,i8**%h,align 8
%b3=getelementptr inbounds i8*,i8**%bT,i64 4
%b4=bitcast i8**%b3 to i32*
%b5=load i32,i32*%b4,align 4
%b6=icmp eq i32%b5,0
store i8*null,i8**%d,align 8
br i1%b6,label%cd,label%b7
b7:
%b8=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%b9=sext i32%S to i64
%ca=getelementptr inbounds i8,i8*%b8,i64%b9
%cb=bitcast i8*%ca to i8**
%cc=load i8*,i8**%cb,align 8
br label%cp
cd:
%ce=bitcast i8**%bT to i8*
%cf=getelementptr inbounds i8,i8*%ce,i64 36
%cg=bitcast i8*%cf to i32*
%ch=load i32,i32*%cg,align 4
%ci=call i8*@sml_alloc(i32 inreg%ch)#0
%cj=getelementptr inbounds i8,i8*%ci,i64 -4
%ck=bitcast i8*%cj to i32*
store i32%ch,i32*%ck,align 4
%cl=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cm=sext i32%S to i64
%cn=getelementptr inbounds i8,i8*%cl,i64%cm
call void@llvm.memcpy.p0i8.p0i8.i32(i8*%ci,i8*%cn,i32%ch,i1 false)
%co=load i8*,i8**%h,align 8
br label%cp
cp:
%cq=phi i8*[%b2,%b7],[%co,%cd]
%cr=phi i8*[%cc,%b7],[%ci,%cd]
store i8*null,i8**%h,align 8
%cs=call fastcc i8*%b0(i8*inreg%cq,i8*inreg%cr)
store i8*%cs,i8**%c,align 8
%ct=call i8*@sml_alloc(i32 inreg 20)#0
%cu=getelementptr inbounds i8,i8*%ct,i64 -4
%cv=bitcast i8*%cu to i32*
store i32 1342177296,i32*%cv,align 4
%cw=load i8*,i8**%c,align 8
%cx=bitcast i8*%ct to i8**
store i8*%cw,i8**%cx,align 8
%cy=getelementptr inbounds i8,i8*%ct,i64 8
%cz=bitcast i8*%cy to i8**
store i8*null,i8**%cz,align 8
%cA=getelementptr inbounds i8,i8*%ct,i64 16
%cB=bitcast i8*%cA to i32*
store i32 3,i32*%cB,align 4
store i8*null,i8**%d,align 8
%cC=call i8*@sml_alloc(i32 inreg 20)#0
%cD=getelementptr inbounds i8,i8*%cC,i64 -4
%cE=bitcast i8*%cD to i32*
store i32 1342177296,i32*%cE,align 4
store i8*%cC,i8**%h,align 8
%cF=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cG=bitcast i8*%cC to i8**
store i8*%cF,i8**%cG,align 8
%cH=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%cI=getelementptr inbounds i8,i8*%cC,i64 8
%cJ=bitcast i8*%cI to i8**
store i8*%cH,i8**%cJ,align 8
%cK=getelementptr inbounds i8,i8*%cC,i64 16
%cL=bitcast i8*%cK to i32*
store i32 3,i32*%cL,align 4
%cM=call i8*@sml_alloc(i32 inreg 20)#0
%cN=getelementptr inbounds i8,i8*%cM,i64 -4
%cO=bitcast i8*%cN to i32*
store i32 1342177296,i32*%cO,align 4
store i8*%cM,i8**%c,align 8
%cP=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%cQ=bitcast i8*%cM to i8**
store i8*%cP,i8**%cQ,align 8
%cR=load i8*,i8**%h,align 8
store i8*null,i8**%h,align 8
%cS=getelementptr inbounds i8,i8*%cM,i64 8
%cT=bitcast i8*%cS to i8**
store i8*%cR,i8**%cT,align 8
%cU=getelementptr inbounds i8,i8*%cM,i64 16
%cV=bitcast i8*%cU to i32*
store i32 3,i32*%cV,align 4
%cW=call i8*@sml_alloc(i32 inreg 20)#0
%cX=getelementptr inbounds i8,i8*%cW,i64 -4
%cY=bitcast i8*%cX to i32*
store i32 1342177296,i32*%cY,align 4
store i8*%cW,i8**%d,align 8
%cZ=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%c0=bitcast i8*%cW to i8**
store i8*%cZ,i8**%c0,align 8
%c1=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%c2=getelementptr inbounds i8,i8*%cW,i64 8
%c3=bitcast i8*%c2 to i8**
store i8*%c1,i8**%c3,align 8
%c4=getelementptr inbounds i8,i8*%cW,i64 16
%c5=bitcast i8*%c4 to i32*
store i32 3,i32*%c5,align 4
%c6=call i8*@sml_alloc(i32 inreg 20)#0
%c7=getelementptr inbounds i8,i8*%c6,i64 -4
%c8=bitcast i8*%c7 to i32*
store i32 1342177296,i32*%c8,align 4
%c9=load i8*,i8**%g,align 8
%da=bitcast i8*%c6 to i8**
store i8*%c9,i8**%da,align 8
%db=load i8*,i8**%d,align 8
%dc=getelementptr inbounds i8,i8*%c6,i64 8
%dd=bitcast i8*%dc to i8**
store i8*%db,i8**%dd,align 8
%de=getelementptr inbounds i8,i8*%c6,i64 16
%df=bitcast i8*%de to i32*
store i32 3,i32*%df,align 4
%dg=load i8*,i8**%i,align 8
%dh=tail call fastcc i8*%W(i8*inreg%dg,i8*inreg%c6)
ret i8*%dh
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6tuple4E_709(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=getelementptr inbounds i8,i8*%a,i64 8
%k=bitcast i8*%j to i32*
%l=load i32,i32*%k,align 4
%m=getelementptr inbounds i8,i8*%a,i64 12
%n=bitcast i8*%m to i32*
%o=load i32,i32*%n,align 4
%p=getelementptr inbounds i8,i8*%a,i64 16
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=getelementptr inbounds i8,i8*%a,i64 20
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=getelementptr inbounds i8,i8*%a,i64 24
%w=bitcast i8*%v to i32*
%x=load i32,i32*%w,align 4
%y=getelementptr inbounds i8,i8*%a,i64 28
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=call i8*@sml_alloc(i32 inreg 44)#0
%C=getelementptr inbounds i8,i8*%B,i64 -4
%D=bitcast i8*%C to i32*
store i32 1342177320,i32*%D,align 4
store i8*%B,i8**%d,align 8
%E=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%F=bitcast i8*%B to i8**
store i8*%E,i8**%F,align 8
%G=getelementptr inbounds i8,i8*%B,i64 8
%H=bitcast i8*%G to i32*
store i32%f,i32*%H,align 4
%I=getelementptr inbounds i8,i8*%B,i64 12
%J=bitcast i8*%I to i32*
store i32%i,i32*%J,align 4
%K=getelementptr inbounds i8,i8*%B,i64 16
%L=bitcast i8*%K to i32*
store i32%l,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%B,i64 20
%N=bitcast i8*%M to i32*
store i32%o,i32*%N,align 4
%O=getelementptr inbounds i8,i8*%B,i64 24
%P=bitcast i8*%O to i32*
store i32%r,i32*%P,align 4
%Q=getelementptr inbounds i8,i8*%B,i64 28
%R=bitcast i8*%Q to i32*
store i32%u,i32*%R,align 4
%S=getelementptr inbounds i8,i8*%B,i64 32
%T=bitcast i8*%S to i32*
store i32%x,i32*%T,align 4
%U=getelementptr inbounds i8,i8*%B,i64 36
%V=bitcast i8*%U to i32*
store i32%A,i32*%V,align 4
%W=getelementptr inbounds i8,i8*%B,i64 40
%X=bitcast i8*%W to i32*
store i32 1,i32*%X,align 4
%Y=call i8*@sml_alloc(i32 inreg 28)#0
%Z=getelementptr inbounds i8,i8*%Y,i64 -4
%aa=bitcast i8*%Z to i32*
store i32 1342177304,i32*%aa,align 4
%ab=load i8*,i8**%d,align 8
%ac=bitcast i8*%Y to i8**
store i8*%ab,i8**%ac,align 8
%ad=getelementptr inbounds i8,i8*%Y,i64 8
%ae=bitcast i8*%ad to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6tuple4E_708 to void(...)*),void(...)**%ae,align 8
%af=getelementptr inbounds i8,i8*%Y,i64 16
%ag=bitcast i8*%af to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6tuple4E_708 to void(...)*),void(...)**%ag,align 8
%ah=getelementptr inbounds i8,i8*%Y,i64 24
%ai=bitcast i8*%ah to i32*
store i32 -2147483647,i32*%ai,align 4
ret i8*%Y
}
define fastcc i8*@_SMLFN10TermFormat10FormatComb6tuple4E(i32 inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e,i32 inreg%f,i32 inreg%g,i32 inreg%h)#4 gc"smlsharp"{
%i=alloca i8*,align 8
call void@llvm.gcroot(i8**%i,i8*null)#0
%j=call i8*@sml_alloc(i32 inreg 36)#0
%k=bitcast i8*%j to i32*
%l=getelementptr inbounds i8,i8*%j,i64 -4
%m=bitcast i8*%l to i32*
store i32 1342177312,i32*%m,align 4
store i8*%j,i8**%i,align 8
store i32%a,i32*%k,align 4
%n=getelementptr inbounds i8,i8*%j,i64 4
%o=bitcast i8*%n to i32*
store i32%b,i32*%o,align 4
%p=getelementptr inbounds i8,i8*%j,i64 8
%q=bitcast i8*%p to i32*
store i32%c,i32*%q,align 4
%r=getelementptr inbounds i8,i8*%j,i64 12
%s=bitcast i8*%r to i32*
store i32%d,i32*%s,align 4
%t=getelementptr inbounds i8,i8*%j,i64 16
%u=bitcast i8*%t to i32*
store i32%e,i32*%u,align 4
%v=getelementptr inbounds i8,i8*%j,i64 20
%w=bitcast i8*%v to i32*
store i32%f,i32*%w,align 4
%x=getelementptr inbounds i8,i8*%j,i64 24
%y=bitcast i8*%x to i32*
store i32%g,i32*%y,align 4
%z=getelementptr inbounds i8,i8*%j,i64 28
%A=bitcast i8*%z to i32*
store i32%h,i32*%A,align 4
%B=getelementptr inbounds i8,i8*%j,i64 32
%C=bitcast i8*%B to i32*
store i32 0,i32*%C,align 4
%D=call i8*@sml_alloc(i32 inreg 28)#0
%E=getelementptr inbounds i8,i8*%D,i64 -4
%F=bitcast i8*%E to i32*
store i32 1342177304,i32*%F,align 4
%G=load i8*,i8**%i,align 8
%H=bitcast i8*%D to i8**
store i8*%G,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%D,i64 8
%J=bitcast i8*%I to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6tuple4E_709 to void(...)*),void(...)**%J,align 8
%K=getelementptr inbounds i8,i8*%D,i64 16
%L=bitcast i8*%K to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6tuple4E_709 to void(...)*),void(...)**%L,align 8
%M=getelementptr inbounds i8,i8*%D,i64 24
%N=bitcast i8*%M to i32*
store i32 -2147483647,i32*%N,align 4
ret i8*%D
}
define internal fastcc void@_SMLLN10TermFormat10FormatComb4putsE_713(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
store i8*null,i8**%b,align 8
%j=call fastcc i8*@_SMLFN3Bug11prettyPrintE(i8*inreg%h)
store i8*%j,i8**%b,align 8
%k=call i8*@sml_alloc(i32 inreg 20)#0
%l=getelementptr inbounds i8,i8*%k,i64 -4
%m=bitcast i8*%l to i32*
store i32 1342177296,i32*%m,align 4
%n=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%o=bitcast i8*%k to i8**
store i8*%n,i8**%o,align 8
%p=getelementptr inbounds i8,i8*%k,i64 8
%q=bitcast i8*%p to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bk,i64 0,i32 2,i64 0),i8**%q,align 8
%r=getelementptr inbounds i8,i8*%k,i64 16
%s=bitcast i8*%r to i32*
store i32 3,i32*%s,align 4
%t=call fastcc i8*@_SMLFN6String1_ZE(i8*inreg%k)
tail call fastcc void@_SMLFN6TextIO5printE(i8*inreg%t)
ret void
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb4putsE_715(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8***
br label%m
i:
call void@sml_check(i32 inreg%e)
%j=load i8*,i8**%d,align 8
%k=bitcast i8**%c to i8****
%l=load i8***,i8****%k,align 8
br label%m
m:
%n=phi i8***[%l,%i],[%h,%g]
%o=phi i8*[%j,%i],[%b,%g]
%p=load i8**,i8***%n,align 8
%q=load i8*,i8**%p,align 8
store i8*%q,i8**%c,align 8
%r=getelementptr inbounds i8,i8*%o,i64 16
%s=bitcast i8*%r to i8*(i8*,i8*)**
%t=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%s,align 8
%u=bitcast i8*%o to i8**
%v=load i8*,i8**%u,align 8
store i8*%v,i8**%d,align 8
%w=call i8*@sml_alloc(i32 inreg 20)#0
%x=getelementptr inbounds i8,i8*%w,i64 -4
%y=bitcast i8*%x to i32*
store i32 1342177296,i32*%y,align 4
%z=load i8*,i8**%c,align 8
%A=bitcast i8*%w to i8**
store i8*%z,i8**%A,align 8
%B=getelementptr inbounds i8,i8*%w,i64 8
%C=bitcast i8*%B to i8**
store i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bl,i64 0,i32 2)to i8*),i8**%C,align 8
%D=getelementptr inbounds i8,i8*%w,i64 16
%E=bitcast i8*%D to i32*
store i32 3,i32*%E,align 4
%F=load i8*,i8**%d,align 8
%G=tail call fastcc i8*%t(i8*inreg%F,i8*inreg%w)
ret i8*%G
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb4putsE_716(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 12)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177288,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32 1,i32*%n,align 4
%o=call i8*@sml_alloc(i32 inreg 28)#0
%p=getelementptr inbounds i8,i8*%o,i64 -4
%q=bitcast i8*%p to i32*
store i32 1342177304,i32*%q,align 4
%r=load i8*,i8**%e,align 8
%s=bitcast i8*%o to i8**
store i8*%r,i8**%s,align 8
%t=getelementptr inbounds i8,i8*%o,i64 8
%u=bitcast i8*%t to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb4putsE_715 to void(...)*),void(...)**%u,align 8
%v=getelementptr inbounds i8,i8*%o,i64 16
%w=bitcast i8*%v to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb4putsE_715 to void(...)*),void(...)**%w,align 8
%x=getelementptr inbounds i8,i8*%o,i64 24
%y=bitcast i8*%x to i32*
store i32 1,i32*%y,align 4
ret i8*%o
}
define fastcc i8*@_SMLFN10TermFormat10FormatComb4termE(i8*inreg%a)#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=getelementptr inbounds i8,i8*%a,i64 -4
%e=bitcast i8*%d to i32*
%f=load i32,i32*%e,align 4
%g=and i32%f,268435455
%h=add nsw i32%g,-1
%i=call i8*@sml_alloc(i32 inreg 20)#0
%j=getelementptr inbounds i8,i8*%i,i64 -4
%k=bitcast i8*%j to i32*
store i32 1342177296,i32*%k,align 4
store i8*%i,i8**%c,align 8
%l=getelementptr inbounds i8,i8*%i,i64 4
%m=bitcast i8*%l to i32*
store i32 0,i32*%m,align 1
%n=bitcast i8*%i to i32*
store i32%h,i32*%n,align 4
%o=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%p=getelementptr inbounds i8,i8*%i,i64 8
%q=bitcast i8*%p to i8**
store i8*%o,i8**%q,align 8
%r=getelementptr inbounds i8,i8*%i,i64 16
%s=bitcast i8*%r to i32*
store i32 2,i32*%s,align 4
%t=call i8*@sml_alloc(i32 inreg 20)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177296,i32*%v,align 4
store i8*%t,i8**%b,align 8
%w=getelementptr inbounds i8,i8*%t,i64 4
%x=bitcast i8*%w to i32*
store i32 0,i32*%x,align 1
%y=bitcast i8*%t to i32*
store i32 6,i32*%y,align 4
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=getelementptr inbounds i8,i8*%t,i64 8
%B=bitcast i8*%A to i8**
store i8*%z,i8**%B,align 8
%C=getelementptr inbounds i8,i8*%t,i64 16
%D=bitcast i8*%C to i32*
store i32 2,i32*%D,align 4
%E=call i8*@sml_alloc(i32 inreg 20)#0
%F=getelementptr inbounds i8,i8*%E,i64 -4
%G=bitcast i8*%F to i32*
store i32 1342177296,i32*%G,align 4
%H=load i8*,i8**%b,align 8
%I=bitcast i8*%E to i8**
store i8*%H,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%E,i64 8
%K=bitcast i8*%J to i8**
store i8*null,i8**%K,align 8
%L=getelementptr inbounds i8,i8*%E,i64 16
%M=bitcast i8*%L to i32*
store i32 3,i32*%M,align 4
store i8*null,i8**%c,align 8
%N=call i8*@sml_alloc(i32 inreg 20)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32 1342177296,i32*%P,align 4
%Q=load i8*,i8**%b,align 8
%R=bitcast i8*%N to i8**
store i8*%Q,i8**%R,align 8
%S=load i8*,i8**%c,align 8
%T=getelementptr inbounds i8,i8*%N,i64 8
%U=bitcast i8*%T to i8**
store i8*%S,i8**%U,align 8
%V=getelementptr inbounds i8,i8*%N,i64 16
%W=bitcast i8*%V to i32*
store i32 3,i32*%W,align 4
ret i8*%N
}
define internal fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_784(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_786(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_789(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%m
i:
call void@sml_check(i32 inreg%e)
%j=load i8*,i8**%d,align 8
%k=bitcast i8**%c to i8***
%l=load i8**,i8***%k,align 8
br label%m
m:
%n=phi i8**[%l,%i],[%h,%g]
%o=phi i8*[%j,%i],[%b,%g]
store i8*null,i8**%d,align 8
%p=load i8*,i8**%n,align 8
%q=getelementptr inbounds i8,i8*%p,i64 16
%r=bitcast i8*%q to i8*(i8*,i8*)**
%s=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%r,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8**%n to i8***
%u=load i8**,i8***%t,align 8
%v=load i8*,i8**%u,align 8
%w=call fastcc i8*%s(i8*inreg%v,i8*inreg%o)
%x=getelementptr inbounds i8,i8*%w,i64 16
%y=bitcast i8*%x to i8*(i8*,i8*,i8*)**
%z=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%y,align 8
%A=bitcast i8*%w to i8**
%B=load i8*,i8**%A,align 8
store i8*%B,i8**%c,align 8
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%d,align 8
store i32 1,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32 8,i32*%H,align 4
%K=load i8*,i8**%c,align 8
%L=load i8*,i8**%d,align 8
%M=tail call fastcc i8*%z(i8*inreg%K,i8*inreg%L,i8*inreg%G)
ret i8*%M
}
define internal fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_790(i8*inreg%a)#2 gc"smlsharp"{
j:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%h,label%f
f:
call void@sml_check(i32 inreg%d)
%g=load i8*,i8**%b,align 8
br label%h
h:
%i=phi i8*[%g,%f],[%a,%j]
store i8*null,i8**%b,align 8
%k=call fastcc i8*@_SMLLN10TermFormat10FormatComb1_DE_227(i8*inreg%i)#0
store i8*%k,i8**%b,align 8
%l=call i8*@sml_alloc(i32 inreg 12)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177288,i32*%n,align 4
store i8*%l,i8**%c,align 8
%o=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%c,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat15formatFormatExpE_789 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat15formatFormatExpE_789 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_798(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%m
i:
call void@sml_check(i32 inreg%e)
%j=load i8*,i8**%d,align 8
%k=bitcast i8**%c to i8***
%l=load i8**,i8***%k,align 8
br label%m
m:
%n=phi i8**[%l,%i],[%h,%g]
%o=phi i8*[%j,%i],[%b,%g]
store i8*null,i8**%d,align 8
%p=load i8*,i8**%n,align 8
%q=getelementptr inbounds i8,i8*%p,i64 16
%r=bitcast i8*%q to i8*(i8*,i8*)**
%s=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%r,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8**%n to i8***
%u=load i8**,i8***%t,align 8
%v=load i8*,i8**%u,align 8
%w=call fastcc i8*%s(i8*inreg%v,i8*inreg%o)
%x=getelementptr inbounds i8,i8*%w,i64 16
%y=bitcast i8*%x to i8*(i8*,i8*,i8*)**
%z=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%y,align 8
%A=bitcast i8*%w to i8**
%B=load i8*,i8**%A,align 8
store i8*%B,i8**%c,align 8
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%d,align 8
store i32 1,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32 8,i32*%H,align 4
%K=load i8*,i8**%c,align 8
%L=load i8*,i8**%d,align 8
%M=tail call fastcc i8*%z(i8*inreg%K,i8*inreg%L,i8*inreg%G)
ret i8*%M
}
define internal fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_799(i8*inreg%a)#2 gc"smlsharp"{
j:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%h,label%f
f:
call void@sml_check(i32 inreg%d)
%g=load i8*,i8**%b,align 8
br label%h
h:
%i=phi i8*[%g,%f],[%a,%j]
store i8*null,i8**%b,align 8
%k=call fastcc i8*@_SMLLN10TermFormat10FormatComb4textE_197(i8*inreg%i)#0
store i8*%k,i8**%b,align 8
%l=call i8*@sml_alloc(i32 inreg 12)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177288,i32*%n,align 4
store i8*%l,i8**%c,align 8
%o=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%c,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat15formatFormatExpE_798 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat15formatFormatExpE_798 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_802(i8*inreg%a)#2 gc"smlsharp"{
j:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%h,label%f
f:
call void@sml_check(i32 inreg%d)
%g=load i8*,i8**%b,align 8
br label%h
h:
%i=phi i8*[%g,%f],[%a,%j]
store i8*null,i8**%b,align 8
%k=call fastcc i8*@_SMLLN10TermFormat10FormatComb6dspaceE_211(i8*inreg%i)#0
%l=getelementptr inbounds i8,i8*%k,i64 16
%m=bitcast i8*%l to i8*(i8*,i8*,i8*)**
%n=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%m,align 8
%o=bitcast i8*%k to i8**
%p=load i8*,i8**%o,align 8
store i8*%p,i8**%b,align 8
%q=call i8*@sml_alloc(i32 inreg 4)#0
%r=bitcast i8*%q to i32*
%s=getelementptr inbounds i8,i8*%q,i64 -4
%t=bitcast i8*%s to i32*
store i32 4,i32*%t,align 4
store i8*%q,i8**%c,align 8
store i32 1,i32*%r,align 4
%u=call i8*@sml_alloc(i32 inreg 4)#0
%v=bitcast i8*%u to i32*
%w=getelementptr inbounds i8,i8*%u,i64 -4
%x=bitcast i8*%w to i32*
store i32 4,i32*%x,align 4
store i32 8,i32*%v,align 4
%y=load i8*,i8**%b,align 8
%z=load i8*,i8**%c,align 8
%A=tail call fastcc i8*%n(i8*inreg%y,i8*inreg%z,i8*inreg%u)
ret i8*%A
}
define internal fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_804(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%i,label%k
i:
%j=bitcast i8*%a to i8**
br label%o
k:
call void@sml_check(i32 inreg%g)
%l=load i8*,i8**%d,align 8
%m=bitcast i8**%c to i8***
%n=load i8**,i8***%m,align 8
br label%o
o:
%p=phi i8**[%n,%k],[%j,%i]
%q=phi i8*[%l,%k],[%b,%i]
store i8*null,i8**%d,align 8
%r=load i8*,i8**%p,align 8
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
store i8*null,i8**%c,align 8
%v=bitcast i8**%p to i8***
%w=load i8**,i8***%v,align 8
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%u(i8*inreg%x,i8*inreg%q)
%z=getelementptr inbounds i8,i8*%y,i64 16
%A=bitcast i8*%z to i8*(i8*,i8*,i8*,i8*,i8*)**
%B=load i8*(i8*,i8*,i8*,i8*,i8*)*,i8*(i8*,i8*,i8*,i8*,i8*)**%A,align 8
%C=bitcast i8*%y to i8**
%D=load i8*,i8**%C,align 8
store i8*%D,i8**%c,align 8
%E=call i8*@sml_alloc(i32 inreg 4)#0
%F=bitcast i8*%E to i32*
%G=getelementptr inbounds i8,i8*%E,i64 -4
%H=bitcast i8*%G to i32*
store i32 4,i32*%H,align 4
store i8*%E,i8**%d,align 8
store i32 1,i32*%F,align 4
%I=call i8*@sml_alloc(i32 inreg 4)#0
%J=bitcast i8*%I to i32*
%K=getelementptr inbounds i8,i8*%I,i64 -4
%L=bitcast i8*%K to i32*
store i32 4,i32*%L,align 4
store i8*%I,i8**%e,align 8
store i32 8,i32*%J,align 4
%M=call i8*@sml_alloc(i32 inreg 4)#0
%N=bitcast i8*%M to i32*
%O=getelementptr inbounds i8,i8*%M,i64 -4
%P=bitcast i8*%O to i32*
store i32 4,i32*%P,align 4
store i8*%M,i8**%f,align 8
store i32 1,i32*%N,align 4
%Q=call i8*@sml_alloc(i32 inreg 4)#0
%R=bitcast i8*%Q to i32*
%S=getelementptr inbounds i8,i8*%Q,i64 -4
%T=bitcast i8*%S to i32*
store i32 4,i32*%T,align 4
store i32 8,i32*%R,align 4
%U=load i8*,i8**%c,align 8
%V=load i8*,i8**%d,align 8
%W=load i8*,i8**%e,align 8
%X=load i8*,i8**%f,align 8
%Y=call fastcc i8*%B(i8*inreg%U,i8*inreg%V,i8*inreg%W,i8*inreg%X,i8*inreg%Q)
ret i8*%Y
}
define internal fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_805(i8*inreg%a)#2 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%g,label%f
f:
call void@sml_check(i32 inreg%d)
br label%g
g:
%h=call fastcc i8*@_SMLLN10TermFormat10FormatComb6guard__E_247(i32 inreg 1,i32 inreg 8)
%i=getelementptr inbounds i8,i8*%h,i64 16
%j=bitcast i8*%i to i8*(i8*,i8*)**
%k=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%j,align 8
%l=bitcast i8*%h to i8**
%m=load i8*,i8**%l,align 8
%n=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%o=call fastcc i8*%k(i8*inreg%m,i8*inreg%n)
store i8*%o,i8**%b,align 8
%p=call i8*@sml_alloc(i32 inreg 12)#0
%q=getelementptr inbounds i8,i8*%p,i64 -4
%r=bitcast i8*%q to i32*
store i32 1342177288,i32*%r,align 4
store i8*%p,i8**%c,align 8
%s=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%t=bitcast i8*%p to i8**
store i8*%s,i8**%t,align 8
%u=getelementptr inbounds i8,i8*%p,i64 8
%v=bitcast i8*%u to i32*
store i32 1,i32*%v,align 4
%w=call i8*@sml_alloc(i32 inreg 28)#0
%x=getelementptr inbounds i8,i8*%w,i64 -4
%y=bitcast i8*%x to i32*
store i32 1342177304,i32*%y,align 4
%z=load i8*,i8**%c,align 8
%A=bitcast i8*%w to i8**
store i8*%z,i8**%A,align 8
%B=getelementptr inbounds i8,i8*%w,i64 8
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat15formatFormatExpE_804 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%w,i64 16
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat15formatFormatExpE_804 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%w,i64 24
%G=bitcast i8*%F to i32*
store i32 -2147483647,i32*%G,align 4
ret i8*%w
}
define internal fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_807(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%m
i:
call void@sml_check(i32 inreg%e)
%j=load i8*,i8**%d,align 8
%k=bitcast i8**%c to i8***
%l=load i8**,i8***%k,align 8
br label%m
m:
%n=phi i8**[%l,%i],[%h,%g]
%o=phi i8*[%j,%i],[%b,%g]
store i8*null,i8**%d,align 8
%p=load i8*,i8**%n,align 8
%q=getelementptr inbounds i8,i8*%p,i64 16
%r=bitcast i8*%q to i8*(i8*,i8*)**
%s=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%r,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8**%n to i8***
%u=load i8**,i8***%t,align 8
%v=load i8*,i8**%u,align 8
%w=call fastcc i8*%s(i8*inreg%v,i8*inreg%o)
%x=getelementptr inbounds i8,i8*%w,i64 16
%y=bitcast i8*%x to i8*(i8*,i8*,i8*)**
%z=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%y,align 8
%A=bitcast i8*%w to i8**
%B=load i8*,i8**%A,align 8
store i8*%B,i8**%c,align 8
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%d,align 8
store i32 1,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32 8,i32*%H,align 4
%K=load i8*,i8**%c,align 8
%L=load i8*,i8**%d,align 8
%M=tail call fastcc i8*%z(i8*inreg%K,i8*inreg%L,i8*inreg%G)
ret i8*%M
}
define internal fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_808(i8*inreg%a)#2 gc"smlsharp"{
j:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%h,label%f
f:
call void@sml_check(i32 inreg%d)
%g=load i8*,i8**%b,align 8
br label%h
h:
%i=phi i8*[%g,%f],[%a,%j]
store i8*null,i8**%b,align 8
%k=call fastcc i8*@_SMLLN10TermFormat10FormatComb1_DE_227(i8*inreg%i)#0
store i8*%k,i8**%b,align 8
%l=call i8*@sml_alloc(i32 inreg 12)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177288,i32*%n,align 4
store i8*%l,i8**%c,align 8
%o=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%c,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat15formatFormatExpE_807 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat15formatFormatExpE_807 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_810(i8*inreg%a)#2 gc"smlsharp"{
j:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%h,label%f
f:
call void@sml_check(i32 inreg%d)
%g=load i8*,i8**%b,align 8
br label%h
h:
%i=phi i8*[%g,%f],[%a,%j]
store i8*null,i8**%b,align 8
%k=call fastcc i8*@_SMLLN10TermFormat10FormatComb6dspaceE_211(i8*inreg%i)#0
%l=getelementptr inbounds i8,i8*%k,i64 16
%m=bitcast i8*%l to i8*(i8*,i8*,i8*)**
%n=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%m,align 8
%o=bitcast i8*%k to i8**
%p=load i8*,i8**%o,align 8
store i8*%p,i8**%b,align 8
%q=call i8*@sml_alloc(i32 inreg 4)#0
%r=bitcast i8*%q to i32*
%s=getelementptr inbounds i8,i8*%q,i64 -4
%t=bitcast i8*%s to i32*
store i32 4,i32*%t,align 4
store i8*%q,i8**%c,align 8
store i32 1,i32*%r,align 4
%u=call i8*@sml_alloc(i32 inreg 4)#0
%v=bitcast i8*%u to i32*
%w=getelementptr inbounds i8,i8*%u,i64 -4
%x=bitcast i8*%w to i32*
store i32 4,i32*%x,align 4
store i32 8,i32*%v,align 4
%y=load i8*,i8**%b,align 8
%z=load i8*,i8**%c,align 8
%A=tail call fastcc i8*%n(i8*inreg%y,i8*inreg%z,i8*inreg%u)
ret i8*%A
}
define internal fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_812(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%m
i:
call void@sml_check(i32 inreg%e)
%j=load i8*,i8**%d,align 8
%k=bitcast i8**%c to i8***
%l=load i8**,i8***%k,align 8
br label%m
m:
%n=phi i8**[%l,%i],[%h,%g]
%o=phi i8*[%j,%i],[%b,%g]
store i8*null,i8**%d,align 8
%p=load i8*,i8**%n,align 8
%q=getelementptr inbounds i8,i8*%p,i64 16
%r=bitcast i8*%q to i8*(i8*,i8*)**
%s=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%r,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8**%n to i8***
%u=load i8**,i8***%t,align 8
%v=load i8*,i8**%u,align 8
%w=call fastcc i8*%s(i8*inreg%v,i8*inreg%o)
%x=getelementptr inbounds i8,i8*%w,i64 16
%y=bitcast i8*%x to i8*(i8*,i8*,i8*)**
%z=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%y,align 8
%A=bitcast i8*%w to i8**
%B=load i8*,i8**%A,align 8
store i8*%B,i8**%c,align 8
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%d,align 8
store i32 1,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32 8,i32*%H,align 4
%K=load i8*,i8**%c,align 8
%L=load i8*,i8**%d,align 8
%M=tail call fastcc i8*%z(i8*inreg%K,i8*inreg%L,i8*inreg%G)
ret i8*%M
}
define internal fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_813(i8*inreg%a)#2 gc"smlsharp"{
j:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%h,label%f
f:
call void@sml_check(i32 inreg%d)
%g=load i8*,i8**%b,align 8
br label%h
h:
%i=phi i8*[%g,%f],[%a,%j]
store i8*null,i8**%b,align 8
%k=call fastcc i8*@_SMLLN10TermFormat10FormatComb4textE_197(i8*inreg%i)#0
store i8*%k,i8**%b,align 8
%l=call i8*@sml_alloc(i32 inreg 12)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177288,i32*%n,align 4
store i8*%l,i8**%c,align 8
%o=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%c,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat15formatFormatExpE_812 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat15formatFormatExpE_812 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_816(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=getelementptr inbounds i8,i8*%h,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
%m=getelementptr inbounds i8,i8*%l,i64 16
%n=bitcast i8*%m to i8*(i8*,i8*)**
%o=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%n,align 8
%p=bitcast i8*%l to i8**
%q=load i8*,i8**%p,align 8
store i8*%q,i8**%b,align 8
%r=bitcast i8*%h to i8**
%s=load i8*,i8**%r,align 8
%t=getelementptr inbounds i8,i8*%s,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%s to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
%A=tail call fastcc i8*%o(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define internal fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_818(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=getelementptr inbounds i8,i8*%h,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
%m=getelementptr inbounds i8,i8*%l,i64 16
%n=bitcast i8*%m to i8*(i8*,i8*)**
%o=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%n,align 8
%p=bitcast i8*%l to i8**
%q=load i8*,i8**%p,align 8
store i8*%q,i8**%b,align 8
%r=bitcast i8*%h to i8**
%s=load i8*,i8**%r,align 8
%t=getelementptr inbounds i8,i8*%s,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%s to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
%A=tail call fastcc i8*%o(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define internal fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_828(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=tail call fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_721(i8*inreg%h)
ret i8*%j
}
define internal fastcc i8*@_SMLLN10TermFormat12formatFormatE_831(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=tail call fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_721(i8*inreg%h)
ret i8*%j
}
define internal fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_721(i8*inreg%a)unnamed_addr#2 gc"smlsharp"{
m:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%b,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%k,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%b,align 8
br label%k
k:
%l=phi i8*[%j,%i],[%a,%m]
%n=bitcast i8*%l to i32*
%o=load i32,i32*%n,align 4
switch i32%o,label%p[
i32 6,label%hX
i32 3,label%g9
i32 1,label%dx
i32 2,label%b6
i32 5,label%aY
i32 0,label%aa
i32 4,label%H
]
p:
call void@sml_matchcomp_bug()
%q=load i8*,i8**@_SMLZ5Match,align 8
store i8*%q,i8**%b,align 8
%r=call i8*@sml_alloc(i32 inreg 20)#0
%s=getelementptr inbounds i8,i8*%r,i64 -4
%t=bitcast i8*%s to i32*
store i32 1342177296,i32*%t,align 4
store i8*%r,i8**%c,align 8
%u=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%v=bitcast i8*%r to i8**
store i8*%u,i8**%v,align 8
%w=getelementptr inbounds i8,i8*%r,i64 8
%x=bitcast i8*%w to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[56x i8]}>,<{[4x i8],i32,[56x i8]}>*@bR,i64 0,i32 2,i64 0),i8**%x,align 8
%y=getelementptr inbounds i8,i8*%r,i64 16
%z=bitcast i8*%y to i32*
store i32 3,i32*%z,align 4
%A=call i8*@sml_alloc(i32 inreg 60)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177336,i32*%C,align 4
%D=getelementptr inbounds i8,i8*%A,i64 56
%E=bitcast i8*%D to i32*
store i32 1,i32*%E,align 4
%F=load i8*,i8**%c,align 8
%G=bitcast i8*%A to i8**
store i8*%F,i8**%G,align 8
call void@sml_raise(i8*inreg%A)#1
unreachable
H:
%I=getelementptr inbounds i8,i8*%l,i64 8
%J=bitcast i8*%I to i8**
%K=load i8*,i8**%J,align 8
store i8*%K,i8**%b,align 8
%L=call fastcc i8*@_SMLFN4List3mapE(i32 inreg 1,i32 inreg 8,i32 inreg 1,i32 inreg 8)
%M=getelementptr inbounds i8,i8*%L,i64 16
%N=bitcast i8*%M to i8*(i8*,i8*)**
%O=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%N,align 8
%P=bitcast i8*%L to i8**
%Q=load i8*,i8**%P,align 8
%R=call fastcc i8*%O(i8*inreg%Q,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bQ,i64 0,i32 2)to i8*))
%S=getelementptr inbounds i8,i8*%R,i64 16
%T=bitcast i8*%S to i8*(i8*,i8*)**
%U=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%T,align 8
%V=bitcast i8*%R to i8**
%W=load i8*,i8**%V,align 8
%X=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%Y=call fastcc i8*%U(i8*inreg%W,i8*inreg%X)
%Z=tail call fastcc i8*@_SMLLN10TermFormat11intersperseE_267(i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,i8*,i32}>,<{[4x i8],i32,i8*,i8*,i32}>*@bP,i64 0,i32 2)to i8*),i8*inreg%Y)
ret i8*%Z
aa:
%ab=call i8*@sml_alloc(i32 inreg 20)#0
%ac=getelementptr inbounds i8,i8*%ab,i64 -4
%ad=bitcast i8*%ac to i32*
store i32 1342177296,i32*%ad,align 4
store i8*%ab,i8**%b,align 8
%ae=getelementptr inbounds i8,i8*%ab,i64 4
%af=bitcast i8*%ae to i32*
store i32 0,i32*%af,align 1
%ag=bitcast i8*%ab to i32*
store i32 1,i32*%ag,align 4
%ah=getelementptr inbounds i8,i8*%ab,i64 8
%ai=bitcast i8*%ah to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bO,i64 0,i32 2,i64 0),i8**%ai,align 8
%aj=getelementptr inbounds i8,i8*%ab,i64 16
%ak=bitcast i8*%aj to i32*
store i32 2,i32*%ak,align 4
%al=call i8*@sml_alloc(i32 inreg 20)#0
%am=getelementptr inbounds i8,i8*%al,i64 -4
%an=bitcast i8*%am to i32*
store i32 1342177296,i32*%an,align 4
store i8*%al,i8**%c,align 8
%ao=getelementptr inbounds i8,i8*%al,i64 4
%ap=bitcast i8*%ao to i32*
store i32 0,i32*%ap,align 1
%aq=bitcast i8*%al to i32*
store i32 6,i32*%aq,align 4
%ar=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%as=getelementptr inbounds i8,i8*%al,i64 8
%at=bitcast i8*%as to i8**
store i8*%ar,i8**%at,align 8
%au=getelementptr inbounds i8,i8*%al,i64 16
%av=bitcast i8*%au to i32*
store i32 2,i32*%av,align 4
%aw=call i8*@sml_alloc(i32 inreg 20)#0
%ax=getelementptr inbounds i8,i8*%aw,i64 -4
%ay=bitcast i8*%ax to i32*
store i32 1342177296,i32*%ay,align 4
%az=load i8*,i8**%c,align 8
%aA=bitcast i8*%aw to i8**
store i8*%az,i8**%aA,align 8
%aB=getelementptr inbounds i8,i8*%aw,i64 8
%aC=bitcast i8*%aB to i8**
store i8*null,i8**%aC,align 8
%aD=getelementptr inbounds i8,i8*%aw,i64 16
%aE=bitcast i8*%aD to i32*
store i32 3,i32*%aE,align 4
store i8*%az,i8**%b,align 8
store i8*null,i8**%c,align 8
%aF=call i8*@sml_alloc(i32 inreg 20)#0
%aG=getelementptr inbounds i8,i8*%aF,i64 -4
%aH=bitcast i8*%aG to i32*
store i32 1342177296,i32*%aH,align 4
store i8*%aF,i8**%d,align 8
%aI=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%aJ=bitcast i8*%aF to i8**
store i8*%aI,i8**%aJ,align 8
%aK=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%aL=getelementptr inbounds i8,i8*%aF,i64 8
%aM=bitcast i8*%aL to i8**
store i8*%aK,i8**%aM,align 8
%aN=getelementptr inbounds i8,i8*%aF,i64 16
%aO=bitcast i8*%aN to i32*
store i32 3,i32*%aO,align 4
%aP=call i8*@sml_alloc(i32 inreg 20)#0
%aQ=getelementptr inbounds i8,i8*%aP,i64 -4
%aR=bitcast i8*%aQ to i32*
store i32 1342177296,i32*%aR,align 4
%aS=bitcast i8*%aP to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@i,i64 0,i32 2)to i8*),i8**%aS,align 8
%aT=load i8*,i8**%d,align 8
%aU=getelementptr inbounds i8,i8*%aP,i64 8
%aV=bitcast i8*%aU to i8**
store i8*%aT,i8**%aV,align 8
%aW=getelementptr inbounds i8,i8*%aP,i64 16
%aX=bitcast i8*%aW to i32*
store i32 3,i32*%aX,align 4
ret i8*%aP
aY:
%aZ=getelementptr inbounds i8,i8*%l,i64 4
%a0=bitcast i8*%aZ to i32*
%a1=load i32,i32*%a0,align 4
%a2=call fastcc i8*@_SMLFN5Int328toStringE(i32 inreg%a1)
store i8*%a2,i8**%b,align 8
%a3=call i8*@sml_alloc(i32 inreg 20)#0
%a4=getelementptr inbounds i8,i8*%a3,i64 -4
%a5=bitcast i8*%a4 to i32*
store i32 1342177296,i32*%a5,align 4
%a6=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%a7=bitcast i8*%a3 to i8**
store i8*%a6,i8**%a7,align 8
%a8=getelementptr inbounds i8,i8*%a3,i64 8
%a9=bitcast i8*%a8 to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bN,i64 0,i32 2,i64 0),i8**%a9,align 8
%ba=getelementptr inbounds i8,i8*%a3,i64 16
%bb=bitcast i8*%ba to i32*
store i32 3,i32*%bb,align 4
%bc=call fastcc i8*@_SMLFN6String1_ZE(i8*inreg%a3)
store i8*%bc,i8**%b,align 8
%bd=getelementptr inbounds i8,i8*%bc,i64 -4
%be=bitcast i8*%bd to i32*
%bf=load i32,i32*%be,align 4
%bg=and i32%bf,268435455
%bh=add nsw i32%bg,-1
%bi=call i8*@sml_alloc(i32 inreg 20)#0
%bj=getelementptr inbounds i8,i8*%bi,i64 -4
%bk=bitcast i8*%bj to i32*
store i32 1342177296,i32*%bk,align 4
store i8*%bi,i8**%c,align 8
%bl=getelementptr inbounds i8,i8*%bi,i64 4
%bm=bitcast i8*%bl to i32*
store i32 0,i32*%bm,align 1
%bn=bitcast i8*%bi to i32*
store i32%bh,i32*%bn,align 4
%bo=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%bp=getelementptr inbounds i8,i8*%bi,i64 8
%bq=bitcast i8*%bp to i8**
store i8*%bo,i8**%bq,align 8
%br=getelementptr inbounds i8,i8*%bi,i64 16
%bs=bitcast i8*%br to i32*
store i32 2,i32*%bs,align 4
%bt=call i8*@sml_alloc(i32 inreg 20)#0
%bu=getelementptr inbounds i8,i8*%bt,i64 -4
%bv=bitcast i8*%bu to i32*
store i32 1342177296,i32*%bv,align 4
store i8*%bt,i8**%b,align 8
%bw=getelementptr inbounds i8,i8*%bt,i64 4
%bx=bitcast i8*%bw to i32*
store i32 0,i32*%bx,align 1
%by=bitcast i8*%bt to i32*
store i32 6,i32*%by,align 4
%bz=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bA=getelementptr inbounds i8,i8*%bt,i64 8
%bB=bitcast i8*%bA to i8**
store i8*%bz,i8**%bB,align 8
%bC=getelementptr inbounds i8,i8*%bt,i64 16
%bD=bitcast i8*%bC to i32*
store i32 2,i32*%bD,align 4
%bE=call i8*@sml_alloc(i32 inreg 20)#0
%bF=getelementptr inbounds i8,i8*%bE,i64 -4
%bG=bitcast i8*%bF to i32*
store i32 1342177296,i32*%bG,align 4
%bH=load i8*,i8**%b,align 8
%bI=bitcast i8*%bE to i8**
store i8*%bH,i8**%bI,align 8
%bJ=getelementptr inbounds i8,i8*%bE,i64 8
%bK=bitcast i8*%bJ to i8**
store i8*null,i8**%bK,align 8
%bL=getelementptr inbounds i8,i8*%bE,i64 16
%bM=bitcast i8*%bL to i32*
store i32 3,i32*%bM,align 4
store i8*null,i8**%c,align 8
%bN=call i8*@sml_alloc(i32 inreg 20)#0
%bO=getelementptr inbounds i8,i8*%bN,i64 -4
%bP=bitcast i8*%bO to i32*
store i32 1342177296,i32*%bP,align 4
store i8*%bN,i8**%d,align 8
%bQ=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%bR=bitcast i8*%bN to i8**
store i8*%bQ,i8**%bR,align 8
%bS=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%bT=getelementptr inbounds i8,i8*%bN,i64 8
%bU=bitcast i8*%bT to i8**
store i8*%bS,i8**%bU,align 8
%bV=getelementptr inbounds i8,i8*%bN,i64 16
%bW=bitcast i8*%bV to i32*
store i32 3,i32*%bW,align 4
%bX=call i8*@sml_alloc(i32 inreg 20)#0
%bY=getelementptr inbounds i8,i8*%bX,i64 -4
%bZ=bitcast i8*%bY to i32*
store i32 1342177296,i32*%bZ,align 4
%b0=bitcast i8*%bX to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@i,i64 0,i32 2)to i8*),i8**%b0,align 8
%b1=load i8*,i8**%d,align 8
%b2=getelementptr inbounds i8,i8*%bX,i64 8
%b3=bitcast i8*%b2 to i8**
store i8*%b1,i8**%b3,align 8
%b4=getelementptr inbounds i8,i8*%bX,i64 16
%b5=bitcast i8*%b4 to i32*
store i32 3,i32*%b5,align 4
ret i8*%bX
b6:
%b7=getelementptr inbounds i8,i8*%l,i64 8
%b8=bitcast i8*%b7 to i8**
%b9=load i8*,i8**%b8,align 8
%ca=getelementptr inbounds i8,i8*%b9,i64 8
%cb=bitcast i8*%ca to i32*
%cc=load i32,i32*%cb,align 4
%cd=icmp eq i32%cc,0
%ce=select i1%cd,i8*getelementptr inbounds(<{[4x i8],i32,[1x i8]}>,<{[4x i8],i32,[1x i8]}>*@bM,i64 0,i32 2,i64 0),i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bK,i64 0,i32 2,i64 0)
store i8*%ce,i8**%b,align 8
%cf=bitcast i8*%b9 to i8**
%cg=load i8*,i8**%cf,align 8
%ch=icmp eq i8*%cg,null
br i1%ch,label%cr,label%ci
ci:
%cj=bitcast i8*%cg to i8***
%ck=load i8**,i8***%cj,align 8
%cl=load i8*,i8**%ck,align 8
%cm=icmp eq i8*%cl,null
br i1%cm,label%cr,label%cn
cn:
%co=bitcast i8*%cl to i32*
%cp=load i32,i32*%co,align 4
%cq=call fastcc i8*@_SMLFN5Int328toStringE(i32 inreg%cp)
br label%cr
cr:
%cs=phi i8*[getelementptr inbounds(<{[4x i8],i32,[1x i8]}>,<{[4x i8],i32,[1x i8]}>*@bM,i64 0,i32 2,i64 0),%b6],[%cq,%cn],[getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bL,i64 0,i32 2,i64 0),%ci]
store i8*%cs,i8**%c,align 8
%ct=call i8*@sml_alloc(i32 inreg 20)#0
%cu=getelementptr inbounds i8,i8*%ct,i64 -4
%cv=bitcast i8*%cu to i32*
store i32 1342177296,i32*%cv,align 4
%cw=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%cx=bitcast i8*%ct to i8**
store i8*%cw,i8**%cx,align 8
%cy=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%cz=getelementptr inbounds i8,i8*%ct,i64 8
%cA=bitcast i8*%cz to i8**
store i8*%cy,i8**%cA,align 8
%cB=getelementptr inbounds i8,i8*%ct,i64 16
%cC=bitcast i8*%cB to i32*
store i32 3,i32*%cC,align 4
%cD=call fastcc i8*@_SMLFN6String1_ZE(i8*inreg%ct)
store i8*%cD,i8**%b,align 8
%cE=getelementptr inbounds i8,i8*%cD,i64 -4
%cF=bitcast i8*%cE to i32*
%cG=load i32,i32*%cF,align 4
%cH=and i32%cG,268435455
%cI=add nsw i32%cH,-1
%cJ=call i8*@sml_alloc(i32 inreg 20)#0
%cK=getelementptr inbounds i8,i8*%cJ,i64 -4
%cL=bitcast i8*%cK to i32*
store i32 1342177296,i32*%cL,align 4
store i8*%cJ,i8**%c,align 8
%cM=getelementptr inbounds i8,i8*%cJ,i64 4
%cN=bitcast i8*%cM to i32*
store i32 0,i32*%cN,align 1
%cO=bitcast i8*%cJ to i32*
store i32%cI,i32*%cO,align 4
%cP=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%cQ=getelementptr inbounds i8,i8*%cJ,i64 8
%cR=bitcast i8*%cQ to i8**
store i8*%cP,i8**%cR,align 8
%cS=getelementptr inbounds i8,i8*%cJ,i64 16
%cT=bitcast i8*%cS to i32*
store i32 2,i32*%cT,align 4
%cU=call i8*@sml_alloc(i32 inreg 20)#0
%cV=getelementptr inbounds i8,i8*%cU,i64 -4
%cW=bitcast i8*%cV to i32*
store i32 1342177296,i32*%cW,align 4
store i8*%cU,i8**%b,align 8
%cX=getelementptr inbounds i8,i8*%cU,i64 4
%cY=bitcast i8*%cX to i32*
store i32 0,i32*%cY,align 1
%cZ=bitcast i8*%cU to i32*
store i32 6,i32*%cZ,align 4
%c0=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%c1=getelementptr inbounds i8,i8*%cU,i64 8
%c2=bitcast i8*%c1 to i8**
store i8*%c0,i8**%c2,align 8
%c3=getelementptr inbounds i8,i8*%cU,i64 16
%c4=bitcast i8*%c3 to i32*
store i32 2,i32*%c4,align 4
%c5=call i8*@sml_alloc(i32 inreg 20)#0
%c6=getelementptr inbounds i8,i8*%c5,i64 -4
%c7=bitcast i8*%c6 to i32*
store i32 1342177296,i32*%c7,align 4
%c8=load i8*,i8**%b,align 8
%c9=bitcast i8*%c5 to i8**
store i8*%c8,i8**%c9,align 8
%da=getelementptr inbounds i8,i8*%c5,i64 8
%db=bitcast i8*%da to i8**
store i8*null,i8**%db,align 8
%dc=getelementptr inbounds i8,i8*%c5,i64 16
%dd=bitcast i8*%dc to i32*
store i32 3,i32*%dd,align 4
store i8*null,i8**%c,align 8
%de=call i8*@sml_alloc(i32 inreg 20)#0
%df=getelementptr inbounds i8,i8*%de,i64 -4
%dg=bitcast i8*%df to i32*
store i32 1342177296,i32*%dg,align 4
store i8*%de,i8**%d,align 8
%dh=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%di=bitcast i8*%de to i8**
store i8*%dh,i8**%di,align 8
%dj=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%dk=getelementptr inbounds i8,i8*%de,i64 8
%dl=bitcast i8*%dk to i8**
store i8*%dj,i8**%dl,align 8
%dm=getelementptr inbounds i8,i8*%de,i64 16
%dn=bitcast i8*%dm to i32*
store i32 3,i32*%dn,align 4
%do=call i8*@sml_alloc(i32 inreg 20)#0
%dp=getelementptr inbounds i8,i8*%do,i64 -4
%dq=bitcast i8*%dp to i32*
store i32 1342177296,i32*%dq,align 4
%dr=bitcast i8*%do to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@i,i64 0,i32 2)to i8*),i8**%dr,align 8
%ds=load i8*,i8**%d,align 8
%dt=getelementptr inbounds i8,i8*%do,i64 8
%du=bitcast i8*%dt to i8**
store i8*%ds,i8**%du,align 8
%dv=getelementptr inbounds i8,i8*%do,i64 16
%dw=bitcast i8*%dv to i32*
store i32 3,i32*%dw,align 4
ret i8*%do
dx:
%dy=getelementptr inbounds i8,i8*%l,i64 8
%dz=bitcast i8*%dy to i8**
%dA=load i8*,i8**%dz,align 8
store i8*%dA,i8**%d,align 8
%dB=call fastcc i8*@_SMLLN10TermFormat10FormatComb5spaceE_204(i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,i8*,i32}>,<{[4x i8],i32,i8*,i8*,i32}>*@bt,i64 0,i32 2)to i8*))#0
%dC=getelementptr inbounds i8,i8*%dB,i64 16
%dD=bitcast i8*%dC to i8*(i8*,i8*,i8*)**
%dE=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%dD,align 8
%dF=bitcast i8*%dB to i8**
%dG=load i8*,i8**%dF,align 8
store i8*%dG,i8**%b,align 8
%dH=call i8*@sml_alloc(i32 inreg 4)#0
%dI=bitcast i8*%dH to i32*
%dJ=getelementptr inbounds i8,i8*%dH,i64 -4
%dK=bitcast i8*%dJ to i32*
store i32 4,i32*%dK,align 4
store i8*%dH,i8**%c,align 8
store i32 1,i32*%dI,align 4
%dL=call i8*@sml_alloc(i32 inreg 4)#0
%dM=bitcast i8*%dL to i32*
%dN=getelementptr inbounds i8,i8*%dL,i64 -4
%dO=bitcast i8*%dN to i32*
store i32 4,i32*%dO,align 4
store i32 8,i32*%dM,align 4
%dP=load i8*,i8**%b,align 8
%dQ=load i8*,i8**%c,align 8
store i8*null,i8**%b,align 8
store i8*null,i8**%c,align 8
%dR=call fastcc i8*%dE(i8*inreg%dP,i8*inreg%dQ,i8*inreg%dL)
%dS=getelementptr inbounds i8,i8*%dR,i64 16
%dT=bitcast i8*%dS to i8*(i8*,i8*)**
%dU=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%dT,align 8
%dV=bitcast i8*%dR to i8**
%dW=load i8*,i8**%dV,align 8
%dX=call fastcc i8*%dU(i8*inreg%dW,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bu,i64 0,i32 2)to i8*))
%dY=getelementptr inbounds i8,i8*%dX,i64 16
%dZ=bitcast i8*%dY to i8*(i8*,i8*)**
%d0=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%dZ,align 8
%d1=bitcast i8*%dX to i8**
%d2=load i8*,i8**%d1,align 8
store i8*%d2,i8**%f,align 8
%d3=bitcast i8**%d to i8***
%d4=load i8**,i8***%d3,align 8
%d5=load i8*,i8**%d4,align 8
%d6=icmp eq i8*%d5,null
br i1%d6,label%fP,label%d7
d7:
%d8=bitcast i8*%d5 to i8**
%d9=load i8*,i8**%d8,align 8
store i8*%d9,i8**%e,align 8
%ea=bitcast i8*%d9 to i32*
%eb=load i32,i32*%ea,align 4
%ec=icmp eq i32%eb,0
%ed=select i1%ec,i8*getelementptr inbounds(<{[4x i8],i32,[1x i8]}>,<{[4x i8],i32,[1x i8]}>*@bM,i64 0,i32 2,i64 0),i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bv,i64 0,i32 2,i64 0)
store i8*%ed,i8**%b,align 8
%ee=getelementptr inbounds i8,i8*%d9,i64 4
%ef=bitcast i8*%ee to i32*
%eg=load i32,i32*%ef,align 4
switch i32%eg,label%eh[
i32 0,label%eB
i32 2,label%eA
i32 1,label%ez
]
eh:
store i8*null,i8**%d,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%f,align 8
call void@sml_matchcomp_bug()
%ei=load i8*,i8**@_SMLZ5Match,align 8
store i8*%ei,i8**%b,align 8
%ej=call i8*@sml_alloc(i32 inreg 20)#0
%ek=getelementptr inbounds i8,i8*%ej,i64 -4
%el=bitcast i8*%ek to i32*
store i32 1342177296,i32*%el,align 4
store i8*%ej,i8**%c,align 8
%em=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%en=bitcast i8*%ej to i8**
store i8*%em,i8**%en,align 8
%eo=getelementptr inbounds i8,i8*%ej,i64 8
%ep=bitcast i8*%eo to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[57x i8]}>,<{[4x i8],i32,[57x i8]}>*@bz,i64 0,i32 2,i64 0),i8**%ep,align 8
%eq=getelementptr inbounds i8,i8*%ej,i64 16
%er=bitcast i8*%eq to i32*
store i32 3,i32*%er,align 4
%es=call i8*@sml_alloc(i32 inreg 60)#0
%et=getelementptr inbounds i8,i8*%es,i64 -4
%eu=bitcast i8*%et to i32*
store i32 1342177336,i32*%eu,align 4
%ev=getelementptr inbounds i8,i8*%es,i64 56
%ew=bitcast i8*%ev to i32*
store i32 1,i32*%ew,align 4
%ex=load i8*,i8**%c,align 8
%ey=bitcast i8*%es to i8**
store i8*%ex,i8**%ey,align 8
call void@sml_raise(i8*inreg%es)#1
unreachable
ez:
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@by,i64 0,i32 2,i64 0),i8**%c,align 8
br label%eC
eA:
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bx,i64 0,i32 2,i64 0),i8**%c,align 8
br label%eC
eB:
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bw,i64 0,i32 2,i64 0),i8**%c,align 8
br label%eC
eC:
%eD=call i8*@sml_alloc(i32 inreg 20)#0
%eE=getelementptr inbounds i8,i8*%eD,i64 -4
%eF=bitcast i8*%eE to i32*
store i32 1342177296,i32*%eF,align 4
%eG=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%eH=bitcast i8*%eD to i8**
store i8*%eG,i8**%eH,align 8
%eI=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%eJ=getelementptr inbounds i8,i8*%eD,i64 8
%eK=bitcast i8*%eJ to i8**
store i8*%eI,i8**%eK,align 8
%eL=getelementptr inbounds i8,i8*%eD,i64 16
%eM=bitcast i8*%eL to i32*
store i32 3,i32*%eM,align 4
%eN=call fastcc i8*@_SMLFN6String1_ZE(i8*inreg%eD)
store i8*%eN,i8**%b,align 8
%eO=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%eP=getelementptr inbounds i8,i8*%eO,i64 8
%eQ=bitcast i8*%eP to i32*
%eR=load i32,i32*%eQ,align 4
%eS=call fastcc i8*@_SMLFN5Int328toStringE(i32 inreg%eR)
store i8*%eS,i8**%c,align 8
%eT=call i8*@sml_alloc(i32 inreg 20)#0
%eU=getelementptr inbounds i8,i8*%eT,i64 -4
%eV=bitcast i8*%eU to i32*
store i32 1342177296,i32*%eV,align 4
%eW=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%eX=bitcast i8*%eT to i8**
store i8*%eW,i8**%eX,align 8
%eY=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%eZ=getelementptr inbounds i8,i8*%eT,i64 8
%e0=bitcast i8*%eZ to i8**
store i8*%eY,i8**%e0,align 8
%e1=getelementptr inbounds i8,i8*%eT,i64 16
%e2=bitcast i8*%e1 to i32*
store i32 3,i32*%e2,align 4
%e3=call fastcc i8*@_SMLFN6String1_ZE(i8*inreg%eT)
store i8*%e3,i8**%b,align 8
%e4=getelementptr inbounds i8,i8*%e3,i64 -4
%e5=bitcast i8*%e4 to i32*
%e6=load i32,i32*%e5,align 4
%e7=and i32%e6,268435455
%e8=add nsw i32%e7,-1
%e9=call i8*@sml_alloc(i32 inreg 20)#0
%fa=getelementptr inbounds i8,i8*%e9,i64 -4
%fb=bitcast i8*%fa to i32*
store i32 1342177296,i32*%fb,align 4
store i8*%e9,i8**%c,align 8
%fc=getelementptr inbounds i8,i8*%e9,i64 4
%fd=bitcast i8*%fc to i32*
store i32 0,i32*%fd,align 1
%fe=bitcast i8*%e9 to i32*
store i32%e8,i32*%fe,align 4
%ff=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%fg=getelementptr inbounds i8,i8*%e9,i64 8
%fh=bitcast i8*%fg to i8**
store i8*%ff,i8**%fh,align 8
%fi=getelementptr inbounds i8,i8*%e9,i64 16
%fj=bitcast i8*%fi to i32*
store i32 2,i32*%fj,align 4
%fk=call i8*@sml_alloc(i32 inreg 20)#0
%fl=getelementptr inbounds i8,i8*%fk,i64 -4
%fm=bitcast i8*%fl to i32*
store i32 1342177296,i32*%fm,align 4
store i8*%fk,i8**%b,align 8
%fn=getelementptr inbounds i8,i8*%fk,i64 4
%fo=bitcast i8*%fn to i32*
store i32 0,i32*%fo,align 1
%fp=bitcast i8*%fk to i32*
store i32 6,i32*%fp,align 4
%fq=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%fr=getelementptr inbounds i8,i8*%fk,i64 8
%fs=bitcast i8*%fr to i8**
store i8*%fq,i8**%fs,align 8
%ft=getelementptr inbounds i8,i8*%fk,i64 16
%fu=bitcast i8*%ft to i32*
store i32 2,i32*%fu,align 4
%fv=call i8*@sml_alloc(i32 inreg 20)#0
%fw=getelementptr inbounds i8,i8*%fv,i64 -4
%fx=bitcast i8*%fw to i32*
store i32 1342177296,i32*%fx,align 4
%fy=load i8*,i8**%b,align 8
%fz=bitcast i8*%fv to i8**
store i8*%fy,i8**%fz,align 8
%fA=getelementptr inbounds i8,i8*%fv,i64 8
%fB=bitcast i8*%fA to i8**
store i8*null,i8**%fB,align 8
%fC=getelementptr inbounds i8,i8*%fv,i64 16
%fD=bitcast i8*%fC to i32*
store i32 3,i32*%fD,align 4
store i8*null,i8**%c,align 8
%fE=call i8*@sml_alloc(i32 inreg 20)#0
%fF=getelementptr inbounds i8,i8*%fE,i64 -4
%fG=bitcast i8*%fF to i32*
store i32 1342177296,i32*%fG,align 4
%fH=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%fI=bitcast i8*%fE to i8**
store i8*%fH,i8**%fI,align 8
%fJ=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%fK=getelementptr inbounds i8,i8*%fE,i64 8
%fL=bitcast i8*%fK to i8**
store i8*%fJ,i8**%fL,align 8
%fM=getelementptr inbounds i8,i8*%fE,i64 16
%fN=bitcast i8*%fM to i32*
store i32 3,i32*%fN,align 4
%fO=load i8*,i8**%f,align 8
br label%fP
fP:
%fQ=phi i8*[%fO,%eC],[%d2,%dx]
%fR=phi i8*[%fE,%eC],[null,%dx]
store i8*null,i8**%f,align 8
%fS=call fastcc i8*%d0(i8*inreg%fQ,i8*inreg%fR)
%fT=getelementptr inbounds i8,i8*%fS,i64 16
%fU=bitcast i8*%fT to i8*(i8*,i8*)**
%fV=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%fU,align 8
%fW=bitcast i8*%fS to i8**
%fX=load i8*,i8**%fW,align 8
%fY=call fastcc i8*%fV(i8*inreg%fX,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bA,i64 0,i32 2)to i8*))
%fZ=getelementptr inbounds i8,i8*%fY,i64 16
%f0=bitcast i8*%fZ to i8*(i8*,i8*)**
%f1=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%f0,align 8
%f2=bitcast i8*%fY to i8**
%f3=load i8*,i8**%f2,align 8
%f4=call fastcc i8*%f1(i8*inreg%f3,i8*inreg getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bB,i64 0,i32 2,i64 0))
%f5=getelementptr inbounds i8,i8*%f4,i64 16
%f6=bitcast i8*%f5 to i8*(i8*,i8*)**
%f7=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%f6,align 8
%f8=bitcast i8*%f4 to i8**
%f9=load i8*,i8**%f8,align 8
%ga=call fastcc i8*%f7(i8*inreg%f9,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bC,i64 0,i32 2)to i8*))
%gb=getelementptr inbounds i8,i8*%ga,i64 16
%gc=bitcast i8*%gb to i8*(i8*,i8*)**
%gd=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%gc,align 8
%ge=bitcast i8*%ga to i8**
%gf=load i8*,i8**%ge,align 8
%gg=call fastcc i8*%gd(i8*inreg%gf,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bD,i64 0,i32 2)to i8*))
%gh=getelementptr inbounds i8,i8*%gg,i64 16
%gi=bitcast i8*%gh to i8*(i8*,i8*)**
%gj=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%gi,align 8
%gk=bitcast i8*%gg to i8**
%gl=load i8*,i8**%gk,align 8
%gm=call fastcc i8*%gj(i8*inreg%gl,i8*inreg null)
%gn=getelementptr inbounds i8,i8*%gm,i64 16
%go=bitcast i8*%gn to i8*(i8*,i8*)**
%gp=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%go,align 8
%gq=bitcast i8*%gm to i8**
%gr=load i8*,i8**%gq,align 8
%gs=call fastcc i8*%gp(i8*inreg%gr,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bE,i64 0,i32 2)to i8*))
%gt=getelementptr inbounds i8,i8*%gs,i64 16
%gu=bitcast i8*%gt to i8*(i8*,i8*)**
%gv=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%gu,align 8
%gw=bitcast i8*%gs to i8**
%gx=load i8*,i8**%gw,align 8
store i8*%gx,i8**%b,align 8
%gy=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%gz=getelementptr inbounds i8,i8*%gy,i64 8
%gA=bitcast i8*%gz to i8**
%gB=load i8*,i8**%gA,align 8
%gC=call fastcc i8*@_SMLLN10TermFormat12formatFormatE_722(i8*inreg%gB)
%gD=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%gE=call fastcc i8*%gv(i8*inreg%gD,i8*inreg%gC)
%gF=getelementptr inbounds i8,i8*%gE,i64 16
%gG=bitcast i8*%gF to i8*(i8*,i8*)**
%gH=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%gG,align 8
%gI=bitcast i8*%gE to i8**
%gJ=load i8*,i8**%gI,align 8
%gK=call fastcc i8*%gH(i8*inreg%gJ,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bF,i64 0,i32 2)to i8*))
%gL=getelementptr inbounds i8,i8*%gK,i64 16
%gM=bitcast i8*%gL to i8*(i8*,i8*)**
%gN=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%gM,align 8
%gO=bitcast i8*%gK to i8**
%gP=load i8*,i8**%gO,align 8
%gQ=call fastcc i8*%gN(i8*inreg%gP,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bG,i64 0,i32 2)to i8*))
%gR=getelementptr inbounds i8,i8*%gQ,i64 16
%gS=bitcast i8*%gR to i8*(i8*,i8*)**
%gT=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%gS,align 8
%gU=bitcast i8*%gQ to i8**
%gV=load i8*,i8**%gU,align 8
%gW=call fastcc i8*%gT(i8*inreg%gV,i8*inreg getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bH,i64 0,i32 2,i64 0))
%gX=getelementptr inbounds i8,i8*%gW,i64 16
%gY=bitcast i8*%gX to i8*(i8*,i8*)**
%gZ=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%gY,align 8
%g0=bitcast i8*%gW to i8**
%g1=load i8*,i8**%g0,align 8
%g2=call fastcc i8*%gZ(i8*inreg%g1,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bI,i64 0,i32 2)to i8*))
%g3=getelementptr inbounds i8,i8*%g2,i64 16
%g4=bitcast i8*%g3 to i8*(i8*,i8*)**
%g5=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%g4,align 8
%g6=bitcast i8*%g2 to i8**
%g7=load i8*,i8**%g6,align 8
%g8=tail call fastcc i8*%g5(i8*inreg%g7,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bJ,i64 0,i32 2)to i8*))
ret i8*%g8
g9:
%ha=call i8*@sml_alloc(i32 inreg 20)#0
%hb=getelementptr inbounds i8,i8*%ha,i64 -4
%hc=bitcast i8*%hb to i32*
store i32 1342177296,i32*%hc,align 4
store i8*%ha,i8**%b,align 8
%hd=getelementptr inbounds i8,i8*%ha,i64 4
%he=bitcast i8*%hd to i32*
store i32 0,i32*%he,align 1
%hf=bitcast i8*%ha to i32*
store i32 2,i32*%hf,align 4
%hg=getelementptr inbounds i8,i8*%ha,i64 8
%hh=bitcast i8*%hg to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[3x i8]}>,<{[4x i8],i32,[3x i8]}>*@bq,i64 0,i32 2,i64 0),i8**%hh,align 8
%hi=getelementptr inbounds i8,i8*%ha,i64 16
%hj=bitcast i8*%hi to i32*
store i32 2,i32*%hj,align 4
%hk=call i8*@sml_alloc(i32 inreg 20)#0
%hl=getelementptr inbounds i8,i8*%hk,i64 -4
%hm=bitcast i8*%hl to i32*
store i32 1342177296,i32*%hm,align 4
store i8*%hk,i8**%c,align 8
%hn=getelementptr inbounds i8,i8*%hk,i64 4
%ho=bitcast i8*%hn to i32*
store i32 0,i32*%ho,align 1
%hp=bitcast i8*%hk to i32*
store i32 6,i32*%hp,align 4
%hq=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%hr=getelementptr inbounds i8,i8*%hk,i64 8
%hs=bitcast i8*%hr to i8**
store i8*%hq,i8**%hs,align 8
%ht=getelementptr inbounds i8,i8*%hk,i64 16
%hu=bitcast i8*%ht to i32*
store i32 2,i32*%hu,align 4
%hv=call i8*@sml_alloc(i32 inreg 20)#0
%hw=getelementptr inbounds i8,i8*%hv,i64 -4
%hx=bitcast i8*%hw to i32*
store i32 1342177296,i32*%hx,align 4
%hy=load i8*,i8**%c,align 8
%hz=bitcast i8*%hv to i8**
store i8*%hy,i8**%hz,align 8
%hA=getelementptr inbounds i8,i8*%hv,i64 8
%hB=bitcast i8*%hA to i8**
store i8*null,i8**%hB,align 8
%hC=getelementptr inbounds i8,i8*%hv,i64 16
%hD=bitcast i8*%hC to i32*
store i32 3,i32*%hD,align 4
store i8*%hy,i8**%b,align 8
store i8*null,i8**%c,align 8
%hE=call i8*@sml_alloc(i32 inreg 20)#0
%hF=getelementptr inbounds i8,i8*%hE,i64 -4
%hG=bitcast i8*%hF to i32*
store i32 1342177296,i32*%hG,align 4
store i8*%hE,i8**%d,align 8
%hH=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%hI=bitcast i8*%hE to i8**
store i8*%hH,i8**%hI,align 8
%hJ=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%hK=getelementptr inbounds i8,i8*%hE,i64 8
%hL=bitcast i8*%hK to i8**
store i8*%hJ,i8**%hL,align 8
%hM=getelementptr inbounds i8,i8*%hE,i64 16
%hN=bitcast i8*%hM to i32*
store i32 3,i32*%hN,align 4
%hO=call i8*@sml_alloc(i32 inreg 20)#0
%hP=getelementptr inbounds i8,i8*%hO,i64 -4
%hQ=bitcast i8*%hP to i32*
store i32 1342177296,i32*%hQ,align 4
%hR=bitcast i8*%hO to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@i,i64 0,i32 2)to i8*),i8**%hR,align 8
%hS=load i8*,i8**%d,align 8
%hT=getelementptr inbounds i8,i8*%hO,i64 8
%hU=bitcast i8*%hT to i8**
store i8*%hS,i8**%hU,align 8
%hV=getelementptr inbounds i8,i8*%hO,i64 16
%hW=bitcast i8*%hV to i32*
store i32 3,i32*%hW,align 4
ret i8*%hO
hX:
%hY=getelementptr inbounds i8,i8*%l,i64 8
%hZ=bitcast i8*%hY to i8**
%h0=load i8*,i8**%hZ,align 8
store i8*%h0,i8**%d,align 8
%h1=bitcast i8*%h0 to i32*
%h2=load i32,i32*%h1,align 4
%h3=getelementptr inbounds i8,i8*%h0,i64 8
%h4=bitcast i8*%h3 to i8**
%h5=load i8*,i8**%h4,align 8
%h6=call fastcc i8*@_SMLFN6String8toStringE(i8*inreg%h5)
store i8*%h6,i8**%b,align 8
%h7=call i8*@sml_alloc(i32 inreg 20)#0
%h8=getelementptr inbounds i8,i8*%h7,i64 -4
%h9=bitcast i8*%h8 to i32*
store i32 1342177296,i32*%h9,align 4
%ia=bitcast i8*%h7 to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bn,i64 0,i32 2,i64 0),i8**%ia,align 8
%ib=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%ic=getelementptr inbounds i8,i8*%h7,i64 8
%id=bitcast i8*%ic to i8**
store i8*%ib,i8**%id,align 8
%ie=getelementptr inbounds i8,i8*%h7,i64 16
%if=bitcast i8*%ie to i32*
store i32 3,i32*%if,align 4
%ig=call fastcc i8*@_SMLFN6String1_ZE(i8*inreg%h7)
store i8*%ig,i8**%b,align 8
%ih=call i8*@sml_alloc(i32 inreg 20)#0
%ii=getelementptr inbounds i8,i8*%ih,i64 -4
%ij=bitcast i8*%ii to i32*
store i32 1342177296,i32*%ij,align 4
%ik=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%il=bitcast i8*%ih to i8**
store i8*%ik,i8**%il,align 8
%im=getelementptr inbounds i8,i8*%ih,i64 8
%in=bitcast i8*%im to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bn,i64 0,i32 2,i64 0),i8**%in,align 8
%io=getelementptr inbounds i8,i8*%ih,i64 16
%ip=bitcast i8*%io to i32*
store i32 3,i32*%ip,align 4
%iq=call fastcc i8*@_SMLFN6String1_ZE(i8*inreg%ih)
store i8*%iq,i8**%b,align 8
%ir=getelementptr inbounds i8,i8*%iq,i64 -4
%is=bitcast i8*%ir to i32*
%it=load i32,i32*%is,align 4
%iu=and i32%it,268435455
%iv=add nsw i32%iu,-1
%iw=call i8*@sml_alloc(i32 inreg 20)#0
%ix=getelementptr inbounds i8,i8*%iw,i64 -4
%iy=bitcast i8*%ix to i32*
store i32 1342177296,i32*%iy,align 4
store i8*%iw,i8**%c,align 8
%iz=getelementptr inbounds i8,i8*%iw,i64 4
%iA=bitcast i8*%iz to i32*
store i32 0,i32*%iA,align 1
%iB=bitcast i8*%iw to i32*
store i32%iv,i32*%iB,align 4
%iC=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%iD=getelementptr inbounds i8,i8*%iw,i64 8
%iE=bitcast i8*%iD to i8**
store i8*%iC,i8**%iE,align 8
%iF=getelementptr inbounds i8,i8*%iw,i64 16
%iG=bitcast i8*%iF to i32*
store i32 2,i32*%iG,align 4
%iH=call i8*@sml_alloc(i32 inreg 20)#0
%iI=getelementptr inbounds i8,i8*%iH,i64 -4
%iJ=bitcast i8*%iI to i32*
store i32 1342177296,i32*%iJ,align 4
store i8*%iH,i8**%b,align 8
%iK=getelementptr inbounds i8,i8*%iH,i64 4
%iL=bitcast i8*%iK to i32*
store i32 0,i32*%iL,align 1
%iM=bitcast i8*%iH to i32*
store i32 6,i32*%iM,align 4
%iN=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%iO=getelementptr inbounds i8,i8*%iH,i64 8
%iP=bitcast i8*%iO to i8**
store i8*%iN,i8**%iP,align 8
%iQ=getelementptr inbounds i8,i8*%iH,i64 16
%iR=bitcast i8*%iQ to i32*
store i32 2,i32*%iR,align 4
%iS=call i8*@sml_alloc(i32 inreg 20)#0
%iT=getelementptr inbounds i8,i8*%iS,i64 -4
%iU=bitcast i8*%iT to i32*
store i32 1342177296,i32*%iU,align 4
%iV=load i8*,i8**%b,align 8
%iW=bitcast i8*%iS to i8**
store i8*%iV,i8**%iW,align 8
%iX=getelementptr inbounds i8,i8*%iS,i64 8
%iY=bitcast i8*%iX to i8**
store i8*null,i8**%iY,align 8
%iZ=getelementptr inbounds i8,i8*%iS,i64 16
%i0=bitcast i8*%iZ to i32*
store i32 3,i32*%i0,align 4
store i8*null,i8**%c,align 8
%i1=call i8*@sml_alloc(i32 inreg 20)#0
%i2=getelementptr inbounds i8,i8*%i1,i64 -4
%i3=bitcast i8*%i2 to i32*
store i32 1342177296,i32*%i3,align 4
store i8*%i1,i8**%e,align 8
%i4=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%i5=bitcast i8*%i1 to i8**
store i8*%i4,i8**%i5,align 8
%i6=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%i7=getelementptr inbounds i8,i8*%i1,i64 8
%i8=bitcast i8*%i7 to i8**
store i8*%i6,i8**%i8,align 8
%i9=getelementptr inbounds i8,i8*%i1,i64 16
%ja=bitcast i8*%i9 to i32*
store i32 3,i32*%ja,align 4
%jb=call i8*@sml_alloc(i32 inreg 20)#0
%jc=getelementptr inbounds i8,i8*%jb,i64 -4
%jd=bitcast i8*%jc to i32*
store i32 1342177296,i32*%jd,align 4
store i8*%jb,i8**%f,align 8
%je=getelementptr inbounds i8,i8*%jb,i64 4
%jf=bitcast i8*%je to i32*
store i32 0,i32*%jf,align 1
%jg=bitcast i8*%jb to i32*
store i32 4,i32*%jg,align 4
%jh=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%ji=getelementptr inbounds i8,i8*%jb,i64 8
%jj=bitcast i8*%ji to i8**
store i8*%jh,i8**%jj,align 8
%jk=getelementptr inbounds i8,i8*%jb,i64 16
%jl=bitcast i8*%jk to i32*
store i32 2,i32*%jl,align 4
%jm=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%jn=getelementptr inbounds i8,i8*%jm,i64 8
%jo=bitcast i8*%jn to i32**
%jp=load i32*,i32**%jo,align 8
%jq=getelementptr inbounds i32,i32*%jp,i64 -1
%jr=load i32,i32*%jq,align 4
%js=and i32%jr,268435455
%jt=add nsw i32%js,-1
%ju=icmp eq i32%jt,%h2
br i1%ju,label%kB,label%jv
jv:
%jw=call fastcc i8*@_SMLFN5Int328toStringE(i32 inreg%h2)
store i8*%jw,i8**%b,align 8
%jx=call i8*@sml_alloc(i32 inreg 20)#0
%jy=getelementptr inbounds i8,i8*%jx,i64 -4
%jz=bitcast i8*%jy to i32*
store i32 1342177296,i32*%jz,align 4
%jA=bitcast i8*%jx to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bo,i64 0,i32 2,i64 0),i8**%jA,align 8
%jB=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%jC=getelementptr inbounds i8,i8*%jx,i64 8
%jD=bitcast i8*%jC to i8**
store i8*%jB,i8**%jD,align 8
%jE=getelementptr inbounds i8,i8*%jx,i64 16
%jF=bitcast i8*%jE to i32*
store i32 3,i32*%jF,align 4
%jG=call fastcc i8*@_SMLFN6String1_ZE(i8*inreg%jx)
store i8*%jG,i8**%b,align 8
%jH=call i8*@sml_alloc(i32 inreg 20)#0
%jI=getelementptr inbounds i8,i8*%jH,i64 -4
%jJ=bitcast i8*%jI to i32*
store i32 1342177296,i32*%jJ,align 4
%jK=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%jL=bitcast i8*%jH to i8**
store i8*%jK,i8**%jL,align 8
%jM=getelementptr inbounds i8,i8*%jH,i64 8
%jN=bitcast i8*%jM to i8**
store i8*getelementptr inbounds(<{[4x i8],i32,[2x i8]}>,<{[4x i8],i32,[2x i8]}>*@bp,i64 0,i32 2,i64 0),i8**%jN,align 8
%jO=getelementptr inbounds i8,i8*%jH,i64 16
%jP=bitcast i8*%jO to i32*
store i32 3,i32*%jP,align 4
%jQ=call fastcc i8*@_SMLFN6String1_ZE(i8*inreg%jH)
store i8*%jQ,i8**%b,align 8
%jR=getelementptr inbounds i8,i8*%jQ,i64 -4
%jS=bitcast i8*%jR to i32*
%jT=load i32,i32*%jS,align 4
%jU=and i32%jT,268435455
%jV=add nsw i32%jU,-1
%jW=call i8*@sml_alloc(i32 inreg 20)#0
%jX=getelementptr inbounds i8,i8*%jW,i64 -4
%jY=bitcast i8*%jX to i32*
store i32 1342177296,i32*%jY,align 4
store i8*%jW,i8**%c,align 8
%jZ=getelementptr inbounds i8,i8*%jW,i64 4
%j0=bitcast i8*%jZ to i32*
store i32 0,i32*%j0,align 1
%j1=bitcast i8*%jW to i32*
store i32%jV,i32*%j1,align 4
%j2=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%j3=getelementptr inbounds i8,i8*%jW,i64 8
%j4=bitcast i8*%j3 to i8**
store i8*%j2,i8**%j4,align 8
%j5=getelementptr inbounds i8,i8*%jW,i64 16
%j6=bitcast i8*%j5 to i32*
store i32 2,i32*%j6,align 4
%j7=call i8*@sml_alloc(i32 inreg 20)#0
%j8=getelementptr inbounds i8,i8*%j7,i64 -4
%j9=bitcast i8*%j8 to i32*
store i32 1342177296,i32*%j9,align 4
store i8*%j7,i8**%b,align 8
%ka=getelementptr inbounds i8,i8*%j7,i64 4
%kb=bitcast i8*%ka to i32*
store i32 0,i32*%kb,align 1
%kc=bitcast i8*%j7 to i32*
store i32 6,i32*%kc,align 4
%kd=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%ke=getelementptr inbounds i8,i8*%j7,i64 8
%kf=bitcast i8*%ke to i8**
store i8*%kd,i8**%kf,align 8
%kg=getelementptr inbounds i8,i8*%j7,i64 16
%kh=bitcast i8*%kg to i32*
store i32 2,i32*%kh,align 4
%ki=call i8*@sml_alloc(i32 inreg 20)#0
%kj=getelementptr inbounds i8,i8*%ki,i64 -4
%kk=bitcast i8*%kj to i32*
store i32 1342177296,i32*%kk,align 4
%kl=load i8*,i8**%b,align 8
%km=bitcast i8*%ki to i8**
store i8*%kl,i8**%km,align 8
%kn=getelementptr inbounds i8,i8*%ki,i64 8
%ko=bitcast i8*%kn to i8**
store i8*null,i8**%ko,align 8
%kp=getelementptr inbounds i8,i8*%ki,i64 16
%kq=bitcast i8*%kp to i32*
store i32 3,i32*%kq,align 4
store i8*null,i8**%c,align 8
%kr=call i8*@sml_alloc(i32 inreg 20)#0
%ks=getelementptr inbounds i8,i8*%kr,i64 -4
%kt=bitcast i8*%ks to i32*
store i32 1342177296,i32*%kt,align 4
%ku=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%kv=bitcast i8*%kr to i8**
store i8*%ku,i8**%kv,align 8
%kw=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%kx=getelementptr inbounds i8,i8*%kr,i64 8
%ky=bitcast i8*%kx to i8**
store i8*%kw,i8**%ky,align 8
%kz=getelementptr inbounds i8,i8*%kr,i64 16
%kA=bitcast i8*%kz to i32*
store i32 3,i32*%kA,align 4
br label%kB
kB:
%kC=phi i8*[%kr,%jv],[null,%hX]
store i8*%kC,i8**%b,align 8
%kD=call i8*@sml_alloc(i32 inreg 20)#0
%kE=getelementptr inbounds i8,i8*%kD,i64 -4
%kF=bitcast i8*%kE to i32*
store i32 1342177296,i32*%kF,align 4
store i8*%kD,i8**%c,align 8
%kG=load i8*,i8**%f,align 8
store i8*null,i8**%f,align 8
%kH=bitcast i8*%kD to i8**
store i8*%kG,i8**%kH,align 8
%kI=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%kJ=getelementptr inbounds i8,i8*%kD,i64 8
%kK=bitcast i8*%kJ to i8**
store i8*%kI,i8**%kK,align 8
%kL=getelementptr inbounds i8,i8*%kD,i64 16
%kM=bitcast i8*%kL to i32*
store i32 3,i32*%kM,align 4
%kN=call i8*@sml_alloc(i32 inreg 20)#0
%kO=getelementptr inbounds i8,i8*%kN,i64 -4
%kP=bitcast i8*%kO to i32*
store i32 1342177296,i32*%kP,align 4
%kQ=bitcast i8*%kN to i8**
store i8*bitcast(i32*getelementptr inbounds(<{[4x i8],i32,i32,[4x i8],i8*,i32}>,<{[4x i8],i32,i32,[4x i8],i8*,i32}>*@i,i64 0,i32 2)to i8*),i8**%kQ,align 8
%kR=load i8*,i8**%c,align 8
%kS=getelementptr inbounds i8,i8*%kN,i64 8
%kT=bitcast i8*%kS to i8**
store i8*%kR,i8**%kT,align 8
%kU=getelementptr inbounds i8,i8*%kN,i64 16
%kV=bitcast i8*%kU to i32*
store i32 3,i32*%kV,align 4
ret i8*%kN
}
define internal fastcc i8*@_SMLLN10TermFormat12formatFormatE_722(i8*inreg%a)unnamed_addr#2 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%g,label%f
f:
call void@sml_check(i32 inreg%d)
br label%g
g:
%h=call fastcc i8*@_SMLFN4List6concatE(i32 inreg 1,i32 inreg 8)
%i=getelementptr inbounds i8,i8*%h,i64 16
%j=bitcast i8*%i to i8*(i8*,i8*)**
%k=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%j,align 8
%l=bitcast i8*%h to i8**
%m=load i8*,i8**%l,align 8
store i8*%m,i8**%c,align 8
%n=call fastcc i8*@_SMLFN4List3mapE(i32 inreg 1,i32 inreg 8,i32 inreg 1,i32 inreg 8)
%o=getelementptr inbounds i8,i8*%n,i64 16
%p=bitcast i8*%o to i8*(i8*,i8*)**
%q=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%p,align 8
%r=bitcast i8*%n to i8**
%s=load i8*,i8**%r,align 8
%t=call fastcc i8*%q(i8*inreg%s,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bS,i64 0,i32 2)to i8*))
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%A=call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
%B=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%C=call fastcc i8*%k(i8*inreg%B,i8*inreg%A)
%D=icmp eq i8*%C,null
br i1%D,label%E,label%F
E:
ret i8*null
F:
%G=getelementptr inbounds i8,i8*%C,i64 8
%H=bitcast i8*%G to i8**
%I=load i8*,i8**%H,align 8
ret i8*%I
}
define fastcc i8*@_SMLFN10TermFormat7btvNameE(i32 inreg%a)#2 gc"smlsharp"{
%b=load atomic i32,i32*@sml_check_flag unordered,align 4
%c=icmp eq i32%b,0
br i1%c,label%e,label%d
d:
tail call void@sml_check(i32 inreg%b)
br label%e
e:
%f=tail call fastcc i8*@_SMLLN10TermFormat6tvNameE_614(i8 inreg 97,i32 inreg%a)
ret i8*%f
}
define internal fastcc i8*@_SMLLN10TermFormat12extendBtvEnvE_837(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i32*
%m=load i32,i32*%l,align 4
store i8*null,i8**%d,align 8
%n=getelementptr inbounds i8,i8*%j,i64 4
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=call fastcc i8*@_SMLLN10TermFormat12extendBtvEnvE_607(i32 inreg%m,i32 inreg%p)
%r=getelementptr inbounds i8,i8*%q,i64 16
%s=bitcast i8*%r to i8*(i8*,i8*)**
%t=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%s,align 8
%u=bitcast i8*%q to i8**
%v=load i8*,i8**%u,align 8
%w=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%x=call fastcc i8*%t(i8*inreg%v,i8*inreg%w)
ret i8*%x
}
define internal fastcc i8*@_SMLLN10TermFormat21extendBtvEnvWithOrderE_840(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
l:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%d,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%j,label%h
h:
call void@sml_check(i32 inreg%f)
%i=load i8*,i8**%e,align 8
br label%j
j:
%k=phi i8*[%i,%h],[%a,%l]
%m=bitcast i8*%k to i32*
%n=load i32,i32*%m,align 4
store i8*null,i8**%e,align 8
%o=getelementptr inbounds i8,i8*%k,i64 4
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=bitcast i8**%c to i8*
call void@llvm.lifetime.start.p0i8(i64 8,i8*%r)
call void@llvm.gcroot(i8**%c,i8*null)#0
%s=call i8*@sml_alloc(i32 inreg 12)#0
%t=bitcast i8*%s to i32*
%u=getelementptr inbounds i8,i8*%s,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177288,i32*%v,align 4
store i8*%s,i8**%c,align 8
store i32%n,i32*%t,align 4
%w=getelementptr inbounds i8,i8*%s,i64 4
%x=bitcast i8*%w to i32*
store i32%q,i32*%x,align 4
%y=getelementptr inbounds i8,i8*%s,i64 8
%z=bitcast i8*%y to i32*
store i32 0,i32*%z,align 4
%A=call i8*@sml_alloc(i32 inreg 28)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177304,i32*%C,align 4
%D=load i8*,i8**%c,align 8
%E=bitcast i8*%A to i8**
store i8*%D,i8**%E,align 8
%F=getelementptr inbounds i8,i8*%A,i64 8
%G=bitcast i8*%F to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat21extendBtvEnvWithOrderE_611 to void(...)*),void(...)**%G,align 8
%H=getelementptr inbounds i8,i8*%A,i64 16
%I=bitcast i8*%H to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat21extendBtvEnvWithOrderE_611 to void(...)*),void(...)**%I,align 8
%J=getelementptr inbounds i8,i8*%A,i64 24
%K=bitcast i8*%J to i32*
store i32 -2147483647,i32*%K,align 4
call void@llvm.lifetime.end.p0i8(i64 8,i8*%r)
%L=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%M=call fastcc i8*@_SMLLN10TermFormat21extendBtvEnvWithOrderE_611(i8*inreg%D,i8*inreg%L)
ret i8*%M
}
define internal fastcc i8*@_SMLLN10TermFormat16formatBoundTyvarE_843(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%m
i:
call void@sml_check(i32 inreg%e)
%j=load i8*,i8**%d,align 8
%k=bitcast i8**%c to i8***
%l=load i8**,i8***%k,align 8
br label%m
m:
%n=phi i8**[%l,%i],[%h,%g]
%o=phi i8*[%j,%i],[%b,%g]
store i8*null,i8**%d,align 8
%p=load i8*,i8**%n,align 8
%q=getelementptr inbounds i8,i8*%p,i64 16
%r=bitcast i8*%q to i8*(i8*,i8*)**
%s=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%r,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8**%n to i8***
%u=load i8**,i8***%t,align 8
%v=load i8*,i8**%u,align 8
%w=call fastcc i8*%s(i8*inreg%v,i8*inreg%o)
ret i8*%w
}
define internal fastcc i8*@_SMLLN10TermFormat16formatBoundTyvarE_844(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
l:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%d,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%j,label%h
h:
call void@sml_check(i32 inreg%f)
%i=load i8*,i8**%e,align 8
br label%j
j:
%k=phi i8*[%i,%h],[%a,%l]
%m=bitcast i8*%k to i32*
%n=load i32,i32*%m,align 4
store i8*null,i8**%e,align 8
%o=getelementptr inbounds i8,i8*%k,i64 4
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=bitcast i8**%c to i8*
call void@llvm.lifetime.start.p0i8(i64 8,i8*%r)
call void@llvm.gcroot(i8**%c,i8*null)#0
%s=call i8*@sml_alloc(i32 inreg 12)#0
%t=bitcast i8*%s to i32*
%u=getelementptr inbounds i8,i8*%s,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177288,i32*%v,align 4
store i8*%s,i8**%c,align 8
store i32%n,i32*%t,align 4
%w=getelementptr inbounds i8,i8*%s,i64 4
%x=bitcast i8*%w to i32*
store i32%q,i32*%x,align 4
%y=getelementptr inbounds i8,i8*%s,i64 8
%z=bitcast i8*%y to i32*
store i32 0,i32*%z,align 4
%A=call i8*@sml_alloc(i32 inreg 28)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177304,i32*%C,align 4
%D=load i8*,i8**%c,align 8
%E=bitcast i8*%A to i8**
store i8*%D,i8**%E,align 8
%F=getelementptr inbounds i8,i8*%A,i64 8
%G=bitcast i8*%F to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat16formatBoundTyvarE_650 to void(...)*),void(...)**%G,align 8
%H=getelementptr inbounds i8,i8*%A,i64 16
%I=bitcast i8*%H to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat16formatBoundTyvarE_650 to void(...)*),void(...)**%I,align 8
%J=getelementptr inbounds i8,i8*%A,i64 24
%K=bitcast i8*%J to i32*
store i32 -2147483647,i32*%K,align 4
call void@llvm.lifetime.end.p0i8(i64 8,i8*%r)
%L=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%M=call fastcc i8*@_SMLLN10TermFormat16formatBoundTyvarE_650(i8*inreg%D,i8*inreg%L)
store i8*%M,i8**%d,align 8
%N=call i8*@sml_alloc(i32 inreg 12)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32 1342177288,i32*%P,align 4
store i8*%N,i8**%e,align 8
%Q=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%R=bitcast i8*%N to i8**
store i8*%Q,i8**%R,align 8
%S=getelementptr inbounds i8,i8*%N,i64 8
%T=bitcast i8*%S to i32*
store i32 1,i32*%T,align 4
%U=call i8*@sml_alloc(i32 inreg 28)#0
%V=getelementptr inbounds i8,i8*%U,i64 -4
%W=bitcast i8*%V to i32*
store i32 1342177304,i32*%W,align 4
%X=load i8*,i8**%e,align 8
%Y=bitcast i8*%U to i8**
store i8*%X,i8**%Y,align 8
%Z=getelementptr inbounds i8,i8*%U,i64 8
%aa=bitcast i8*%Z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat16formatBoundTyvarE_843 to void(...)*),void(...)**%aa,align 8
%ab=getelementptr inbounds i8,i8*%U,i64 16
%ac=bitcast i8*%ab to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat16formatBoundTyvarE_843 to void(...)*),void(...)**%ac,align 8
%ad=getelementptr inbounds i8,i8*%U,i64 24
%ae=bitcast i8*%ad to i32*
store i32 -2147483647,i32*%ae,align 4
ret i8*%U
}
define internal fastcc i8*@_SMLLN10TermFormat12formatBtvEnvE_847(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%h,label%j
h:
%i=bitcast i8*%a to i8**
br label%n
j:
call void@sml_check(i32 inreg%f)
%k=bitcast i8**%d to i8***
%l=load i8**,i8***%k,align 8
%m=bitcast i8**%l to i8*
br label%n
n:
%o=phi i8*[%m,%j],[%a,%h]
%p=phi i8**[%l,%j],[%i,%h]
%q=load i8*,i8**%p,align 8
%r=getelementptr inbounds i8,i8*%q,i64 16
%s=bitcast i8*%r to i8*(i8*,i8*,i8*)**
%t=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%s,align 8
%u=bitcast i8*%q to i8**
%v=load i8*,i8**%u,align 8
store i8*%v,i8**%e,align 8
%w=getelementptr inbounds i8,i8*%o,i64 8
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
store i8*null,i8**%d,align 8
%z=getelementptr inbounds i8,i8*%o,i64 12
%A=bitcast i8*%z to i32*
%B=load i32,i32*%A,align 4
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%d,align 8
store i32%y,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32%B,i32*%H,align 4
%K=load i8*,i8**%e,align 8
%L=load i8*,i8**%d,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%d,align 8
%M=call fastcc i8*%t(i8*inreg%K,i8*inreg%L,i8*inreg%G)
%N=getelementptr inbounds i8,i8*%M,i64 16
%O=bitcast i8*%N to i8*(i8*,i8*)**
%P=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%O,align 8
%Q=bitcast i8*%M to i8**
%R=load i8*,i8**%Q,align 8
%S=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%T=call fastcc i8*%P(i8*inreg%R,i8*inreg%S)
ret i8*%T
}
define internal fastcc i8*@_SMLLN10TermFormat12formatBtvEnvE_848(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLLN10TermFormat12formatBtvEnvE_663(i8*inreg%m,i32 inreg%p,i32 inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
store i8*%A,i8**%c,align 8
%B=load i8*,i8**%d,align 8
%C=getelementptr inbounds i8,i8*%B,i64 8
%D=bitcast i8*%C to i32*
%E=load i32,i32*%D,align 4
store i8*null,i8**%d,align 8
%F=getelementptr inbounds i8,i8*%B,i64 12
%G=bitcast i8*%F to i32*
%H=load i32,i32*%G,align 4
%I=call i8*@sml_alloc(i32 inreg 20)#0
%J=getelementptr inbounds i8,i8*%I,i64 -4
%K=bitcast i8*%J to i32*
store i32 1342177296,i32*%K,align 4
store i8*%I,i8**%d,align 8
%L=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%M=bitcast i8*%I to i8**
store i8*%L,i8**%M,align 8
%N=getelementptr inbounds i8,i8*%I,i64 8
%O=bitcast i8*%N to i32*
store i32%E,i32*%O,align 4
%P=getelementptr inbounds i8,i8*%I,i64 12
%Q=bitcast i8*%P to i32*
store i32%H,i32*%Q,align 4
%R=getelementptr inbounds i8,i8*%I,i64 16
%S=bitcast i8*%R to i32*
store i32 1,i32*%S,align 4
%T=call i8*@sml_alloc(i32 inreg 28)#0
%U=getelementptr inbounds i8,i8*%T,i64 -4
%V=bitcast i8*%U to i32*
store i32 1342177304,i32*%V,align 4
%W=load i8*,i8**%d,align 8
%X=bitcast i8*%T to i8**
store i8*%W,i8**%X,align 8
%Y=getelementptr inbounds i8,i8*%T,i64 8
%Z=bitcast i8*%Y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12formatBtvEnvE_847 to void(...)*),void(...)**%Z,align 8
%aa=getelementptr inbounds i8,i8*%T,i64 16
%ab=bitcast i8*%aa to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12formatBtvEnvE_847 to void(...)*),void(...)**%ab,align 8
%ac=getelementptr inbounds i8,i8*%T,i64 24
%ad=bitcast i8*%ac to i32*
store i32 -2147483647,i32*%ad,align 4
ret i8*%T
}
define internal fastcc i8*@_SMLLN10TermFormat12formatBtvEnvE_849(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12formatBtvEnvE_848 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12formatBtvEnvE_848 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_850(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%h,label%j
h:
%i=bitcast i8*%a to i8**
br label%n
j:
call void@sml_check(i32 inreg%f)
%k=bitcast i8**%d to i8***
%l=load i8**,i8***%k,align 8
%m=bitcast i8**%l to i8*
br label%n
n:
%o=phi i8*[%m,%j],[%a,%h]
%p=phi i8**[%l,%j],[%i,%h]
%q=load i8*,i8**%p,align 8
%r=getelementptr inbounds i8,i8*%q,i64 16
%s=bitcast i8*%r to i8*(i8*,i8*,i8*)**
%t=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%s,align 8
%u=bitcast i8*%q to i8**
%v=load i8*,i8**%u,align 8
store i8*%v,i8**%e,align 8
%w=getelementptr inbounds i8,i8*%o,i64 8
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
store i8*null,i8**%d,align 8
%z=getelementptr inbounds i8,i8*%o,i64 12
%A=bitcast i8*%z to i32*
%B=load i32,i32*%A,align 4
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%d,align 8
store i32%y,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32%B,i32*%H,align 4
%K=load i8*,i8**%e,align 8
%L=load i8*,i8**%d,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%d,align 8
%M=call fastcc i8*%t(i8*inreg%K,i8*inreg%L,i8*inreg%G)
%N=getelementptr inbounds i8,i8*%M,i64 16
%O=bitcast i8*%N to i8*(i8*,i8*)**
%P=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%O,align 8
%Q=bitcast i8*%M to i8**
%R=load i8*,i8**%Q,align 8
%S=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%T=call fastcc i8*%P(i8*inreg%R,i8*inreg%S)
ret i8*%T
}
define internal fastcc i8*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_851(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_674(i8*inreg%m,i32 inreg%p,i32 inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
store i8*%A,i8**%c,align 8
%B=load i8*,i8**%d,align 8
%C=getelementptr inbounds i8,i8*%B,i64 8
%D=bitcast i8*%C to i32*
%E=load i32,i32*%D,align 4
store i8*null,i8**%d,align 8
%F=getelementptr inbounds i8,i8*%B,i64 12
%G=bitcast i8*%F to i32*
%H=load i32,i32*%G,align 4
%I=call i8*@sml_alloc(i32 inreg 20)#0
%J=getelementptr inbounds i8,i8*%I,i64 -4
%K=bitcast i8*%J to i32*
store i32 1342177296,i32*%K,align 4
store i8*%I,i8**%d,align 8
%L=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%M=bitcast i8*%I to i8**
store i8*%L,i8**%M,align 8
%N=getelementptr inbounds i8,i8*%I,i64 8
%O=bitcast i8*%N to i32*
store i32%E,i32*%O,align 4
%P=getelementptr inbounds i8,i8*%I,i64 12
%Q=bitcast i8*%P to i32*
store i32%H,i32*%Q,align 4
%R=getelementptr inbounds i8,i8*%I,i64 16
%S=bitcast i8*%R to i32*
store i32 1,i32*%S,align 4
%T=call i8*@sml_alloc(i32 inreg 28)#0
%U=getelementptr inbounds i8,i8*%T,i64 -4
%V=bitcast i8*%U to i32*
store i32 1342177304,i32*%V,align 4
%W=load i8*,i8**%d,align 8
%X=bitcast i8*%T to i8**
store i8*%W,i8**%X,align 8
%Y=getelementptr inbounds i8,i8*%T,i64 8
%Z=bitcast i8*%Y to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_850 to void(...)*),void(...)**%Z,align 8
%aa=getelementptr inbounds i8,i8*%T,i64 16
%ab=bitcast i8*%aa to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_850 to void(...)*),void(...)**%ab,align 8
%ac=getelementptr inbounds i8,i8*%T,i64 24
%ad=bitcast i8*%ac to i32*
store i32 -2147483647,i32*%ad,align 4
ret i8*%T
}
define internal fastcc i8*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_852(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_851 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_851 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define internal fastcc i8*@_SMLLN10TermFormat22formatEnclosedLabelMapE_853(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
%h=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
call void@llvm.gcroot(i8**%h,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%l,label%k
k:
call void@sml_check(i32 inreg%i)
br label%l
l:
%m=call fastcc i8*@_SMLLN10TermFormat17formatEnclosedMapE_365(i32 inreg 1,i32 inreg 8)
%n=getelementptr inbounds i8,i8*%m,i64 16
%o=bitcast i8*%n to i8*(i8*,i8*)**
%p=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%o,align 8
%q=bitcast i8*%m to i8**
%r=load i8*,i8**%q,align 8
%s=load i8*,i8**@_SMLZN11RecordLabel12format__labelE,align 8
%t=call fastcc i8*%p(i8*inreg%r,i8*inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*,i8*,i8*,i8*)**
%w=load i8*(i8*,i8*,i8*,i8*,i8*)*,i8*(i8*,i8*,i8*,i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
store i8*%y,i8**%e,align 8
%z=load i8*,i8**%c,align 8
%A=getelementptr inbounds i8,i8*%z,i64 8
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=getelementptr inbounds i8,i8*%z,i64 12
%E=bitcast i8*%D to i32*
%F=load i32,i32*%E,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i8*%G,i8**%f,align 8
store i32 1,i32*%H,align 4
%K=call i8*@sml_alloc(i32 inreg 4)#0
%L=bitcast i8*%K to i32*
%M=getelementptr inbounds i8,i8*%K,i64 -4
%N=bitcast i8*%M to i32*
store i32 4,i32*%N,align 4
store i8*%K,i8**%g,align 8
store i32 8,i32*%L,align 4
%O=call i8*@sml_alloc(i32 inreg 4)#0
%P=bitcast i8*%O to i32*
%Q=getelementptr inbounds i8,i8*%O,i64 -4
%R=bitcast i8*%Q to i32*
store i32 4,i32*%R,align 4
store i8*%O,i8**%h,align 8
store i32%C,i32*%P,align 4
%S=call i8*@sml_alloc(i32 inreg 4)#0
%T=bitcast i8*%S to i32*
%U=getelementptr inbounds i8,i8*%S,i64 -4
%V=bitcast i8*%U to i32*
store i32 4,i32*%V,align 4
store i32%F,i32*%T,align 4
%W=load i8*,i8**%e,align 8
%X=load i8*,i8**%f,align 8
%Y=load i8*,i8**%g,align 8
%Z=load i8*,i8**%h,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%f,align 8
store i8*null,i8**%g,align 8
store i8*null,i8**%h,align 8
%aa=call fastcc i8*%w(i8*inreg%W,i8*inreg%X,i8*inreg%Y,i8*inreg%Z,i8*inreg%S)
%ab=getelementptr inbounds i8,i8*%aa,i64 16
%ac=bitcast i8*%ab to i8*(i8*,i8*)**
%ad=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ac,align 8
%ae=bitcast i8*%aa to i8**
%af=load i8*,i8**%ae,align 8
store i8*%af,i8**%e,align 8
%ag=load i8*,i8**%c,align 8
%ah=getelementptr inbounds i8,i8*%ag,i64 8
%ai=bitcast i8*%ah to i32*
%aj=load i32,i32*%ai,align 4
%ak=getelementptr inbounds i8,i8*%ag,i64 12
%al=bitcast i8*%ak to i32*
%am=load i32,i32*%al,align 4
%an=call fastcc i8*@_SMLFN11RecordLabel3Map10listItemsiE(i32 inreg%aj,i32 inreg%am)
%ao=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%ap=call fastcc i8*%ad(i8*inreg%ao,i8*inreg%an)
%aq=getelementptr inbounds i8,i8*%ap,i64 16
%ar=bitcast i8*%aq to i8*(i8*,i8*)**
%as=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ar,align 8
%at=bitcast i8*%ap to i8**
%au=load i8*,i8**%at,align 8
%av=bitcast i8**%c to i8***
%aw=load i8**,i8***%av,align 8
store i8*null,i8**%c,align 8
%ax=load i8*,i8**%aw,align 8
%ay=call fastcc i8*%as(i8*inreg%au,i8*inreg%ax)
%az=getelementptr inbounds i8,i8*%ay,i64 16
%aA=bitcast i8*%az to i8*(i8*,i8*)**
%aB=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%aA,align 8
%aC=bitcast i8*%ay to i8**
%aD=load i8*,i8**%aC,align 8
%aE=load i8*,i8**%d,align 8
%aF=tail call fastcc i8*%aB(i8*inreg%aD,i8*inreg%aE)
ret i8*%aF
}
define internal fastcc i8*@_SMLLN10TermFormat22formatEnclosedLabelMapE_854(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat22formatEnclosedLabelMapE_853 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat22formatEnclosedLabelMapE_853 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat22formatEnclosedLabelMapE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat22formatEnclosedLabelMapE_854 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat22formatEnclosedLabelMapE_854 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLN10TermFormat17formatEnclosedMapE_857(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8**
br label%p
l:
call void@sml_check(i32 inreg%h)
%m=bitcast i8**%d to i8***
%n=load i8**,i8***%m,align 8
%o=bitcast i8**%n to i8*
br label%p
p:
%q=phi i8*[%o,%l],[%a,%j]
%r=phi i8**[%n,%l],[%k,%j]
%s=load i8*,i8**%r,align 8
%t=getelementptr inbounds i8,i8*%s,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*,i8*,i8*,i8*)**
%v=load i8*(i8*,i8*,i8*,i8*,i8*)*,i8*(i8*,i8*,i8*,i8*,i8*)**%u,align 8
%w=bitcast i8*%s to i8**
%x=load i8*,i8**%w,align 8
store i8*%x,i8**%e,align 8
%y=getelementptr inbounds i8,i8*%q,i64 8
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=getelementptr inbounds i8,i8*%q,i64 12
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=getelementptr inbounds i8,i8*%q,i64 16
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
store i8*null,i8**%d,align 8
%H=getelementptr inbounds i8,i8*%q,i64 20
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
%K=call i8*@sml_alloc(i32 inreg 4)#0
%L=bitcast i8*%K to i32*
%M=getelementptr inbounds i8,i8*%K,i64 -4
%N=bitcast i8*%M to i32*
store i32 4,i32*%N,align 4
store i8*%K,i8**%d,align 8
store i32%A,i32*%L,align 4
%O=call i8*@sml_alloc(i32 inreg 4)#0
%P=bitcast i8*%O to i32*
%Q=getelementptr inbounds i8,i8*%O,i64 -4
%R=bitcast i8*%Q to i32*
store i32 4,i32*%R,align 4
store i8*%O,i8**%f,align 8
store i32%D,i32*%P,align 4
%S=call i8*@sml_alloc(i32 inreg 4)#0
%T=bitcast i8*%S to i32*
%U=getelementptr inbounds i8,i8*%S,i64 -4
%V=bitcast i8*%U to i32*
store i32 4,i32*%V,align 4
store i8*%S,i8**%g,align 8
store i32%G,i32*%T,align 4
%W=call i8*@sml_alloc(i32 inreg 4)#0
%X=bitcast i8*%W to i32*
%Y=getelementptr inbounds i8,i8*%W,i64 -4
%Z=bitcast i8*%Y to i32*
store i32 4,i32*%Z,align 4
store i32%J,i32*%X,align 4
%aa=load i8*,i8**%e,align 8
%ab=load i8*,i8**%d,align 8
%ac=load i8*,i8**%f,align 8
%ad=load i8*,i8**%g,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%d,align 8
store i8*null,i8**%f,align 8
store i8*null,i8**%g,align 8
%ae=call fastcc i8*%v(i8*inreg%aa,i8*inreg%ab,i8*inreg%ac,i8*inreg%ad,i8*inreg%W)
%af=getelementptr inbounds i8,i8*%ae,i64 16
%ag=bitcast i8*%af to i8*(i8*,i8*)**
%ah=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ag,align 8
%ai=bitcast i8*%ae to i8**
%aj=load i8*,i8**%ai,align 8
%ak=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%al=call fastcc i8*%ah(i8*inreg%aj,i8*inreg%ak)
ret i8*%al
}
define internal fastcc i8*@_SMLLN10TermFormat17formatEnclosedMapE_858(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i32*
%m=load i32,i32*%l,align 4
%n=getelementptr inbounds i8,i8*%j,i64 4
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=call fastcc i8*@_SMLLN10TermFormat17formatEnclosedMapE_365(i32 inreg%m,i32 inreg%p)
%r=getelementptr inbounds i8,i8*%q,i64 16
%s=bitcast i8*%r to i8*(i8*,i8*)**
%t=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%s,align 8
%u=bitcast i8*%q to i8**
%v=load i8*,i8**%u,align 8
%w=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%x=call fastcc i8*%t(i8*inreg%v,i8*inreg%w)
store i8*%x,i8**%c,align 8
%y=load i8*,i8**%d,align 8
%z=getelementptr inbounds i8,i8*%y,i64 8
%A=bitcast i8*%z to i32*
%B=load i32,i32*%A,align 4
%C=getelementptr inbounds i8,i8*%y,i64 12
%D=bitcast i8*%C to i32*
%E=load i32,i32*%D,align 4
%F=getelementptr inbounds i8,i8*%y,i64 16
%G=bitcast i8*%F to i32*
%H=load i32,i32*%G,align 4
store i8*null,i8**%d,align 8
%I=getelementptr inbounds i8,i8*%y,i64 20
%J=bitcast i8*%I to i32*
%K=load i32,i32*%J,align 4
%L=call i8*@sml_alloc(i32 inreg 28)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32 1342177304,i32*%N,align 4
store i8*%L,i8**%d,align 8
%O=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%P=bitcast i8*%L to i8**
store i8*%O,i8**%P,align 8
%Q=getelementptr inbounds i8,i8*%L,i64 8
%R=bitcast i8*%Q to i32*
store i32%B,i32*%R,align 4
%S=getelementptr inbounds i8,i8*%L,i64 12
%T=bitcast i8*%S to i32*
store i32%E,i32*%T,align 4
%U=getelementptr inbounds i8,i8*%L,i64 16
%V=bitcast i8*%U to i32*
store i32%H,i32*%V,align 4
%W=getelementptr inbounds i8,i8*%L,i64 20
%X=bitcast i8*%W to i32*
store i32%K,i32*%X,align 4
%Y=getelementptr inbounds i8,i8*%L,i64 24
%Z=bitcast i8*%Y to i32*
store i32 1,i32*%Z,align 4
%aa=call i8*@sml_alloc(i32 inreg 28)#0
%ab=getelementptr inbounds i8,i8*%aa,i64 -4
%ac=bitcast i8*%ab to i32*
store i32 1342177304,i32*%ac,align 4
%ad=load i8*,i8**%d,align 8
%ae=bitcast i8*%aa to i8**
store i8*%ad,i8**%ae,align 8
%af=getelementptr inbounds i8,i8*%aa,i64 8
%ag=bitcast i8*%af to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat17formatEnclosedMapE_857 to void(...)*),void(...)**%ag,align 8
%ah=getelementptr inbounds i8,i8*%aa,i64 16
%ai=bitcast i8*%ah to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat17formatEnclosedMapE_857 to void(...)*),void(...)**%ai,align 8
%aj=getelementptr inbounds i8,i8*%aa,i64 24
%ak=bitcast i8*%aj to i32*
store i32 -2147483647,i32*%ak,align 4
ret i8*%aa
}
define fastcc i8*@_SMLFN10TermFormat17formatEnclosedMapE(i32 inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e,i32 inreg%f)#4 gc"smlsharp"{
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%g,i8*null)#0
%h=call i8*@sml_alloc(i32 inreg 28)#0
%i=bitcast i8*%h to i32*
%j=getelementptr inbounds i8,i8*%h,i64 -4
%k=bitcast i8*%j to i32*
store i32 1342177304,i32*%k,align 4
store i8*%h,i8**%g,align 8
store i32%a,i32*%i,align 4
%l=getelementptr inbounds i8,i8*%h,i64 4
%m=bitcast i8*%l to i32*
store i32%b,i32*%m,align 4
%n=getelementptr inbounds i8,i8*%h,i64 8
%o=bitcast i8*%n to i32*
store i32%c,i32*%o,align 4
%p=getelementptr inbounds i8,i8*%h,i64 12
%q=bitcast i8*%p to i32*
store i32%d,i32*%q,align 4
%r=getelementptr inbounds i8,i8*%h,i64 16
%s=bitcast i8*%r to i32*
store i32%e,i32*%s,align 4
%t=getelementptr inbounds i8,i8*%h,i64 20
%u=bitcast i8*%t to i32*
store i32%f,i32*%u,align 4
%v=getelementptr inbounds i8,i8*%h,i64 24
%w=bitcast i8*%v to i32*
store i32 0,i32*%w,align 4
%x=call i8*@sml_alloc(i32 inreg 28)#0
%y=getelementptr inbounds i8,i8*%x,i64 -4
%z=bitcast i8*%y to i32*
store i32 1342177304,i32*%z,align 4
%A=load i8*,i8**%g,align 8
%B=bitcast i8*%x to i8**
store i8*%A,i8**%B,align 8
%C=getelementptr inbounds i8,i8*%x,i64 8
%D=bitcast i8*%C to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat17formatEnclosedMapE_858 to void(...)*),void(...)**%D,align 8
%E=getelementptr inbounds i8,i8*%x,i64 16
%F=bitcast i8*%E to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat17formatEnclosedMapE_858 to void(...)*),void(...)**%F,align 8
%G=getelementptr inbounds i8,i8*%x,i64 24
%H=bitcast i8*%G to i32*
store i32 -2147483647,i32*%H,align 4
ret i8*%x
}
define fastcc i8*@_SMLFN10TermFormat12formatFormatE(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=tail call fastcc i8*@_SMLLN10TermFormat12formatFormatE_722(i8*inreg%h)
ret i8*%j
}
define internal fastcc i8*@_SMLLN10TermFormat12formatIfConsE_863(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
i:
%c=icmp eq i8*%b,null
br i1%c,label%g,label%d
d:
%e=bitcast i8*%a to i8**
%f=load i8*,i8**%e,align 8
br label%g
g:
%h=phi i8*[%f,%d],[null,%i]
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat12formatIfConsE_864(i8*inreg%a)#4 gc"smlsharp"{
%b=alloca i8*,align 8
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%a,i8**%b,align 8
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=getelementptr inbounds i8,i8*%d,i64 -4
%f=bitcast i8*%e to i32*
store i32 1342177288,i32*%f,align 4
store i8*%d,i8**%c,align 8
%g=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%h=bitcast i8*%d to i8**
store i8*%g,i8**%h,align 8
%i=getelementptr inbounds i8,i8*%d,i64 8
%j=bitcast i8*%i to i32*
store i32 1,i32*%j,align 4
%k=call i8*@sml_alloc(i32 inreg 28)#0
%l=getelementptr inbounds i8,i8*%k,i64 -4
%m=bitcast i8*%l to i32*
store i32 1342177304,i32*%m,align 4
%n=load i8*,i8**%c,align 8
%o=bitcast i8*%k to i8**
store i8*%n,i8**%o,align 8
%p=getelementptr inbounds i8,i8*%k,i64 8
%q=bitcast i8*%p to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12formatIfConsE_863 to void(...)*),void(...)**%q,align 8
%r=getelementptr inbounds i8,i8*%k,i64 16
%s=bitcast i8*%r to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12formatIfConsE_863 to void(...)*),void(...)**%s,align 8
%t=getelementptr inbounds i8,i8*%k,i64 24
%u=bitcast i8*%t to i32*
store i32 -2147483647,i32*%u,align 4
ret i8*%k
}
define fastcc i8*@_SMLFN10TermFormat12formatIfConsE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
ret i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bX,i64 0,i32 2)to i8*)
}
define internal fastcc i8*@_SMLLN10TermFormat13formatIfEmptyE_868(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%h,label%j
h:
%i=bitcast i8*%a to i8**
br label%n
j:
call void@sml_check(i32 inreg%f)
%k=bitcast i8**%c to i8***
%l=load i8**,i8***%k,align 8
%m=bitcast i8**%l to i8*
br label%n
n:
%o=phi i8*[%m,%j],[%a,%h]
%p=phi i8**[%l,%j],[%i,%h]
%q=load i8*,i8**%p,align 8
%r=getelementptr inbounds i8,i8*%q,i64 16
%s=bitcast i8*%r to i8*(i8*,i8*,i8*)**
%t=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%s,align 8
%u=bitcast i8*%q to i8**
%v=load i8*,i8**%u,align 8
store i8*%v,i8**%e,align 8
%w=getelementptr inbounds i8,i8*%o,i64 8
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
store i8*null,i8**%c,align 8
%z=getelementptr inbounds i8,i8*%o,i64 12
%A=bitcast i8*%z to i32*
%B=load i32,i32*%A,align 4
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%c,align 8
store i32%y,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32%B,i32*%H,align 4
%K=load i8*,i8**%e,align 8
%L=load i8*,i8**%c,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%c,align 8
%M=call fastcc i8*%t(i8*inreg%K,i8*inreg%L,i8*inreg%G)
%N=getelementptr inbounds i8,i8*%M,i64 16
%O=bitcast i8*%N to i8*(i8*,i8*)**
%P=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%O,align 8
%Q=bitcast i8*%M to i8**
%R=load i8*,i8**%Q,align 8
%S=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%T=call fastcc i8*%P(i8*inreg%R,i8*inreg%S)
ret i8*%T
}
define internal fastcc i8*@_SMLLN10TermFormat13formatIfEmptyE_869(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
m:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%f,align 8
store i8*%b,i8**%e,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%k,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%e,align 8
br label%k
k:
%l=phi i8*[%j,%i],[%b,%m]
store i8*null,i8**%e,align 8
%n=bitcast i8**%c to i8*
call void@llvm.lifetime.start.p0i8(i64 8,i8*%n)
%o=bitcast i8**%d to i8*
call void@llvm.lifetime.start.p0i8(i64 8,i8*%o)
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%l,i8**%c,align 8
%p=call i8*@sml_alloc(i32 inreg 12)#0
%q=getelementptr inbounds i8,i8*%p,i64 -4
%r=bitcast i8*%q to i32*
store i32 1342177288,i32*%r,align 4
store i8*%p,i8**%d,align 8
%s=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8*%p to i8**
store i8*%s,i8**%t,align 8
%u=getelementptr inbounds i8,i8*%p,i64 8
%v=bitcast i8*%u to i32*
store i32 1,i32*%v,align 4
%w=call i8*@sml_alloc(i32 inreg 28)#0
%x=getelementptr inbounds i8,i8*%w,i64 -4
%y=bitcast i8*%x to i32*
store i32 1342177304,i32*%y,align 4
%z=load i8*,i8**%d,align 8
%A=bitcast i8*%w to i8**
store i8*%z,i8**%A,align 8
%B=getelementptr inbounds i8,i8*%w,i64 8
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN10TermFormat13formatIfEmptyE_578 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%w,i64 16
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat13formatIfEmptyE_1102 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%w,i64 24
%G=bitcast i8*%F to i32*
store i32 -2147483647,i32*%G,align 4
call void@llvm.lifetime.end.p0i8(i64 8,i8*%n)
call void@llvm.lifetime.end.p0i8(i64 8,i8*%o)
store i8*%w,i8**%e,align 8
%H=load i8*,i8**%f,align 8
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
store i8*null,i8**%f,align 8
%K=getelementptr inbounds i8,i8*%H,i64 4
%L=bitcast i8*%K to i32*
%M=load i32,i32*%L,align 4
%N=call i8*@sml_alloc(i32 inreg 20)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32 1342177296,i32*%P,align 4
store i8*%N,i8**%f,align 8
%Q=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%R=bitcast i8*%N to i8**
store i8*%Q,i8**%R,align 8
%S=getelementptr inbounds i8,i8*%N,i64 8
%T=bitcast i8*%S to i32*
store i32%J,i32*%T,align 4
%U=getelementptr inbounds i8,i8*%N,i64 12
%V=bitcast i8*%U to i32*
store i32%M,i32*%V,align 4
%W=getelementptr inbounds i8,i8*%N,i64 16
%X=bitcast i8*%W to i32*
store i32 1,i32*%X,align 4
%Y=call i8*@sml_alloc(i32 inreg 28)#0
%Z=getelementptr inbounds i8,i8*%Y,i64 -4
%aa=bitcast i8*%Z to i32*
store i32 1342177304,i32*%aa,align 4
%ab=load i8*,i8**%f,align 8
%ac=bitcast i8*%Y to i8**
store i8*%ab,i8**%ac,align 8
%ad=getelementptr inbounds i8,i8*%Y,i64 8
%ae=bitcast i8*%ad to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat13formatIfEmptyE_868 to void(...)*),void(...)**%ae,align 8
%af=getelementptr inbounds i8,i8*%Y,i64 16
%ag=bitcast i8*%af to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat13formatIfEmptyE_868 to void(...)*),void(...)**%ag,align 8
%ah=getelementptr inbounds i8,i8*%Y,i64 24
%ai=bitcast i8*%ah to i32*
store i32 -2147483647,i32*%ai,align 4
ret i8*%Y
}
define fastcc i8*@_SMLFN10TermFormat13formatIfEmptyE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat13formatIfEmptyE_869 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat13formatIfEmptyE_869 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLN10TermFormat19formatIfEmptyFormatE_872(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%m
i:
call void@sml_check(i32 inreg%e)
%j=load i8*,i8**%d,align 8
%k=bitcast i8**%c to i8***
%l=load i8**,i8***%k,align 8
br label%m
m:
%n=phi i8**[%l,%i],[%h,%g]
%o=phi i8*[%j,%i],[%b,%g]
store i8*null,i8**%d,align 8
%p=load i8*,i8**%n,align 8
%q=getelementptr inbounds i8,i8*%p,i64 16
%r=bitcast i8*%q to i8*(i8*,i8*)**
%s=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%r,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8**%n to i8***
%u=load i8**,i8***%t,align 8
%v=load i8*,i8**%u,align 8
%w=call fastcc i8*%s(i8*inreg%v,i8*inreg%o)
ret i8*%w
}
define fastcc i8*@_SMLFN10TermFormat19formatIfEmptyFormatE(i8*inreg%a)#2 gc"smlsharp"{
l:
%b=alloca i8*,align 8
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%d,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%j,label%h
h:
call void@sml_check(i32 inreg%f)
%i=load i8*,i8**%d,align 8
br label%j
j:
%k=phi i8*[%i,%h],[%a,%l]
store i8*null,i8**%d,align 8
%m=bitcast i8**%b to i8*
call void@llvm.lifetime.start.p0i8(i64 8,i8*%m)
%n=bitcast i8**%c to i8*
call void@llvm.lifetime.start.p0i8(i64 8,i8*%n)
call void@llvm.gcroot(i8**%b,i8*null)#0
call void@llvm.gcroot(i8**%c,i8*null)#0
store i8*%k,i8**%b,align 8
%o=call i8*@sml_alloc(i32 inreg 12)#0
%p=getelementptr inbounds i8,i8*%o,i64 -4
%q=bitcast i8*%p to i32*
store i32 1342177288,i32*%q,align 4
store i8*%o,i8**%c,align 8
%r=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%s=bitcast i8*%o to i8**
store i8*%r,i8**%s,align 8
%t=getelementptr inbounds i8,i8*%o,i64 8
%u=bitcast i8*%t to i32*
store i32 1,i32*%u,align 4
%v=call i8*@sml_alloc(i32 inreg 28)#0
%w=getelementptr inbounds i8,i8*%v,i64 -4
%x=bitcast i8*%w to i32*
store i32 1342177304,i32*%x,align 4
%y=load i8*,i8**%c,align 8
%z=bitcast i8*%v to i8**
store i8*%y,i8**%z,align 8
%A=getelementptr inbounds i8,i8*%v,i64 8
%B=bitcast i8*%A to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat19formatIfEmptyFormatE_589 to void(...)*),void(...)**%B,align 8
%C=getelementptr inbounds i8,i8*%v,i64 16
%D=bitcast i8*%C to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat19formatIfEmptyFormatE_589 to void(...)*),void(...)**%D,align 8
%E=getelementptr inbounds i8,i8*%v,i64 24
%F=bitcast i8*%E to i32*
store i32 -2147483647,i32*%F,align 4
call void@llvm.lifetime.end.p0i8(i64 8,i8*%m)
call void@llvm.lifetime.end.p0i8(i64 8,i8*%n)
store i8*%v,i8**%d,align 8
%G=call i8*@sml_alloc(i32 inreg 12)#0
%H=getelementptr inbounds i8,i8*%G,i64 -4
%I=bitcast i8*%H to i32*
store i32 1342177288,i32*%I,align 4
store i8*%G,i8**%e,align 8
%J=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%K=bitcast i8*%G to i8**
store i8*%J,i8**%K,align 8
%L=getelementptr inbounds i8,i8*%G,i64 8
%M=bitcast i8*%L to i32*
store i32 1,i32*%M,align 4
%N=call i8*@sml_alloc(i32 inreg 28)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32 1342177304,i32*%P,align 4
%Q=load i8*,i8**%e,align 8
%R=bitcast i8*%N to i8**
store i8*%Q,i8**%R,align 8
%S=getelementptr inbounds i8,i8*%N,i64 8
%T=bitcast i8*%S to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat19formatIfEmptyFormatE_872 to void(...)*),void(...)**%T,align 8
%U=getelementptr inbounds i8,i8*%N,i64 16
%V=bitcast i8*%U to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat19formatIfEmptyFormatE_872 to void(...)*),void(...)**%V,align 8
%W=getelementptr inbounds i8,i8*%N,i64 24
%X=bitcast i8*%W to i32*
store i32 -2147483647,i32*%X,align 4
ret i8*%N
}
define internal fastcc i8*@_SMLLN10TermFormat22formatIfEmptySymbolMapE_875(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%h,label%j
h:
%i=bitcast i8*%a to i8**
br label%n
j:
call void@sml_check(i32 inreg%f)
%k=bitcast i8**%c to i8***
%l=load i8**,i8***%k,align 8
%m=bitcast i8**%l to i8*
br label%n
n:
%o=phi i8*[%m,%j],[%a,%h]
%p=phi i8**[%l,%j],[%i,%h]
%q=load i8*,i8**%p,align 8
%r=getelementptr inbounds i8,i8*%q,i64 16
%s=bitcast i8*%r to i8*(i8*,i8*,i8*)**
%t=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%s,align 8
%u=bitcast i8*%q to i8**
%v=load i8*,i8**%u,align 8
store i8*%v,i8**%e,align 8
%w=getelementptr inbounds i8,i8*%o,i64 8
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
store i8*null,i8**%c,align 8
%z=getelementptr inbounds i8,i8*%o,i64 12
%A=bitcast i8*%z to i32*
%B=load i32,i32*%A,align 4
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%c,align 8
store i32%y,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32%B,i32*%H,align 4
%K=load i8*,i8**%e,align 8
%L=load i8*,i8**%c,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%c,align 8
%M=call fastcc i8*%t(i8*inreg%K,i8*inreg%L,i8*inreg%G)
%N=getelementptr inbounds i8,i8*%M,i64 16
%O=bitcast i8*%N to i8*(i8*,i8*)**
%P=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%O,align 8
%Q=bitcast i8*%M to i8**
%R=load i8*,i8**%Q,align 8
%S=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%T=call fastcc i8*%P(i8*inreg%R,i8*inreg%S)
ret i8*%T
}
define internal fastcc i8*@_SMLLN10TermFormat22formatIfEmptySymbolMapE_876(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
m:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%f,align 8
store i8*%b,i8**%e,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%k,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%e,align 8
br label%k
k:
%l=phi i8*[%j,%i],[%b,%m]
store i8*null,i8**%e,align 8
%n=bitcast i8**%c to i8*
call void@llvm.lifetime.start.p0i8(i64 8,i8*%n)
%o=bitcast i8**%d to i8*
call void@llvm.lifetime.start.p0i8(i64 8,i8*%o)
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%l,i8**%c,align 8
%p=call i8*@sml_alloc(i32 inreg 12)#0
%q=getelementptr inbounds i8,i8*%p,i64 -4
%r=bitcast i8*%q to i32*
store i32 1342177288,i32*%r,align 4
store i8*%p,i8**%d,align 8
%s=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8*%p to i8**
store i8*%s,i8**%t,align 8
%u=getelementptr inbounds i8,i8*%p,i64 8
%v=bitcast i8*%u to i32*
store i32 1,i32*%v,align 4
%w=call i8*@sml_alloc(i32 inreg 28)#0
%x=getelementptr inbounds i8,i8*%w,i64 -4
%y=bitcast i8*%x to i32*
store i32 1342177304,i32*%y,align 4
%z=load i8*,i8**%d,align 8
%A=bitcast i8*%w to i8**
store i8*%z,i8**%A,align 8
%B=getelementptr inbounds i8,i8*%w,i64 8
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN10TermFormat22formatIfEmptySymbolMapE_586 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%w,i64 16
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat22formatIfEmptySymbolMapE_1106 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%w,i64 24
%G=bitcast i8*%F to i32*
store i32 -2147483647,i32*%G,align 4
call void@llvm.lifetime.end.p0i8(i64 8,i8*%n)
call void@llvm.lifetime.end.p0i8(i64 8,i8*%o)
store i8*%w,i8**%e,align 8
%H=load i8*,i8**%f,align 8
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
store i8*null,i8**%f,align 8
%K=getelementptr inbounds i8,i8*%H,i64 4
%L=bitcast i8*%K to i32*
%M=load i32,i32*%L,align 4
%N=call i8*@sml_alloc(i32 inreg 20)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32 1342177296,i32*%P,align 4
store i8*%N,i8**%f,align 8
%Q=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%R=bitcast i8*%N to i8**
store i8*%Q,i8**%R,align 8
%S=getelementptr inbounds i8,i8*%N,i64 8
%T=bitcast i8*%S to i32*
store i32%J,i32*%T,align 4
%U=getelementptr inbounds i8,i8*%N,i64 12
%V=bitcast i8*%U to i32*
store i32%M,i32*%V,align 4
%W=getelementptr inbounds i8,i8*%N,i64 16
%X=bitcast i8*%W to i32*
store i32 1,i32*%X,align 4
%Y=call i8*@sml_alloc(i32 inreg 28)#0
%Z=getelementptr inbounds i8,i8*%Y,i64 -4
%aa=bitcast i8*%Z to i32*
store i32 1342177304,i32*%aa,align 4
%ab=load i8*,i8**%f,align 8
%ac=bitcast i8*%Y to i8**
store i8*%ab,i8**%ac,align 8
%ad=getelementptr inbounds i8,i8*%Y,i64 8
%ae=bitcast i8*%ad to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat22formatIfEmptySymbolMapE_875 to void(...)*),void(...)**%ae,align 8
%af=getelementptr inbounds i8,i8*%Y,i64 16
%ag=bitcast i8*%af to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat22formatIfEmptySymbolMapE_875 to void(...)*),void(...)**%ag,align 8
%ah=getelementptr inbounds i8,i8*%Y,i64 24
%ai=bitcast i8*%ah to i32*
store i32 -2147483647,i32*%ai,align 4
ret i8*%Y
}
define fastcc i8*@_SMLFN10TermFormat22formatIfEmptySymbolMapE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat22formatIfEmptySymbolMapE_876 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat22formatIfEmptySymbolMapE_876 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLN10TermFormat12formatIfListE_879(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
x:
%c=getelementptr inbounds i8,i8*%a,i64 8
%d=bitcast i8*%c to i32*
%e=load i32,i32*%d,align 4
%f=icmp eq i8*%b,null
br i1%f,label%v,label%g
g:
%h=add i32%e,-1
%i=sub i32 0,%e
%j=and i32%h,%i
%k=add i32%e,7
%l=add i32%k,%j
%m=and i32%l,-8
%n=sext i32%m to i64
%o=getelementptr inbounds i8,i8*%b,i64%n
%p=bitcast i8*%o to i8**
%q=load i8*,i8**%p,align 8
%r=icmp eq i8*%q,null
br i1%r,label%v,label%s
s:
%t=bitcast i8*%a to i8**
%u=load i8*,i8**%t,align 8
br label%v
v:
%w=phi i8*[null,%x],[%u,%s],[null,%g]
ret i8*%w
}
define internal fastcc i8*@_SMLLN10TermFormat12formatIfListE_880(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=call i8*@sml_alloc(i32 inreg 20)#0
%h=getelementptr inbounds i8,i8*%g,i64 -4
%i=bitcast i8*%h to i32*
store i32 1342177296,i32*%i,align 4
store i8*%g,i8**%d,align 8
%j=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%k=bitcast i8*%g to i8**
store i8*%j,i8**%k,align 8
%l=getelementptr inbounds i8,i8*%g,i64 8
%m=bitcast i8*%l to i32*
store i32%f,i32*%m,align 4
%n=getelementptr inbounds i8,i8*%g,i64 16
%o=bitcast i8*%n to i32*
store i32 1,i32*%o,align 4
%p=call i8*@sml_alloc(i32 inreg 28)#0
%q=getelementptr inbounds i8,i8*%p,i64 -4
%r=bitcast i8*%q to i32*
store i32 1342177304,i32*%r,align 4
%s=load i8*,i8**%d,align 8
%t=bitcast i8*%p to i8**
store i8*%s,i8**%t,align 8
%u=getelementptr inbounds i8,i8*%p,i64 8
%v=bitcast i8*%u to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12formatIfListE_879 to void(...)*),void(...)**%v,align 8
%w=getelementptr inbounds i8,i8*%p,i64 16
%x=bitcast i8*%w to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12formatIfListE_879 to void(...)*),void(...)**%x,align 8
%y=getelementptr inbounds i8,i8*%p,i64 24
%z=bitcast i8*%y to i32*
store i32 -2147483647,i32*%z,align 4
ret i8*%p
}
define fastcc i8*@_SMLFN10TermFormat12formatIfListE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%b,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 8
%i=bitcast i8*%h to i32*
store i32 0,i32*%i,align 4
%j=call i8*@sml_alloc(i32 inreg 28)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177304,i32*%l,align 4
%m=load i8*,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12formatIfListE_880 to void(...)*),void(...)**%p,align 8
%q=getelementptr inbounds i8,i8*%j,i64 16
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12formatIfListE_880 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%j,i64 24
%t=bitcast i8*%s to i32*
store i32 -2147483647,i32*%t,align 4
ret i8*%j
}
define internal fastcc i8*@_SMLLN10TermFormat16formatIfNonEmptyE_883(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%h,label%j
h:
%i=bitcast i8*%a to i8**
br label%n
j:
call void@sml_check(i32 inreg%f)
%k=bitcast i8**%c to i8***
%l=load i8**,i8***%k,align 8
%m=bitcast i8**%l to i8*
br label%n
n:
%o=phi i8*[%m,%j],[%a,%h]
%p=phi i8**[%l,%j],[%i,%h]
%q=load i8*,i8**%p,align 8
%r=getelementptr inbounds i8,i8*%q,i64 16
%s=bitcast i8*%r to i8*(i8*,i8*,i8*)**
%t=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%s,align 8
%u=bitcast i8*%q to i8**
%v=load i8*,i8**%u,align 8
store i8*%v,i8**%e,align 8
%w=getelementptr inbounds i8,i8*%o,i64 8
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
store i8*null,i8**%c,align 8
%z=getelementptr inbounds i8,i8*%o,i64 12
%A=bitcast i8*%z to i32*
%B=load i32,i32*%A,align 4
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%c,align 8
store i32%y,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32%B,i32*%H,align 4
%K=load i8*,i8**%e,align 8
%L=load i8*,i8**%c,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%c,align 8
%M=call fastcc i8*%t(i8*inreg%K,i8*inreg%L,i8*inreg%G)
%N=getelementptr inbounds i8,i8*%M,i64 16
%O=bitcast i8*%N to i8*(i8*,i8*)**
%P=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%O,align 8
%Q=bitcast i8*%M to i8**
%R=load i8*,i8**%Q,align 8
%S=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%T=call fastcc i8*%P(i8*inreg%R,i8*inreg%S)
ret i8*%T
}
define internal fastcc i8*@_SMLLN10TermFormat16formatIfNonEmptyE_884(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
m:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%f,align 8
store i8*%b,i8**%e,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%k,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%e,align 8
br label%k
k:
%l=phi i8*[%j,%i],[%b,%m]
store i8*null,i8**%e,align 8
%n=bitcast i8**%c to i8*
call void@llvm.lifetime.start.p0i8(i64 8,i8*%n)
%o=bitcast i8**%d to i8*
call void@llvm.lifetime.start.p0i8(i64 8,i8*%o)
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%l,i8**%c,align 8
%p=call i8*@sml_alloc(i32 inreg 12)#0
%q=getelementptr inbounds i8,i8*%p,i64 -4
%r=bitcast i8*%q to i32*
store i32 1342177288,i32*%r,align 4
store i8*%p,i8**%d,align 8
%s=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8*%p to i8**
store i8*%s,i8**%t,align 8
%u=getelementptr inbounds i8,i8*%p,i64 8
%v=bitcast i8*%u to i32*
store i32 1,i32*%v,align 4
%w=call i8*@sml_alloc(i32 inreg 28)#0
%x=getelementptr inbounds i8,i8*%w,i64 -4
%y=bitcast i8*%x to i32*
store i32 1342177304,i32*%y,align 4
%z=load i8*,i8**%d,align 8
%A=bitcast i8*%w to i8**
store i8*%z,i8**%A,align 8
%B=getelementptr inbounds i8,i8*%w,i64 8
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN10TermFormat16formatIfNonEmptyE_574 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%w,i64 16
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat16formatIfNonEmptyE_1100 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%w,i64 24
%G=bitcast i8*%F to i32*
store i32 -2147483647,i32*%G,align 4
call void@llvm.lifetime.end.p0i8(i64 8,i8*%n)
call void@llvm.lifetime.end.p0i8(i64 8,i8*%o)
store i8*%w,i8**%e,align 8
%H=load i8*,i8**%f,align 8
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
store i8*null,i8**%f,align 8
%K=getelementptr inbounds i8,i8*%H,i64 4
%L=bitcast i8*%K to i32*
%M=load i32,i32*%L,align 4
%N=call i8*@sml_alloc(i32 inreg 20)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32 1342177296,i32*%P,align 4
store i8*%N,i8**%f,align 8
%Q=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%R=bitcast i8*%N to i8**
store i8*%Q,i8**%R,align 8
%S=getelementptr inbounds i8,i8*%N,i64 8
%T=bitcast i8*%S to i32*
store i32%J,i32*%T,align 4
%U=getelementptr inbounds i8,i8*%N,i64 12
%V=bitcast i8*%U to i32*
store i32%M,i32*%V,align 4
%W=getelementptr inbounds i8,i8*%N,i64 16
%X=bitcast i8*%W to i32*
store i32 1,i32*%X,align 4
%Y=call i8*@sml_alloc(i32 inreg 28)#0
%Z=getelementptr inbounds i8,i8*%Y,i64 -4
%aa=bitcast i8*%Z to i32*
store i32 1342177304,i32*%aa,align 4
%ab=load i8*,i8**%f,align 8
%ac=bitcast i8*%Y to i8**
store i8*%ab,i8**%ac,align 8
%ad=getelementptr inbounds i8,i8*%Y,i64 8
%ae=bitcast i8*%ad to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat16formatIfNonEmptyE_883 to void(...)*),void(...)**%ae,align 8
%af=getelementptr inbounds i8,i8*%Y,i64 16
%ag=bitcast i8*%af to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat16formatIfNonEmptyE_883 to void(...)*),void(...)**%ag,align 8
%ah=getelementptr inbounds i8,i8*%Y,i64 24
%ai=bitcast i8*%ah to i32*
store i32 -2147483647,i32*%ai,align 4
ret i8*%Y
}
define fastcc i8*@_SMLFN10TermFormat16formatIfNonEmptyE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat16formatIfNonEmptyE_884 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat16formatIfNonEmptyE_884 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLN10TermFormat25formatIfNonEmptySymbolMapE_887(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%h,label%j
h:
%i=bitcast i8*%a to i8**
br label%n
j:
call void@sml_check(i32 inreg%f)
%k=bitcast i8**%c to i8***
%l=load i8**,i8***%k,align 8
%m=bitcast i8**%l to i8*
br label%n
n:
%o=phi i8*[%m,%j],[%a,%h]
%p=phi i8**[%l,%j],[%i,%h]
%q=load i8*,i8**%p,align 8
%r=getelementptr inbounds i8,i8*%q,i64 16
%s=bitcast i8*%r to i8*(i8*,i8*,i8*)**
%t=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%s,align 8
%u=bitcast i8*%q to i8**
%v=load i8*,i8**%u,align 8
store i8*%v,i8**%e,align 8
%w=getelementptr inbounds i8,i8*%o,i64 8
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
store i8*null,i8**%c,align 8
%z=getelementptr inbounds i8,i8*%o,i64 12
%A=bitcast i8*%z to i32*
%B=load i32,i32*%A,align 4
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%c,align 8
store i32%y,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32%B,i32*%H,align 4
%K=load i8*,i8**%e,align 8
%L=load i8*,i8**%c,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%c,align 8
%M=call fastcc i8*%t(i8*inreg%K,i8*inreg%L,i8*inreg%G)
%N=getelementptr inbounds i8,i8*%M,i64 16
%O=bitcast i8*%N to i8*(i8*,i8*)**
%P=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%O,align 8
%Q=bitcast i8*%M to i8**
%R=load i8*,i8**%Q,align 8
%S=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%T=call fastcc i8*%P(i8*inreg%R,i8*inreg%S)
ret i8*%T
}
define internal fastcc i8*@_SMLLN10TermFormat25formatIfNonEmptySymbolMapE_888(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
m:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%f,align 8
store i8*%b,i8**%e,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%k,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%e,align 8
br label%k
k:
%l=phi i8*[%j,%i],[%b,%m]
store i8*null,i8**%e,align 8
%n=bitcast i8**%c to i8*
call void@llvm.lifetime.start.p0i8(i64 8,i8*%n)
%o=bitcast i8**%d to i8*
call void@llvm.lifetime.start.p0i8(i64 8,i8*%o)
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%l,i8**%c,align 8
%p=call i8*@sml_alloc(i32 inreg 12)#0
%q=getelementptr inbounds i8,i8*%p,i64 -4
%r=bitcast i8*%q to i32*
store i32 1342177288,i32*%r,align 4
store i8*%p,i8**%d,align 8
%s=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8*%p to i8**
store i8*%s,i8**%t,align 8
%u=getelementptr inbounds i8,i8*%p,i64 8
%v=bitcast i8*%u to i32*
store i32 1,i32*%v,align 4
%w=call i8*@sml_alloc(i32 inreg 28)#0
%x=getelementptr inbounds i8,i8*%w,i64 -4
%y=bitcast i8*%x to i32*
store i32 1342177304,i32*%y,align 4
%z=load i8*,i8**%d,align 8
%A=bitcast i8*%w to i8**
store i8*%z,i8**%A,align 8
%B=getelementptr inbounds i8,i8*%w,i64 8
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN10TermFormat25formatIfNonEmptySymbolMapE_582 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%w,i64 16
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat25formatIfNonEmptySymbolMapE_1104 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%w,i64 24
%G=bitcast i8*%F to i32*
store i32 -2147483647,i32*%G,align 4
call void@llvm.lifetime.end.p0i8(i64 8,i8*%n)
call void@llvm.lifetime.end.p0i8(i64 8,i8*%o)
store i8*%w,i8**%e,align 8
%H=load i8*,i8**%f,align 8
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
store i8*null,i8**%f,align 8
%K=getelementptr inbounds i8,i8*%H,i64 4
%L=bitcast i8*%K to i32*
%M=load i32,i32*%L,align 4
%N=call i8*@sml_alloc(i32 inreg 20)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32 1342177296,i32*%P,align 4
store i8*%N,i8**%f,align 8
%Q=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%R=bitcast i8*%N to i8**
store i8*%Q,i8**%R,align 8
%S=getelementptr inbounds i8,i8*%N,i64 8
%T=bitcast i8*%S to i32*
store i32%J,i32*%T,align 4
%U=getelementptr inbounds i8,i8*%N,i64 12
%V=bitcast i8*%U to i32*
store i32%M,i32*%V,align 4
%W=getelementptr inbounds i8,i8*%N,i64 16
%X=bitcast i8*%W to i32*
store i32 1,i32*%X,align 4
%Y=call i8*@sml_alloc(i32 inreg 28)#0
%Z=getelementptr inbounds i8,i8*%Y,i64 -4
%aa=bitcast i8*%Z to i32*
store i32 1342177304,i32*%aa,align 4
%ab=load i8*,i8**%f,align 8
%ac=bitcast i8*%Y to i8**
store i8*%ab,i8**%ac,align 8
%ad=getelementptr inbounds i8,i8*%Y,i64 8
%ae=bitcast i8*%ad to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat25formatIfNonEmptySymbolMapE_887 to void(...)*),void(...)**%ae,align 8
%af=getelementptr inbounds i8,i8*%Y,i64 16
%ag=bitcast i8*%af to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat25formatIfNonEmptySymbolMapE_887 to void(...)*),void(...)**%ag,align 8
%ah=getelementptr inbounds i8,i8*%Y,i64 24
%ai=bitcast i8*%ah to i32*
store i32 -2147483647,i32*%ai,align 4
ret i8*%Y
}
define fastcc i8*@_SMLFN10TermFormat25formatIfNonEmptySymbolMapE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat25formatIfNonEmptySymbolMapE_888 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat25formatIfNonEmptySymbolMapE_888 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLN10TermFormat18formatOptionalListE_891(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%c,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%b,%k]
%l=icmp eq i8*%j,null
br i1%l,label%m,label%n
m:
ret i8*null
n:
%o=load i8*,i8**%d,align 8
%p=getelementptr inbounds i8,i8*%o,i64 8
%q=bitcast i8*%p to i32*
%r=load i32,i32*%q,align 4
%s=getelementptr inbounds i8,i8*%o,i64 12
%t=bitcast i8*%s to i32*
%u=load i32,i32*%t,align 4
%v=call fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_293(i32 inreg%r,i32 inreg%u)
%w=getelementptr inbounds i8,i8*%v,i64 16
%x=bitcast i8*%w to i8*(i8*,i8*)**
%y=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%x,align 8
%z=bitcast i8*%v to i8**
%A=load i8*,i8**%z,align 8
%B=bitcast i8**%d to i8***
%C=load i8**,i8***%B,align 8
store i8*null,i8**%d,align 8
%D=load i8*,i8**%C,align 8
%E=call fastcc i8*%y(i8*inreg%A,i8*inreg%D)
%F=getelementptr inbounds i8,i8*%E,i64 16
%G=bitcast i8*%F to i8*(i8*,i8*)**
%H=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%G,align 8
%I=bitcast i8*%E to i8**
%J=load i8*,i8**%I,align 8
%K=load i8*,i8**%c,align 8
%L=tail call fastcc i8*%H(i8*inreg%J,i8*inreg%K)
ret i8*%L
}
define internal fastcc i8*@_SMLLN10TermFormat18formatOptionalListE_892(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%b,i8**%c,align 8
%e=bitcast i8*%a to i32*
%f=load i32,i32*%e,align 4
%g=getelementptr inbounds i8,i8*%a,i64 4
%h=bitcast i8*%g to i32*
%i=load i32,i32*%h,align 4
%j=call i8*@sml_alloc(i32 inreg 20)#0
%k=getelementptr inbounds i8,i8*%j,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177296,i32*%l,align 4
store i8*%j,i8**%d,align 8
%m=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%n=bitcast i8*%j to i8**
store i8*%m,i8**%n,align 8
%o=getelementptr inbounds i8,i8*%j,i64 8
%p=bitcast i8*%o to i32*
store i32%f,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
store i32%i,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%j,i64 16
%t=bitcast i8*%s to i32*
store i32 1,i32*%t,align 4
%u=call i8*@sml_alloc(i32 inreg 28)#0
%v=getelementptr inbounds i8,i8*%u,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177304,i32*%w,align 4
%x=load i8*,i8**%d,align 8
%y=bitcast i8*%u to i8**
store i8*%x,i8**%y,align 8
%z=getelementptr inbounds i8,i8*%u,i64 8
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatOptionalListE_891 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%u,i64 16
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatOptionalListE_891 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%u,i64 24
%E=bitcast i8*%D to i32*
store i32 -2147483647,i32*%E,align 4
ret i8*%u
}
define fastcc i8*@_SMLFN10TermFormat18formatOptionalListE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatOptionalListE_892 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat18formatOptionalListE_892 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define fastcc i8*@_SMLFN10TermFormat7ftvNameE(i32 inreg%a)#2 gc"smlsharp"{
%b=load atomic i32,i32*@sml_check_flag unordered,align 4
%c=icmp eq i32%b,0
br i1%c,label%e,label%d
d:
tail call void@sml_check(i32 inreg%b)
br label%e
e:
%f=tail call fastcc i8*@_SMLLN10TermFormat6tvNameE_614(i8 inreg 65,i32 inreg%a)
ret i8*%f
}
define internal fastcc i8*@_SMLLN10TermFormat10makeBtvEnvE_897(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
l:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%c,align 8
store i8*%b,i8**%d,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%j,label%h
h:
call void@sml_check(i32 inreg%f)
%i=load i8*,i8**%c,align 8
br label%j
j:
%k=phi i8*[%i,%h],[%a,%l]
%m=bitcast i8*%k to i32*
%n=load i32,i32*%m,align 4
%o=getelementptr inbounds i8,i8*%k,i64 4
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=call fastcc i8*@_SMLLN10TermFormat12extendBtvEnvE_607(i32 inreg%n,i32 inreg%q)
%s=getelementptr inbounds i8,i8*%r,i64 16
%t=bitcast i8*%s to i8*(i8*,i8*)**
%u=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%t,align 8
%v=bitcast i8*%r to i8**
%w=load i8*,i8**%v,align 8
store i8*%w,i8**%e,align 8
store i8*null,i8**%c,align 8
%x=call fastcc i8*@_SMLLN10TermFormat11emptyBtvEnvE_592()
%y=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%z=call fastcc i8*%u(i8*inreg%y,i8*inreg%x)
%A=getelementptr inbounds i8,i8*%z,i64 16
%B=bitcast i8*%A to i8*(i8*,i8*)**
%C=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%B,align 8
%D=bitcast i8*%z to i8**
%E=load i8*,i8**%D,align 8
%F=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%G=call fastcc i8*%C(i8*inreg%E,i8*inreg%F)
ret i8*%G
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb1_DE_900(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%h,label%j
h:
%i=bitcast i8*%a to i8**
br label%n
j:
call void@sml_check(i32 inreg%f)
%k=bitcast i8**%d to i8***
%l=load i8**,i8***%k,align 8
%m=bitcast i8**%l to i8*
br label%n
n:
%o=phi i8*[%m,%j],[%a,%h]
%p=phi i8**[%l,%j],[%i,%h]
%q=load i8*,i8**%p,align 8
%r=getelementptr inbounds i8,i8*%q,i64 16
%s=bitcast i8*%r to i8*(i8*,i8*,i8*)**
%t=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%s,align 8
%u=bitcast i8*%q to i8**
%v=load i8*,i8**%u,align 8
store i8*%v,i8**%e,align 8
%w=getelementptr inbounds i8,i8*%o,i64 8
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
store i8*null,i8**%d,align 8
%z=getelementptr inbounds i8,i8*%o,i64 12
%A=bitcast i8*%z to i32*
%B=load i32,i32*%A,align 4
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%d,align 8
store i32%y,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32%B,i32*%H,align 4
%K=load i8*,i8**%e,align 8
%L=load i8*,i8**%d,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%d,align 8
%M=call fastcc i8*%t(i8*inreg%K,i8*inreg%L,i8*inreg%G)
%N=getelementptr inbounds i8,i8*%M,i64 16
%O=bitcast i8*%N to i8*(i8*,i8*)**
%P=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%O,align 8
%Q=bitcast i8*%M to i8**
%R=load i8*,i8**%Q,align 8
%S=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%T=call fastcc i8*%P(i8*inreg%R,i8*inreg%S)
ret i8*%T
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb1_DE_901(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%m
i:
call void@sml_check(i32 inreg%e)
%j=load i8*,i8**%c,align 8
%k=bitcast i8**%d to i8***
%l=load i8**,i8***%k,align 8
br label%m
m:
%n=phi i8**[%l,%i],[%h,%g]
%o=phi i8*[%j,%i],[%b,%g]
store i8*null,i8**%c,align 8
%p=load i8*,i8**%n,align 8
%q=getelementptr inbounds i8,i8*%p,i64 16
%r=bitcast i8*%q to i8*(i8*,i8*)**
%s=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%r,align 8
%t=bitcast i8*%p to i8**
%u=load i8*,i8**%t,align 8
%v=call fastcc i8*%s(i8*inreg%u,i8*inreg%o)
store i8*%v,i8**%c,align 8
%w=load i8*,i8**%d,align 8
%x=getelementptr inbounds i8,i8*%w,i64 8
%y=bitcast i8*%x to i32*
%z=load i32,i32*%y,align 4
store i8*null,i8**%d,align 8
%A=getelementptr inbounds i8,i8*%w,i64 12
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=call i8*@sml_alloc(i32 inreg 20)#0
%E=getelementptr inbounds i8,i8*%D,i64 -4
%F=bitcast i8*%E to i32*
store i32 1342177296,i32*%F,align 4
store i8*%D,i8**%d,align 8
%G=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%H=bitcast i8*%D to i8**
store i8*%G,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%D,i64 8
%J=bitcast i8*%I to i32*
store i32%z,i32*%J,align 4
%K=getelementptr inbounds i8,i8*%D,i64 12
%L=bitcast i8*%K to i32*
store i32%C,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%D,i64 16
%N=bitcast i8*%M to i32*
store i32 1,i32*%N,align 4
%O=call i8*@sml_alloc(i32 inreg 28)#0
%P=getelementptr inbounds i8,i8*%O,i64 -4
%Q=bitcast i8*%P to i32*
store i32 1342177304,i32*%Q,align 4
%R=load i8*,i8**%d,align 8
%S=bitcast i8*%O to i8**
store i8*%R,i8**%S,align 8
%T=getelementptr inbounds i8,i8*%O,i64 8
%U=bitcast i8*%T to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb1_DE_900 to void(...)*),void(...)**%U,align 8
%V=getelementptr inbounds i8,i8*%O,i64 16
%W=bitcast i8*%V to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb1_DE_900 to void(...)*),void(...)**%W,align 8
%X=getelementptr inbounds i8,i8*%O,i64 24
%Y=bitcast i8*%X to i32*
store i32 1,i32*%Y,align 4
ret i8*%O
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb1_DE_902(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%c,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%b,%k]
store i8*null,i8**%c,align 8
%l=call fastcc i8*@_SMLLN10TermFormat10FormatComb1_DE_227(i8*inreg%j)#0
store i8*%l,i8**%c,align 8
%m=load i8*,i8**%d,align 8
%n=getelementptr inbounds i8,i8*%m,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%m,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call i8*@sml_alloc(i32 inreg 20)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177296,i32*%v,align 4
store i8*%t,i8**%d,align 8
%w=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to i32*
store i32%p,i32*%z,align 4
%A=getelementptr inbounds i8,i8*%t,i64 12
%B=bitcast i8*%A to i32*
store i32%s,i32*%B,align 4
%C=getelementptr inbounds i8,i8*%t,i64 16
%D=bitcast i8*%C to i32*
store i32 1,i32*%D,align 4
%E=call i8*@sml_alloc(i32 inreg 28)#0
%F=getelementptr inbounds i8,i8*%E,i64 -4
%G=bitcast i8*%F to i32*
store i32 1342177304,i32*%G,align 4
%H=load i8*,i8**%d,align 8
%I=bitcast i8*%E to i8**
store i8*%H,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%E,i64 8
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb1_DE_901 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%E,i64 16
%M=bitcast i8*%L to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb1_DE_901 to void(...)*),void(...)**%M,align 8
%N=getelementptr inbounds i8,i8*%E,i64 24
%O=bitcast i8*%N to i32*
store i32 -2147483647,i32*%O,align 4
ret i8*%E
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6begin__E_905(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6begin__E_907(i8*inreg%a)#4 gc"smlsharp"{
ret i8*%a
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6begin__E_910(i8*inreg%a)unnamed_addr#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
store i8*null,i8**%b,align 8
%j=getelementptr inbounds i8,i8*%h,i64 16
%k=bitcast i8*%j to i8*(i8*,i8*)**
%l=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%k,align 8
%m=bitcast i8*%h to i8**
%n=load i8*,i8**%m,align 8
%o=call fastcc i8*%l(i8*inreg%n,i8*inreg bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,i8*,i32}>,<{[4x i8],i32,i8*,i8*,i32}>*@b9,i64 0,i32 2)to i8*))
ret i8*%o
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6dspaceE_914(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%h,label%j
h:
%i=bitcast i8*%a to i8**
br label%n
j:
call void@sml_check(i32 inreg%f)
%k=bitcast i8**%d to i8***
%l=load i8**,i8***%k,align 8
%m=bitcast i8**%l to i8*
br label%n
n:
%o=phi i8*[%m,%j],[%a,%h]
%p=phi i8**[%l,%j],[%i,%h]
%q=load i8*,i8**%p,align 8
%r=getelementptr inbounds i8,i8*%q,i64 16
%s=bitcast i8*%r to i8*(i8*,i8*,i8*)**
%t=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%s,align 8
%u=bitcast i8*%q to i8**
%v=load i8*,i8**%u,align 8
store i8*%v,i8**%e,align 8
%w=getelementptr inbounds i8,i8*%o,i64 8
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
store i8*null,i8**%d,align 8
%z=getelementptr inbounds i8,i8*%o,i64 12
%A=bitcast i8*%z to i32*
%B=load i32,i32*%A,align 4
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%d,align 8
store i32%y,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32%B,i32*%H,align 4
%K=load i8*,i8**%e,align 8
%L=load i8*,i8**%d,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%d,align 8
%M=call fastcc i8*%t(i8*inreg%K,i8*inreg%L,i8*inreg%G)
%N=getelementptr inbounds i8,i8*%M,i64 16
%O=bitcast i8*%N to i8*(i8*,i8*)**
%P=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%O,align 8
%Q=bitcast i8*%M to i8**
%R=load i8*,i8**%Q,align 8
%S=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%T=call fastcc i8*%P(i8*inreg%R,i8*inreg%S)
ret i8*%T
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6dspaceE_915(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%c,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%b,%k]
store i8*null,i8**%c,align 8
%l=call fastcc i8*@_SMLLN10TermFormat10FormatComb6dspaceE_211(i8*inreg%j)#0
store i8*%l,i8**%c,align 8
%m=load i8*,i8**%d,align 8
%n=getelementptr inbounds i8,i8*%m,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%m,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call i8*@sml_alloc(i32 inreg 20)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177296,i32*%v,align 4
store i8*%t,i8**%d,align 8
%w=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to i32*
store i32%p,i32*%z,align 4
%A=getelementptr inbounds i8,i8*%t,i64 12
%B=bitcast i8*%A to i32*
store i32%s,i32*%B,align 4
%C=getelementptr inbounds i8,i8*%t,i64 16
%D=bitcast i8*%C to i32*
store i32 1,i32*%D,align 4
%E=call i8*@sml_alloc(i32 inreg 28)#0
%F=getelementptr inbounds i8,i8*%E,i64 -4
%G=bitcast i8*%F to i32*
store i32 1342177304,i32*%G,align 4
%H=load i8*,i8**%d,align 8
%I=bitcast i8*%E to i8**
store i8*%H,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%E,i64 8
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6dspaceE_914 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%E,i64 16
%M=bitcast i8*%L to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6dspaceE_914 to void(...)*),void(...)**%M,align 8
%N=getelementptr inbounds i8,i8*%E,i64 24
%O=bitcast i8*%N to i32*
store i32 1,i32*%O,align 4
ret i8*%E
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb4end__E_918(i8*inreg%a)#2 gc"smlsharp"{
i:
%b=alloca i8*,align 8
call void@llvm.gcroot(i8**%b,i8*null)#0
store i8*%a,i8**%b,align 8
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%g,label%e
e:
call void@sml_check(i32 inreg%c)
%f=load i8*,i8**%b,align 8
br label%g
g:
%h=phi i8*[%f,%e],[%a,%i]
%j=getelementptr inbounds i8,i8*%h,i64 8
%k=bitcast i8*%j to i8**
%l=load i8*,i8**%k,align 8
%m=getelementptr inbounds i8,i8*%l,i64 16
%n=bitcast i8*%m to i8*(i8*,i8*)**
%o=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%n,align 8
%p=bitcast i8*%l to i8**
%q=load i8*,i8**%p,align 8
store i8*%q,i8**%b,align 8
%r=bitcast i8*%h to i8**
%s=load i8*,i8**%r,align 8
%t=getelementptr inbounds i8,i8*%s,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*)**
%v=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%u,align 8
%w=bitcast i8*%s to i8**
%x=load i8*,i8**%w,align 8
%y=call fastcc i8*%v(i8*inreg%x,i8*inreg null)
%z=load i8*,i8**%b,align 8
store i8*null,i8**%b,align 8
%A=call fastcc i8*%o(i8*inreg%z,i8*inreg%y)
ret i8*%A
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6guard__E_922(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8**
br label%p
l:
call void@sml_check(i32 inreg%h)
%m=bitcast i8**%d to i8***
%n=load i8**,i8***%m,align 8
%o=bitcast i8**%n to i8*
br label%p
p:
%q=phi i8*[%o,%l],[%a,%j]
%r=phi i8**[%n,%l],[%k,%j]
%s=load i8*,i8**%r,align 8
%t=getelementptr inbounds i8,i8*%s,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*,i8*,i8*,i8*)**
%v=load i8*(i8*,i8*,i8*,i8*,i8*)*,i8*(i8*,i8*,i8*,i8*,i8*)**%u,align 8
%w=bitcast i8*%s to i8**
%x=load i8*,i8**%w,align 8
store i8*%x,i8**%e,align 8
%y=getelementptr inbounds i8,i8*%q,i64 8
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=getelementptr inbounds i8,i8*%q,i64 12
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=getelementptr inbounds i8,i8*%q,i64 16
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
store i8*null,i8**%d,align 8
%H=getelementptr inbounds i8,i8*%q,i64 20
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
%K=call i8*@sml_alloc(i32 inreg 4)#0
%L=bitcast i8*%K to i32*
%M=getelementptr inbounds i8,i8*%K,i64 -4
%N=bitcast i8*%M to i32*
store i32 4,i32*%N,align 4
store i8*%K,i8**%d,align 8
store i32%A,i32*%L,align 4
%O=call i8*@sml_alloc(i32 inreg 4)#0
%P=bitcast i8*%O to i32*
%Q=getelementptr inbounds i8,i8*%O,i64 -4
%R=bitcast i8*%Q to i32*
store i32 4,i32*%R,align 4
store i8*%O,i8**%f,align 8
store i32%D,i32*%P,align 4
%S=call i8*@sml_alloc(i32 inreg 4)#0
%T=bitcast i8*%S to i32*
%U=getelementptr inbounds i8,i8*%S,i64 -4
%V=bitcast i8*%U to i32*
store i32 4,i32*%V,align 4
store i8*%S,i8**%g,align 8
store i32%G,i32*%T,align 4
%W=call i8*@sml_alloc(i32 inreg 4)#0
%X=bitcast i8*%W to i32*
%Y=getelementptr inbounds i8,i8*%W,i64 -4
%Z=bitcast i8*%Y to i32*
store i32 4,i32*%Z,align 4
store i32%J,i32*%X,align 4
%aa=load i8*,i8**%e,align 8
%ab=load i8*,i8**%d,align 8
%ac=load i8*,i8**%f,align 8
%ad=load i8*,i8**%g,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%d,align 8
store i8*null,i8**%f,align 8
store i8*null,i8**%g,align 8
%ae=call fastcc i8*%v(i8*inreg%aa,i8*inreg%ab,i8*inreg%ac,i8*inreg%ad,i8*inreg%W)
%af=getelementptr inbounds i8,i8*%ae,i64 16
%ag=bitcast i8*%af to i8*(i8*,i8*)**
%ah=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ag,align 8
%ai=bitcast i8*%ae to i8**
%aj=load i8*,i8**%ai,align 8
%ak=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%al=call fastcc i8*%ah(i8*inreg%aj,i8*inreg%ak)
ret i8*%al
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6guard__E_923(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%m
i:
call void@sml_check(i32 inreg%e)
%j=load i8*,i8**%c,align 8
%k=bitcast i8**%d to i8***
%l=load i8**,i8***%k,align 8
br label%m
m:
%n=phi i8**[%l,%i],[%h,%g]
%o=phi i8*[%j,%i],[%b,%g]
store i8*null,i8**%c,align 8
%p=load i8*,i8**%n,align 8
%q=getelementptr inbounds i8,i8*%p,i64 16
%r=bitcast i8*%q to i8*(i8*,i8*)**
%s=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%r,align 8
%t=bitcast i8*%p to i8**
%u=load i8*,i8**%t,align 8
%v=call fastcc i8*%s(i8*inreg%u,i8*inreg%o)
store i8*%v,i8**%c,align 8
%w=load i8*,i8**%d,align 8
%x=getelementptr inbounds i8,i8*%w,i64 8
%y=bitcast i8*%x to i32*
%z=load i32,i32*%y,align 4
%A=getelementptr inbounds i8,i8*%w,i64 12
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=getelementptr inbounds i8,i8*%w,i64 16
%E=bitcast i8*%D to i32*
%F=load i32,i32*%E,align 4
store i8*null,i8**%d,align 8
%G=getelementptr inbounds i8,i8*%w,i64 20
%H=bitcast i8*%G to i32*
%I=load i32,i32*%H,align 4
%J=call i8*@sml_alloc(i32 inreg 28)#0
%K=getelementptr inbounds i8,i8*%J,i64 -4
%L=bitcast i8*%K to i32*
store i32 1342177304,i32*%L,align 4
store i8*%J,i8**%d,align 8
%M=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%N=bitcast i8*%J to i8**
store i8*%M,i8**%N,align 8
%O=getelementptr inbounds i8,i8*%J,i64 8
%P=bitcast i8*%O to i32*
store i32%z,i32*%P,align 4
%Q=getelementptr inbounds i8,i8*%J,i64 12
%R=bitcast i8*%Q to i32*
store i32%C,i32*%R,align 4
%S=getelementptr inbounds i8,i8*%J,i64 16
%T=bitcast i8*%S to i32*
store i32%F,i32*%T,align 4
%U=getelementptr inbounds i8,i8*%J,i64 20
%V=bitcast i8*%U to i32*
store i32%I,i32*%V,align 4
%W=getelementptr inbounds i8,i8*%J,i64 24
%X=bitcast i8*%W to i32*
store i32 1,i32*%X,align 4
%Y=call i8*@sml_alloc(i32 inreg 28)#0
%Z=getelementptr inbounds i8,i8*%Y,i64 -4
%aa=bitcast i8*%Z to i32*
store i32 1342177304,i32*%aa,align 4
%ab=load i8*,i8**%d,align 8
%ac=bitcast i8*%Y to i8**
store i8*%ab,i8**%ac,align 8
%ad=getelementptr inbounds i8,i8*%Y,i64 8
%ae=bitcast i8*%ad to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6guard__E_922 to void(...)*),void(...)**%ae,align 8
%af=getelementptr inbounds i8,i8*%Y,i64 16
%ag=bitcast i8*%af to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6guard__E_922 to void(...)*),void(...)**%ag,align 8
%ah=getelementptr inbounds i8,i8*%Y,i64 24
%ai=bitcast i8*%ah to i32*
store i32 1,i32*%ai,align 4
ret i8*%Y
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6guard__E_924(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i32*
%m=load i32,i32*%l,align 4
%n=getelementptr inbounds i8,i8*%j,i64 4
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=call fastcc i8*@_SMLLN10TermFormat10FormatComb6guard__E_247(i32 inreg%m,i32 inreg%p)
%r=getelementptr inbounds i8,i8*%q,i64 16
%s=bitcast i8*%r to i8*(i8*,i8*)**
%t=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%s,align 8
%u=bitcast i8*%q to i8**
%v=load i8*,i8**%u,align 8
%w=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%x=call fastcc i8*%t(i8*inreg%v,i8*inreg%w)
store i8*%x,i8**%c,align 8
%y=load i8*,i8**%d,align 8
%z=getelementptr inbounds i8,i8*%y,i64 8
%A=bitcast i8*%z to i32*
%B=load i32,i32*%A,align 4
%C=getelementptr inbounds i8,i8*%y,i64 12
%D=bitcast i8*%C to i32*
%E=load i32,i32*%D,align 4
%F=getelementptr inbounds i8,i8*%y,i64 16
%G=bitcast i8*%F to i32*
%H=load i32,i32*%G,align 4
store i8*null,i8**%d,align 8
%I=getelementptr inbounds i8,i8*%y,i64 20
%J=bitcast i8*%I to i32*
%K=load i32,i32*%J,align 4
%L=call i8*@sml_alloc(i32 inreg 28)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32 1342177304,i32*%N,align 4
store i8*%L,i8**%d,align 8
%O=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%P=bitcast i8*%L to i8**
store i8*%O,i8**%P,align 8
%Q=getelementptr inbounds i8,i8*%L,i64 8
%R=bitcast i8*%Q to i32*
store i32%B,i32*%R,align 4
%S=getelementptr inbounds i8,i8*%L,i64 12
%T=bitcast i8*%S to i32*
store i32%E,i32*%T,align 4
%U=getelementptr inbounds i8,i8*%L,i64 16
%V=bitcast i8*%U to i32*
store i32%H,i32*%V,align 4
%W=getelementptr inbounds i8,i8*%L,i64 20
%X=bitcast i8*%W to i32*
store i32%K,i32*%X,align 4
%Y=getelementptr inbounds i8,i8*%L,i64 24
%Z=bitcast i8*%Y to i32*
store i32 1,i32*%Z,align 4
%aa=call i8*@sml_alloc(i32 inreg 28)#0
%ab=getelementptr inbounds i8,i8*%aa,i64 -4
%ac=bitcast i8*%ab to i32*
store i32 1342177304,i32*%ac,align 4
%ad=load i8*,i8**%d,align 8
%ae=bitcast i8*%aa to i8**
store i8*%ad,i8**%ae,align 8
%af=getelementptr inbounds i8,i8*%aa,i64 8
%ag=bitcast i8*%af to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6guard__E_923 to void(...)*),void(...)**%ag,align 8
%ah=getelementptr inbounds i8,i8*%aa,i64 16
%ai=bitcast i8*%ah to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6guard__E_923 to void(...)*),void(...)**%ai,align 8
%aj=getelementptr inbounds i8,i8*%aa,i64 24
%ak=bitcast i8*%aj to i32*
store i32 -2147483647,i32*%ak,align 4
ret i8*%aa
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb5nest__E_927(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
%g=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
call void@llvm.gcroot(i8**%g,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%j,label%l
j:
%k=bitcast i8*%a to i8**
br label%p
l:
call void@sml_check(i32 inreg%h)
%m=bitcast i8**%d to i8***
%n=load i8**,i8***%m,align 8
%o=bitcast i8**%n to i8*
br label%p
p:
%q=phi i8*[%o,%l],[%a,%j]
%r=phi i8**[%n,%l],[%k,%j]
%s=load i8*,i8**%r,align 8
%t=getelementptr inbounds i8,i8*%s,i64 16
%u=bitcast i8*%t to i8*(i8*,i8*,i8*,i8*,i8*)**
%v=load i8*(i8*,i8*,i8*,i8*,i8*)*,i8*(i8*,i8*,i8*,i8*,i8*)**%u,align 8
%w=bitcast i8*%s to i8**
%x=load i8*,i8**%w,align 8
store i8*%x,i8**%e,align 8
%y=getelementptr inbounds i8,i8*%q,i64 8
%z=bitcast i8*%y to i32*
%A=load i32,i32*%z,align 4
%B=getelementptr inbounds i8,i8*%q,i64 12
%C=bitcast i8*%B to i32*
%D=load i32,i32*%C,align 4
%E=getelementptr inbounds i8,i8*%q,i64 16
%F=bitcast i8*%E to i32*
%G=load i32,i32*%F,align 4
store i8*null,i8**%d,align 8
%H=getelementptr inbounds i8,i8*%q,i64 20
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
%K=call i8*@sml_alloc(i32 inreg 4)#0
%L=bitcast i8*%K to i32*
%M=getelementptr inbounds i8,i8*%K,i64 -4
%N=bitcast i8*%M to i32*
store i32 4,i32*%N,align 4
store i8*%K,i8**%d,align 8
store i32%A,i32*%L,align 4
%O=call i8*@sml_alloc(i32 inreg 4)#0
%P=bitcast i8*%O to i32*
%Q=getelementptr inbounds i8,i8*%O,i64 -4
%R=bitcast i8*%Q to i32*
store i32 4,i32*%R,align 4
store i8*%O,i8**%f,align 8
store i32%D,i32*%P,align 4
%S=call i8*@sml_alloc(i32 inreg 4)#0
%T=bitcast i8*%S to i32*
%U=getelementptr inbounds i8,i8*%S,i64 -4
%V=bitcast i8*%U to i32*
store i32 4,i32*%V,align 4
store i8*%S,i8**%g,align 8
store i32%G,i32*%T,align 4
%W=call i8*@sml_alloc(i32 inreg 4)#0
%X=bitcast i8*%W to i32*
%Y=getelementptr inbounds i8,i8*%W,i64 -4
%Z=bitcast i8*%Y to i32*
store i32 4,i32*%Z,align 4
store i32%J,i32*%X,align 4
%aa=load i8*,i8**%e,align 8
%ab=load i8*,i8**%d,align 8
%ac=load i8*,i8**%f,align 8
%ad=load i8*,i8**%g,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%d,align 8
store i8*null,i8**%f,align 8
store i8*null,i8**%g,align 8
%ae=call fastcc i8*%v(i8*inreg%aa,i8*inreg%ab,i8*inreg%ac,i8*inreg%ad,i8*inreg%W)
%af=getelementptr inbounds i8,i8*%ae,i64 16
%ag=bitcast i8*%af to i8*(i8*,i8*)**
%ah=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%ag,align 8
%ai=bitcast i8*%ae to i8**
%aj=load i8*,i8**%ai,align 8
%ak=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%al=call fastcc i8*%ah(i8*inreg%aj,i8*inreg%ak)
ret i8*%al
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb5nest__E_928(i8*inreg%a,i32 inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%l
i:
call void@sml_check(i32 inreg%e)
%j=bitcast i8**%d to i8***
%k=load i8**,i8***%j,align 8
br label%l
l:
%m=phi i8**[%k,%i],[%h,%g]
%n=load i8*,i8**%m,align 8
%o=getelementptr inbounds i8,i8*%n,i64 16
%p=bitcast i8*%o to i8*(i8*,i8*)**
%q=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%p,align 8
%r=bitcast i8*%n to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%c,align 8
%t=call i8*@sml_alloc(i32 inreg 4)#0
%u=bitcast i8*%t to i32*
%v=getelementptr inbounds i8,i8*%t,i64 -4
%w=bitcast i8*%v to i32*
store i32 4,i32*%w,align 4
store i32%b,i32*%u,align 4
%x=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%y=call fastcc i8*%q(i8*inreg%x,i8*inreg%t)
store i8*%y,i8**%c,align 8
%z=load i8*,i8**%d,align 8
%A=getelementptr inbounds i8,i8*%z,i64 8
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=getelementptr inbounds i8,i8*%z,i64 12
%E=bitcast i8*%D to i32*
%F=load i32,i32*%E,align 4
%G=getelementptr inbounds i8,i8*%z,i64 16
%H=bitcast i8*%G to i32*
%I=load i32,i32*%H,align 4
store i8*null,i8**%d,align 8
%J=getelementptr inbounds i8,i8*%z,i64 20
%K=bitcast i8*%J to i32*
%L=load i32,i32*%K,align 4
%M=call i8*@sml_alloc(i32 inreg 28)#0
%N=getelementptr inbounds i8,i8*%M,i64 -4
%O=bitcast i8*%N to i32*
store i32 1342177304,i32*%O,align 4
store i8*%M,i8**%d,align 8
%P=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%Q=bitcast i8*%M to i8**
store i8*%P,i8**%Q,align 8
%R=getelementptr inbounds i8,i8*%M,i64 8
%S=bitcast i8*%R to i32*
store i32%C,i32*%S,align 4
%T=getelementptr inbounds i8,i8*%M,i64 12
%U=bitcast i8*%T to i32*
store i32%F,i32*%U,align 4
%V=getelementptr inbounds i8,i8*%M,i64 16
%W=bitcast i8*%V to i32*
store i32%I,i32*%W,align 4
%X=getelementptr inbounds i8,i8*%M,i64 20
%Y=bitcast i8*%X to i32*
store i32%L,i32*%Y,align 4
%Z=getelementptr inbounds i8,i8*%M,i64 24
%aa=bitcast i8*%Z to i32*
store i32 1,i32*%aa,align 4
%ab=call i8*@sml_alloc(i32 inreg 28)#0
%ac=getelementptr inbounds i8,i8*%ab,i64 -4
%ad=bitcast i8*%ac to i32*
store i32 1342177304,i32*%ad,align 4
%ae=load i8*,i8**%d,align 8
%af=bitcast i8*%ab to i8**
store i8*%ae,i8**%af,align 8
%ag=getelementptr inbounds i8,i8*%ab,i64 8
%ah=bitcast i8*%ag to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb5nest__E_927 to void(...)*),void(...)**%ah,align 8
%ai=getelementptr inbounds i8,i8*%ab,i64 16
%aj=bitcast i8*%ai to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb5nest__E_927 to void(...)*),void(...)**%aj,align 8
%ak=getelementptr inbounds i8,i8*%ab,i64 24
%al=bitcast i8*%ak to i32*
store i32 1,i32*%al,align 4
ret i8*%ab
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb5nest__E_929(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i32*
%m=load i32,i32*%l,align 4
%n=getelementptr inbounds i8,i8*%j,i64 4
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
%q=call fastcc i8*@_SMLLN10TermFormat10FormatComb5nest__E_265(i32 inreg%m,i32 inreg%p)
%r=getelementptr inbounds i8,i8*%q,i64 16
%s=bitcast i8*%r to i8*(i8*,i8*)**
%t=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%s,align 8
%u=bitcast i8*%q to i8**
%v=load i8*,i8**%u,align 8
%w=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%x=call fastcc i8*%t(i8*inreg%v,i8*inreg%w)
store i8*%x,i8**%c,align 8
%y=load i8*,i8**%d,align 8
%z=getelementptr inbounds i8,i8*%y,i64 8
%A=bitcast i8*%z to i32*
%B=load i32,i32*%A,align 4
%C=getelementptr inbounds i8,i8*%y,i64 12
%D=bitcast i8*%C to i32*
%E=load i32,i32*%D,align 4
%F=getelementptr inbounds i8,i8*%y,i64 16
%G=bitcast i8*%F to i32*
%H=load i32,i32*%G,align 4
store i8*null,i8**%d,align 8
%I=getelementptr inbounds i8,i8*%y,i64 20
%J=bitcast i8*%I to i32*
%K=load i32,i32*%J,align 4
%L=call i8*@sml_alloc(i32 inreg 28)#0
%M=getelementptr inbounds i8,i8*%L,i64 -4
%N=bitcast i8*%M to i32*
store i32 1342177304,i32*%N,align 4
store i8*%L,i8**%d,align 8
%O=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%P=bitcast i8*%L to i8**
store i8*%O,i8**%P,align 8
%Q=getelementptr inbounds i8,i8*%L,i64 8
%R=bitcast i8*%Q to i32*
store i32%B,i32*%R,align 4
%S=getelementptr inbounds i8,i8*%L,i64 12
%T=bitcast i8*%S to i32*
store i32%E,i32*%T,align 4
%U=getelementptr inbounds i8,i8*%L,i64 16
%V=bitcast i8*%U to i32*
store i32%H,i32*%V,align 4
%W=getelementptr inbounds i8,i8*%L,i64 20
%X=bitcast i8*%W to i32*
store i32%K,i32*%X,align 4
%Y=getelementptr inbounds i8,i8*%L,i64 24
%Z=bitcast i8*%Y to i32*
store i32 1,i32*%Z,align 4
%aa=call i8*@sml_alloc(i32 inreg 28)#0
%ab=getelementptr inbounds i8,i8*%aa,i64 -4
%ac=bitcast i8*%ab to i32*
store i32 1342177304,i32*%ac,align 4
%ad=load i8*,i8**%d,align 8
%ae=bitcast i8*%aa to i8**
store i8*%ad,i8**%ae,align 8
%af=getelementptr inbounds i8,i8*%aa,i64 8
%ag=bitcast i8*%af to void(...)**
store void(...)*bitcast(i8*(i8*,i32)*@_SMLLN10TermFormat10FormatComb5nest__E_928 to void(...)*),void(...)**%ag,align 8
%ah=getelementptr inbounds i8,i8*%aa,i64 16
%ai=bitcast i8*%ah to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb5nest__E_1186 to void(...)*),void(...)**%ai,align 8
%aj=getelementptr inbounds i8,i8*%aa,i64 24
%ak=bitcast i8*%aj to i32*
store i32 -2147483647,i32*%ak,align 4
ret i8*%aa
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb7newlineE_932(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%h,label%j
h:
%i=bitcast i8*%a to i8**
br label%n
j:
call void@sml_check(i32 inreg%f)
%k=bitcast i8**%d to i8***
%l=load i8**,i8***%k,align 8
%m=bitcast i8**%l to i8*
br label%n
n:
%o=phi i8*[%m,%j],[%a,%h]
%p=phi i8**[%l,%j],[%i,%h]
%q=load i8*,i8**%p,align 8
%r=getelementptr inbounds i8,i8*%q,i64 16
%s=bitcast i8*%r to i8*(i8*,i8*,i8*)**
%t=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%s,align 8
%u=bitcast i8*%q to i8**
%v=load i8*,i8**%u,align 8
store i8*%v,i8**%e,align 8
%w=getelementptr inbounds i8,i8*%o,i64 8
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
store i8*null,i8**%d,align 8
%z=getelementptr inbounds i8,i8*%o,i64 12
%A=bitcast i8*%z to i32*
%B=load i32,i32*%A,align 4
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%d,align 8
store i32%y,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32%B,i32*%H,align 4
%K=load i8*,i8**%e,align 8
%L=load i8*,i8**%d,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%d,align 8
%M=call fastcc i8*%t(i8*inreg%K,i8*inreg%L,i8*inreg%G)
%N=getelementptr inbounds i8,i8*%M,i64 16
%O=bitcast i8*%N to i8*(i8*,i8*)**
%P=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%O,align 8
%Q=bitcast i8*%M to i8**
%R=load i8*,i8**%Q,align 8
%S=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%T=call fastcc i8*%P(i8*inreg%R,i8*inreg%S)
ret i8*%T
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb7newlineE_933(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%c,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%b,%k]
store i8*null,i8**%c,align 8
%l=call fastcc i8*@_SMLLN10TermFormat10FormatComb7newlineE_219(i8*inreg%j)#0
store i8*%l,i8**%c,align 8
%m=load i8*,i8**%d,align 8
%n=getelementptr inbounds i8,i8*%m,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%m,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call i8*@sml_alloc(i32 inreg 20)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177296,i32*%v,align 4
store i8*%t,i8**%d,align 8
%w=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to i32*
store i32%p,i32*%z,align 4
%A=getelementptr inbounds i8,i8*%t,i64 12
%B=bitcast i8*%A to i32*
store i32%s,i32*%B,align 4
%C=getelementptr inbounds i8,i8*%t,i64 16
%D=bitcast i8*%C to i32*
store i32 1,i32*%D,align 4
%E=call i8*@sml_alloc(i32 inreg 28)#0
%F=getelementptr inbounds i8,i8*%E,i64 -4
%G=bitcast i8*%F to i32*
store i32 1342177304,i32*%G,align 4
%H=load i8*,i8**%d,align 8
%I=bitcast i8*%E to i8**
store i8*%H,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%E,i64 8
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb7newlineE_932 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%E,i64 16
%M=bitcast i8*%L to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb7newlineE_932 to void(...)*),void(...)**%M,align 8
%N=getelementptr inbounds i8,i8*%E,i64 24
%O=bitcast i8*%N to i32*
store i32 1,i32*%O,align 4
ret i8*%E
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb4putsE_936(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%h,label%j
h:
%i=bitcast i8*%a to i8**
br label%n
j:
call void@sml_check(i32 inreg%f)
%k=bitcast i8**%d to i8***
%l=load i8**,i8***%k,align 8
%m=bitcast i8**%l to i8*
br label%n
n:
%o=phi i8*[%m,%j],[%a,%h]
%p=phi i8**[%l,%j],[%i,%h]
%q=load i8*,i8**%p,align 8
%r=getelementptr inbounds i8,i8*%q,i64 16
%s=bitcast i8*%r to i8*(i8*,i8*,i8*)**
%t=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%s,align 8
%u=bitcast i8*%q to i8**
%v=load i8*,i8**%u,align 8
store i8*%v,i8**%e,align 8
%w=getelementptr inbounds i8,i8*%o,i64 8
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
store i8*null,i8**%d,align 8
%z=getelementptr inbounds i8,i8*%o,i64 12
%A=bitcast i8*%z to i32*
%B=load i32,i32*%A,align 4
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%d,align 8
store i32%y,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32%B,i32*%H,align 4
%K=load i8*,i8**%e,align 8
%L=load i8*,i8**%d,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%d,align 8
%M=call fastcc i8*%t(i8*inreg%K,i8*inreg%L,i8*inreg%G)
%N=getelementptr inbounds i8,i8*%M,i64 16
%O=bitcast i8*%N to i8*(i8*,i8*)**
%P=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%O,align 8
%Q=bitcast i8*%M to i8**
%R=load i8*,i8**%Q,align 8
%S=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%T=call fastcc i8*%P(i8*inreg%R,i8*inreg%S)
ret i8*%T
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb4putsE_937(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
m:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
%f=alloca i8*,align 8
call void@llvm.gcroot(i8**%e,i8*null)#0
call void@llvm.gcroot(i8**%f,i8*null)#0
store i8*%a,i8**%f,align 8
store i8*%b,i8**%e,align 8
%g=load atomic i32,i32*@sml_check_flag unordered,align 4
%h=icmp eq i32%g,0
br i1%h,label%k,label%i
i:
call void@sml_check(i32 inreg%g)
%j=load i8*,i8**%e,align 8
br label%k
k:
%l=phi i8*[%j,%i],[%b,%m]
store i8*null,i8**%e,align 8
%n=bitcast i8**%c to i8*
call void@llvm.lifetime.start.p0i8(i64 8,i8*%n)
%o=bitcast i8**%d to i8*
call void@llvm.lifetime.start.p0i8(i64 8,i8*%o)
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%l,i8**%c,align 8
%p=call i8*@sml_alloc(i32 inreg 12)#0
%q=getelementptr inbounds i8,i8*%p,i64 -4
%r=bitcast i8*%q to i32*
store i32 1342177288,i32*%r,align 4
store i8*%p,i8**%d,align 8
%s=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%t=bitcast i8*%p to i8**
store i8*%s,i8**%t,align 8
%u=getelementptr inbounds i8,i8*%p,i64 8
%v=bitcast i8*%u to i32*
store i32 1,i32*%v,align 4
%w=call i8*@sml_alloc(i32 inreg 28)#0
%x=getelementptr inbounds i8,i8*%w,i64 -4
%y=bitcast i8*%x to i32*
store i32 1342177304,i32*%y,align 4
%z=load i8*,i8**%d,align 8
%A=bitcast i8*%w to i8**
store i8*%z,i8**%A,align 8
%B=getelementptr inbounds i8,i8*%w,i64 8
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i32,i32)*@_SMLLN10TermFormat10FormatComb4putsE_716 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%w,i64 16
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*,i8*)*@_SMLLN10TermFormat10FormatComb4putsE_1138 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%w,i64 24
%G=bitcast i8*%F to i32*
store i32 -2147483647,i32*%G,align 4
call void@llvm.lifetime.end.p0i8(i64 8,i8*%n)
call void@llvm.lifetime.end.p0i8(i64 8,i8*%o)
store i8*%w,i8**%e,align 8
%H=load i8*,i8**%f,align 8
%I=bitcast i8*%H to i32*
%J=load i32,i32*%I,align 4
store i8*null,i8**%f,align 8
%K=getelementptr inbounds i8,i8*%H,i64 4
%L=bitcast i8*%K to i32*
%M=load i32,i32*%L,align 4
%N=call i8*@sml_alloc(i32 inreg 20)#0
%O=getelementptr inbounds i8,i8*%N,i64 -4
%P=bitcast i8*%O to i32*
store i32 1342177296,i32*%P,align 4
store i8*%N,i8**%f,align 8
%Q=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%R=bitcast i8*%N to i8**
store i8*%Q,i8**%R,align 8
%S=getelementptr inbounds i8,i8*%N,i64 8
%T=bitcast i8*%S to i32*
store i32%J,i32*%T,align 4
%U=getelementptr inbounds i8,i8*%N,i64 12
%V=bitcast i8*%U to i32*
store i32%M,i32*%V,align 4
%W=getelementptr inbounds i8,i8*%N,i64 16
%X=bitcast i8*%W to i32*
store i32 1,i32*%X,align 4
%Y=call i8*@sml_alloc(i32 inreg 28)#0
%Z=getelementptr inbounds i8,i8*%Y,i64 -4
%aa=bitcast i8*%Z to i32*
store i32 1342177304,i32*%aa,align 4
%ab=load i8*,i8**%f,align 8
%ac=bitcast i8*%Y to i8**
store i8*%ab,i8**%ac,align 8
%ad=getelementptr inbounds i8,i8*%Y,i64 8
%ae=bitcast i8*%ad to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb4putsE_936 to void(...)*),void(...)**%ae,align 8
%af=getelementptr inbounds i8,i8*%Y,i64 16
%ag=bitcast i8*%af to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb4putsE_936 to void(...)*),void(...)**%ag,align 8
%ah=getelementptr inbounds i8,i8*%Y,i64 24
%ai=bitcast i8*%ah to i32*
store i32 1,i32*%ai,align 4
ret i8*%Y
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb5spaceE_940(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%h,label%j
h:
%i=bitcast i8*%a to i8**
br label%n
j:
call void@sml_check(i32 inreg%f)
%k=bitcast i8**%d to i8***
%l=load i8**,i8***%k,align 8
%m=bitcast i8**%l to i8*
br label%n
n:
%o=phi i8*[%m,%j],[%a,%h]
%p=phi i8**[%l,%j],[%i,%h]
%q=load i8*,i8**%p,align 8
%r=getelementptr inbounds i8,i8*%q,i64 16
%s=bitcast i8*%r to i8*(i8*,i8*,i8*)**
%t=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%s,align 8
%u=bitcast i8*%q to i8**
%v=load i8*,i8**%u,align 8
store i8*%v,i8**%e,align 8
%w=getelementptr inbounds i8,i8*%o,i64 8
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
store i8*null,i8**%d,align 8
%z=getelementptr inbounds i8,i8*%o,i64 12
%A=bitcast i8*%z to i32*
%B=load i32,i32*%A,align 4
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%d,align 8
store i32%y,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32%B,i32*%H,align 4
%K=load i8*,i8**%e,align 8
%L=load i8*,i8**%d,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%d,align 8
%M=call fastcc i8*%t(i8*inreg%K,i8*inreg%L,i8*inreg%G)
%N=getelementptr inbounds i8,i8*%M,i64 16
%O=bitcast i8*%N to i8*(i8*,i8*)**
%P=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%O,align 8
%Q=bitcast i8*%M to i8**
%R=load i8*,i8**%Q,align 8
%S=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%T=call fastcc i8*%P(i8*inreg%R,i8*inreg%S)
ret i8*%T
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb5spaceE_941(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%c,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%b,%k]
store i8*null,i8**%c,align 8
%l=call fastcc i8*@_SMLLN10TermFormat10FormatComb5spaceE_204(i8*inreg%j)#0
store i8*%l,i8**%c,align 8
%m=load i8*,i8**%d,align 8
%n=getelementptr inbounds i8,i8*%m,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%m,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call i8*@sml_alloc(i32 inreg 20)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177296,i32*%v,align 4
store i8*%t,i8**%d,align 8
%w=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to i32*
store i32%p,i32*%z,align 4
%A=getelementptr inbounds i8,i8*%t,i64 12
%B=bitcast i8*%A to i32*
store i32%s,i32*%B,align 4
%C=getelementptr inbounds i8,i8*%t,i64 16
%D=bitcast i8*%C to i32*
store i32 1,i32*%D,align 4
%E=call i8*@sml_alloc(i32 inreg 28)#0
%F=getelementptr inbounds i8,i8*%E,i64 -4
%G=bitcast i8*%F to i32*
store i32 1342177304,i32*%G,align 4
%H=load i8*,i8**%d,align 8
%I=bitcast i8*%E to i8**
store i8*%H,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%E,i64 8
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb5spaceE_940 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%E,i64 16
%M=bitcast i8*%L to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb5spaceE_940 to void(...)*),void(...)**%M,align 8
%N=getelementptr inbounds i8,i8*%E,i64 24
%O=bitcast i8*%N to i32*
store i32 1,i32*%O,align 4
ret i8*%E
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb4textE_944(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%h,label%j
h:
%i=bitcast i8*%a to i8**
br label%n
j:
call void@sml_check(i32 inreg%f)
%k=bitcast i8**%d to i8***
%l=load i8**,i8***%k,align 8
%m=bitcast i8**%l to i8*
br label%n
n:
%o=phi i8*[%m,%j],[%a,%h]
%p=phi i8**[%l,%j],[%i,%h]
%q=load i8*,i8**%p,align 8
%r=getelementptr inbounds i8,i8*%q,i64 16
%s=bitcast i8*%r to i8*(i8*,i8*,i8*)**
%t=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%s,align 8
%u=bitcast i8*%q to i8**
%v=load i8*,i8**%u,align 8
store i8*%v,i8**%e,align 8
%w=getelementptr inbounds i8,i8*%o,i64 8
%x=bitcast i8*%w to i32*
%y=load i32,i32*%x,align 4
store i8*null,i8**%d,align 8
%z=getelementptr inbounds i8,i8*%o,i64 12
%A=bitcast i8*%z to i32*
%B=load i32,i32*%A,align 4
%C=call i8*@sml_alloc(i32 inreg 4)#0
%D=bitcast i8*%C to i32*
%E=getelementptr inbounds i8,i8*%C,i64 -4
%F=bitcast i8*%E to i32*
store i32 4,i32*%F,align 4
store i8*%C,i8**%d,align 8
store i32%y,i32*%D,align 4
%G=call i8*@sml_alloc(i32 inreg 4)#0
%H=bitcast i8*%G to i32*
%I=getelementptr inbounds i8,i8*%G,i64 -4
%J=bitcast i8*%I to i32*
store i32 4,i32*%J,align 4
store i32%B,i32*%H,align 4
%K=load i8*,i8**%e,align 8
%L=load i8*,i8**%d,align 8
store i8*null,i8**%e,align 8
store i8*null,i8**%d,align 8
%M=call fastcc i8*%t(i8*inreg%K,i8*inreg%L,i8*inreg%G)
%N=getelementptr inbounds i8,i8*%M,i64 16
%O=bitcast i8*%N to i8*(i8*,i8*)**
%P=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%O,align 8
%Q=bitcast i8*%M to i8**
%R=load i8*,i8**%Q,align 8
%S=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%T=call fastcc i8*%P(i8*inreg%R,i8*inreg%S)
ret i8*%T
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb4textE_945(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%g,label%i
g:
%h=bitcast i8*%a to i8**
br label%m
i:
call void@sml_check(i32 inreg%e)
%j=load i8*,i8**%c,align 8
%k=bitcast i8**%d to i8***
%l=load i8**,i8***%k,align 8
br label%m
m:
%n=phi i8**[%l,%i],[%h,%g]
%o=phi i8*[%j,%i],[%b,%g]
store i8*null,i8**%c,align 8
%p=load i8*,i8**%n,align 8
%q=getelementptr inbounds i8,i8*%p,i64 16
%r=bitcast i8*%q to i8*(i8*,i8*)**
%s=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%r,align 8
%t=bitcast i8*%p to i8**
%u=load i8*,i8**%t,align 8
%v=call fastcc i8*%s(i8*inreg%u,i8*inreg%o)
store i8*%v,i8**%c,align 8
%w=load i8*,i8**%d,align 8
%x=getelementptr inbounds i8,i8*%w,i64 8
%y=bitcast i8*%x to i32*
%z=load i32,i32*%y,align 4
store i8*null,i8**%d,align 8
%A=getelementptr inbounds i8,i8*%w,i64 12
%B=bitcast i8*%A to i32*
%C=load i32,i32*%B,align 4
%D=call i8*@sml_alloc(i32 inreg 20)#0
%E=getelementptr inbounds i8,i8*%D,i64 -4
%F=bitcast i8*%E to i32*
store i32 1342177296,i32*%F,align 4
store i8*%D,i8**%d,align 8
%G=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%H=bitcast i8*%D to i8**
store i8*%G,i8**%H,align 8
%I=getelementptr inbounds i8,i8*%D,i64 8
%J=bitcast i8*%I to i32*
store i32%z,i32*%J,align 4
%K=getelementptr inbounds i8,i8*%D,i64 12
%L=bitcast i8*%K to i32*
store i32%C,i32*%L,align 4
%M=getelementptr inbounds i8,i8*%D,i64 16
%N=bitcast i8*%M to i32*
store i32 1,i32*%N,align 4
%O=call i8*@sml_alloc(i32 inreg 28)#0
%P=getelementptr inbounds i8,i8*%O,i64 -4
%Q=bitcast i8*%P to i32*
store i32 1342177304,i32*%Q,align 4
%R=load i8*,i8**%d,align 8
%S=bitcast i8*%O to i8**
store i8*%R,i8**%S,align 8
%T=getelementptr inbounds i8,i8*%O,i64 8
%U=bitcast i8*%T to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb4textE_944 to void(...)*),void(...)**%U,align 8
%V=getelementptr inbounds i8,i8*%O,i64 16
%W=bitcast i8*%V to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb4textE_944 to void(...)*),void(...)**%W,align 8
%X=getelementptr inbounds i8,i8*%O,i64 24
%Y=bitcast i8*%X to i32*
store i32 1,i32*%Y,align 4
ret i8*%O
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb4textE_946(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%c,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%b,%k]
store i8*null,i8**%c,align 8
%l=call fastcc i8*@_SMLLN10TermFormat10FormatComb4textE_197(i8*inreg%j)#0
store i8*%l,i8**%c,align 8
%m=load i8*,i8**%d,align 8
%n=getelementptr inbounds i8,i8*%m,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%m,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call i8*@sml_alloc(i32 inreg 20)#0
%u=getelementptr inbounds i8,i8*%t,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177296,i32*%v,align 4
store i8*%t,i8**%d,align 8
%w=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%x=bitcast i8*%t to i8**
store i8*%w,i8**%x,align 8
%y=getelementptr inbounds i8,i8*%t,i64 8
%z=bitcast i8*%y to i32*
store i32%p,i32*%z,align 4
%A=getelementptr inbounds i8,i8*%t,i64 12
%B=bitcast i8*%A to i32*
store i32%s,i32*%B,align 4
%C=getelementptr inbounds i8,i8*%t,i64 16
%D=bitcast i8*%C to i32*
store i32 1,i32*%D,align 4
%E=call i8*@sml_alloc(i32 inreg 28)#0
%F=getelementptr inbounds i8,i8*%E,i64 -4
%G=bitcast i8*%F to i32*
store i32 1342177304,i32*%G,align 4
%H=load i8*,i8**%d,align 8
%I=bitcast i8*%E to i8**
store i8*%H,i8**%I,align 8
%J=getelementptr inbounds i8,i8*%E,i64 8
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb4textE_945 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%E,i64 16
%M=bitcast i8*%L to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb4textE_945 to void(...)*),void(...)**%M,align 8
%N=getelementptr inbounds i8,i8*%E,i64 24
%O=bitcast i8*%N to i32*
store i32 -2147483647,i32*%O,align 4
ret i8*%E
}
define fastcc i8*@_SMLFN10TermFormat11emptyBtvEnvE(i32 inreg%a,i32 inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%g,label%f
f:
tail call void@sml_check(i32 inreg%d)
br label%g
g:
%h=bitcast i8**%c to i8*
call void@llvm.lifetime.start.p0i8(i64 8,i8*%h)
call void@llvm.gcroot(i8**%c,i8*null)#0
%i=load atomic i32,i32*@sml_check_flag unordered,align 4
%j=icmp eq i32%i,0
br i1%j,label%l,label%k
k:
call void@sml_check(i32 inreg%i)
br label%l
l:
%m=call fastcc i8*@_SMLLN10TermFormat11emptyBtvEnvE_592()
%n=bitcast i8*%m to i32*
%o=load i32,i32*%n,align 4
%p=call fastcc i8*@_SMLLN10TermFormat11emptyBtvEnvE_592()
%q=getelementptr inbounds i8,i8*%p,i64 8
%r=bitcast i8*%q to i8**
%s=load i8*,i8**%r,align 8
store i8*%s,i8**%c,align 8
%t=call i8*@sml_alloc(i32 inreg 20)#0
%u=bitcast i8*%t to i32*
%v=getelementptr inbounds i8,i8*%t,i64 -4
%w=bitcast i8*%v to i32*
store i32 1342177296,i32*%w,align 4
%x=getelementptr inbounds i8,i8*%t,i64 4
%y=bitcast i8*%x to i32*
store i32 0,i32*%y,align 1
store i32%o,i32*%u,align 4
%z=load i8*,i8**%c,align 8
%A=getelementptr inbounds i8,i8*%t,i64 8
%B=bitcast i8*%A to i8**
store i8*%z,i8**%B,align 8
%C=getelementptr inbounds i8,i8*%t,i64 16
%D=bitcast i8*%C to i32*
store i32 2,i32*%D,align 4
call void@llvm.lifetime.end.p0i8(i64 8,i8*%h)
ret i8*%t
}
define internal fastcc i8*@_SMLLN10TermFormat10makeBtvEnvE_951(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
l:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%e,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%j,label%h
h:
call void@sml_check(i32 inreg%f)
%i=load i8*,i8**%d,align 8
br label%j
j:
%k=phi i8*[%i,%h],[%a,%l]
%m=bitcast i8*%k to i32*
%n=load i32,i32*%m,align 4
store i8*null,i8**%d,align 8
%o=getelementptr inbounds i8,i8*%k,i64 4
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=bitcast i8**%c to i8*
call void@llvm.lifetime.start.p0i8(i64 8,i8*%r)
call void@llvm.gcroot(i8**%c,i8*null)#0
%s=call i8*@sml_alloc(i32 inreg 12)#0
%t=bitcast i8*%s to i32*
%u=getelementptr inbounds i8,i8*%s,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177288,i32*%v,align 4
store i8*%s,i8**%c,align 8
store i32%n,i32*%t,align 4
%w=getelementptr inbounds i8,i8*%s,i64 4
%x=bitcast i8*%w to i32*
store i32%q,i32*%x,align 4
%y=getelementptr inbounds i8,i8*%s,i64 8
%z=bitcast i8*%y to i32*
store i32 0,i32*%z,align 4
%A=call i8*@sml_alloc(i32 inreg 28)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177304,i32*%C,align 4
%D=load i8*,i8**%c,align 8
%E=bitcast i8*%A to i8**
store i8*%D,i8**%E,align 8
%F=getelementptr inbounds i8,i8*%A,i64 8
%G=bitcast i8*%F to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10makeBtvEnvE_897 to void(...)*),void(...)**%G,align 8
%H=getelementptr inbounds i8,i8*%A,i64 16
%I=bitcast i8*%H to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10makeBtvEnvE_897 to void(...)*),void(...)**%I,align 8
%J=getelementptr inbounds i8,i8*%A,i64 24
%K=bitcast i8*%J to i32*
store i32 -2147483647,i32*%K,align 4
call void@llvm.lifetime.end.p0i8(i64 8,i8*%r)
%L=load i8*,i8**%e,align 8
store i8*null,i8**%e,align 8
%M=call fastcc i8*@_SMLLN10TermFormat10makeBtvEnvE_897(i8*inreg%D,i8*inreg%L)
ret i8*%M
}
define fastcc i8*@_SMLFN10TermFormat10makeBtvEnvE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10makeBtvEnvE_951 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10makeBtvEnvE_951 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLN10TermFormat12extendBtvEnvE_954(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
l:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%d,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%j,label%h
h:
call void@sml_check(i32 inreg%f)
%i=load i8*,i8**%e,align 8
br label%j
j:
%k=phi i8*[%i,%h],[%a,%l]
%m=bitcast i8*%k to i32*
%n=load i32,i32*%m,align 4
store i8*null,i8**%e,align 8
%o=getelementptr inbounds i8,i8*%k,i64 4
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=bitcast i8**%c to i8*
call void@llvm.lifetime.start.p0i8(i64 8,i8*%r)
call void@llvm.gcroot(i8**%c,i8*null)#0
%s=call i8*@sml_alloc(i32 inreg 12)#0
%t=bitcast i8*%s to i32*
%u=getelementptr inbounds i8,i8*%s,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177288,i32*%v,align 4
store i8*%s,i8**%c,align 8
store i32%n,i32*%t,align 4
%w=getelementptr inbounds i8,i8*%s,i64 4
%x=bitcast i8*%w to i32*
store i32%q,i32*%x,align 4
%y=getelementptr inbounds i8,i8*%s,i64 8
%z=bitcast i8*%y to i32*
store i32 0,i32*%z,align 4
%A=call i8*@sml_alloc(i32 inreg 28)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177304,i32*%C,align 4
%D=load i8*,i8**%c,align 8
%E=bitcast i8*%A to i8**
store i8*%D,i8**%E,align 8
%F=getelementptr inbounds i8,i8*%A,i64 8
%G=bitcast i8*%F to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12extendBtvEnvE_837 to void(...)*),void(...)**%G,align 8
%H=getelementptr inbounds i8,i8*%A,i64 16
%I=bitcast i8*%H to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12extendBtvEnvE_837 to void(...)*),void(...)**%I,align 8
%J=getelementptr inbounds i8,i8*%A,i64 24
%K=bitcast i8*%J to i32*
store i32 -2147483647,i32*%K,align 4
call void@llvm.lifetime.end.p0i8(i64 8,i8*%r)
%L=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%M=call fastcc i8*@_SMLLN10TermFormat12extendBtvEnvE_837(i8*inreg%D,i8*inreg%L)
ret i8*%M
}
define fastcc i8*@_SMLFN10TermFormat12extendBtvEnvE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12extendBtvEnvE_954 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12extendBtvEnvE_954 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLN10TermFormat21extendBtvEnvWithOrderE_957(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
l:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%d,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%j,label%h
h:
call void@sml_check(i32 inreg%f)
%i=load i8*,i8**%e,align 8
br label%j
j:
%k=phi i8*[%i,%h],[%a,%l]
%m=bitcast i8*%k to i32*
%n=load i32,i32*%m,align 4
store i8*null,i8**%e,align 8
%o=getelementptr inbounds i8,i8*%k,i64 4
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=bitcast i8**%c to i8*
call void@llvm.lifetime.start.p0i8(i64 8,i8*%r)
call void@llvm.gcroot(i8**%c,i8*null)#0
%s=call i8*@sml_alloc(i32 inreg 12)#0
%t=bitcast i8*%s to i32*
%u=getelementptr inbounds i8,i8*%s,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177288,i32*%v,align 4
store i8*%s,i8**%c,align 8
store i32%n,i32*%t,align 4
%w=getelementptr inbounds i8,i8*%s,i64 4
%x=bitcast i8*%w to i32*
store i32%q,i32*%x,align 4
%y=getelementptr inbounds i8,i8*%s,i64 8
%z=bitcast i8*%y to i32*
store i32 0,i32*%z,align 4
%A=call i8*@sml_alloc(i32 inreg 28)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177304,i32*%C,align 4
%D=load i8*,i8**%c,align 8
%E=bitcast i8*%A to i8**
store i8*%D,i8**%E,align 8
%F=getelementptr inbounds i8,i8*%A,i64 8
%G=bitcast i8*%F to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat21extendBtvEnvWithOrderE_840 to void(...)*),void(...)**%G,align 8
%H=getelementptr inbounds i8,i8*%A,i64 16
%I=bitcast i8*%H to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat21extendBtvEnvWithOrderE_840 to void(...)*),void(...)**%I,align 8
%J=getelementptr inbounds i8,i8*%A,i64 24
%K=bitcast i8*%J to i32*
store i32 -2147483647,i32*%K,align 4
call void@llvm.lifetime.end.p0i8(i64 8,i8*%r)
%L=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%M=call fastcc i8*@_SMLLN10TermFormat21extendBtvEnvWithOrderE_840(i8*inreg%D,i8*inreg%L)
ret i8*%M
}
define fastcc i8*@_SMLFN10TermFormat21extendBtvEnvWithOrderE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat21extendBtvEnvWithOrderE_957 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat21extendBtvEnvWithOrderE_957 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLN10TermFormat16formatBoundTyvarE_960(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
l:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
store i8*%a,i8**%e,align 8
store i8*%b,i8**%d,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%j,label%h
h:
call void@sml_check(i32 inreg%f)
%i=load i8*,i8**%e,align 8
br label%j
j:
%k=phi i8*[%i,%h],[%a,%l]
%m=bitcast i8*%k to i32*
%n=load i32,i32*%m,align 4
store i8*null,i8**%e,align 8
%o=getelementptr inbounds i8,i8*%k,i64 4
%p=bitcast i8*%o to i32*
%q=load i32,i32*%p,align 4
%r=bitcast i8**%c to i8*
call void@llvm.lifetime.start.p0i8(i64 8,i8*%r)
call void@llvm.gcroot(i8**%c,i8*null)#0
%s=call i8*@sml_alloc(i32 inreg 12)#0
%t=bitcast i8*%s to i32*
%u=getelementptr inbounds i8,i8*%s,i64 -4
%v=bitcast i8*%u to i32*
store i32 1342177288,i32*%v,align 4
store i8*%s,i8**%c,align 8
store i32%n,i32*%t,align 4
%w=getelementptr inbounds i8,i8*%s,i64 4
%x=bitcast i8*%w to i32*
store i32%q,i32*%x,align 4
%y=getelementptr inbounds i8,i8*%s,i64 8
%z=bitcast i8*%y to i32*
store i32 0,i32*%z,align 4
%A=call i8*@sml_alloc(i32 inreg 28)#0
%B=getelementptr inbounds i8,i8*%A,i64 -4
%C=bitcast i8*%B to i32*
store i32 1342177304,i32*%C,align 4
%D=load i8*,i8**%c,align 8
%E=bitcast i8*%A to i8**
store i8*%D,i8**%E,align 8
%F=getelementptr inbounds i8,i8*%A,i64 8
%G=bitcast i8*%F to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat16formatBoundTyvarE_844 to void(...)*),void(...)**%G,align 8
%H=getelementptr inbounds i8,i8*%A,i64 16
%I=bitcast i8*%H to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat16formatBoundTyvarE_844 to void(...)*),void(...)**%I,align 8
%J=getelementptr inbounds i8,i8*%A,i64 24
%K=bitcast i8*%J to i32*
store i32 -2147483647,i32*%K,align 4
call void@llvm.lifetime.end.p0i8(i64 8,i8*%r)
%L=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%M=call fastcc i8*@_SMLLN10TermFormat16formatBoundTyvarE_844(i8*inreg%D,i8*inreg%L)
ret i8*%M
}
define fastcc i8*@_SMLFN10TermFormat16formatBoundTyvarE(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat16formatBoundTyvarE_960 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat16formatBoundTyvarE_960 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 -2147483647,i32*%v,align 4
ret i8*%l
}
define internal fastcc i8*@_SMLLN10TermFormat12formatBtvEnvE_963(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLLN10TermFormat12formatBtvEnvE_849(i8*inreg%m,i32 inreg%p,i32 inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
ret i8*%A
}
define internal fastcc i8*@_SMLLN10TermFormat12formatBtvEnvE_964(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12formatBtvEnvE_963 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat12formatBtvEnvE_963 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define fastcc i8*@_SMLFN10TermFormat12formatBtvEnvE(i32 inreg%a,i32 inreg%b)local_unnamed_addr#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%h,label%g
g:
call void@sml_check(i32 inreg%e)
br label%h
h:
%i=load i8*,i8**getelementptr inbounds(<{[4x i8],i32,[2x i8*]}>,<{[4x i8],i32,[2x i8*]}>*@_SML_gvar6f2b90f74b409277_TermFormat,i64 0,i32 2,i64 0),align 8
%j=getelementptr inbounds i8,i8*%i,i64 16
%k=bitcast i8*%j to i8*(i8*,i8*,i8*)**
%l=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%k,align 8
%m=bitcast i8*%i to i8**
%n=load i8*,i8**%m,align 8
store i8*%n,i8**%c,align 8
%o=call i8*@sml_alloc(i32 inreg 4)#0
%p=bitcast i8*%o to i32*
%q=getelementptr inbounds i8,i8*%o,i64 -4
%r=bitcast i8*%q to i32*
store i32 4,i32*%r,align 4
store i8*%o,i8**%d,align 8
store i32%a,i32*%p,align 4
%s=call i8*@sml_alloc(i32 inreg 4)#0
%t=bitcast i8*%s to i32*
%u=getelementptr inbounds i8,i8*%s,i64 -4
%v=bitcast i8*%u to i32*
store i32 4,i32*%v,align 4
store i32%b,i32*%t,align 4
%w=load i8*,i8**%c,align 8
%x=load i8*,i8**%d,align 8
%y=tail call fastcc i8*%l(i8*inreg%w,i8*inreg%x,i8*inreg%s)
ret i8*%y
}
define internal fastcc i8*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_966(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%d,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%a,%k]
%l=bitcast i8*%j to i8**
%m=load i8*,i8**%l,align 8
%n=getelementptr inbounds i8,i8*%j,i64 8
%o=bitcast i8*%n to i32*
%p=load i32,i32*%o,align 4
store i8*null,i8**%d,align 8
%q=getelementptr inbounds i8,i8*%j,i64 12
%r=bitcast i8*%q to i32*
%s=load i32,i32*%r,align 4
%t=call fastcc i8*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_852(i8*inreg%m,i32 inreg%p,i32 inreg%s)
%u=getelementptr inbounds i8,i8*%t,i64 16
%v=bitcast i8*%u to i8*(i8*,i8*)**
%w=load i8*(i8*,i8*)*,i8*(i8*,i8*)**%v,align 8
%x=bitcast i8*%t to i8**
%y=load i8*,i8**%x,align 8
%z=load i8*,i8**%c,align 8
store i8*null,i8**%c,align 8
%A=call fastcc i8*%w(i8*inreg%y,i8*inreg%z)
ret i8*%A
}
define internal fastcc i8*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_967(i8*inreg%a,i32 inreg%b,i32 inreg%c)#4 gc"smlsharp"{
%d=alloca i8*,align 8
%e=alloca i8*,align 8
call void@llvm.gcroot(i8**%d,i8*null)#0
call void@llvm.gcroot(i8**%e,i8*null)#0
%f=bitcast i8*%a to i8**
%g=load i8*,i8**%f,align 8
store i8*%g,i8**%d,align 8
%h=call i8*@sml_alloc(i32 inreg 20)#0
%i=getelementptr inbounds i8,i8*%h,i64 -4
%j=bitcast i8*%i to i32*
store i32 1342177296,i32*%j,align 4
store i8*%h,i8**%e,align 8
%k=load i8*,i8**%d,align 8
store i8*null,i8**%d,align 8
%l=bitcast i8*%h to i8**
store i8*%k,i8**%l,align 8
%m=getelementptr inbounds i8,i8*%h,i64 8
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%h,i64 12
%p=bitcast i8*%o to i32*
store i32%c,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%h,i64 16
%r=bitcast i8*%q to i32*
store i32 1,i32*%r,align 4
%s=call i8*@sml_alloc(i32 inreg 28)#0
%t=getelementptr inbounds i8,i8*%s,i64 -4
%u=bitcast i8*%t to i32*
store i32 1342177304,i32*%u,align 4
%v=load i8*,i8**%e,align 8
%w=bitcast i8*%s to i8**
store i8*%v,i8**%w,align 8
%x=getelementptr inbounds i8,i8*%s,i64 8
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_966 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%s,i64 16
%A=bitcast i8*%z to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_966 to void(...)*),void(...)**%A,align 8
%B=getelementptr inbounds i8,i8*%s,i64 24
%C=bitcast i8*%B to i32*
store i32 -2147483647,i32*%C,align 4
ret i8*%s
}
define fastcc i8*@_SMLFN10TermFormat20formatBtvEnvWithTypeE(i32 inreg%a,i32 inreg%b)local_unnamed_addr#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%h,label%g
g:
call void@sml_check(i32 inreg%e)
br label%h
h:
%i=load i8*,i8**getelementptr inbounds(<{[4x i8],i32,[2x i8*]}>,<{[4x i8],i32,[2x i8*]}>*@_SML_gvar6f2b90f74b409277_TermFormat,i64 0,i32 2,i64 1),align 8
%j=getelementptr inbounds i8,i8*%i,i64 16
%k=bitcast i8*%j to i8*(i8*,i8*,i8*)**
%l=load i8*(i8*,i8*,i8*)*,i8*(i8*,i8*,i8*)**%k,align 8
%m=bitcast i8*%i to i8**
%n=load i8*,i8**%m,align 8
store i8*%n,i8**%c,align 8
%o=call i8*@sml_alloc(i32 inreg 4)#0
%p=bitcast i8*%o to i32*
%q=getelementptr inbounds i8,i8*%o,i64 -4
%r=bitcast i8*%q to i32*
store i32 4,i32*%r,align 4
store i8*%o,i8**%d,align 8
store i32%a,i32*%p,align 4
%s=call i8*@sml_alloc(i32 inreg 4)#0
%t=bitcast i8*%s to i32*
%u=getelementptr inbounds i8,i8*%s,i64 -4
%v=bitcast i8*%u to i32*
store i32 4,i32*%v,align 4
store i32%b,i32*%t,align 4
%w=load i8*,i8**%c,align 8
%x=load i8*,i8**%d,align 8
%y=tail call fastcc i8*%l(i8*inreg%w,i8*inreg%x,i8*inreg%s)
ret i8*%y
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6begin__E_969(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
k:
%c=alloca i8*,align 8
%d=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
call void@llvm.gcroot(i8**%d,i8*null)#0
store i8*%a,i8**%d,align 8
store i8*%b,i8**%c,align 8
%e=load atomic i32,i32*@sml_check_flag unordered,align 4
%f=icmp eq i32%e,0
br i1%f,label%i,label%g
g:
call void@sml_check(i32 inreg%e)
%h=load i8*,i8**%c,align 8
br label%i
i:
%j=phi i8*[%h,%g],[%b,%k]
store i8*null,i8**%d,align 8
store i8*null,i8**%c,align 8
%l=call fastcc i8*@_SMLLN10TermFormat10FormatComb6begin__E_910(i8*inreg%j)
ret i8*%l
}
define fastcc i8*@_SMLFN10TermFormat10FormatComb6begin__E(i32 inreg%a,i32 inreg%b)#4 gc"smlsharp"{
%c=alloca i8*,align 8
call void@llvm.gcroot(i8**%c,i8*null)#0
%d=call i8*@sml_alloc(i32 inreg 12)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 1342177288,i32*%g,align 4
store i8*%d,i8**%c,align 8
store i32%a,i32*%e,align 4
%h=getelementptr inbounds i8,i8*%d,i64 4
%i=bitcast i8*%h to i32*
store i32%b,i32*%i,align 4
%j=getelementptr inbounds i8,i8*%d,i64 8
%k=bitcast i8*%j to i32*
store i32 0,i32*%k,align 4
%l=call i8*@sml_alloc(i32 inreg 28)#0
%m=getelementptr inbounds i8,i8*%l,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177304,i32*%n,align 4
%o=load i8*,i8**%c,align 8
%p=bitcast i8*%l to i8**
store i8*%o,i8**%p,align 8
%q=getelementptr inbounds i8,i8*%l,i64 8
%r=bitcast i8*%q to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6begin__E_969 to void(...)*),void(...)**%r,align 8
%s=getelementptr inbounds i8,i8*%l,i64 16
%t=bitcast i8*%s to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6begin__E_969 to void(...)*),void(...)**%t,align 8
%u=getelementptr inbounds i8,i8*%l,i64 24
%v=bitcast i8*%u to i32*
store i32 1,i32*%v,align 4
ret i8*%l
}
define fastcc i8*@_SMLFN10TermFormat10FormatComb4end__E(i32 inreg%a,i32 inreg%b)#2 gc"smlsharp"{
%c=load atomic i32,i32*@sml_check_flag unordered,align 4
%d=icmp eq i32%c,0
br i1%d,label%f,label%e
e:
tail call void@sml_check(i32 inreg%c)
br label%f
f:
ret i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@ca,i64 0,i32 2)to i8*)
}
define fastcc i8*@_SMLFN10TermFormat10FormatComb4textE(i32 inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d)#2 gc"smlsharp"{
%e=alloca i8*,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%i,label%h
h:
tail call void@sml_check(i32 inreg%f)
br label%i
i:
%j=bitcast i8**%e to i8*
call void@llvm.lifetime.start.p0i8(i64 8,i8*%j)
call void@llvm.gcroot(i8**%e,i8*null)#0
%k=call i8*@sml_alloc(i32 inreg 20)#0
%l=bitcast i8*%k to i32*
%m=getelementptr inbounds i8,i8*%k,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177296,i32*%n,align 4
store i8*%k,i8**%e,align 8
store i32%a,i32*%l,align 4
%o=getelementptr inbounds i8,i8*%k,i64 4
%p=bitcast i8*%o to i32*
store i32%b,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%k,i64 8
%r=bitcast i8*%q to i32*
store i32%c,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%k,i64 12
%t=bitcast i8*%s to i32*
store i32%d,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%k,i64 16
%v=bitcast i8*%u to i32*
store i32 0,i32*%v,align 4
%w=call i8*@sml_alloc(i32 inreg 28)#0
%x=getelementptr inbounds i8,i8*%w,i64 -4
%y=bitcast i8*%x to i32*
store i32 1342177304,i32*%y,align 4
%z=load i8*,i8**%e,align 8
%A=bitcast i8*%w to i8**
store i8*%z,i8**%A,align 8
%B=getelementptr inbounds i8,i8*%w,i64 8
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb4textE_946 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%w,i64 16
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb4textE_946 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%w,i64 24
%G=bitcast i8*%F to i32*
store i32 -2147483647,i32*%G,align 4
call void@llvm.lifetime.end.p0i8(i64 8,i8*%j)
ret i8*%w
}
define fastcc i8*@_SMLFN10TermFormat10FormatComb5spaceE(i32 inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d)#2 gc"smlsharp"{
%e=alloca i8*,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%i,label%h
h:
tail call void@sml_check(i32 inreg%f)
br label%i
i:
%j=bitcast i8**%e to i8*
call void@llvm.lifetime.start.p0i8(i64 8,i8*%j)
call void@llvm.gcroot(i8**%e,i8*null)#0
%k=call i8*@sml_alloc(i32 inreg 20)#0
%l=bitcast i8*%k to i32*
%m=getelementptr inbounds i8,i8*%k,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177296,i32*%n,align 4
store i8*%k,i8**%e,align 8
store i32%a,i32*%l,align 4
%o=getelementptr inbounds i8,i8*%k,i64 4
%p=bitcast i8*%o to i32*
store i32%b,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%k,i64 8
%r=bitcast i8*%q to i32*
store i32%c,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%k,i64 12
%t=bitcast i8*%s to i32*
store i32%d,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%k,i64 16
%v=bitcast i8*%u to i32*
store i32 0,i32*%v,align 4
%w=call i8*@sml_alloc(i32 inreg 28)#0
%x=getelementptr inbounds i8,i8*%w,i64 -4
%y=bitcast i8*%x to i32*
store i32 1342177304,i32*%y,align 4
%z=load i8*,i8**%e,align 8
%A=bitcast i8*%w to i8**
store i8*%z,i8**%A,align 8
%B=getelementptr inbounds i8,i8*%w,i64 8
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb5spaceE_941 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%w,i64 16
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb5spaceE_941 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%w,i64 24
%G=bitcast i8*%F to i32*
store i32 -2147483647,i32*%G,align 4
call void@llvm.lifetime.end.p0i8(i64 8,i8*%j)
ret i8*%w
}
define fastcc i8*@_SMLFN10TermFormat10FormatComb6dspaceE(i32 inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d)#2 gc"smlsharp"{
%e=alloca i8*,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%i,label%h
h:
tail call void@sml_check(i32 inreg%f)
br label%i
i:
%j=bitcast i8**%e to i8*
call void@llvm.lifetime.start.p0i8(i64 8,i8*%j)
call void@llvm.gcroot(i8**%e,i8*null)#0
%k=call i8*@sml_alloc(i32 inreg 20)#0
%l=bitcast i8*%k to i32*
%m=getelementptr inbounds i8,i8*%k,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177296,i32*%n,align 4
store i8*%k,i8**%e,align 8
store i32%a,i32*%l,align 4
%o=getelementptr inbounds i8,i8*%k,i64 4
%p=bitcast i8*%o to i32*
store i32%b,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%k,i64 8
%r=bitcast i8*%q to i32*
store i32%c,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%k,i64 12
%t=bitcast i8*%s to i32*
store i32%d,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%k,i64 16
%v=bitcast i8*%u to i32*
store i32 0,i32*%v,align 4
%w=call i8*@sml_alloc(i32 inreg 28)#0
%x=getelementptr inbounds i8,i8*%w,i64 -4
%y=bitcast i8*%x to i32*
store i32 1342177304,i32*%y,align 4
%z=load i8*,i8**%e,align 8
%A=bitcast i8*%w to i8**
store i8*%z,i8**%A,align 8
%B=getelementptr inbounds i8,i8*%w,i64 8
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6dspaceE_915 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%w,i64 16
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6dspaceE_915 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%w,i64 24
%G=bitcast i8*%F to i32*
store i32 -2147483647,i32*%G,align 4
call void@llvm.lifetime.end.p0i8(i64 8,i8*%j)
ret i8*%w
}
define fastcc i8*@_SMLFN10TermFormat10FormatComb7newlineE(i32 inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d)#2 gc"smlsharp"{
%e=alloca i8*,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%i,label%h
h:
tail call void@sml_check(i32 inreg%f)
br label%i
i:
%j=bitcast i8**%e to i8*
call void@llvm.lifetime.start.p0i8(i64 8,i8*%j)
call void@llvm.gcroot(i8**%e,i8*null)#0
%k=call i8*@sml_alloc(i32 inreg 20)#0
%l=bitcast i8*%k to i32*
%m=getelementptr inbounds i8,i8*%k,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177296,i32*%n,align 4
store i8*%k,i8**%e,align 8
store i32%a,i32*%l,align 4
%o=getelementptr inbounds i8,i8*%k,i64 4
%p=bitcast i8*%o to i32*
store i32%b,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%k,i64 8
%r=bitcast i8*%q to i32*
store i32%c,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%k,i64 12
%t=bitcast i8*%s to i32*
store i32%d,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%k,i64 16
%v=bitcast i8*%u to i32*
store i32 0,i32*%v,align 4
%w=call i8*@sml_alloc(i32 inreg 28)#0
%x=getelementptr inbounds i8,i8*%w,i64 -4
%y=bitcast i8*%x to i32*
store i32 1342177304,i32*%y,align 4
%z=load i8*,i8**%e,align 8
%A=bitcast i8*%w to i8**
store i8*%z,i8**%A,align 8
%B=getelementptr inbounds i8,i8*%w,i64 8
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb7newlineE_933 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%w,i64 16
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb7newlineE_933 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%w,i64 24
%G=bitcast i8*%F to i32*
store i32 -2147483647,i32*%G,align 4
call void@llvm.lifetime.end.p0i8(i64 8,i8*%j)
ret i8*%w
}
define fastcc i8*@_SMLFN10TermFormat10FormatComb1_DE(i32 inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d)#2 gc"smlsharp"{
%e=alloca i8*,align 8
%f=load atomic i32,i32*@sml_check_flag unordered,align 4
%g=icmp eq i32%f,0
br i1%g,label%i,label%h
h:
tail call void@sml_check(i32 inreg%f)
br label%i
i:
%j=bitcast i8**%e to i8*
call void@llvm.lifetime.start.p0i8(i64 8,i8*%j)
call void@llvm.gcroot(i8**%e,i8*null)#0
%k=call i8*@sml_alloc(i32 inreg 20)#0
%l=bitcast i8*%k to i32*
%m=getelementptr inbounds i8,i8*%k,i64 -4
%n=bitcast i8*%m to i32*
store i32 1342177296,i32*%n,align 4
store i8*%k,i8**%e,align 8
store i32%a,i32*%l,align 4
%o=getelementptr inbounds i8,i8*%k,i64 4
%p=bitcast i8*%o to i32*
store i32%b,i32*%p,align 4
%q=getelementptr inbounds i8,i8*%k,i64 8
%r=bitcast i8*%q to i32*
store i32%c,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%k,i64 12
%t=bitcast i8*%s to i32*
store i32%d,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%k,i64 16
%v=bitcast i8*%u to i32*
store i32 0,i32*%v,align 4
%w=call i8*@sml_alloc(i32 inreg 28)#0
%x=getelementptr inbounds i8,i8*%w,i64 -4
%y=bitcast i8*%x to i32*
store i32 1342177304,i32*%y,align 4
%z=load i8*,i8**%e,align 8
%A=bitcast i8*%w to i8**
store i8*%z,i8**%A,align 8
%B=getelementptr inbounds i8,i8*%w,i64 8
%C=bitcast i8*%B to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb1_DE_902 to void(...)*),void(...)**%C,align 8
%D=getelementptr inbounds i8,i8*%w,i64 16
%E=bitcast i8*%D to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb1_DE_902 to void(...)*),void(...)**%E,align 8
%F=getelementptr inbounds i8,i8*%w,i64 24
%G=bitcast i8*%F to i32*
store i32 -2147483647,i32*%G,align 4
call void@llvm.lifetime.end.p0i8(i64 8,i8*%j)
ret i8*%w
}
define fastcc i8*@_SMLFN10TermFormat10FormatComb6guard__E(i32 inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e,i32 inreg%f)#2 gc"smlsharp"{
%g=alloca i8*,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%k,label%j
j:
tail call void@sml_check(i32 inreg%h)
br label%k
k:
%l=bitcast i8**%g to i8*
call void@llvm.lifetime.start.p0i8(i64 8,i8*%l)
call void@llvm.gcroot(i8**%g,i8*null)#0
%m=call i8*@sml_alloc(i32 inreg 28)#0
%n=bitcast i8*%m to i32*
%o=getelementptr inbounds i8,i8*%m,i64 -4
%p=bitcast i8*%o to i32*
store i32 1342177304,i32*%p,align 4
store i8*%m,i8**%g,align 8
store i32%a,i32*%n,align 4
%q=getelementptr inbounds i8,i8*%m,i64 4
%r=bitcast i8*%q to i32*
store i32%b,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%m,i64 8
%t=bitcast i8*%s to i32*
store i32%c,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%m,i64 12
%v=bitcast i8*%u to i32*
store i32%d,i32*%v,align 4
%w=getelementptr inbounds i8,i8*%m,i64 16
%x=bitcast i8*%w to i32*
store i32%e,i32*%x,align 4
%y=getelementptr inbounds i8,i8*%m,i64 20
%z=bitcast i8*%y to i32*
store i32%f,i32*%z,align 4
%A=getelementptr inbounds i8,i8*%m,i64 24
%B=bitcast i8*%A to i32*
store i32 0,i32*%B,align 4
%C=call i8*@sml_alloc(i32 inreg 28)#0
%D=getelementptr inbounds i8,i8*%C,i64 -4
%E=bitcast i8*%D to i32*
store i32 1342177304,i32*%E,align 4
%F=load i8*,i8**%g,align 8
%G=bitcast i8*%C to i8**
store i8*%F,i8**%G,align 8
%H=getelementptr inbounds i8,i8*%C,i64 8
%I=bitcast i8*%H to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6guard__E_924 to void(...)*),void(...)**%I,align 8
%J=getelementptr inbounds i8,i8*%C,i64 16
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb6guard__E_924 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%C,i64 24
%M=bitcast i8*%L to i32*
store i32 -2147483647,i32*%M,align 4
call void@llvm.lifetime.end.p0i8(i64 8,i8*%l)
ret i8*%C
}
define fastcc i8*@_SMLFN10TermFormat10FormatComb5nest__E(i32 inreg%a,i32 inreg%b,i32 inreg%c,i32 inreg%d,i32 inreg%e,i32 inreg%f)#2 gc"smlsharp"{
%g=alloca i8*,align 8
%h=load atomic i32,i32*@sml_check_flag unordered,align 4
%i=icmp eq i32%h,0
br i1%i,label%k,label%j
j:
tail call void@sml_check(i32 inreg%h)
br label%k
k:
%l=bitcast i8**%g to i8*
call void@llvm.lifetime.start.p0i8(i64 8,i8*%l)
call void@llvm.gcroot(i8**%g,i8*null)#0
%m=call i8*@sml_alloc(i32 inreg 28)#0
%n=bitcast i8*%m to i32*
%o=getelementptr inbounds i8,i8*%m,i64 -4
%p=bitcast i8*%o to i32*
store i32 1342177304,i32*%p,align 4
store i8*%m,i8**%g,align 8
store i32%a,i32*%n,align 4
%q=getelementptr inbounds i8,i8*%m,i64 4
%r=bitcast i8*%q to i32*
store i32%b,i32*%r,align 4
%s=getelementptr inbounds i8,i8*%m,i64 8
%t=bitcast i8*%s to i32*
store i32%c,i32*%t,align 4
%u=getelementptr inbounds i8,i8*%m,i64 12
%v=bitcast i8*%u to i32*
store i32%d,i32*%v,align 4
%w=getelementptr inbounds i8,i8*%m,i64 16
%x=bitcast i8*%w to i32*
store i32%e,i32*%x,align 4
%y=getelementptr inbounds i8,i8*%m,i64 20
%z=bitcast i8*%y to i32*
store i32%f,i32*%z,align 4
%A=getelementptr inbounds i8,i8*%m,i64 24
%B=bitcast i8*%A to i32*
store i32 0,i32*%B,align 4
%C=call i8*@sml_alloc(i32 inreg 28)#0
%D=getelementptr inbounds i8,i8*%C,i64 -4
%E=bitcast i8*%D to i32*
store i32 1342177304,i32*%E,align 4
%F=load i8*,i8**%g,align 8
%G=bitcast i8*%C to i8**
store i8*%F,i8**%G,align 8
%H=getelementptr inbounds i8,i8*%C,i64 8
%I=bitcast i8*%H to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb5nest__E_929 to void(...)*),void(...)**%I,align 8
%J=getelementptr inbounds i8,i8*%C,i64 16
%K=bitcast i8*%J to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb5nest__E_929 to void(...)*),void(...)**%K,align 8
%L=getelementptr inbounds i8,i8*%C,i64 24
%M=bitcast i8*%L to i32*
store i32 -2147483647,i32*%M,align 4
call void@llvm.lifetime.end.p0i8(i64 8,i8*%l)
ret i8*%C
}
define fastcc i8*@_SMLFN10TermFormat10FormatComb4putsE(i32 inreg%a,i32 inreg%b)#2 gc"smlsharp"{
%c=alloca i8*,align 8
%d=load atomic i32,i32*@sml_check_flag unordered,align 4
%e=icmp eq i32%d,0
br i1%e,label%g,label%f
f:
tail call void@sml_check(i32 inreg%d)
br label%g
g:
%h=bitcast i8**%c to i8*
call void@llvm.lifetime.start.p0i8(i64 8,i8*%h)
call void@llvm.gcroot(i8**%c,i8*null)#0
%i=call i8*@sml_alloc(i32 inreg 12)#0
%j=bitcast i8*%i to i32*
%k=getelementptr inbounds i8,i8*%i,i64 -4
%l=bitcast i8*%k to i32*
store i32 1342177288,i32*%l,align 4
store i8*%i,i8**%c,align 8
store i32%a,i32*%j,align 4
%m=getelementptr inbounds i8,i8*%i,i64 4
%n=bitcast i8*%m to i32*
store i32%b,i32*%n,align 4
%o=getelementptr inbounds i8,i8*%i,i64 8
%p=bitcast i8*%o to i32*
store i32 0,i32*%p,align 4
%q=call i8*@sml_alloc(i32 inreg 28)#0
%r=getelementptr inbounds i8,i8*%q,i64 -4
%s=bitcast i8*%r to i32*
store i32 1342177304,i32*%s,align 4
%t=load i8*,i8**%c,align 8
%u=bitcast i8*%q to i8**
store i8*%t,i8**%u,align 8
%v=getelementptr inbounds i8,i8*%q,i64 8
%w=bitcast i8*%v to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb4putsE_937 to void(...)*),void(...)**%w,align 8
%x=getelementptr inbounds i8,i8*%q,i64 16
%y=bitcast i8*%x to void(...)**
store void(...)*bitcast(i8*(i8*,i8*)*@_SMLLN10TermFormat10FormatComb4putsE_937 to void(...)*),void(...)**%y,align 8
%z=getelementptr inbounds i8,i8*%q,i64 24
%A=bitcast i8*%z to i32*
store i32 -2147483647,i32*%A,align 4
call void@llvm.lifetime.end.p0i8(i64 8,i8*%h)
ret i8*%q
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb4textE_991(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN10TermFormat10FormatComb4textE_195(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb5spaceE_994(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN10TermFormat10FormatComb5spaceE_203(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6dspaceE_997(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN10TermFormat10FormatComb6dspaceE_210(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb7newlineE_1000(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN10TermFormat10FormatComb7newlineE_218(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb1_DE_1003(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN10TermFormat10FormatComb1_DE_225(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb8guardEndE_1006(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN10TermFormat10FormatComb8guardEndE_233(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6guard__E_1009(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6guard__E_1010(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#4 gc"smlsharp"{
%f=bitcast i8*%b to i32*
%g=load i32,i32*%f,align 4
%h=bitcast i8*%c to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%d to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%e to i32*
%m=load i32,i32*%l,align 4
%n=tail call fastcc i8*@_SMLLN10TermFormat10FormatComb6guard__E_244(i8*inreg%a,i32 inreg%g,i32 inreg%i,i32 inreg%k,i32 inreg%m)
ret i8*%n
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb7nestEndE_1012(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN10TermFormat10FormatComb7nestEndE_251(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb7nestEndE_1013(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=bitcast i8*%b to i32*
%d=load i32,i32*%c,align 4
%e=tail call fastcc i8*@_SMLLN10TermFormat10FormatComb7nestEndE_253(i8*inreg%a,i32 inreg%d)
ret i8*%e
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb5nest__E_1016(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb5nest__E_1017(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#4 gc"smlsharp"{
%f=bitcast i8*%b to i32*
%g=load i32,i32*%f,align 4
%h=bitcast i8*%c to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%d to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%e to i32*
%m=load i32,i32*%l,align 4
%n=tail call fastcc i8*@_SMLLN10TermFormat10FormatComb5nest__E_262(i8*inreg%a,i32 inreg%g,i32 inreg%i,i32 inreg%k,i32 inreg%m)
ret i8*%n
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb5nest__E_1018(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=bitcast i8*%b to i32*
%d=load i32,i32*%c,align 4
%e=tail call fastcc i8*@_SMLLN10TermFormat10FormatComb5nest__E_263(i8*inreg%a,i32 inreg%d)
ret i8*%e
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_1021(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_1022(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_1023(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_276(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_1024(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_281(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_1025(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_285(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_1026(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_287(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_1027(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_289(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat13formatAppListE_1029(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat13formatAppListE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat13formatSeqListE_1030(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat13formatSeqListE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat14formatDeclListE_1031(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat14formatDeclListE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat14formatCaseListE_1032(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat14formatCaseListE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat20formatEnclosedOptionE_1033(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat20formatEnclosedOptionE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat20formatOptionalOptionE_1034(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat20formatOptionalOptionE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat12formatOptionE_1035(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat12formatOptionE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat12keyValuePairE_1036(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLN10TermFormat12keyValuePairE_1037(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLN10TermFormat12keyValuePairE_1038(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat12keyValuePairE_338(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat12keyValuePairE_1039(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat12keyValuePairE_341(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat12keyValuePairE_1040(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=bitcast i8*%b to i32*
%d=load i32,i32*%c,align 4
%e=tail call fastcc i8*@_SMLLN10TermFormat12keyValuePairE_343(i8*inreg%a,i32 inreg%d)
ret i8*%e
}
define internal fastcc i8*@_SMLLN10TermFormat12keyValuePairE_1041(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat12keyValuePairE_344(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat12keyValuePairE_1042(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat12keyValuePairE_346(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat12keyValuePairE_1043(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat12keyValuePairE_349(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat12keyValuePairE_1044(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat12keyValuePairE_351(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat12keyValuePairE_1045(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat12keyValuePairE_353(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat12keyValuePairE_1046(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat12keyValuePairE_355(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat17formatEnclosedMapE_1048(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#4 gc"smlsharp"{
%f=bitcast i8*%b to i32*
%g=load i32,i32*%f,align 4
%h=bitcast i8*%c to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%d to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%e to i32*
%m=load i32,i32*%l,align 4
%n=tail call fastcc i8*@_SMLLN10TermFormat17formatEnclosedMapE_363(i8*inreg%a,i32 inreg%g,i32 inreg%i,i32 inreg%k,i32 inreg%m)
ret i8*%n
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedSEnvE_1050(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat18formatEnclosedSEnvE_367(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedSEnvE_1051(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat18formatEnclosedSEnvE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_1052(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_1053(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_1054(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_380(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_1055(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_385(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_1056(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_389(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_1057(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_391(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_1058(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_393(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat18formatEnclosedListE_1059(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat18formatEnclosedListE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_1060(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_1061(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_1062(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=bitcast i8*%b to i32*
%d=load i32,i32*%c,align 4
%e=tail call fastcc i8*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_404(i8*inreg%a,i32 inreg%d)
ret i8*%e
}
define internal fastcc i8*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_1063(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_406(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_1064(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_409(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_1065(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_412(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_1066(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_414(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_1067(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_416(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat23formatEnclosedSEnvPlainE_1068(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat23formatEnclosedSEnvPlainE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_1069(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_1070(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_1071(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=bitcast i8*%b to i32*
%d=load i32,i32*%c,align 4
%e=tail call fastcc i8*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_428(i8*inreg%a,i32 inreg%d)
ret i8*%e
}
define internal fastcc i8*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_1072(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_430(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_1073(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_433(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_1074(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_436(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_1075(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_438(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_1076(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_440(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat28formatEnclosedSymbolEnvPlainE_1077(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat28formatEnclosedSymbolEnvPlainE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb9assocListE_1078(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb9assocListE_1079(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#4 gc"smlsharp"{
%f=bitcast i8*%b to i32*
%g=load i32,i32*%f,align 4
%h=bitcast i8*%c to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%d to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%e to i32*
%m=load i32,i32*%l,align 4
%n=tail call fastcc i8*@_SMLFN10TermFormat10FormatComb9assocListE(i32 inreg%g,i32 inreg%i,i32 inreg%k,i32 inreg%m)
ret i8*%n
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6recordE_1080(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat10FormatComb6recordE_469(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6recordE_1081(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLFN10TermFormat10FormatComb6recordE(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat15formatRecordExpE_1082(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat15formatRecordExpE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat21formatRecordExpToJsonE_1083(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat21formatRecordExpToJsonE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_1084(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_1085(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_1086(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_523(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_1087(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_528(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_1088(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_1089(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_1090(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_536(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_1091(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_539(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_1092(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_542(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_1093(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_545(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_1094(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_547(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_1095(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_550(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_1096(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_552(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_1097(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_554(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat14formatRecordTyE_1098(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat14formatRecordTyE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat19formatDummyRecordTyE_1099(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat19formatDummyRecordTyE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat16formatIfNonEmptyE_1100(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN10TermFormat16formatIfNonEmptyE_574(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat13formatIfEmptyE_1102(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN10TermFormat13formatIfEmptyE_578(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat25formatIfNonEmptySymbolMapE_1104(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN10TermFormat25formatIfNonEmptySymbolMapE_582(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat22formatIfEmptySymbolMapE_1106(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN10TermFormat22formatIfEmptySymbolMapE_586(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat15formatFreeTyvarE_1116(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=bitcast i8*%b to i32*
%d=load i32,i32*%c,align 4
%e=tail call fastcc i8*@_SMLFN10TermFormat15formatFreeTyvarE(i32 inreg%d)
ret i8*%e
}
define internal fastcc i8*@_SMLLN10TermFormat6lookupE_1117(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=bitcast i8*%b to i32*
%d=load i32,i32*%c,align 4
%e=tail call fastcc i8*@_SMLLN10TermFormat6lookupE_628(i8*inreg%a,i32 inreg%d)
ret i8*%e
}
define internal fastcc i8*@_SMLLN10TermFormat16formatBoundTyvarE_1121(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=bitcast i8*%b to i32*
%d=load i32,i32*%c,align 4
%e=tail call fastcc i8*@_SMLLN10TermFormat16formatBoundTyvarE_648(i8*inreg%a,i32 inreg%d)
ret i8*%e
}
define internal fastcc i8*@_SMLL6tyvars_1123(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i32@_SMLL6tyvars_657(i8*inreg%b)
%d=tail call i8*@sml_alloc(i32 inreg 4)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 4,i32*%g,align 4
store i32%c,i32*%e,align 4
ret i8*%d
}
define internal fastcc i8*@_SMLLN10TermFormat12formatBtvEnvE_1124(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN10TermFormat12formatBtvEnvE_661(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat12formatBtvEnvE_1125(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN10TermFormat12formatBtvEnvE_663(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLL6tyvars_1126(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i32@_SMLL6tyvars_668(i8*inreg%b)
%d=tail call i8*@sml_alloc(i32 inreg 4)#0
%e=bitcast i8*%d to i32*
%f=getelementptr inbounds i8,i8*%d,i64 -4
%g=bitcast i8*%f to i32*
store i32 4,i32*%g,align 4
store i32%c,i32*%e,align 4
ret i8*%d
}
define internal fastcc i8*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_1127(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_672(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_1128(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_674(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb4listE_1129(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat10FormatComb4listE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6tuple2E_1131(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6tuple2E_1132(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#4 gc"smlsharp"{
%f=bitcast i8*%b to i32*
%g=load i32,i32*%f,align 4
%h=bitcast i8*%c to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%d to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%e to i32*
%m=load i32,i32*%l,align 4
%n=tail call fastcc i8*@_SMLFN10TermFormat10FormatComb6tuple2E(i32 inreg%g,i32 inreg%i,i32 inreg%k,i32 inreg%m)
ret i8*%n
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6tuple3E_1133(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6tuple3E_1134(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e,i8*inreg%f,i8*inreg%g)#4 gc"smlsharp"{
%h=bitcast i8*%b to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%c to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%d to i32*
%m=load i32,i32*%l,align 4
%n=bitcast i8*%e to i32*
%o=load i32,i32*%n,align 4
%p=bitcast i8*%f to i32*
%q=load i32,i32*%p,align 4
%r=bitcast i8*%g to i32*
%s=load i32,i32*%r,align 4
%t=tail call fastcc i8*@_SMLFN10TermFormat10FormatComb6tuple3E(i32 inreg%i,i32 inreg%k,i32 inreg%m,i32 inreg%o,i32 inreg%q,i32 inreg%s)
ret i8*%t
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6tuple4E_1135(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6tuple4E_1136(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e,i8*inreg%f,i8*inreg%g,i8*inreg%h,i8*inreg%i)#4 gc"smlsharp"{
%j=bitcast i8*%b to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%c to i32*
%m=load i32,i32*%l,align 4
%n=bitcast i8*%d to i32*
%o=load i32,i32*%n,align 4
%p=bitcast i8*%e to i32*
%q=load i32,i32*%p,align 4
%r=bitcast i8*%f to i32*
%s=load i32,i32*%r,align 4
%t=bitcast i8*%g to i32*
%u=load i32,i32*%t,align 4
%v=bitcast i8*%h to i32*
%w=load i32,i32*%v,align 4
%x=bitcast i8*%i to i32*
%y=load i32,i32*%x,align 4
%z=tail call fastcc i8*@_SMLFN10TermFormat10FormatComb6tuple4E(i32 inreg%k,i32 inreg%m,i32 inreg%o,i32 inreg%q,i32 inreg%s,i32 inreg%u,i32 inreg%w,i32 inreg%y)
ret i8*%z
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb4putsE_1137(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
tail call fastcc void@_SMLLN10TermFormat10FormatComb4putsE_713(i8*inreg%b)
%c=tail call i8*@sml_alloc(i32 inreg 4)#0
%d=bitcast i8*%c to i32*
%e=getelementptr inbounds i8,i8*%c,i64 -4
%f=bitcast i8*%e to i32*
store i32 4,i32*%f,align 4
store i32 0,i32*%d,align 4
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb4putsE_1138(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN10TermFormat10FormatComb4putsE_716(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb4termE_1140(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLFN10TermFormat10FormatComb4termE(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_1141(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_1142(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_1143(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_790(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_1144(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_799(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_1145(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_802(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_1146(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_805(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_1147(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_808(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_1148(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_810(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_1149(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_813(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_1150(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_816(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_1151(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_818(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_1152(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat15formatFormatExpE_828(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat12formatFormatE_1153(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat12formatFormatE_831(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat7btvNameE_1156(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=bitcast i8*%b to i32*
%d=load i32,i32*%c,align 4
%e=tail call fastcc i8*@_SMLFN10TermFormat7btvNameE(i32 inreg%d)
ret i8*%e
}
define internal fastcc i8*@_SMLLN10TermFormat12formatBtvEnvE_1161(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN10TermFormat12formatBtvEnvE_849(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_1162(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_852(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat22formatEnclosedLabelMapE_1163(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat22formatEnclosedLabelMapE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat17formatEnclosedMapE_1164(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e,i8*inreg%f,i8*inreg%g)#4 gc"smlsharp"{
%h=bitcast i8*%b to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%c to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%d to i32*
%m=load i32,i32*%l,align 4
%n=bitcast i8*%e to i32*
%o=load i32,i32*%n,align 4
%p=bitcast i8*%f to i32*
%q=load i32,i32*%p,align 4
%r=bitcast i8*%g to i32*
%s=load i32,i32*%r,align 4
%t=tail call fastcc i8*@_SMLFN10TermFormat17formatEnclosedMapE(i32 inreg%i,i32 inreg%k,i32 inreg%m,i32 inreg%o,i32 inreg%q,i32 inreg%s)
ret i8*%t
}
define internal fastcc i8*@_SMLLN10TermFormat12formatFormatE_1165(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLFN10TermFormat12formatFormatE(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat12formatIfConsE_1166(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat12formatIfConsE_864(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat12formatIfConsE_1167(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
ret i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@bX,i64 0,i32 2)to i8*)
}
define internal fastcc i8*@_SMLLN10TermFormat13formatIfEmptyE_1168(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat13formatIfEmptyE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat19formatIfEmptyFormatE_1169(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLFN10TermFormat19formatIfEmptyFormatE(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat22formatIfEmptySymbolMapE_1170(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat22formatIfEmptySymbolMapE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat12formatIfListE_1171(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%c to i32*
%e=load i32,i32*%d,align 4
%f=tail call fastcc i8*@_SMLFN10TermFormat12formatIfListE(i32 inreg undef,i32 inreg%e)
ret i8*%f
}
define internal fastcc i8*@_SMLLN10TermFormat16formatIfNonEmptyE_1172(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat16formatIfNonEmptyE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat25formatIfNonEmptySymbolMapE_1173(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat25formatIfNonEmptySymbolMapE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat18formatOptionalListE_1174(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat18formatOptionalListE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat7ftvNameE_1175(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=bitcast i8*%b to i32*
%d=load i32,i32*%c,align 4
%e=tail call fastcc i8*@_SMLFN10TermFormat7ftvNameE(i32 inreg%d)
ret i8*%e
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6begin__E_1178(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6begin__E_1179(i8*inreg%a,i8*inreg%b)#4 gc"smlsharp"{
ret i8*%b
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb4end__E_1183(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=tail call fastcc i8*@_SMLLN10TermFormat10FormatComb4end__E_918(i8*inreg%b)
ret i8*%c
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb5nest__E_1186(i8*inreg%a,i8*inreg%b)#2 gc"smlsharp"{
%c=bitcast i8*%b to i32*
%d=load i32,i32*%c,align 4
%e=tail call fastcc i8*@_SMLLN10TermFormat10FormatComb5nest__E_928(i8*inreg%a,i32 inreg%d)
ret i8*%e
}
define internal fastcc i8*@_SMLLN10TermFormat11emptyBtvEnvE_1192(i8*inreg%a,i8*inreg%b,i8*inreg%c)#2 gc"smlsharp"{
%d=tail call fastcc i8*@_SMLFN10TermFormat11emptyBtvEnvE(i32 inreg undef,i32 inreg undef)
ret i8*%d
}
define internal fastcc i8*@_SMLLN10TermFormat10makeBtvEnvE_1193(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat10makeBtvEnvE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat12extendBtvEnvE_1194(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat12extendBtvEnvE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat21extendBtvEnvWithOrderE_1195(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat21extendBtvEnvWithOrderE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat16formatBoundTyvarE_1196(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat16formatBoundTyvarE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat12formatBtvEnvE_1197(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN10TermFormat12formatBtvEnvE_964(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_1199(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLLN10TermFormat20formatBtvEnvWithTypeE_967(i8*inreg%a,i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6begin__E_1201(i8*inreg%a,i8*inreg%b,i8*inreg%c)#4 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat10FormatComb6begin__E(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb4end__E_1202(i8*inreg%a,i8*inreg%b,i8*inreg%c)#2 gc"smlsharp"{
%d=tail call fastcc i8*@_SMLFN10TermFormat10FormatComb4end__E(i32 inreg undef,i32 inreg undef)
ret i8*bitcast(i8**getelementptr inbounds(<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>,<{[4x i8],i32,i8*,void(...)*,void(...)*,i32}>*@ca,i64 0,i32 2)to i8*)
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb4textE_1203(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#2 gc"smlsharp"{
%f=bitcast i8*%b to i32*
%g=load i32,i32*%f,align 4
%h=bitcast i8*%c to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%d to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%e to i32*
%m=load i32,i32*%l,align 4
%n=tail call fastcc i8*@_SMLFN10TermFormat10FormatComb4textE(i32 inreg%g,i32 inreg%i,i32 inreg%k,i32 inreg%m)
ret i8*%n
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb5spaceE_1204(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#2 gc"smlsharp"{
%f=bitcast i8*%b to i32*
%g=load i32,i32*%f,align 4
%h=bitcast i8*%c to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%d to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%e to i32*
%m=load i32,i32*%l,align 4
%n=tail call fastcc i8*@_SMLFN10TermFormat10FormatComb5spaceE(i32 inreg%g,i32 inreg%i,i32 inreg%k,i32 inreg%m)
ret i8*%n
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6dspaceE_1205(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#2 gc"smlsharp"{
%f=bitcast i8*%b to i32*
%g=load i32,i32*%f,align 4
%h=bitcast i8*%c to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%d to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%e to i32*
%m=load i32,i32*%l,align 4
%n=tail call fastcc i8*@_SMLFN10TermFormat10FormatComb6dspaceE(i32 inreg%g,i32 inreg%i,i32 inreg%k,i32 inreg%m)
ret i8*%n
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb7newlineE_1206(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#2 gc"smlsharp"{
%f=bitcast i8*%b to i32*
%g=load i32,i32*%f,align 4
%h=bitcast i8*%c to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%d to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%e to i32*
%m=load i32,i32*%l,align 4
%n=tail call fastcc i8*@_SMLFN10TermFormat10FormatComb7newlineE(i32 inreg%g,i32 inreg%i,i32 inreg%k,i32 inreg%m)
ret i8*%n
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb1_DE_1207(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e)#2 gc"smlsharp"{
%f=bitcast i8*%b to i32*
%g=load i32,i32*%f,align 4
%h=bitcast i8*%c to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%d to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%e to i32*
%m=load i32,i32*%l,align 4
%n=tail call fastcc i8*@_SMLFN10TermFormat10FormatComb1_DE(i32 inreg%g,i32 inreg%i,i32 inreg%k,i32 inreg%m)
ret i8*%n
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb6guard__E_1208(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e,i8*inreg%f,i8*inreg%g)#2 gc"smlsharp"{
%h=bitcast i8*%b to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%c to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%d to i32*
%m=load i32,i32*%l,align 4
%n=bitcast i8*%e to i32*
%o=load i32,i32*%n,align 4
%p=bitcast i8*%f to i32*
%q=load i32,i32*%p,align 4
%r=bitcast i8*%g to i32*
%s=load i32,i32*%r,align 4
%t=tail call fastcc i8*@_SMLFN10TermFormat10FormatComb6guard__E(i32 inreg%i,i32 inreg%k,i32 inreg%m,i32 inreg%o,i32 inreg%q,i32 inreg%s)
ret i8*%t
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb5nest__E_1209(i8*inreg%a,i8*inreg%b,i8*inreg%c,i8*inreg%d,i8*inreg%e,i8*inreg%f,i8*inreg%g)#2 gc"smlsharp"{
%h=bitcast i8*%b to i32*
%i=load i32,i32*%h,align 4
%j=bitcast i8*%c to i32*
%k=load i32,i32*%j,align 4
%l=bitcast i8*%d to i32*
%m=load i32,i32*%l,align 4
%n=bitcast i8*%e to i32*
%o=load i32,i32*%n,align 4
%p=bitcast i8*%f to i32*
%q=load i32,i32*%p,align 4
%r=bitcast i8*%g to i32*
%s=load i32,i32*%r,align 4
%t=tail call fastcc i8*@_SMLFN10TermFormat10FormatComb5nest__E(i32 inreg%i,i32 inreg%k,i32 inreg%m,i32 inreg%o,i32 inreg%q,i32 inreg%s)
ret i8*%t
}
define internal fastcc i8*@_SMLLN10TermFormat10FormatComb4putsE_1210(i8*inreg%a,i8*inreg%b,i8*inreg%c)#2 gc"smlsharp"{
%d=bitcast i8*%b to i32*
%e=load i32,i32*%d,align 4
%f=bitcast i8*%c to i32*
%g=load i32,i32*%f,align 4
%h=tail call fastcc i8*@_SMLFN10TermFormat10FormatComb4putsE(i32 inreg%e,i32 inreg%g)
ret i8*%h
}
declare void@llvm.memcpy.p0i8.p0i8.i32(i8*,i8*,i32,i1)#0
declare void@llvm.memset.p0i8.i32(i8*,i8,i32,i1)#0
declare void@llvm.lifetime.start.p0i8(i64,i8*)#0
declare void@llvm.lifetime.end.p0i8(i64,i8*)#0
attributes#0={nounwind}
attributes#1={noreturn}
attributes#2={uwtable}
attributes#3={noreturn nounwind}
attributes#4={nounwind uwtable}
